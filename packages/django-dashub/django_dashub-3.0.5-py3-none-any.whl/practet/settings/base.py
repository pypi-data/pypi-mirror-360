"""
Django settings for practet project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import importlib
import os
from datetime import timedelta
from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/
ALLOWED_HOSTS = ["*"]
ENABLE_LOG = config("ENABLE_LOG", cast=bool, default=False)

# Application definition

INSTALLED_APPS = [
    'dashub',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third Party Apps
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'filehub',
    'import_export',
    'tinymce',
    'nested_admin',
    'drf_standardized_errors',
    'django_celery_beat',
    'silk',
    'corsheaders',
    'django_hosts',
    'crispy_forms',
    'crispy_bootstrap5',

    # Custom Apps
    'apps.dashboard',
    'apps.core',
    'apps.user',
    'apps.multitenant',
    'apps.community',
    'apps.vocabulary',
    'apps.subscription',
    'apps.coupon',
    'apps.helpdesk',
    'apps.marketing',
    'courses.ielts.speaking',
    'courses.ielts.writing',
    'courses.ielts.reading',
    'courses.ielts.listening',

    'courses.ielts.analytics',
]

AUTH_USER_MODEL = "user.User"

MIDDLEWARE = [
    'django_hosts.middleware.HostsRequestMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'silk.middleware.SilkyMiddleware',
    'django_country2.middleware.CountryMiddleware',
    'django_hosts.middleware.HostsResponseMiddleware'
]

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'apps', ),
            os.path.join(BASE_DIR, 'filehub', ),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

ROOT_URLCONF = 'practet.urls'
ROOT_HOSTCONF = 'practet.hosts'
DEFAULT_HOST = 'default'
WSGI_APPLICATION = 'practet.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'
DATETIME_FORMAT = 'M d, Y, h:i A (e)'
USE_I18N = True
USE_TZ = True
COUNTRY_CODE = "US"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": config("DB_ENGINE", cast=str),
        "NAME": config("DB_NAME", cast=str),
        "USER": config("DB_USER", cast=str),
        "PASSWORD": config("DB_PASSWORD", cast=str),
        "HOST": config("DB_HOST", cast=str),
        "PORT": config("DB_PORT", cast=int),
        'CONN_MAX_AGE': 600
    }
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Mail Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config("EMAIL_HOST")
EMAIL_PORT = config("EMAIL_PORT")
EMAIL_USE_TLS = config("EMAIL_USE_TLS", True)
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL")
DEFAULT_FROM_NAME = config("DEFAULT_FROM_NAME", "Practet")

# Django Rest Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'practet.packages.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'EXCEPTION_HANDLER': 'drf_standardized_errors.handler.exception_handler',
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    )
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=config("ACCESS_TOKEN_LIFETIME", default=5, cast=int)),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=config("REFRESH_TOKEN_LIFETIME", default=1, cast=int)),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
    "ALGORITHM": "HS512",
}

DRF_STANDARDIZED_ERRORS = {
    "ENABLE_IN_DEBUG_FOR_UNHANDLED_EXCEPTIONS": True
}

LOGIN_URL = '/admin/'
LOGIN_REDIRECT_URL = LOGIN_URL
X_FRAME_OPTIONS = 'SAMEORIGIN'
WEBSITE_URL = config("WEBSITE_URL")
API_URL = config("API_URL")
ADMIN_URL = config("ADMIN_URL")

CORS_ALLOW_ALL_ORIGINS = True

# GROQ
GROQ_API_KEY = config("GROQ_API_KEY")
DEEPGRAM_API_KEY = config("DEEPGRAM_API_KEY")

# CRISPY Configuration
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"
ADMIN_ACTIONS_AS_BUTTONS = True

# Dashboard Config
CONFIG_DIR = os.path.join(BASE_DIR, "practet", "settings", "config")
for filename in os.listdir(CONFIG_DIR):
    if filename.endswith(".py") and filename != "__init__.py":
        module_name = f"practet.settings.config.{filename[:-3]}"
        module = importlib.import_module(module_name)
        globals().update({k: v for k, v in vars(module).items() if not k.startswith("_")})
