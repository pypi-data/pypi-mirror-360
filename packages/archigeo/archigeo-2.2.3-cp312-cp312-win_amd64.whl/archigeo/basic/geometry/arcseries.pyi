from _typeshed import Incomplete

class ArcSeries:
    arcs: Incomplete
    s3d: Incomplete
    def __init__(self, arcs=[], space3d: Incomplete | None = None) -> None: ...
    def get_arc3ds(self): ...
    def get_total_length(self): ...
    def get_area(self): ...
    def get_curvature_byirate(self, index_rate): ...
    def get_curvature_bylength(self, length): ...
    @classmethod
    def PolylineArcSeries(cls, pts: list[list[float]]): ...

class SmoothArcSeries(ArcSeries):
    def __init__(self, pts, start_tangent_angle, s3d: Incomplete | None = None) -> None: ...
    def s3d_move(self, move_vec) -> None: ...
    def radial_move(self, d, lefthand: bool = False) -> None: ...
    def total_turning(self): ...
    def absolute_total_turning(self): ...
    def is_convex_curve(self): ...
    @classmethod
    def SymSmoothArcSeries(cls, pt1: list[float], pt2: list[float], start_tangent_angle: float): ...

class NCenCir(SmoothArcSeries):
    def __init__(self, pts, start_tangent_angle, s3d: Incomplete | None = None) -> None: ...
    @classmethod
    def generate_chamrect(cls, w, d, r, h: int = 0): ...
    @classmethod
    def generate_4cencir_byblendpt(cls, blendpt, k_angle, h: int = 0): ...
    @classmethod
    def generate_4cencir_byabk(cls, a, b, k_angle, h: int = 0): ...
    @classmethod
    def generate_4cencir_byabr(cls, a, b, r1, h: int = 0): ...
    @classmethod
    def generate_8cencir_byblendpt(cls, blendpt1, blendpt2, delta_angle, h: int = 0): ...
    @classmethod
    def generate_8cencir_byabr(cls, a, b, r1, r2, r3, h: int = 0): ...
    @classmethod
    def generate_8cencir_byab(cls, a, b, blendpt1, k_angle2, h: int = 0): ...
    @classmethod
    def generate_8cencir_byabrk(cls, a, b, r1, k_angle1, k_angle2, h: int = 0): ...
