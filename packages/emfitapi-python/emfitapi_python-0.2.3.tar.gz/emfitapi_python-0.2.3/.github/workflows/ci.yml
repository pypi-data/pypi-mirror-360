# ABOUTME: GitHub Actions CI workflow for emfitapi-python
# ABOUTME: Runs tests, linting, formatting, and type checking on multiple Python versions

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install dependencies
      run: uv sync --locked

    - name: Run ruff linting
      run: uv run ruff check .

    - name: Run ruff formatting check
      run: uv run ruff format --check .

    - name: Run tests with coverage
      run: uv run pytest --cov=emfit --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.13'
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  test-e2e:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'test-e2e')

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "latest"

    - name: Set up Python 3.13
      run: uv python install 3.13

    - name: Install dependencies
      run: uv sync --locked

    - name: Run end-to-end tests
      run: uv run pytest tests/test_e2e.py -v
      env:
        EMFIT_USERNAME: ${{ secrets.EMFIT_TEST_USERNAME }}
        EMFIT_PASSWORD: ${{ secrets.EMFIT_TEST_PASSWORD }}
        EMFIT_DEVICE_ID: ${{ secrets.EMFIT_TEST_DEVICE_ID }}

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "latest"

    - name: Set up Python 3.13
      run: uv python install 3.13

    - name: Install dependencies
      run: uv sync --locked

    - name: Run security checks with safety
      run: uv run safety check
      continue-on-error: true

    - name: Run bandit security linter
      run: uv run bandit -r emfit/ -f json -o bandit-report.json
      continue-on-error: true

    - name: Upload bandit results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        version: "latest"

    - name: Set up Python 3.13
      run: uv python install 3.13

    - name: Install dependencies
      run: uv sync --locked

    - name: Build package
      run: uv build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

    - name: Test package installation
      run: |
        uv venv test-env
        uv pip install --python test-env dist/*.whl
        uv run --python test-env python -c "from emfit.api import EmfitAPI; print('Package installed successfully')"
