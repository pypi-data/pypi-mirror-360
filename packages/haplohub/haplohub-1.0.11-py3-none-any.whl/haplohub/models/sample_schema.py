# coding: utf-8

"""
HaploHub API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from pydantic import BaseModel, StrictInt, constr


class SampleSchema(BaseModel):
    """
    SampleSchema
    """

    member_id: Optional[StrictInt] = None
    id: Optional[StrictInt] = None
    sample_id: Optional[constr(strict=True, max_length=255)] = None
    created: Optional[datetime] = None
    __properties = ["member_id", "id", "sample_id", "created"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SampleSchema:
        """Create an instance of SampleSchema from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # set to None if member_id (nullable) is None
        # and __fields_set__ contains the field
        if self.member_id is None and "member_id" in self.__fields_set__:
            _dict["member_id"] = None

        # set to None if id (nullable) is None
        # and __fields_set__ contains the field
        if self.id is None and "id" in self.__fields_set__:
            _dict["id"] = None

        # set to None if sample_id (nullable) is None
        # and __fields_set__ contains the field
        if self.sample_id is None and "sample_id" in self.__fields_set__:
            _dict["sample_id"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SampleSchema:
        """Create an instance of SampleSchema from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SampleSchema.parse_obj(obj)

        _obj = SampleSchema.parse_obj(
            {
                "member_id": obj.get("member_id"),
                "id": obj.get("id"),
                "sample_id": obj.get("sample_id"),
                "created": obj.get("created"),
            }
        )
        return _obj
