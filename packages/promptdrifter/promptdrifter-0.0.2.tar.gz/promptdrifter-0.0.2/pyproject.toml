[project]
name = "promptdrifter"
version = "0.0.2"
description = "One-command CI guardrail that catches prompt drift and fails the build when your LLM answers change."
authors = [
    {name = "Colby Timm"}
]
license = {text = "MIT"}
readme = "scripts/pypi-readme.md"
requires-python = ">=3.11"
dependencies = [
    "typer (>=0.16.0,<0.17.0)",
    "rich (>=14.0.0,<15.0.0)",
    "openai (>=1.77.0,<2.0.0)",
    "httpx (>=0.28.1,<0.29.0)",
    "pyyaml (>=6.0.2,<7.0.0)",
    "importlib-resources (>=6.5.2,<7.0.0)",
    "coverage (>=7.8.0,<8.0.0)",
    "jsonschema (>=4.23.0,<5.0.0)",
    "rapidfuzz (>=3.0.0,<4.0.0)",
    "jinja2>=3.1.6",
    "packaging>=23.2",
]
keywords = ["llm", "prompt engineering", "testing", "ci", "developer tools", "cli", "prompt drift"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Utilities",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
]

[project.urls]
Homepage = "https://github.com/Code-and-Sorts/PromptDrifter"
Repository = "https://github.com/Code-and-Sorts/PromptDrifter"
"Bug Tracker" = "https://github.com/Code-and-Sorts/PromptDrifter/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.scripts]
promptdrifter = "promptdrifter.cli:app"

[tool.hatch.build.targets.wheel]
packages = ["src/promptdrifter"]

[project.optional-dependencies]
dev = [
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.14.0",
    "pytest (>=8.3.5,<9.0.0)",
    "pytest-asyncio (>=1.0.0,<1.1.0)",
    "ruff>=0.11.8",
    "respx (>=0.22.0,<0.23.0)",
]
similarity = [
    "sentence-transformers>=2.9.0",
]

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint]
# Allow unused variables in `__init__.py` and `tests/` files.
# Often useful for imports that are part of the public API or test setup.
per-file-ignores = {"__init__.py" = ["F401"], "tests/*" = ["F401", "S101"]}
select = ["E4", "E7", "E9", "F", "W", "I001", "UP004"] # F: Pyflakes, E/W: pycodestyle, I: isort, UP: pyupgrade

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"

[tool.coverage.report]
fail_under = 80
show_missing = true
