[build-system]
requires = ["setuptools>=64.0", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "academy-py"
version = "0.2.0"
authors = [
    {name = "Greg Pauloski", email = "jgpauloski@uchicago.edu"},
    {name = "Globus Labs"},
]
maintainers = [
    {name = "Greg Pauloski", email = "jgpauloski@uchicago.edu"},
]
description = "Build and deploy stateful agents across federated resources."
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
]
dependencies = [
    "aiohttp",
    "aiologic",
    "click!=8.1.4",
    "culsans",
    "globus_sdk>=3.46,<4",
    "proxystore>=0.8.0",
    "pydantic>=2,<3",
    "redis",
    "tomli ; python_version<'3.11'",
    "typing-extensions>=4.3.0 ; python_version<'3.11'",
]

[project.urls]
Homepage = "https://academy.proxystore.dev"
Documentation = "https://academy.proxystore.dev"
Source = "https://github.com/proxystore/academy"

[project.optional-dependencies]
dev = [
    "covdefaults>=2.2",
    "coverage",
    "mypy",
    "pre-commit",
    "pytest",
    "pytest-asyncio>=1",
    "pytest-cov",
    "ruff>=0.2.0",
    "tox",
    "virtualenv",
]
docs = [
    "black==25.1.0",
    "griffe==1.7.3",
    "griffe-pydantic==1.1.4",
    "mkdocs-autorefs==1.4.1",
    "mkdocs-gen-files==0.5.0",
    "mkdocs-literate-nav==0.6.2",
    "mkdocs-material==9.6.12",
    "mkdocs-section-index==0.3.10",
    "mkdocstrings==0.29.1",
    "mkdocstrings-python==1.16.10",
    "mike==2.1.3",
]

[tool.codespell]
skip = """
.git,
.github,
__pycache__,
build,
dist,
.*egg-info
"""

[tool.coverage.run]
plugins = ["covdefaults"]
concurrency = ["multiprocessing", "thread"]
omit = [
    # This module is implicitly tested when running mypy on the
    # package and tests, rather then when pytest is run.
    "academy/mypy_plugin.py",
]
parallel = true

[tool.mypy]
python_version = "3.12"
plugins = [
    "academy/mypy_plugin.py",
    "mypy.plugins.proper_plugin",
    "proxystore.mypy_plugin",
    "pydantic.mypy",
]
check_untyped_defs = true
disable_error_code = "import-untyped"
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "testing.*"
allow_incomplete_defs = true
allow_untyped_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
allow_incomplete_defs = true
allow_untyped_defs = true

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "auto"

[tool.ruff]
line-length = 79
target-version = "py39"

[tool.ruff.format]
indent-style = "space"
line-ending = "lf"
quote-style = "single"

[tool.ruff.lint]
# See all rules here: https://beta.ruff.rs/docs/rules
select = [
    # pyflakes
    "F",
    # pycodestyle
    "E",
    # mccabe
    "C90",
    # isort
    "I",
    # pep8-naming
    "N",
    # pydocstyle
    "D",
    # pyupgrade
    "UP",
    # flake8-2020
    "YTT",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-commas
    "COM",
    # flake8-comprehensions
    "C4",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # PyLint
    "PL",
    # ruff-specific
    "RUF",
]
extend-ignore = [
    # Allow builtin module shadowing.
    "A005",
    # Do not require: module (D100), package (D104), magic method (D105),
    # or __init__ (D107) docstrings.
    "D100", "D104", "D105", "D107",
    # Allow nested with statements.
    "SIM117",
]

[tool.ruff.lint.flake8-pytest-style]
parametrize-values-type = "tuple"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.isort]
force-single-line = true
known-first-party = ["academy", "test", "testing"]
order-by-type = false
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"*/__init__.py" = ["F401"]
"tests/conftest.py" = ["F401"]
"*/*_test.py" = ["D10"]
"examples/*" = ["D"]
"testing/*" = ["D"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.setuptools.packages.find]
exclude = ["tests*", "testing*"]
namespaces = false
