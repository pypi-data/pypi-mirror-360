[build-system]
build-backend = "hatchling.build"
requires = [ "hatchling" ]

[project]
name = "bacformer"
version = "0.1.0"
description = "Modeling bacterial genomes."
readme = { file = "README.md", content-type = "text/markdown" }
keywords = [ "bacteria", "bioinformatics", "genomics", "prokaryotes", "transformers" ]
license = "Apache-2.0"
license-files = [ "LICENSE" ]
maintainers = [
  { name = "Maciej Wiatrak", email = "macwiatrak@gmail.com" },
]
authors = [
  { name = "Maciej Wiatrak" },
]
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering :: Bio-Informatics",
]
dependencies = [
  "accelerate>=0.28",
  "biopython>=1.83",
  "dataclasses-json>=0.6.1",
  "datasets>=2.21",
  "hf-xet>=1.0.5",
  "igraph>=0.11.8",
  "leidenalg~=0.10.2",
  "pandas>=2.2.3",
  "pyarrow>=19.0.1",
  "scanpy>=1.11.1",
  # for debug logging (referenced from the issue template)
  "session-info",
  "tensorboardx>=2.6.2",
  "torch>=2.5.1",
  "torchmetrics>=1.7.1",
  "transformers>=4.38.2",
  "typed-argument-parser>=1.8.1",
]

optional-dependencies.dev = [
  "pre-commit",
  "twine>=4.0.2",
]
optional-dependencies.docs = [
  "docutils>=0.8,!=0.18.*,!=0.19.*",
  "ipykernel",
  "ipython",
  "myst-nb>=1.1",
  "pandas",
  # Until pybtex >0.24.0 releases: https://bitbucket.org/pybtex-devs/pybtex/issues/169/
  "setuptools",
  "sphinx>=4",
  "sphinx-autodoc-typehints",
  "sphinx-book-theme>=1",
  "sphinx-copybutton",
  "sphinx-tabs",
  "sphinxcontrib-bibtex>=1",
  "sphinxext-opengraph",
]
optional-dependencies.faesm = [
  "faesm[flash-attn]>=0.1.1",
  "flash-attn>=0.2",
]
optional-dependencies.faiss = [
  "faiss-cpu",
]
optional-dependencies.notebook = [ "ipywidgets", "jupyterlab" ]
optional-dependencies.test = [
  "coverage",
  "pytest",
]
urls.Documentation = "https://bacformer.readthedocs.io/"
urls.Homepage = "https://github.com/macwiatrak/Bacformer"
urls.Source = "https://github.com/macwiatrak/Bacformer"

[tool.hatch.build.targets.wheel]
packages = [ "bacformer" ]
# Include any non-code resources here if needed:
# include = ["bacformer/data/*.json"]

[tool.hatch.envs.default]
installer = "uv"
features = [ "dev" ]

[tool.hatch.envs.docs]
features = [ "docs" ]
scripts.build = "sphinx-build -M html docs docs/_build {args}"
scripts.open = "python -m webbrowser -t docs/_build/html/index.html"
scripts.clean = "git clean -fdX -- {args:docs}"

[tool.hatch.envs.hatch-test]
features = [ "test" ]

[tool.ruff]
line-length = 120
src = [ "bacformer" ]
extend-exclude = [ "*.ipynb" ]

format.docstring-code-format = true

lint.select = [
  "B",      # flake8-bugbear
  "BLE",    # flake8-blind-except
  "C4",     # flake8-comprehensions
  "D",      # pydocstyle
  "E",      # Error detected by Pycodestyle
  "F",      # Errors detected by Pyflakes
  "I",      # isort
  "RUF100", # Report unused noqa directives
  "TID",    # flake8-tidy-imports
  "UP",     # pyupgrade
  "W",      # Warning detected by Pycodestyle
]
lint.ignore = [
  "B008", # Errors from function calls in argument defaults. These are fine when the result is immutable.
  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "D105", # __magic__ methods are often self-explanatory, allow missing docstrings
  "D107", # Missing docstring in __init__
  # Disable one in each pair of mutually incompatible rules
  "D203", # We don’t want a blank line before a class docstring
  "D213", # <> We want docstrings to start immediately after the opening triple quote
  "D400", # first line should end with a period [Bug: doesn’t work with single-line docstrings]
  "D401", # First line should be in imperative mood; try rephrasing
  "E501", # line too long -> we accept long comment lines; formatter gets rid of long code lines
  "E731", # Do not assign a lambda expression, use a def -> lambda expression assignments are convenient
  "E741", # allow I, O, l as variable names -> I is the identity matrix
]

lint.per-file-ignores."*/__init__.py" = [ "F401" ]
lint.per-file-ignores."docs/*" = [ "I" ]
lint.per-file-ignores."tests/*" = [ "D" ]
lint.pydocstyle.convention = "numpy"

[tool.pytest.ini_options]
testpaths = [ "tests" ]
xfail_strict = true
addopts = [
  "--import-mode=importlib", # allow using test files with same name
]

[tool.coverage.run]
source = [ "bacformer" ]
omit = [
  "**/test_*.py",
  "tutorials/*",
]

[tool.cruft]
skip = [
  "tests",
  "docs/api.md",
  "docs/changelog.md",
  "docs/references.bib",
  "docs/references.md",
  "docs/notebooks/example.ipynb",
  "tutorials/*",
]
