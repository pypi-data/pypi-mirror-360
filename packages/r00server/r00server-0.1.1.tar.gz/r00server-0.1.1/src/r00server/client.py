import random
import time
from typing import List

import niquests
from pathlib import Path
from r00logger import log
from r00secret import secret
from platformdirs import user_cache_dir

class ServerUploadError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º–æ–µ, –∫–æ–≥–¥–∞ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."""

    def __init__(self, message: str):
        super().__init__(message)


class ServerDownloadError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º–æ–µ, –∫–æ–≥–¥–∞ –ø–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."""

    def __init__(self, message: str):
        super().__init__(message)


class FileServer:
    def __init__(self):
        self.server_url = secret.fileserver.host
        self.cache_dir = Path(user_cache_dir())
        self.cache_dir.mkdir(parents=True, exist_ok=True)
        self.client = niquests.Session(
            pool_maxsize=1000, multiplexed=True, keepalive_delay=60
        )  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.client.headers.update({'Connection': 'keep-alive'})

    def exist_file(self, remote_path: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å –ø–æ–º–æ—â—å—é HEAD-–∑–∞–ø—Ä–æ—Å–∞.

        :param remote_path: –£–¥–∞–ª—ë–Ω–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –Ω–∞–ø—Ä–∏–º–µ—Ä "configs/1.txt".
                            –ù–µ –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ '/'.
        :return: True, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ False.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å –Ω–µ –ø—É—Å—Ç–æ–π –∏ –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if not remote_path or remote_path.endswith('/'):
            return False

        url = f"{self.server_url}/file/{remote_path}"
        try:
            response = self.client.head(url, timeout=10)
            # 200 OK –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω
            if response.status_code == 200:
                return True
            # 404 Not Found –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
            elif response.status_code == 404:
                return False
            # –í –¥—Ä—É–≥–∏—Ö —Å–ª—É—á–∞—è—Ö (–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ç.–¥.) —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
            else:
                log.warning(
                    f"–ü–æ–ª—É—á–µ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å {response.status_code} "
                    f"–ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {remote_path}"
                )
                return False
        except niquests.exceptions.RequestException as e:
            # –í —Å–ª—É—á–∞–µ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–∞ —Ç–∞–∫–∂–µ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
            log.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ {remote_path}: {e}")
            return False

    def list(self, remote_folder: str, recursive: bool = True) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ.
        :param remote_folder: –£–¥–∞–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä "configs/".
        :param recursive: –ï—Å–ª–∏ True, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.
        :return: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä ["configs/1.txt", "configs/2.txt", "configs/backup/1.txt"].
        """
        # –£–±–∏—Ä–∞–µ–º –≤–µ–¥—É—â–∏–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ —Å–ª—ç—à–∏
        folder = remote_folder.strip("/")
        url = f"{self.server_url}/list/{folder}"
        response = self.client.get(url)
        if not response.ok:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è '{remote_folder}': {response.status_code}")
        data = response.json()
        # data –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–∏: "folder", "files", "directories"
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–ª–Ω—ã–º –ø—É—Ç–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä–Ω—è —Å–µ—Ä–≤–µ—Ä–∞
        files = [f"{folder}/{f}" for f in data.get("files", [])]

        if recursive:
            for d in data.get("directories", []):
                subfolder = f"{folder}/{d}"
                try:
                    subfiles = self.list(subfolder, recursive=True)
                    files.extend(subfiles)
                except Exception as e:
                    log.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–ª—è –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ '{subfolder}': {e}")
        return files

    def _download_dir(self, remote_dir: Path) -> Path:
        """
        –°–∫–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–µ, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
        :param remote_dir: –£–¥–∞–ª–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å.
        :return: –õ–æ–∫–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –≤ –∫–æ—Ç–æ—Ä—É—é –±—ã–ª–∏ —Å–∫–∞—á–∞–Ω—ã —Ñ–∞–π–ª—ã.
        """
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏ –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ
        remote_files = self.list(str(remote_dir), recursive=True)
        for server_path in remote_files:
            filepath = self.download(server_path)
        return filepath.parent

    def download(self, remote_path: str, local_path=None, force=True, retries: int = 3) -> Path:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞.
        :param remote_path: –£–¥–∞–ª—ë–Ω–Ω—ã–π –ø—É—Ç—å configs/1.txt. –°–∫–∞—á–∞—Ç—å –ø–∞–ø–∫—É: —É–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–æ–Ω—Ü–µ "/" (—Ç–∏–ø str)
        :param local_path: –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å, –∫—É–¥–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∞–π–ª.
        :param force: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        :param retries: –ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π
        :return:
        """
        full_remote_path = f"{self.server_url}/file/{remote_path}"
        if full_remote_path.endswith('/'):
            folder_dir = self._download_dir(Path(remote_path))
            return folder_dir

        remote_path = Path(remote_path)
        local_path = self.cache_dir / remote_path if not local_path else Path(local_path)

        if local_path.exists() and not force:
            return local_path

        for i in range(retries):
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            log.trace(f'üíª Download file: {remote_path}')
            file_response = self.client.get(full_remote_path)
            if not file_response.ok:
                raise FileNotFoundError(f"Failed to download {remote_path}")

            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Content-Length
            content_length = file_response.headers.get("Content-Length")
            if content_length is None:
                raise ServerDownloadError(f"–°–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è {remote_path}")

            expected_size = int(content_length)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            local_path.parent.mkdir(parents=True, exist_ok=True)
            total_bytes = 0
            with open(local_path, 'wb') as f:
                for chunk in file_response.iter_content(chunk_size=8192):
                    if chunk:  # –§–∏–ª—å—Ç—Ä—É–µ–º keep-alive chunks
                        f.write(chunk)
                        total_bytes += len(chunk)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if total_bytes != expected_size:
                local_path.unlink(missing_ok=True)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –Ω–µ —Å–æ–≤–ø–∞–ª
                sleep_time = self._get_sleep(retries)
                log.warning(f"üíª –ù–µ —Å–º–æ–≥ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å —Å–µ—Ä—Ä–≤–µ—Ä–∞: {remote_path}\n"
                            f"–†–∞–∑–º–µ—Ä —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç: {total_bytes} != {expected_size}\n"
                            f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {sleep_time:.2f} —Å–µ–∫...")
                time.sleep(sleep_time)
                continue

            return local_path
        else:
            raise ServerDownloadError(f"–ù–µ —Å–º–æ–≥ —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞: {full_remote_path}")

    def _upload_dir(self, local_dir: Path, remote_dir: Path):
        local_dir = local_dir.expanduser()
        for file in local_dir.rglob("*"):
            if file.is_file():
                # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å —Ñ–∞–π–ª–∞ –æ—Ç –∫–æ—Ä–Ω—è local_dir
                rel_path = file.relative_to(local_dir)
                # –§–æ—Ä–º–∏—Ä—É–µ–º —É–¥–∞–ª—ë–Ω–Ω—ã–π –ø—É—Ç—å, –æ–±—ä–µ–¥–∏–Ω—è—è remote_dir –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                remote_file = remote_dir / rel_path
                self.upload(str(file), str(remote_file))


    def upload(
            self,
            local_path: str,
            remote_path: str,
            retries: int = 3
    ) -> bool:
        """
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π backoff —Å jitter.
        """
        if str(local_path).endswith('/'):
            self._upload_dir(Path(local_path), Path(remote_path))
            return True

        file = Path(local_path)
        if not file.exists():
            raise FileNotFoundError(f"–õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        file_size = file.stat().st_size
        metadata = {"path": remote_path, "size": str(file_size)}

        for attempt in range(1, retries + 1):
            try:
                with file.open("rb") as f:
                    response = self.client.post(
                        url=f"{self.server_url}/upload",
                        data=metadata,
                        files={"file": (remote_path, f)},
                        timeout=30 + file_size // (1024 * 100)  # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
                    )

                if self._validate_response(response, file_size):
                    log.trace(f'üíª Upload file: {remote_path}')
                    return True

            except IOError as e:
                self._log_error("üíª I/O Error", remote_path, attempt, e)
                raise  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
            except Exception as e:
                self._log_error("üíª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞", remote_path, attempt, e)

            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É –∑–∞–∫–∞—á–∫–∏ —Ñ–∞–π–ª–∞
            sleep_time = self._get_sleep(retries)
            log.debug(f"üíª –ù–µ —Å–º–æ–≥ –∑–∞–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª –Ω–∞ —Å–µ—Ä—Ä–≤–µ—Ä: {remote_path}\n"
                      f"–ó–∞–ø—É—â–µ–Ω –ª–∏ uviicorn –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ?\n"
                      f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {sleep_time:.2f} —Å–µ–∫...")
            time.sleep(sleep_time)

        raise ServerUploadError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {file} –ø–æ—Å–ª–µ {retries} –ø–æ–ø—ã—Ç–æ–∫")

    def _validate_response(self, response, expected_size: int) -> bool:
        if response.status_code == 200:
            if response.json().get("size") == expected_size:
                return True
            log.warning("üíª –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        return False

    def _log_error(self, error_type: str, path: str, attempt: int, exception: Exception):
        log.error(
            f"[{error_type.upper()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {path} "
            f"(–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {str(exception)}"
        )

    def _get_sleep(self, attempt):
        return (1 + attempt) + random.uniform(0, 1)


serv = FileServer()
