import os
import subprocess
import sys
import shutil
from pathlib import Path
from .utils import creer_fichier, copier_dossier

class EnvironnementGenerator:
    """Classe de base pour g√©n√©rer des environnements"""
    
    def __init__(self, niveau: str, type_app: str, chemin: str):
        self.niveau = niveau
        self.type_app = type_app
        self.chemin_projet = Path(chemin).resolve()
        self.packages = []
        self.template_dir = Path(__file__).parent / 'templates' / niveau
        
    def _installer_dependances(self):
        """Installe les packages n√©cessaires"""
        if self.packages:
            print(f"üîß Installation des packages: {', '.join(self.packages)}")
            subprocess.run([sys.executable, '-m', 'pip', 'install'] + self.packages)
        
    def _copier_template(self):
        """Copie les fichiers du template"""
        if self.template_dir.exists():
            copier_dossier(self.template_dir, self.chemin_projet)
        else:
            print(f"‚ö†Ô∏è Avertissement: Template {self.niveau} non trouv√©, cr√©ation de base")
            self._creer_structure_base()
    
    def _creer_structure_base(self):
        """Cr√©e une structure de base si le template est manquant"""
        creer_fichier(self.chemin_projet / 'app.py', "# Votre application Flask")
        (self.chemin_projet / 'templates').mkdir(exist_ok=True)
        creer_fichier(self.chemin_projet / 'templates/index.html', "<h1>Bienvenue</h1>")
        
    def _post_creation(self):
        """Actions suppl√©mentaires apr√®s cr√©ation"""
        pass
        
    def generer(self):
        """M√©thode principale pour g√©n√©rer l'environnement"""
        self.chemin_projet.mkdir(exist_ok=True, parents=True)
        print(f"üèóÔ∏è Cr√©ation de l'environnement {self.niveau} ({self.type_app})...")
        
        self._copier_template()
        self._creer_structure()
        self._installer_dependances()
        self._post_creation()
        
        print(f"‚úÖ Environnement cr√©√© avec succ√®s dans {self.chemin_projet}")
        print("üëâ Pour d√©marrer: cd " + str(self.chemin_projet))

class DebutantWebGenerator(EnvironnementGenerator):
    """G√©n√©rateur pour d√©butants - Site web simple"""
    
    def __init__(self, chemin):
        super().__init__('debutant', 'web', chemin)
        self.packages = ['flask', 'python-dotenv']
    
    def _creer_structure(self):
        # Personnalisation suppl√©mentaire
        creer_fichier(
            self.chemin_projet / 'README.md',
            f"# Mon Premier Projet Flask\n\nCe projet a √©t√© cr√©√© avec SEO pour les d√©butants!"
        )

class IntermediaireWebGenerator(EnvironnementGenerator):
    """G√©n√©rateur interm√©diaire - Applications web compl√®tes"""
    
    def __init__(self, chemin):
        super().__init__('intermediaire', 'web', chemin)
        self.packages = [
            'flask',
            'flask-sqlalchemy',
            'flask-wtf',
            'flask-login',
            'flask-migrate',
            'python-dotenv'
        ]
    
    def _creer_structure(self):
        # Cr√©ation de la base de donn√©es
        db_path = self.chemin_projet / 'app.db'
        if not db_path.exists():
            with open(db_path, 'w') as f:
                f.write("")
        
        # Cr√©ation du fichier requirements
        creer_fichier(
            self.chemin_projet / 'requirements.txt',
            "\n".join(self.packages)
        )

class ProWebGenerator(EnvironnementGenerator):
    """G√©n√©rateur pro - Applications professionnelles"""
    
    def __init__(self, chemin):
        super().__init__('pro', 'web', chemin)
        self.packages = [
            'flask',
            'flask-restx',
            'flask-cors',
            'flask-sqlalchemy',
            'flask-migrate',
            'flask-jwt-extended',
            'python-dotenv',
            'gunicorn',
            'psycopg2-binary'
        ]
    
    def _post_creation(self):
        # Initialiser un d√©p√¥t Git
        try:
            subprocess.run(['git', 'init', str(self.chemin_projet)], check=True)
            print("üì¶ D√©p√¥t Git initialis√©")
        except:
            print("‚ö†Ô∏è Git non install√©, ignore l'initialisation du d√©p√¥t")

# Interface simplifi√©e
def creer_environnement(niveau, type_app='web', chemin='.'):
    """
    Cr√©e un environnement de d√©veloppement adapt√©
    
    Args:
        niveau: 'debutant', 'intermediaire' ou 'pro'
        type_app: 'web' ou 'mobile' (d√©faut: 'web')
        chemin: Chemin o√π cr√©er le projet (d√©faut: dossier actuel)
    """
    generators = {
        'debutant': DebutantWebGenerator,
        'intermediaire': IntermediaireWebGenerator,
        'pro': ProWebGenerator
    }
    
    if niveau not in generators:
        raise ValueError(f"üö´ Niveau non support√©: {niveau}")
    
    generator = generators[niveau](chemin)
    generator.generer()
    
    # Ajout des instructions sp√©cifiques
    if niveau == 'debutant':
        print("\nüöÄ Pour d√©marrer votre application:")
        print(f"cd {chemin}")
        print("python app.py")
    elif niveau == 'intermediaire':
        print("\nüöÄ Pour initialiser la base de donn√©es:")
        print(f"cd {chemin}")
        print("flask db init")
        print("flask db migrate")
        print("flask db upgrade")
        print("flask run")
    else:
        print("\nüöÄ Pour d√©marrer avec Docker:")
        print(f"cd {chemin}")
        print("docker-compose up --build")

# Alias pour une utilisation plus simple
creer_projet = creer_environnement