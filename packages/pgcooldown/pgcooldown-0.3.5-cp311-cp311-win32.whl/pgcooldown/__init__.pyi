from typing import Any, Callable
from dataclasses import InitVar, dataclass

class Cooldown:
    duration: float
    temperature: float
    remaining: float
    normalized: float
    paused: bool

    def __init__(self, duration: float, cold: bool = False, paused: bool = False) -> None: ...
    def __repr__(self) -> str: ...
    def __call__(self) -> float: ...
    def __hash__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __int__(self) -> int: ...
    def __float__(self) -> float: ...
    def __lt__(self, other: 'Cooldown' | float) -> bool: ...
    def __le__(self, other: 'Cooldown' | float) -> bool: ...
    def __eq__(self, other: 'Cooldown' | float) -> bool: ...
    def __ne__(self, other: 'Cooldown' | float) -> bool: ...
    def __gt__(self, other: 'Cooldown' | float) -> bool: ...
    def __ge__(self, other: 'Cooldown' | float) -> bool: ...
    def reset(self, new: int = 0, wrap: bool = False) -> None: ...
    def cold(self) -> bool: ...
    def set_cold(self) -> None: ...
    def hot(self) -> bool: ...
    def set_to(self, t: int = 0) -> None: ...
    def remaining(self) -> float: ...
    def normalized(self) -> float: ...
    def pause(self) -> None: ...
    def is_paused(self) -> bool: ...
    def start(self) -> None: ...

@dataclass
class LerpThing:
    vt0: float
    vt1: float
    duration: InitVar[Cooldown | float]
    ease: Callable[[float], float] = ...
    repeat: int = ...
    def __post_init__(self, duration: float) -> None: ...
    def __call__(self) -> float: ...
    def finished(self) -> bool: ...
    def __init__(self, vt0: float, vt1: float, duration: float, ease=callable[[float], float], repeat: int = 0) -> None: ...

class AutoLerpThing:
    def __set_name__(self, obj: Any, name: str) -> None: ...
    def __set__(self, obj: Any, val: float) -> None: ...
    def __get__(self, obj: Any, parent: Any): ...

@dataclass(order=True)
class Cronjob:
    cooldown: Cooldown | float
    task: callable = ...
    repeat: False = ...
    def __post_init__(self) -> None: ...
    def __init__(self, cooldown: Cooldown, task: callable, repeat: bool) -> None: ...

class CronD:
    heap: list
    def __init__(self) -> None: ...
    def add(self, cooldown: Cooldown, task: callable, repeat: bool = False): ...
    def remove(self, cid: int) -> None: ...
    def update(self) -> None: ...
