#ifndef TML_SDK_H
#define TML_SDK_H

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

enum AbnormalGait
#ifdef __cplusplus
  : uint8_t
#endif // __cplusplus
 {
  /**
   * Default value per Protobuf convention
   */
  ABNORMAL_GAIT_UNSPECIFIED = 0,
  /**
   * No load detected
   */
  ABNORMAL_GAIT_NO_LOAD = 1,
  /**
   * Support phase detected
   */
  ABNORMAL_GAIT_HANDRAIL_SUPPORTED = 2,
  /**
   * Unilateral dragging detected
   */
  ABNORMAL_GAIT_UNILATERAL_DRAGGING = 3,
};
#ifndef __cplusplus
typedef uint8_t AbnormalGait;
#endif // __cplusplus

enum FootStrike
#ifdef __cplusplus
  : uint8_t
#endif // __cplusplus
 {
  FOOT_STRIKE_UNSPECIFIED = 0,
  FOOT_STRIKE_LEFT_FOOT,
  FOOT_STRIKE_RIGHT_FOOT,
};
#ifndef __cplusplus
typedef uint8_t FootStrike;
#endif // __cplusplus

enum GaitPattern
#ifdef __cplusplus
  : uint8_t
#endif // __cplusplus
 {
  GAIT_PATTERN_UNSPECIFIED = 0,
  GAIT_PATTERN_WALK = 1,
  GAIT_PATTERN_RUN = 2,
};
#ifndef __cplusplus
typedef uint8_t GaitPattern;
#endif // __cplusplus

enum LogLevel
#ifdef __cplusplus
  : uint8_t
#endif // __cplusplus
 {
  LOG_LEVEL_ERROR = 0,
  LOG_LEVEL_WARN = 1,
  LOG_LEVEL_INFO = 2,
  LOG_LEVEL_DEBUG = 3,
  LOG_LEVEL_TRACE = 4,
};
#ifndef __cplusplus
typedef uint8_t LogLevel;
#endif // __cplusplus

typedef void (*GaitDataCallback)(uint32_t timmstamp,
                                 uint32_t sport_runtime,
                                 uint32_t sport_id,
                                 uint8_t foot,
                                 uint8_t pattern,
                                 uint32_t gait_duration,
                                 float step_load);

typedef void (*AbnormalEventCallback)(uint32_t timmstamp,
                                      uint32_t sport_runtime,
                                      uint32_t sport_id,
                                      uint8_t event_type);

typedef void (*DfuStateCallback)(uint8_t state);

typedef void (*DfuProgressCallback)(float percentage);

typedef void (*DfuWriteCallback)(const uint8_t *data, uintptr_t len);

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/**
 * 初始化日志记录功能
 *
 * # 参数
 * - `level`: 日志级别
 */
void initialize_logging(LogLevel level);

/**
 * Sets the callback for GaitAnalysisResult data.
 *
 * # Arguments
 * * `callback` - The function to call when receiving GaitAnalysisResult data.
 */
void set_gait_data_callback(GaitDataCallback cb);

/**
 * Sets the callback for AbnormalEvent data.
 *
 * # Arguments
 * * `callback` - The function to call when receiving AbnormalEvent data.
 */
void set_abnormal_event_callback(AbnormalEventCallback cb);

/**
 * Sets the callback for DFU state changes.
 * This function allows the C code to provide a callback that will be called
 * whenever the DFU state changes during the DFU process.
 */
void set_dfu_state_callback(DfuStateCallback cb);

/**
 * Sets the callback for DFU progress updates.
 * This function allows the C code to provide a callback that will be called
 * whenever the DFU progress is updated during the DFU process.
 * The callback receives a percentage value indicating the progress,
 * which is in the range of 0.0 to 100.0.
 */
void set_dfu_progress_callback(DfuProgressCallback cb);

/**
 * Sets the callback for DFU write operations.
 * This function allows the C code to provide a callback that will be called
 * whenever the Rust code needs to write data during the DFU process.
 */
void set_dfu_write_callback(DfuWriteCallback cb);

/**
 * Receives a pointer to data and its length from C.
 * The data is borrowed and not freed by this function.
 * The caller is responsible for managing the memory.
 */
void did_receive_dfu_data(const uint8_t *data, uintptr_t len);

/**
 * Receives a pointer to data and its length from C.
 * The data is borrowed and not freed by this function.
 * The caller is responsible for managing the memory.
 */
void did_receive_data(const uint8_t *data, uintptr_t len);

/**
 * 启动 DFU 操作
 * This function allows the C code to start the DFU process with the provided data.
 * It uses the `DfuManager` to handle the DFU operation asynchronously.
 */
void start_dfu(const uint8_t *file_data, uintptr_t len);

/**
 * 中止 DFU 操作
 * This function allows the C code to request an abort of the DFU process.
 * It uses the `DfuManager` to handle the abort operation asynchronously.
 */
void abort_dfu(void);

/**
 * 检查 DFU 是否正在进行中
 * This function allows the C code to check if a DFU operation is currently in progress.
 * It uses the `DfuManager` to check the status asynchronously.
 */
bool is_dfu_in_progress(void);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus

#endif  /* TML_SDK_H */
