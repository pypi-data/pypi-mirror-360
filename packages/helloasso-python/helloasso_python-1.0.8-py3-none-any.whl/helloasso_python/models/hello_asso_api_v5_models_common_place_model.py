# coding: utf-8

"""
    HelloAsso API

    HelloAsso auto-generated SDK

    The version of the OpenAPI document: public
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from helloasso_python.models.hello_asso_models_shared_geo_location import HelloAssoModelsSharedGeoLocation
from typing import Optional, Set
from typing_extensions import Self

class HelloAssoApiV5ModelsCommonPlaceModel(BaseModel):
    """
    PlaceModel class
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="Address")
    name: Optional[StrictStr] = Field(default=None, description="Name of the place")
    city: Optional[StrictStr] = Field(default=None, description="City")
    zip_code: Optional[StrictStr] = Field(default=None, description="ZipCode", alias="zipCode")
    country: Optional[Annotated[str, Field(min_length=3, strict=True, max_length=3)]] = Field(default=None, description="3 letter country code")
    geo_location: Optional[HelloAssoModelsSharedGeoLocation] = Field(default=None, alias="geoLocation")
    __properties: ClassVar[List[str]] = ["address", "name", "city", "zipCode", "country", "geoLocation"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HelloAssoApiV5ModelsCommonPlaceModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of geo_location
        if self.geo_location:
            _dict['geoLocation'] = self.geo_location.to_dict()
        # set to None if address (nullable) is None
        # and model_fields_set contains the field
        if self.address is None and "address" in self.model_fields_set:
            _dict['address'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if city (nullable) is None
        # and model_fields_set contains the field
        if self.city is None and "city" in self.model_fields_set:
            _dict['city'] = None

        # set to None if zip_code (nullable) is None
        # and model_fields_set contains the field
        if self.zip_code is None and "zip_code" in self.model_fields_set:
            _dict['zipCode'] = None

        # set to None if country (nullable) is None
        # and model_fields_set contains the field
        if self.country is None and "country" in self.model_fields_set:
            _dict['country'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HelloAssoApiV5ModelsCommonPlaceModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "name": obj.get("name"),
            "city": obj.get("city"),
            "zipCode": obj.get("zipCode"),
            "country": obj.get("country"),
            "geoLocation": HelloAssoModelsSharedGeoLocation.from_dict(obj["geoLocation"]) if obj.get("geoLocation") is not None else None
        })
        return _obj


