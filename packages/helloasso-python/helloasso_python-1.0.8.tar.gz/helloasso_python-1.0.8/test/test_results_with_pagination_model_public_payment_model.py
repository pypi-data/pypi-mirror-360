# coding: utf-8

"""
    HelloAsso API

    HelloAsso auto-generated SDK

    The version of the OpenAPI document: public
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from helloasso_python.models.results_with_pagination_model_public_payment_model import ResultsWithPaginationModelPublicPaymentModel

class TestResultsWithPaginationModelPublicPaymentModel(unittest.TestCase):
    """ResultsWithPaginationModelPublicPaymentModel unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ResultsWithPaginationModelPublicPaymentModel:
        """Test ResultsWithPaginationModelPublicPaymentModel
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ResultsWithPaginationModelPublicPaymentModel`
        """
        model = ResultsWithPaginationModelPublicPaymentModel()
        if include_optional:
            return ResultsWithPaginationModelPublicPaymentModel(
                data = [
                    helloasso_python.models.hello_asso/api/v5/models/payment/public_payment_model.HelloAsso.Api.V5.Models.Payment.PublicPaymentModel(
                        id = 56, 
                        organization_id = 56, 
                        form_id = 56, 
                        form_type = 'CrowdFunding', 
                        amount = 56, 
                        means_payment = 'None', 
                        cash_out_state = 'MoneyIn', 
                        date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        authorization_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        order_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        order_id = 56, 
                        fiscal_receipt_generated = True, 
                        payer_first_name = '', 
                        payer_last_name = '', 
                        status = 'Pending', 
                        user_id = 56, 
                        user_first_name = '', 
                        user_last_name = '', 
                        user_email = '', 
                        provider_title = '', 
                        installment_number = 56, 
                        meta = helloasso_python.models.hello_asso/api/v5/models/common/meta_model.HelloAsso.Api.V5.Models.Common.MetaModel(
                            created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        refund_operations = [
                            helloasso_python.models.hello_asso/api/v5/models/statistics/refund_operation_light_model.HelloAsso.Api.V5.Models.Statistics.RefundOperationLightModel(
                                id = 56, 
                                amount = 56, 
                                amount_tip = 56, )
                            ], )
                    ],
                pagination = helloasso_python.models.hello_asso/api/v5/models/common/pagination_model.HelloAsso.Api.V5.Models.Common.PaginationModel(
                    page_size = 56, 
                    total_count = 56, 
                    page_index = 56, 
                    total_pages = 56, 
                    continuation_token = '', )
            )
        else:
            return ResultsWithPaginationModelPublicPaymentModel(
        )
        """

    def testResultsWithPaginationModelPublicPaymentModel(self):
        """Test ResultsWithPaginationModelPublicPaymentModel"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
