# coding: utf-8

"""
    HelloAsso API

    HelloAsso auto-generated SDK

    The version of the OpenAPI document: public
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from helloasso_python.models.ha_trust_contract_legal_information_address_address_dto import HaTrustContractLegalInformationAddressAddressDto
from helloasso_python.models.hello_asso_models_accounts_organization_legal_informations_fiscal_receipt_signatory_model import HelloAssoModelsAccountsOrganizationLegalInformationsFiscalReceiptSignatoryModel
from helloasso_python.models.hello_asso_models_payments_cash_in_fiscal_receipt_fiscal_receipt_format_option import HelloAssoModelsPaymentsCashInFiscalReceiptFiscalReceiptFormatOption
from typing import Optional, Set
from typing_extensions import Self

class HelloAssoCoreAccountsTaxReceiptsOrganizationFiscalReceiptOptionsConfiguration(BaseModel):
    """
    HelloAssoCoreAccountsTaxReceiptsOrganizationFiscalReceiptOptionsConfiguration
    """ # noqa: E501
    purpose: Optional[StrictStr] = None
    cerfa_type_id: Optional[StrictInt] = Field(default=None, alias="cerfaTypeId")
    jo_category_id: Optional[StrictInt] = Field(default=None, alias="joCategoryId")
    format_option_model: Optional[HelloAssoModelsPaymentsCashInFiscalReceiptFiscalReceiptFormatOption] = Field(default=None, alias="formatOptionModel")
    signatory_model: Optional[HelloAssoModelsAccountsOrganizationLegalInformationsFiscalReceiptSignatoryModel] = Field(default=None, alias="signatoryModel")
    address_model: Optional[HaTrustContractLegalInformationAddressAddressDto] = Field(default=None, alias="addressModel")
    __properties: ClassVar[List[str]] = ["purpose", "cerfaTypeId", "joCategoryId", "formatOptionModel", "signatoryModel", "addressModel"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HelloAssoCoreAccountsTaxReceiptsOrganizationFiscalReceiptOptionsConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of format_option_model
        if self.format_option_model:
            _dict['formatOptionModel'] = self.format_option_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of signatory_model
        if self.signatory_model:
            _dict['signatoryModel'] = self.signatory_model.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address_model
        if self.address_model:
            _dict['addressModel'] = self.address_model.to_dict()
        # set to None if purpose (nullable) is None
        # and model_fields_set contains the field
        if self.purpose is None and "purpose" in self.model_fields_set:
            _dict['purpose'] = None

        # set to None if cerfa_type_id (nullable) is None
        # and model_fields_set contains the field
        if self.cerfa_type_id is None and "cerfa_type_id" in self.model_fields_set:
            _dict['cerfaTypeId'] = None

        # set to None if jo_category_id (nullable) is None
        # and model_fields_set contains the field
        if self.jo_category_id is None and "jo_category_id" in self.model_fields_set:
            _dict['joCategoryId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HelloAssoCoreAccountsTaxReceiptsOrganizationFiscalReceiptOptionsConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "purpose": obj.get("purpose"),
            "cerfaTypeId": obj.get("cerfaTypeId"),
            "joCategoryId": obj.get("joCategoryId"),
            "formatOptionModel": HelloAssoModelsPaymentsCashInFiscalReceiptFiscalReceiptFormatOption.from_dict(obj["formatOptionModel"]) if obj.get("formatOptionModel") is not None else None,
            "signatoryModel": HelloAssoModelsAccountsOrganizationLegalInformationsFiscalReceiptSignatoryModel.from_dict(obj["signatoryModel"]) if obj.get("signatoryModel") is not None else None,
            "addressModel": HaTrustContractLegalInformationAddressAddressDto.from_dict(obj["addressModel"]) if obj.get("addressModel") is not None else None
        })
        return _obj


