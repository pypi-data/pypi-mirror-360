[tool.poetry]
name = "fingest"
version = "0.1.0"
description = "Pytest plugin that allows you to easily define data-driven fixtures based on external files."
authors = [
    "Tim Fiedler <tim@0x68.de>"
]
readme = "README.md"
license = "MIT"
packages = [{ include = "fingest", from = "src" }]
homepage = "https://github.com/0x68/fingest"
repository = "https://github.com/0x68/fingest"
keywords = ["pytest", "plugin", "fixtures", "data-driven", "testing", "json", "csv", "xml"]
classifiers = [
  "Development Status :: 4 - Beta",
  "Framework :: Pytest",
  "Intended Audience :: Developers",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "License :: OSI Approved :: MIT License",
  "Topic :: Software Development :: Testing",
  "Topic :: Software Development :: Libraries :: Python Modules"
]

[tool.poetry.dependencies]
python = ">=3.11"
pytest = ">=8.3.5,<9.0.0"
lxml = ">=5.4.0,<6.0.0"

[tool.poetry.group.dev.dependencies]
pytest-cov = ">=6.2.1,<7.0.0"
black = "^24.0.0"
isort = "^5.13.0"
flake8 = "^7.0.0"
mypy = "^1.8.0"
pre-commit = "^3.6.0"

[tool.poetry.plugins."pytest11"]
fingest = "fingest.plugin"

[tool.poetry.urls]
Homepage = "https://github.com/0x68/fingest"
Issues = "https://github.com/0x68/fingest/issues"
Documentation = "https://github.com/0x68/fingest#readme"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["fingest"]
known_third_party = ["pytest", "lxml"]

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
]
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

