# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['squelch']

package_data = \
{'': ['*']}

install_requires = \
['sqlalchemy>=2.0.29,<3.0.0', 'tabulate>=0.9.0,<0.10.0']

entry_points = \
{'console_scripts': ['squelch = squelch.__main__:main']}

setup_kwargs = {
    'name': 'squelch',
    'version': '0.5.0',
    'description': 'Simple SQL REPL Command Handler',
    'long_description': '# squelch\n\nSquelch is a package providing a Simple [SQL](https://en.wikipedia.org/wiki/SQL) [REPL](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop) Command Handler.  Squelch uses [SQLAlchemy](https://www.sqlalchemy.org/) for database access and so can support any database engine that SQLAlchemy supports, thereby providing a common database client experience for any of those database engines.  Squelch is modelled on a simplified `psql`, the [PostgreSQL](https://www.postgresql.org/) command line client.  The Squelch [CLI](https://en.wikipedia.org/wiki/Command-line_interface) supports readline history and basic SQL statement tab completions.\n\n## Install\n\nThe package can be installed from [PyPI](https://pypi.org/):\n\n```bash\n$ pip install squelch\n```\n\n## From the command line\n\nThe package comes with a functional CLI called `squelch`, which just calls the package *main*, hence the following two invocations are equivalent:\n\n```bash\n$ python3 -m squelch\n```\n\n```bash\n$ squelch\n```\n\nThe only required argument is a database connection URL.  This can either be passed on the command line, via the `--url` option, or specified in a [JSON](https://en.wikipedia.org/wiki/JSON) configuration file.\n\nThe configuration file can be specified in one of the following ways:\n\n* The full path to a configuration file can be given by the `--conf-file` option.\n* A configuration name can be given as the first positional argument.\n\nA configuration name is the basename (without the `.json` suffix) of a configuration file in the [squelch configuration directory](#configuration-directory).  Using a configuration name is a convenience that simplifies the invocation of the CLI.\n\nThe form of the JSON configuration file is as follows:\n\n```json\n{\n  "url": "<URL>"\n}\n```\n\nwhere the `<URL>` follows the [SQLAlchemy database connection URL syntax](https://docs.sqlalchemy.org/en/20/core/engines.html#database-urls).  An advantage of using a configuration file is that it avoids providing database login credentials in plain text on the command line.\n\n### Configuration directory\n\nThe configuration directory is `$XDG_CONFIG_HOME/squelch`.  If the environment variable `$XDG_CONFIG_HOME` is not set in the caller environment, then it falls back to `~/.config/squelch`, as per the [XDG specifications](https://specifications.freedesktop.org/basedir-spec/latest/).\n\n### Specifying a configuration name\n\nGiven the following configuration directory contents:\n\n```bash\n$ ls ~/.config/squelch/\nextras.json  min.json  queries.sql  test.json\n```\n\nthe user can pass the configuration name `extras` as the first positional argument, and the CLI will find the full path to the corresponding configuration file (`~/.config/squelch/extras.json`) and use it to connect to the database specified by the URL in the JSON object:\n\n```bash\n$ squelch extras\n```\n\n### Running queries\n\nWhen running the CLI in a terminal, the user is dropped into an interactive REPL.  From here, the user is prompted for input, which can be an SQL statement to be sent to the database engine, or a CLI command (backslash command) such as `\\q` to quit the CLI:\n\n```\n$ python -m squelch -c tests/data/test.json \nsquelch (0.3.0)\nType "help" for help.\n\ntests/data/test.db => select * from data;\n id   | name   | status   | key\n------+--------+----------+-----------\n 1    | pmb    | 0        | 0000-0000\n 2    | abc    | 0        | 0000-0001\n 3    | def    | 0        | 0000-0002\n 4    | ghi    | 1        | 0000-0003\n(4 rows)\n\ntests/data/test.db => \\q\n```\n\nAlternatively, the CLI can be called as a *one-shot* by providing a query on `stdin`, thereby allowing it to be called in scripts.\n\nFor example, using `echo` to pipe a query to the CLI:\n\n```bash\n$ echo "select * from data" | python -m squelch -c tests/data/test.json\n id   | name   | status   | key\n------+--------+----------+-----------\n 1    | pmb    | 0        | 0000-0000\n 2    | abc    | 0        | 0000-0001\n 3    | def    | 0        | 0000-0002\n 4    | ghi    | 1        | 0000-0003\n(4 rows)\n\n```\n\nOr redirecting from a file.  Given the following queries in a file:\n\n```bash\n$ cat tests/data/queries.sql\nselect * from data;\nselect * from data where id = 1;\nselect * from status where status = 1;\n```\n\nthe result would be:\n\n```bash\n$ python -m squelch -c tests/data/test.json < tests/data/queries.sql\n id   | name   | status   | key\n------+--------+----------+-----------\n 1    | pmb    | 0        | 0000-0000\n 2    | abc    | 0        | 0000-0001\n 3    | def    | 0        | 0000-0002\n 4    | ghi    | 1        | 0000-0003\n(4 rows)\n\n id   | name   | status   | key\n------+--------+----------+-----------\n 1    | pmb    | 0        | 0000-0000\n(1 row)\n\n name   | status\n--------+----------\n ghi    | 1\n(1 row)\n\n```\n\n#### Machine-readable data in scripts\n\nIt\'s likely that when calling the CLI from a script, the user is less interested in the data being laid out in a human-readable table, rather, they probably want it as machine-readable data.  The table format can be set (using the `--pset` option) to `csv` so that the table is printed as [CSV](https://en.wikipedia.org/wiki/Comma-separated_values).  Additionally, the table footer can be turned off (again using `--pset`) so that the result is just a simple CSV table.  Taking our example from earlier, the result would be:\n\n```bash\n$ echo "select * from data;" | python -m squelch -c tests/data/test.json --pset format=csv --pset footer=off\nid,name,status,key\n1,pmb,0,0000-0000\n2,abc,0,0000-0001\n3,def,0,0000-0002\n4,ghi,1,0000-0003\n\n```\n\n### Command line usage\n\n```\nusage: squelch [-h] [-c CONF_FILE] [-u URL] [-S [NAME=VALUE [NAME=VALUE ...]]]\n               [-P [NAME=VALUE [NAME=VALUE ...]]] [-v] [-V]\n               [conf_name]\n\nSquelch is a Simple SQL REPL Command Handler.\n\npositional arguments:\n  conf_name             The name of a JSON configuration in the default\n                        configuration directory (/home/<user>/.config/squelch).\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -c CONF_FILE, --conf-file CONF_FILE\n                        The full path to a JSON configuration file.\n  -u URL, --url URL     The database connection URL, as required by\n                        sqlalchemy.create_engine().\n  -S [NAME=VALUE [NAME=VALUE ...]], --set [NAME=VALUE [NAME=VALUE ...]]\n                        Set state variable NAME to VALUE.\n  -P [NAME=VALUE [NAME=VALUE ...]], --pset [NAME=VALUE [NAME=VALUE ...]]\n                        Set printing state variable NAME to VALUE.\n  -v, --verbose         Turn verbose messaging on. The effects of this option\n                        are incremental. The value is used to set the\n                        VERBOSITY state variable.\n  -V, --version         show program\'s version number and exit\n\nDatabase Connection URL\n\nThe database connection URL can either be passed on the command line, via the --url option, or specified in a JSON configuration file given by the --conf-file option.  The form of the JSON configuration file is as follows:\n\n{\n  "url": "<URL>"\n}\n\nFrom the SQLAlchemy documentation:\n\n"The string form of the URL is dialect[+driver]://user:password@host/dbname[?key=value..], where dialect is a database name such as mysql, oracle, postgresql, etc., and driver the name of a DBAPI, such as psycopg2, pyodbc, cx_oracle, etc. Alternatively, the URL can be an instance of URL."\n```\n\n',
    'author': 'Paul Breen',
    'author_email': 'pbree@bas.ac.uk',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/paul-breen/squelch',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.8,<4.0',
}


setup(**setup_kwargs)
