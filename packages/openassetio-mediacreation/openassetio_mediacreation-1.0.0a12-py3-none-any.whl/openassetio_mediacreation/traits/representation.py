
"""
Trait definitions in the 'representation' namespace.

Traits relating to alternate representations of what is otherwise
logically the same entity.
"""

# WARNING: This file is auto-generated by openassetio-traitgen, do not edit.

from typing import Union

from openassetio.trait import TraitsData


class OriginalTrait:
    """
    The original canonical/source representation of the entity from
    which other proxy representations may have been derived.
    Usage: entity, relationship
    """
    kId = "openassetio-mediacreation:representation.Original"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    


class ProxyTrait:
    """
    An alternate scale/quality representation. In the case of images,
    this is usually either a lower resolution, a reduced quality
    encoding or a comnination of the two. For spatial data this may be
    reduced spacial fedlity or number of points.
    Usage: entity, relationship
    """
    kId = "openassetio-mediacreation:representation.Proxy"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    
    def setLabel(self, label: str):
        """
        Sets the label property.

        A short user-facing label that identifies the representation.
        This should not be the Entity name.
        e.g. "half", "mobile friendly"
        """
        if not type(label) is str:
            raise TypeError("label must be a 'str'.")
        self.__data.setTraitProperty(self.kId, "label", label)

    def getLabel(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the label property or the supplied default.

        A short user-facing label that identifies the representation.
        This should not be the Entity name.
        e.g. "half", "mobile friendly"
        """
        value = self.__data.getTraitProperty(self.kId, "label")
        if value is None:
            return defaultValue

        if not type(value) is str:
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    def setQualityRatio(self, qualityRatio: float):
        """
        Sets the qualityRatio property.

        The ratio of the representation's quality compared to the
        original.
        """
        if not type(qualityRatio) is float:
            raise TypeError("qualityRatio must be a 'float'.")
        self.__data.setTraitProperty(self.kId, "qualityRatio", qualityRatio)

    def getQualityRatio(self, defaultValue: float=None) -> Union[float, None]:
        """
        Gets the value of the qualityRatio property or the supplied default.

        The ratio of the representation's quality compared to the
        original.
        """
        value = self.__data.getTraitProperty(self.kId, "qualityRatio")
        if value is None:
            return defaultValue

        if not type(value) is float:
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'float'.")
            return defaultValue
        return value
        
    def setScaleRatio(self, scaleRatio: float):
        """
        Sets the scaleRatio property.

        The ratio of the representation's dimensions compared to the
        original.
        """
        if not type(scaleRatio) is float:
            raise TypeError("scaleRatio must be a 'float'.")
        self.__data.setTraitProperty(self.kId, "scaleRatio", scaleRatio)

    def getScaleRatio(self, defaultValue: float=None) -> Union[float, None]:
        """
        Gets the value of the scaleRatio property or the supplied default.

        The ratio of the representation's dimensions compared to the
        original.
        """
        value = self.__data.getTraitProperty(self.kId, "scaleRatio")
        if value is None:
            return defaultValue

        if not type(value) is float:
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'float'.")
            return defaultValue
        return value
        
    

