
"""
Trait definitions in the 'content' namespace.

Traits related to abstract content.
"""

# WARNING: This file is auto-generated by openassetio-traitgen, do not edit.

from typing import Union

from openassetio.trait import TraitsData


class LocatableContentTrait:
    """
    This trait characterizes an entity whose data is persisted
    externally to the API through data accessible via a valid URL.

    The `location` property holds the most applicable location of the
    entity's content for the current process environment - considering
    platform, host, etc. Location is in the form of a URL.
    Usage: entity
    """
    kId = "openassetio-mediacreation:content.LocatableContent"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    
    def setIsTemplated(self, isTemplated: bool):
        """
        Sets the isTemplated property.

        The URL in the location property contains variables (post
        decoding) that must be expanded before any loading is attempted.

        Variables use the OpenAssetIO syntax (eg:
        "image.{frame:04d}.{view}.exr") see the OpenAssetIO
        documentation for more details.

        The following well-known variables are defined within the
        MediaCreation ecosystem, and must be used where applicable to
        any specific workflow:

          - frame: An integer frame number for the current time.
          - view: A string representing the current view (eg.
            "left").
        """
        if not type(isTemplated) is bool:
            raise TypeError("isTemplated must be a 'bool'.")
        self.__data.setTraitProperty(self.kId, "isTemplated", isTemplated)

    def getIsTemplated(self, defaultValue: bool=None) -> Union[bool, None]:
        """
        Gets the value of the isTemplated property or the supplied default.

        The URL in the location property contains variables (post
        decoding) that must be expanded before any loading is attempted.

        Variables use the OpenAssetIO syntax (eg:
        "image.{frame:04d}.{view}.exr") see the OpenAssetIO
        documentation for more details.

        The following well-known variables are defined within the
        MediaCreation ecosystem, and must be used where applicable to
        any specific workflow:

          - frame: An integer frame number for the current time.
          - view: A string representing the current view (eg.
            "left").
        """
        value = self.__data.getTraitProperty(self.kId, "isTemplated")
        if value is None:
            return defaultValue

        if not type(value) is bool:
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'bool'.")
            return defaultValue
        return value
        
    def setLocation(self, location: str):
        """
        Sets the location property.

        The location of the entity's external content.

        This must be a valid URL, so special characters need to be
        encoded accordingly.
        """
        if not type(location) is str:
            raise TypeError("location must be a 'str'.")
        self.__data.setTraitProperty(self.kId, "location", location)

    def getLocation(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the location property or the supplied default.

        The location of the entity's external content.

        This must be a valid URL, so special characters need to be
        encoded accordingly.
        """
        value = self.__data.getTraitProperty(self.kId, "location")
        if value is None:
            return defaultValue

        if not type(value) is str:
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    def setMimeType(self, mimeType: str):
        """
        Sets the mimeType property.

        The MIME type of the data referenced by the location property.

        A single MIME type may be insufficient. For example,
        `isTemplated` is true and the MIME type may vary depending on
        the substitution; or LocatableContent is used as a filter
        predicate where multiple types are supported.

        Multiple MIME types can be represented in two ways. Firstly, a
        wildcard may be used in place of the subtype, e.g. "image/*".
        Secondly, multiple MIME types may be separated with a comma,
        e.g. "image/jpeg,image/png".

        Common references for MIME types are the IANA standard:
        https://www.iana.org/assignments/media-types/media-types.xhtml
        and the XDG standard (which adds e.g. "inode/directory"):
        https://specifications.freedesktop.org/shared-mime-info-
        spec/latest/index.html

        In addition There are several other non-standard MIME types in
        use in the media creation industry. For example,

        - "application/x-nuke" for Nuke scripts.              -
        "application/vnd.aswf.opentimelineio" for OpenTimelineIO
          ".otio" files.
        """
        if not type(mimeType) is str:
            raise TypeError("mimeType must be a 'str'.")
        self.__data.setTraitProperty(self.kId, "mimeType", mimeType)

    def getMimeType(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the mimeType property or the supplied default.

        The MIME type of the data referenced by the location property.

        A single MIME type may be insufficient. For example,
        `isTemplated` is true and the MIME type may vary depending on
        the substitution; or LocatableContent is used as a filter
        predicate where multiple types are supported.

        Multiple MIME types can be represented in two ways. Firstly, a
        wildcard may be used in place of the subtype, e.g. "image/*".
        Secondly, multiple MIME types may be separated with a comma,
        e.g. "image/jpeg,image/png".

        Common references for MIME types are the IANA standard:
        https://www.iana.org/assignments/media-types/media-types.xhtml
        and the XDG standard (which adds e.g. "inode/directory"):
        https://specifications.freedesktop.org/shared-mime-info-
        spec/latest/index.html

        In addition There are several other non-standard MIME types in
        use in the media creation industry. For example,

        - "application/x-nuke" for Nuke scripts.              -
        "application/vnd.aswf.opentimelineio" for OpenTimelineIO
          ".otio" files.
        """
        value = self.__data.getTraitProperty(self.kId, "mimeType")
        if value is None:
            return defaultValue

        if not type(value) is str:
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    

