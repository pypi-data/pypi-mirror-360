
"""
Trait definitions in the 'color' namespace.

Traits related to chromatic information in entity data.
"""

# WARNING: This file is auto-generated by openassetio-traitgen, do not edit.

from typing import Union

from openassetio.trait import TraitsData


class OCIOColorManagedTrait:
    """
    Color data is managed using the OpenColorIO color management system.

    https://opencolorio.readthedocs.io
    Usage: entity
    """
    kId = "openassetio-mediacreation:color.OCIOColorManaged"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    
    def setColorspace(self, colorspace: str):
        """
        Sets the colorspace property.

        An OCIO colorspace name available in the "current" OCIO context.
        """
        if not type(colorspace) is str:
            raise TypeError("colorspace must be a 'str'.")
        self.__data.setTraitProperty(self.kId, "colorspace", colorspace)

    def getColorspace(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the colorspace property or the supplied default.

        An OCIO colorspace name available in the "current" OCIO context.
        """
        value = self.__data.getTraitProperty(self.kId, "colorspace")
        if value is None:
            return defaultValue

        if not type(value) is str:
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    

