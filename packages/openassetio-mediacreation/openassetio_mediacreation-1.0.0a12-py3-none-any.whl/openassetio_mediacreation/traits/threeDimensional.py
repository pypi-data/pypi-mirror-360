
"""
Trait definitions in the 'threeDimensional' namespace.

Traits that are concerned with describing three-dimensional data, such
as models, scenes, cameras, lights, etc.
"""

# WARNING: This file is auto-generated by openassetio-traitgen, do not edit.

from typing import Union

from openassetio.trait import TraitsData


class GeometryTrait:
    """
    The entity represents one or more "objects" within three-dimensional
    space.
    Usage: entity
    """
    kId = "openassetio-mediacreation:threeDimensional.Geometry"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    


class IESProfileTrait:
    """
    The entity represent an IES lighting profile, as defined by IES-
    LM-63, see:

        https://store.ies.org/product/lm-63-19-approved-method-ies-
    standard-file-format-for-the-electronic-transfer-of-photometric-
    data-and-related-information
    """
    kId = "openassetio-mediacreation:threeDimensional.IESProfile"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    


class LightingTrait:
    """
    The entity represents scene or object lighting, which may be a
    single light, a rig, or any other relevant construction.
    Usage: entity
    """
    kId = "openassetio-mediacreation:threeDimensional.Lighting"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    


class ShaderTrait:
    """
    The entity represents a parameterised algorithm that is evaluated
    during processing of a three-dimensional scene.
    Usage: entity
    """
    kId = "openassetio-mediacreation:threeDimensional.Shader"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    


class SourcePathTrait:
    """
    Defines a singular path within the entity's scene hierarchy that
    should be used as the root, ignoring any other peer paths.
    For example "/cameras/1103/camera"
    Usage: entity
    """
    kId = "openassetio-mediacreation:threeDimensional.SourcePath"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    
    def setPath(self, path: str):
        """
        Sets the path property.

        A forward slash (/) delimited path considered absolute from the
        root of the entity's scene hierarchy.
        """
        if not type(path) is str:
            raise TypeError("path must be a 'str'.")
        self.__data.setTraitProperty(self.kId, "path", path)

    def getPath(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the path property or the supplied default.

        A forward slash (/) delimited path considered absolute from the
        root of the entity's scene hierarchy.
        """
        value = self.__data.getTraitProperty(self.kId, "path")
        if value is None:
            return defaultValue

        if not type(value) is str:
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    


class SourcePathsTrait:
    """
    Defines the root paths within the entity data that form the start of
    a discrete hierarchy, labelled by the property key.

    For example:
      left: "/cameras/1103/camera/left"
      right: "/cameras/1103/camera/right"


    As there are no standardised keys, the low level TraitsData API must
    be used to determine which keys/values are present.
    Usage: entity
    """
    kId = "openassetio-mediacreation:threeDimensional.SourcePaths"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    


class SpatialTrait:
    """
    A family trait that should be composed with more specific traits for
    any entity that holds data described in three dimensions.
    Usage: entity
    """
    kId = "openassetio-mediacreation:threeDimensional.Spatial"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    
    def setHandedness(self, handedness: str):
        """
        Sets the handedness property.

        Determines which direction positive depth is based on the "left
        hand or right hand rule"
        Legal values are "left" and "right"
        """
        if not type(handedness) is str:
            raise TypeError("handedness must be a 'str'.")
        self.__data.setTraitProperty(self.kId, "handedness", handedness)

    def getHandedness(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the handedness property or the supplied default.

        Determines which direction positive depth is based on the "left
        hand or right hand rule"
        Legal values are "left" and "right"
        """
        value = self.__data.getTraitProperty(self.kId, "handedness")
        if value is None:
            return defaultValue

        if not type(value) is str:
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    def setMetersPerUnit(self, metersPerUnit: float):
        """
        Sets the metersPerUnit property.

        How many meters are represented by a linear unit in the data.
        """
        if not type(metersPerUnit) is float:
            raise TypeError("metersPerUnit must be a 'float'.")
        self.__data.setTraitProperty(self.kId, "metersPerUnit", metersPerUnit)

    def getMetersPerUnit(self, defaultValue: float=None) -> Union[float, None]:
        """
        Gets the value of the metersPerUnit property or the supplied default.

        How many meters are represented by a linear unit in the data.
        """
        value = self.__data.getTraitProperty(self.kId, "metersPerUnit")
        if value is None:
            return defaultValue

        if not type(value) is float:
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'float'.")
            return defaultValue
        return value
        
    def setUpAxis(self, upAxis: str):
        """
        Sets the upAxis property.

        The axis considered to point "up", legal values are: "y" or "z".

        It is assumed that the "x" axis is always horizontal,
        perpendicular to the depth axis. Consequently the depth axis is
        always which ever of "y" or "z" that is not set as the upAxis.
        """
        if not type(upAxis) is str:
            raise TypeError("upAxis must be a 'str'.")
        self.__data.setTraitProperty(self.kId, "upAxis", upAxis)

    def getUpAxis(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the upAxis property or the supplied default.

        The axis considered to point "up", legal values are: "y" or "z".

        It is assumed that the "x" axis is always horizontal,
        perpendicular to the depth axis. Consequently the depth axis is
        always which ever of "y" or "z" that is not set as the upAxis.
        """
        value = self.__data.getTraitProperty(self.kId, "upAxis")
        if value is None:
            return defaultValue

        if not type(value) is str:
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    

