
"""
Trait definitions in the 'lifecycle' namespace.

Traits that are concerned with describing aspects of the life cycle of
an entity, such as versioning.
"""

# WARNING: This file is auto-generated by openassetio-traitgen, do not edit.

from typing import Union

from openassetio.trait import TraitsData


class StableTrait:
    """
    Defines that the entity references returned from a relationship
    query with this trait must be devoid of any dynamic behaviour. This
    includes concepts such as meta-versioning or context-specific
    variation that results logically different data being supplied.

    This is generally used to snapshot/bookmark specific configurations
    to avoid temporal instability and/or ensure processes are
    repeatable.

    Note: This does not include variations such as regional adaptation
    of the LocatableContent trait, where the underlying data remains the
    same.
    Usage: relationship
    """
    kId = "openassetio-mediacreation:lifecycle.Stable"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    


class VersionTrait:
    """
    Describes a specific version of an entity.

    A version is defined as a revision or iteration of what is otherwise
    the same logical entity. If supported by a manager, versions are
    created when new data is published to an existing entity. Not all
    managers may version all types of entity.

    There is no requirement for version to be a singular atomic series,
    managers may wish to support "meta versions", such as 'vLatest' or
    similar, or provide multiple parallel versioning streams.

    This trait can be used in several places:
     - When resolved, the manager should provide information about
       the version of the referenced entity. This trait should only
       be imbued if the target entity is considered versioned by the
       manager, and it can populate the stableTag property.
     - When responding to managementPolicy for an entity trait set,
       the manager should imbue this trait if that type of entity
       is version managed by the manager (not all managers version
       all types of entity).
     - When used within a relationship query, this trait indicates
       that the returned entities should be constrained to other
       versions of the logical entity targeted by the reference.
    Usage: entity, relationship, managementPolicy
    """
    kId = "openassetio-mediacreation:lifecycle.Version"

    def __init__(self, traitsData):
        """
        Construct this trait view, wrapping the given data.

        @param traitsData @fqref{TraitsData}} "TraitsData" The target
        data that holds/will hold the traits properties.
        """
        self.__data = traitsData

    def isImbued(self):
        """
        Checks whether the data this trait has been applied to
        actually has this trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return self.isImbuedTo(self.__data)

    @classmethod
    def isImbuedTo(cls, traitsData):
        """
        Checks whether the given data actually has this trait.
        @param traitsData: Data to check for trait.
        @return `True` if the underlying data has this trait, `False`
        otherwise.
        """
        return traitsData.hasTrait(cls.kId)

    def imbue(self):
        """
        Adds this trait to the held data.

        If the data already has this trait, it is a no-op.
        """
        self.__data.addTrait(self.kId)

    @classmethod
    def imbueTo(cls, traitsData):
        """
        Adds this trait to the provided data.

        If the data already has this trait, it is a no-op.
        """
        traitsData.addTrait(cls.kId)

    
    def setSpecifiedTag(self, specifiedTag: str):
        """
        Sets the specifiedTag property.

        An unambiguous identifier (tag) for the specific version of an
        entity targeted by a specific reference.

        Examples of version tags include "1", "v2", "latest".

        If the reference itself does not contain a version specifier and
        relies on dynamic behaviour, this will be set to a tag that
        produces equivalent behaviour. This can then be used for user
        presentation or as a filter with a relationship query.
        """
        if not type(specifiedTag) is str:
            raise TypeError("specifiedTag must be a 'str'.")
        self.__data.setTraitProperty(self.kId, "specifiedTag", specifiedTag)

    def getSpecifiedTag(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the specifiedTag property or the supplied default.

        An unambiguous identifier (tag) for the specific version of an
        entity targeted by a specific reference.

        Examples of version tags include "1", "v2", "latest".

        If the reference itself does not contain a version specifier and
        relies on dynamic behaviour, this will be set to a tag that
        produces equivalent behaviour. This can then be used for user
        presentation or as a filter with a relationship query.
        """
        value = self.__data.getTraitProperty(self.kId, "specifiedTag")
        if value is None:
            return defaultValue

        if not type(value) is str:
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    def setStableTag(self, stableTag: str):
        """
        Sets the stableTag property.

        The tag (see 'specifiedTag') targeted by the reference once
        meta-versions or other dynamic behaviour is applied.

        If, for example, references without an explicit version yield
        the most recent, then this would be set to the tag of that
        version. When referencing some other semantic state (eg.
        approval), this would be set to the tag of the concrete version
        that matches the specific state.

        Examples of stable version tags include "1", "v2".

        This property should always be set when the Version trait is
        imbued as part of a resolve response. If the entity is not
        versioned, then the trait itself should not be imbued.
        """
        if not type(stableTag) is str:
            raise TypeError("stableTag must be a 'str'.")
        self.__data.setTraitProperty(self.kId, "stableTag", stableTag)

    def getStableTag(self, defaultValue: str=None) -> Union[str, None]:
        """
        Gets the value of the stableTag property or the supplied default.

        The tag (see 'specifiedTag') targeted by the reference once
        meta-versions or other dynamic behaviour is applied.

        If, for example, references without an explicit version yield
        the most recent, then this would be set to the tag of that
        version. When referencing some other semantic state (eg.
        approval), this would be set to the tag of the concrete version
        that matches the specific state.

        Examples of stable version tags include "1", "v2".

        This property should always be set when the Version trait is
        imbued as part of a resolve response. If the entity is not
        versioned, then the trait itself should not be imbued.
        """
        value = self.__data.getTraitProperty(self.kId, "stableTag")
        if value is None:
            return defaultValue

        if not type(value) is str:
            if defaultValue is None:
                raise TypeError(f"Invalid stored value type: '{type(value).__name__}' should be 'str'.")
            return defaultValue
        return value
        
    

