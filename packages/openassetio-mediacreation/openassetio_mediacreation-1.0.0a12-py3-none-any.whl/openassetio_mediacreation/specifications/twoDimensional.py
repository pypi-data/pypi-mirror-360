
"""
Specification definitions in the 'twoDimensional' namespace.

Specifications for commonly encountered image types.
"""

# WARNING: This file is auto-generated by openassetio-traitgen, do not edit.

from openassetio.trait import TraitsData


from .. import traits



class BitmapImageResourceSpecification:
    """
    Any entity that holds two-dimensional data as a pixel grid in an
    independent resource.
    Usage: entity
    """
    kTraitSet = {
        # 'openassetio-mediacreation:content.LocatableContent'
        traits.content.LocatableContentTrait.kId,
        # 'openassetio-mediacreation:twoDimensional.Image'
        traits.twoDimensional.ImageTrait.kId,
        # 'openassetio-mediacreation:twoDimensional.PixelBased'
        traits.twoDimensional.PixelBasedTrait.kId,
        # 'openassetio-mediacreation:usage.Entity'
        traits.usage.EntityTrait.kId,
        
    }

    def __init__(self, traitsData):
        """
        Constructs the specification as a view on the supplied
        shared @fqref{TraitsData} "TraitsData" instance.

        @param traitsData @fqref{TraitsData} "TraitsData"

        @warning Specifications are always a view on the supplied data,
        which is held by reference. Any changes made to the data will be
        visible to any other specifications or @ref trait "traits" that
        wrap the same TraitsData instance.
        """
        if not isinstance(traitsData, TraitsData):
            raise TypeError("Specifications must be constructed with a TraitsData instance")
        self.__data = traitsData

    def traitsData(self):
        """
        Returns the underlying (shared) @fqref{TraitsData} "TraitsData"
        instance held by this specification.
        """
        return self.__data

    @classmethod
    def create(cls):
        """
        Returns a new instance of the Specification, holding a new
        @fqref{TraitsData} "TraitsData" instance, pre-populated with all
        of the specifications traits.
        """
        data = TraitsData(cls.kTraitSet)
        return cls(data)


    def locatableContentTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:content.LocatableContent' trait wrapped around
        the data held in this instance.
        """
        return traits.content.LocatableContentTrait(self.traitsData())
        
    def imageTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:twoDimensional.Image' trait wrapped around
        the data held in this instance.
        """
        return traits.twoDimensional.ImageTrait(self.traitsData())
        
    def pixelBasedTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:twoDimensional.PixelBased' trait wrapped around
        the data held in this instance.
        """
        return traits.twoDimensional.PixelBasedTrait(self.traitsData())
        
    def entityTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:usage.Entity' trait wrapped around
        the data held in this instance.
        """
        return traits.usage.EntityTrait(self.traitsData())
        
class BitmapImageResourceCollectionSpecification:
    """
    An entity that holds a collection of bitmap image resources in some
    external resource.
    Usage: entity
    """
    kTraitSet = {
        # 'openassetio-mediacreation:content.LocatableContent'
        traits.content.LocatableContentTrait.kId,
        # 'openassetio-mediacreation:twoDimensional.ImageCollection'
        traits.twoDimensional.ImageCollectionTrait.kId,
        # 'openassetio-mediacreation:twoDimensional.PixelBased'
        traits.twoDimensional.PixelBasedTrait.kId,
        # 'openassetio-mediacreation:usage.Entity'
        traits.usage.EntityTrait.kId,
        
    }

    def __init__(self, traitsData):
        """
        Constructs the specification as a view on the supplied
        shared @fqref{TraitsData} "TraitsData" instance.

        @param traitsData @fqref{TraitsData} "TraitsData"

        @warning Specifications are always a view on the supplied data,
        which is held by reference. Any changes made to the data will be
        visible to any other specifications or @ref trait "traits" that
        wrap the same TraitsData instance.
        """
        if not isinstance(traitsData, TraitsData):
            raise TypeError("Specifications must be constructed with a TraitsData instance")
        self.__data = traitsData

    def traitsData(self):
        """
        Returns the underlying (shared) @fqref{TraitsData} "TraitsData"
        instance held by this specification.
        """
        return self.__data

    @classmethod
    def create(cls):
        """
        Returns a new instance of the Specification, holding a new
        @fqref{TraitsData} "TraitsData" instance, pre-populated with all
        of the specifications traits.
        """
        data = TraitsData(cls.kTraitSet)
        return cls(data)


    def locatableContentTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:content.LocatableContent' trait wrapped around
        the data held in this instance.
        """
        return traits.content.LocatableContentTrait(self.traitsData())
        
    def imageCollectionTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:twoDimensional.ImageCollection' trait wrapped around
        the data held in this instance.
        """
        return traits.twoDimensional.ImageCollectionTrait(self.traitsData())
        
    def pixelBasedTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:twoDimensional.PixelBased' trait wrapped around
        the data held in this instance.
        """
        return traits.twoDimensional.PixelBasedTrait(self.traitsData())
        
    def entityTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:usage.Entity' trait wrapped around
        the data held in this instance.
        """
        return traits.usage.EntityTrait(self.traitsData())
        
class BitmapImageResourceSequenceSpecification:
    """
    An entity that holds a collection of image resources, where those
    image resources are ordered into a bounded list of  frames.
    Usage: entity
    """
    kTraitSet = {
        # 'openassetio-mediacreation:content.LocatableContent'
        traits.content.LocatableContentTrait.kId,
        # 'openassetio-mediacreation:timeDomain.FrameRanged'
        traits.timeDomain.FrameRangedTrait.kId,
        # 'openassetio-mediacreation:twoDimensional.ImageCollection'
        traits.twoDimensional.ImageCollectionTrait.kId,
        # 'openassetio-mediacreation:twoDimensional.PixelBased'
        traits.twoDimensional.PixelBasedTrait.kId,
        # 'openassetio-mediacreation:usage.Entity'
        traits.usage.EntityTrait.kId,
        
    }

    def __init__(self, traitsData):
        """
        Constructs the specification as a view on the supplied
        shared @fqref{TraitsData} "TraitsData" instance.

        @param traitsData @fqref{TraitsData} "TraitsData"

        @warning Specifications are always a view on the supplied data,
        which is held by reference. Any changes made to the data will be
        visible to any other specifications or @ref trait "traits" that
        wrap the same TraitsData instance.
        """
        if not isinstance(traitsData, TraitsData):
            raise TypeError("Specifications must be constructed with a TraitsData instance")
        self.__data = traitsData

    def traitsData(self):
        """
        Returns the underlying (shared) @fqref{TraitsData} "TraitsData"
        instance held by this specification.
        """
        return self.__data

    @classmethod
    def create(cls):
        """
        Returns a new instance of the Specification, holding a new
        @fqref{TraitsData} "TraitsData" instance, pre-populated with all
        of the specifications traits.
        """
        data = TraitsData(cls.kTraitSet)
        return cls(data)


    def locatableContentTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:content.LocatableContent' trait wrapped around
        the data held in this instance.
        """
        return traits.content.LocatableContentTrait(self.traitsData())
        
    def frameRangedTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:timeDomain.FrameRanged' trait wrapped around
        the data held in this instance.
        """
        return traits.timeDomain.FrameRangedTrait(self.traitsData())
        
    def imageCollectionTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:twoDimensional.ImageCollection' trait wrapped around
        the data held in this instance.
        """
        return traits.twoDimensional.ImageCollectionTrait(self.traitsData())
        
    def pixelBasedTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:twoDimensional.PixelBased' trait wrapped around
        the data held in this instance.
        """
        return traits.twoDimensional.PixelBasedTrait(self.traitsData())
        
    def entityTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:usage.Entity' trait wrapped around
        the data held in this instance.
        """
        return traits.usage.EntityTrait(self.traitsData())
        
class DeepBitmapImageResourceSpecification:
    """
    Any entity that holds two-dimensional data as a pixel grid with
    multiple depth samples per pixel, in an independent resource.
    Usage: entity
    """
    kTraitSet = {
        # 'openassetio-mediacreation:content.LocatableContent'
        traits.content.LocatableContentTrait.kId,
        # 'openassetio-mediacreation:twoDimensional.Deep'
        traits.twoDimensional.DeepTrait.kId,
        # 'openassetio-mediacreation:twoDimensional.Image'
        traits.twoDimensional.ImageTrait.kId,
        # 'openassetio-mediacreation:twoDimensional.PixelBased'
        traits.twoDimensional.PixelBasedTrait.kId,
        # 'openassetio-mediacreation:usage.Entity'
        traits.usage.EntityTrait.kId,
        
    }

    def __init__(self, traitsData):
        """
        Constructs the specification as a view on the supplied
        shared @fqref{TraitsData} "TraitsData" instance.

        @param traitsData @fqref{TraitsData} "TraitsData"

        @warning Specifications are always a view on the supplied data,
        which is held by reference. Any changes made to the data will be
        visible to any other specifications or @ref trait "traits" that
        wrap the same TraitsData instance.
        """
        if not isinstance(traitsData, TraitsData):
            raise TypeError("Specifications must be constructed with a TraitsData instance")
        self.__data = traitsData

    def traitsData(self):
        """
        Returns the underlying (shared) @fqref{TraitsData} "TraitsData"
        instance held by this specification.
        """
        return self.__data

    @classmethod
    def create(cls):
        """
        Returns a new instance of the Specification, holding a new
        @fqref{TraitsData} "TraitsData" instance, pre-populated with all
        of the specifications traits.
        """
        data = TraitsData(cls.kTraitSet)
        return cls(data)


    def locatableContentTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:content.LocatableContent' trait wrapped around
        the data held in this instance.
        """
        return traits.content.LocatableContentTrait(self.traitsData())
        
    def deepTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:twoDimensional.Deep' trait wrapped around
        the data held in this instance.
        """
        return traits.twoDimensional.DeepTrait(self.traitsData())
        
    def imageTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:twoDimensional.Image' trait wrapped around
        the data held in this instance.
        """
        return traits.twoDimensional.ImageTrait(self.traitsData())
        
    def pixelBasedTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:twoDimensional.PixelBased' trait wrapped around
        the data held in this instance.
        """
        return traits.twoDimensional.PixelBasedTrait(self.traitsData())
        
    def entityTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:usage.Entity' trait wrapped around
        the data held in this instance.
        """
        return traits.usage.EntityTrait(self.traitsData())
        
class ImageSpecification:
    """
    Any entity that holds two-dimensional data
    Usage: entity
    """
    kTraitSet = {
        # 'openassetio-mediacreation:twoDimensional.Image'
        traits.twoDimensional.ImageTrait.kId,
        # 'openassetio-mediacreation:usage.Entity'
        traits.usage.EntityTrait.kId,
        
    }

    def __init__(self, traitsData):
        """
        Constructs the specification as a view on the supplied
        shared @fqref{TraitsData} "TraitsData" instance.

        @param traitsData @fqref{TraitsData} "TraitsData"

        @warning Specifications are always a view on the supplied data,
        which is held by reference. Any changes made to the data will be
        visible to any other specifications or @ref trait "traits" that
        wrap the same TraitsData instance.
        """
        if not isinstance(traitsData, TraitsData):
            raise TypeError("Specifications must be constructed with a TraitsData instance")
        self.__data = traitsData

    def traitsData(self):
        """
        Returns the underlying (shared) @fqref{TraitsData} "TraitsData"
        instance held by this specification.
        """
        return self.__data

    @classmethod
    def create(cls):
        """
        Returns a new instance of the Specification, holding a new
        @fqref{TraitsData} "TraitsData" instance, pre-populated with all
        of the specifications traits.
        """
        data = TraitsData(cls.kTraitSet)
        return cls(data)


    def imageTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:twoDimensional.Image' trait wrapped around
        the data held in this instance.
        """
        return traits.twoDimensional.ImageTrait(self.traitsData())
        
    def entityTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:usage.Entity' trait wrapped around
        the data held in this instance.
        """
        return traits.usage.EntityTrait(self.traitsData())
        
class PlanarBitmapImageResourceSpecification:
    """
    Any entity that holds two-dimensional data as a pixel grid with a
    single sample per pixel, in an independent resource.
    Usage: entity
    """
    kTraitSet = {
        # 'openassetio-mediacreation:content.LocatableContent'
        traits.content.LocatableContentTrait.kId,
        # 'openassetio-mediacreation:twoDimensional.Image'
        traits.twoDimensional.ImageTrait.kId,
        # 'openassetio-mediacreation:twoDimensional.PixelBased'
        traits.twoDimensional.PixelBasedTrait.kId,
        # 'openassetio-mediacreation:twoDimensional.Planar'
        traits.twoDimensional.PlanarTrait.kId,
        # 'openassetio-mediacreation:usage.Entity'
        traits.usage.EntityTrait.kId,
        
    }

    def __init__(self, traitsData):
        """
        Constructs the specification as a view on the supplied
        shared @fqref{TraitsData} "TraitsData" instance.

        @param traitsData @fqref{TraitsData} "TraitsData"

        @warning Specifications are always a view on the supplied data,
        which is held by reference. Any changes made to the data will be
        visible to any other specifications or @ref trait "traits" that
        wrap the same TraitsData instance.
        """
        if not isinstance(traitsData, TraitsData):
            raise TypeError("Specifications must be constructed with a TraitsData instance")
        self.__data = traitsData

    def traitsData(self):
        """
        Returns the underlying (shared) @fqref{TraitsData} "TraitsData"
        instance held by this specification.
        """
        return self.__data

    @classmethod
    def create(cls):
        """
        Returns a new instance of the Specification, holding a new
        @fqref{TraitsData} "TraitsData" instance, pre-populated with all
        of the specifications traits.
        """
        data = TraitsData(cls.kTraitSet)
        return cls(data)


    def locatableContentTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:content.LocatableContent' trait wrapped around
        the data held in this instance.
        """
        return traits.content.LocatableContentTrait(self.traitsData())
        
    def imageTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:twoDimensional.Image' trait wrapped around
        the data held in this instance.
        """
        return traits.twoDimensional.ImageTrait(self.traitsData())
        
    def pixelBasedTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:twoDimensional.PixelBased' trait wrapped around
        the data held in this instance.
        """
        return traits.twoDimensional.PixelBasedTrait(self.traitsData())
        
    def planarTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:twoDimensional.Planar' trait wrapped around
        the data held in this instance.
        """
        return traits.twoDimensional.PlanarTrait(self.traitsData())
        
    def entityTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:usage.Entity' trait wrapped around
        the data held in this instance.
        """
        return traits.usage.EntityTrait(self.traitsData())
        