
"""
Specification definitions in the 'lifecycle' namespace.

Specifications that are concerned with describing aspects of the life
cycle of an entity, such as versioning.
"""

# WARNING: This file is auto-generated by openassetio-traitgen, do not edit.

from openassetio.trait import TraitsData


from .. import traits



class EntityVersionsRelationshipSpecification:
    """
    A relationship between alternate versions of the same logical
    entity. This may include unstable versions such as "latest". Results
    will be ordered with the most relevant first. This is usually
    reverse chronological order.
    Usage: relationship
    """
    kTraitSet = {
        # 'openassetio-mediacreation:lifecycle.Version'
        traits.lifecycle.VersionTrait.kId,
        # 'openassetio-mediacreation:relationship.Unbounded'
        traits.relationship.UnboundedTrait.kId,
        # 'openassetio-mediacreation:usage.Relationship'
        traits.usage.RelationshipTrait.kId,
        
    }

    def __init__(self, traitsData):
        """
        Constructs the specification as a view on the supplied
        shared @fqref{TraitsData} "TraitsData" instance.

        @param traitsData @fqref{TraitsData} "TraitsData"

        @warning Specifications are always a view on the supplied data,
        which is held by reference. Any changes made to the data will be
        visible to any other specifications or @ref trait "traits" that
        wrap the same TraitsData instance.
        """
        if not isinstance(traitsData, TraitsData):
            raise TypeError("Specifications must be constructed with a TraitsData instance")
        self.__data = traitsData

    def traitsData(self):
        """
        Returns the underlying (shared) @fqref{TraitsData} "TraitsData"
        instance held by this specification.
        """
        return self.__data

    @classmethod
    def create(cls):
        """
        Returns a new instance of the Specification, holding a new
        @fqref{TraitsData} "TraitsData" instance, pre-populated with all
        of the specifications traits.
        """
        data = TraitsData(cls.kTraitSet)
        return cls(data)


    def versionTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:lifecycle.Version' trait wrapped around
        the data held in this instance.
        """
        return traits.lifecycle.VersionTrait(self.traitsData())
        
    def unboundedTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:relationship.Unbounded' trait wrapped around
        the data held in this instance.
        """
        return traits.relationship.UnboundedTrait(self.traitsData())
        
    def relationshipTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:usage.Relationship' trait wrapped around
        the data held in this instance.
        """
        return traits.usage.RelationshipTrait(self.traitsData())
        
class StableEntityVersionsRelationshipSpecification:
    """
    Retrieves references to alternate stable versions of the same
    logical entity. This will not include unstable versions such as
    "latest".
    Usage: relationship
    """
    kTraitSet = {
        # 'openassetio-mediacreation:lifecycle.Stable'
        traits.lifecycle.StableTrait.kId,
        # 'openassetio-mediacreation:lifecycle.Version'
        traits.lifecycle.VersionTrait.kId,
        # 'openassetio-mediacreation:relationship.Unbounded'
        traits.relationship.UnboundedTrait.kId,
        # 'openassetio-mediacreation:usage.Relationship'
        traits.usage.RelationshipTrait.kId,
        
    }

    def __init__(self, traitsData):
        """
        Constructs the specification as a view on the supplied
        shared @fqref{TraitsData} "TraitsData" instance.

        @param traitsData @fqref{TraitsData} "TraitsData"

        @warning Specifications are always a view on the supplied data,
        which is held by reference. Any changes made to the data will be
        visible to any other specifications or @ref trait "traits" that
        wrap the same TraitsData instance.
        """
        if not isinstance(traitsData, TraitsData):
            raise TypeError("Specifications must be constructed with a TraitsData instance")
        self.__data = traitsData

    def traitsData(self):
        """
        Returns the underlying (shared) @fqref{TraitsData} "TraitsData"
        instance held by this specification.
        """
        return self.__data

    @classmethod
    def create(cls):
        """
        Returns a new instance of the Specification, holding a new
        @fqref{TraitsData} "TraitsData" instance, pre-populated with all
        of the specifications traits.
        """
        data = TraitsData(cls.kTraitSet)
        return cls(data)


    def stableTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:lifecycle.Stable' trait wrapped around
        the data held in this instance.
        """
        return traits.lifecycle.StableTrait(self.traitsData())
        
    def versionTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:lifecycle.Version' trait wrapped around
        the data held in this instance.
        """
        return traits.lifecycle.VersionTrait(self.traitsData())
        
    def unboundedTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:relationship.Unbounded' trait wrapped around
        the data held in this instance.
        """
        return traits.relationship.UnboundedTrait(self.traitsData())
        
    def relationshipTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:usage.Relationship' trait wrapped around
        the data held in this instance.
        """
        return traits.usage.RelationshipTrait(self.traitsData())
        
class StableReferenceRelationshipSpecification:
    """
    Retrieves a stable reference to the supplied entity that is
    guaranteed to always point to that specific entity and version.

    This will apply and remove any dynamic behaviour such as "latest
    version" or other context-sensitive behaviour. The result may be
    used as a persistent bookmark (such as in an "open recent" menu), or
    to snapshot the specific entities used by a process for archival.
    Usage: relationship
    """
    kTraitSet = {
        # 'openassetio-mediacreation:lifecycle.Stable'
        traits.lifecycle.StableTrait.kId,
        # 'openassetio-mediacreation:relationship.Singular'
        traits.relationship.SingularTrait.kId,
        # 'openassetio-mediacreation:usage.Relationship'
        traits.usage.RelationshipTrait.kId,
        
    }

    def __init__(self, traitsData):
        """
        Constructs the specification as a view on the supplied
        shared @fqref{TraitsData} "TraitsData" instance.

        @param traitsData @fqref{TraitsData} "TraitsData"

        @warning Specifications are always a view on the supplied data,
        which is held by reference. Any changes made to the data will be
        visible to any other specifications or @ref trait "traits" that
        wrap the same TraitsData instance.
        """
        if not isinstance(traitsData, TraitsData):
            raise TypeError("Specifications must be constructed with a TraitsData instance")
        self.__data = traitsData

    def traitsData(self):
        """
        Returns the underlying (shared) @fqref{TraitsData} "TraitsData"
        instance held by this specification.
        """
        return self.__data

    @classmethod
    def create(cls):
        """
        Returns a new instance of the Specification, holding a new
        @fqref{TraitsData} "TraitsData" instance, pre-populated with all
        of the specifications traits.
        """
        data = TraitsData(cls.kTraitSet)
        return cls(data)


    def stableTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:lifecycle.Stable' trait wrapped around
        the data held in this instance.
        """
        return traits.lifecycle.StableTrait(self.traitsData())
        
    def singularTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:relationship.Singular' trait wrapped around
        the data held in this instance.
        """
        return traits.relationship.SingularTrait(self.traitsData())
        
    def relationshipTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:usage.Relationship' trait wrapped around
        the data held in this instance.
        """
        return traits.usage.RelationshipTrait(self.traitsData())
        