
"""
Specification definitions in the 'representation' namespace.

Specifications for alternative presentations of a specific entity.
"""

# WARNING: This file is auto-generated by openassetio-traitgen, do not edit.

from openassetio.trait import TraitsData


from .. import traits



class OriginalRepresentationRelationshipSpecification:
    """
    Defines the definitive representation of an entity.
    Usage: relationship
    """
    kTraitSet = {
        # 'openassetio-mediacreation:relationship.Singular'
        traits.relationship.SingularTrait.kId,
        # 'openassetio-mediacreation:representation.Original'
        traits.representation.OriginalTrait.kId,
        # 'openassetio-mediacreation:usage.Relationship'
        traits.usage.RelationshipTrait.kId,
        
    }

    def __init__(self, traitsData):
        """
        Constructs the specification as a view on the supplied
        shared @fqref{TraitsData} "TraitsData" instance.

        @param traitsData @fqref{TraitsData} "TraitsData"

        @warning Specifications are always a view on the supplied data,
        which is held by reference. Any changes made to the data will be
        visible to any other specifications or @ref trait "traits" that
        wrap the same TraitsData instance.
        """
        if not isinstance(traitsData, TraitsData):
            raise TypeError("Specifications must be constructed with a TraitsData instance")
        self.__data = traitsData

    def traitsData(self):
        """
        Returns the underlying (shared) @fqref{TraitsData} "TraitsData"
        instance held by this specification.
        """
        return self.__data

    @classmethod
    def create(cls):
        """
        Returns a new instance of the Specification, holding a new
        @fqref{TraitsData} "TraitsData" instance, pre-populated with all
        of the specifications traits.
        """
        data = TraitsData(cls.kTraitSet)
        return cls(data)


    def singularTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:relationship.Singular' trait wrapped around
        the data held in this instance.
        """
        return traits.relationship.SingularTrait(self.traitsData())
        
    def originalTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:representation.Original' trait wrapped around
        the data held in this instance.
        """
        return traits.representation.OriginalTrait(self.traitsData())
        
    def relationshipTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:usage.Relationship' trait wrapped around
        the data held in this instance.
        """
        return traits.usage.RelationshipTrait(self.traitsData())
        
class ProxyRepresentationRelationshipSpecification:
    """
    Defines alternative representations of an entity that depict the
    same logical content, but at different quality or scale.
    Usage: relationship
    """
    kTraitSet = {
        # 'openassetio-mediacreation:representation.Proxy'
        traits.representation.ProxyTrait.kId,
        # 'openassetio-mediacreation:usage.Relationship'
        traits.usage.RelationshipTrait.kId,
        
    }

    def __init__(self, traitsData):
        """
        Constructs the specification as a view on the supplied
        shared @fqref{TraitsData} "TraitsData" instance.

        @param traitsData @fqref{TraitsData} "TraitsData"

        @warning Specifications are always a view on the supplied data,
        which is held by reference. Any changes made to the data will be
        visible to any other specifications or @ref trait "traits" that
        wrap the same TraitsData instance.
        """
        if not isinstance(traitsData, TraitsData):
            raise TypeError("Specifications must be constructed with a TraitsData instance")
        self.__data = traitsData

    def traitsData(self):
        """
        Returns the underlying (shared) @fqref{TraitsData} "TraitsData"
        instance held by this specification.
        """
        return self.__data

    @classmethod
    def create(cls):
        """
        Returns a new instance of the Specification, holding a new
        @fqref{TraitsData} "TraitsData" instance, pre-populated with all
        of the specifications traits.
        """
        data = TraitsData(cls.kTraitSet)
        return cls(data)


    def proxyTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:representation.Proxy' trait wrapped around
        the data held in this instance.
        """
        return traits.representation.ProxyTrait(self.traitsData())
        
    def relationshipTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:usage.Relationship' trait wrapped around
        the data held in this instance.
        """
        return traits.usage.RelationshipTrait(self.traitsData())
        