
"""
Specification definitions in the 'threeDimensional' namespace.

Specifications for commonly encountered three-dimensional data types.
"""

# WARNING: This file is auto-generated by openassetio-traitgen, do not edit.

from openassetio.trait import TraitsData


from .. import traits



class IESProfileResourceSpecification:
    """
    Any entity that holds an IES lighting profile, as defined by IES-
    LM-63, in an independent resource. See:

        https://store.ies.org/product/lm-63-19-approved-method-ies-
    standard-file-format-for-the-electronic-transfer-of-photometric-
    data-and-related-information
    Usage: entity
    """
    kTraitSet = {
        # 'openassetio-mediacreation:content.LocatableContent'
        traits.content.LocatableContentTrait.kId,
        # 'openassetio-mediacreation:threeDimensional.IESProfile'
        traits.threeDimensional.IESProfileTrait.kId,
        # 'openassetio-mediacreation:threeDimensional.Spatial'
        traits.threeDimensional.SpatialTrait.kId,
        # 'openassetio-mediacreation:usage.Entity'
        traits.usage.EntityTrait.kId,
        
    }

    def __init__(self, traitsData):
        """
        Constructs the specification as a view on the supplied
        shared @fqref{TraitsData} "TraitsData" instance.

        @param traitsData @fqref{TraitsData} "TraitsData"

        @warning Specifications are always a view on the supplied data,
        which is held by reference. Any changes made to the data will be
        visible to any other specifications or @ref trait "traits" that
        wrap the same TraitsData instance.
        """
        if not isinstance(traitsData, TraitsData):
            raise TypeError("Specifications must be constructed with a TraitsData instance")
        self.__data = traitsData

    def traitsData(self):
        """
        Returns the underlying (shared) @fqref{TraitsData} "TraitsData"
        instance held by this specification.
        """
        return self.__data

    @classmethod
    def create(cls):
        """
        Returns a new instance of the Specification, holding a new
        @fqref{TraitsData} "TraitsData" instance, pre-populated with all
        of the specifications traits.
        """
        data = TraitsData(cls.kTraitSet)
        return cls(data)


    def locatableContentTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:content.LocatableContent' trait wrapped around
        the data held in this instance.
        """
        return traits.content.LocatableContentTrait(self.traitsData())
        
    def iESProfileTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:threeDimensional.IESProfile' trait wrapped around
        the data held in this instance.
        """
        return traits.threeDimensional.IESProfileTrait(self.traitsData())
        
    def spatialTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:threeDimensional.Spatial' trait wrapped around
        the data held in this instance.
        """
        return traits.threeDimensional.SpatialTrait(self.traitsData())
        
    def entityTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:usage.Entity' trait wrapped around
        the data held in this instance.
        """
        return traits.usage.EntityTrait(self.traitsData())
        
class SceneCameraResourceSpecification:
    """
    Any entity that holds a digital representation of a camera, in an
    independent resource.
    Usage: entity
    """
    kTraitSet = {
        # 'openassetio-mediacreation:content.LocatableContent'
        traits.content.LocatableContentTrait.kId,
        # 'openassetio-mediacreation:imaging.Camera'
        traits.imaging.CameraTrait.kId,
        # 'openassetio-mediacreation:threeDimensional.Spatial'
        traits.threeDimensional.SpatialTrait.kId,
        # 'openassetio-mediacreation:usage.Entity'
        traits.usage.EntityTrait.kId,
        
    }

    def __init__(self, traitsData):
        """
        Constructs the specification as a view on the supplied
        shared @fqref{TraitsData} "TraitsData" instance.

        @param traitsData @fqref{TraitsData} "TraitsData"

        @warning Specifications are always a view on the supplied data,
        which is held by reference. Any changes made to the data will be
        visible to any other specifications or @ref trait "traits" that
        wrap the same TraitsData instance.
        """
        if not isinstance(traitsData, TraitsData):
            raise TypeError("Specifications must be constructed with a TraitsData instance")
        self.__data = traitsData

    def traitsData(self):
        """
        Returns the underlying (shared) @fqref{TraitsData} "TraitsData"
        instance held by this specification.
        """
        return self.__data

    @classmethod
    def create(cls):
        """
        Returns a new instance of the Specification, holding a new
        @fqref{TraitsData} "TraitsData" instance, pre-populated with all
        of the specifications traits.
        """
        data = TraitsData(cls.kTraitSet)
        return cls(data)


    def locatableContentTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:content.LocatableContent' trait wrapped around
        the data held in this instance.
        """
        return traits.content.LocatableContentTrait(self.traitsData())
        
    def cameraTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:imaging.Camera' trait wrapped around
        the data held in this instance.
        """
        return traits.imaging.CameraTrait(self.traitsData())
        
    def spatialTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:threeDimensional.Spatial' trait wrapped around
        the data held in this instance.
        """
        return traits.threeDimensional.SpatialTrait(self.traitsData())
        
    def entityTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:usage.Entity' trait wrapped around
        the data held in this instance.
        """
        return traits.usage.EntityTrait(self.traitsData())
        
class SceneGeometryResourceSpecification:
    """
    Any entity that holds three-dimensional data describing one or more
    objects, in an independent resource.
    Usage: entity
    """
    kTraitSet = {
        # 'openassetio-mediacreation:content.LocatableContent'
        traits.content.LocatableContentTrait.kId,
        # 'openassetio-mediacreation:threeDimensional.Geometry'
        traits.threeDimensional.GeometryTrait.kId,
        # 'openassetio-mediacreation:threeDimensional.Spatial'
        traits.threeDimensional.SpatialTrait.kId,
        # 'openassetio-mediacreation:usage.Entity'
        traits.usage.EntityTrait.kId,
        
    }

    def __init__(self, traitsData):
        """
        Constructs the specification as a view on the supplied
        shared @fqref{TraitsData} "TraitsData" instance.

        @param traitsData @fqref{TraitsData} "TraitsData"

        @warning Specifications are always a view on the supplied data,
        which is held by reference. Any changes made to the data will be
        visible to any other specifications or @ref trait "traits" that
        wrap the same TraitsData instance.
        """
        if not isinstance(traitsData, TraitsData):
            raise TypeError("Specifications must be constructed with a TraitsData instance")
        self.__data = traitsData

    def traitsData(self):
        """
        Returns the underlying (shared) @fqref{TraitsData} "TraitsData"
        instance held by this specification.
        """
        return self.__data

    @classmethod
    def create(cls):
        """
        Returns a new instance of the Specification, holding a new
        @fqref{TraitsData} "TraitsData" instance, pre-populated with all
        of the specifications traits.
        """
        data = TraitsData(cls.kTraitSet)
        return cls(data)


    def locatableContentTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:content.LocatableContent' trait wrapped around
        the data held in this instance.
        """
        return traits.content.LocatableContentTrait(self.traitsData())
        
    def geometryTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:threeDimensional.Geometry' trait wrapped around
        the data held in this instance.
        """
        return traits.threeDimensional.GeometryTrait(self.traitsData())
        
    def spatialTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:threeDimensional.Spatial' trait wrapped around
        the data held in this instance.
        """
        return traits.threeDimensional.SpatialTrait(self.traitsData())
        
    def entityTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:usage.Entity' trait wrapped around
        the data held in this instance.
        """
        return traits.usage.EntityTrait(self.traitsData())
        
class SceneLightingResourceSpecification:
    """
    Any entity that holds three-dimensional data describing scene or
    object lighting, in an independent resource.
    Usage: entity
    """
    kTraitSet = {
        # 'openassetio-mediacreation:content.LocatableContent'
        traits.content.LocatableContentTrait.kId,
        # 'openassetio-mediacreation:threeDimensional.Lighting'
        traits.threeDimensional.LightingTrait.kId,
        # 'openassetio-mediacreation:threeDimensional.Spatial'
        traits.threeDimensional.SpatialTrait.kId,
        # 'openassetio-mediacreation:usage.Entity'
        traits.usage.EntityTrait.kId,
        
    }

    def __init__(self, traitsData):
        """
        Constructs the specification as a view on the supplied
        shared @fqref{TraitsData} "TraitsData" instance.

        @param traitsData @fqref{TraitsData} "TraitsData"

        @warning Specifications are always a view on the supplied data,
        which is held by reference. Any changes made to the data will be
        visible to any other specifications or @ref trait "traits" that
        wrap the same TraitsData instance.
        """
        if not isinstance(traitsData, TraitsData):
            raise TypeError("Specifications must be constructed with a TraitsData instance")
        self.__data = traitsData

    def traitsData(self):
        """
        Returns the underlying (shared) @fqref{TraitsData} "TraitsData"
        instance held by this specification.
        """
        return self.__data

    @classmethod
    def create(cls):
        """
        Returns a new instance of the Specification, holding a new
        @fqref{TraitsData} "TraitsData" instance, pre-populated with all
        of the specifications traits.
        """
        data = TraitsData(cls.kTraitSet)
        return cls(data)


    def locatableContentTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:content.LocatableContent' trait wrapped around
        the data held in this instance.
        """
        return traits.content.LocatableContentTrait(self.traitsData())
        
    def lightingTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:threeDimensional.Lighting' trait wrapped around
        the data held in this instance.
        """
        return traits.threeDimensional.LightingTrait(self.traitsData())
        
    def spatialTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:threeDimensional.Spatial' trait wrapped around
        the data held in this instance.
        """
        return traits.threeDimensional.SpatialTrait(self.traitsData())
        
    def entityTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:usage.Entity' trait wrapped around
        the data held in this instance.
        """
        return traits.usage.EntityTrait(self.traitsData())
        
class SceneResourceSpecification:
    """
    Any entity that holds three-dimensional data in an independent
    resource.
    Usage: entity
    """
    kTraitSet = {
        # 'openassetio-mediacreation:content.LocatableContent'
        traits.content.LocatableContentTrait.kId,
        # 'openassetio-mediacreation:threeDimensional.Spatial'
        traits.threeDimensional.SpatialTrait.kId,
        # 'openassetio-mediacreation:usage.Entity'
        traits.usage.EntityTrait.kId,
        
    }

    def __init__(self, traitsData):
        """
        Constructs the specification as a view on the supplied
        shared @fqref{TraitsData} "TraitsData" instance.

        @param traitsData @fqref{TraitsData} "TraitsData"

        @warning Specifications are always a view on the supplied data,
        which is held by reference. Any changes made to the data will be
        visible to any other specifications or @ref trait "traits" that
        wrap the same TraitsData instance.
        """
        if not isinstance(traitsData, TraitsData):
            raise TypeError("Specifications must be constructed with a TraitsData instance")
        self.__data = traitsData

    def traitsData(self):
        """
        Returns the underlying (shared) @fqref{TraitsData} "TraitsData"
        instance held by this specification.
        """
        return self.__data

    @classmethod
    def create(cls):
        """
        Returns a new instance of the Specification, holding a new
        @fqref{TraitsData} "TraitsData" instance, pre-populated with all
        of the specifications traits.
        """
        data = TraitsData(cls.kTraitSet)
        return cls(data)


    def locatableContentTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:content.LocatableContent' trait wrapped around
        the data held in this instance.
        """
        return traits.content.LocatableContentTrait(self.traitsData())
        
    def spatialTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:threeDimensional.Spatial' trait wrapped around
        the data held in this instance.
        """
        return traits.threeDimensional.SpatialTrait(self.traitsData())
        
    def entityTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:usage.Entity' trait wrapped around
        the data held in this instance.
        """
        return traits.usage.EntityTrait(self.traitsData())
        
class ShaderResourceSpecification:
    """
    Any entity that holds a parameterised algorithm that is evaluated
    during processing of a three-dimensional scene, in an independent
    resource.
    Usage: entity
    """
    kTraitSet = {
        # 'openassetio-mediacreation:content.LocatableContent'
        traits.content.LocatableContentTrait.kId,
        # 'openassetio-mediacreation:threeDimensional.Shader'
        traits.threeDimensional.ShaderTrait.kId,
        # 'openassetio-mediacreation:threeDimensional.Spatial'
        traits.threeDimensional.SpatialTrait.kId,
        # 'openassetio-mediacreation:usage.Entity'
        traits.usage.EntityTrait.kId,
        
    }

    def __init__(self, traitsData):
        """
        Constructs the specification as a view on the supplied
        shared @fqref{TraitsData} "TraitsData" instance.

        @param traitsData @fqref{TraitsData} "TraitsData"

        @warning Specifications are always a view on the supplied data,
        which is held by reference. Any changes made to the data will be
        visible to any other specifications or @ref trait "traits" that
        wrap the same TraitsData instance.
        """
        if not isinstance(traitsData, TraitsData):
            raise TypeError("Specifications must be constructed with a TraitsData instance")
        self.__data = traitsData

    def traitsData(self):
        """
        Returns the underlying (shared) @fqref{TraitsData} "TraitsData"
        instance held by this specification.
        """
        return self.__data

    @classmethod
    def create(cls):
        """
        Returns a new instance of the Specification, holding a new
        @fqref{TraitsData} "TraitsData" instance, pre-populated with all
        of the specifications traits.
        """
        data = TraitsData(cls.kTraitSet)
        return cls(data)


    def locatableContentTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:content.LocatableContent' trait wrapped around
        the data held in this instance.
        """
        return traits.content.LocatableContentTrait(self.traitsData())
        
    def shaderTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:threeDimensional.Shader' trait wrapped around
        the data held in this instance.
        """
        return traits.threeDimensional.ShaderTrait(self.traitsData())
        
    def spatialTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:threeDimensional.Spatial' trait wrapped around
        the data held in this instance.
        """
        return traits.threeDimensional.SpatialTrait(self.traitsData())
        
    def entityTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:usage.Entity' trait wrapped around
        the data held in this instance.
        """
        return traits.usage.EntityTrait(self.traitsData())
        
class SpatialSpecification:
    """
    Any entity that holds three-dimensional data.
    Usage: entity
    """
    kTraitSet = {
        # 'openassetio-mediacreation:threeDimensional.Spatial'
        traits.threeDimensional.SpatialTrait.kId,
        # 'openassetio-mediacreation:usage.Entity'
        traits.usage.EntityTrait.kId,
        
    }

    def __init__(self, traitsData):
        """
        Constructs the specification as a view on the supplied
        shared @fqref{TraitsData} "TraitsData" instance.

        @param traitsData @fqref{TraitsData} "TraitsData"

        @warning Specifications are always a view on the supplied data,
        which is held by reference. Any changes made to the data will be
        visible to any other specifications or @ref trait "traits" that
        wrap the same TraitsData instance.
        """
        if not isinstance(traitsData, TraitsData):
            raise TypeError("Specifications must be constructed with a TraitsData instance")
        self.__data = traitsData

    def traitsData(self):
        """
        Returns the underlying (shared) @fqref{TraitsData} "TraitsData"
        instance held by this specification.
        """
        return self.__data

    @classmethod
    def create(cls):
        """
        Returns a new instance of the Specification, holding a new
        @fqref{TraitsData} "TraitsData" instance, pre-populated with all
        of the specifications traits.
        """
        data = TraitsData(cls.kTraitSet)
        return cls(data)


    def spatialTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:threeDimensional.Spatial' trait wrapped around
        the data held in this instance.
        """
        return traits.threeDimensional.SpatialTrait(self.traitsData())
        
    def entityTrait(self):
        """
        Returns the view for the 'openassetio-mediacreation:usage.Entity' trait wrapped around
        the data held in this instance.
        """
        return traits.usage.EntityTrait(self.traitsData())
        