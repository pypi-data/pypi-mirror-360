# This file is automatically generated from KLR
# Manual edits will be overwritten

from typing import NamedTuple, Optional
from enum import Enum, auto

class Pos(NamedTuple):
  line : int
  column : int
  lineEnd : Optional[int]
  columnEnd : Optional[int]

class Value_none(NamedTuple):
  pass

class Value_bool(NamedTuple):
  value : bool

class Value_int(NamedTuple):
  value : int

class Value_float(NamedTuple):
  value : float

class Value_string(NamedTuple):
  value : str

class Value_ellipsis(NamedTuple):
  pass

class Value_tensor(NamedTuple):
  shape : list[int]
  dtype : str

Value = Value_tensor | Value_ellipsis | Value_string | Value_float | Value_int | Value_bool | Value_none

class BinOp(Enum):
  Land = auto()
  Lor = auto()
  Eq = auto()
  Ne = auto()
  Lt = auto()
  Le = auto()
  Gt = auto()
  Ge = auto()
  Add = auto()
  Sub = auto()
  Mul = auto()
  Div = auto()
  Mod = auto()
  Pow = auto()
  Floor = auto()
  Lshift = auto()
  Rshift = auto()
  Or = auto()
  Xor = auto()
  And = auto()

def BinOp_land(): return BinOp.Land
def BinOp_lor(): return BinOp.Lor
def BinOp_eq(): return BinOp.Eq
def BinOp_ne(): return BinOp.Ne
def BinOp_lt(): return BinOp.Lt
def BinOp_le(): return BinOp.Le
def BinOp_gt(): return BinOp.Gt
def BinOp_ge(): return BinOp.Ge
def BinOp_add(): return BinOp.Add
def BinOp_sub(): return BinOp.Sub
def BinOp_mul(): return BinOp.Mul
def BinOp_div(): return BinOp.Div
def BinOp_mod(): return BinOp.Mod
def BinOp_pow(): return BinOp.Pow
def BinOp_floor(): return BinOp.Floor
def BinOp_lshift(): return BinOp.Lshift
def BinOp_rshift(): return BinOp.Rshift
def BinOp_or(): return BinOp.Or
def BinOp_xor(): return BinOp.Xor
def BinOp_and(): return BinOp.And

class Expr_value(NamedTuple):
  value : "Value"

class Expr_var(NamedTuple):
  name : str

class Expr_proj(NamedTuple):
  expr : "Expr"
  name : str

class Expr_tuple(NamedTuple):
  elements : list["Expr"]

class Expr_access(NamedTuple):
  expr : "Expr"
  indices : list["Index"]

class Expr_binOp(NamedTuple):
  op : "BinOp"
  left : "Expr"
  right : "Expr"

class Expr_ifExp(NamedTuple):
  test : "Expr"
  body : "Expr"
  orelse : "Expr"

class Expr_call(NamedTuple):
  f : "Expr"
  args : list["Expr"]
  keywords : list["Keyword"]

Expr_ = Expr_call | Expr_ifExp | Expr_binOp | Expr_access | Expr_tuple | Expr_proj | Expr_var | Expr_value

class Expr(NamedTuple):
  expr : "Expr_"
  pos : "Pos"

class Index_coord(NamedTuple):
  i : "Expr"

class Index_slice(NamedTuple):
  l : Optional["Expr"]
  u : Optional["Expr"]
  step : Optional["Expr"]

Index = Index_slice | Index_coord

class Keyword(NamedTuple):
  name : str
  expr : "Expr"

class Stmt_expr(NamedTuple):
  e : "Expr"

class Stmt_assert(NamedTuple):
  e : "Expr"

class Stmt_ret(NamedTuple):
  e : "Expr"

class Stmt_assign(NamedTuple):
  x : "Expr"
  ty : Optional["Expr"]
  e : Optional["Expr"]

class Stmt_ifStm(NamedTuple):
  e : "Expr"
  thn : list["Stmt"]
  els : list["Stmt"]

class Stmt_forLoop(NamedTuple):
  x : "Expr"
  iter : "Expr"
  body : list["Stmt"]

class Stmt_breakLoop(NamedTuple):
  pass

class Stmt_continueLoop(NamedTuple):
  pass

Stmt_ = Stmt_continueLoop | Stmt_breakLoop | Stmt_forLoop | Stmt_ifStm | Stmt_assign | Stmt_ret | Stmt_assert | Stmt_expr

class Stmt(NamedTuple):
  stmt : "Stmt_"
  pos : "Pos"

class Param(NamedTuple):
  name : str
  dflt : Optional["Expr"]

class Fun(NamedTuple):
  name : str
  file : str
  line : int
  body : list["Stmt"]
  args : list["Param"]

class Arg(NamedTuple):
  name : str
  value : "Expr"

class Kernel(NamedTuple):
  entry : str
  funs : list["Fun"]
  args : list["Arg"]
  globals : list["Arg"]
