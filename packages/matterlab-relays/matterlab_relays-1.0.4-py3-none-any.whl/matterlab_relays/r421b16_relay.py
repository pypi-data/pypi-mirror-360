from pathlib import Path
from struct import pack
import time
from typing import Dict, Tuple
from matterlab_serial_device import SerialDevice, open_close
from matterlab_relays.base_relay import Relay


class R421B16Relay(Relay, SerialDevice):
    category="Relay"
    ui_fields  = ("com_port", "address","channel")
    def __init__(self,
                 com_port: str,
                 address: int,
                 channel: int = None,
                 encoding: str = "utf-8",
                 baudrate: int = 9600,
                 timeout: float = 1.0,
                 parity: str = "none",
                 bytesize: int = 8,
                 stopbits: int = 1,
                 **kwargs
                 ):
        """
        :param com_port: COM port of the pump connected to, example: "COM1", "/tty/USB0"
        :param address: RS485 address of relay
        :param channel: channel number to instantiate,
                            None to allow multi channel operation (not implemented in base_relay)
        :return:
        """
        assert 1 <= channel <= 16, "R421B16 relay channel must be in [1,16]!"

        SerialDevice.__init__(self,
                              com_port=com_port,
                              encoding = encoding,
                              baudrate = baudrate,
                              parity = parity,
                              timeout = timeout,
                              bytesize = bytesize,
                              stopbits = stopbits,
                              **kwargs
                              )
        Relay.__init__(self)
        self.address = address
        self.channel = channel

    @staticmethod
    def _cal_modbus_CRC16(cmd: bytes) -> bytes:
        """
        DO NOT TOUCH unless you know what you are doing!

        calculate 2-digit CRC16_modbus for the 6-digit command
        append CRC to command and return
        :param cmd: bytes command to calculate CRC16
        :return: bytes command + 2-byte CRC16
        """
        auchCRCHi = [
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
        0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
        ]
        auchCRCLo = [
        0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,0x04,
        0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8,
        0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
        0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10,
        0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
        0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
        0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C,
        0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0,
        0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
        0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
        0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C,
        0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
        0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54,
        0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98,
        0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
        0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,0x40
        ]

        uchCRCHi = 0xFF
        uchCRCLo = 0xFF
        for i in range(0, len(cmd)):
            uIndex = uchCRCHi ^ cmd[i]
            uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex]
            uchCRCLo = auchCRCLo[uIndex]

        crc = uchCRCHi << 8 | uchCRCLo
        out = cmd + pack('>H', crc)
        return out

    def _generate_query_command(self, channel: int) -> bytes:
        """
        generate the bytes query command for designated channel
        :param channel: channel to query
        :return: packed bytes query command
        """
        command = bytes.fromhex(f'{self.address:02X}03{channel:04X}0001')
        return self._cal_modbus_CRC16(command)

    def _generate_execute_command(self, channel: int, open_channel: bool) -> bytes:
        """
        generate the
        :param channel: channel to execute
        :param open_channel: open/close the channel
        :return: packed bytes query command
        """
        if open_channel:
            command = bytes.fromhex(f'{self.address:02X}06{channel:04X}0100')
        else:
            command = bytes.fromhex(f'{self.address:02X}06{channel:04X}0200')
        return self._cal_modbus_CRC16(command)

    @open_close
    def set_relay(self, channel: int, open_channel: bool):
        """
        set the relay channel to open/close
        wait 0.1 s for hardware execution
        :param channel:
        :param open_channel:
        :return:
        """
        command_bytes = self._generate_execute_command(channel= channel, open_channel= open_channel)
        self.write(command = command_bytes)
        time.sleep(0.5)

    @open_close
    def query_relay(self, channel: int) -> bool:
        """
        query the relay channel if open/close
        wait 0.5 s for response
        :param channel:
        :return:
        """
        command_bytes = self._generate_query_command(channel= channel)
        rtn = self.query(write_command = command_bytes,
                         num_bytes = 7,
                         remove_from_end = 0,
                         return_bytes = True,
                         read_delay = 0.1)
        return bool(int(rtn[4]))

    @property
    def on(self) -> bool:
        """
        concrete method to return if a relay channel is set to normal_open or normal_close
        :return: channel is open (True) or closed (False)
        """
        return self.query_relay(channel= self.channel)

    @on.setter
    def on(self, open_channel: bool):
        """
        concrete method to set a relay channel to normal_open or normal_close
        :param open_channel True for open False for close
        :return:
        """
        self.set_relay(channel= self.channel, open_channel= open_channel)