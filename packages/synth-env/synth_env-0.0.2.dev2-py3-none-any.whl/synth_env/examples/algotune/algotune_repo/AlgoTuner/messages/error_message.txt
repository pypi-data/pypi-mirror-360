Command parsing failed. 
Remember to include one and only one command in each message. Important: remember to include all arguments for each command.
Remember to sandwich your command in between ``` and ```. 
IMPORTANT: Each set of triple backticks (```) must always be on their own line, without any other words or anything else on that line.

Here are the commands available to you. Ensure you include one and only one of the following commands in each of your responses:
- `edit`: Replace a range of lines with new content in a file. This is how you can create files: if the file does not exist, it will be created. Here is an example:
  ```
  edit 
  file: <file_name>
  lines: <start_line>-<end_line>
  ---
  <new_content>
  ---
  ```

  The command will:
  1. Delete the lines from <start_line> to <end_line> (inclusive)
  2. Insert <new_content> starting at <start_line>
  3. If both <start_line> and <end_line> are 0, <new_content> will be prepended to the file
  
  Example:
  edit
  file: solver.py
  lines: 5-7
  ---
  def improved_function():
      print("Optimized solution")
  ---
- `ls`: List all files in the current working directory.
- `view_file <file_name> [start_line]`: Display 100 lines of `<file_name>` starting from `start_line` (defaults to line 1).
- `revert`: Revert the code to the best-performing version thus far.
- `reference <string>`: Query the reference solver with a problem and receive its solution. If the problem's input is a list, this command would look like: 
  ```
  reference [1,2,3,4]
  ```
- `eval_input <string>`: Run your current solver implementation on the given input. This is the only command that shows stdout from your solver along with both solutions. Example: 
  ```
  eval_input [1,2,3,4]
  ```
- `eval`: Run evaluation on the current solution and report the results.
- `delete`: Delete a range of lines from a file using the format:
  ```
  delete
  file: <file_name>
  lines: <start_line>-<end_line>

  The command will delete the lines from <start_line> to <end_line> (inclusive)
  
  Example:
  ```
  delete
  file: solver.py
  lines: 5-10
  ```
- `profile <filename.py> <input>`: Profile your currently loaded solve method's performance on a given input. Shows the 25 most time-consuming lines. Requires specifying a python file (e.g., `solver.py`) for validation, though profiling runs on the current in-memory code.
  Example:
  ```
  profile solver.py [1, 2, 3]
  ```
- `profile_lines <filename.py> <line_number1, line_number2, ...> <input>`: Profiles the chosen lines of the currently loaded code on the given input. Requires specifying a python file for validation.
  Example: 
  ```
  profile_lines solver.py 1,2,3 [1, 2, 3]
  ```