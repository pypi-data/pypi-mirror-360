"""
Comando de diagn√≥stico e configura√ß√£o para Django Cazenga UI
Este comando funciona mesmo sem configura√ß√µes no settings.py
"""

import os
import re
import shutil
from pathlib import Path
from django.core.management.base import BaseCommand
from django.conf import settings


class Command(BaseCommand):
    """Comando de diagn√≥stico e configura√ß√£o inicial"""
    
    help = 'Diagn√≥stico e orienta√ß√µes para configurar Django Cazenga UI'
    
    def add_arguments(self, parser):
        """Adiciona argumentos ao comando"""
        parser.add_argument(
            '--auto-configure',
            action='store_true',
            help='Configura automaticamente o settings.py (com confirma√ß√£o)'
        )
        parser.add_argument(
            '--yes',
            action='store_true',
            help='Confirma automaticamente todas as altera√ß√µes'
        )
    
    def handle(self, *args, **options):
        """Executa diagn√≥stico e fornece orienta√ß√µes"""
        self.stdout.write(
            self.style.SUCCESS('\nüîç Diagn√≥stico Django Cazenga UI\n')
        )
        
        # Verifica se as depend√™ncias est√£o instaladas
        dependencies = self._check_dependencies()
        
        # Verifica configura√ß√£o do settings.py
        config_status = self._check_settings_config()
        
        # Mostra status
        self._show_status(dependencies, config_status)
        
        # Auto-configura√ß√£o se solicitada
        if options['auto_configure'] or options['yes']:
            self._auto_configure(config_status, options['yes'])
        else:
            # Mostra orienta√ß√µes
            self._show_instructions(dependencies, config_status)
    
    def _auto_configure(self, config_status: dict, auto_yes: bool = False):
        """Configura automaticamente o settings.py"""
        self.stdout.write('\nüîß Auto-configura√ß√£o do settings.py\n')
        
        # Identifica o que precisa ser adicionado
        missing_items = []
        
        if not config_status['cazenga_ui']:
            missing_items.append("'cazenga_ui' no INSTALLED_APPS")
        if not config_status['tailwind']:
            missing_items.append("'tailwind' no INSTALLED_APPS")
        if not config_status['django_browser_reload']:
            missing_items.append("'django_browser_reload' no INSTALLED_APPS")
        if not config_status['mathfilters']:
            missing_items.append("'mathfilters' no INSTALLED_APPS")
        if not config_status['browser_reload_middleware']:
            missing_items.append("BrowserReloadMiddleware no MIDDLEWARE")
        if not config_status['tailwind_app_name']:
            missing_items.append("TAILWIND_APP_NAME = 'theme'")
        if not config_status['npm_bin_path']:
            missing_items.append("NPM_BIN_PATH")
        
        if not missing_items:
            self.stdout.write('‚úÖ Todas as configura√ß√µes j√° est√£o presentes!')
            return
        
        # Mostra o que ser√° adicionado
        self.stdout.write('üìã Itens que ser√£o adicionados:')
        for item in missing_items:
            self.stdout.write(f'  + {item}')
        
        # Confirma√ß√£o
        if not auto_yes:
            confirm = input('\n‚ùì Deseja continuar com a auto-configura√ß√£o? [s/N]: ').lower().strip()
            if confirm not in ['s', 'sim', 'y', 'yes']:
                self.stdout.write('‚ùå Auto-configura√ß√£o cancelada.')
                self._show_instructions({}, config_status)
                return
        
        # Faz backup
        settings_path = self._get_settings_path()
        if not self._backup_settings(settings_path):
            return
        
        # Aplica as configura√ß√µes
        success = self._apply_configurations(settings_path, config_status)
        
        if success:
            self.stdout.write('\n‚úÖ Auto-configura√ß√£o conclu√≠da com sucesso!')
            self.stdout.write('üíæ Backup salvo como: settings.py.backup')
            self.stdout.write('\nüéØ Pr√≥ximo passo:')
            self.stdout.write('   python manage.py cazenga init --with-tailwind')
        else:
            self.stdout.write('\n‚ùå Erro na auto-configura√ß√£o.')
            self.stdout.write('üíæ Arquivo original restaurado do backup.')
    
    def _get_settings_path(self) -> Path:
        """Encontra o caminho do settings.py"""
        base_dir = Path(settings.BASE_DIR)
        
        # Procura por settings.py na estrutura do projeto
        possible_paths = [
            base_dir / 'settings.py',
            base_dir / f'{base_dir.name}' / 'settings.py',
        ]
        
        # Verifica via DJANGO_SETTINGS_MODULE
        settings_module = os.environ.get('DJANGO_SETTINGS_MODULE', '')
        if settings_module:
            module_path = settings_module.replace('.', '/') + '.py'
            possible_paths.append(base_dir / module_path)
        
        for path in possible_paths:
            if path.exists():
                return path
        
        # Fallback: busca recursivamente
        for settings_file in base_dir.rglob('settings.py'):
            if 'venv' not in str(settings_file) and 'site-packages' not in str(settings_file):
                return settings_file
        
        raise FileNotFoundError('Arquivo settings.py n√£o encontrado')
    
    def _backup_settings(self, settings_path: Path) -> bool:
        """Faz backup do settings.py"""
        backup_path = settings_path.with_suffix('.py.backup')
        
        try:
            shutil.copy2(settings_path, backup_path)
            self.stdout.write(f'üíæ Backup criado: {backup_path}')
            return True
        except Exception as e:
            self.stdout.write(f'‚ùå Erro ao criar backup: {e}')
            return False
    
    def _apply_configurations(self, settings_path: Path, config_status: dict) -> bool:
        """Aplica as configura√ß√µes no settings.py"""
        try:
            with open(settings_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            original_content = content
            
            # Adiciona apps ao INSTALLED_APPS
            content = self._add_installed_apps(content, config_status)
            
            # Adiciona middleware
            content = self._add_middleware(content, config_status)
            
            # Adiciona configura√ß√µes no final
            content = self._add_settings(content, config_status)
            
            # Salva o arquivo modificado
            with open(settings_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            return True
            
        except Exception as e:
            self.stdout.write(f'‚ùå Erro ao modificar settings.py: {e}')
            # Restaura backup
            backup_path = settings_path.with_suffix('.py.backup')
            if backup_path.exists():
                shutil.copy2(backup_path, settings_path)
            return False
    
    def _add_installed_apps(self, content: str, config_status: dict) -> str:
        """Adiciona apps ao INSTALLED_APPS"""
        apps_to_add = []
        
        if not config_status['tailwind']:
            apps_to_add.append("    'tailwind',")
        if not config_status['cazenga_ui']:
            apps_to_add.append("    'cazenga_ui',")
        if not config_status['django_browser_reload']:
            apps_to_add.append("    'django_browser_reload',")
        if not config_status['mathfilters']:
            apps_to_add.append("    'mathfilters',")
        
        if not apps_to_add:
            return content
        
        # Procura INSTALLED_APPS
        pattern = r'(INSTALLED_APPS\s*=\s*\[)(.*?)(\])'
        match = re.search(pattern, content, re.DOTALL)
        
        if match:
            # Adiciona as apps antes do ]
            apps_section = match.group(2)
            # Remove trailing whitespace and comma if needed
            apps_section = apps_section.rstrip()
            if not apps_section.endswith(','):
                apps_section += ','
            
            new_apps = '\n' + '\n'.join(apps_to_add)
            new_installed_apps = f"{match.group(1)}{apps_section}{new_apps}\n{match.group(3)}"
            
            content = content.replace(match.group(0), new_installed_apps)
            self.stdout.write('‚úÖ Apps adicionadas ao INSTALLED_APPS')
        
        return content
    
    def _add_middleware(self, content: str, config_status: dict) -> str:
        """Adiciona middleware ao MIDDLEWARE"""
        if config_status['browser_reload_middleware']:
            return content
        
        middleware_line = "    'django_browser_reload.middleware.BrowserReloadMiddleware',"
        
        # Procura MIDDLEWARE
        pattern = r'(MIDDLEWARE\s*=\s*\[)(.*?)(\])'
        match = re.search(pattern, content, re.DOTALL)
        
        if match:
            # Adiciona o middleware antes do ]
            middleware_section = match.group(2)
            middleware_section = middleware_section.rstrip()
            if not middleware_section.endswith(','):
                middleware_section += ','
            
            new_middleware = f"{match.group(1)}{middleware_section}\n{middleware_line}\n{match.group(3)}"
            content = content.replace(match.group(0), new_middleware)
            self.stdout.write('‚úÖ BrowserReloadMiddleware adicionado ao MIDDLEWARE')
        
        return content
    
    def _add_settings(self, content: str, config_status: dict) -> str:
        """Adiciona configura√ß√µes no final do arquivo"""
        settings_to_add = []
        
        if not config_status['tailwind_app_name']:
            settings_to_add.append("TAILWIND_APP_NAME = 'theme'")
        
        if not config_status['npm_bin_path']:
            settings_to_add.append('NPM_BIN_PATH = r"C:\\Program Files\\nodejs\\npm.cmd"  # Windows')
        
        if settings_to_add:
            # Adiciona as configura√ß√µes no final
            django_cazenga_config = [
                '',
                '# Django Cazenga UI Configuration',
            ] + settings_to_add
            
            content += '\n' + '\n'.join(django_cazenga_config) + '\n'
            self.stdout.write('‚úÖ Configura√ß√µes Django Cazenga UI adicionadas')
        
        return content
    
    def _check_dependencies(self) -> dict:
        """Verifica se as depend√™ncias est√£o instaladas via pip"""
        deps = {}
        
        try:
            import tailwind
            deps['django-tailwind'] = True
        except ImportError:
            deps['django-tailwind'] = False
        
        try:
            import django_browser_reload
            deps['django-browser-reload'] = True
        except ImportError:
            deps['django-browser-reload'] = False
        
        try:
            import mathfilters
            deps['django-mathfilters'] = True
        except ImportError:
            deps['django-mathfilters'] = False
        
        # cazenga_ui sempre estar√° dispon√≠vel se este comando executar
        deps['django-cazenga-ui'] = True
        
        return deps
    
    def _check_settings_config(self) -> dict:
        """Verifica configura√ß√£o no settings.py"""
        config = {}
        
        installed_apps = getattr(settings, 'INSTALLED_APPS', [])
        
        config['cazenga_ui'] = 'cazenga_ui' in installed_apps
        config['tailwind'] = 'tailwind' in installed_apps
        config['django_browser_reload'] = 'django_browser_reload' in installed_apps
        config['mathfilters'] = 'mathfilters' in installed_apps
        config['theme'] = 'theme' in installed_apps  # App criada pelo django-tailwind
        
        config['tailwind_app_name'] = hasattr(settings, 'TAILWIND_APP_NAME')
        config['npm_bin_path'] = hasattr(settings, 'NPM_BIN_PATH')
        
        middleware = getattr(settings, 'MIDDLEWARE', [])
        config['browser_reload_middleware'] = 'django_browser_reload.middleware.BrowserReloadMiddleware' in middleware
        
        return config
    
    def _show_status(self, dependencies: dict, config: dict):
        """Mostra status atual"""
        self.stdout.write('üì¶ Depend√™ncias instaladas:')
        for dep, installed in dependencies.items():
            status = "‚úÖ" if installed else "‚ùå"
            self.stdout.write(f'  {status} {dep}')
        
        self.stdout.write('\n‚öôÔ∏è Configura√ß√£o settings.py:')
        for setting, configured in config.items():
            status = "‚úÖ" if configured else "‚ùå"
            setting_name = setting.replace('_', '-').title()
            self.stdout.write(f'  {status} {setting_name}')
    
    def _show_instructions(self, dependencies: dict, config: dict):
        """Mostra instru√ß√µes baseadas no status"""
        self.stdout.write('\nüìã Instru√ß√µes:')
        
        # Se depend√™ncias n√£o est√£o instaladas
        missing_deps = [dep for dep, installed in dependencies.items() if not installed]
        if missing_deps:
            self.stdout.write('\n1Ô∏è‚É£ Instale as depend√™ncias:')
            self.stdout.write('   pip install django-cazenga-ui[tailwind]')
            self.stdout.write('')
        
        # Se configura√ß√£o est√° incompleta
        missing_config = [conf for conf, configured in config.items() if not configured and conf != 'theme']
        if missing_config:
            self.stdout.write('2Ô∏è‚É£ Configure o settings.py:')
            self.stdout.write('')
            self.stdout.write('   INSTALLED_APPS += [')
            if not config['tailwind']:
                self.stdout.write("       'tailwind',")
            if not config['cazenga_ui']:
                self.stdout.write("       'cazenga_ui',")
            if not config['django_browser_reload']:
                self.stdout.write("       'django_browser_reload',")
            if not config['mathfilters']:
                self.stdout.write("       'mathfilters',")
            self.stdout.write('   ]')
            self.stdout.write('')
            
            if not config['browser_reload_middleware']:
                self.stdout.write('   MIDDLEWARE += [')
                self.stdout.write("       'django_browser_reload.middleware.BrowserReloadMiddleware',")
                self.stdout.write('   ]')
                self.stdout.write('')
            
            if not config['tailwind_app_name']:
                self.stdout.write("   TAILWIND_APP_NAME = 'theme'")
            if not config['npm_bin_path']:
                self.stdout.write('   NPM_BIN_PATH = r"C:\\Program Files\\nodejs\\npm.cmd"  # Windows')
            
            self.stdout.write('')
            self.stdout.write('   üí° Ou use a auto-configura√ß√£o:')
            self.stdout.write('      python manage.py cazenga-setup --auto-configure')
            self.stdout.write('')
        
        # Se tudo configurado
        all_deps_ok = all(dependencies.values())
        main_config_ok = all(config[k] for k in config if k != 'theme')  # Excluir 'theme' da verifica√ß√£o inicial
        
        if all_deps_ok and main_config_ok:
            self.stdout.write('‚úÖ Configura√ß√£o completa!')
            self.stdout.write('\n3Ô∏è‚É£ Execute o comando principal:')
            self.stdout.write('   python manage.py cazenga init --with-tailwind')
        else:
            self.stdout.write('3Ô∏è‚É£ Ap√≥s configurar, execute:')
            self.stdout.write('   python manage.py cazenga init --with-tailwind')
        
        self.stdout.write('\nüí° Comandos dispon√≠veis:')
        self.stdout.write('   python manage.py cazenga-setup                # Este diagn√≥stico')
        self.stdout.write('   python manage.py cazenga-setup --auto-configure  # Auto-configura√ß√£o')
        if config['cazenga_ui']:
            self.stdout.write('   python manage.py cazenga init               # Configura√ß√£o principal')
            self.stdout.write('   python manage.py cazenga themes             # Lista temas')
            self.stdout.write('   python manage.py cazenga status             # Status detalhado')
        else:
            self.stdout.write('   python manage.py cazenga [...]              # Dispon√≠vel ap√≥s configurar') 