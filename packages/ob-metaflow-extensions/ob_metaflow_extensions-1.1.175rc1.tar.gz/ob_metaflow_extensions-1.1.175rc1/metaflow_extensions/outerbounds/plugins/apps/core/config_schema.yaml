
title: Outerbounds App Configuration Schema
description: |
  Schema for defining Outerbounds Apps configuration. This schema is what we will end up using on the CLI/programmatic interface.
  How to read this schema:
    1. If the a property has `allow_union`:true then it will allow overrides from the cli.
    2. If a property has `experimental` set to true then a lot its validations may-be skipped and parsing handled somewhere else.

  The YAML based schema file is for Humans to change and consume. The JSON based schema file is what gets autogenerated based on pre-commit
  hooks so that we can use within the outerbounds package. The reasons for two distinct types of files it that YAML provides the ability to
  add comments and make readability easier. While JSON is so that we can reduce the dependency on YAML when working with apps within both
  Metaflow and OB package.
version: 1.0.0
type: object
required:
  - name
  - port
properties:
  name: # Only used in `deploy` command
    allow_union: true # Allow overriding name from the CLI.
    type: string
    description: The name of the app to deploy.
    maxLength: 20 # todo: check if we should allow a larger length.
    example: "myapp"
  port: # Only used in `deploy` command
    allow_union: false
    type: integer
    description: Port where the app is hosted. When deployed this will be port on which we will deploy the app.
    minimum: 1
    maximum: 65535
    example: 8000
  tags: # Only used in `deploy` command
    allow_union: true
    type: array
    description: The tags of the app to deploy.
    items:
      type: object
    example:
      - foo: bar
      - x: y
  description: # Only used in `deploy` command
    allow_union: true
    type: string
    description: The description of the app to deploy.
    example: "This is a description of my app."
  force_upgrade: # Only used in `deploy` command
    allow_union: true
    type: boolean
    description: Whether to force upgrade the app even if it is currently being upgraded.
    example: true
  app_type: # Only used in `deploy` command
    allow_union: true
    type: string
    description: The User defined type of app to deploy. Its only used for bookkeeping purposes.
    example: "MyCustomAgent"
  image: # Only used in `deploy` command
    allow_union: true # We will overrwite the image if specified on the CLI.
    type: string
    description: The Docker image to deploy with the App.
  secrets: # Used in `run` command
    allow_union: true
    type: array
    description: Outerbounds integrations to attach to the app. You can use the value you set in the `@secrets` decorator in your code.
    items:
      type: string
    example: ["hf-token"]
  environment: # Used in `run` command
    # Todo: So this part might not be best on the CLI. We should probably have a better way to handle this.
    # In simplicity, we can just JSON dump anything that looks like a dict/list/
    allow_union: true
    type: object
    description: Environment variables to deploy with the App.
    additionalProperties:
      oneOf:
        - type: string
        - type: number
        - type: boolean
        - type: object
        - type: array # When users give arrays, or objects, we need to JSON dump them. Users need to be aware of this.
    example:
      DEBUG: true
      DATABASE_CONFIG: {"host": "localhost", "port": 5432}
      ALLOWED_ORIGINS: ["http://localhost:3000", "https://myapp.com"]
  dependencies: # Used in `run` command
    allow_union: false
    type: object
    description: |
      The dependencies to attach to the app. Only one of the properties can be specified.
    properties:
      from_requirements_file:
        type: string
        description: The path to the requirements.txt file to attach to the app.
        example: "requirements.txt"
      from_pyproject_toml:
        type: string
        description: The path to the pyproject.toml file to attach to the app.
        example: "pyproject.toml"
      python:
        type: string
        description: |
          The Python version to use for the app.
        example: "3.10"
      pypi:
        type: object
        description: |
          A dictionary of pypi dependencies to attach to the app.
          The key is the package name and the value is the version.
        example:
          numpy: 1.23.0
          pandas: ""
      conda:
        type: object
        description: |
          A dictionary of pypi dependencies to attach to the app.
          The key is the package name and the value is the version.
        example:
          numpy: 1.23.0
          pandas: ""
  package:
    allow_union: false
    type: object
    description: |
      Configurations associated with packaging the app.
    properties:
      src_path:
        type: string
        description: The path to the source code to deploy with the App.
        example: "./"
      suffixes:
        type: array
        description: |
          A list of suffixes to add to the source code to deploy with the App.
        items:
          type: string
        example: [".py", ".ipynb"]

  commands: # Used in `run` command
    allow_union: false
    type: array
    description: A list of commands to run the app with. Cannot be configured from the CLI. Only used in `run` command.
    items:
      type: string
    example: ["python app.py", "python app.py --foo bar"]
  resources: # Only used in `deploy` command
    allow_union: true # You can override CPU/Memory/GPU/Storage from the CLI.
    type: object
    properties:
      cpu:
        type: string
        description: CPU resource request and limit.
        example: "500m"
        default: "1"
      memory:
        type: string
        description: Memory resource request and limit.
        example: "512Mi"
        default: "4Gi"
      gpu:
        type: string
        description: GPU resource request and limit.
        example: "1"
      disk:
        type: string
        description: Storage resource request and limit.
        example: "1Gi"
        default: "20Gi"
  replicas:
    allow_union: true
    type: object
    description: |
      The number of replicas to deploy the app with.
    properties:
      min:
        type: integer
        description: The minimum number of replicas to deploy the app with.
        example: 1
      max:
        type: integer
        description: The maximum number of replicas to deploy the app with.
        example: 10
  health_check: # Can be used in `run` command
    type: object
    # `allow_union` property means that any object in this field will be done a union with the config file if something is provided on commanline.
    # If it is set to false, then we should throw an exception if the CLI is trying to override something specified in the config file.
    # We will only allow unions in certains options. The rest will not allow any unions and only need to be specified in one place.
    allow_union: false
    properties:
      enabled:
        type: boolean
        description: Whether to enable health checks.
        example: true
        default: false
      path:
        type: string
        description: The path for health checks.
        example: "/health"
      initial_delay_seconds:
        type: integer
        description: Number of seconds to wait before performing the first health check.
        example: 10
      period_seconds:
        type: integer
        description: How often to perform the health check.
        example: 30
  compute_pools: # Only used in `deploy` command
    allow_union: true
    type: array
    description: |
      A list of compute pools to deploy the app to.
    items:
      type: string
    example: ["default", "large"]
  auth: # Only used in `deploy` command
    allow_union: false
    type: object
    description: |
      Auth related configurations.
    properties:
      type:
        type: string
        description: |
          The type of authentication to use for the app.
        enum: [API, Browser]
      public:
        type: boolean
        description: |
          Whether the app is public or not.
        default: true
      # There is an allowed perimeters property
      # But that needs a little more thought on how
      # to expose.

  # ------------------------------------ EXPERIMENTAL ------------------------------------
  project:
    type: string
    description: The project name to deploy the app to.
    experimental: true
    allow_union: true
  branch:
    type: string
    description: The branch name to deploy the app to.
    experimental: true
    allow_union: true

  models: #
    type: array
    description: model asset ids to include with the deployment. NO CLI Option for this Now.
    experimental: true
    allow_union: true
    items:
      type: object
      properties:
        asset_id:
          type: string
        asset_instance_id:
          type: string
  data: #
    type: array
    description: data asset ids to include with the deployment.
    experimental: true
    allow_union: true
    items:
      type: object
      properties:
        asset_id:
          type: string
        asset_instance_id:
          type: string
# ------------------------------------ EXPERIMENTAL ------------------------------------
