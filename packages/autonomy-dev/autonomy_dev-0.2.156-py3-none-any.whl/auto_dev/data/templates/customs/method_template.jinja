    {%- if use_daos %}
    @handle_exception
    {%- endif %}
    def {{ method_name }}(self, message: ApiHttpMessage{% for param in path_params_snake_case %}, {{ param }}{% endfor %}{% if method|lower in ['post', 'put', 'patch'] %}, body{% endif %}):
        {% raw %}"""{% endraw %}Handle {{ method|upper }} request for {{ path }}.{% raw %}"""{% endraw %}
{%- if path_params_snake_case %}
        self.context.logger.debug(f"Path parameters: {% for param in path_params_snake_case %}{{ param }}={{ '{' }}{{ param }}{{ '}' }}{% if not loop.last %}, {% endif %}{% endfor %}")
{%- endif %}
{%- if method|lower in ['post', 'put', 'patch'] %}
        self.context.logger.debug(f"Request body: {body}")
{% endif %}
{%- if not schema %}
        # TODO: Implement {{ method|upper }} logic for {{ path }}
        # TODO: Use this template to return a response with a status code and status text
        # return ApiHttpMessage(
        #     performative=ApiHttpMessage.Performative.RESPONSE,
        #     status_code=status_code,
        #     status_text=status_text,
        #     headers="",
        #     version=message.version,
        #     body=b""
        # )
        raise NotImplementedError
{%- elif use_daos %}
        {%- if method|lower == 'get' and not path_params %}
        result = {{ schema|lower|replace(' ', '_') }}_dao.get_all()
        {%- elif method|lower == 'get' and path_params %}
        result = {{ schema|lower|replace(' ', '_') }}_dao.get_by_id({{ path_params_snake_case[0] }})

        if result is None:
            return self.create_response(message, 404, "Not Found", {"error": f"{{ schema|replace(' ', '_') }} with {{ path_params[0] }} {{ '{' ~ path_params_snake_case[0] ~ '}' }} not found"})
        {%- elif method|lower == 'post' and operation_type in ['insert', 'create'] %}
        {{ schema|lower|replace(' ', '_') }}_body = json.loads(body)
        result = {{ schema|lower|replace(' ', '_') }}_dao.insert({{ schema|lower|replace(' ', '_') }}_body)
        {%- elif method|lower == 'post' and operation_type == 'update' %}
        {{ schema|lower|replace(' ', '_') }}_body = json.loads(body)
        result = {{ schema|lower|replace(' ', '_') }}_dao.update({{ path_params_snake_case[0] }}, **{{ schema|lower|replace(' ', '_') }}_body)
        {%- elif method|lower == 'delete' %}
        result = {{ schema|lower|replace(' ', '_') }}_dao.delete({{ path_params_snake_case[0] }})
        {%- else %}
        # TODO: Implement {{ method|upper }} logic for {{ path }}
        raise NotImplementedError
        {%- endif %}

        self.context.logger.info("Successfully processed {{ method|upper }} request for {{ path }}")
        self.context.logger.debug(f"Result: {result}")
        return self.create_response(message, {{ status_code }}, "{{ status_text }}", result)
{%- for error_code, error_info in error_responses.items() %}
        except {{ error_info.exception }}:
            self.context.logger.exception("{{ error_info.message }}")
            return ApiHttpMessage(
                performative=ApiHttpMessage.Performative.RESPONSE,
                status_code={{ error_code }},
                status_text="{{ error_info.status_text }}",
                headers="",
                version=message.version,
                body=json.dumps({"error": "{{ error_info.message }}"}).encode("utf-8")
            )
{%- endfor %}
{%- else %}
        # TODO: Implement {{ method|upper }} logic for {{ path }}
        # TODO: Use this template to return a response with a status code and status text
        # return ApiHttpMessage(
        #     performative=ApiHttpMessage.Performative.RESPONSE,
        #     status_code=status_code,
        #     status_text=status_text,
        #     headers="",
        #     version=message.version,
        #     body=b""
        # )
        raise NotImplementedError
{%- endif %}