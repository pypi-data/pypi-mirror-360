# -*- coding: utf-8 -*-
# ------------------------------------------------------------------------------
#
#   Copyright 2023 {{author}}
#   Copyright 2023 valory-xyz
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
# ------------------------------------------------------------------------------

"""This package contains a behaviour test that is autogenerated from the protocol `{{protocol_name}}`."""

import json
import logging
from typing import cast
from pathlib import Path
from unittest.mock import patch
import pytest

from aea.test_tools.test_skill import BaseSkillTestCase
from aea.protocols.dialogue.base import DialogueMessage

from packages.{{public_id.author}}.skills.{{public_id.name}} import PUBLIC_ID
from packages.{{public_id.author}}.skills.{{public_id.name}}.behaviours import (
    {{class_name}}FsmBehaviour,
)

ROOT_DIR = Path(__file__).parent.parent.parent.parent.parent.parent


class BaseTestCase(BaseSkillTestCase):
    """Base test case for the fsm."""

    path_to_skill = Path(ROOT_DIR, "packages", PUBLIC_ID.author, "skills", PUBLIC_ID.name)

{% for state in states %}
class Test{{state}}Act(BaseSkillTestCase):
    """Test {{state}}."""
    round_class = {{class_name}}FsmBehaviour.{{state}}

    def test_act(self):
        """Test the act method of the round."""
        round = self.round_class(name="test", skill_context=self.skill.skill_context)
        round.act()
        assert round.is_done()
{% endfor %}