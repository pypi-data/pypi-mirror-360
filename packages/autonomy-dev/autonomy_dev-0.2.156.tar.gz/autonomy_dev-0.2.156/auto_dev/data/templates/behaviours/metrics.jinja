# -*- coding: utf-8 -*-
# ------------------------------------------------------------------------------
#
#   Copyright 2023 {{author}}
#   Copyright 2023 valory-xyz
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
# ------------------------------------------------------------------------------

"""This package contains a behaviour that autogenerated from the protocol `{{protocol_name}}`."""

{%if type_imports%}
{% for import in type_imports %}
from typing import {{import}}{% endfor %}
{% endif %}
from packages.eightballer.skills.prometheus.behaviours import PrometheusBehaviour as BaseMetric
from packages.{{author}}.protocols.{{protocol_name}}.message import {{class_name}}Message



class {{class_name}}SpeechActGenerator(BaseMetric):
    """This class generates speech acts for the {{protocol_name}} protocol."""
    counterparty: str = '{{target_connection}}'
    {% for method in speech_acts%}
    {{method}}_count: int = 0
    {% endfor %}

    def create_and_send(self, send=True, **kwargs) -> None:
        """Create and send a message."""
        message, dialogue = self.context.{{protocol_name}}_dialogues.create(
            counterparty=self.counterparty,
            **kwargs,
        )
        if send:
            self.context.outbox.put_message(message)

    def setup(self) -> None:
        """Implement the setup."""
        self.context.logger.info("Setting up {{protocol_name}} SpeechActGenerator behaviour.")

    def act(self) -> None:
        """Implement the act."""
        self.context.logger.debug("Acting in {{protocol_name}} MetricsGenerator behaviour."){% for method in speech_acts%}
        self.create_{{method}}_msg(send=True){% endfor %}

    {% for method in speech_acts%}
    def create_{{method}}_msg(self,{% for arg, (arg_type, default, pyarg) in speech_acts[method].items()%}
        {{pyarg}}: {{arg_type}} = {{default}},{% endfor %}
        send: bool = True,
    ):
        """This method generates a {{method}} dialogue."""
        self.create_and_send( 
            send=send,
            performative={{class_name}}Message.Performative.{{method.upper()}},{% for arg, (arg_type, default, pyarg) in speech_acts[method].items()%}
            {{pyarg}}={{pyarg}},{% endfor %}
        )
    {% endfor %}

    def teardown(self) -> None:
        """Implement the teardown."""
        self.context.logger.info("Tearing down {{protocol_name}} SpeechActGenerator behaviour.")