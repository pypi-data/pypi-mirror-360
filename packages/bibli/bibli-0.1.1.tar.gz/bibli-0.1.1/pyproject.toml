[project]
name = "bibli"
version = "0.1.1"
description = "A command-line interface Bible application for programmers"
authors = [
    {name = "guzus"}
]
readme = "README.md"
license = {text = "MIT"}
homepage = "https://github.com/guzus/bible-cli"
repository = "https://github.com/guzus/bible-cli"
keywords = ["bible", "cli", "terminal", "scripture", "religion"]
classifiers = [
    "Intended Audience :: End Users/Desktop",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.10",
    "Topic :: Religion",
    "Topic :: Utilities",
]
requires-python = ">=3.10"
dependencies = [
    "click>=8.1",
    "textual>=0.40",
    "rich>=13.0",
    "sqlalchemy>=2.0",
    "alembic>=1.13",
    "fastapi>=0.100",
    "uvicorn>=0.23",
    "aiofiles>=23.0",
    "pydantic>=2.0",
    "toml>=0.10",
    "pyperclip>=1.8",
    "python-dotenv>=1.0",
    "httpx>=0.25",
    "mcp>=1.10.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4",
    "pytest-cov>=4.1",
    "black>=23.0",
    "mkdocs>=1.5",
    "mkdocs-material>=9.0",
    "build>=1.0",
    "twine>=4.0",
]

[project.scripts]
bible = "bibli.cli:main"
bible-cli = "bibli.cli:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.tox
  | \.venv
  | build
  | dist
)/
'''


[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=bibli",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["bibli"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*Protocol:",
    "@(abc\\.)?abstractmethod",
]