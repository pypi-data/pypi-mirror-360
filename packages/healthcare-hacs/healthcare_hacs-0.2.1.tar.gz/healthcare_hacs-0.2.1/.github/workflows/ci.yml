name: HACS CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: "3.11"
  UV_VERSION: latest  # Use latest version for better syntax support

jobs:
  # Combined quality and basic tests
  test-and-quality:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install dependencies (essential only)
        run: |
          # Install all extras except viz (which requires system graphviz)
          uv sync --extra dev --extra examples --extra vectorization-all --extra all

      - name: Lint with Ruff
        run: |
          # Run ruff check ignoring line length errors (E501) which are common in example files
          uv run ruff check . --ignore E501

      - name: Check formatting with Ruff
        run: |
          uv run ruff format --check .

      - name: Run basic tests
        run: |
          uv run pytest tests/test_quick_start.py -v

      - name: Run core functionality tests
        run: |
          # Run tests that don't require external dependencies
          if [ -f "tests/test_models.py" ]; then
            uv run pytest tests/test_models.py -v --tb=short || echo "‚ö†Ô∏è Some model tests failed (non-blocking)"
          fi
          if [ -f "tests/test_core.py" ]; then
            uv run pytest tests/test_core.py -v --tb=short || echo "‚ö†Ô∏è Some core tests failed (non-blocking)"
          fi

  # Cross-platform compatibility (simplified)
  compatibility:
    name: Cross-Platform Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        # Only test Python 3.11 for speed
        python-version: ["3.11"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install dependencies (minimal)
        run: |
          # Install minimal dependencies for compatibility testing
          uv sync --extra dev

      - name: Run quick smoke test
        run: |
          uv run pytest tests/test_quick_start.py::test_imports -v

  # Build packages (simplified)
  build:
    name: Build Packages
    runs-on: ubuntu-latest
    needs: [test-and-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install dependencies
        run: |
          # Install dependencies needed for building
          uv sync --extra dev

      - name: Build packages
        run: |
          uv build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: dist/

  # Optional: Extended tests (only on main branch)
  extended-tests:
    name: Extended Tests
    runs-on: ubuntu-latest
    needs: [test-and-quality]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install dependencies
        run: |
          # Install more comprehensive dependencies for extended testing
          uv sync --extra dev --extra examples --extra vectorization-all

      - name: Run extended test suite
        run: |
          # Run additional tests that might fail but shouldn't block PRs
          uv run pytest tests/ -v --tb=short -x || echo "‚ö†Ô∏è Extended tests completed with some failures (non-blocking)"

      - name: Basic security check
        run: |
          # Simple security check without external tools
          echo "üîç Checking for obvious security issues..."
          ! grep -r -i "password.*=.*['\"][^'\"]*['\"]" packages/ || echo "‚ö†Ô∏è Potential hardcoded passwords found"
          ! grep -r -i "api.*key.*=.*['\"][^'\"]*['\"]" packages/ || echo "‚ö†Ô∏è Potential hardcoded API keys found"
          echo "‚úÖ Basic security check completed"

  # Deployment (only on release)
  deploy:
    name: Deploy to PyPI
    runs-on: ubuntu-latest
    needs: [build, compatibility]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: pypi
      url: https://pypi.org/project/hacs/
    permissions:
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}

      - name: Install dependencies
        run: |
          uv sync --extra dev

      - name: Build packages
        run: |
          uv build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true