line-length = 120
target-version = "py38"
# keep in .cache subdir to avoid bloating `ls -A`
cache-dir = ".cache/ruff"

[per-file-target-version]
"py.lang/ducklogic/uvstrap.py" = "py38"

[lint]
preview = true
extend-select = [
    "RUF", # ruff
    "B", # flake8-bugbear
    # probable bugs
    "DTZ", # flake8-datetimez - timezone issues
    "EXE", # issues with shebang
    "RET", # return statements
    "SLOT", # require __slots__ for subclasses of immutable types
    "T10", # use of breakpoint()
    "FBT", # boolean flags should not be positional args
    # possible bugs
    "BLE", # prevent over-broad `catch` statements
    "PIE", # flake8-pie - misc lints
    "PYI", # lint pyi files
    "PLE", # pylint[error]
    "PLR", # pylint[refactor]
    "LOG", # flake8-logging
    "PT", # flake8-pytest-style
    "ASYNC", # flake8-async
    # lints for legacy code
    "UP", # pyupgrade
    "YTT", # flake8-2020
    "C4", # flake8-comprehensions
    "FA", # flake8-future-annotations
    "PLR", # pylint[refactor]
    "FURB", # refurb
    # style
    "Q002", # avoid single-quote docstrings
    "Q003", # change outer quotes to avoid escaping inner quotes
    "Q004", # unnecessary quote escape
    "TD", # checks todo statements are well-formed
    "PTH", # prefer use of pathlib.Path
    "FLY", # prefer fstring to str.json
    "E", # pycodestyle[error] - redundant with formatting
    "W", # pycodestyle[warning/F]
    "G", # flake8-logging-format
    "N", # pep8-naming
    # "I", # import sorting (handled by format)
    "ISC", # avoid implicit string concat
    "ICN", # flake8-import-conventions
    "RSE", # unnecessary paren for raised exception
    # pedantic
    "SIM", # flake8-simplify
    "A", # falke8-builtins - prevent shadowing builtins
    "T20", # flake8-print - prevent use of `print` statement
    "TC", # flake8-type-checking - move as many possible imports behind TYPE_CHECKING block
    "TID252", # forbid relative imports
    "D", # pydocstyle - lint docstrings and require for all public methods
    "PLW", # pylint[warning]
    "PLC", # pylint[convention]
    "F", # pyflakes
    "TRY", # tryceratops
    "ERA", # eradicate - forbid commented out code
    # "FIX", # prevent use of todo comments
    # redundant with other tools
    "ANN", # require type annotations
    # buggy lints
    # "SLF", # flake8-self - doesn't consider isinstance
    # "CPY", # flake8-copyright - require copyright header - doesn't support SPDX tags
]
ignore = [
    # moderately pedantic
    # "E741", # ambiguous variable names
    "FURB122", # I find IOBase.writelines misleading, because it doesn't add line terminators
    # extremely pedantic
    "TRY003", # allow long error messages 'outside of exception class'
    "PLR2004", # allow use of 'magic values' - `if x == 3` is fine
    "PLR0912", # allow 'too many branches'
    "PLR0911", # allow 'too many return statements'
    "PYI025", # collections.abc.Set is not confusing with `set`
    "UP015", # allow passing redundant modes to `open()` - explicit is better than implicit
    "SIM105", # allow try/except/pass instead of contextlib.suppress
    "RET505", # use of return statement in `if` does not make `else` unnecessary
    "PLR0904", # too many public methods
    "PTH123", # allow open() to be used instead of Path.open()
    "PLW1514", # do not need explicit encoding for open()
    "PLR6301", # do not recommend instance members to become static
    "PLW0603", # forbids use of mutable global state
    "TD002", # allow todo without author
    "TD003", # allow todo without link
    "PLR0913", # don't link 'too many function args'
]
exclude = [
    "setup.py", # only for compat
]

[lint.pydocstyle]
convention = "pep257"

[lint.extend-per-file-ignores]
"tests/**" = [
    "D", # no docstyle
    "ANN", # no type annotations
]
