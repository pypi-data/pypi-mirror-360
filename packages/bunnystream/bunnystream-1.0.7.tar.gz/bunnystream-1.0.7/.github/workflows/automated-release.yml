name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Release notes (optional)'
        required: false
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: Get current version
      id: current_version
      run: |
        # Get the latest tag, or use v0.0.0 if no tags exist
        CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION"

    - name: Calculate new version
      id: new_version
      run: |
        CURRENT="${{ steps.current_version.outputs.current_version }}"
        BUMP_TYPE="${{ github.event.inputs.version_bump }}"
        
        # Remove 'v' prefix for calculation
        VERSION_NUM=${CURRENT#v}
        
        # Split version into parts
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NUM"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Bump version based on type
        case $BUMP_TYPE in
          "major")
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          "minor")
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          "patch")
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Create and push tag
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        RELEASE_NOTES="${{ github.event.inputs.release_notes }}"
        
        if [ -z "$RELEASE_NOTES" ]; then
          TAG_MESSAGE="Release $NEW_VERSION"
        else
          TAG_MESSAGE="Release $NEW_VERSION - $RELEASE_NOTES"
        fi
        
        echo "Creating tag $NEW_VERSION"
        git tag -a "$NEW_VERSION" -m "$TAG_MESSAGE"
        git push origin "$NEW_VERSION"
        
        echo "âœ… Tag $NEW_VERSION created and pushed successfully"

    - name: Extract changelog for release
      id: changelog
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        VERSION_NUM=${NEW_VERSION#v}
        
        if [ -f CHANGELOG.md ]; then
          # Extract the section for this version from CHANGELOG.md
          awk '/^## \[?'$VERSION_NUM'\]?/{flag=1; next} /^## \[?[0-9]/{flag=0} flag' CHANGELOG.md > release_notes.md
          if [ -s release_notes.md ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            cat release_notes.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG=Release $NEW_VERSION" >> $GITHUB_OUTPUT
          fi
        else
          echo "CHANGELOG=Release $NEW_VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.new_version.outputs.new_version }}
        release_name: Release ${{ steps.new_version.outputs.new_version }}
        body: |
          ${{ github.event.inputs.release_notes || steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: ${{ contains(steps.new_version.outputs.new_version, 'alpha') || contains(steps.new_version.outputs.new_version, 'beta') || contains(steps.new_version.outputs.new_version, 'rc') }}
