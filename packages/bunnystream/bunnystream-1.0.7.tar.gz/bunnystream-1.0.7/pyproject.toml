[project]
name = "bunnystream"
dynamic = ["version"]
description = "Event system that uses RabbitMQ as a message broker."
readme = "README.md"
requires-python = ">=3.9"
license = { text = "MIT" }
authors = [
    { name = "Marc Ford", email = "marc@example.com" }
]
maintainers = [
    { name = "Marc Ford", email = "marc@example.com" }
]
keywords = ["rabbitmq", "messaging", "event-driven", "message-broker", "amqp"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Networking",
    "Topic :: Communications",
]
dependencies = [
    "importlib-metadata>=8.7.0",
    "pika>=1.3.2,<7.0",
]

[project.urls]
"Homepage" = "https://github.com/MarcFord/bunnystream"
"Bug Reports" = "https://github.com/MarcFord/bunnystream/issues"
"Source" = "https://github.com/MarcFord/bunnystream"
"Documentation" = "https://github.com/MarcFord/bunnystream#readme"
"Changelog" = "https://github.com/MarcFord/bunnystream/blob/main/CHANGELOG.md"

[project.optional-dependencies]
test = [
    "pytest>=6.0; python_version>='3.7'",
    "pytest-cov>=2.10,<4.0",
    "pytest-mock>=3.6,<4.0",
    "responses>=0.20,<1.0",
    "pylint>=3.3.7",
]
dev = [
    "black>=22.0",
    "isort>=5.0",
    "mypy>=1.0",
    "bandit>=1.7",
    "flake8>=4.0",
    "pre-commit>=2.20",
]

[build-system]
requires = ["setuptools>=45.0", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools_scm]
# Version from Git tags
fallback_version = "0.0.1-dev"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "-v",
]
# Filter out deprecation warnings from external libraries
filterwarnings = [
    "ignore::pytest.PytestDeprecationWarning:pytest_cov.*",
    "ignore::DeprecationWarning:pytest_cov.*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
omit = [
    "tests/*",
    "src/bunnystream/docs.py"
]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \tests
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = "bunnystream.config"
# Ignore type checking for config.py due to pre-existing issues
ignore_errors = true

[[tool.mypy.overrides]]
module = "bunnystream.warren"
# Ignore type checking for warren.py due to pre-existing issues
ignore_errors = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pylint.format]
max-line-length = 114

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test

[tool.flake8]
max-line-length = 114

extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    ".eggs",
    "*.egg-info"
]
