{
    "_type": "ripple_down_rules.rdr.GeneralRDR",
    "start_rules": {
        "views": {
            "_type": "ripple_down_rules.rdr.MultiClassRDR",
            "start_rule": {
                "_type": "ripple_down_rules.rules.MultiClassTopRule",
                "conditions": {
                    "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                    "user_input": "def _get_value(case):\n    def has_bodies_named_handle(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Handle.\"\"\"\n        return any(\"handle\" in b.name.name.lower() for b in case.bodies)\n    return has_bodies_named_handle(case)\n    ",
                    "conclusion_type": [
                        "builtins.bool"
                    ],
                    "scope": {
                        "List": "typing.List",
                        "Set": "typing.Set",
                        "Union": "typing.Union",
                        "FixedConnection": "semantic_world.connections.FixedConnection",
                        "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                        "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                        "Cabinet": "semantic_world.views.views.Cabinet",
                        "Container": "semantic_world.views.views.Container",
                        "Door": "semantic_world.views.views.Door",
                        "Drawer": "semantic_world.views.views.Drawer",
                        "Fridge": "semantic_world.views.views.Fridge",
                        "Handle": "semantic_world.views.views.Handle",
                        "World": "semantic_world.world.World"
                    },
                    "conclusion": {
                        "_type": "builtins.NoneType",
                        "value": null
                    },
                    "mutually_exclusive": true
                },
                "conclusion": {
                    "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                    "user_input": "def _get_value(case):\n    def get_handles(case: World) -> Union[set, list, Handle]:\n        \"\"\"Get possible value(s) for World.views of types list/set of Handle\"\"\"\n        return [Handle(b) for b in case.bodies if \"handle\" in b.name.name.lower()]\n    \n    return get_handles(case)\n    ",
                    "conclusion_type": [
                        "semantic_world.views.views.Handle",
                        "builtins.set",
                        "builtins.list"
                    ],
                    "scope": {
                        "List": "typing.List",
                        "Set": "typing.Set",
                        "Union": "typing.Union",
                        "FixedConnection": "semantic_world.connections.FixedConnection",
                        "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                        "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                        "Cabinet": "semantic_world.views.views.Cabinet",
                        "Container": "semantic_world.views.views.Container",
                        "Door": "semantic_world.views.views.Door",
                        "Drawer": "semantic_world.views.views.Drawer",
                        "Fridge": "semantic_world.views.views.Fridge",
                        "Handle": "semantic_world.views.views.Handle",
                        "World": "semantic_world.world.World"
                    },
                    "conclusion": {
                        "_type": "builtins.NoneType",
                        "value": null
                    },
                    "mutually_exclusive": false
                },
                "parent": null,
                "corner_case": null,
                "conclusion_name": "views",
                "weight": "",
                "uid": "90574698325129464513441443063592862114",
                "refinement": null,
                "alternative": {
                    "_type": "ripple_down_rules.rules.MultiClassTopRule",
                    "conditions": {
                        "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                        "user_input": "def _get_value(case):\n    def has_handles_and_fixed_and_prismatic_connections(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Container.\"\"\"\n        return (any(v for v in case.views if type(v) is Handle) and\n                any(c for c in case.connections if isinstance(c, PrismaticConnection)) and\n                any(c for c in case.connections if isinstance(c, FixedConnection)))\n    return has_handles_and_fixed_and_prismatic_connections(case)\n    ",
                        "conclusion_type": [
                            "builtins.bool"
                        ],
                        "scope": {
                            "List": "typing.List",
                            "Set": "typing.Set",
                            "Union": "typing.Union",
                            "FixedConnection": "semantic_world.connections.FixedConnection",
                            "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                            "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                            "Cabinet": "semantic_world.views.views.Cabinet",
                            "Container": "semantic_world.views.views.Container",
                            "Door": "semantic_world.views.views.Door",
                            "Drawer": "semantic_world.views.views.Drawer",
                            "Fridge": "semantic_world.views.views.Fridge",
                            "Handle": "semantic_world.views.views.Handle",
                            "World": "semantic_world.world.World"
                        },
                        "conclusion": {
                            "_type": "builtins.NoneType",
                            "value": null
                        },
                        "mutually_exclusive": true
                    },
                    "conclusion": {
                        "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                        "user_input": "def _get_value(case):\n    def get_containers(case: World) -> Union[set, Container, list]:\n        \"\"\"Get possible value(s) for World.views of types list/set of Container\"\"\"\n        prismatic_connections = [c for c in case.connections if isinstance(c, PrismaticConnection)]\n        fixed_connections = [c for c in case.connections if isinstance(c, FixedConnection)]\n        children_of_prismatic_connections = [c.child for c in prismatic_connections]\n        handles = [v for v in case.views if type(v) is Handle]\n        fixed_connections_with_handle_child = [fc for fc in fixed_connections if fc.child in [h.body for h in handles]]\n        drawer_containers = set(children_of_prismatic_connections).intersection(\n            set([fc.parent for fc in fixed_connections_with_handle_child]))\n        return [Container(b) for b in drawer_containers]\n    \n    return get_containers(case)\n    ",
                        "conclusion_type": [
                            "semantic_world.views.views.Container",
                            "builtins.set",
                            "builtins.list"
                        ],
                        "scope": {
                            "List": "typing.List",
                            "Set": "typing.Set",
                            "Union": "typing.Union",
                            "FixedConnection": "semantic_world.connections.FixedConnection",
                            "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                            "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                            "Cabinet": "semantic_world.views.views.Cabinet",
                            "Container": "semantic_world.views.views.Container",
                            "Door": "semantic_world.views.views.Door",
                            "Drawer": "semantic_world.views.views.Drawer",
                            "Fridge": "semantic_world.views.views.Fridge",
                            "Handle": "semantic_world.views.views.Handle",
                            "World": "semantic_world.world.World"
                        },
                        "conclusion": {
                            "_type": "builtins.NoneType",
                            "value": null
                        },
                        "mutually_exclusive": false
                    },
                    "parent": {
                        "_type": "ripple_down_rules.rules.MultiClassTopRule",
                        "conditions": {
                            "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                            "user_input": "def _get_value(case):\n    def has_bodies_named_handle(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Handle.\"\"\"\n        return any(\"handle\" in b.name.name.lower() for b in case.bodies)\n    return has_bodies_named_handle(case)\n    ",
                            "conclusion_type": [
                                "builtins.bool"
                            ],
                            "scope": {
                                "List": "typing.List",
                                "Set": "typing.Set",
                                "Union": "typing.Union",
                                "FixedConnection": "semantic_world.connections.FixedConnection",
                                "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                "Cabinet": "semantic_world.views.views.Cabinet",
                                "Container": "semantic_world.views.views.Container",
                                "Door": "semantic_world.views.views.Door",
                                "Drawer": "semantic_world.views.views.Drawer",
                                "Fridge": "semantic_world.views.views.Fridge",
                                "Handle": "semantic_world.views.views.Handle",
                                "World": "semantic_world.world.World"
                            },
                            "conclusion": {
                                "_type": "builtins.NoneType",
                                "value": null
                            },
                            "mutually_exclusive": true
                        },
                        "conclusion": {
                            "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                            "user_input": "def _get_value(case):\n    def get_handles(case: World) -> Union[set, list, Handle]:\n        \"\"\"Get possible value(s) for World.views of types list/set of Handle\"\"\"\n        return [Handle(b) for b in case.bodies if \"handle\" in b.name.name.lower()]\n    \n    return get_handles(case)\n    ",
                            "conclusion_type": [
                                "semantic_world.views.views.Handle",
                                "builtins.set",
                                "builtins.list"
                            ],
                            "scope": {
                                "List": "typing.List",
                                "Set": "typing.Set",
                                "Union": "typing.Union",
                                "FixedConnection": "semantic_world.connections.FixedConnection",
                                "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                "Cabinet": "semantic_world.views.views.Cabinet",
                                "Container": "semantic_world.views.views.Container",
                                "Door": "semantic_world.views.views.Door",
                                "Drawer": "semantic_world.views.views.Drawer",
                                "Fridge": "semantic_world.views.views.Fridge",
                                "Handle": "semantic_world.views.views.Handle",
                                "World": "semantic_world.world.World"
                            },
                            "conclusion": {
                                "_type": "builtins.NoneType",
                                "value": null
                            },
                            "mutually_exclusive": false
                        },
                        "parent": null,
                        "corner_case": null,
                        "conclusion_name": "views",
                        "weight": "next",
                        "uid": "90574698325129464513441443063592862114",
                        "refinement": null,
                        "alternative": {
                            "_type": "ripple_down_rules.rules.MultiClassTopRule",
                            "conditions": {
                                "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                "user_input": "def _get_value(case):\n    def has_handles_and_fixed_and_prismatic_connections(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Container.\"\"\"\n        return (any(v for v in case.views if type(v) is Handle) and\n                any(c for c in case.connections if isinstance(c, PrismaticConnection)) and\n                any(c for c in case.connections if isinstance(c, FixedConnection)))\n    return has_handles_and_fixed_and_prismatic_connections(case)\n    ",
                                "conclusion_type": [
                                    "builtins.bool"
                                ],
                                "scope": {
                                    "List": "typing.List",
                                    "Set": "typing.Set",
                                    "Union": "typing.Union",
                                    "FixedConnection": "semantic_world.connections.FixedConnection",
                                    "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                    "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                    "Cabinet": "semantic_world.views.views.Cabinet",
                                    "Container": "semantic_world.views.views.Container",
                                    "Door": "semantic_world.views.views.Door",
                                    "Drawer": "semantic_world.views.views.Drawer",
                                    "Fridge": "semantic_world.views.views.Fridge",
                                    "Handle": "semantic_world.views.views.Handle",
                                    "World": "semantic_world.world.World"
                                },
                                "conclusion": {
                                    "_type": "builtins.NoneType",
                                    "value": null
                                },
                                "mutually_exclusive": true
                            },
                            "conclusion": {
                                "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                "user_input": "def _get_value(case):\n    def get_containers(case: World) -> Union[set, Container, list]:\n        \"\"\"Get possible value(s) for World.views of types list/set of Container\"\"\"\n        prismatic_connections = [c for c in case.connections if isinstance(c, PrismaticConnection)]\n        fixed_connections = [c for c in case.connections if isinstance(c, FixedConnection)]\n        children_of_prismatic_connections = [c.child for c in prismatic_connections]\n        handles = [v for v in case.views if type(v) is Handle]\n        fixed_connections_with_handle_child = [fc for fc in fixed_connections if fc.child in [h.body for h in handles]]\n        drawer_containers = set(children_of_prismatic_connections).intersection(\n            set([fc.parent for fc in fixed_connections_with_handle_child]))\n        return [Container(b) for b in drawer_containers]\n    \n    return get_containers(case)\n    ",
                                "conclusion_type": [
                                    "semantic_world.views.views.Container",
                                    "builtins.set",
                                    "builtins.list"
                                ],
                                "scope": {
                                    "List": "typing.List",
                                    "Set": "typing.Set",
                                    "Union": "typing.Union",
                                    "FixedConnection": "semantic_world.connections.FixedConnection",
                                    "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                    "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                    "Cabinet": "semantic_world.views.views.Cabinet",
                                    "Container": "semantic_world.views.views.Container",
                                    "Door": "semantic_world.views.views.Door",
                                    "Drawer": "semantic_world.views.views.Drawer",
                                    "Fridge": "semantic_world.views.views.Fridge",
                                    "Handle": "semantic_world.views.views.Handle",
                                    "World": "semantic_world.world.World"
                                },
                                "conclusion": {
                                    "_type": "builtins.NoneType",
                                    "value": null
                                },
                                "mutually_exclusive": false
                            },
                            "parent": null,
                            "corner_case": null,
                            "conclusion_name": null,
                            "weight": "else if",
                            "uid": "14920098271685635920637692283091167284",
                            "refinement": null,
                            "alternative": {
                                "_type": "ripple_down_rules.rules.MultiClassTopRule",
                                "conditions": {
                                    "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                    "user_input": "def _get_value(case):\n    def has_handles_and_containers(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Drawer.\"\"\"\n        return any(v for v in case.views if type(v) is Handle) and any(v for v in case.views if type(v) is Container)\n    return has_handles_and_containers(case)\n    ",
                                    "conclusion_type": [
                                        "builtins.bool"
                                    ],
                                    "scope": {
                                        "List": "typing.List",
                                        "Set": "typing.Set",
                                        "Union": "typing.Union",
                                        "FixedConnection": "semantic_world.connections.FixedConnection",
                                        "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                        "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                        "Cabinet": "semantic_world.views.views.Cabinet",
                                        "Container": "semantic_world.views.views.Container",
                                        "Door": "semantic_world.views.views.Door",
                                        "Drawer": "semantic_world.views.views.Drawer",
                                        "Fridge": "semantic_world.views.views.Fridge",
                                        "Handle": "semantic_world.views.views.Handle",
                                        "World": "semantic_world.world.World"
                                    },
                                    "conclusion": {
                                        "_type": "builtins.NoneType",
                                        "value": null
                                    },
                                    "mutually_exclusive": true
                                },
                                "conclusion": {
                                    "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                    "user_input": "def _get_value(case):\n    def get_drawers(case: World) -> Union[set, list, Drawer]:\n        \"\"\"Get possible value(s) for World.views of types list/set of Drawer\"\"\"\n        handles = [v for v in case.views if type(v) is Handle]\n        containers = [v for v in case.views if type(v) is Container]\n        fixed_connections = [c for c in case.connections if\n                             isinstance(c, FixedConnection) and c.parent in [cont.body for cont in\n                                                                             containers] and c.child in [\n                                 h.body for h in handles]]\n        prismatic_connections = [c for c in case.connections if\n                                 isinstance(c, PrismaticConnection) and c.child in [cont.body for cont in containers]]\n        drawer_handle_connections = [fc for fc in fixed_connections if\n                                     fc.parent in [pc.child for pc in prismatic_connections]]\n        drawers = [Drawer([cont for cont in containers if dc.parent == cont.body][0],\n                          [h for h in handles if dc.child == h.body][0]) for dc in drawer_handle_connections]\n        return drawers\n    \n    return get_drawers(case)\n    ",
                                    "conclusion_type": [
                                        "semantic_world.views.views.Drawer",
                                        "builtins.set",
                                        "builtins.list"
                                    ],
                                    "scope": {
                                        "List": "typing.List",
                                        "Set": "typing.Set",
                                        "Union": "typing.Union",
                                        "FixedConnection": "semantic_world.connections.FixedConnection",
                                        "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                        "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                        "Cabinet": "semantic_world.views.views.Cabinet",
                                        "Container": "semantic_world.views.views.Container",
                                        "Door": "semantic_world.views.views.Door",
                                        "Drawer": "semantic_world.views.views.Drawer",
                                        "Fridge": "semantic_world.views.views.Fridge",
                                        "Handle": "semantic_world.views.views.Handle",
                                        "World": "semantic_world.world.World"
                                    },
                                    "conclusion": {
                                        "_type": "builtins.NoneType",
                                        "value": null
                                    },
                                    "mutually_exclusive": false
                                },
                                "parent": null,
                                "corner_case": null,
                                "conclusion_name": null,
                                "weight": "else if",
                                "uid": "331345798360792447350644865254855982739",
                                "refinement": null,
                                "alternative": {
                                    "_type": "ripple_down_rules.rules.MultiClassTopRule",
                                    "conditions": {
                                        "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                        "user_input": "def _get_value(case):\n    def has_drawers(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Cabinet.\"\"\"\n        return any(v for v in case.views if type(v) is Drawer)\n    return has_drawers(case)\n    ",
                                        "conclusion_type": [
                                            "builtins.bool"
                                        ],
                                        "scope": {
                                            "List": "typing.List",
                                            "Set": "typing.Set",
                                            "Union": "typing.Union",
                                            "FixedConnection": "semantic_world.connections.FixedConnection",
                                            "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                            "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                            "Cabinet": "semantic_world.views.views.Cabinet",
                                            "Container": "semantic_world.views.views.Container",
                                            "Door": "semantic_world.views.views.Door",
                                            "Drawer": "semantic_world.views.views.Drawer",
                                            "Fridge": "semantic_world.views.views.Fridge",
                                            "Handle": "semantic_world.views.views.Handle",
                                            "World": "semantic_world.world.World"
                                        },
                                        "conclusion": {
                                            "_type": "builtins.NoneType",
                                            "value": null
                                        },
                                        "mutually_exclusive": true
                                    },
                                    "conclusion": {
                                        "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                        "user_input": "def _get_value(case):\n    def get_cabinets(case: World) -> Union[set, Cabinet, list]:\n        \"\"\"Get possible value(s) for World.views of types list/set of Cabinet\"\"\"\n        drawers = [v for v in case.views if type(v) is Drawer]\n        prismatic_connections = [c for c in case.connections if\n                                 isinstance(c, PrismaticConnection) and c.child in [drawer.container.body for drawer in\n                                                                                    drawers]]\n        cabinet_container_bodies = [pc.parent for pc in prismatic_connections]\n        cabinets = []\n        for ccb in cabinet_container_bodies:\n            if ccb in [cabinet.container.body for cabinet in cabinets]:\n                continue\n            cc_prismatic_connections = [pc for pc in prismatic_connections if pc.parent is ccb]\n            cabinet_drawer_container_bodies = [pc.child for pc in cc_prismatic_connections]\n            cabinet_drawers = [d for d in drawers if d.container.body in cabinet_drawer_container_bodies]\n            cabinets.append(Cabinet(Container(ccb), cabinet_drawers))\n    \n        return cabinets\n    \n    return get_cabinets(case)\n    ",
                                        "conclusion_type": [
                                            "semantic_world.views.views.Cabinet",
                                            "builtins.set",
                                            "builtins.list"
                                        ],
                                        "scope": {
                                            "List": "typing.List",
                                            "Set": "typing.Set",
                                            "Union": "typing.Union",
                                            "FixedConnection": "semantic_world.connections.FixedConnection",
                                            "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                            "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                            "Cabinet": "semantic_world.views.views.Cabinet",
                                            "Container": "semantic_world.views.views.Container",
                                            "Door": "semantic_world.views.views.Door",
                                            "Drawer": "semantic_world.views.views.Drawer",
                                            "Fridge": "semantic_world.views.views.Fridge",
                                            "Handle": "semantic_world.views.views.Handle",
                                            "World": "semantic_world.world.World"
                                        },
                                        "conclusion": {
                                            "_type": "builtins.NoneType",
                                            "value": null
                                        },
                                        "mutually_exclusive": false
                                    },
                                    "parent": null,
                                    "corner_case": null,
                                    "conclusion_name": null,
                                    "weight": "else if",
                                    "uid": "35528769484583703815352905256802298589",
                                    "refinement": null,
                                    "alternative": {
                                        "_type": "ripple_down_rules.rules.MultiClassTopRule",
                                        "conditions": {
                                            "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                            "user_input": "def _get_value(case):\n    def has_handles_and_revolute_connections(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Door.\"\"\"\n        return (any(v for v in case.views if isinstance(v, Handle)) and\n                any(c for c in case.connections if isinstance(c, RevoluteConnection)))\n    return has_handles_and_revolute_connections(case)\n    ",
                                            "conclusion_type": [
                                                "builtins.bool"
                                            ],
                                            "scope": {
                                                "List": "typing.List",
                                                "Set": "typing.Set",
                                                "Union": "typing.Union",
                                                "FixedConnection": "semantic_world.connections.FixedConnection",
                                                "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                "Cabinet": "semantic_world.views.views.Cabinet",
                                                "Container": "semantic_world.views.views.Container",
                                                "Door": "semantic_world.views.views.Door",
                                                "Drawer": "semantic_world.views.views.Drawer",
                                                "Fridge": "semantic_world.views.views.Fridge",
                                                "Handle": "semantic_world.views.views.Handle",
                                                "World": "semantic_world.world.World"
                                            },
                                            "conclusion": {
                                                "_type": "builtins.NoneType",
                                                "value": null
                                            },
                                            "mutually_exclusive": true
                                        },
                                        "conclusion": {
                                            "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                            "user_input": "def _get_value(case):\n    def get_doors(case: World) -> List[Door]:\n        \"\"\"Get possible value(s) for World.views  of type Door.\"\"\"\n        handles = [v for v in case.views if isinstance(v, Handle)]\n        handle_bodies = [h.body for h in handles]\n        connections_with_handles = [c for c in case.connections if isinstance(c, FixedConnection) and\n                                    c.child in handle_bodies]\n    \n        revolute_connections = [c for c in case.connections if isinstance(c, RevoluteConnection)]\n        bodies_connected_to_handles = [c.parent if c.child in handle_bodies else c.child for c in connections_with_handles]\n        bodies_that_have_revolute_joints = [b for b in bodies_connected_to_handles for c in revolute_connections\n                                            if b == c.child]\n        body_handle_connections = [c for c in connections_with_handles if c.parent in bodies_that_have_revolute_joints]\n        doors = [Door(c.parent, [h for h in handles if h.body == c.child][0]) for c in body_handle_connections]\n        return doors\n    return get_doors(case)\n    ",
                                            "conclusion_type": [
                                                "semantic_world.views.views.Door",
                                                "builtins.set",
                                                "builtins.list"
                                            ],
                                            "scope": {
                                                "List": "typing.List",
                                                "Set": "typing.Set",
                                                "Union": "typing.Union",
                                                "FixedConnection": "semantic_world.connections.FixedConnection",
                                                "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                "Cabinet": "semantic_world.views.views.Cabinet",
                                                "Container": "semantic_world.views.views.Container",
                                                "Door": "semantic_world.views.views.Door",
                                                "Drawer": "semantic_world.views.views.Drawer",
                                                "Fridge": "semantic_world.views.views.Fridge",
                                                "Handle": "semantic_world.views.views.Handle",
                                                "World": "semantic_world.world.World"
                                            },
                                            "conclusion": {
                                                "_type": "builtins.NoneType",
                                                "value": null
                                            },
                                            "mutually_exclusive": false
                                        },
                                        "parent": null,
                                        "corner_case": null,
                                        "conclusion_name": null,
                                        "weight": "else if",
                                        "uid": "59112619694893607910753808758642808601",
                                        "refinement": null,
                                        "alternative": {
                                            "_type": "ripple_down_rules.rules.MultiClassTopRule",
                                            "conditions": {
                                                "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                                "user_input": "def _get_value(case):\n    def has_doors_with_fridge_in_their_name(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Fridge.\"\"\"\n        return any(v for v in case.views if isinstance(v, Door) and \"fridge\" in v.body.name.name.lower())\n    return has_doors_with_fridge_in_their_name(case)\n    ",
                                                "conclusion_type": [
                                                    "builtins.bool"
                                                ],
                                                "scope": {
                                                    "List": "typing.List",
                                                    "Set": "typing.Set",
                                                    "Union": "typing.Union",
                                                    "FixedConnection": "semantic_world.connections.FixedConnection",
                                                    "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                    "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                    "Cabinet": "semantic_world.views.views.Cabinet",
                                                    "Container": "semantic_world.views.views.Container",
                                                    "Door": "semantic_world.views.views.Door",
                                                    "Drawer": "semantic_world.views.views.Drawer",
                                                    "Fridge": "semantic_world.views.views.Fridge",
                                                    "Handle": "semantic_world.views.views.Handle",
                                                    "World": "semantic_world.world.World"
                                                },
                                                "conclusion": {
                                                    "_type": "builtins.NoneType",
                                                    "value": null
                                                },
                                                "mutually_exclusive": false
                                            },
                                            "conclusion": {
                                                "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                                "user_input": "def _get_value(case):\n    def get_fridges(case: World) -> List[Fridge]:\n        \"\"\"Get possible value(s) for World.views  of type Fridge.\"\"\"\n        # Get fridge-related doors\n        fridge_doors = [v for v in case.views if isinstance(v, Door) and \"fridge\" in v.body.name.name.lower()]\n        # Precompute bodies of the fridge doors\n        fridge_doors_bodies = [d.body for d in fridge_doors]\n        # Filter relevant revolute connections\n        fridge_door_connections = [\n            c for c in case.connections\n            if isinstance(c, RevoluteConnection)\n               and c.child in fridge_doors_bodies\n               and 'fridge' in c.parent.name.name.lower()\n        ]\n        return [Fridge(c.parent, fridge_doors[fridge_doors_bodies.index(c.child)]) for c in fridge_door_connections]\n    return get_fridges(case)\n    ",
                                                "conclusion_type": [
                                                    "semantic_world.views.views.Fridge",
                                                    "builtins.set",
                                                    "builtins.list"
                                                ],
                                                "scope": {
                                                    "List": "typing.List",
                                                    "Set": "typing.Set",
                                                    "Union": "typing.Union",
                                                    "FixedConnection": "semantic_world.connections.FixedConnection",
                                                    "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                    "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                    "Cabinet": "semantic_world.views.views.Cabinet",
                                                    "Container": "semantic_world.views.views.Container",
                                                    "Door": "semantic_world.views.views.Door",
                                                    "Drawer": "semantic_world.views.views.Drawer",
                                                    "Fridge": "semantic_world.views.views.Fridge",
                                                    "Handle": "semantic_world.views.views.Handle",
                                                    "World": "semantic_world.world.World"
                                                },
                                                "conclusion": {
                                                    "_type": "builtins.NoneType",
                                                    "value": null
                                                },
                                                "mutually_exclusive": false
                                            },
                                            "parent": null,
                                            "corner_case": null,
                                            "conclusion_name": "views",
                                            "weight": "else if",
                                            "uid": "10840634078579061471470540436169882059",
                                            "refinement": null,
                                            "alternative": null
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "corner_case": null,
                    "conclusion_name": null,
                    "weight": "else if",
                    "uid": "14920098271685635920637692283091167284",
                    "refinement": null,
                    "alternative": {
                        "_type": "ripple_down_rules.rules.MultiClassTopRule",
                        "conditions": {
                            "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                            "user_input": "def _get_value(case):\n    def has_handles_and_containers(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Drawer.\"\"\"\n        return any(v for v in case.views if type(v) is Handle) and any(v for v in case.views if type(v) is Container)\n    return has_handles_and_containers(case)\n    ",
                            "conclusion_type": [
                                "builtins.bool"
                            ],
                            "scope": {
                                "List": "typing.List",
                                "Set": "typing.Set",
                                "Union": "typing.Union",
                                "FixedConnection": "semantic_world.connections.FixedConnection",
                                "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                "Cabinet": "semantic_world.views.views.Cabinet",
                                "Container": "semantic_world.views.views.Container",
                                "Door": "semantic_world.views.views.Door",
                                "Drawer": "semantic_world.views.views.Drawer",
                                "Fridge": "semantic_world.views.views.Fridge",
                                "Handle": "semantic_world.views.views.Handle",
                                "World": "semantic_world.world.World"
                            },
                            "conclusion": {
                                "_type": "builtins.NoneType",
                                "value": null
                            },
                            "mutually_exclusive": true
                        },
                        "conclusion": {
                            "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                            "user_input": "def _get_value(case):\n    def get_drawers(case: World) -> Union[set, list, Drawer]:\n        \"\"\"Get possible value(s) for World.views of types list/set of Drawer\"\"\"\n        handles = [v for v in case.views if type(v) is Handle]\n        containers = [v for v in case.views if type(v) is Container]\n        fixed_connections = [c for c in case.connections if\n                             isinstance(c, FixedConnection) and c.parent in [cont.body for cont in\n                                                                             containers] and c.child in [\n                                 h.body for h in handles]]\n        prismatic_connections = [c for c in case.connections if\n                                 isinstance(c, PrismaticConnection) and c.child in [cont.body for cont in containers]]\n        drawer_handle_connections = [fc for fc in fixed_connections if\n                                     fc.parent in [pc.child for pc in prismatic_connections]]\n        drawers = [Drawer([cont for cont in containers if dc.parent == cont.body][0],\n                          [h for h in handles if dc.child == h.body][0]) for dc in drawer_handle_connections]\n        return drawers\n    \n    return get_drawers(case)\n    ",
                            "conclusion_type": [
                                "semantic_world.views.views.Drawer",
                                "builtins.set",
                                "builtins.list"
                            ],
                            "scope": {
                                "List": "typing.List",
                                "Set": "typing.Set",
                                "Union": "typing.Union",
                                "FixedConnection": "semantic_world.connections.FixedConnection",
                                "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                "Cabinet": "semantic_world.views.views.Cabinet",
                                "Container": "semantic_world.views.views.Container",
                                "Door": "semantic_world.views.views.Door",
                                "Drawer": "semantic_world.views.views.Drawer",
                                "Fridge": "semantic_world.views.views.Fridge",
                                "Handle": "semantic_world.views.views.Handle",
                                "World": "semantic_world.world.World"
                            },
                            "conclusion": {
                                "_type": "builtins.NoneType",
                                "value": null
                            },
                            "mutually_exclusive": false
                        },
                        "parent": {
                            "_type": "ripple_down_rules.rules.MultiClassTopRule",
                            "conditions": {
                                "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                "user_input": "def _get_value(case):\n    def has_handles_and_fixed_and_prismatic_connections(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Container.\"\"\"\n        return (any(v for v in case.views if type(v) is Handle) and\n                any(c for c in case.connections if isinstance(c, PrismaticConnection)) and\n                any(c for c in case.connections if isinstance(c, FixedConnection)))\n    return has_handles_and_fixed_and_prismatic_connections(case)\n    ",
                                "conclusion_type": [
                                    "builtins.bool"
                                ],
                                "scope": {
                                    "List": "typing.List",
                                    "Set": "typing.Set",
                                    "Union": "typing.Union",
                                    "FixedConnection": "semantic_world.connections.FixedConnection",
                                    "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                    "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                    "Cabinet": "semantic_world.views.views.Cabinet",
                                    "Container": "semantic_world.views.views.Container",
                                    "Door": "semantic_world.views.views.Door",
                                    "Drawer": "semantic_world.views.views.Drawer",
                                    "Fridge": "semantic_world.views.views.Fridge",
                                    "Handle": "semantic_world.views.views.Handle",
                                    "World": "semantic_world.world.World"
                                },
                                "conclusion": {
                                    "_type": "builtins.NoneType",
                                    "value": null
                                },
                                "mutually_exclusive": true
                            },
                            "conclusion": {
                                "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                "user_input": "def _get_value(case):\n    def get_containers(case: World) -> Union[set, Container, list]:\n        \"\"\"Get possible value(s) for World.views of types list/set of Container\"\"\"\n        prismatic_connections = [c for c in case.connections if isinstance(c, PrismaticConnection)]\n        fixed_connections = [c for c in case.connections if isinstance(c, FixedConnection)]\n        children_of_prismatic_connections = [c.child for c in prismatic_connections]\n        handles = [v for v in case.views if type(v) is Handle]\n        fixed_connections_with_handle_child = [fc for fc in fixed_connections if fc.child in [h.body for h in handles]]\n        drawer_containers = set(children_of_prismatic_connections).intersection(\n            set([fc.parent for fc in fixed_connections_with_handle_child]))\n        return [Container(b) for b in drawer_containers]\n    \n    return get_containers(case)\n    ",
                                "conclusion_type": [
                                    "semantic_world.views.views.Container",
                                    "builtins.set",
                                    "builtins.list"
                                ],
                                "scope": {
                                    "List": "typing.List",
                                    "Set": "typing.Set",
                                    "Union": "typing.Union",
                                    "FixedConnection": "semantic_world.connections.FixedConnection",
                                    "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                    "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                    "Cabinet": "semantic_world.views.views.Cabinet",
                                    "Container": "semantic_world.views.views.Container",
                                    "Door": "semantic_world.views.views.Door",
                                    "Drawer": "semantic_world.views.views.Drawer",
                                    "Fridge": "semantic_world.views.views.Fridge",
                                    "Handle": "semantic_world.views.views.Handle",
                                    "World": "semantic_world.world.World"
                                },
                                "conclusion": {
                                    "_type": "builtins.NoneType",
                                    "value": null
                                },
                                "mutually_exclusive": false
                            },
                            "parent": null,
                            "corner_case": null,
                            "conclusion_name": null,
                            "weight": "else if",
                            "uid": "14920098271685635920637692283091167284",
                            "refinement": null,
                            "alternative": {
                                "_type": "ripple_down_rules.rules.MultiClassTopRule",
                                "conditions": {
                                    "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                    "user_input": "def _get_value(case):\n    def has_handles_and_containers(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Drawer.\"\"\"\n        return any(v for v in case.views if type(v) is Handle) and any(v for v in case.views if type(v) is Container)\n    return has_handles_and_containers(case)\n    ",
                                    "conclusion_type": [
                                        "builtins.bool"
                                    ],
                                    "scope": {
                                        "List": "typing.List",
                                        "Set": "typing.Set",
                                        "Union": "typing.Union",
                                        "FixedConnection": "semantic_world.connections.FixedConnection",
                                        "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                        "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                        "Cabinet": "semantic_world.views.views.Cabinet",
                                        "Container": "semantic_world.views.views.Container",
                                        "Door": "semantic_world.views.views.Door",
                                        "Drawer": "semantic_world.views.views.Drawer",
                                        "Fridge": "semantic_world.views.views.Fridge",
                                        "Handle": "semantic_world.views.views.Handle",
                                        "World": "semantic_world.world.World"
                                    },
                                    "conclusion": {
                                        "_type": "builtins.NoneType",
                                        "value": null
                                    },
                                    "mutually_exclusive": true
                                },
                                "conclusion": {
                                    "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                    "user_input": "def _get_value(case):\n    def get_drawers(case: World) -> Union[set, list, Drawer]:\n        \"\"\"Get possible value(s) for World.views of types list/set of Drawer\"\"\"\n        handles = [v for v in case.views if type(v) is Handle]\n        containers = [v for v in case.views if type(v) is Container]\n        fixed_connections = [c for c in case.connections if\n                             isinstance(c, FixedConnection) and c.parent in [cont.body for cont in\n                                                                             containers] and c.child in [\n                                 h.body for h in handles]]\n        prismatic_connections = [c for c in case.connections if\n                                 isinstance(c, PrismaticConnection) and c.child in [cont.body for cont in containers]]\n        drawer_handle_connections = [fc for fc in fixed_connections if\n                                     fc.parent in [pc.child for pc in prismatic_connections]]\n        drawers = [Drawer([cont for cont in containers if dc.parent == cont.body][0],\n                          [h for h in handles if dc.child == h.body][0]) for dc in drawer_handle_connections]\n        return drawers\n    \n    return get_drawers(case)\n    ",
                                    "conclusion_type": [
                                        "semantic_world.views.views.Drawer",
                                        "builtins.set",
                                        "builtins.list"
                                    ],
                                    "scope": {
                                        "List": "typing.List",
                                        "Set": "typing.Set",
                                        "Union": "typing.Union",
                                        "FixedConnection": "semantic_world.connections.FixedConnection",
                                        "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                        "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                        "Cabinet": "semantic_world.views.views.Cabinet",
                                        "Container": "semantic_world.views.views.Container",
                                        "Door": "semantic_world.views.views.Door",
                                        "Drawer": "semantic_world.views.views.Drawer",
                                        "Fridge": "semantic_world.views.views.Fridge",
                                        "Handle": "semantic_world.views.views.Handle",
                                        "World": "semantic_world.world.World"
                                    },
                                    "conclusion": {
                                        "_type": "builtins.NoneType",
                                        "value": null
                                    },
                                    "mutually_exclusive": false
                                },
                                "parent": null,
                                "corner_case": null,
                                "conclusion_name": null,
                                "weight": "else if",
                                "uid": "331345798360792447350644865254855982739",
                                "refinement": null,
                                "alternative": {
                                    "_type": "ripple_down_rules.rules.MultiClassTopRule",
                                    "conditions": {
                                        "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                        "user_input": "def _get_value(case):\n    def has_drawers(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Cabinet.\"\"\"\n        return any(v for v in case.views if type(v) is Drawer)\n    return has_drawers(case)\n    ",
                                        "conclusion_type": [
                                            "builtins.bool"
                                        ],
                                        "scope": {
                                            "List": "typing.List",
                                            "Set": "typing.Set",
                                            "Union": "typing.Union",
                                            "FixedConnection": "semantic_world.connections.FixedConnection",
                                            "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                            "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                            "Cabinet": "semantic_world.views.views.Cabinet",
                                            "Container": "semantic_world.views.views.Container",
                                            "Door": "semantic_world.views.views.Door",
                                            "Drawer": "semantic_world.views.views.Drawer",
                                            "Fridge": "semantic_world.views.views.Fridge",
                                            "Handle": "semantic_world.views.views.Handle",
                                            "World": "semantic_world.world.World"
                                        },
                                        "conclusion": {
                                            "_type": "builtins.NoneType",
                                            "value": null
                                        },
                                        "mutually_exclusive": true
                                    },
                                    "conclusion": {
                                        "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                        "user_input": "def _get_value(case):\n    def get_cabinets(case: World) -> Union[set, Cabinet, list]:\n        \"\"\"Get possible value(s) for World.views of types list/set of Cabinet\"\"\"\n        drawers = [v for v in case.views if type(v) is Drawer]\n        prismatic_connections = [c for c in case.connections if\n                                 isinstance(c, PrismaticConnection) and c.child in [drawer.container.body for drawer in\n                                                                                    drawers]]\n        cabinet_container_bodies = [pc.parent for pc in prismatic_connections]\n        cabinets = []\n        for ccb in cabinet_container_bodies:\n            if ccb in [cabinet.container.body for cabinet in cabinets]:\n                continue\n            cc_prismatic_connections = [pc for pc in prismatic_connections if pc.parent is ccb]\n            cabinet_drawer_container_bodies = [pc.child for pc in cc_prismatic_connections]\n            cabinet_drawers = [d for d in drawers if d.container.body in cabinet_drawer_container_bodies]\n            cabinets.append(Cabinet(Container(ccb), cabinet_drawers))\n    \n        return cabinets\n    \n    return get_cabinets(case)\n    ",
                                        "conclusion_type": [
                                            "semantic_world.views.views.Cabinet",
                                            "builtins.set",
                                            "builtins.list"
                                        ],
                                        "scope": {
                                            "List": "typing.List",
                                            "Set": "typing.Set",
                                            "Union": "typing.Union",
                                            "FixedConnection": "semantic_world.connections.FixedConnection",
                                            "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                            "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                            "Cabinet": "semantic_world.views.views.Cabinet",
                                            "Container": "semantic_world.views.views.Container",
                                            "Door": "semantic_world.views.views.Door",
                                            "Drawer": "semantic_world.views.views.Drawer",
                                            "Fridge": "semantic_world.views.views.Fridge",
                                            "Handle": "semantic_world.views.views.Handle",
                                            "World": "semantic_world.world.World"
                                        },
                                        "conclusion": {
                                            "_type": "builtins.NoneType",
                                            "value": null
                                        },
                                        "mutually_exclusive": false
                                    },
                                    "parent": null,
                                    "corner_case": null,
                                    "conclusion_name": null,
                                    "weight": "else if",
                                    "uid": "35528769484583703815352905256802298589",
                                    "refinement": null,
                                    "alternative": {
                                        "_type": "ripple_down_rules.rules.MultiClassTopRule",
                                        "conditions": {
                                            "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                            "user_input": "def _get_value(case):\n    def has_handles_and_revolute_connections(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Door.\"\"\"\n        return (any(v for v in case.views if isinstance(v, Handle)) and\n                any(c for c in case.connections if isinstance(c, RevoluteConnection)))\n    return has_handles_and_revolute_connections(case)\n    ",
                                            "conclusion_type": [
                                                "builtins.bool"
                                            ],
                                            "scope": {
                                                "List": "typing.List",
                                                "Set": "typing.Set",
                                                "Union": "typing.Union",
                                                "FixedConnection": "semantic_world.connections.FixedConnection",
                                                "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                "Cabinet": "semantic_world.views.views.Cabinet",
                                                "Container": "semantic_world.views.views.Container",
                                                "Door": "semantic_world.views.views.Door",
                                                "Drawer": "semantic_world.views.views.Drawer",
                                                "Fridge": "semantic_world.views.views.Fridge",
                                                "Handle": "semantic_world.views.views.Handle",
                                                "World": "semantic_world.world.World"
                                            },
                                            "conclusion": {
                                                "_type": "builtins.NoneType",
                                                "value": null
                                            },
                                            "mutually_exclusive": true
                                        },
                                        "conclusion": {
                                            "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                            "user_input": "def _get_value(case):\n    def get_doors(case: World) -> List[Door]:\n        \"\"\"Get possible value(s) for World.views  of type Door.\"\"\"\n        handles = [v for v in case.views if isinstance(v, Handle)]\n        handle_bodies = [h.body for h in handles]\n        connections_with_handles = [c for c in case.connections if isinstance(c, FixedConnection) and\n                                    c.child in handle_bodies]\n    \n        revolute_connections = [c for c in case.connections if isinstance(c, RevoluteConnection)]\n        bodies_connected_to_handles = [c.parent if c.child in handle_bodies else c.child for c in connections_with_handles]\n        bodies_that_have_revolute_joints = [b for b in bodies_connected_to_handles for c in revolute_connections\n                                            if b == c.child]\n        body_handle_connections = [c for c in connections_with_handles if c.parent in bodies_that_have_revolute_joints]\n        doors = [Door(c.parent, [h for h in handles if h.body == c.child][0]) for c in body_handle_connections]\n        return doors\n    return get_doors(case)\n    ",
                                            "conclusion_type": [
                                                "semantic_world.views.views.Door",
                                                "builtins.set",
                                                "builtins.list"
                                            ],
                                            "scope": {
                                                "List": "typing.List",
                                                "Set": "typing.Set",
                                                "Union": "typing.Union",
                                                "FixedConnection": "semantic_world.connections.FixedConnection",
                                                "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                "Cabinet": "semantic_world.views.views.Cabinet",
                                                "Container": "semantic_world.views.views.Container",
                                                "Door": "semantic_world.views.views.Door",
                                                "Drawer": "semantic_world.views.views.Drawer",
                                                "Fridge": "semantic_world.views.views.Fridge",
                                                "Handle": "semantic_world.views.views.Handle",
                                                "World": "semantic_world.world.World"
                                            },
                                            "conclusion": {
                                                "_type": "builtins.NoneType",
                                                "value": null
                                            },
                                            "mutually_exclusive": false
                                        },
                                        "parent": null,
                                        "corner_case": null,
                                        "conclusion_name": null,
                                        "weight": "else if",
                                        "uid": "59112619694893607910753808758642808601",
                                        "refinement": null,
                                        "alternative": {
                                            "_type": "ripple_down_rules.rules.MultiClassTopRule",
                                            "conditions": {
                                                "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                                "user_input": "def _get_value(case):\n    def has_doors_with_fridge_in_their_name(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Fridge.\"\"\"\n        return any(v for v in case.views if isinstance(v, Door) and \"fridge\" in v.body.name.name.lower())\n    return has_doors_with_fridge_in_their_name(case)\n    ",
                                                "conclusion_type": [
                                                    "builtins.bool"
                                                ],
                                                "scope": {
                                                    "List": "typing.List",
                                                    "Set": "typing.Set",
                                                    "Union": "typing.Union",
                                                    "FixedConnection": "semantic_world.connections.FixedConnection",
                                                    "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                    "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                    "Cabinet": "semantic_world.views.views.Cabinet",
                                                    "Container": "semantic_world.views.views.Container",
                                                    "Door": "semantic_world.views.views.Door",
                                                    "Drawer": "semantic_world.views.views.Drawer",
                                                    "Fridge": "semantic_world.views.views.Fridge",
                                                    "Handle": "semantic_world.views.views.Handle",
                                                    "World": "semantic_world.world.World"
                                                },
                                                "conclusion": {
                                                    "_type": "builtins.NoneType",
                                                    "value": null
                                                },
                                                "mutually_exclusive": false
                                            },
                                            "conclusion": {
                                                "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                                "user_input": "def _get_value(case):\n    def get_fridges(case: World) -> List[Fridge]:\n        \"\"\"Get possible value(s) for World.views  of type Fridge.\"\"\"\n        # Get fridge-related doors\n        fridge_doors = [v for v in case.views if isinstance(v, Door) and \"fridge\" in v.body.name.name.lower()]\n        # Precompute bodies of the fridge doors\n        fridge_doors_bodies = [d.body for d in fridge_doors]\n        # Filter relevant revolute connections\n        fridge_door_connections = [\n            c for c in case.connections\n            if isinstance(c, RevoluteConnection)\n               and c.child in fridge_doors_bodies\n               and 'fridge' in c.parent.name.name.lower()\n        ]\n        return [Fridge(c.parent, fridge_doors[fridge_doors_bodies.index(c.child)]) for c in fridge_door_connections]\n    return get_fridges(case)\n    ",
                                                "conclusion_type": [
                                                    "semantic_world.views.views.Fridge",
                                                    "builtins.set",
                                                    "builtins.list"
                                                ],
                                                "scope": {
                                                    "List": "typing.List",
                                                    "Set": "typing.Set",
                                                    "Union": "typing.Union",
                                                    "FixedConnection": "semantic_world.connections.FixedConnection",
                                                    "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                    "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                    "Cabinet": "semantic_world.views.views.Cabinet",
                                                    "Container": "semantic_world.views.views.Container",
                                                    "Door": "semantic_world.views.views.Door",
                                                    "Drawer": "semantic_world.views.views.Drawer",
                                                    "Fridge": "semantic_world.views.views.Fridge",
                                                    "Handle": "semantic_world.views.views.Handle",
                                                    "World": "semantic_world.world.World"
                                                },
                                                "conclusion": {
                                                    "_type": "builtins.NoneType",
                                                    "value": null
                                                },
                                                "mutually_exclusive": false
                                            },
                                            "parent": null,
                                            "corner_case": null,
                                            "conclusion_name": "views",
                                            "weight": "else if",
                                            "uid": "10840634078579061471470540436169882059",
                                            "refinement": null,
                                            "alternative": null
                                        }
                                    }
                                }
                            }
                        },
                        "corner_case": null,
                        "conclusion_name": null,
                        "weight": "else if",
                        "uid": "331345798360792447350644865254855982739",
                        "refinement": null,
                        "alternative": {
                            "_type": "ripple_down_rules.rules.MultiClassTopRule",
                            "conditions": {
                                "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                "user_input": "def _get_value(case):\n    def has_drawers(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Cabinet.\"\"\"\n        return any(v for v in case.views if type(v) is Drawer)\n    return has_drawers(case)\n    ",
                                "conclusion_type": [
                                    "builtins.bool"
                                ],
                                "scope": {
                                    "List": "typing.List",
                                    "Set": "typing.Set",
                                    "Union": "typing.Union",
                                    "FixedConnection": "semantic_world.connections.FixedConnection",
                                    "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                    "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                    "Cabinet": "semantic_world.views.views.Cabinet",
                                    "Container": "semantic_world.views.views.Container",
                                    "Door": "semantic_world.views.views.Door",
                                    "Drawer": "semantic_world.views.views.Drawer",
                                    "Fridge": "semantic_world.views.views.Fridge",
                                    "Handle": "semantic_world.views.views.Handle",
                                    "World": "semantic_world.world.World"
                                },
                                "conclusion": {
                                    "_type": "builtins.NoneType",
                                    "value": null
                                },
                                "mutually_exclusive": true
                            },
                            "conclusion": {
                                "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                "user_input": "def _get_value(case):\n    def get_cabinets(case: World) -> Union[set, Cabinet, list]:\n        \"\"\"Get possible value(s) for World.views of types list/set of Cabinet\"\"\"\n        drawers = [v for v in case.views if type(v) is Drawer]\n        prismatic_connections = [c for c in case.connections if\n                                 isinstance(c, PrismaticConnection) and c.child in [drawer.container.body for drawer in\n                                                                                    drawers]]\n        cabinet_container_bodies = [pc.parent for pc in prismatic_connections]\n        cabinets = []\n        for ccb in cabinet_container_bodies:\n            if ccb in [cabinet.container.body for cabinet in cabinets]:\n                continue\n            cc_prismatic_connections = [pc for pc in prismatic_connections if pc.parent is ccb]\n            cabinet_drawer_container_bodies = [pc.child for pc in cc_prismatic_connections]\n            cabinet_drawers = [d for d in drawers if d.container.body in cabinet_drawer_container_bodies]\n            cabinets.append(Cabinet(Container(ccb), cabinet_drawers))\n    \n        return cabinets\n    \n    return get_cabinets(case)\n    ",
                                "conclusion_type": [
                                    "semantic_world.views.views.Cabinet",
                                    "builtins.set",
                                    "builtins.list"
                                ],
                                "scope": {
                                    "List": "typing.List",
                                    "Set": "typing.Set",
                                    "Union": "typing.Union",
                                    "FixedConnection": "semantic_world.connections.FixedConnection",
                                    "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                    "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                    "Cabinet": "semantic_world.views.views.Cabinet",
                                    "Container": "semantic_world.views.views.Container",
                                    "Door": "semantic_world.views.views.Door",
                                    "Drawer": "semantic_world.views.views.Drawer",
                                    "Fridge": "semantic_world.views.views.Fridge",
                                    "Handle": "semantic_world.views.views.Handle",
                                    "World": "semantic_world.world.World"
                                },
                                "conclusion": {
                                    "_type": "builtins.NoneType",
                                    "value": null
                                },
                                "mutually_exclusive": false
                            },
                            "parent": {
                                "_type": "ripple_down_rules.rules.MultiClassTopRule",
                                "conditions": {
                                    "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                    "user_input": "def _get_value(case):\n    def has_handles_and_containers(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Drawer.\"\"\"\n        return any(v for v in case.views if type(v) is Handle) and any(v for v in case.views if type(v) is Container)\n    return has_handles_and_containers(case)\n    ",
                                    "conclusion_type": [
                                        "builtins.bool"
                                    ],
                                    "scope": {
                                        "List": "typing.List",
                                        "Set": "typing.Set",
                                        "Union": "typing.Union",
                                        "FixedConnection": "semantic_world.connections.FixedConnection",
                                        "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                        "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                        "Cabinet": "semantic_world.views.views.Cabinet",
                                        "Container": "semantic_world.views.views.Container",
                                        "Door": "semantic_world.views.views.Door",
                                        "Drawer": "semantic_world.views.views.Drawer",
                                        "Fridge": "semantic_world.views.views.Fridge",
                                        "Handle": "semantic_world.views.views.Handle",
                                        "World": "semantic_world.world.World"
                                    },
                                    "conclusion": {
                                        "_type": "builtins.NoneType",
                                        "value": null
                                    },
                                    "mutually_exclusive": true
                                },
                                "conclusion": {
                                    "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                    "user_input": "def _get_value(case):\n    def get_drawers(case: World) -> Union[set, list, Drawer]:\n        \"\"\"Get possible value(s) for World.views of types list/set of Drawer\"\"\"\n        handles = [v for v in case.views if type(v) is Handle]\n        containers = [v for v in case.views if type(v) is Container]\n        fixed_connections = [c for c in case.connections if\n                             isinstance(c, FixedConnection) and c.parent in [cont.body for cont in\n                                                                             containers] and c.child in [\n                                 h.body for h in handles]]\n        prismatic_connections = [c for c in case.connections if\n                                 isinstance(c, PrismaticConnection) and c.child in [cont.body for cont in containers]]\n        drawer_handle_connections = [fc for fc in fixed_connections if\n                                     fc.parent in [pc.child for pc in prismatic_connections]]\n        drawers = [Drawer([cont for cont in containers if dc.parent == cont.body][0],\n                          [h for h in handles if dc.child == h.body][0]) for dc in drawer_handle_connections]\n        return drawers\n    \n    return get_drawers(case)\n    ",
                                    "conclusion_type": [
                                        "semantic_world.views.views.Drawer",
                                        "builtins.set",
                                        "builtins.list"
                                    ],
                                    "scope": {
                                        "List": "typing.List",
                                        "Set": "typing.Set",
                                        "Union": "typing.Union",
                                        "FixedConnection": "semantic_world.connections.FixedConnection",
                                        "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                        "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                        "Cabinet": "semantic_world.views.views.Cabinet",
                                        "Container": "semantic_world.views.views.Container",
                                        "Door": "semantic_world.views.views.Door",
                                        "Drawer": "semantic_world.views.views.Drawer",
                                        "Fridge": "semantic_world.views.views.Fridge",
                                        "Handle": "semantic_world.views.views.Handle",
                                        "World": "semantic_world.world.World"
                                    },
                                    "conclusion": {
                                        "_type": "builtins.NoneType",
                                        "value": null
                                    },
                                    "mutually_exclusive": false
                                },
                                "parent": null,
                                "corner_case": null,
                                "conclusion_name": null,
                                "weight": "else if",
                                "uid": "331345798360792447350644865254855982739",
                                "refinement": null,
                                "alternative": {
                                    "_type": "ripple_down_rules.rules.MultiClassTopRule",
                                    "conditions": {
                                        "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                        "user_input": "def _get_value(case):\n    def has_drawers(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Cabinet.\"\"\"\n        return any(v for v in case.views if type(v) is Drawer)\n    return has_drawers(case)\n    ",
                                        "conclusion_type": [
                                            "builtins.bool"
                                        ],
                                        "scope": {
                                            "List": "typing.List",
                                            "Set": "typing.Set",
                                            "Union": "typing.Union",
                                            "FixedConnection": "semantic_world.connections.FixedConnection",
                                            "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                            "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                            "Cabinet": "semantic_world.views.views.Cabinet",
                                            "Container": "semantic_world.views.views.Container",
                                            "Door": "semantic_world.views.views.Door",
                                            "Drawer": "semantic_world.views.views.Drawer",
                                            "Fridge": "semantic_world.views.views.Fridge",
                                            "Handle": "semantic_world.views.views.Handle",
                                            "World": "semantic_world.world.World"
                                        },
                                        "conclusion": {
                                            "_type": "builtins.NoneType",
                                            "value": null
                                        },
                                        "mutually_exclusive": true
                                    },
                                    "conclusion": {
                                        "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                        "user_input": "def _get_value(case):\n    def get_cabinets(case: World) -> Union[set, Cabinet, list]:\n        \"\"\"Get possible value(s) for World.views of types list/set of Cabinet\"\"\"\n        drawers = [v for v in case.views if type(v) is Drawer]\n        prismatic_connections = [c for c in case.connections if\n                                 isinstance(c, PrismaticConnection) and c.child in [drawer.container.body for drawer in\n                                                                                    drawers]]\n        cabinet_container_bodies = [pc.parent for pc in prismatic_connections]\n        cabinets = []\n        for ccb in cabinet_container_bodies:\n            if ccb in [cabinet.container.body for cabinet in cabinets]:\n                continue\n            cc_prismatic_connections = [pc for pc in prismatic_connections if pc.parent is ccb]\n            cabinet_drawer_container_bodies = [pc.child for pc in cc_prismatic_connections]\n            cabinet_drawers = [d for d in drawers if d.container.body in cabinet_drawer_container_bodies]\n            cabinets.append(Cabinet(Container(ccb), cabinet_drawers))\n    \n        return cabinets\n    \n    return get_cabinets(case)\n    ",
                                        "conclusion_type": [
                                            "semantic_world.views.views.Cabinet",
                                            "builtins.set",
                                            "builtins.list"
                                        ],
                                        "scope": {
                                            "List": "typing.List",
                                            "Set": "typing.Set",
                                            "Union": "typing.Union",
                                            "FixedConnection": "semantic_world.connections.FixedConnection",
                                            "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                            "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                            "Cabinet": "semantic_world.views.views.Cabinet",
                                            "Container": "semantic_world.views.views.Container",
                                            "Door": "semantic_world.views.views.Door",
                                            "Drawer": "semantic_world.views.views.Drawer",
                                            "Fridge": "semantic_world.views.views.Fridge",
                                            "Handle": "semantic_world.views.views.Handle",
                                            "World": "semantic_world.world.World"
                                        },
                                        "conclusion": {
                                            "_type": "builtins.NoneType",
                                            "value": null
                                        },
                                        "mutually_exclusive": false
                                    },
                                    "parent": null,
                                    "corner_case": null,
                                    "conclusion_name": null,
                                    "weight": "else if",
                                    "uid": "35528769484583703815352905256802298589",
                                    "refinement": null,
                                    "alternative": {
                                        "_type": "ripple_down_rules.rules.MultiClassTopRule",
                                        "conditions": {
                                            "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                            "user_input": "def _get_value(case):\n    def has_handles_and_revolute_connections(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Door.\"\"\"\n        return (any(v for v in case.views if isinstance(v, Handle)) and\n                any(c for c in case.connections if isinstance(c, RevoluteConnection)))\n    return has_handles_and_revolute_connections(case)\n    ",
                                            "conclusion_type": [
                                                "builtins.bool"
                                            ],
                                            "scope": {
                                                "List": "typing.List",
                                                "Set": "typing.Set",
                                                "Union": "typing.Union",
                                                "FixedConnection": "semantic_world.connections.FixedConnection",
                                                "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                "Cabinet": "semantic_world.views.views.Cabinet",
                                                "Container": "semantic_world.views.views.Container",
                                                "Door": "semantic_world.views.views.Door",
                                                "Drawer": "semantic_world.views.views.Drawer",
                                                "Fridge": "semantic_world.views.views.Fridge",
                                                "Handle": "semantic_world.views.views.Handle",
                                                "World": "semantic_world.world.World"
                                            },
                                            "conclusion": {
                                                "_type": "builtins.NoneType",
                                                "value": null
                                            },
                                            "mutually_exclusive": true
                                        },
                                        "conclusion": {
                                            "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                            "user_input": "def _get_value(case):\n    def get_doors(case: World) -> List[Door]:\n        \"\"\"Get possible value(s) for World.views  of type Door.\"\"\"\n        handles = [v for v in case.views if isinstance(v, Handle)]\n        handle_bodies = [h.body for h in handles]\n        connections_with_handles = [c for c in case.connections if isinstance(c, FixedConnection) and\n                                    c.child in handle_bodies]\n    \n        revolute_connections = [c for c in case.connections if isinstance(c, RevoluteConnection)]\n        bodies_connected_to_handles = [c.parent if c.child in handle_bodies else c.child for c in connections_with_handles]\n        bodies_that_have_revolute_joints = [b for b in bodies_connected_to_handles for c in revolute_connections\n                                            if b == c.child]\n        body_handle_connections = [c for c in connections_with_handles if c.parent in bodies_that_have_revolute_joints]\n        doors = [Door(c.parent, [h for h in handles if h.body == c.child][0]) for c in body_handle_connections]\n        return doors\n    return get_doors(case)\n    ",
                                            "conclusion_type": [
                                                "semantic_world.views.views.Door",
                                                "builtins.set",
                                                "builtins.list"
                                            ],
                                            "scope": {
                                                "List": "typing.List",
                                                "Set": "typing.Set",
                                                "Union": "typing.Union",
                                                "FixedConnection": "semantic_world.connections.FixedConnection",
                                                "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                "Cabinet": "semantic_world.views.views.Cabinet",
                                                "Container": "semantic_world.views.views.Container",
                                                "Door": "semantic_world.views.views.Door",
                                                "Drawer": "semantic_world.views.views.Drawer",
                                                "Fridge": "semantic_world.views.views.Fridge",
                                                "Handle": "semantic_world.views.views.Handle",
                                                "World": "semantic_world.world.World"
                                            },
                                            "conclusion": {
                                                "_type": "builtins.NoneType",
                                                "value": null
                                            },
                                            "mutually_exclusive": false
                                        },
                                        "parent": null,
                                        "corner_case": null,
                                        "conclusion_name": null,
                                        "weight": "else if",
                                        "uid": "59112619694893607910753808758642808601",
                                        "refinement": null,
                                        "alternative": {
                                            "_type": "ripple_down_rules.rules.MultiClassTopRule",
                                            "conditions": {
                                                "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                                "user_input": "def _get_value(case):\n    def has_doors_with_fridge_in_their_name(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Fridge.\"\"\"\n        return any(v for v in case.views if isinstance(v, Door) and \"fridge\" in v.body.name.name.lower())\n    return has_doors_with_fridge_in_their_name(case)\n    ",
                                                "conclusion_type": [
                                                    "builtins.bool"
                                                ],
                                                "scope": {
                                                    "List": "typing.List",
                                                    "Set": "typing.Set",
                                                    "Union": "typing.Union",
                                                    "FixedConnection": "semantic_world.connections.FixedConnection",
                                                    "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                    "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                    "Cabinet": "semantic_world.views.views.Cabinet",
                                                    "Container": "semantic_world.views.views.Container",
                                                    "Door": "semantic_world.views.views.Door",
                                                    "Drawer": "semantic_world.views.views.Drawer",
                                                    "Fridge": "semantic_world.views.views.Fridge",
                                                    "Handle": "semantic_world.views.views.Handle",
                                                    "World": "semantic_world.world.World"
                                                },
                                                "conclusion": {
                                                    "_type": "builtins.NoneType",
                                                    "value": null
                                                },
                                                "mutually_exclusive": false
                                            },
                                            "conclusion": {
                                                "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                                "user_input": "def _get_value(case):\n    def get_fridges(case: World) -> List[Fridge]:\n        \"\"\"Get possible value(s) for World.views  of type Fridge.\"\"\"\n        # Get fridge-related doors\n        fridge_doors = [v for v in case.views if isinstance(v, Door) and \"fridge\" in v.body.name.name.lower()]\n        # Precompute bodies of the fridge doors\n        fridge_doors_bodies = [d.body for d in fridge_doors]\n        # Filter relevant revolute connections\n        fridge_door_connections = [\n            c for c in case.connections\n            if isinstance(c, RevoluteConnection)\n               and c.child in fridge_doors_bodies\n               and 'fridge' in c.parent.name.name.lower()\n        ]\n        return [Fridge(c.parent, fridge_doors[fridge_doors_bodies.index(c.child)]) for c in fridge_door_connections]\n    return get_fridges(case)\n    ",
                                                "conclusion_type": [
                                                    "semantic_world.views.views.Fridge",
                                                    "builtins.set",
                                                    "builtins.list"
                                                ],
                                                "scope": {
                                                    "List": "typing.List",
                                                    "Set": "typing.Set",
                                                    "Union": "typing.Union",
                                                    "FixedConnection": "semantic_world.connections.FixedConnection",
                                                    "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                    "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                    "Cabinet": "semantic_world.views.views.Cabinet",
                                                    "Container": "semantic_world.views.views.Container",
                                                    "Door": "semantic_world.views.views.Door",
                                                    "Drawer": "semantic_world.views.views.Drawer",
                                                    "Fridge": "semantic_world.views.views.Fridge",
                                                    "Handle": "semantic_world.views.views.Handle",
                                                    "World": "semantic_world.world.World"
                                                },
                                                "conclusion": {
                                                    "_type": "builtins.NoneType",
                                                    "value": null
                                                },
                                                "mutually_exclusive": false
                                            },
                                            "parent": null,
                                            "corner_case": null,
                                            "conclusion_name": "views",
                                            "weight": "else if",
                                            "uid": "10840634078579061471470540436169882059",
                                            "refinement": null,
                                            "alternative": null
                                        }
                                    }
                                }
                            },
                            "corner_case": null,
                            "conclusion_name": null,
                            "weight": "else if",
                            "uid": "35528769484583703815352905256802298589",
                            "refinement": null,
                            "alternative": {
                                "_type": "ripple_down_rules.rules.MultiClassTopRule",
                                "conditions": {
                                    "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                    "user_input": "def _get_value(case):\n    def has_handles_and_revolute_connections(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Door.\"\"\"\n        return (any(v for v in case.views if isinstance(v, Handle)) and\n                any(c for c in case.connections if isinstance(c, RevoluteConnection)))\n    return has_handles_and_revolute_connections(case)\n    ",
                                    "conclusion_type": [
                                        "builtins.bool"
                                    ],
                                    "scope": {
                                        "List": "typing.List",
                                        "Set": "typing.Set",
                                        "Union": "typing.Union",
                                        "FixedConnection": "semantic_world.connections.FixedConnection",
                                        "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                        "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                        "Cabinet": "semantic_world.views.views.Cabinet",
                                        "Container": "semantic_world.views.views.Container",
                                        "Door": "semantic_world.views.views.Door",
                                        "Drawer": "semantic_world.views.views.Drawer",
                                        "Fridge": "semantic_world.views.views.Fridge",
                                        "Handle": "semantic_world.views.views.Handle",
                                        "World": "semantic_world.world.World"
                                    },
                                    "conclusion": {
                                        "_type": "builtins.NoneType",
                                        "value": null
                                    },
                                    "mutually_exclusive": true
                                },
                                "conclusion": {
                                    "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                    "user_input": "def _get_value(case):\n    def get_doors(case: World) -> List[Door]:\n        \"\"\"Get possible value(s) for World.views  of type Door.\"\"\"\n        handles = [v for v in case.views if isinstance(v, Handle)]\n        handle_bodies = [h.body for h in handles]\n        connections_with_handles = [c for c in case.connections if isinstance(c, FixedConnection) and\n                                    c.child in handle_bodies]\n    \n        revolute_connections = [c for c in case.connections if isinstance(c, RevoluteConnection)]\n        bodies_connected_to_handles = [c.parent if c.child in handle_bodies else c.child for c in connections_with_handles]\n        bodies_that_have_revolute_joints = [b for b in bodies_connected_to_handles for c in revolute_connections\n                                            if b == c.child]\n        body_handle_connections = [c for c in connections_with_handles if c.parent in bodies_that_have_revolute_joints]\n        doors = [Door(c.parent, [h for h in handles if h.body == c.child][0]) for c in body_handle_connections]\n        return doors\n    return get_doors(case)\n    ",
                                    "conclusion_type": [
                                        "semantic_world.views.views.Door",
                                        "builtins.set",
                                        "builtins.list"
                                    ],
                                    "scope": {
                                        "List": "typing.List",
                                        "Set": "typing.Set",
                                        "Union": "typing.Union",
                                        "FixedConnection": "semantic_world.connections.FixedConnection",
                                        "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                        "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                        "Cabinet": "semantic_world.views.views.Cabinet",
                                        "Container": "semantic_world.views.views.Container",
                                        "Door": "semantic_world.views.views.Door",
                                        "Drawer": "semantic_world.views.views.Drawer",
                                        "Fridge": "semantic_world.views.views.Fridge",
                                        "Handle": "semantic_world.views.views.Handle",
                                        "World": "semantic_world.world.World"
                                    },
                                    "conclusion": {
                                        "_type": "builtins.NoneType",
                                        "value": null
                                    },
                                    "mutually_exclusive": false
                                },
                                "parent": {
                                    "_type": "ripple_down_rules.rules.MultiClassTopRule",
                                    "conditions": {
                                        "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                        "user_input": "def _get_value(case):\n    def has_drawers(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Cabinet.\"\"\"\n        return any(v for v in case.views if type(v) is Drawer)\n    return has_drawers(case)\n    ",
                                        "conclusion_type": [
                                            "builtins.bool"
                                        ],
                                        "scope": {
                                            "List": "typing.List",
                                            "Set": "typing.Set",
                                            "Union": "typing.Union",
                                            "FixedConnection": "semantic_world.connections.FixedConnection",
                                            "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                            "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                            "Cabinet": "semantic_world.views.views.Cabinet",
                                            "Container": "semantic_world.views.views.Container",
                                            "Door": "semantic_world.views.views.Door",
                                            "Drawer": "semantic_world.views.views.Drawer",
                                            "Fridge": "semantic_world.views.views.Fridge",
                                            "Handle": "semantic_world.views.views.Handle",
                                            "World": "semantic_world.world.World"
                                        },
                                        "conclusion": {
                                            "_type": "builtins.NoneType",
                                            "value": null
                                        },
                                        "mutually_exclusive": true
                                    },
                                    "conclusion": {
                                        "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                        "user_input": "def _get_value(case):\n    def get_cabinets(case: World) -> Union[set, Cabinet, list]:\n        \"\"\"Get possible value(s) for World.views of types list/set of Cabinet\"\"\"\n        drawers = [v for v in case.views if type(v) is Drawer]\n        prismatic_connections = [c for c in case.connections if\n                                 isinstance(c, PrismaticConnection) and c.child in [drawer.container.body for drawer in\n                                                                                    drawers]]\n        cabinet_container_bodies = [pc.parent for pc in prismatic_connections]\n        cabinets = []\n        for ccb in cabinet_container_bodies:\n            if ccb in [cabinet.container.body for cabinet in cabinets]:\n                continue\n            cc_prismatic_connections = [pc for pc in prismatic_connections if pc.parent is ccb]\n            cabinet_drawer_container_bodies = [pc.child for pc in cc_prismatic_connections]\n            cabinet_drawers = [d for d in drawers if d.container.body in cabinet_drawer_container_bodies]\n            cabinets.append(Cabinet(Container(ccb), cabinet_drawers))\n    \n        return cabinets\n    \n    return get_cabinets(case)\n    ",
                                        "conclusion_type": [
                                            "semantic_world.views.views.Cabinet",
                                            "builtins.set",
                                            "builtins.list"
                                        ],
                                        "scope": {
                                            "List": "typing.List",
                                            "Set": "typing.Set",
                                            "Union": "typing.Union",
                                            "FixedConnection": "semantic_world.connections.FixedConnection",
                                            "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                            "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                            "Cabinet": "semantic_world.views.views.Cabinet",
                                            "Container": "semantic_world.views.views.Container",
                                            "Door": "semantic_world.views.views.Door",
                                            "Drawer": "semantic_world.views.views.Drawer",
                                            "Fridge": "semantic_world.views.views.Fridge",
                                            "Handle": "semantic_world.views.views.Handle",
                                            "World": "semantic_world.world.World"
                                        },
                                        "conclusion": {
                                            "_type": "builtins.NoneType",
                                            "value": null
                                        },
                                        "mutually_exclusive": false
                                    },
                                    "parent": null,
                                    "corner_case": null,
                                    "conclusion_name": null,
                                    "weight": "else if",
                                    "uid": "35528769484583703815352905256802298589",
                                    "refinement": null,
                                    "alternative": {
                                        "_type": "ripple_down_rules.rules.MultiClassTopRule",
                                        "conditions": {
                                            "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                            "user_input": "def _get_value(case):\n    def has_handles_and_revolute_connections(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Door.\"\"\"\n        return (any(v for v in case.views if isinstance(v, Handle)) and\n                any(c for c in case.connections if isinstance(c, RevoluteConnection)))\n    return has_handles_and_revolute_connections(case)\n    ",
                                            "conclusion_type": [
                                                "builtins.bool"
                                            ],
                                            "scope": {
                                                "List": "typing.List",
                                                "Set": "typing.Set",
                                                "Union": "typing.Union",
                                                "FixedConnection": "semantic_world.connections.FixedConnection",
                                                "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                "Cabinet": "semantic_world.views.views.Cabinet",
                                                "Container": "semantic_world.views.views.Container",
                                                "Door": "semantic_world.views.views.Door",
                                                "Drawer": "semantic_world.views.views.Drawer",
                                                "Fridge": "semantic_world.views.views.Fridge",
                                                "Handle": "semantic_world.views.views.Handle",
                                                "World": "semantic_world.world.World"
                                            },
                                            "conclusion": {
                                                "_type": "builtins.NoneType",
                                                "value": null
                                            },
                                            "mutually_exclusive": true
                                        },
                                        "conclusion": {
                                            "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                            "user_input": "def _get_value(case):\n    def get_doors(case: World) -> List[Door]:\n        \"\"\"Get possible value(s) for World.views  of type Door.\"\"\"\n        handles = [v for v in case.views if isinstance(v, Handle)]\n        handle_bodies = [h.body for h in handles]\n        connections_with_handles = [c for c in case.connections if isinstance(c, FixedConnection) and\n                                    c.child in handle_bodies]\n    \n        revolute_connections = [c for c in case.connections if isinstance(c, RevoluteConnection)]\n        bodies_connected_to_handles = [c.parent if c.child in handle_bodies else c.child for c in connections_with_handles]\n        bodies_that_have_revolute_joints = [b for b in bodies_connected_to_handles for c in revolute_connections\n                                            if b == c.child]\n        body_handle_connections = [c for c in connections_with_handles if c.parent in bodies_that_have_revolute_joints]\n        doors = [Door(c.parent, [h for h in handles if h.body == c.child][0]) for c in body_handle_connections]\n        return doors\n    return get_doors(case)\n    ",
                                            "conclusion_type": [
                                                "semantic_world.views.views.Door",
                                                "builtins.set",
                                                "builtins.list"
                                            ],
                                            "scope": {
                                                "List": "typing.List",
                                                "Set": "typing.Set",
                                                "Union": "typing.Union",
                                                "FixedConnection": "semantic_world.connections.FixedConnection",
                                                "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                "Cabinet": "semantic_world.views.views.Cabinet",
                                                "Container": "semantic_world.views.views.Container",
                                                "Door": "semantic_world.views.views.Door",
                                                "Drawer": "semantic_world.views.views.Drawer",
                                                "Fridge": "semantic_world.views.views.Fridge",
                                                "Handle": "semantic_world.views.views.Handle",
                                                "World": "semantic_world.world.World"
                                            },
                                            "conclusion": {
                                                "_type": "builtins.NoneType",
                                                "value": null
                                            },
                                            "mutually_exclusive": false
                                        },
                                        "parent": null,
                                        "corner_case": null,
                                        "conclusion_name": null,
                                        "weight": "else if",
                                        "uid": "59112619694893607910753808758642808601",
                                        "refinement": null,
                                        "alternative": {
                                            "_type": "ripple_down_rules.rules.MultiClassTopRule",
                                            "conditions": {
                                                "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                                "user_input": "def _get_value(case):\n    def has_doors_with_fridge_in_their_name(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Fridge.\"\"\"\n        return any(v for v in case.views if isinstance(v, Door) and \"fridge\" in v.body.name.name.lower())\n    return has_doors_with_fridge_in_their_name(case)\n    ",
                                                "conclusion_type": [
                                                    "builtins.bool"
                                                ],
                                                "scope": {
                                                    "List": "typing.List",
                                                    "Set": "typing.Set",
                                                    "Union": "typing.Union",
                                                    "FixedConnection": "semantic_world.connections.FixedConnection",
                                                    "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                    "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                    "Cabinet": "semantic_world.views.views.Cabinet",
                                                    "Container": "semantic_world.views.views.Container",
                                                    "Door": "semantic_world.views.views.Door",
                                                    "Drawer": "semantic_world.views.views.Drawer",
                                                    "Fridge": "semantic_world.views.views.Fridge",
                                                    "Handle": "semantic_world.views.views.Handle",
                                                    "World": "semantic_world.world.World"
                                                },
                                                "conclusion": {
                                                    "_type": "builtins.NoneType",
                                                    "value": null
                                                },
                                                "mutually_exclusive": false
                                            },
                                            "conclusion": {
                                                "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                                "user_input": "def _get_value(case):\n    def get_fridges(case: World) -> List[Fridge]:\n        \"\"\"Get possible value(s) for World.views  of type Fridge.\"\"\"\n        # Get fridge-related doors\n        fridge_doors = [v for v in case.views if isinstance(v, Door) and \"fridge\" in v.body.name.name.lower()]\n        # Precompute bodies of the fridge doors\n        fridge_doors_bodies = [d.body for d in fridge_doors]\n        # Filter relevant revolute connections\n        fridge_door_connections = [\n            c for c in case.connections\n            if isinstance(c, RevoluteConnection)\n               and c.child in fridge_doors_bodies\n               and 'fridge' in c.parent.name.name.lower()\n        ]\n        return [Fridge(c.parent, fridge_doors[fridge_doors_bodies.index(c.child)]) for c in fridge_door_connections]\n    return get_fridges(case)\n    ",
                                                "conclusion_type": [
                                                    "semantic_world.views.views.Fridge",
                                                    "builtins.set",
                                                    "builtins.list"
                                                ],
                                                "scope": {
                                                    "List": "typing.List",
                                                    "Set": "typing.Set",
                                                    "Union": "typing.Union",
                                                    "FixedConnection": "semantic_world.connections.FixedConnection",
                                                    "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                    "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                    "Cabinet": "semantic_world.views.views.Cabinet",
                                                    "Container": "semantic_world.views.views.Container",
                                                    "Door": "semantic_world.views.views.Door",
                                                    "Drawer": "semantic_world.views.views.Drawer",
                                                    "Fridge": "semantic_world.views.views.Fridge",
                                                    "Handle": "semantic_world.views.views.Handle",
                                                    "World": "semantic_world.world.World"
                                                },
                                                "conclusion": {
                                                    "_type": "builtins.NoneType",
                                                    "value": null
                                                },
                                                "mutually_exclusive": false
                                            },
                                            "parent": null,
                                            "corner_case": null,
                                            "conclusion_name": "views",
                                            "weight": "else if",
                                            "uid": "10840634078579061471470540436169882059",
                                            "refinement": null,
                                            "alternative": null
                                        }
                                    }
                                },
                                "corner_case": null,
                                "conclusion_name": null,
                                "weight": "else if",
                                "uid": "59112619694893607910753808758642808601",
                                "refinement": null,
                                "alternative": {
                                    "_type": "ripple_down_rules.rules.MultiClassTopRule",
                                    "conditions": {
                                        "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                        "user_input": "def _get_value(case):\n    def has_doors_with_fridge_in_their_name(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Fridge.\"\"\"\n        return any(v for v in case.views if isinstance(v, Door) and \"fridge\" in v.body.name.name.lower())\n    return has_doors_with_fridge_in_their_name(case)\n    ",
                                        "conclusion_type": [
                                            "builtins.bool"
                                        ],
                                        "scope": {
                                            "List": "typing.List",
                                            "Set": "typing.Set",
                                            "Union": "typing.Union",
                                            "FixedConnection": "semantic_world.connections.FixedConnection",
                                            "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                            "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                            "Cabinet": "semantic_world.views.views.Cabinet",
                                            "Container": "semantic_world.views.views.Container",
                                            "Door": "semantic_world.views.views.Door",
                                            "Drawer": "semantic_world.views.views.Drawer",
                                            "Fridge": "semantic_world.views.views.Fridge",
                                            "Handle": "semantic_world.views.views.Handle",
                                            "World": "semantic_world.world.World"
                                        },
                                        "conclusion": {
                                            "_type": "builtins.NoneType",
                                            "value": null
                                        },
                                        "mutually_exclusive": false
                                    },
                                    "conclusion": {
                                        "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                        "user_input": "def _get_value(case):\n    def get_fridges(case: World) -> List[Fridge]:\n        \"\"\"Get possible value(s) for World.views  of type Fridge.\"\"\"\n        # Get fridge-related doors\n        fridge_doors = [v for v in case.views if isinstance(v, Door) and \"fridge\" in v.body.name.name.lower()]\n        # Precompute bodies of the fridge doors\n        fridge_doors_bodies = [d.body for d in fridge_doors]\n        # Filter relevant revolute connections\n        fridge_door_connections = [\n            c for c in case.connections\n            if isinstance(c, RevoluteConnection)\n               and c.child in fridge_doors_bodies\n               and 'fridge' in c.parent.name.name.lower()\n        ]\n        return [Fridge(c.parent, fridge_doors[fridge_doors_bodies.index(c.child)]) for c in fridge_door_connections]\n    return get_fridges(case)\n    ",
                                        "conclusion_type": [
                                            "semantic_world.views.views.Fridge",
                                            "builtins.set",
                                            "builtins.list"
                                        ],
                                        "scope": {
                                            "List": "typing.List",
                                            "Set": "typing.Set",
                                            "Union": "typing.Union",
                                            "FixedConnection": "semantic_world.connections.FixedConnection",
                                            "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                            "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                            "Cabinet": "semantic_world.views.views.Cabinet",
                                            "Container": "semantic_world.views.views.Container",
                                            "Door": "semantic_world.views.views.Door",
                                            "Drawer": "semantic_world.views.views.Drawer",
                                            "Fridge": "semantic_world.views.views.Fridge",
                                            "Handle": "semantic_world.views.views.Handle",
                                            "World": "semantic_world.world.World"
                                        },
                                        "conclusion": {
                                            "_type": "builtins.NoneType",
                                            "value": null
                                        },
                                        "mutually_exclusive": false
                                    },
                                    "parent": {
                                        "_type": "ripple_down_rules.rules.MultiClassTopRule",
                                        "conditions": {
                                            "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                            "user_input": "def _get_value(case):\n    def has_handles_and_revolute_connections(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Door.\"\"\"\n        return (any(v for v in case.views if isinstance(v, Handle)) and\n                any(c for c in case.connections if isinstance(c, RevoluteConnection)))\n    return has_handles_and_revolute_connections(case)\n    ",
                                            "conclusion_type": [
                                                "builtins.bool"
                                            ],
                                            "scope": {
                                                "List": "typing.List",
                                                "Set": "typing.Set",
                                                "Union": "typing.Union",
                                                "FixedConnection": "semantic_world.connections.FixedConnection",
                                                "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                "Cabinet": "semantic_world.views.views.Cabinet",
                                                "Container": "semantic_world.views.views.Container",
                                                "Door": "semantic_world.views.views.Door",
                                                "Drawer": "semantic_world.views.views.Drawer",
                                                "Fridge": "semantic_world.views.views.Fridge",
                                                "Handle": "semantic_world.views.views.Handle",
                                                "World": "semantic_world.world.World"
                                            },
                                            "conclusion": {
                                                "_type": "builtins.NoneType",
                                                "value": null
                                            },
                                            "mutually_exclusive": true
                                        },
                                        "conclusion": {
                                            "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                            "user_input": "def _get_value(case):\n    def get_doors(case: World) -> List[Door]:\n        \"\"\"Get possible value(s) for World.views  of type Door.\"\"\"\n        handles = [v for v in case.views if isinstance(v, Handle)]\n        handle_bodies = [h.body for h in handles]\n        connections_with_handles = [c for c in case.connections if isinstance(c, FixedConnection) and\n                                    c.child in handle_bodies]\n    \n        revolute_connections = [c for c in case.connections if isinstance(c, RevoluteConnection)]\n        bodies_connected_to_handles = [c.parent if c.child in handle_bodies else c.child for c in connections_with_handles]\n        bodies_that_have_revolute_joints = [b for b in bodies_connected_to_handles for c in revolute_connections\n                                            if b == c.child]\n        body_handle_connections = [c for c in connections_with_handles if c.parent in bodies_that_have_revolute_joints]\n        doors = [Door(c.parent, [h for h in handles if h.body == c.child][0]) for c in body_handle_connections]\n        return doors\n    return get_doors(case)\n    ",
                                            "conclusion_type": [
                                                "semantic_world.views.views.Door",
                                                "builtins.set",
                                                "builtins.list"
                                            ],
                                            "scope": {
                                                "List": "typing.List",
                                                "Set": "typing.Set",
                                                "Union": "typing.Union",
                                                "FixedConnection": "semantic_world.connections.FixedConnection",
                                                "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                "Cabinet": "semantic_world.views.views.Cabinet",
                                                "Container": "semantic_world.views.views.Container",
                                                "Door": "semantic_world.views.views.Door",
                                                "Drawer": "semantic_world.views.views.Drawer",
                                                "Fridge": "semantic_world.views.views.Fridge",
                                                "Handle": "semantic_world.views.views.Handle",
                                                "World": "semantic_world.world.World"
                                            },
                                            "conclusion": {
                                                "_type": "builtins.NoneType",
                                                "value": null
                                            },
                                            "mutually_exclusive": false
                                        },
                                        "parent": null,
                                        "corner_case": null,
                                        "conclusion_name": null,
                                        "weight": "else if",
                                        "uid": "59112619694893607910753808758642808601",
                                        "refinement": null,
                                        "alternative": {
                                            "_type": "ripple_down_rules.rules.MultiClassTopRule",
                                            "conditions": {
                                                "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                                "user_input": "def _get_value(case):\n    def has_doors_with_fridge_in_their_name(case: World) -> bool:\n        \"\"\"Get conditions on whether it's possible to conclude a value for World.views  of type Fridge.\"\"\"\n        return any(v for v in case.views if isinstance(v, Door) and \"fridge\" in v.body.name.name.lower())\n    return has_doors_with_fridge_in_their_name(case)\n    ",
                                                "conclusion_type": [
                                                    "builtins.bool"
                                                ],
                                                "scope": {
                                                    "List": "typing.List",
                                                    "Set": "typing.Set",
                                                    "Union": "typing.Union",
                                                    "FixedConnection": "semantic_world.connections.FixedConnection",
                                                    "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                    "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                    "Cabinet": "semantic_world.views.views.Cabinet",
                                                    "Container": "semantic_world.views.views.Container",
                                                    "Door": "semantic_world.views.views.Door",
                                                    "Drawer": "semantic_world.views.views.Drawer",
                                                    "Fridge": "semantic_world.views.views.Fridge",
                                                    "Handle": "semantic_world.views.views.Handle",
                                                    "World": "semantic_world.world.World"
                                                },
                                                "conclusion": {
                                                    "_type": "builtins.NoneType",
                                                    "value": null
                                                },
                                                "mutually_exclusive": false
                                            },
                                            "conclusion": {
                                                "_type": "ripple_down_rules.datastructures.callable_expression.CallableExpression",
                                                "user_input": "def _get_value(case):\n    def get_fridges(case: World) -> List[Fridge]:\n        \"\"\"Get possible value(s) for World.views  of type Fridge.\"\"\"\n        # Get fridge-related doors\n        fridge_doors = [v for v in case.views if isinstance(v, Door) and \"fridge\" in v.body.name.name.lower()]\n        # Precompute bodies of the fridge doors\n        fridge_doors_bodies = [d.body for d in fridge_doors]\n        # Filter relevant revolute connections\n        fridge_door_connections = [\n            c for c in case.connections\n            if isinstance(c, RevoluteConnection)\n               and c.child in fridge_doors_bodies\n               and 'fridge' in c.parent.name.name.lower()\n        ]\n        return [Fridge(c.parent, fridge_doors[fridge_doors_bodies.index(c.child)]) for c in fridge_door_connections]\n    return get_fridges(case)\n    ",
                                                "conclusion_type": [
                                                    "semantic_world.views.views.Fridge",
                                                    "builtins.set",
                                                    "builtins.list"
                                                ],
                                                "scope": {
                                                    "List": "typing.List",
                                                    "Set": "typing.Set",
                                                    "Union": "typing.Union",
                                                    "FixedConnection": "semantic_world.connections.FixedConnection",
                                                    "PrismaticConnection": "semantic_world.connections.PrismaticConnection",
                                                    "RevoluteConnection": "semantic_world.connections.RevoluteConnection",
                                                    "Cabinet": "semantic_world.views.views.Cabinet",
                                                    "Container": "semantic_world.views.views.Container",
                                                    "Door": "semantic_world.views.views.Door",
                                                    "Drawer": "semantic_world.views.views.Drawer",
                                                    "Fridge": "semantic_world.views.views.Fridge",
                                                    "Handle": "semantic_world.views.views.Handle",
                                                    "World": "semantic_world.world.World"
                                                },
                                                "conclusion": {
                                                    "_type": "builtins.NoneType",
                                                    "value": null
                                                },
                                                "mutually_exclusive": false
                                            },
                                            "parent": null,
                                            "corner_case": null,
                                            "conclusion_name": "views",
                                            "weight": "else if",
                                            "uid": "10840634078579061471470540436169882059",
                                            "refinement": null,
                                            "alternative": null
                                        }
                                    },
                                    "corner_case": null,
                                    "conclusion_name": "views",
                                    "weight": "else if",
                                    "uid": "10840634078579061471470540436169882059",
                                    "refinement": null,
                                    "alternative": null
                                }
                            }
                        }
                    }
                }
            },
            "generated_python_file_name": "world_views_mcrdr",
            "name": "views",
            "case_type": "semantic_world.world.World",
            "case_name": "World"
        }
    },
    "generated_python_file_name": "world_rdr",
    "name": "world",
    "case_type": "semantic_world.world.World",
    "case_name": "World"
}