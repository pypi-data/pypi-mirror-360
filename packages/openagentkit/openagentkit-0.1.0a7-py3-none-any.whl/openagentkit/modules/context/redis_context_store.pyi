from _typeshed import Incomplete
from openagentkit.core.exceptions import OperationNotAllowedError as OperationNotAllowedError
from openagentkit.core.interfaces.base_context_store import BaseContextStore as BaseContextStore
from openagentkit.core.models.io.context_unit import ContextUnit as ContextUnit
from redis import Redis as Redis
from typing import Any

logger: Incomplete

class RedisContextStore(BaseContextStore):
    def __init__(self, client: Redis, ttl: int | None = None) -> None: ...
    def get_system_message(self, thread_id: str) -> str: ...
    def update_system_message(self, thread_id: str, agent_id: str, system_message: str) -> None: ...
    def init_context(self, thread_id: str, agent_id: str, system_message: str) -> ContextUnit: ...
    def get_context(self, thread_id: str) -> ContextUnit | None: ...
    def get_agent_context(self, agent_id: str) -> dict[str, ContextUnit]: ...
    def add_context(self, thread_id: str, agent_id: str, content: dict[str, Any], system_message: str | None = None) -> ContextUnit: ...
    def extend_context(self, thread_id: str, agent_id: str, content: list[dict[str, Any]], system_message: str | None = None) -> ContextUnit: ...
    def clear_context(self, thread_id: str) -> ContextUnit | None: ...
