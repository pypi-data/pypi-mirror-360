from _typeshed import Incomplete
from typing import Any, Callable, TypeVar, overload

def build_tool_schema(func: Callable[..., Any], name: str, description: str = '') -> dict[str, Any]: ...

class Tool:
    __tool_wrapped__: bool
    schema: Incomplete
    def __init__(self, func: Callable[..., Any] | None = None, *, schema: dict[str, Any] | None = None) -> None: ...
    @classmethod
    def from_decorator(cls, func: Callable[..., Any], *, schema: dict[str, Any]) -> Tool: ...
    def __call__(self, *args: Any, **kwargs: Any) -> Any: ...
T = TypeVar('T', bound=Callable[..., Any])

@overload
def tool(func: T) -> Tool: ...
@overload
def tool(*, description: str = '') -> Callable[[T], Tool]: ...
