from _typeshed import Incomplete
from mcp import ClientSession as ClientSession
from mcp.types import CallToolResult as CallToolResult
from openagentkit.core.exceptions import InvalidToolSchemaError as InvalidToolSchemaError
from openagentkit.core.models.responses import ToolCall as ToolCall, ToolCallFunction as ToolCallFunction, ToolCallMessage as ToolCallMessage, ToolCallResult as ToolCallResult, ToolResponse as ToolResponse
from openagentkit.core.tools.base_tool import Tool as Tool
from openagentkit.core.tools.tool_utils import args_cleaner as args_cleaner
from typing import Any

logger: Incomplete

class ToolHandler:
    tools_map: dict[str, Tool | dict[str, str]] | None
    sessions_map: Incomplete
    mcp_tools_map: Incomplete
    def __init__(self, tools: list[Tool] | None = None, mcp_sessions: dict[str, ClientSession] | None = None, mcp_tools: dict[str, list[str]] | None = None) -> None: ...
    @classmethod
    async def from_mcp(cls, sessions: list[ClientSession], additional_tools: list[Tool] | None = None) -> ToolHandler: ...
    async def load_mcp_tools(self, session: ClientSession): ...
    @property
    def tools(self): ...
    @tools.setter
    def tools(self, tools: list[Tool]): ...
    def parse_tools_args(self, tool_calls_dict: list[dict[str, Any]]) -> list[ToolCall]: ...
    async def async_handle_tool_request(self, tool_calls: list[ToolCall]) -> ToolResponse: ...
    def handle_tool_request(self, tool_calls: list[ToolCall]) -> ToolResponse: ...
