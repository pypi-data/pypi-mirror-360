from .base_samplers import Sampler as Sampler
from .registry import SamplerRegistry as SamplerRegistry
from typing import Any

class CubeSampler(Sampler):
    def get_tangent_points(self) -> list[tuple[float, float]]: ...

class IcosahedronSampler(Sampler):
    def __init__(self, subdivisions: int = 0, **kwargs: Any) -> None: ...
    def get_tangent_points(self) -> list[tuple[float, float]]: ...

class FibonacciSampler(Sampler):
    def __init__(self, n_points: int = 10, **kwargs: Any) -> None: ...
    def get_tangent_points(self) -> list[tuple[float, float]]: ...

class SpiralSampler(Sampler):
    def __init__(self, n_points: int = 100, **kwargs) -> None: ...
    def get_tangent_points(self) -> list[tuple[float, float]]: ...

class BlueNoiseSampler(Sampler):
    def __init__(self, n_points: int = 100, **kwargs) -> None: ...
    def get_tangent_points(self) -> list[tuple[float, float]]: ...
