import numpy as np
from .spherical_data import SphericalData as SphericalData
from _typeshed import Incomplete

class GnomonicFace(SphericalData):
    fov: Incomplete
    projection: Incomplete
    def __init__(self, data: np.ndarray | dict, lat: float, lon: float, fov: float, **projection_kwargs) -> None: ...
    def attach_projection(self, name: str, lat: float, lon: float, fov: float, **kwargs): ...
    def to_equirectangular(self, eq_shape: tuple[int, int], lat: float | None = None, lon: float | None = None, fov: float | None = None) -> EquirectangularImage: ...
    def to_pcd(self, model: Incomplete | None = None, depth: np.ndarray = None, grad_threshold: float = 0.1, min_radius: float = 0.0, max_radius: float = 10.0, inter_mask: np.ndarray = None): ...
    def clone(self) -> GnomonicFace: ...
    def show(self) -> None: ...
