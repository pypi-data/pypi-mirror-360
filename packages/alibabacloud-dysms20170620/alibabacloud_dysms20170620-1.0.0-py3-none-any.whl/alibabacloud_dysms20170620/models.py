# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel
from typing import Dict, List


class AddDomainRequest(TeaModel):
    def __init__(
        self,
        domain: str = None,
        owner_id: int = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.domain = domain
        self.owner_id = owner_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class AddDomainResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class AddDomainResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddDomainResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddDomainResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddDomainNewRequest(TeaModel):
    def __init__(
        self,
        domain: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.domain = domain
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class AddDomainNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class AddDomainNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: AddDomainNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = AddDomainNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ApplyExportSmsSendRecordNewRequest(TeaModel):
    def __init__(
        self,
        biz_type: int = None,
        end_date: str = None,
        error_code: str = None,
        owner_id: int = None,
        phone_num: str = None,
        prod_code: str = None,
        real_time_data_flag: int = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        send_date: str = None,
        send_status: int = None,
        sign_name: str = None,
        start_date: str = None,
        template_code: str = None,
    ):
        self.biz_type = biz_type
        self.end_date = end_date
        self.error_code = error_code
        self.owner_id = owner_id
        self.phone_num = phone_num
        self.prod_code = prod_code
        self.real_time_data_flag = real_time_data_flag
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.send_date = send_date
        self.send_status = send_status
        self.sign_name = sign_name
        self.start_date = start_date
        self.template_code = template_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.phone_num is not None:
            result['PhoneNum'] = self.phone_num
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.real_time_data_flag is not None:
            result['RealTimeDataFlag'] = self.real_time_data_flag
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.send_date is not None:
            result['SendDate'] = self.send_date
        if self.send_status is not None:
            result['SendStatus'] = self.send_status
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.start_date is not None:
            result['StartDate'] = self.start_date
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PhoneNum') is not None:
            self.phone_num = m.get('PhoneNum')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('RealTimeDataFlag') is not None:
            self.real_time_data_flag = m.get('RealTimeDataFlag')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SendDate') is not None:
            self.send_date = m.get('SendDate')
        if m.get('SendStatus') is not None:
            self.send_status = m.get('SendStatus')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('StartDate') is not None:
            self.start_date = m.get('StartDate')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        return self


class ApplyExportSmsSendRecordNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class ApplyExportSmsSendRecordNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ApplyExportSmsSendRecordNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ApplyExportSmsSendRecordNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BatchCreateSmsSignRequestColumnIndexMappingRule(TeaModel):
    def __init__(
        self,
        admin_identified_number: int = None,
        admin_name: int = None,
        company_name: int = None,
        legal_person_identified_number: int = None,
        legal_person_name: int = None,
        organization_code: int = None,
        remark: int = None,
        scene_description: int = None,
        signature_name: int = None,
        signature_source: int = None,
        template_content: int = None,
    ):
        self.admin_identified_number = admin_identified_number
        self.admin_name = admin_name
        self.company_name = company_name
        self.legal_person_identified_number = legal_person_identified_number
        self.legal_person_name = legal_person_name
        self.organization_code = organization_code
        self.remark = remark
        self.scene_description = scene_description
        self.signature_name = signature_name
        self.signature_source = signature_source
        self.template_content = template_content

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.admin_identified_number is not None:
            result['AdminIdentifiedNumber'] = self.admin_identified_number
        if self.admin_name is not None:
            result['AdminName'] = self.admin_name
        if self.company_name is not None:
            result['CompanyName'] = self.company_name
        if self.legal_person_identified_number is not None:
            result['LegalPersonIdentifiedNumber'] = self.legal_person_identified_number
        if self.legal_person_name is not None:
            result['LegalPersonName'] = self.legal_person_name
        if self.organization_code is not None:
            result['OrganizationCode'] = self.organization_code
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.scene_description is not None:
            result['SceneDescription'] = self.scene_description
        if self.signature_name is not None:
            result['SignatureName'] = self.signature_name
        if self.signature_source is not None:
            result['SignatureSource'] = self.signature_source
        if self.template_content is not None:
            result['TemplateContent'] = self.template_content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AdminIdentifiedNumber') is not None:
            self.admin_identified_number = m.get('AdminIdentifiedNumber')
        if m.get('AdminName') is not None:
            self.admin_name = m.get('AdminName')
        if m.get('CompanyName') is not None:
            self.company_name = m.get('CompanyName')
        if m.get('LegalPersonIdentifiedNumber') is not None:
            self.legal_person_identified_number = m.get('LegalPersonIdentifiedNumber')
        if m.get('LegalPersonName') is not None:
            self.legal_person_name = m.get('LegalPersonName')
        if m.get('OrganizationCode') is not None:
            self.organization_code = m.get('OrganizationCode')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('SceneDescription') is not None:
            self.scene_description = m.get('SceneDescription')
        if m.get('SignatureName') is not None:
            self.signature_name = m.get('SignatureName')
        if m.get('SignatureSource') is not None:
            self.signature_source = m.get('SignatureSource')
        if m.get('TemplateContent') is not None:
            self.template_content = m.get('TemplateContent')
        return self


class BatchCreateSmsSignRequest(TeaModel):
    def __init__(
        self,
        column_index_mapping_rule: BatchCreateSmsSignRequestColumnIndexMappingRule = None,
        extend_message: str = None,
        file_name: str = None,
        more_data: List[str] = None,
        operation_type: int = None,
        oss_keys: str = None,
        owner_id: int = None,
        prod_code: str = None,
        remark: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        scene_type: int = None,
        service_type: int = None,
        sign_oss_key: str = None,
        user_view_file_name: str = None,
    ):
        self.column_index_mapping_rule = column_index_mapping_rule
        self.extend_message = extend_message
        self.file_name = file_name
        self.more_data = more_data
        self.operation_type = operation_type
        self.oss_keys = oss_keys
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.remark = remark
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.scene_type = scene_type
        self.service_type = service_type
        # This parameter is required.
        self.sign_oss_key = sign_oss_key
        self.user_view_file_name = user_view_file_name

    def validate(self):
        if self.column_index_mapping_rule:
            self.column_index_mapping_rule.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.column_index_mapping_rule is not None:
            result['ColumnIndexMappingRule'] = self.column_index_mapping_rule.to_map()
        if self.extend_message is not None:
            result['ExtendMessage'] = self.extend_message
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.more_data is not None:
            result['MoreData'] = self.more_data
        if self.operation_type is not None:
            result['OperationType'] = self.operation_type
        if self.oss_keys is not None:
            result['OssKeys'] = self.oss_keys
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        if self.sign_oss_key is not None:
            result['SignOssKey'] = self.sign_oss_key
        if self.user_view_file_name is not None:
            result['UserViewFileName'] = self.user_view_file_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ColumnIndexMappingRule') is not None:
            temp_model = BatchCreateSmsSignRequestColumnIndexMappingRule()
            self.column_index_mapping_rule = temp_model.from_map(m['ColumnIndexMappingRule'])
        if m.get('ExtendMessage') is not None:
            self.extend_message = m.get('ExtendMessage')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('MoreData') is not None:
            self.more_data = m.get('MoreData')
        if m.get('OperationType') is not None:
            self.operation_type = m.get('OperationType')
        if m.get('OssKeys') is not None:
            self.oss_keys = m.get('OssKeys')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        if m.get('SignOssKey') is not None:
            self.sign_oss_key = m.get('SignOssKey')
        if m.get('UserViewFileName') is not None:
            self.user_view_file_name = m.get('UserViewFileName')
        return self


class BatchCreateSmsSignShrinkRequest(TeaModel):
    def __init__(
        self,
        column_index_mapping_rule_shrink: str = None,
        extend_message: str = None,
        file_name: str = None,
        more_data_shrink: str = None,
        operation_type: int = None,
        oss_keys: str = None,
        owner_id: int = None,
        prod_code: str = None,
        remark: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        scene_type: int = None,
        service_type: int = None,
        sign_oss_key: str = None,
        user_view_file_name: str = None,
    ):
        self.column_index_mapping_rule_shrink = column_index_mapping_rule_shrink
        self.extend_message = extend_message
        self.file_name = file_name
        self.more_data_shrink = more_data_shrink
        self.operation_type = operation_type
        self.oss_keys = oss_keys
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.remark = remark
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.scene_type = scene_type
        self.service_type = service_type
        # This parameter is required.
        self.sign_oss_key = sign_oss_key
        self.user_view_file_name = user_view_file_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.column_index_mapping_rule_shrink is not None:
            result['ColumnIndexMappingRule'] = self.column_index_mapping_rule_shrink
        if self.extend_message is not None:
            result['ExtendMessage'] = self.extend_message
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.more_data_shrink is not None:
            result['MoreData'] = self.more_data_shrink
        if self.operation_type is not None:
            result['OperationType'] = self.operation_type
        if self.oss_keys is not None:
            result['OssKeys'] = self.oss_keys
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        if self.sign_oss_key is not None:
            result['SignOssKey'] = self.sign_oss_key
        if self.user_view_file_name is not None:
            result['UserViewFileName'] = self.user_view_file_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ColumnIndexMappingRule') is not None:
            self.column_index_mapping_rule_shrink = m.get('ColumnIndexMappingRule')
        if m.get('ExtendMessage') is not None:
            self.extend_message = m.get('ExtendMessage')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('MoreData') is not None:
            self.more_data_shrink = m.get('MoreData')
        if m.get('OperationType') is not None:
            self.operation_type = m.get('OperationType')
        if m.get('OssKeys') is not None:
            self.oss_keys = m.get('OssKeys')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        if m.get('SignOssKey') is not None:
            self.sign_oss_key = m.get('SignOssKey')
        if m.get('UserViewFileName') is not None:
            self.user_view_file_name = m.get('UserViewFileName')
        return self


class BatchCreateSmsSignResponseBodyData(TeaModel):
    def __init__(
        self,
        applied_num: int = None,
        available_num: int = None,
        batch_create_sms_sign_result: str = None,
    ):
        self.applied_num = applied_num
        self.available_num = available_num
        self.batch_create_sms_sign_result = batch_create_sms_sign_result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.applied_num is not None:
            result['AppliedNum'] = self.applied_num
        if self.available_num is not None:
            result['AvailableNum'] = self.available_num
        if self.batch_create_sms_sign_result is not None:
            result['BatchCreateSmsSignResult'] = self.batch_create_sms_sign_result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AppliedNum') is not None:
            self.applied_num = m.get('AppliedNum')
        if m.get('AvailableNum') is not None:
            self.available_num = m.get('AvailableNum')
        if m.get('BatchCreateSmsSignResult') is not None:
            self.batch_create_sms_sign_result = m.get('BatchCreateSmsSignResult')
        return self


class BatchCreateSmsSignResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: BatchCreateSmsSignResponseBodyData = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = BatchCreateSmsSignResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class BatchCreateSmsSignResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: BatchCreateSmsSignResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = BatchCreateSmsSignResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BatchDeleteExportSendRecordNewRequest(TeaModel):
    def __init__(
        self,
        ids: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.ids = ids
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids is not None:
            result['Ids'] = self.ids
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ids') is not None:
            self.ids = m.get('Ids')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class BatchDeleteExportSendRecordNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class BatchDeleteExportSendRecordNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: BatchDeleteExportSendRecordNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = BatchDeleteExportSendRecordNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class BatchDeleteTaskNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        task_ids: str = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.task_ids = task_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.task_ids is not None:
            result['TaskIds'] = self.task_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TaskIds') is not None:
            self.task_ids = m.get('TaskIds')
        return self


class BatchDeleteTaskNewResponseBody(TeaModel):
    def __init__(
        self,
        fail_list: List[str] = None,
        request_id: str = None,
        success_list: List[str] = None,
    ):
        self.fail_list = fail_list
        self.request_id = request_id
        self.success_list = success_list

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fail_list is not None:
            result['FailList'] = self.fail_list
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success_list is not None:
            result['SuccessList'] = self.success_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FailList') is not None:
            self.fail_list = m.get('FailList')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SuccessList') is not None:
            self.success_list = m.get('SuccessList')
        return self


class BatchDeleteTaskNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: BatchDeleteTaskNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = BatchDeleteTaskNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CalculateSmsLengthNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        sms_content: str = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.sms_content = sms_content

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.sms_content is not None:
            result['SmsContent'] = self.sms_content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SmsContent') is not None:
            self.sms_content = m.get('SmsContent')
        return self


class CalculateSmsLengthNewResponseBody(TeaModel):
    def __init__(
        self,
        length: int = None,
        number: int = None,
        request_id: str = None,
    ):
        self.length = length
        self.number = number
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.length is not None:
            result['Length'] = self.length
        if self.number is not None:
            result['Number'] = self.number
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Length') is not None:
            self.length = m.get('Length')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CalculateSmsLengthNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CalculateSmsLengthNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CalculateSmsLengthNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CancelSmsSignRequest(TeaModel):
    def __init__(
        self,
        order_id: str = None,
        owner_id: int = None,
        prod_code: str = None,
        qualification_id: int = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        signature_code: str = None,
        signature_id: int = None,
    ):
        self.order_id = order_id
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.qualification_id = qualification_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.signature_code = signature_code
        self.signature_id = signature_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.qualification_id is not None:
            result['QualificationId'] = self.qualification_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.signature_code is not None:
            result['SignatureCode'] = self.signature_code
        if self.signature_id is not None:
            result['SignatureId'] = self.signature_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('QualificationId') is not None:
            self.qualification_id = m.get('QualificationId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SignatureCode') is not None:
            self.signature_code = m.get('SignatureCode')
        if m.get('SignatureId') is not None:
            self.signature_id = m.get('SignatureId')
        return self


class CancelSmsSignResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class CancelSmsSignResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CancelSmsSignResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CancelSmsSignResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CancelSmsTemplateRequest(TeaModel):
    def __init__(
        self,
        order_id: int = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        template_code: str = None,
    ):
        self.order_id = order_id
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.template_code = template_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        return self


class CancelSmsTemplateResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CancelSmsTemplateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CancelSmsTemplateResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CancelSmsTemplateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CancelSmsTemplateNewRequest(TeaModel):
    def __init__(
        self,
        intelligent_approval: bool = None,
        order_id: int = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        template_code: str = None,
    ):
        self.intelligent_approval = intelligent_approval
        self.order_id = order_id
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.template_code = template_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.intelligent_approval is not None:
            result['IntelligentApproval'] = self.intelligent_approval
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IntelligentApproval') is not None:
            self.intelligent_approval = m.get('IntelligentApproval')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        return self


class CancelSmsTemplateNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class CancelSmsTemplateNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CancelSmsTemplateNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CancelSmsTemplateNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CheckSmsSignNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CheckSmsSignNewResponseBody(TeaModel):
    def __init__(
        self,
        common: bool = None,
        request_id: str = None,
        verification: bool = None,
    ):
        self.common = common
        self.request_id = request_id
        self.verification = verification

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.common is not None:
            result['Common'] = self.common
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.verification is not None:
            result['Verification'] = self.verification
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Common') is not None:
            self.common = m.get('Common')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Verification') is not None:
            self.verification = m.get('Verification')
        return self


class CheckSmsSignNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CheckSmsSignNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CheckSmsSignNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAlicomProductRequest(TeaModel):
    def __init__(
        self,
        bus_offer: int = None,
        bus_offers: str = None,
        owner_id: int = None,
        prod_code: str = None,
        prod_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.bus_offer = bus_offer
        self.bus_offers = bus_offers
        self.owner_id = owner_id
        self.prod_code = prod_code
        # This parameter is required.
        self.prod_id = prod_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bus_offer is not None:
            result['BusOffer'] = self.bus_offer
        if self.bus_offers is not None:
            result['BusOffers'] = self.bus_offers
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_id is not None:
            result['ProdId'] = self.prod_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BusOffer') is not None:
            self.bus_offer = m.get('BusOffer')
        if m.get('BusOffers') is not None:
            self.bus_offers = m.get('BusOffers')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdId') is not None:
            self.prod_id = m.get('ProdId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CreateAlicomProductResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreateAlicomProductResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateAlicomProductResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAlicomProductResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateAuthorizationRequest(TeaModel):
    def __init__(
        self,
        authorize_code: str = None,
        owner_id: int = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.authorize_code = authorize_code
        self.owner_id = owner_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.authorize_code is not None:
            result['AuthorizeCode'] = self.authorize_code
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuthorizeCode') is not None:
            self.authorize_code = m.get('AuthorizeCode')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CreateAuthorizationResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        result: str = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class CreateAuthorizationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateAuthorizationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateAuthorizationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateCardMessageCallbackRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        callback_url: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        # This parameter is required.
        self.biz_type = biz_type
        # This parameter is required.
        self.callback_url = callback_url
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.callback_url is not None:
            result['CallbackUrl'] = self.callback_url
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('CallbackUrl') is not None:
            self.callback_url = m.get('CallbackUrl')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CreateCardMessageCallbackResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        test_fail_code: str = None,
        test_response: str = None,
        test_success: bool = None,
    ):
        self.request_id = request_id
        self.test_fail_code = test_fail_code
        self.test_response = test_response
        self.test_success = test_success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.test_fail_code is not None:
            result['TestFailCode'] = self.test_fail_code
        if self.test_response is not None:
            result['TestResponse'] = self.test_response
        if self.test_success is not None:
            result['TestSuccess'] = self.test_success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TestFailCode') is not None:
            self.test_fail_code = m.get('TestFailCode')
        if m.get('TestResponse') is not None:
            self.test_response = m.get('TestResponse')
        if m.get('TestSuccess') is not None:
            self.test_success = m.get('TestSuccess')
        return self


class CreateCardMessageCallbackResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateCardMessageCallbackResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateCardMessageCallbackResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateCardMessageQueueRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        queue_type: str = None,
        region: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        # This parameter is required.
        self.queue_type = queue_type
        self.region = region
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.queue_type is not None:
            result['QueueType'] = self.queue_type
        if self.region is not None:
            result['Region'] = self.region
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('QueueType') is not None:
            self.queue_type = m.get('QueueType')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CreateCardMessageQueueResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class CreateCardMessageQueueResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateCardMessageQueueResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateCardMessageQueueResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateDigitalSmsTemplateNewRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        content_oss_keys: str = None,
        owner_id: int = None,
        prod_code: str = None,
        remark: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        template_content: str = None,
        template_name: str = None,
    ):
        self.biz_type = biz_type
        self.content_oss_keys = content_oss_keys
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.remark = remark
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.template_content = template_content
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.content_oss_keys is not None:
            result['ContentOssKeys'] = self.content_oss_keys
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.template_content is not None:
            result['TemplateContent'] = self.template_content
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('ContentOssKeys') is not None:
            self.content_oss_keys = m.get('ContentOssKeys')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TemplateContent') is not None:
            self.template_content = m.get('TemplateContent')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class CreateDigitalSmsTemplateNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class CreateDigitalSmsTemplateNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateDigitalSmsTemplateNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateDigitalSmsTemplateNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateFileByBizRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CreateFileByBizResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreateFileByBizResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateFileByBizResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateFileByBizResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateFlowLimitRequest(TeaModel):
    def __init__(
        self,
        daily_limit: str = None,
        hour_limit: str = None,
        minute_limit: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.daily_limit = daily_limit
        self.hour_limit = hour_limit
        self.minute_limit = minute_limit
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.daily_limit is not None:
            result['DailyLimit'] = self.daily_limit
        if self.hour_limit is not None:
            result['HourLimit'] = self.hour_limit
        if self.minute_limit is not None:
            result['MinuteLimit'] = self.minute_limit
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DailyLimit') is not None:
            self.daily_limit = m.get('DailyLimit')
        if m.get('HourLimit') is not None:
            self.hour_limit = m.get('HourLimit')
        if m.get('MinuteLimit') is not None:
            self.minute_limit = m.get('MinuteLimit')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CreateFlowLimitResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreateFlowLimitResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateFlowLimitResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateFlowLimitResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateFlowLimitNewRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        daily_limit: str = None,
        hour_limit: str = None,
        minute_limit: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.biz_type = biz_type
        self.daily_limit = daily_limit
        self.hour_limit = hour_limit
        self.minute_limit = minute_limit
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.daily_limit is not None:
            result['DailyLimit'] = self.daily_limit
        if self.hour_limit is not None:
            result['HourLimit'] = self.hour_limit
        if self.minute_limit is not None:
            result['MinuteLimit'] = self.minute_limit
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('DailyLimit') is not None:
            self.daily_limit = m.get('DailyLimit')
        if m.get('HourLimit') is not None:
            self.hour_limit = m.get('HourLimit')
        if m.get('MinuteLimit') is not None:
            self.minute_limit = m.get('MinuteLimit')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CreateFlowLimitNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class CreateFlowLimitNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateFlowLimitNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateFlowLimitNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMessageCallbackNewRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        callback_url: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        # This parameter is required.
        self.biz_type = biz_type
        # This parameter is required.
        self.callback_url = callback_url
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.callback_url is not None:
            result['CallbackUrl'] = self.callback_url
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('CallbackUrl') is not None:
            self.callback_url = m.get('CallbackUrl')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CreateMessageCallbackNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        test_fail_code: str = None,
        test_response: str = None,
        test_success: bool = None,
    ):
        self.request_id = request_id
        self.test_fail_code = test_fail_code
        self.test_response = test_response
        self.test_success = test_success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.test_fail_code is not None:
            result['TestFailCode'] = self.test_fail_code
        if self.test_response is not None:
            result['TestResponse'] = self.test_response
        if self.test_success is not None:
            result['TestSuccess'] = self.test_success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TestFailCode') is not None:
            self.test_fail_code = m.get('TestFailCode')
        if m.get('TestResponse') is not None:
            self.test_response = m.get('TestResponse')
        if m.get('TestSuccess') is not None:
            self.test_success = m.get('TestSuccess')
        return self


class CreateMessageCallbackNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateMessageCallbackNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMessageCallbackNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMessageCallbackTestNewRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        content: str = None,
        method: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        url: str = None,
    ):
        self.biz_type = biz_type
        self.content = content
        self.method = method
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.url = url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.content is not None:
            result['Content'] = self.content
        if self.method is not None:
            result['Method'] = self.method
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.url is not None:
            result['Url'] = self.url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Method') is not None:
            self.method = m.get('Method')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('Url') is not None:
            self.url = m.get('Url')
        return self


class CreateMessageCallbackTestNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        test_fail_code: str = None,
        test_response: str = None,
        test_success: bool = None,
    ):
        self.request_id = request_id
        self.test_fail_code = test_fail_code
        self.test_response = test_response
        self.test_success = test_success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.test_fail_code is not None:
            result['TestFailCode'] = self.test_fail_code
        if self.test_response is not None:
            result['TestResponse'] = self.test_response
        if self.test_success is not None:
            result['TestSuccess'] = self.test_success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TestFailCode') is not None:
            self.test_fail_code = m.get('TestFailCode')
        if m.get('TestResponse') is not None:
            self.test_response = m.get('TestResponse')
        if m.get('TestSuccess') is not None:
            self.test_success = m.get('TestSuccess')
        return self


class CreateMessageCallbackTestNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateMessageCallbackTestNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMessageCallbackTestNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMessageQueueNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        queue_type: str = None,
        region: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.queue_type = queue_type
        self.region = region
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.queue_type is not None:
            result['QueueType'] = self.queue_type
        if self.region is not None:
            result['Region'] = self.region
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('QueueType') is not None:
            self.queue_type = m.get('QueueType')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CreateMessageQueueNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class CreateMessageQueueNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateMessageQueueNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateMessageQueueNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreatePhoneWhiteListRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        phone_numbers: str = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.phone_numbers = phone_numbers
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PhoneNumbers') is not None:
            self.phone_numbers = m.get('PhoneNumbers')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CreatePhoneWhiteListResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreatePhoneWhiteListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreatePhoneWhiteListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreatePhoneWhiteListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreatePhoneWhiteListNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        phone_numbers: str = None,
        prod_code: str = None,
        remarks: List[str] = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.phone_numbers = phone_numbers
        self.prod_code = prod_code
        self.remarks = remarks
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.remarks is not None:
            result['Remarks'] = self.remarks
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PhoneNumbers') is not None:
            self.phone_numbers = m.get('PhoneNumbers')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('Remarks') is not None:
            self.remarks = m.get('Remarks')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CreatePhoneWhiteListNewShrinkRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        phone_numbers: str = None,
        prod_code: str = None,
        remarks_shrink: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.phone_numbers = phone_numbers
        self.prod_code = prod_code
        self.remarks_shrink = remarks_shrink
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.remarks_shrink is not None:
            result['Remarks'] = self.remarks_shrink
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PhoneNumbers') is not None:
            self.phone_numbers = m.get('PhoneNumbers')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('Remarks') is not None:
            self.remarks_shrink = m.get('Remarks')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CreatePhoneWhiteListNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class CreatePhoneWhiteListNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreatePhoneWhiteListNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreatePhoneWhiteListNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreatePkgThresholdRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        package_warning_limit: str = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.package_warning_limit = package_warning_limit
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.package_warning_limit is not None:
            result['PackageWarningLimit'] = self.package_warning_limit
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PackageWarningLimit') is not None:
            self.package_warning_limit = m.get('PackageWarningLimit')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CreatePkgThresholdResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreatePkgThresholdResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreatePkgThresholdResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreatePkgThresholdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreatePkgThresholdNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        package_warning_limit: str = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.package_warning_limit = package_warning_limit
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.package_warning_limit is not None:
            result['PackageWarningLimit'] = self.package_warning_limit
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PackageWarningLimit') is not None:
            self.package_warning_limit = m.get('PackageWarningLimit')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CreatePkgThresholdNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class CreatePkgThresholdNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreatePkgThresholdNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreatePkgThresholdNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreatePrevLimitNewRequest(TeaModel):
    def __init__(
        self,
        hour_limit: int = None,
        increase_rate: int = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        success_rate: int = None,
    ):
        # This parameter is required.
        self.hour_limit = hour_limit
        # This parameter is required.
        self.increase_rate = increase_rate
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.success_rate = success_rate

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hour_limit is not None:
            result['HourLimit'] = self.hour_limit
        if self.increase_rate is not None:
            result['IncreaseRate'] = self.increase_rate
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.success_rate is not None:
            result['SuccessRate'] = self.success_rate
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('HourLimit') is not None:
            self.hour_limit = m.get('HourLimit')
        if m.get('IncreaseRate') is not None:
            self.increase_rate = m.get('IncreaseRate')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SuccessRate') is not None:
            self.success_rate = m.get('SuccessRate')
        return self


class CreatePrevLimitNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class CreatePrevLimitNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreatePrevLimitNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreatePrevLimitNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateProductRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        prod_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        # This parameter is required.
        self.prod_id = prod_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_id is not None:
            result['ProdId'] = self.prod_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdId') is not None:
            self.prod_id = m.get('ProdId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CreateProductResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: bool = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreateProductResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateProductResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateProductResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateProductNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        prod_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        # This parameter is required.
        self.prod_id = prod_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_id is not None:
            result['ProdId'] = self.prod_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdId') is not None:
            self.prod_id = m.get('ProdId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CreateProductNewResponseBody(TeaModel):
    def __init__(
        self,
        open_result: bool = None,
        request_id: str = None,
    ):
        self.open_result = open_result
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.open_result is not None:
            result['OpenResult'] = self.open_result
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OpenResult') is not None:
            self.open_result = m.get('OpenResult')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateProductNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateProductNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateProductNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateShortUrlNewRequest(TeaModel):
    def __init__(
        self,
        effect_day: int = None,
        event_name: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        source_url: str = None,
    ):
        self.effect_day = effect_day
        self.event_name = event_name
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.source_url = source_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.effect_day is not None:
            result['EffectDay'] = self.effect_day
        if self.event_name is not None:
            result['EventName'] = self.event_name
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.source_url is not None:
            result['SourceUrl'] = self.source_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EffectDay') is not None:
            self.effect_day = m.get('EffectDay')
        if m.get('EventName') is not None:
            self.event_name = m.get('EventName')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SourceUrl') is not None:
            self.source_url = m.get('SourceUrl')
        return self


class CreateShortUrlNewResponseBody(TeaModel):
    def __init__(
        self,
        event_name: str = None,
        gmt_create_time: str = None,
        gmt_invalid_time: str = None,
        id: str = None,
        request_id: str = None,
        short_url: str = None,
        source_url: str = None,
    ):
        self.event_name = event_name
        self.gmt_create_time = gmt_create_time
        self.gmt_invalid_time = gmt_invalid_time
        self.id = id
        self.request_id = request_id
        self.short_url = short_url
        self.source_url = source_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_name is not None:
            result['EventName'] = self.event_name
        if self.gmt_create_time is not None:
            result['GmtCreateTime'] = self.gmt_create_time
        if self.gmt_invalid_time is not None:
            result['GmtInvalidTime'] = self.gmt_invalid_time
        if self.id is not None:
            result['Id'] = self.id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.short_url is not None:
            result['ShortUrl'] = self.short_url
        if self.source_url is not None:
            result['SourceUrl'] = self.source_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EventName') is not None:
            self.event_name = m.get('EventName')
        if m.get('GmtCreateTime') is not None:
            self.gmt_create_time = m.get('GmtCreateTime')
        if m.get('GmtInvalidTime') is not None:
            self.gmt_invalid_time = m.get('GmtInvalidTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ShortUrl') is not None:
            self.short_url = m.get('ShortUrl')
        if m.get('SourceUrl') is not None:
            self.source_url = m.get('SourceUrl')
        return self


class CreateShortUrlNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateShortUrlNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateShortUrlNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSmsDetectTaskNewRequest(TeaModel):
    def __init__(
        self,
        check: bool = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        sign_name: str = None,
        sms_content: str = None,
        template_code: str = None,
        template_param: str = None,
    ):
        # This parameter is required.
        self.check = check
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.sign_name = sign_name
        # This parameter is required.
        self.sms_content = sms_content
        # This parameter is required.
        self.template_code = template_code
        # This parameter is required.
        self.template_param = template_param

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.check is not None:
            result['Check'] = self.check
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.sms_content is not None:
            result['SmsContent'] = self.sms_content
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_param is not None:
            result['TemplateParam'] = self.template_param
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Check') is not None:
            self.check = m.get('Check')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('SmsContent') is not None:
            self.sms_content = m.get('SmsContent')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateParam') is not None:
            self.template_param = m.get('TemplateParam')
        return self


class CreateSmsDetectTaskNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class CreateSmsDetectTaskNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateSmsDetectTaskNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSmsDetectTaskNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSmsInternalApplyRequest(TeaModel):
    def __init__(
        self,
        app_download_link: str = None,
        country: str = None,
        industry: str = None,
        owner_id: int = None,
        page_link: str = None,
        prod_code: str = None,
        remark: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        template_name: str = None,
    ):
        self.app_download_link = app_download_link
        self.country = country
        self.industry = industry
        self.owner_id = owner_id
        self.page_link = page_link
        self.prod_code = prod_code
        self.remark = remark
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.app_download_link is not None:
            result['AppDownloadLink'] = self.app_download_link
        if self.country is not None:
            result['Country'] = self.country
        if self.industry is not None:
            result['Industry'] = self.industry
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_link is not None:
            result['PageLink'] = self.page_link
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AppDownloadLink') is not None:
            self.app_download_link = m.get('AppDownloadLink')
        if m.get('Country') is not None:
            self.country = m.get('Country')
        if m.get('Industry') is not None:
            self.industry = m.get('Industry')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageLink') is not None:
            self.page_link = m.get('PageLink')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class CreateSmsInternalApplyResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreateSmsInternalApplyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateSmsInternalApplyResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSmsInternalApplyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSmsProductForChannelCustRequest(TeaModel):
    def __init__(
        self,
        channel_id: int = None,
        only_check_opened: bool = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.channel_id = channel_id
        self.only_check_opened = only_check_opened
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.channel_id is not None:
            result['ChannelId'] = self.channel_id
        if self.only_check_opened is not None:
            result['OnlyCheckOpened'] = self.only_check_opened
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ChannelId') is not None:
            self.channel_id = m.get('ChannelId')
        if m.get('OnlyCheckOpened') is not None:
            self.only_check_opened = m.get('OnlyCheckOpened')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CreateSmsProductForChannelCustResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreateSmsProductForChannelCustResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateSmsProductForChannelCustResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSmsProductForChannelCustResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSmsSaasTaskRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        client_ip: str = None,
        data_type: str = None,
        order_time: str = None,
        oss_file_name: str = None,
        owner_id: int = None,
        phone_list: str = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        schedule_type: str = None,
        sign_name: str = None,
        sms_content: str = None,
        sms_template_code: str = None,
        task_name: str = None,
        valid_count: str = None,
    ):
        self.biz_type = biz_type
        self.client_ip = client_ip
        self.data_type = data_type
        self.order_time = order_time
        self.oss_file_name = oss_file_name
        self.owner_id = owner_id
        self.phone_list = phone_list
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.schedule_type = schedule_type
        self.sign_name = sign_name
        self.sms_content = sms_content
        self.sms_template_code = sms_template_code
        self.task_name = task_name
        self.valid_count = valid_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.client_ip is not None:
            result['ClientIp'] = self.client_ip
        if self.data_type is not None:
            result['DataType'] = self.data_type
        if self.order_time is not None:
            result['OrderTime'] = self.order_time
        if self.oss_file_name is not None:
            result['OssFileName'] = self.oss_file_name
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.phone_list is not None:
            result['PhoneList'] = self.phone_list
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.schedule_type is not None:
            result['ScheduleType'] = self.schedule_type
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.sms_content is not None:
            result['SmsContent'] = self.sms_content
        if self.sms_template_code is not None:
            result['SmsTemplateCode'] = self.sms_template_code
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.valid_count is not None:
            result['ValidCount'] = self.valid_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('ClientIp') is not None:
            self.client_ip = m.get('ClientIp')
        if m.get('DataType') is not None:
            self.data_type = m.get('DataType')
        if m.get('OrderTime') is not None:
            self.order_time = m.get('OrderTime')
        if m.get('OssFileName') is not None:
            self.oss_file_name = m.get('OssFileName')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PhoneList') is not None:
            self.phone_list = m.get('PhoneList')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ScheduleType') is not None:
            self.schedule_type = m.get('ScheduleType')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('SmsContent') is not None:
            self.sms_content = m.get('SmsContent')
        if m.get('SmsTemplateCode') is not None:
            self.sms_template_code = m.get('SmsTemplateCode')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('ValidCount') is not None:
            self.valid_count = m.get('ValidCount')
        return self


class CreateSmsSaasTaskResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreateSmsSaasTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateSmsSaasTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSmsSaasTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSmsSaasTaskNewRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        data_ability_task_id: str = None,
        data_type: str = None,
        order_time: str = None,
        oss_file_name: str = None,
        owner_id: int = None,
        phone_list: str = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        schedule_type: str = None,
        sign_name: str = None,
        sms_content: str = None,
        sms_template_code: str = None,
        task_name: str = None,
        valid_count: str = None,
    ):
        self.biz_type = biz_type
        self.data_ability_task_id = data_ability_task_id
        self.data_type = data_type
        self.order_time = order_time
        self.oss_file_name = oss_file_name
        self.owner_id = owner_id
        self.phone_list = phone_list
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.schedule_type = schedule_type
        self.sign_name = sign_name
        self.sms_content = sms_content
        self.sms_template_code = sms_template_code
        self.task_name = task_name
        self.valid_count = valid_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.data_ability_task_id is not None:
            result['DataAbilityTaskId'] = self.data_ability_task_id
        if self.data_type is not None:
            result['DataType'] = self.data_type
        if self.order_time is not None:
            result['OrderTime'] = self.order_time
        if self.oss_file_name is not None:
            result['OssFileName'] = self.oss_file_name
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.phone_list is not None:
            result['PhoneList'] = self.phone_list
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.schedule_type is not None:
            result['ScheduleType'] = self.schedule_type
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.sms_content is not None:
            result['SmsContent'] = self.sms_content
        if self.sms_template_code is not None:
            result['SmsTemplateCode'] = self.sms_template_code
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.valid_count is not None:
            result['ValidCount'] = self.valid_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('DataAbilityTaskId') is not None:
            self.data_ability_task_id = m.get('DataAbilityTaskId')
        if m.get('DataType') is not None:
            self.data_type = m.get('DataType')
        if m.get('OrderTime') is not None:
            self.order_time = m.get('OrderTime')
        if m.get('OssFileName') is not None:
            self.oss_file_name = m.get('OssFileName')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PhoneList') is not None:
            self.phone_list = m.get('PhoneList')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ScheduleType') is not None:
            self.schedule_type = m.get('ScheduleType')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('SmsContent') is not None:
            self.sms_content = m.get('SmsContent')
        if m.get('SmsTemplateCode') is not None:
            self.sms_template_code = m.get('SmsTemplateCode')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('ValidCount') is not None:
            self.valid_count = m.get('ValidCount')
        return self


class CreateSmsSaasTaskNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
    ):
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateSmsSaasTaskNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateSmsSaasTaskNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSmsSaasTaskNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSmsSendFailDetailsDownloadRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        prod_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        send_date: str = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.prod_id = prod_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.send_date = send_date

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_id is not None:
            result['ProdId'] = self.prod_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.send_date is not None:
            result['SendDate'] = self.send_date
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdId') is not None:
            self.prod_id = m.get('ProdId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SendDate') is not None:
            self.send_date = m.get('SendDate')
        return self


class CreateSmsSendFailDetailsDownloadResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreateSmsSendFailDetailsDownloadResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateSmsSendFailDetailsDownloadResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSmsSendFailDetailsDownloadResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSmsSignRequest(TeaModel):
    def __init__(
        self,
        extend_message: str = None,
        file_ids: str = None,
        order_id: str = None,
        owner_id: int = None,
        prod_code: str = None,
        remark: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        scene_type: int = None,
        service_type: int = None,
        sign_name: str = None,
    ):
        self.extend_message = extend_message
        self.file_ids = file_ids
        self.order_id = order_id
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.remark = remark
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.scene_type = scene_type
        self.service_type = service_type
        self.sign_name = sign_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.extend_message is not None:
            result['ExtendMessage'] = self.extend_message
        if self.file_ids is not None:
            result['FileIds'] = self.file_ids
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ExtendMessage') is not None:
            self.extend_message = m.get('ExtendMessage')
        if m.get('FileIds') is not None:
            self.file_ids = m.get('FileIds')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        return self


class CreateSmsSignResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreateSmsSignResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateSmsSignResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSmsSignResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSmsSignNewRequest(TeaModel):
    def __init__(
        self,
        application_scene_id: int = None,
        apply_source: str = None,
        authorization: str = None,
        authorization_eff_time: str = None,
        authorization_letter: str = None,
        authorization_letter_audit_pass: bool = None,
        authorization_letter_id: int = None,
        authorization_letter_name: str = None,
        authorization_sign_scope: str = None,
        create_sign_gray: bool = None,
        enable_authorization_letter: bool = None,
        extend_message: str = None,
        file_ids: str = None,
        is_authorization_letter_ocrcomplete: bool = None,
        is_authorization_letter_ocrdiff: bool = None,
        is_sign_scope_ocrdiff: bool = None,
        more_data: List[str] = None,
        order_id: str = None,
        organization_code: str = None,
        oss_keys: str = None,
        owner_id: int = None,
        prod_code: str = None,
        proxy_authorization: str = None,
        qualification_id: int = None,
        qualification_type: int = None,
        qualification_version: int = None,
        remark: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        scene_type: int = None,
        service_type: int = None,
        sign_code: str = None,
        sign_id: str = None,
        sign_name: str = None,
        sign_scope_ocr: str = None,
        sign_upgrade: bool = None,
        third_party: bool = None,
        user_view_file_name: str = None,
    ):
        self.application_scene_id = application_scene_id
        self.apply_source = apply_source
        self.authorization = authorization
        self.authorization_eff_time = authorization_eff_time
        self.authorization_letter = authorization_letter
        self.authorization_letter_audit_pass = authorization_letter_audit_pass
        self.authorization_letter_id = authorization_letter_id
        self.authorization_letter_name = authorization_letter_name
        self.authorization_sign_scope = authorization_sign_scope
        self.create_sign_gray = create_sign_gray
        self.enable_authorization_letter = enable_authorization_letter
        self.extend_message = extend_message
        self.file_ids = file_ids
        self.is_authorization_letter_ocrcomplete = is_authorization_letter_ocrcomplete
        self.is_authorization_letter_ocrdiff = is_authorization_letter_ocrdiff
        self.is_sign_scope_ocrdiff = is_sign_scope_ocrdiff
        self.more_data = more_data
        self.order_id = order_id
        self.organization_code = organization_code
        self.oss_keys = oss_keys
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.proxy_authorization = proxy_authorization
        self.qualification_id = qualification_id
        self.qualification_type = qualification_type
        self.qualification_version = qualification_version
        self.remark = remark
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.scene_type = scene_type
        self.service_type = service_type
        self.sign_code = sign_code
        self.sign_id = sign_id
        self.sign_name = sign_name
        self.sign_scope_ocr = sign_scope_ocr
        self.sign_upgrade = sign_upgrade
        self.third_party = third_party
        self.user_view_file_name = user_view_file_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.application_scene_id is not None:
            result['ApplicationSceneId'] = self.application_scene_id
        if self.apply_source is not None:
            result['ApplySource'] = self.apply_source
        if self.authorization is not None:
            result['Authorization'] = self.authorization
        if self.authorization_eff_time is not None:
            result['AuthorizationEffTime'] = self.authorization_eff_time
        if self.authorization_letter is not None:
            result['AuthorizationLetter'] = self.authorization_letter
        if self.authorization_letter_audit_pass is not None:
            result['AuthorizationLetterAuditPass'] = self.authorization_letter_audit_pass
        if self.authorization_letter_id is not None:
            result['AuthorizationLetterId'] = self.authorization_letter_id
        if self.authorization_letter_name is not None:
            result['AuthorizationLetterName'] = self.authorization_letter_name
        if self.authorization_sign_scope is not None:
            result['AuthorizationSignScope'] = self.authorization_sign_scope
        if self.create_sign_gray is not None:
            result['CreateSignGray'] = self.create_sign_gray
        if self.enable_authorization_letter is not None:
            result['EnableAuthorizationLetter'] = self.enable_authorization_letter
        if self.extend_message is not None:
            result['ExtendMessage'] = self.extend_message
        if self.file_ids is not None:
            result['FileIds'] = self.file_ids
        if self.is_authorization_letter_ocrcomplete is not None:
            result['IsAuthorizationLetterOCRComplete'] = self.is_authorization_letter_ocrcomplete
        if self.is_authorization_letter_ocrdiff is not None:
            result['IsAuthorizationLetterOCRDiff'] = self.is_authorization_letter_ocrdiff
        if self.is_sign_scope_ocrdiff is not None:
            result['IsSignScopeOCRDiff'] = self.is_sign_scope_ocrdiff
        if self.more_data is not None:
            result['MoreData'] = self.more_data
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.organization_code is not None:
            result['OrganizationCode'] = self.organization_code
        if self.oss_keys is not None:
            result['OssKeys'] = self.oss_keys
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_authorization is not None:
            result['ProxyAuthorization'] = self.proxy_authorization
        if self.qualification_id is not None:
            result['QualificationId'] = self.qualification_id
        if self.qualification_type is not None:
            result['QualificationType'] = self.qualification_type
        if self.qualification_version is not None:
            result['QualificationVersion'] = self.qualification_version
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        if self.sign_code is not None:
            result['SignCode'] = self.sign_code
        if self.sign_id is not None:
            result['SignId'] = self.sign_id
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.sign_scope_ocr is not None:
            result['SignScopeOCR'] = self.sign_scope_ocr
        if self.sign_upgrade is not None:
            result['SignUpgrade'] = self.sign_upgrade
        if self.third_party is not None:
            result['ThirdParty'] = self.third_party
        if self.user_view_file_name is not None:
            result['UserViewFileName'] = self.user_view_file_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ApplicationSceneId') is not None:
            self.application_scene_id = m.get('ApplicationSceneId')
        if m.get('ApplySource') is not None:
            self.apply_source = m.get('ApplySource')
        if m.get('Authorization') is not None:
            self.authorization = m.get('Authorization')
        if m.get('AuthorizationEffTime') is not None:
            self.authorization_eff_time = m.get('AuthorizationEffTime')
        if m.get('AuthorizationLetter') is not None:
            self.authorization_letter = m.get('AuthorizationLetter')
        if m.get('AuthorizationLetterAuditPass') is not None:
            self.authorization_letter_audit_pass = m.get('AuthorizationLetterAuditPass')
        if m.get('AuthorizationLetterId') is not None:
            self.authorization_letter_id = m.get('AuthorizationLetterId')
        if m.get('AuthorizationLetterName') is not None:
            self.authorization_letter_name = m.get('AuthorizationLetterName')
        if m.get('AuthorizationSignScope') is not None:
            self.authorization_sign_scope = m.get('AuthorizationSignScope')
        if m.get('CreateSignGray') is not None:
            self.create_sign_gray = m.get('CreateSignGray')
        if m.get('EnableAuthorizationLetter') is not None:
            self.enable_authorization_letter = m.get('EnableAuthorizationLetter')
        if m.get('ExtendMessage') is not None:
            self.extend_message = m.get('ExtendMessage')
        if m.get('FileIds') is not None:
            self.file_ids = m.get('FileIds')
        if m.get('IsAuthorizationLetterOCRComplete') is not None:
            self.is_authorization_letter_ocrcomplete = m.get('IsAuthorizationLetterOCRComplete')
        if m.get('IsAuthorizationLetterOCRDiff') is not None:
            self.is_authorization_letter_ocrdiff = m.get('IsAuthorizationLetterOCRDiff')
        if m.get('IsSignScopeOCRDiff') is not None:
            self.is_sign_scope_ocrdiff = m.get('IsSignScopeOCRDiff')
        if m.get('MoreData') is not None:
            self.more_data = m.get('MoreData')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OrganizationCode') is not None:
            self.organization_code = m.get('OrganizationCode')
        if m.get('OssKeys') is not None:
            self.oss_keys = m.get('OssKeys')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyAuthorization') is not None:
            self.proxy_authorization = m.get('ProxyAuthorization')
        if m.get('QualificationId') is not None:
            self.qualification_id = m.get('QualificationId')
        if m.get('QualificationType') is not None:
            self.qualification_type = m.get('QualificationType')
        if m.get('QualificationVersion') is not None:
            self.qualification_version = m.get('QualificationVersion')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        if m.get('SignCode') is not None:
            self.sign_code = m.get('SignCode')
        if m.get('SignId') is not None:
            self.sign_id = m.get('SignId')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('SignScopeOCR') is not None:
            self.sign_scope_ocr = m.get('SignScopeOCR')
        if m.get('SignUpgrade') is not None:
            self.sign_upgrade = m.get('SignUpgrade')
        if m.get('ThirdParty') is not None:
            self.third_party = m.get('ThirdParty')
        if m.get('UserViewFileName') is not None:
            self.user_view_file_name = m.get('UserViewFileName')
        return self


class CreateSmsSignNewShrinkRequest(TeaModel):
    def __init__(
        self,
        application_scene_id: int = None,
        apply_source: str = None,
        authorization: str = None,
        authorization_eff_time: str = None,
        authorization_letter: str = None,
        authorization_letter_audit_pass: bool = None,
        authorization_letter_id: int = None,
        authorization_letter_name: str = None,
        authorization_sign_scope: str = None,
        create_sign_gray: bool = None,
        enable_authorization_letter: bool = None,
        extend_message: str = None,
        file_ids: str = None,
        is_authorization_letter_ocrcomplete: bool = None,
        is_authorization_letter_ocrdiff: bool = None,
        is_sign_scope_ocrdiff: bool = None,
        more_data_shrink: str = None,
        order_id: str = None,
        organization_code: str = None,
        oss_keys: str = None,
        owner_id: int = None,
        prod_code: str = None,
        proxy_authorization: str = None,
        qualification_id: int = None,
        qualification_type: int = None,
        qualification_version: int = None,
        remark: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        scene_type: int = None,
        service_type: int = None,
        sign_code: str = None,
        sign_id: str = None,
        sign_name: str = None,
        sign_scope_ocr: str = None,
        sign_upgrade: bool = None,
        third_party: bool = None,
        user_view_file_name: str = None,
    ):
        self.application_scene_id = application_scene_id
        self.apply_source = apply_source
        self.authorization = authorization
        self.authorization_eff_time = authorization_eff_time
        self.authorization_letter = authorization_letter
        self.authorization_letter_audit_pass = authorization_letter_audit_pass
        self.authorization_letter_id = authorization_letter_id
        self.authorization_letter_name = authorization_letter_name
        self.authorization_sign_scope = authorization_sign_scope
        self.create_sign_gray = create_sign_gray
        self.enable_authorization_letter = enable_authorization_letter
        self.extend_message = extend_message
        self.file_ids = file_ids
        self.is_authorization_letter_ocrcomplete = is_authorization_letter_ocrcomplete
        self.is_authorization_letter_ocrdiff = is_authorization_letter_ocrdiff
        self.is_sign_scope_ocrdiff = is_sign_scope_ocrdiff
        self.more_data_shrink = more_data_shrink
        self.order_id = order_id
        self.organization_code = organization_code
        self.oss_keys = oss_keys
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.proxy_authorization = proxy_authorization
        self.qualification_id = qualification_id
        self.qualification_type = qualification_type
        self.qualification_version = qualification_version
        self.remark = remark
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.scene_type = scene_type
        self.service_type = service_type
        self.sign_code = sign_code
        self.sign_id = sign_id
        self.sign_name = sign_name
        self.sign_scope_ocr = sign_scope_ocr
        self.sign_upgrade = sign_upgrade
        self.third_party = third_party
        self.user_view_file_name = user_view_file_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.application_scene_id is not None:
            result['ApplicationSceneId'] = self.application_scene_id
        if self.apply_source is not None:
            result['ApplySource'] = self.apply_source
        if self.authorization is not None:
            result['Authorization'] = self.authorization
        if self.authorization_eff_time is not None:
            result['AuthorizationEffTime'] = self.authorization_eff_time
        if self.authorization_letter is not None:
            result['AuthorizationLetter'] = self.authorization_letter
        if self.authorization_letter_audit_pass is not None:
            result['AuthorizationLetterAuditPass'] = self.authorization_letter_audit_pass
        if self.authorization_letter_id is not None:
            result['AuthorizationLetterId'] = self.authorization_letter_id
        if self.authorization_letter_name is not None:
            result['AuthorizationLetterName'] = self.authorization_letter_name
        if self.authorization_sign_scope is not None:
            result['AuthorizationSignScope'] = self.authorization_sign_scope
        if self.create_sign_gray is not None:
            result['CreateSignGray'] = self.create_sign_gray
        if self.enable_authorization_letter is not None:
            result['EnableAuthorizationLetter'] = self.enable_authorization_letter
        if self.extend_message is not None:
            result['ExtendMessage'] = self.extend_message
        if self.file_ids is not None:
            result['FileIds'] = self.file_ids
        if self.is_authorization_letter_ocrcomplete is not None:
            result['IsAuthorizationLetterOCRComplete'] = self.is_authorization_letter_ocrcomplete
        if self.is_authorization_letter_ocrdiff is not None:
            result['IsAuthorizationLetterOCRDiff'] = self.is_authorization_letter_ocrdiff
        if self.is_sign_scope_ocrdiff is not None:
            result['IsSignScopeOCRDiff'] = self.is_sign_scope_ocrdiff
        if self.more_data_shrink is not None:
            result['MoreData'] = self.more_data_shrink
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.organization_code is not None:
            result['OrganizationCode'] = self.organization_code
        if self.oss_keys is not None:
            result['OssKeys'] = self.oss_keys
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.proxy_authorization is not None:
            result['ProxyAuthorization'] = self.proxy_authorization
        if self.qualification_id is not None:
            result['QualificationId'] = self.qualification_id
        if self.qualification_type is not None:
            result['QualificationType'] = self.qualification_type
        if self.qualification_version is not None:
            result['QualificationVersion'] = self.qualification_version
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        if self.sign_code is not None:
            result['SignCode'] = self.sign_code
        if self.sign_id is not None:
            result['SignId'] = self.sign_id
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.sign_scope_ocr is not None:
            result['SignScopeOCR'] = self.sign_scope_ocr
        if self.sign_upgrade is not None:
            result['SignUpgrade'] = self.sign_upgrade
        if self.third_party is not None:
            result['ThirdParty'] = self.third_party
        if self.user_view_file_name is not None:
            result['UserViewFileName'] = self.user_view_file_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ApplicationSceneId') is not None:
            self.application_scene_id = m.get('ApplicationSceneId')
        if m.get('ApplySource') is not None:
            self.apply_source = m.get('ApplySource')
        if m.get('Authorization') is not None:
            self.authorization = m.get('Authorization')
        if m.get('AuthorizationEffTime') is not None:
            self.authorization_eff_time = m.get('AuthorizationEffTime')
        if m.get('AuthorizationLetter') is not None:
            self.authorization_letter = m.get('AuthorizationLetter')
        if m.get('AuthorizationLetterAuditPass') is not None:
            self.authorization_letter_audit_pass = m.get('AuthorizationLetterAuditPass')
        if m.get('AuthorizationLetterId') is not None:
            self.authorization_letter_id = m.get('AuthorizationLetterId')
        if m.get('AuthorizationLetterName') is not None:
            self.authorization_letter_name = m.get('AuthorizationLetterName')
        if m.get('AuthorizationSignScope') is not None:
            self.authorization_sign_scope = m.get('AuthorizationSignScope')
        if m.get('CreateSignGray') is not None:
            self.create_sign_gray = m.get('CreateSignGray')
        if m.get('EnableAuthorizationLetter') is not None:
            self.enable_authorization_letter = m.get('EnableAuthorizationLetter')
        if m.get('ExtendMessage') is not None:
            self.extend_message = m.get('ExtendMessage')
        if m.get('FileIds') is not None:
            self.file_ids = m.get('FileIds')
        if m.get('IsAuthorizationLetterOCRComplete') is not None:
            self.is_authorization_letter_ocrcomplete = m.get('IsAuthorizationLetterOCRComplete')
        if m.get('IsAuthorizationLetterOCRDiff') is not None:
            self.is_authorization_letter_ocrdiff = m.get('IsAuthorizationLetterOCRDiff')
        if m.get('IsSignScopeOCRDiff') is not None:
            self.is_sign_scope_ocrdiff = m.get('IsSignScopeOCRDiff')
        if m.get('MoreData') is not None:
            self.more_data_shrink = m.get('MoreData')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OrganizationCode') is not None:
            self.organization_code = m.get('OrganizationCode')
        if m.get('OssKeys') is not None:
            self.oss_keys = m.get('OssKeys')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProxyAuthorization') is not None:
            self.proxy_authorization = m.get('ProxyAuthorization')
        if m.get('QualificationId') is not None:
            self.qualification_id = m.get('QualificationId')
        if m.get('QualificationType') is not None:
            self.qualification_type = m.get('QualificationType')
        if m.get('QualificationVersion') is not None:
            self.qualification_version = m.get('QualificationVersion')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        if m.get('SignCode') is not None:
            self.sign_code = m.get('SignCode')
        if m.get('SignId') is not None:
            self.sign_id = m.get('SignId')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('SignScopeOCR') is not None:
            self.sign_scope_ocr = m.get('SignScopeOCR')
        if m.get('SignUpgrade') is not None:
            self.sign_upgrade = m.get('SignUpgrade')
        if m.get('ThirdParty') is not None:
            self.third_party = m.get('ThirdParty')
        if m.get('UserViewFileName') is not None:
            self.user_view_file_name = m.get('UserViewFileName')
        return self


class CreateSmsSignNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class CreateSmsSignNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateSmsSignNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSmsSignNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSmsTemplateNewRequest(TeaModel):
    def __init__(
        self,
        ai_template: int = None,
        ai_template_uuid: str = None,
        application_scene_id: int = None,
        apply_source: str = None,
        biz_type: str = None,
        intl_type: int = None,
        more_data: List[str] = None,
        order_id: str = None,
        oss_keys: str = None,
        owner_id: int = None,
        prod_code: str = None,
        product_url: str = None,
        related_sign_name: str = None,
        related_sign_order_id: str = None,
        related_sign_usage_name: str = None,
        remark: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        rmd_template_id: int = None,
        template_code: str = None,
        template_content: str = None,
        template_name: str = None,
        template_rule: str = None,
        user_view_file_name: str = None,
    ):
        self.ai_template = ai_template
        self.ai_template_uuid = ai_template_uuid
        self.application_scene_id = application_scene_id
        self.apply_source = apply_source
        self.biz_type = biz_type
        self.intl_type = intl_type
        self.more_data = more_data
        self.order_id = order_id
        self.oss_keys = oss_keys
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.product_url = product_url
        self.related_sign_name = related_sign_name
        self.related_sign_order_id = related_sign_order_id
        self.related_sign_usage_name = related_sign_usage_name
        self.remark = remark
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.rmd_template_id = rmd_template_id
        self.template_code = template_code
        self.template_content = template_content
        self.template_name = template_name
        self.template_rule = template_rule
        self.user_view_file_name = user_view_file_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ai_template is not None:
            result['AiTemplate'] = self.ai_template
        if self.ai_template_uuid is not None:
            result['AiTemplateUuid'] = self.ai_template_uuid
        if self.application_scene_id is not None:
            result['ApplicationSceneId'] = self.application_scene_id
        if self.apply_source is not None:
            result['ApplySource'] = self.apply_source
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.intl_type is not None:
            result['IntlType'] = self.intl_type
        if self.more_data is not None:
            result['MoreData'] = self.more_data
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.oss_keys is not None:
            result['OssKeys'] = self.oss_keys
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.product_url is not None:
            result['ProductUrl'] = self.product_url
        if self.related_sign_name is not None:
            result['RelatedSignName'] = self.related_sign_name
        if self.related_sign_order_id is not None:
            result['RelatedSignOrderId'] = self.related_sign_order_id
        if self.related_sign_usage_name is not None:
            result['RelatedSignUsageName'] = self.related_sign_usage_name
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.rmd_template_id is not None:
            result['RmdTemplateId'] = self.rmd_template_id
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_content is not None:
            result['TemplateContent'] = self.template_content
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.template_rule is not None:
            result['TemplateRule'] = self.template_rule
        if self.user_view_file_name is not None:
            result['UserViewFileName'] = self.user_view_file_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AiTemplate') is not None:
            self.ai_template = m.get('AiTemplate')
        if m.get('AiTemplateUuid') is not None:
            self.ai_template_uuid = m.get('AiTemplateUuid')
        if m.get('ApplicationSceneId') is not None:
            self.application_scene_id = m.get('ApplicationSceneId')
        if m.get('ApplySource') is not None:
            self.apply_source = m.get('ApplySource')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('IntlType') is not None:
            self.intl_type = m.get('IntlType')
        if m.get('MoreData') is not None:
            self.more_data = m.get('MoreData')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OssKeys') is not None:
            self.oss_keys = m.get('OssKeys')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProductUrl') is not None:
            self.product_url = m.get('ProductUrl')
        if m.get('RelatedSignName') is not None:
            self.related_sign_name = m.get('RelatedSignName')
        if m.get('RelatedSignOrderId') is not None:
            self.related_sign_order_id = m.get('RelatedSignOrderId')
        if m.get('RelatedSignUsageName') is not None:
            self.related_sign_usage_name = m.get('RelatedSignUsageName')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('RmdTemplateId') is not None:
            self.rmd_template_id = m.get('RmdTemplateId')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateContent') is not None:
            self.template_content = m.get('TemplateContent')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('TemplateRule') is not None:
            self.template_rule = m.get('TemplateRule')
        if m.get('UserViewFileName') is not None:
            self.user_view_file_name = m.get('UserViewFileName')
        return self


class CreateSmsTemplateNewShrinkRequest(TeaModel):
    def __init__(
        self,
        ai_template: int = None,
        ai_template_uuid: str = None,
        application_scene_id: int = None,
        apply_source: str = None,
        biz_type: str = None,
        intl_type: int = None,
        more_data_shrink: str = None,
        order_id: str = None,
        oss_keys: str = None,
        owner_id: int = None,
        prod_code: str = None,
        product_url: str = None,
        related_sign_name: str = None,
        related_sign_order_id: str = None,
        related_sign_usage_name: str = None,
        remark: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        rmd_template_id: int = None,
        template_code: str = None,
        template_content: str = None,
        template_name: str = None,
        template_rule: str = None,
        user_view_file_name: str = None,
    ):
        self.ai_template = ai_template
        self.ai_template_uuid = ai_template_uuid
        self.application_scene_id = application_scene_id
        self.apply_source = apply_source
        self.biz_type = biz_type
        self.intl_type = intl_type
        self.more_data_shrink = more_data_shrink
        self.order_id = order_id
        self.oss_keys = oss_keys
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.product_url = product_url
        self.related_sign_name = related_sign_name
        self.related_sign_order_id = related_sign_order_id
        self.related_sign_usage_name = related_sign_usage_name
        self.remark = remark
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.rmd_template_id = rmd_template_id
        self.template_code = template_code
        self.template_content = template_content
        self.template_name = template_name
        self.template_rule = template_rule
        self.user_view_file_name = user_view_file_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ai_template is not None:
            result['AiTemplate'] = self.ai_template
        if self.ai_template_uuid is not None:
            result['AiTemplateUuid'] = self.ai_template_uuid
        if self.application_scene_id is not None:
            result['ApplicationSceneId'] = self.application_scene_id
        if self.apply_source is not None:
            result['ApplySource'] = self.apply_source
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.intl_type is not None:
            result['IntlType'] = self.intl_type
        if self.more_data_shrink is not None:
            result['MoreData'] = self.more_data_shrink
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.oss_keys is not None:
            result['OssKeys'] = self.oss_keys
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.product_url is not None:
            result['ProductUrl'] = self.product_url
        if self.related_sign_name is not None:
            result['RelatedSignName'] = self.related_sign_name
        if self.related_sign_order_id is not None:
            result['RelatedSignOrderId'] = self.related_sign_order_id
        if self.related_sign_usage_name is not None:
            result['RelatedSignUsageName'] = self.related_sign_usage_name
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.rmd_template_id is not None:
            result['RmdTemplateId'] = self.rmd_template_id
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_content is not None:
            result['TemplateContent'] = self.template_content
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.template_rule is not None:
            result['TemplateRule'] = self.template_rule
        if self.user_view_file_name is not None:
            result['UserViewFileName'] = self.user_view_file_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AiTemplate') is not None:
            self.ai_template = m.get('AiTemplate')
        if m.get('AiTemplateUuid') is not None:
            self.ai_template_uuid = m.get('AiTemplateUuid')
        if m.get('ApplicationSceneId') is not None:
            self.application_scene_id = m.get('ApplicationSceneId')
        if m.get('ApplySource') is not None:
            self.apply_source = m.get('ApplySource')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('IntlType') is not None:
            self.intl_type = m.get('IntlType')
        if m.get('MoreData') is not None:
            self.more_data_shrink = m.get('MoreData')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OssKeys') is not None:
            self.oss_keys = m.get('OssKeys')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProductUrl') is not None:
            self.product_url = m.get('ProductUrl')
        if m.get('RelatedSignName') is not None:
            self.related_sign_name = m.get('RelatedSignName')
        if m.get('RelatedSignOrderId') is not None:
            self.related_sign_order_id = m.get('RelatedSignOrderId')
        if m.get('RelatedSignUsageName') is not None:
            self.related_sign_usage_name = m.get('RelatedSignUsageName')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('RmdTemplateId') is not None:
            self.rmd_template_id = m.get('RmdTemplateId')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateContent') is not None:
            self.template_content = m.get('TemplateContent')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('TemplateRule') is not None:
            self.template_rule = m.get('TemplateRule')
        if m.get('UserViewFileName') is not None:
            self.user_view_file_name = m.get('UserViewFileName')
        return self


class CreateSmsTemplateNewResponseBody(TeaModel):
    def __init__(
        self,
        order_id: str = None,
        request_id: str = None,
    ):
        self.order_id = order_id
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class CreateSmsTemplateNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateSmsTemplateNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateSmsTemplateNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateWarningThresholdRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        daily_halt_limit: int = None,
        daily_warning_limit: int = None,
        monthly_halt_limit: int = None,
        monthly_warning_limit: int = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.biz_type = biz_type
        self.daily_halt_limit = daily_halt_limit
        self.daily_warning_limit = daily_warning_limit
        self.monthly_halt_limit = monthly_halt_limit
        self.monthly_warning_limit = monthly_warning_limit
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.daily_halt_limit is not None:
            result['DailyHaltLimit'] = self.daily_halt_limit
        if self.daily_warning_limit is not None:
            result['DailyWarningLimit'] = self.daily_warning_limit
        if self.monthly_halt_limit is not None:
            result['MonthlyHaltLimit'] = self.monthly_halt_limit
        if self.monthly_warning_limit is not None:
            result['MonthlyWarningLimit'] = self.monthly_warning_limit
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('DailyHaltLimit') is not None:
            self.daily_halt_limit = m.get('DailyHaltLimit')
        if m.get('DailyWarningLimit') is not None:
            self.daily_warning_limit = m.get('DailyWarningLimit')
        if m.get('MonthlyHaltLimit') is not None:
            self.monthly_halt_limit = m.get('MonthlyHaltLimit')
        if m.get('MonthlyWarningLimit') is not None:
            self.monthly_warning_limit = m.get('MonthlyWarningLimit')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CreateWarningThresholdResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class CreateWarningThresholdResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateWarningThresholdResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateWarningThresholdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateWarningThresholdNewRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        daily_halt_limit: int = None,
        daily_warning_limit: int = None,
        monthly_halt_limit: int = None,
        monthly_warning_limit: int = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.biz_type = biz_type
        self.daily_halt_limit = daily_halt_limit
        self.daily_warning_limit = daily_warning_limit
        self.monthly_halt_limit = monthly_halt_limit
        self.monthly_warning_limit = monthly_warning_limit
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.daily_halt_limit is not None:
            result['DailyHaltLimit'] = self.daily_halt_limit
        if self.daily_warning_limit is not None:
            result['DailyWarningLimit'] = self.daily_warning_limit
        if self.monthly_halt_limit is not None:
            result['MonthlyHaltLimit'] = self.monthly_halt_limit
        if self.monthly_warning_limit is not None:
            result['MonthlyWarningLimit'] = self.monthly_warning_limit
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('DailyHaltLimit') is not None:
            self.daily_halt_limit = m.get('DailyHaltLimit')
        if m.get('DailyWarningLimit') is not None:
            self.daily_warning_limit = m.get('DailyWarningLimit')
        if m.get('MonthlyHaltLimit') is not None:
            self.monthly_halt_limit = m.get('MonthlyHaltLimit')
        if m.get('MonthlyWarningLimit') is not None:
            self.monthly_warning_limit = m.get('MonthlyWarningLimit')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class CreateWarningThresholdNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class CreateWarningThresholdNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: CreateWarningThresholdNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = CreateWarningThresholdNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DelCardSendExportInfoRequest(TeaModel):
    def __init__(
        self,
        ids: List[int] = None,
    ):
        self.ids = ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids is not None:
            result['Ids'] = self.ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ids') is not None:
            self.ids = m.get('Ids')
        return self


class DelCardSendExportInfoResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        model: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.model = model
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.model is not None:
            result['Model'] = self.model
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DelCardSendExportInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DelCardSendExportInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DelCardSendExportInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteCardMessageCallbackRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        callback_url: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        # This parameter is required.
        self.biz_type = biz_type
        # This parameter is required.
        self.callback_url = callback_url
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.callback_url is not None:
            result['CallbackUrl'] = self.callback_url
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('CallbackUrl') is not None:
            self.callback_url = m.get('CallbackUrl')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class DeleteCardMessageCallbackResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DeleteCardMessageCallbackResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteCardMessageCallbackResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteCardMessageCallbackResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteCardMessageQueueRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        queue_type: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        # This parameter is required.
        self.queue_type = queue_type
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.queue_type is not None:
            result['QueueType'] = self.queue_type
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('QueueType') is not None:
            self.queue_type = m.get('QueueType')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class DeleteCardMessageQueueResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DeleteCardMessageQueueResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteCardMessageQueueResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteCardMessageQueueResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteContactsRequest(TeaModel):
    def __init__(
        self,
        ids: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.ids = ids
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids is not None:
            result['Ids'] = self.ids
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ids') is not None:
            self.ids = m.get('Ids')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class DeleteContactsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DeleteContactsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteContactsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteContactsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteContactsNewRequest(TeaModel):
    def __init__(
        self,
        ids: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.ids = ids
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids is not None:
            result['Ids'] = self.ids
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ids') is not None:
            self.ids = m.get('Ids')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class DeleteContactsNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DeleteContactsNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteContactsNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteContactsNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteDigitalTemplateNewRequest(TeaModel):
    def __init__(
        self,
        audit_state: str = None,
        biz_type: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        template_code: str = None,
        template_name: str = None,
    ):
        self.audit_state = audit_state
        self.biz_type = biz_type
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.template_code = template_code
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class DeleteDigitalTemplateNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DeleteDigitalTemplateNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteDigitalTemplateNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteDigitalTemplateNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMessageCallbackNewRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        # This parameter is required.
        self.biz_type = biz_type
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class DeleteMessageCallbackNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DeleteMessageCallbackNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteMessageCallbackNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteMessageCallbackNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMessageQueueNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        queue_type: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.queue_type = queue_type
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.queue_type is not None:
            result['QueueType'] = self.queue_type
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('QueueType') is not None:
            self.queue_type = m.get('QueueType')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class DeleteMessageQueueNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DeleteMessageQueueNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteMessageQueueNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteMessageQueueNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteOrCanceleTaskRequest(TeaModel):
    def __init__(
        self,
        is_deleted: int = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        status: str = None,
        task_id: int = None,
    ):
        self.is_deleted = is_deleted
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.status = status
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_deleted is not None:
            result['IsDeleted'] = self.is_deleted
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsDeleted') is not None:
            self.is_deleted = m.get('IsDeleted')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DeleteOrCanceleTaskResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DeleteOrCanceleTaskResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteOrCanceleTaskResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteOrCanceleTaskResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteOrCanceleTaskNewRequest(TeaModel):
    def __init__(
        self,
        is_deleted: int = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        status: str = None,
        task_id: int = None,
    ):
        self.is_deleted = is_deleted
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.status = status
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_deleted is not None:
            result['IsDeleted'] = self.is_deleted
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsDeleted') is not None:
            self.is_deleted = m.get('IsDeleted')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DeleteOrCanceleTaskNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: int = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DeleteOrCanceleTaskNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteOrCanceleTaskNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteOrCanceleTaskNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeletePhoneWhiteListRequest(TeaModel):
    def __init__(
        self,
        ids: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        # This parameter is required.
        self.ids = ids
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids is not None:
            result['Ids'] = self.ids
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ids') is not None:
            self.ids = m.get('Ids')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class DeletePhoneWhiteListResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class DeletePhoneWhiteListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeletePhoneWhiteListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeletePhoneWhiteListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeletePhoneWhiteListNewRequest(TeaModel):
    def __init__(
        self,
        ids: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        # This parameter is required.
        self.ids = ids
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids is not None:
            result['Ids'] = self.ids
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ids') is not None:
            self.ids = m.get('Ids')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class DeletePhoneWhiteListNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DeletePhoneWhiteListNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeletePhoneWhiteListNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeletePhoneWhiteListNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteShortUrlNewRequest(TeaModel):
    def __init__(
        self,
        ids: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        # This parameter is required.
        self.ids = ids
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ids is not None:
            result['Ids'] = self.ids
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ids') is not None:
            self.ids = m.get('Ids')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class DeleteShortUrlNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class DeleteShortUrlNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteShortUrlNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteShortUrlNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSmsTemplateNewRequest(TeaModel):
    def __init__(
        self,
        is_sms_sign: bool = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        sms_template_ids: str = None,
    ):
        self.is_sms_sign = is_sms_sign
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.sms_template_ids = sms_template_ids

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_sms_sign is not None:
            result['IsSmsSign'] = self.is_sms_sign
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.sms_template_ids is not None:
            result['SmsTemplateIds'] = self.sms_template_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsSmsSign') is not None:
            self.is_sms_sign = m.get('IsSmsSign')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SmsTemplateIds') is not None:
            self.sms_template_ids = m.get('SmsTemplateIds')
        return self


class DeleteSmsTemplateNewResponseBodyFailList(TeaModel):
    def __init__(
        self,
        fail: List[str] = None,
    ):
        self.fail = fail

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fail is not None:
            result['Fail'] = self.fail
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Fail') is not None:
            self.fail = m.get('Fail')
        return self


class DeleteSmsTemplateNewResponseBodySuccessList(TeaModel):
    def __init__(
        self,
        succes: List[str] = None,
    ):
        self.succes = succes

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.succes is not None:
            result['Succes'] = self.succes
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Succes') is not None:
            self.succes = m.get('Succes')
        return self


class DeleteSmsTemplateNewResponseBody(TeaModel):
    def __init__(
        self,
        fail_list: DeleteSmsTemplateNewResponseBodyFailList = None,
        request_id: str = None,
        success_list: DeleteSmsTemplateNewResponseBodySuccessList = None,
    ):
        self.fail_list = fail_list
        self.request_id = request_id
        self.success_list = success_list

    def validate(self):
        if self.fail_list:
            self.fail_list.validate()
        if self.success_list:
            self.success_list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.fail_list is not None:
            result['FailList'] = self.fail_list.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success_list is not None:
            result['SuccessList'] = self.success_list.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FailList') is not None:
            temp_model = DeleteSmsTemplateNewResponseBodyFailList()
            self.fail_list = temp_model.from_map(m['FailList'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SuccessList') is not None:
            temp_model = DeleteSmsTemplateNewResponseBodySuccessList()
            self.success_list = temp_model.from_map(m['SuccessList'])
        return self


class DeleteSmsTemplateNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: DeleteSmsTemplateNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = DeleteSmsTemplateNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExportCardSmsHistoryRequest(TeaModel):
    def __init__(
        self,
        api_send: int = None,
        card_template_type: str = None,
        gmt_create: str = None,
        receive_state: int = None,
        receiver: str = None,
        render_state: int = None,
        sign_name: str = None,
        tmp_code: str = None,
    ):
        self.api_send = api_send
        self.card_template_type = card_template_type
        # This parameter is required.
        self.gmt_create = gmt_create
        self.receive_state = receive_state
        self.receiver = receiver
        self.render_state = render_state
        self.sign_name = sign_name
        self.tmp_code = tmp_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.api_send is not None:
            result['ApiSend'] = self.api_send
        if self.card_template_type is not None:
            result['CardTemplateType'] = self.card_template_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.receive_state is not None:
            result['ReceiveState'] = self.receive_state
        if self.receiver is not None:
            result['Receiver'] = self.receiver
        if self.render_state is not None:
            result['RenderState'] = self.render_state
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.tmp_code is not None:
            result['TmpCode'] = self.tmp_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ApiSend') is not None:
            self.api_send = m.get('ApiSend')
        if m.get('CardTemplateType') is not None:
            self.card_template_type = m.get('CardTemplateType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('ReceiveState') is not None:
            self.receive_state = m.get('ReceiveState')
        if m.get('Receiver') is not None:
            self.receiver = m.get('Receiver')
        if m.get('RenderState') is not None:
            self.render_state = m.get('RenderState')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('TmpCode') is not None:
            self.tmp_code = m.get('TmpCode')
        return self


class ExportCardSmsHistoryResponseBodyModelRecords(TeaModel):
    def __init__(
        self,
        accept_date: int = None,
        api_send: int = None,
        card_template_type: str = None,
        custom_tmp_code: str = None,
        description: str = None,
        fuu_id: str = None,
        gmt_create: int = None,
        gmt_modified: int = None,
        id: int = None,
        is_support: int = None,
        out_id: str = None,
        pid: int = None,
        receive_state: int = None,
        receiver: str = None,
        render_date: int = None,
        render_state: int = None,
        short_url: str = None,
        sign_name: str = None,
        sms_content: str = None,
        suggestion: str = None,
        tmp_code: str = None,
        tmp_id: str = None,
        tmp_type: int = None,
        tmp_type_name: str = None,
    ):
        self.accept_date = accept_date
        self.api_send = api_send
        self.card_template_type = card_template_type
        self.custom_tmp_code = custom_tmp_code
        self.description = description
        self.fuu_id = fuu_id
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.is_support = is_support
        self.out_id = out_id
        self.pid = pid
        self.receive_state = receive_state
        self.receiver = receiver
        self.render_date = render_date
        self.render_state = render_state
        self.short_url = short_url
        self.sign_name = sign_name
        self.sms_content = sms_content
        self.suggestion = suggestion
        self.tmp_code = tmp_code
        self.tmp_id = tmp_id
        self.tmp_type = tmp_type
        self.tmp_type_name = tmp_type_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.accept_date is not None:
            result['AcceptDate'] = self.accept_date
        if self.api_send is not None:
            result['ApiSend'] = self.api_send
        if self.card_template_type is not None:
            result['CardTemplateType'] = self.card_template_type
        if self.custom_tmp_code is not None:
            result['CustomTmpCode'] = self.custom_tmp_code
        if self.description is not None:
            result['Description'] = self.description
        if self.fuu_id is not None:
            result['FuuId'] = self.fuu_id
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.is_support is not None:
            result['IsSupport'] = self.is_support
        if self.out_id is not None:
            result['OutId'] = self.out_id
        if self.pid is not None:
            result['Pid'] = self.pid
        if self.receive_state is not None:
            result['ReceiveState'] = self.receive_state
        if self.receiver is not None:
            result['Receiver'] = self.receiver
        if self.render_date is not None:
            result['RenderDate'] = self.render_date
        if self.render_state is not None:
            result['RenderState'] = self.render_state
        if self.short_url is not None:
            result['ShortUrl'] = self.short_url
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.sms_content is not None:
            result['SmsContent'] = self.sms_content
        if self.suggestion is not None:
            result['Suggestion'] = self.suggestion
        if self.tmp_code is not None:
            result['TmpCode'] = self.tmp_code
        if self.tmp_id is not None:
            result['TmpId'] = self.tmp_id
        if self.tmp_type is not None:
            result['TmpType'] = self.tmp_type
        if self.tmp_type_name is not None:
            result['TmpTypeName'] = self.tmp_type_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AcceptDate') is not None:
            self.accept_date = m.get('AcceptDate')
        if m.get('ApiSend') is not None:
            self.api_send = m.get('ApiSend')
        if m.get('CardTemplateType') is not None:
            self.card_template_type = m.get('CardTemplateType')
        if m.get('CustomTmpCode') is not None:
            self.custom_tmp_code = m.get('CustomTmpCode')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('FuuId') is not None:
            self.fuu_id = m.get('FuuId')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsSupport') is not None:
            self.is_support = m.get('IsSupport')
        if m.get('OutId') is not None:
            self.out_id = m.get('OutId')
        if m.get('Pid') is not None:
            self.pid = m.get('Pid')
        if m.get('ReceiveState') is not None:
            self.receive_state = m.get('ReceiveState')
        if m.get('Receiver') is not None:
            self.receiver = m.get('Receiver')
        if m.get('RenderDate') is not None:
            self.render_date = m.get('RenderDate')
        if m.get('RenderState') is not None:
            self.render_state = m.get('RenderState')
        if m.get('ShortUrl') is not None:
            self.short_url = m.get('ShortUrl')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('SmsContent') is not None:
            self.sms_content = m.get('SmsContent')
        if m.get('Suggestion') is not None:
            self.suggestion = m.get('Suggestion')
        if m.get('TmpCode') is not None:
            self.tmp_code = m.get('TmpCode')
        if m.get('TmpId') is not None:
            self.tmp_id = m.get('TmpId')
        if m.get('TmpType') is not None:
            self.tmp_type = m.get('TmpType')
        if m.get('TmpTypeName') is not None:
            self.tmp_type_name = m.get('TmpTypeName')
        return self


class ExportCardSmsHistoryResponseBodyModel(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        records: List[ExportCardSmsHistoryResponseBodyModelRecords] = None,
        total_count: int = None,
    ):
        self.page_no = page_no
        self.page_size = page_size
        self.records = records
        self.total_count = total_count

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = ExportCardSmsHistoryResponseBodyModelRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ExportCardSmsHistoryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        model: ExportCardSmsHistoryResponseBodyModel = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.model = model
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.model:
            self.model.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.model is not None:
            result['Model'] = self.model.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Model') is not None:
            temp_model = ExportCardSmsHistoryResponseBodyModel()
            self.model = temp_model.from_map(m['Model'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ExportCardSmsHistoryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ExportCardSmsHistoryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ExportCardSmsHistoryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExportCardSmsStatisticsRequest(TeaModel):
    def __init__(
        self,
        custom_tmp_code: str = None,
        send_date_end: str = None,
        send_date_start: str = None,
        sign_name: str = None,
        tmp_code: str = None,
        tmp_name: str = None,
    ):
        self.custom_tmp_code = custom_tmp_code
        self.send_date_end = send_date_end
        self.send_date_start = send_date_start
        self.sign_name = sign_name
        self.tmp_code = tmp_code
        self.tmp_name = tmp_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.custom_tmp_code is not None:
            result['CustomTmpCode'] = self.custom_tmp_code
        if self.send_date_end is not None:
            result['SendDateEnd'] = self.send_date_end
        if self.send_date_start is not None:
            result['SendDateStart'] = self.send_date_start
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.tmp_code is not None:
            result['TmpCode'] = self.tmp_code
        if self.tmp_name is not None:
            result['TmpName'] = self.tmp_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CustomTmpCode') is not None:
            self.custom_tmp_code = m.get('CustomTmpCode')
        if m.get('SendDateEnd') is not None:
            self.send_date_end = m.get('SendDateEnd')
        if m.get('SendDateStart') is not None:
            self.send_date_start = m.get('SendDateStart')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('TmpCode') is not None:
            self.tmp_code = m.get('TmpCode')
        if m.get('TmpName') is not None:
            self.tmp_name = m.get('TmpName')
        return self


class ExportCardSmsStatisticsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        model: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.model = model
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.model is not None:
            result['Model'] = self.model
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ExportCardSmsStatisticsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ExportCardSmsStatisticsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ExportCardSmsStatisticsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExportCardSmsStatisticsSendRequest(TeaModel):
    def __init__(
        self,
        custom_tmp_code: str = None,
        send_date_end: str = None,
        send_date_start: str = None,
        sign_name: str = None,
        tmp_code: str = None,
    ):
        self.custom_tmp_code = custom_tmp_code
        # This parameter is required.
        self.send_date_end = send_date_end
        # This parameter is required.
        self.send_date_start = send_date_start
        self.sign_name = sign_name
        self.tmp_code = tmp_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.custom_tmp_code is not None:
            result['CustomTmpCode'] = self.custom_tmp_code
        if self.send_date_end is not None:
            result['SendDateEnd'] = self.send_date_end
        if self.send_date_start is not None:
            result['SendDateStart'] = self.send_date_start
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.tmp_code is not None:
            result['TmpCode'] = self.tmp_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CustomTmpCode') is not None:
            self.custom_tmp_code = m.get('CustomTmpCode')
        if m.get('SendDateEnd') is not None:
            self.send_date_end = m.get('SendDateEnd')
        if m.get('SendDateStart') is not None:
            self.send_date_start = m.get('SendDateStart')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('TmpCode') is not None:
            self.tmp_code = m.get('TmpCode')
        return self


class ExportCardSmsStatisticsSendResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        model: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.model = model
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.model is not None:
            result['Model'] = self.model
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ExportCardSmsStatisticsSendResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ExportCardSmsStatisticsSendResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ExportCardSmsStatisticsSendResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ExportTmpEffectReportDataRequest(TeaModel):
    def __init__(
        self,
        end_date: str = None,
        start_date: str = None,
        tmp_code: str = None,
        tmp_name: str = None,
        vendor_code: str = None,
        vendor_name: str = None,
    ):
        # This parameter is required.
        self.end_date = end_date
        # This parameter is required.
        self.start_date = start_date
        self.tmp_code = tmp_code
        self.tmp_name = tmp_name
        self.vendor_code = vendor_code
        self.vendor_name = vendor_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.start_date is not None:
            result['StartDate'] = self.start_date
        if self.tmp_code is not None:
            result['TmpCode'] = self.tmp_code
        if self.tmp_name is not None:
            result['TmpName'] = self.tmp_name
        if self.vendor_code is not None:
            result['VendorCode'] = self.vendor_code
        if self.vendor_name is not None:
            result['VendorName'] = self.vendor_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('StartDate') is not None:
            self.start_date = m.get('StartDate')
        if m.get('TmpCode') is not None:
            self.tmp_code = m.get('TmpCode')
        if m.get('TmpName') is not None:
            self.tmp_name = m.get('TmpName')
        if m.get('VendorCode') is not None:
            self.vendor_code = m.get('VendorCode')
        if m.get('VendorName') is not None:
            self.vendor_name = m.get('VendorName')
        return self


class ExportTmpEffectReportDataResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        model: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.model = model
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.model is not None:
            result['Model'] = self.model
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ExportTmpEffectReportDataResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ExportTmpEffectReportDataResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ExportTmpEffectReportDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetLetterOfAuthorizationRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        sign_name: str = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.sign_name = sign_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        return self


class GetLetterOfAuthorizationResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        file_url: str = None,
        message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        self.code = code
        self.file_url = file_url
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.file_url is not None:
            result['FileUrl'] = self.file_url
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('FileUrl') is not None:
            self.file_url = m.get('FileUrl')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetLetterOfAuthorizationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: GetLetterOfAuthorizationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = GetLetterOfAuthorizationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListPushMsgRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        msg_type: str = None,
        name: str = None,
        owner_id: int = None,
        push_time: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        status: str = None,
    ):
        self.id = id
        self.msg_type = msg_type
        self.name = name
        self.owner_id = owner_id
        self.push_time = push_time
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.msg_type is not None:
            result['MsgType'] = self.msg_type
        if self.name is not None:
            result['Name'] = self.name
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.push_time is not None:
            result['PushTime'] = self.push_time
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('MsgType') is not None:
            self.msg_type = m.get('MsgType')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PushTime') is not None:
            self.push_time = m.get('PushTime')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class ListPushMsgResponseBodyModel(TeaModel):
    def __init__(
        self,
        created_date: str = None,
        created_date_str: str = None,
        id: str = None,
        push_time: str = None,
        push_time_str: str = None,
        spec: str = None,
        status: str = None,
        status_str: str = None,
        title: str = None,
        user_num: int = None,
    ):
        self.created_date = created_date
        self.created_date_str = created_date_str
        self.id = id
        self.push_time = push_time
        self.push_time_str = push_time_str
        self.spec = spec
        self.status = status
        self.status_str = status_str
        self.title = title
        self.user_num = user_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.created_date is not None:
            result['CreatedDate'] = self.created_date
        if self.created_date_str is not None:
            result['CreatedDateStr'] = self.created_date_str
        if self.id is not None:
            result['Id'] = self.id
        if self.push_time is not None:
            result['PushTime'] = self.push_time
        if self.push_time_str is not None:
            result['PushTimeStr'] = self.push_time_str
        if self.spec is not None:
            result['Spec'] = self.spec
        if self.status is not None:
            result['Status'] = self.status
        if self.status_str is not None:
            result['StatusStr'] = self.status_str
        if self.title is not None:
            result['Title'] = self.title
        if self.user_num is not None:
            result['UserNum'] = self.user_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreatedDate') is not None:
            self.created_date = m.get('CreatedDate')
        if m.get('CreatedDateStr') is not None:
            self.created_date_str = m.get('CreatedDateStr')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('PushTime') is not None:
            self.push_time = m.get('PushTime')
        if m.get('PushTimeStr') is not None:
            self.push_time_str = m.get('PushTimeStr')
        if m.get('Spec') is not None:
            self.spec = m.get('Spec')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('StatusStr') is not None:
            self.status_str = m.get('StatusStr')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        if m.get('UserNum') is not None:
            self.user_num = m.get('UserNum')
        return self


class ListPushMsgResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        model: ListPushMsgResponseBodyModel = None,
        request_id: str = None,
    ):
        self.code = code
        self.message = message
        self.model = model
        self.request_id = request_id

    def validate(self):
        if self.model:
            self.model.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.model is not None:
            result['Model'] = self.model.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Model') is not None:
            temp_model = ListPushMsgResponseBodyModel()
            self.model = temp_model.from_map(m['Model'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class ListPushMsgResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListPushMsgResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListPushMsgResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListTagResourcesRequestTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListTagResourcesRequest(TeaModel):
    def __init__(
        self,
        category: str = None,
        next_token: str = None,
        owner_id: int = None,
        page_size: int = None,
        prod_code: str = None,
        region_id: str = None,
        resource_id: List[str] = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        resource_type: str = None,
        scope: str = None,
        tag: List[ListTagResourcesRequestTag] = None,
        tag_owner_uid: int = None,
    ):
        self.category = category
        self.next_token = next_token
        self.owner_id = owner_id
        self.page_size = page_size
        self.prod_code = prod_code
        # This parameter is required.
        self.region_id = region_id
        self.resource_id = resource_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.resource_type = resource_type
        self.scope = scope
        self.tag = tag
        # This parameter is required.
        self.tag_owner_uid = tag_owner_uid

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.scope is not None:
            result['Scope'] = self.scope
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        if self.tag_owner_uid is not None:
            result['TagOwnerUid'] = self.tag_owner_uid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('Scope') is not None:
            self.scope = m.get('Scope')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = ListTagResourcesRequestTag()
                self.tag.append(temp_model.from_map(k))
        if m.get('TagOwnerUid') is not None:
            self.tag_owner_uid = m.get('TagOwnerUid')
        return self


class ListTagResourcesResponseBodyTagResourcesTagResource(TeaModel):
    def __init__(
        self,
        resource_id: str = None,
        resource_type: str = None,
        tag_key: str = None,
        tag_value: str = None,
    ):
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.tag_key = tag_key
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class ListTagResourcesResponseBodyTagResources(TeaModel):
    def __init__(
        self,
        tag_resource: List[ListTagResourcesResponseBodyTagResourcesTagResource] = None,
    ):
        self.tag_resource = tag_resource

    def validate(self):
        if self.tag_resource:
            for k in self.tag_resource:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['TagResource'] = []
        if self.tag_resource is not None:
            for k in self.tag_resource:
                result['TagResource'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.tag_resource = []
        if m.get('TagResource') is not None:
            for k in m.get('TagResource'):
                temp_model = ListTagResourcesResponseBodyTagResourcesTagResource()
                self.tag_resource.append(temp_model.from_map(k))
        return self


class ListTagResourcesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        next_token: str = None,
        request_id: str = None,
        tag_resources: ListTagResourcesResponseBodyTagResources = None,
    ):
        self.code = code
        self.next_token = next_token
        self.request_id = request_id
        self.tag_resources = tag_resources

    def validate(self):
        if self.tag_resources:
            self.tag_resources.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.tag_resources is not None:
            result['TagResources'] = self.tag_resources.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TagResources') is not None:
            temp_model = ListTagResourcesResponseBodyTagResources()
            self.tag_resources = temp_model.from_map(m['TagResources'])
        return self


class ListTagResourcesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ListTagResourcesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ListTagResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OpenShortUrlProductRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class OpenShortUrlProductResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class OpenShortUrlProductResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: OpenShortUrlProductResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = OpenShortUrlProductResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OpenShortUrlProductNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class OpenShortUrlProductNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        rusult: bool = None,
    ):
        self.request_id = request_id
        self.rusult = rusult

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.rusult is not None:
            result['Rusult'] = self.rusult
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Rusult') is not None:
            self.rusult = m.get('Rusult')
        return self


class OpenShortUrlProductNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: OpenShortUrlProductNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = OpenShortUrlProductNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class OpencPrevFlagNewRequest(TeaModel):
    def __init__(
        self,
        is_open: int = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        # This parameter is required.
        self.is_open = is_open
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_open is not None:
            result['IsOpen'] = self.is_open
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsOpen') is not None:
            self.is_open = m.get('IsOpen')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class OpencPrevFlagNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class OpencPrevFlagNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: OpencPrevFlagNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = OpencPrevFlagNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryAnyParamTemplateUserRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryAnyParamTemplateUserResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryAnyParamTemplateUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryAnyParamTemplateUserResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryAnyParamTemplateUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryAuthorizationRequest(TeaModel):
    def __init__(
        self,
        authorize_code: str = None,
        owner_id: int = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.authorize_code = authorize_code
        self.owner_id = owner_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.authorize_code is not None:
            result['AuthorizeCode'] = self.authorize_code
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuthorizeCode') is not None:
            self.authorize_code = m.get('AuthorizeCode')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryAuthorizationResponseBodyResult(TeaModel):
    def __init__(
        self,
        aliyun_uid: int = None,
        authorize_code: str = None,
        authorize_status: bool = None,
        authorize_time: str = None,
        product_code: str = None,
        un_authorize_time: str = None,
    ):
        self.aliyun_uid = aliyun_uid
        self.authorize_code = authorize_code
        self.authorize_status = authorize_status
        self.authorize_time = authorize_time
        self.product_code = product_code
        self.un_authorize_time = un_authorize_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.authorize_code is not None:
            result['AuthorizeCode'] = self.authorize_code
        if self.authorize_status is not None:
            result['AuthorizeStatus'] = self.authorize_status
        if self.authorize_time is not None:
            result['AuthorizeTime'] = self.authorize_time
        if self.product_code is not None:
            result['ProductCode'] = self.product_code
        if self.un_authorize_time is not None:
            result['UnAuthorizeTime'] = self.un_authorize_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('AuthorizeCode') is not None:
            self.authorize_code = m.get('AuthorizeCode')
        if m.get('AuthorizeStatus') is not None:
            self.authorize_status = m.get('AuthorizeStatus')
        if m.get('AuthorizeTime') is not None:
            self.authorize_time = m.get('AuthorizeTime')
        if m.get('ProductCode') is not None:
            self.product_code = m.get('ProductCode')
        if m.get('UnAuthorizeTime') is not None:
            self.un_authorize_time = m.get('UnAuthorizeTime')
        return self


class QueryAuthorizationResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        message: str = None,
        request_id: str = None,
        result: List[QueryAuthorizationResponseBodyResult] = None,
    ):
        self.code = code
        self.message = message
        self.request_id = request_id
        self.result = result

    def validate(self):
        if self.result:
            for k in self.result:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['Result'] = []
        if self.result is not None:
            for k in self.result:
                result['Result'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.result = []
        if m.get('Result') is not None:
            for k in m.get('Result'):
                temp_model = QueryAuthorizationResponseBodyResult()
                self.result.append(temp_model.from_map(k))
        return self


class QueryAuthorizationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryAuthorizationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryAuthorizationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryBillingStatisticsRequest(TeaModel):
    def __init__(
        self,
        bill_cycle: str = None,
        item_name: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.bill_cycle = bill_cycle
        self.item_name = item_name
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_cycle is not None:
            result['BillCycle'] = self.bill_cycle
        if self.item_name is not None:
            result['ItemName'] = self.item_name
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BillCycle') is not None:
            self.bill_cycle = m.get('BillCycle')
        if m.get('ItemName') is not None:
            self.item_name = m.get('ItemName')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryBillingStatisticsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryBillingStatisticsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryBillingStatisticsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryBillingStatisticsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryCardMessageQueueRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        queue_types: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        # This parameter is required.
        self.queue_types = queue_types
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.queue_types is not None:
            result['QueueTypes'] = self.queue_types
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('QueueTypes') is not None:
            self.queue_types = m.get('QueueTypes')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryCardMessageQueueResponseBodyList(TeaModel):
    def __init__(
        self,
        is_created: bool = None,
        queue_name: str = None,
        queue_type: str = None,
        region: str = None,
    ):
        self.is_created = is_created
        self.queue_name = queue_name
        self.queue_type = queue_type
        self.region = region

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_created is not None:
            result['IsCreated'] = self.is_created
        if self.queue_name is not None:
            result['QueueName'] = self.queue_name
        if self.queue_type is not None:
            result['QueueType'] = self.queue_type
        if self.region is not None:
            result['Region'] = self.region
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsCreated') is not None:
            self.is_created = m.get('IsCreated')
        if m.get('QueueName') is not None:
            self.queue_name = m.get('QueueName')
        if m.get('QueueType') is not None:
            self.queue_type = m.get('QueueType')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        return self


class QueryCardMessageQueueResponseBody(TeaModel):
    def __init__(
        self,
        list: List[QueryCardMessageQueueResponseBodyList] = None,
        request_id: str = None,
    ):
        self.list = list
        self.request_id = request_id

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QueryCardMessageQueueResponseBodyList()
                self.list.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QueryCardMessageQueueResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryCardMessageQueueResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryCardMessageQueueResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryCardSendExportInfoRequest(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        status: int = None,
        type: int = None,
    ):
        self.page_no = page_no
        self.page_size = page_size
        self.status = status
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class QueryCardSendExportInfoResponseBodyModelRecords(TeaModel):
    def __init__(
        self,
        ext: str = None,
        file_name: str = None,
        gmt_create: int = None,
        gmt_modified: int = None,
        id: int = None,
        oss_url: str = None,
        pid: int = None,
        status: int = None,
        type: int = None,
        user_id: str = None,
    ):
        self.ext = ext
        self.file_name = file_name
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.oss_url = oss_url
        self.pid = pid
        self.status = status
        self.type = type
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.ext is not None:
            result['Ext'] = self.ext
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.oss_url is not None:
            result['OssUrl'] = self.oss_url
        if self.pid is not None:
            result['Pid'] = self.pid
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Ext') is not None:
            self.ext = m.get('Ext')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OssUrl') is not None:
            self.oss_url = m.get('OssUrl')
        if m.get('Pid') is not None:
            self.pid = m.get('Pid')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class QueryCardSendExportInfoResponseBodyModel(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        records: List[QueryCardSendExportInfoResponseBodyModelRecords] = None,
        total_count: int = None,
    ):
        self.page_no = page_no
        self.page_size = page_size
        self.records = records
        self.total_count = total_count

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = QueryCardSendExportInfoResponseBodyModelRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class QueryCardSendExportInfoResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        model: QueryCardSendExportInfoResponseBodyModel = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.model = model
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.model:
            self.model.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.model is not None:
            result['Model'] = self.model.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Model') is not None:
            temp_model = QueryCardSendExportInfoResponseBodyModel()
            self.model = temp_model.from_map(m['Model'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryCardSendExportInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryCardSendExportInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryCardSendExportInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryCardSmsHistoryRequest(TeaModel):
    def __init__(
        self,
        api_send: int = None,
        card_template_type: str = None,
        gmt_create: str = None,
        max_id: int = None,
        min_id: int = None,
        page_no: int = None,
        page_size: int = None,
        receive_state: int = None,
        receiver: str = None,
        render_state: int = None,
        sign_name: str = None,
        tmp_code: str = None,
        type: int = None,
    ):
        self.api_send = api_send
        self.card_template_type = card_template_type
        self.gmt_create = gmt_create
        self.max_id = max_id
        self.min_id = min_id
        self.page_no = page_no
        self.page_size = page_size
        self.receive_state = receive_state
        self.receiver = receiver
        self.render_state = render_state
        self.sign_name = sign_name
        self.tmp_code = tmp_code
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.api_send is not None:
            result['ApiSend'] = self.api_send
        if self.card_template_type is not None:
            result['CardTemplateType'] = self.card_template_type
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.max_id is not None:
            result['MaxId'] = self.max_id
        if self.min_id is not None:
            result['MinId'] = self.min_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.receive_state is not None:
            result['ReceiveState'] = self.receive_state
        if self.receiver is not None:
            result['Receiver'] = self.receiver
        if self.render_state is not None:
            result['RenderState'] = self.render_state
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.tmp_code is not None:
            result['TmpCode'] = self.tmp_code
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ApiSend') is not None:
            self.api_send = m.get('ApiSend')
        if m.get('CardTemplateType') is not None:
            self.card_template_type = m.get('CardTemplateType')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('MaxId') is not None:
            self.max_id = m.get('MaxId')
        if m.get('MinId') is not None:
            self.min_id = m.get('MinId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ReceiveState') is not None:
            self.receive_state = m.get('ReceiveState')
        if m.get('Receiver') is not None:
            self.receiver = m.get('Receiver')
        if m.get('RenderState') is not None:
            self.render_state = m.get('RenderState')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('TmpCode') is not None:
            self.tmp_code = m.get('TmpCode')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class QueryCardSmsHistoryResponseBodyModelRecords(TeaModel):
    def __init__(
        self,
        accept_date: int = None,
        api_send: int = None,
        card_template_type: str = None,
        custom_tmp_code: str = None,
        description: str = None,
        fuu_id: str = None,
        gmt_create: int = None,
        gmt_modified: int = None,
        id: int = None,
        is_support: int = None,
        out_id: str = None,
        pid: int = None,
        receive_state: int = None,
        receiver: str = None,
        render_date: int = None,
        render_state: int = None,
        short_url: str = None,
        sign_name: str = None,
        sms_content: str = None,
        suggestion: str = None,
        tmp_code: str = None,
        tmp_id: str = None,
        tmp_type: int = None,
        tmp_type_name: str = None,
    ):
        self.accept_date = accept_date
        self.api_send = api_send
        self.card_template_type = card_template_type
        self.custom_tmp_code = custom_tmp_code
        self.description = description
        self.fuu_id = fuu_id
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.is_support = is_support
        self.out_id = out_id
        self.pid = pid
        self.receive_state = receive_state
        self.receiver = receiver
        self.render_date = render_date
        self.render_state = render_state
        self.short_url = short_url
        self.sign_name = sign_name
        self.sms_content = sms_content
        self.suggestion = suggestion
        self.tmp_code = tmp_code
        self.tmp_id = tmp_id
        self.tmp_type = tmp_type
        self.tmp_type_name = tmp_type_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.accept_date is not None:
            result['AcceptDate'] = self.accept_date
        if self.api_send is not None:
            result['ApiSend'] = self.api_send
        if self.card_template_type is not None:
            result['CardTemplateType'] = self.card_template_type
        if self.custom_tmp_code is not None:
            result['CustomTmpCode'] = self.custom_tmp_code
        if self.description is not None:
            result['Description'] = self.description
        if self.fuu_id is not None:
            result['FuuId'] = self.fuu_id
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.is_support is not None:
            result['IsSupport'] = self.is_support
        if self.out_id is not None:
            result['OutId'] = self.out_id
        if self.pid is not None:
            result['Pid'] = self.pid
        if self.receive_state is not None:
            result['ReceiveState'] = self.receive_state
        if self.receiver is not None:
            result['Receiver'] = self.receiver
        if self.render_date is not None:
            result['RenderDate'] = self.render_date
        if self.render_state is not None:
            result['RenderState'] = self.render_state
        if self.short_url is not None:
            result['ShortUrl'] = self.short_url
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.sms_content is not None:
            result['SmsContent'] = self.sms_content
        if self.suggestion is not None:
            result['Suggestion'] = self.suggestion
        if self.tmp_code is not None:
            result['TmpCode'] = self.tmp_code
        if self.tmp_id is not None:
            result['TmpId'] = self.tmp_id
        if self.tmp_type is not None:
            result['TmpType'] = self.tmp_type
        if self.tmp_type_name is not None:
            result['TmpTypeName'] = self.tmp_type_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AcceptDate') is not None:
            self.accept_date = m.get('AcceptDate')
        if m.get('ApiSend') is not None:
            self.api_send = m.get('ApiSend')
        if m.get('CardTemplateType') is not None:
            self.card_template_type = m.get('CardTemplateType')
        if m.get('CustomTmpCode') is not None:
            self.custom_tmp_code = m.get('CustomTmpCode')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('FuuId') is not None:
            self.fuu_id = m.get('FuuId')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsSupport') is not None:
            self.is_support = m.get('IsSupport')
        if m.get('OutId') is not None:
            self.out_id = m.get('OutId')
        if m.get('Pid') is not None:
            self.pid = m.get('Pid')
        if m.get('ReceiveState') is not None:
            self.receive_state = m.get('ReceiveState')
        if m.get('Receiver') is not None:
            self.receiver = m.get('Receiver')
        if m.get('RenderDate') is not None:
            self.render_date = m.get('RenderDate')
        if m.get('RenderState') is not None:
            self.render_state = m.get('RenderState')
        if m.get('ShortUrl') is not None:
            self.short_url = m.get('ShortUrl')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('SmsContent') is not None:
            self.sms_content = m.get('SmsContent')
        if m.get('Suggestion') is not None:
            self.suggestion = m.get('Suggestion')
        if m.get('TmpCode') is not None:
            self.tmp_code = m.get('TmpCode')
        if m.get('TmpId') is not None:
            self.tmp_id = m.get('TmpId')
        if m.get('TmpType') is not None:
            self.tmp_type = m.get('TmpType')
        if m.get('TmpTypeName') is not None:
            self.tmp_type_name = m.get('TmpTypeName')
        return self


class QueryCardSmsHistoryResponseBodyModel(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        records: List[QueryCardSmsHistoryResponseBodyModelRecords] = None,
        total_count: int = None,
    ):
        self.page_no = page_no
        self.page_size = page_size
        self.records = records
        self.total_count = total_count

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = QueryCardSmsHistoryResponseBodyModelRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class QueryCardSmsHistoryResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        model: QueryCardSmsHistoryResponseBodyModel = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.model = model
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.model:
            self.model.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.model is not None:
            result['Model'] = self.model.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Model') is not None:
            temp_model = QueryCardSmsHistoryResponseBodyModel()
            self.model = temp_model.from_map(m['Model'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryCardSmsHistoryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryCardSmsHistoryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryCardSmsHistoryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryCardSmsHistoryDetailRequest(TeaModel):
    def __init__(
        self,
        gmt_create: str = None,
        id: str = None,
    ):
        # This parameter is required.
        self.gmt_create = gmt_create
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class QueryCardSmsHistoryDetailResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        model: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.model = model
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.model is not None:
            result['Model'] = self.model
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Model') is not None:
            self.model = m.get('Model')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryCardSmsHistoryDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryCardSmsHistoryDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryCardSmsHistoryDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryCardSmsStatisticsRequest(TeaModel):
    def __init__(
        self,
        custom_tmp_code: str = None,
        page_no: int = None,
        page_size: int = None,
        send_date_end: str = None,
        send_date_start: str = None,
        sign_name: str = None,
        tmp_code: str = None,
        tmp_name: str = None,
    ):
        self.custom_tmp_code = custom_tmp_code
        # This parameter is required.
        self.page_no = page_no
        # This parameter is required.
        self.page_size = page_size
        self.send_date_end = send_date_end
        self.send_date_start = send_date_start
        self.sign_name = sign_name
        self.tmp_code = tmp_code
        self.tmp_name = tmp_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.custom_tmp_code is not None:
            result['CustomTmpCode'] = self.custom_tmp_code
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.send_date_end is not None:
            result['SendDateEnd'] = self.send_date_end
        if self.send_date_start is not None:
            result['SendDateStart'] = self.send_date_start
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.tmp_code is not None:
            result['TmpCode'] = self.tmp_code
        if self.tmp_name is not None:
            result['TmpName'] = self.tmp_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CustomTmpCode') is not None:
            self.custom_tmp_code = m.get('CustomTmpCode')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SendDateEnd') is not None:
            self.send_date_end = m.get('SendDateEnd')
        if m.get('SendDateStart') is not None:
            self.send_date_start = m.get('SendDateStart')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('TmpCode') is not None:
            self.tmp_code = m.get('TmpCode')
        if m.get('TmpName') is not None:
            self.tmp_name = m.get('TmpName')
        return self


class QueryCardSmsStatisticsResponseBodyModelRecords(TeaModel):
    def __init__(
        self,
        render_success_total: int = None,
        send_date: str = None,
        sign_name: str = None,
        tmp_code: str = None,
        tmp_name: str = None,
        url_generate_total: int = None,
    ):
        self.render_success_total = render_success_total
        self.send_date = send_date
        self.sign_name = sign_name
        self.tmp_code = tmp_code
        self.tmp_name = tmp_name
        self.url_generate_total = url_generate_total

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.render_success_total is not None:
            result['RenderSuccessTotal'] = self.render_success_total
        if self.send_date is not None:
            result['SendDate'] = self.send_date
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.tmp_code is not None:
            result['TmpCode'] = self.tmp_code
        if self.tmp_name is not None:
            result['TmpName'] = self.tmp_name
        if self.url_generate_total is not None:
            result['UrlGenerateTotal'] = self.url_generate_total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RenderSuccessTotal') is not None:
            self.render_success_total = m.get('RenderSuccessTotal')
        if m.get('SendDate') is not None:
            self.send_date = m.get('SendDate')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('TmpCode') is not None:
            self.tmp_code = m.get('TmpCode')
        if m.get('TmpName') is not None:
            self.tmp_name = m.get('TmpName')
        if m.get('UrlGenerateTotal') is not None:
            self.url_generate_total = m.get('UrlGenerateTotal')
        return self


class QueryCardSmsStatisticsResponseBodyModel(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        records: List[QueryCardSmsStatisticsResponseBodyModelRecords] = None,
        total_count: int = None,
    ):
        self.page_no = page_no
        self.page_size = page_size
        self.records = records
        self.total_count = total_count

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = QueryCardSmsStatisticsResponseBodyModelRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class QueryCardSmsStatisticsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        model: QueryCardSmsStatisticsResponseBodyModel = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.model = model
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.model:
            self.model.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.model is not None:
            result['Model'] = self.model.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Model') is not None:
            temp_model = QueryCardSmsStatisticsResponseBodyModel()
            self.model = temp_model.from_map(m['Model'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryCardSmsStatisticsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryCardSmsStatisticsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryCardSmsStatisticsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryCardSmsStatisticsListRequest(TeaModel):
    def __init__(
        self,
        custom_tmp_code: str = None,
        send_date_end: str = None,
        send_date_start: str = None,
        sign_name: str = None,
        tmp_code: str = None,
        tmp_name: str = None,
    ):
        self.custom_tmp_code = custom_tmp_code
        self.send_date_end = send_date_end
        self.send_date_start = send_date_start
        self.sign_name = sign_name
        self.tmp_code = tmp_code
        self.tmp_name = tmp_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.custom_tmp_code is not None:
            result['CustomTmpCode'] = self.custom_tmp_code
        if self.send_date_end is not None:
            result['SendDateEnd'] = self.send_date_end
        if self.send_date_start is not None:
            result['SendDateStart'] = self.send_date_start
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.tmp_code is not None:
            result['TmpCode'] = self.tmp_code
        if self.tmp_name is not None:
            result['TmpName'] = self.tmp_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CustomTmpCode') is not None:
            self.custom_tmp_code = m.get('CustomTmpCode')
        if m.get('SendDateEnd') is not None:
            self.send_date_end = m.get('SendDateEnd')
        if m.get('SendDateStart') is not None:
            self.send_date_start = m.get('SendDateStart')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('TmpCode') is not None:
            self.tmp_code = m.get('TmpCode')
        if m.get('TmpName') is not None:
            self.tmp_name = m.get('TmpName')
        return self


class QueryCardSmsStatisticsListResponseBodyModel(TeaModel):
    def __init__(
        self,
        render_success_total: int = None,
        send_date: str = None,
        url_generate_total: int = None,
    ):
        self.render_success_total = render_success_total
        self.send_date = send_date
        self.url_generate_total = url_generate_total

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.render_success_total is not None:
            result['RenderSuccessTotal'] = self.render_success_total
        if self.send_date is not None:
            result['SendDate'] = self.send_date
        if self.url_generate_total is not None:
            result['UrlGenerateTotal'] = self.url_generate_total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RenderSuccessTotal') is not None:
            self.render_success_total = m.get('RenderSuccessTotal')
        if m.get('SendDate') is not None:
            self.send_date = m.get('SendDate')
        if m.get('UrlGenerateTotal') is not None:
            self.url_generate_total = m.get('UrlGenerateTotal')
        return self


class QueryCardSmsStatisticsListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        model: List[QueryCardSmsStatisticsListResponseBodyModel] = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.model = model
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.model:
            for k in self.model:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Model'] = []
        if self.model is not None:
            for k in self.model:
                result['Model'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.model = []
        if m.get('Model') is not None:
            for k in m.get('Model'):
                temp_model = QueryCardSmsStatisticsListResponseBodyModel()
                self.model.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryCardSmsStatisticsListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryCardSmsStatisticsListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryCardSmsStatisticsListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryCardSmsStatisticsSendRequest(TeaModel):
    def __init__(
        self,
        custom_tmp_code: str = None,
        page_no: int = None,
        page_size: int = None,
        send_date_end: str = None,
        send_date_start: str = None,
        sign_name: str = None,
        tmp_code: str = None,
    ):
        self.custom_tmp_code = custom_tmp_code
        # This parameter is required.
        self.page_no = page_no
        # This parameter is required.
        self.page_size = page_size
        self.send_date_end = send_date_end
        self.send_date_start = send_date_start
        self.sign_name = sign_name
        self.tmp_code = tmp_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.custom_tmp_code is not None:
            result['CustomTmpCode'] = self.custom_tmp_code
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.send_date_end is not None:
            result['SendDateEnd'] = self.send_date_end
        if self.send_date_start is not None:
            result['SendDateStart'] = self.send_date_start
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.tmp_code is not None:
            result['TmpCode'] = self.tmp_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CustomTmpCode') is not None:
            self.custom_tmp_code = m.get('CustomTmpCode')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('SendDateEnd') is not None:
            self.send_date_end = m.get('SendDateEnd')
        if m.get('SendDateStart') is not None:
            self.send_date_start = m.get('SendDateStart')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('TmpCode') is not None:
            self.tmp_code = m.get('TmpCode')
        return self


class QueryCardSmsStatisticsSendResponseBodyModelRecords(TeaModel):
    def __init__(
        self,
        custom_tmp_code: str = None,
        render_success_rate: float = None,
        render_success_total: int = None,
        send_date: str = None,
        send_fail_total: int = None,
        send_process_total: int = None,
        send_success_rate: float = None,
        send_success_total: int = None,
        send_total: int = None,
        sign_name: str = None,
        support_rate: float = None,
        support_total: int = None,
        tmp_code: str = None,
    ):
        self.custom_tmp_code = custom_tmp_code
        self.render_success_rate = render_success_rate
        self.render_success_total = render_success_total
        self.send_date = send_date
        self.send_fail_total = send_fail_total
        self.send_process_total = send_process_total
        self.send_success_rate = send_success_rate
        self.send_success_total = send_success_total
        self.send_total = send_total
        self.sign_name = sign_name
        self.support_rate = support_rate
        self.support_total = support_total
        self.tmp_code = tmp_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.custom_tmp_code is not None:
            result['CustomTmpCode'] = self.custom_tmp_code
        if self.render_success_rate is not None:
            result['RenderSuccessRate'] = self.render_success_rate
        if self.render_success_total is not None:
            result['RenderSuccessTotal'] = self.render_success_total
        if self.send_date is not None:
            result['SendDate'] = self.send_date
        if self.send_fail_total is not None:
            result['SendFailTotal'] = self.send_fail_total
        if self.send_process_total is not None:
            result['SendProcessTotal'] = self.send_process_total
        if self.send_success_rate is not None:
            result['SendSuccessRate'] = self.send_success_rate
        if self.send_success_total is not None:
            result['SendSuccessTotal'] = self.send_success_total
        if self.send_total is not None:
            result['SendTotal'] = self.send_total
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.support_rate is not None:
            result['SupportRate'] = self.support_rate
        if self.support_total is not None:
            result['SupportTotal'] = self.support_total
        if self.tmp_code is not None:
            result['TmpCode'] = self.tmp_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CustomTmpCode') is not None:
            self.custom_tmp_code = m.get('CustomTmpCode')
        if m.get('RenderSuccessRate') is not None:
            self.render_success_rate = m.get('RenderSuccessRate')
        if m.get('RenderSuccessTotal') is not None:
            self.render_success_total = m.get('RenderSuccessTotal')
        if m.get('SendDate') is not None:
            self.send_date = m.get('SendDate')
        if m.get('SendFailTotal') is not None:
            self.send_fail_total = m.get('SendFailTotal')
        if m.get('SendProcessTotal') is not None:
            self.send_process_total = m.get('SendProcessTotal')
        if m.get('SendSuccessRate') is not None:
            self.send_success_rate = m.get('SendSuccessRate')
        if m.get('SendSuccessTotal') is not None:
            self.send_success_total = m.get('SendSuccessTotal')
        if m.get('SendTotal') is not None:
            self.send_total = m.get('SendTotal')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('SupportRate') is not None:
            self.support_rate = m.get('SupportRate')
        if m.get('SupportTotal') is not None:
            self.support_total = m.get('SupportTotal')
        if m.get('TmpCode') is not None:
            self.tmp_code = m.get('TmpCode')
        return self


class QueryCardSmsStatisticsSendResponseBodyModel(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        records: List[QueryCardSmsStatisticsSendResponseBodyModelRecords] = None,
        total_count: int = None,
    ):
        self.page_no = page_no
        self.page_size = page_size
        self.records = records
        self.total_count = total_count

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = QueryCardSmsStatisticsSendResponseBodyModelRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class QueryCardSmsStatisticsSendResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        model: QueryCardSmsStatisticsSendResponseBodyModel = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.model = model
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.model:
            self.model.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.model is not None:
            result['Model'] = self.model.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Model') is not None:
            temp_model = QueryCardSmsStatisticsSendResponseBodyModel()
            self.model = temp_model.from_map(m['Model'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryCardSmsStatisticsSendResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryCardSmsStatisticsSendResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryCardSmsStatisticsSendResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryCardSmsStatisticsSendListRequest(TeaModel):
    def __init__(
        self,
        custom_tmp_code: str = None,
        send_date_end: str = None,
        send_date_start: str = None,
        sign_name: str = None,
        tmp_code: str = None,
    ):
        self.custom_tmp_code = custom_tmp_code
        self.send_date_end = send_date_end
        self.send_date_start = send_date_start
        self.sign_name = sign_name
        self.tmp_code = tmp_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.custom_tmp_code is not None:
            result['CustomTmpCode'] = self.custom_tmp_code
        if self.send_date_end is not None:
            result['SendDateEnd'] = self.send_date_end
        if self.send_date_start is not None:
            result['SendDateStart'] = self.send_date_start
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.tmp_code is not None:
            result['TmpCode'] = self.tmp_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CustomTmpCode') is not None:
            self.custom_tmp_code = m.get('CustomTmpCode')
        if m.get('SendDateEnd') is not None:
            self.send_date_end = m.get('SendDateEnd')
        if m.get('SendDateStart') is not None:
            self.send_date_start = m.get('SendDateStart')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('TmpCode') is not None:
            self.tmp_code = m.get('TmpCode')
        return self


class QueryCardSmsStatisticsSendListResponseBodyModel(TeaModel):
    def __init__(
        self,
        render_success_rate: float = None,
        render_success_total: int = None,
        send_date: str = None,
        send_fail_total: int = None,
        send_process_total: int = None,
        send_success_rate: float = None,
        send_success_total: int = None,
        send_total: int = None,
        support_rate: float = None,
        support_total: int = None,
    ):
        self.render_success_rate = render_success_rate
        self.render_success_total = render_success_total
        self.send_date = send_date
        self.send_fail_total = send_fail_total
        self.send_process_total = send_process_total
        self.send_success_rate = send_success_rate
        self.send_success_total = send_success_total
        self.send_total = send_total
        self.support_rate = support_rate
        self.support_total = support_total

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.render_success_rate is not None:
            result['RenderSuccessRate'] = self.render_success_rate
        if self.render_success_total is not None:
            result['RenderSuccessTotal'] = self.render_success_total
        if self.send_date is not None:
            result['SendDate'] = self.send_date
        if self.send_fail_total is not None:
            result['SendFailTotal'] = self.send_fail_total
        if self.send_process_total is not None:
            result['SendProcessTotal'] = self.send_process_total
        if self.send_success_rate is not None:
            result['SendSuccessRate'] = self.send_success_rate
        if self.send_success_total is not None:
            result['SendSuccessTotal'] = self.send_success_total
        if self.send_total is not None:
            result['SendTotal'] = self.send_total
        if self.support_rate is not None:
            result['SupportRate'] = self.support_rate
        if self.support_total is not None:
            result['SupportTotal'] = self.support_total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RenderSuccessRate') is not None:
            self.render_success_rate = m.get('RenderSuccessRate')
        if m.get('RenderSuccessTotal') is not None:
            self.render_success_total = m.get('RenderSuccessTotal')
        if m.get('SendDate') is not None:
            self.send_date = m.get('SendDate')
        if m.get('SendFailTotal') is not None:
            self.send_fail_total = m.get('SendFailTotal')
        if m.get('SendProcessTotal') is not None:
            self.send_process_total = m.get('SendProcessTotal')
        if m.get('SendSuccessRate') is not None:
            self.send_success_rate = m.get('SendSuccessRate')
        if m.get('SendSuccessTotal') is not None:
            self.send_success_total = m.get('SendSuccessTotal')
        if m.get('SendTotal') is not None:
            self.send_total = m.get('SendTotal')
        if m.get('SupportRate') is not None:
            self.support_rate = m.get('SupportRate')
        if m.get('SupportTotal') is not None:
            self.support_total = m.get('SupportTotal')
        return self


class QueryCardSmsStatisticsSendListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        model: List[QueryCardSmsStatisticsSendListResponseBodyModel] = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.model = model
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.model:
            for k in self.model:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        result['Model'] = []
        if self.model is not None:
            for k in self.model:
                result['Model'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        self.model = []
        if m.get('Model') is not None:
            for k in m.get('Model'):
                temp_model = QueryCardSmsStatisticsSendListResponseBodyModel()
                self.model.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryCardSmsStatisticsSendListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryCardSmsStatisticsSendListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryCardSmsStatisticsSendListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryCommonCustInfoRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryCommonCustInfoResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryCommonCustInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryCommonCustInfoResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryCommonCustInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryContactsListRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryContactsListResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryContactsListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryContactsListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryContactsListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryContactsListNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryContactsListNewResponseBodyList(TeaModel):
    def __init__(
        self,
        email: str = None,
        id: int = None,
        name: str = None,
        open_pkg_warning: int = None,
        open_prevent_brush_warning: int = None,
        open_send_warning: int = None,
        phone: str = None,
        receive_sign_template_audit_result: int = None,
    ):
        self.email = email
        self.id = id
        self.name = name
        self.open_pkg_warning = open_pkg_warning
        self.open_prevent_brush_warning = open_prevent_brush_warning
        self.open_send_warning = open_send_warning
        self.phone = phone
        self.receive_sign_template_audit_result = receive_sign_template_audit_result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.email is not None:
            result['Email'] = self.email
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.open_pkg_warning is not None:
            result['OpenPkgWarning'] = self.open_pkg_warning
        if self.open_prevent_brush_warning is not None:
            result['OpenPreventBrushWarning'] = self.open_prevent_brush_warning
        if self.open_send_warning is not None:
            result['OpenSendWarning'] = self.open_send_warning
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.receive_sign_template_audit_result is not None:
            result['ReceiveSignTemplateAuditResult'] = self.receive_sign_template_audit_result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OpenPkgWarning') is not None:
            self.open_pkg_warning = m.get('OpenPkgWarning')
        if m.get('OpenPreventBrushWarning') is not None:
            self.open_prevent_brush_warning = m.get('OpenPreventBrushWarning')
        if m.get('OpenSendWarning') is not None:
            self.open_send_warning = m.get('OpenSendWarning')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('ReceiveSignTemplateAuditResult') is not None:
            self.receive_sign_template_audit_result = m.get('ReceiveSignTemplateAuditResult')
        return self


class QueryContactsListNewResponseBody(TeaModel):
    def __init__(
        self,
        list: List[QueryContactsListNewResponseBodyList] = None,
        page_no: int = None,
        page_size: int = None,
        request_id: str = None,
        total: int = None,
    ):
        self.list = list
        self.page_no = page_no
        self.page_size = page_size
        self.request_id = request_id
        self.total = total

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QueryContactsListNewResponseBodyList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class QueryContactsListNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryContactsListNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryContactsListNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryDailyBillInfoLeafNewRequest(TeaModel):
    def __init__(
        self,
        bill_cycle: str = None,
        item_id: str = None,
        item_name: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        subject_item_id: str = None,
    ):
        self.bill_cycle = bill_cycle
        self.item_id = item_id
        self.item_name = item_name
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.subject_item_id = subject_item_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_cycle is not None:
            result['BillCycle'] = self.bill_cycle
        if self.item_id is not None:
            result['ItemId'] = self.item_id
        if self.item_name is not None:
            result['ItemName'] = self.item_name
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.subject_item_id is not None:
            result['SubjectItemId'] = self.subject_item_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BillCycle') is not None:
            self.bill_cycle = m.get('BillCycle')
        if m.get('ItemId') is not None:
            self.item_id = m.get('ItemId')
        if m.get('ItemName') is not None:
            self.item_name = m.get('ItemName')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SubjectItemId') is not None:
            self.subject_item_id = m.get('SubjectItemId')
        return self


class QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO(TeaModel):
    def __init__(
        self,
        add_count: int = None,
        add_date: str = None,
        add_unit: str = None,
        bill_amount: str = None,
        detail_item_name: str = None,
        single_price: str = None,
    ):
        self.add_count = add_count
        self.add_date = add_date
        self.add_unit = add_unit
        self.bill_amount = bill_amount
        self.detail_item_name = detail_item_name
        self.single_price = single_price

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.add_count is not None:
            result['AddCount'] = self.add_count
        if self.add_date is not None:
            result['AddDate'] = self.add_date
        if self.add_unit is not None:
            result['AddUnit'] = self.add_unit
        if self.bill_amount is not None:
            result['BillAmount'] = self.bill_amount
        if self.detail_item_name is not None:
            result['DetailItemName'] = self.detail_item_name
        if self.single_price is not None:
            result['SinglePrice'] = self.single_price
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AddCount') is not None:
            self.add_count = m.get('AddCount')
        if m.get('AddDate') is not None:
            self.add_date = m.get('AddDate')
        if m.get('AddUnit') is not None:
            self.add_unit = m.get('AddUnit')
        if m.get('BillAmount') is not None:
            self.bill_amount = m.get('BillAmount')
        if m.get('DetailItemName') is not None:
            self.detail_item_name = m.get('DetailItemName')
        if m.get('SinglePrice') is not None:
            self.single_price = m.get('SinglePrice')
        return self


class QueryDailyBillInfoLeafNewResponseBodyList(TeaModel):
    def __init__(
        self,
        daily_bill_detail_info_dto: List[QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO] = None,
    ):
        self.daily_bill_detail_info_dto = daily_bill_detail_info_dto

    def validate(self):
        if self.daily_bill_detail_info_dto:
            for k in self.daily_bill_detail_info_dto:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['DailyBillDetailInfoDTO'] = []
        if self.daily_bill_detail_info_dto is not None:
            for k in self.daily_bill_detail_info_dto:
                result['DailyBillDetailInfoDTO'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.daily_bill_detail_info_dto = []
        if m.get('DailyBillDetailInfoDTO') is not None:
            for k in m.get('DailyBillDetailInfoDTO'):
                temp_model = QueryDailyBillInfoLeafNewResponseBodyListDailyBillDetailInfoDTO()
                self.daily_bill_detail_info_dto.append(temp_model.from_map(k))
        return self


class QueryDailyBillInfoLeafNewResponseBody(TeaModel):
    def __init__(
        self,
        list: QueryDailyBillInfoLeafNewResponseBodyList = None,
        request_id: str = None,
    ):
        self.list = list
        self.request_id = request_id

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = QueryDailyBillInfoLeafNewResponseBodyList()
            self.list = temp_model.from_map(m['List'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QueryDailyBillInfoLeafNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryDailyBillInfoLeafNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryDailyBillInfoLeafNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryDigitalTemplateDetailRequest(TeaModel):
    def __init__(
        self,
        audit_state: str = None,
        biz_type: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        template_code: str = None,
        template_name: str = None,
    ):
        self.audit_state = audit_state
        self.biz_type = biz_type
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.template_code = template_code
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class QueryDigitalTemplateDetailResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryDigitalTemplateDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryDigitalTemplateDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryDigitalTemplateDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryDigitalTemplateDetailNewRequest(TeaModel):
    def __init__(
        self,
        audit_state: str = None,
        biz_type: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        template_code: str = None,
        template_name: str = None,
    ):
        self.audit_state = audit_state
        self.biz_type = biz_type
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.template_code = template_code
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class QueryDigitalTemplateDetailNewResponseBodyOssKeys(TeaModel):
    def __init__(
        self,
        oss_key: List[str] = None,
    ):
        self.oss_key = oss_key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.oss_key is not None:
            result['OssKey'] = self.oss_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OssKey') is not None:
            self.oss_key = m.get('OssKey')
        return self


class QueryDigitalTemplateDetailNewResponseBodyTagsTag(TeaModel):
    def __init__(
        self,
        resource_id: str = None,
        resource_type: str = None,
        tag_key: str = None,
        tag_value: str = None,
    ):
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.tag_key = tag_key
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class QueryDigitalTemplateDetailNewResponseBodyTags(TeaModel):
    def __init__(
        self,
        tag: List[QueryDigitalTemplateDetailNewResponseBodyTagsTag] = None,
    ):
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = QueryDigitalTemplateDetailNewResponseBodyTagsTag()
                self.tag.append(temp_model.from_map(k))
        return self


class QueryDigitalTemplateDetailNewResponseBody(TeaModel):
    def __init__(
        self,
        audit_info: str = None,
        audit_remark_info: str = None,
        audit_state: str = None,
        biz_type: str = None,
        expire_date_str: str = None,
        gmt_create_str: str = None,
        id: str = None,
        is_any_param: bool = None,
        is_default_template: bool = None,
        is_recently: bool = None,
        order_id: str = None,
        oss_keys: QueryDigitalTemplateDetailNewResponseBodyOssKeys = None,
        pass_err_type: str = None,
        remark: str = None,
        request_id: str = None,
        sign_type: int = None,
        sms_content: str = None,
        support_vendor: str = None,
        tags: QueryDigitalTemplateDetailNewResponseBodyTags = None,
        template_code: str = None,
        template_content: str = None,
        template_name: str = None,
        template_rule: str = None,
    ):
        self.audit_info = audit_info
        self.audit_remark_info = audit_remark_info
        self.audit_state = audit_state
        self.biz_type = biz_type
        self.expire_date_str = expire_date_str
        self.gmt_create_str = gmt_create_str
        self.id = id
        self.is_any_param = is_any_param
        self.is_default_template = is_default_template
        self.is_recently = is_recently
        self.order_id = order_id
        self.oss_keys = oss_keys
        self.pass_err_type = pass_err_type
        self.remark = remark
        self.request_id = request_id
        self.sign_type = sign_type
        self.sms_content = sms_content
        self.support_vendor = support_vendor
        self.tags = tags
        self.template_code = template_code
        self.template_content = template_content
        self.template_name = template_name
        self.template_rule = template_rule

    def validate(self):
        if self.oss_keys:
            self.oss_keys.validate()
        if self.tags:
            self.tags.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_info is not None:
            result['AuditInfo'] = self.audit_info
        if self.audit_remark_info is not None:
            result['AuditRemarkInfo'] = self.audit_remark_info
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.expire_date_str is not None:
            result['ExpireDateStr'] = self.expire_date_str
        if self.gmt_create_str is not None:
            result['GmtCreateStr'] = self.gmt_create_str
        if self.id is not None:
            result['Id'] = self.id
        if self.is_any_param is not None:
            result['IsAnyParam'] = self.is_any_param
        if self.is_default_template is not None:
            result['IsDefaultTemplate'] = self.is_default_template
        if self.is_recently is not None:
            result['IsRecently'] = self.is_recently
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.oss_keys is not None:
            result['OssKeys'] = self.oss_keys.to_map()
        if self.pass_err_type is not None:
            result['PassErrType'] = self.pass_err_type
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.sign_type is not None:
            result['SignType'] = self.sign_type
        if self.sms_content is not None:
            result['SmsContent'] = self.sms_content
        if self.support_vendor is not None:
            result['SupportVendor'] = self.support_vendor
        if self.tags is not None:
            result['Tags'] = self.tags.to_map()
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_content is not None:
            result['TemplateContent'] = self.template_content
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.template_rule is not None:
            result['TemplateRule'] = self.template_rule
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditInfo') is not None:
            self.audit_info = m.get('AuditInfo')
        if m.get('AuditRemarkInfo') is not None:
            self.audit_remark_info = m.get('AuditRemarkInfo')
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('ExpireDateStr') is not None:
            self.expire_date_str = m.get('ExpireDateStr')
        if m.get('GmtCreateStr') is not None:
            self.gmt_create_str = m.get('GmtCreateStr')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsAnyParam') is not None:
            self.is_any_param = m.get('IsAnyParam')
        if m.get('IsDefaultTemplate') is not None:
            self.is_default_template = m.get('IsDefaultTemplate')
        if m.get('IsRecently') is not None:
            self.is_recently = m.get('IsRecently')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OssKeys') is not None:
            temp_model = QueryDigitalTemplateDetailNewResponseBodyOssKeys()
            self.oss_keys = temp_model.from_map(m['OssKeys'])
        if m.get('PassErrType') is not None:
            self.pass_err_type = m.get('PassErrType')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SignType') is not None:
            self.sign_type = m.get('SignType')
        if m.get('SmsContent') is not None:
            self.sms_content = m.get('SmsContent')
        if m.get('SupportVendor') is not None:
            self.support_vendor = m.get('SupportVendor')
        if m.get('Tags') is not None:
            temp_model = QueryDigitalTemplateDetailNewResponseBodyTags()
            self.tags = temp_model.from_map(m['Tags'])
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateContent') is not None:
            self.template_content = m.get('TemplateContent')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('TemplateRule') is not None:
            self.template_rule = m.get('TemplateRule')
        return self


class QueryDigitalTemplateDetailNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryDigitalTemplateDetailNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryDigitalTemplateDetailNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryDigitalTemplateLastRangeRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        limit: int = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        template_name: str = None,
    ):
        self.biz_type = biz_type
        self.limit = limit
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.limit is not None:
            result['Limit'] = self.limit
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('Limit') is not None:
            self.limit = m.get('Limit')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class QueryDigitalTemplateLastRangeResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryDigitalTemplateLastRangeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryDigitalTemplateLastRangeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryDigitalTemplateLastRangeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryDigitalTemplateLastRangeNewRequest(TeaModel):
    def __init__(
        self,
        audit_state: str = None,
        biz_type: str = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        prod_type: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        template_name: str = None,
    ):
        self.audit_state = audit_state
        self.biz_type = biz_type
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.prod_type = prod_type
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_type is not None:
            result['ProdType'] = self.prod_type
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdType') is not None:
            self.prod_type = m.get('ProdType')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate(TeaModel):
    def __init__(
        self,
        audit_info: str = None,
        audit_remark_info: str = None,
        audit_state: str = None,
        biz_type: str = None,
        expire_date_str: str = None,
        gmt_create_str: str = None,
        id: str = None,
        is_any_param: bool = None,
        is_default_template: bool = None,
        is_recently: bool = None,
        order_id: str = None,
        pass_err_type: str = None,
        remark: str = None,
        sign_type: int = None,
        sms_content: str = None,
        support_vendor: str = None,
        template_code: str = None,
        template_content: str = None,
        template_name: str = None,
        template_rule: str = None,
    ):
        self.audit_info = audit_info
        self.audit_remark_info = audit_remark_info
        self.audit_state = audit_state
        self.biz_type = biz_type
        self.expire_date_str = expire_date_str
        self.gmt_create_str = gmt_create_str
        self.id = id
        self.is_any_param = is_any_param
        self.is_default_template = is_default_template
        self.is_recently = is_recently
        self.order_id = order_id
        self.pass_err_type = pass_err_type
        self.remark = remark
        self.sign_type = sign_type
        self.sms_content = sms_content
        self.support_vendor = support_vendor
        self.template_code = template_code
        self.template_content = template_content
        self.template_name = template_name
        self.template_rule = template_rule

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_info is not None:
            result['AuditInfo'] = self.audit_info
        if self.audit_remark_info is not None:
            result['AuditRemarkInfo'] = self.audit_remark_info
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.expire_date_str is not None:
            result['ExpireDateStr'] = self.expire_date_str
        if self.gmt_create_str is not None:
            result['GmtCreateStr'] = self.gmt_create_str
        if self.id is not None:
            result['Id'] = self.id
        if self.is_any_param is not None:
            result['IsAnyParam'] = self.is_any_param
        if self.is_default_template is not None:
            result['IsDefaultTemplate'] = self.is_default_template
        if self.is_recently is not None:
            result['IsRecently'] = self.is_recently
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.pass_err_type is not None:
            result['PassErrType'] = self.pass_err_type
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.sign_type is not None:
            result['SignType'] = self.sign_type
        if self.sms_content is not None:
            result['SmsContent'] = self.sms_content
        if self.support_vendor is not None:
            result['SupportVendor'] = self.support_vendor
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_content is not None:
            result['TemplateContent'] = self.template_content
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.template_rule is not None:
            result['TemplateRule'] = self.template_rule
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditInfo') is not None:
            self.audit_info = m.get('AuditInfo')
        if m.get('AuditRemarkInfo') is not None:
            self.audit_remark_info = m.get('AuditRemarkInfo')
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('ExpireDateStr') is not None:
            self.expire_date_str = m.get('ExpireDateStr')
        if m.get('GmtCreateStr') is not None:
            self.gmt_create_str = m.get('GmtCreateStr')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsAnyParam') is not None:
            self.is_any_param = m.get('IsAnyParam')
        if m.get('IsDefaultTemplate') is not None:
            self.is_default_template = m.get('IsDefaultTemplate')
        if m.get('IsRecently') is not None:
            self.is_recently = m.get('IsRecently')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('PassErrType') is not None:
            self.pass_err_type = m.get('PassErrType')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('SignType') is not None:
            self.sign_type = m.get('SignType')
        if m.get('SmsContent') is not None:
            self.sms_content = m.get('SmsContent')
        if m.get('SupportVendor') is not None:
            self.support_vendor = m.get('SupportVendor')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateContent') is not None:
            self.template_content = m.get('TemplateContent')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('TemplateRule') is not None:
            self.template_rule = m.get('TemplateRule')
        return self


class QueryDigitalTemplateLastRangeNewResponseBodyList(TeaModel):
    def __init__(
        self,
        sms_template: List[QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate] = None,
    ):
        self.sms_template = sms_template

    def validate(self):
        if self.sms_template:
            for k in self.sms_template:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SmsTemplate'] = []
        if self.sms_template is not None:
            for k in self.sms_template:
                result['SmsTemplate'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.sms_template = []
        if m.get('SmsTemplate') is not None:
            for k in m.get('SmsTemplate'):
                temp_model = QueryDigitalTemplateLastRangeNewResponseBodyListSmsTemplate()
                self.sms_template.append(temp_model.from_map(k))
        return self


class QueryDigitalTemplateLastRangeNewResponseBodyTagsTag(TeaModel):
    def __init__(
        self,
        resource_id: str = None,
        resource_type: str = None,
        tag_key: str = None,
        tag_value: str = None,
    ):
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.tag_key = tag_key
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class QueryDigitalTemplateLastRangeNewResponseBodyTags(TeaModel):
    def __init__(
        self,
        tag: List[QueryDigitalTemplateLastRangeNewResponseBodyTagsTag] = None,
    ):
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = QueryDigitalTemplateLastRangeNewResponseBodyTagsTag()
                self.tag.append(temp_model.from_map(k))
        return self


class QueryDigitalTemplateLastRangeNewResponseBody(TeaModel):
    def __init__(
        self,
        list: QueryDigitalTemplateLastRangeNewResponseBodyList = None,
        request_id: str = None,
        tags: QueryDigitalTemplateLastRangeNewResponseBodyTags = None,
    ):
        self.list = list
        self.request_id = request_id
        self.tags = tags

    def validate(self):
        if self.list:
            self.list.validate()
        if self.tags:
            self.tags.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.tags is not None:
            result['Tags'] = self.tags.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = QueryDigitalTemplateLastRangeNewResponseBodyList()
            self.list = temp_model.from_map(m['List'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Tags') is not None:
            temp_model = QueryDigitalTemplateLastRangeNewResponseBodyTags()
            self.tags = temp_model.from_map(m['Tags'])
        return self


class QueryDigitalTemplateLastRangeNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryDigitalTemplateLastRangeNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryDigitalTemplateLastRangeNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryDigitalTemplatePageListRequest(TeaModel):
    def __init__(
        self,
        audit_state: str = None,
        biz_type: str = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        template_code: str = None,
        template_name: str = None,
    ):
        self.audit_state = audit_state
        self.biz_type = biz_type
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.template_code = template_code
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class QueryDigitalTemplatePageListResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryDigitalTemplatePageListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryDigitalTemplatePageListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryDigitalTemplatePageListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryDigitalTemplatePageListNewRequest(TeaModel):
    def __init__(
        self,
        audit_state: str = None,
        biz_type: str = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        template_code: str = None,
        template_name: str = None,
    ):
        self.audit_state = audit_state
        self.biz_type = biz_type
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.template_code = template_code
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTagsTag(TeaModel):
    def __init__(
        self,
        resource_id: str = None,
        resource_type: str = None,
        tag_key: str = None,
        tag_value: str = None,
    ):
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.tag_key = tag_key
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTags(TeaModel):
    def __init__(
        self,
        tag: List[QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTagsTag] = None,
    ):
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTagsTag()
                self.tag.append(temp_model.from_map(k))
        return self


class QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate(TeaModel):
    def __init__(
        self,
        audit_info: str = None,
        audit_remark_info: str = None,
        audit_state: str = None,
        biz_type: str = None,
        expire_date_str: str = None,
        gmt_create_str: str = None,
        id: str = None,
        is_any_param: bool = None,
        is_default_template: bool = None,
        is_recently: bool = None,
        order_id: str = None,
        pass_err_type: str = None,
        remark: str = None,
        sign_type: int = None,
        sms_content: str = None,
        support_vendor: str = None,
        tags: QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTags = None,
        template_code: str = None,
        template_content: str = None,
        template_name: str = None,
        template_rule: str = None,
    ):
        self.audit_info = audit_info
        self.audit_remark_info = audit_remark_info
        self.audit_state = audit_state
        self.biz_type = biz_type
        self.expire_date_str = expire_date_str
        self.gmt_create_str = gmt_create_str
        self.id = id
        self.is_any_param = is_any_param
        self.is_default_template = is_default_template
        self.is_recently = is_recently
        self.order_id = order_id
        self.pass_err_type = pass_err_type
        self.remark = remark
        self.sign_type = sign_type
        self.sms_content = sms_content
        self.support_vendor = support_vendor
        self.tags = tags
        self.template_code = template_code
        self.template_content = template_content
        self.template_name = template_name
        self.template_rule = template_rule

    def validate(self):
        if self.tags:
            self.tags.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_info is not None:
            result['AuditInfo'] = self.audit_info
        if self.audit_remark_info is not None:
            result['AuditRemarkInfo'] = self.audit_remark_info
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.expire_date_str is not None:
            result['ExpireDateStr'] = self.expire_date_str
        if self.gmt_create_str is not None:
            result['GmtCreateStr'] = self.gmt_create_str
        if self.id is not None:
            result['Id'] = self.id
        if self.is_any_param is not None:
            result['IsAnyParam'] = self.is_any_param
        if self.is_default_template is not None:
            result['IsDefaultTemplate'] = self.is_default_template
        if self.is_recently is not None:
            result['IsRecently'] = self.is_recently
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.pass_err_type is not None:
            result['PassErrType'] = self.pass_err_type
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.sign_type is not None:
            result['SignType'] = self.sign_type
        if self.sms_content is not None:
            result['SmsContent'] = self.sms_content
        if self.support_vendor is not None:
            result['SupportVendor'] = self.support_vendor
        if self.tags is not None:
            result['Tags'] = self.tags.to_map()
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_content is not None:
            result['TemplateContent'] = self.template_content
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.template_rule is not None:
            result['TemplateRule'] = self.template_rule
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditInfo') is not None:
            self.audit_info = m.get('AuditInfo')
        if m.get('AuditRemarkInfo') is not None:
            self.audit_remark_info = m.get('AuditRemarkInfo')
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('ExpireDateStr') is not None:
            self.expire_date_str = m.get('ExpireDateStr')
        if m.get('GmtCreateStr') is not None:
            self.gmt_create_str = m.get('GmtCreateStr')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsAnyParam') is not None:
            self.is_any_param = m.get('IsAnyParam')
        if m.get('IsDefaultTemplate') is not None:
            self.is_default_template = m.get('IsDefaultTemplate')
        if m.get('IsRecently') is not None:
            self.is_recently = m.get('IsRecently')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('PassErrType') is not None:
            self.pass_err_type = m.get('PassErrType')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('SignType') is not None:
            self.sign_type = m.get('SignType')
        if m.get('SmsContent') is not None:
            self.sms_content = m.get('SmsContent')
        if m.get('SupportVendor') is not None:
            self.support_vendor = m.get('SupportVendor')
        if m.get('Tags') is not None:
            temp_model = QueryDigitalTemplatePageListNewResponseBodyListSmsTemplateTags()
            self.tags = temp_model.from_map(m['Tags'])
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateContent') is not None:
            self.template_content = m.get('TemplateContent')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('TemplateRule') is not None:
            self.template_rule = m.get('TemplateRule')
        return self


class QueryDigitalTemplatePageListNewResponseBodyList(TeaModel):
    def __init__(
        self,
        sms_template: List[QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate] = None,
    ):
        self.sms_template = sms_template

    def validate(self):
        if self.sms_template:
            for k in self.sms_template:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SmsTemplate'] = []
        if self.sms_template is not None:
            for k in self.sms_template:
                result['SmsTemplate'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.sms_template = []
        if m.get('SmsTemplate') is not None:
            for k in m.get('SmsTemplate'):
                temp_model = QueryDigitalTemplatePageListNewResponseBodyListSmsTemplate()
                self.sms_template.append(temp_model.from_map(k))
        return self


class QueryDigitalTemplatePageListNewResponseBody(TeaModel):
    def __init__(
        self,
        list: QueryDigitalTemplatePageListNewResponseBodyList = None,
        page_no: int = None,
        page_size: int = None,
        request_id: str = None,
        total: int = None,
    ):
        self.list = list
        self.page_no = page_no
        self.page_size = page_size
        self.request_id = request_id
        self.total = total

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = QueryDigitalTemplatePageListNewResponseBodyList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class QueryDigitalTemplatePageListNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryDigitalTemplatePageListNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryDigitalTemplatePageListNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryDomainListRequest(TeaModel):
    def __init__(
        self,
        domain: str = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.domain = domain
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryDomainListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QueryDomainListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryDomainListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryDomainListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryDomainListNewRequest(TeaModel):
    def __init__(
        self,
        domain: str = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: str = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.domain = domain
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryDomainListNewResponseBodyList(TeaModel):
    def __init__(
        self,
        audit_status: int = None,
        domain: str = None,
        gmt_create: str = None,
    ):
        self.audit_status = audit_status
        self.domain = domain
        self.gmt_create = gmt_create

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_status is not None:
            result['AuditStatus'] = self.audit_status
        if self.domain is not None:
            result['Domain'] = self.domain
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditStatus') is not None:
            self.audit_status = m.get('AuditStatus')
        if m.get('Domain') is not None:
            self.domain = m.get('Domain')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        return self


class QueryDomainListNewResponseBody(TeaModel):
    def __init__(
        self,
        list: List[QueryDomainListNewResponseBodyList] = None,
        page_no: int = None,
        page_size: int = None,
        request_id: str = None,
        total: int = None,
    ):
        self.list = list
        self.page_no = page_no
        self.page_size = page_size
        self.request_id = request_id
        self.total = total

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QueryDomainListNewResponseBodyList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class QueryDomainListNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryDomainListNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryDomainListNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryExportSendRecordListNewRequest(TeaModel):
    def __init__(
        self,
        apply_status: int = None,
        biz_type: str = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.apply_status = apply_status
        self.biz_type = biz_type
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_status is not None:
            result['ApplyStatus'] = self.apply_status
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ApplyStatus') is not None:
            self.apply_status = m.get('ApplyStatus')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse(TeaModel):
    def __init__(
        self,
        file_feature: str = None,
        file_url: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        handler_status: int = None,
        id: int = None,
    ):
        self.file_feature = file_feature
        self.file_url = file_url
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.handler_status = handler_status
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_feature is not None:
            result['FileFeature'] = self.file_feature
        if self.file_url is not None:
            result['FileUrl'] = self.file_url
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.handler_status is not None:
            result['HandlerStatus'] = self.handler_status
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileFeature') is not None:
            self.file_feature = m.get('FileFeature')
        if m.get('FileUrl') is not None:
            self.file_url = m.get('FileUrl')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('HandlerStatus') is not None:
            self.handler_status = m.get('HandlerStatus')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class QueryExportSendRecordListNewResponseBodyList(TeaModel):
    def __init__(
        self,
        fc_file_up_ins_response: List[QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse] = None,
    ):
        self.fc_file_up_ins_response = fc_file_up_ins_response

    def validate(self):
        if self.fc_file_up_ins_response:
            for k in self.fc_file_up_ins_response:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['FcFileUpInsResponse'] = []
        if self.fc_file_up_ins_response is not None:
            for k in self.fc_file_up_ins_response:
                result['FcFileUpInsResponse'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.fc_file_up_ins_response = []
        if m.get('FcFileUpInsResponse') is not None:
            for k in m.get('FcFileUpInsResponse'):
                temp_model = QueryExportSendRecordListNewResponseBodyListFcFileUpInsResponse()
                self.fc_file_up_ins_response.append(temp_model.from_map(k))
        return self


class QueryExportSendRecordListNewResponseBody(TeaModel):
    def __init__(
        self,
        list: QueryExportSendRecordListNewResponseBodyList = None,
        page_no: int = None,
        page_size: int = None,
        request_id: str = None,
        total: int = None,
    ):
        self.list = list
        self.page_no = page_no
        self.page_size = page_size
        self.request_id = request_id
        self.total = total

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = QueryExportSendRecordListNewResponseBodyList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class QueryExportSendRecordListNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryExportSendRecordListNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryExportSendRecordListNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryFailDetailDownloadRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        status: str = None,
        task_id: int = None,
        task_instance_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.status = status
        # This parameter is required.
        self.task_id = task_id
        # This parameter is required.
        self.task_instance_id = task_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_instance_id is not None:
            result['TaskInstanceId'] = self.task_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskInstanceId') is not None:
            self.task_instance_id = m.get('TaskInstanceId')
        return self


class QueryFailDetailDownloadResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryFailDetailDownloadResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryFailDetailDownloadResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryFailDetailDownloadResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryFailDetailDownloadNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        status: str = None,
        task_id: int = None,
        task_instance_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.status = status
        # This parameter is required.
        self.task_id = task_id
        # This parameter is required.
        self.task_instance_id = task_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_instance_id is not None:
            result['TaskInstanceId'] = self.task_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskInstanceId') is not None:
            self.task_instance_id = m.get('TaskInstanceId')
        return self


class QueryFailDetailDownloadNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class QueryFailDetailDownloadNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryFailDetailDownloadNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryFailDetailDownloadNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryFlowLimitRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryFlowLimitResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryFlowLimitResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryFlowLimitResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryFlowLimitResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryFlowLimitNewRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.biz_type = biz_type
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryFlowLimitNewResponseBody(TeaModel):
    def __init__(
        self,
        daily_limit: int = None,
        hour_limit: int = None,
        minute_limit: int = None,
        request_id: str = None,
    ):
        self.daily_limit = daily_limit
        self.hour_limit = hour_limit
        self.minute_limit = minute_limit
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.daily_limit is not None:
            result['DailyLimit'] = self.daily_limit
        if self.hour_limit is not None:
            result['HourLimit'] = self.hour_limit
        if self.minute_limit is not None:
            result['MinuteLimit'] = self.minute_limit
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DailyLimit') is not None:
            self.daily_limit = m.get('DailyLimit')
        if m.get('HourLimit') is not None:
            self.hour_limit = m.get('HourLimit')
        if m.get('MinuteLimit') is not None:
            self.minute_limit = m.get('MinuteLimit')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QueryFlowLimitNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryFlowLimitNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryFlowLimitNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryIndexColRecordRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        status: str = None,
        task_id: int = None,
        task_instance_id: int = None,
    ):
        # This parameter is required.
        self.biz_type = biz_type
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.status = status
        # This parameter is required.
        self.task_id = task_id
        # This parameter is required.
        self.task_instance_id = task_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.status is not None:
            result['Status'] = self.status
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_instance_id is not None:
            result['TaskInstanceId'] = self.task_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskInstanceId') is not None:
            self.task_instance_id = m.get('TaskInstanceId')
        return self


class QueryIndexColRecordResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryIndexColRecordResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryIndexColRecordResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryIndexColRecordResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryLearningStatusNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        type: str = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class QueryLearningStatusNewResponseBody(TeaModel):
    def __init__(
        self,
        learning_status: str = None,
        request_id: str = None,
    ):
        self.learning_status = learning_status
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.learning_status is not None:
            result['LearningStatus'] = self.learning_status
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('LearningStatus') is not None:
            self.learning_status = m.get('LearningStatus')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QueryLearningStatusNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryLearningStatusNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryLearningStatusNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMarketingAssistantStatusRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryMarketingAssistantStatusResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QueryMarketingAssistantStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryMarketingAssistantStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMarketingAssistantStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMessageCallbackNewRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        callback_url: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.biz_type = biz_type
        self.callback_url = callback_url
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.callback_url is not None:
            result['CallbackUrl'] = self.callback_url
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('CallbackUrl') is not None:
            self.callback_url = m.get('CallbackUrl')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryMessageCallbackNewResponseBody(TeaModel):
    def __init__(
        self,
        aiccs_call_mid_record_callback_url: str = None,
        aiccs_call_record_callback_url: str = None,
        aiccs_sent_record_callback_url: str = None,
        artc_cdr_report_call_back_url: str = None,
        artc_temp_status_report_call_back_url: str = None,
        card_dync_res_callback_url: str = None,
        card_template_call_back_url: str = None,
        card_verder_call_back_url: str = None,
        dcdp_callback_url: str = None,
        digit_sms_template_call_back_url: str = None,
        globe_sms_report_callback: bool = None,
        globe_sms_report_callback_url: str = None,
        is_aiccs_call_mid_record: bool = None,
        is_aiccs_call_record: bool = None,
        is_aiccs_sent_record: bool = None,
        is_artc_cdr_report_call_back: bool = None,
        is_artc_temp_status_report_call_back: bool = None,
        is_dcdp_callback: bool = None,
        is_digit_sms_template_call_back: bool = None,
        is_globe_sms_report_callback: bool = None,
        is_opened: bool = None,
        is_secret_report_message_callback: bool = None,
        is_secret_sms_message_callback: bool = None,
        is_sign_report_callback: bool = None,
        is_smart_call_asr_call_back: bool = None,
        is_sms_report_message_callback: bool = None,
        is_sms_up_message_callback: bool = None,
        is_template_report_callback: bool = None,
        is_voice_asr_call_back: bool = None,
        is_voice_call_mid_state_call_back: bool = None,
        is_voice_call_record_call_back: bool = None,
        is_voice_recording_call_back: bool = None,
        report_callback_url: str = None,
        request_id: str = None,
        secret_callback_url: str = None,
        secret_sms_callback_url: str = None,
        short_link_call_back_url: str = None,
        sign_report_callback_url: str = None,
        smart_call_asr_call_back_url: str = None,
        template_report_callback_url: str = None,
        up_callback_url: str = None,
        voice_asr_call_back_url: str = None,
        voice_call_mid_state_call_back_url: str = None,
        voice_call_record_call_back_url: str = None,
        voice_recording_call_back_url: str = None,
    ):
        self.aiccs_call_mid_record_callback_url = aiccs_call_mid_record_callback_url
        self.aiccs_call_record_callback_url = aiccs_call_record_callback_url
        self.aiccs_sent_record_callback_url = aiccs_sent_record_callback_url
        self.artc_cdr_report_call_back_url = artc_cdr_report_call_back_url
        self.artc_temp_status_report_call_back_url = artc_temp_status_report_call_back_url
        self.card_dync_res_callback_url = card_dync_res_callback_url
        self.card_template_call_back_url = card_template_call_back_url
        self.card_verder_call_back_url = card_verder_call_back_url
        self.dcdp_callback_url = dcdp_callback_url
        self.digit_sms_template_call_back_url = digit_sms_template_call_back_url
        self.globe_sms_report_callback = globe_sms_report_callback
        self.globe_sms_report_callback_url = globe_sms_report_callback_url
        self.is_aiccs_call_mid_record = is_aiccs_call_mid_record
        self.is_aiccs_call_record = is_aiccs_call_record
        self.is_aiccs_sent_record = is_aiccs_sent_record
        self.is_artc_cdr_report_call_back = is_artc_cdr_report_call_back
        self.is_artc_temp_status_report_call_back = is_artc_temp_status_report_call_back
        self.is_dcdp_callback = is_dcdp_callback
        self.is_digit_sms_template_call_back = is_digit_sms_template_call_back
        self.is_globe_sms_report_callback = is_globe_sms_report_callback
        self.is_opened = is_opened
        self.is_secret_report_message_callback = is_secret_report_message_callback
        self.is_secret_sms_message_callback = is_secret_sms_message_callback
        self.is_sign_report_callback = is_sign_report_callback
        self.is_smart_call_asr_call_back = is_smart_call_asr_call_back
        self.is_sms_report_message_callback = is_sms_report_message_callback
        self.is_sms_up_message_callback = is_sms_up_message_callback
        self.is_template_report_callback = is_template_report_callback
        self.is_voice_asr_call_back = is_voice_asr_call_back
        self.is_voice_call_mid_state_call_back = is_voice_call_mid_state_call_back
        self.is_voice_call_record_call_back = is_voice_call_record_call_back
        self.is_voice_recording_call_back = is_voice_recording_call_back
        self.report_callback_url = report_callback_url
        self.request_id = request_id
        self.secret_callback_url = secret_callback_url
        self.secret_sms_callback_url = secret_sms_callback_url
        self.short_link_call_back_url = short_link_call_back_url
        self.sign_report_callback_url = sign_report_callback_url
        self.smart_call_asr_call_back_url = smart_call_asr_call_back_url
        self.template_report_callback_url = template_report_callback_url
        self.up_callback_url = up_callback_url
        self.voice_asr_call_back_url = voice_asr_call_back_url
        self.voice_call_mid_state_call_back_url = voice_call_mid_state_call_back_url
        self.voice_call_record_call_back_url = voice_call_record_call_back_url
        self.voice_recording_call_back_url = voice_recording_call_back_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aiccs_call_mid_record_callback_url is not None:
            result['AiccsCallMidRecordCallbackUrl'] = self.aiccs_call_mid_record_callback_url
        if self.aiccs_call_record_callback_url is not None:
            result['AiccsCallRecordCallbackUrl'] = self.aiccs_call_record_callback_url
        if self.aiccs_sent_record_callback_url is not None:
            result['AiccsSentRecordCallbackUrl'] = self.aiccs_sent_record_callback_url
        if self.artc_cdr_report_call_back_url is not None:
            result['ArtcCdrReportCallBackUrl'] = self.artc_cdr_report_call_back_url
        if self.artc_temp_status_report_call_back_url is not None:
            result['ArtcTempStatusReportCallBackUrl'] = self.artc_temp_status_report_call_back_url
        if self.card_dync_res_callback_url is not None:
            result['CardDyncResCallbackUrl'] = self.card_dync_res_callback_url
        if self.card_template_call_back_url is not None:
            result['CardTemplateCallBackUrl'] = self.card_template_call_back_url
        if self.card_verder_call_back_url is not None:
            result['CardVerderCallBackUrl'] = self.card_verder_call_back_url
        if self.dcdp_callback_url is not None:
            result['DcdpCallbackUrl'] = self.dcdp_callback_url
        if self.digit_sms_template_call_back_url is not None:
            result['DigitSmsTemplateCallBackUrl'] = self.digit_sms_template_call_back_url
        if self.globe_sms_report_callback is not None:
            result['GlobeSmsReportCallback'] = self.globe_sms_report_callback
        if self.globe_sms_report_callback_url is not None:
            result['GlobeSmsReportCallbackUrl'] = self.globe_sms_report_callback_url
        if self.is_aiccs_call_mid_record is not None:
            result['IsAiccsCallMidRecord'] = self.is_aiccs_call_mid_record
        if self.is_aiccs_call_record is not None:
            result['IsAiccsCallRecord'] = self.is_aiccs_call_record
        if self.is_aiccs_sent_record is not None:
            result['IsAiccsSentRecord'] = self.is_aiccs_sent_record
        if self.is_artc_cdr_report_call_back is not None:
            result['IsArtcCdrReportCallBack'] = self.is_artc_cdr_report_call_back
        if self.is_artc_temp_status_report_call_back is not None:
            result['IsArtcTempStatusReportCallBack'] = self.is_artc_temp_status_report_call_back
        if self.is_dcdp_callback is not None:
            result['IsDcdpCallback'] = self.is_dcdp_callback
        if self.is_digit_sms_template_call_back is not None:
            result['IsDigitSmsTemplateCallBack'] = self.is_digit_sms_template_call_back
        if self.is_globe_sms_report_callback is not None:
            result['IsGlobeSmsReportCallback'] = self.is_globe_sms_report_callback
        if self.is_opened is not None:
            result['IsOpened'] = self.is_opened
        if self.is_secret_report_message_callback is not None:
            result['IsSecretReportMessageCallback'] = self.is_secret_report_message_callback
        if self.is_secret_sms_message_callback is not None:
            result['IsSecretSmsMessageCallback'] = self.is_secret_sms_message_callback
        if self.is_sign_report_callback is not None:
            result['IsSignReportCallback'] = self.is_sign_report_callback
        if self.is_smart_call_asr_call_back is not None:
            result['IsSmartCallAsrCallBack'] = self.is_smart_call_asr_call_back
        if self.is_sms_report_message_callback is not None:
            result['IsSmsReportMessageCallback'] = self.is_sms_report_message_callback
        if self.is_sms_up_message_callback is not None:
            result['IsSmsUpMessageCallback'] = self.is_sms_up_message_callback
        if self.is_template_report_callback is not None:
            result['IsTemplateReportCallback'] = self.is_template_report_callback
        if self.is_voice_asr_call_back is not None:
            result['IsVoiceAsrCallBack'] = self.is_voice_asr_call_back
        if self.is_voice_call_mid_state_call_back is not None:
            result['IsVoiceCallMidStateCallBack'] = self.is_voice_call_mid_state_call_back
        if self.is_voice_call_record_call_back is not None:
            result['IsVoiceCallRecordCallBack'] = self.is_voice_call_record_call_back
        if self.is_voice_recording_call_back is not None:
            result['IsVoiceRecordingCallBack'] = self.is_voice_recording_call_back
        if self.report_callback_url is not None:
            result['ReportCallbackUrl'] = self.report_callback_url
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.secret_callback_url is not None:
            result['SecretCallbackUrl'] = self.secret_callback_url
        if self.secret_sms_callback_url is not None:
            result['SecretSmsCallbackUrl'] = self.secret_sms_callback_url
        if self.short_link_call_back_url is not None:
            result['ShortLinkCallBackUrl'] = self.short_link_call_back_url
        if self.sign_report_callback_url is not None:
            result['SignReportCallbackUrl'] = self.sign_report_callback_url
        if self.smart_call_asr_call_back_url is not None:
            result['SmartCallAsrCallBackUrl'] = self.smart_call_asr_call_back_url
        if self.template_report_callback_url is not None:
            result['TemplateReportCallbackUrl'] = self.template_report_callback_url
        if self.up_callback_url is not None:
            result['UpCallbackUrl'] = self.up_callback_url
        if self.voice_asr_call_back_url is not None:
            result['VoiceAsrCallBackUrl'] = self.voice_asr_call_back_url
        if self.voice_call_mid_state_call_back_url is not None:
            result['VoiceCallMidStateCallBackUrl'] = self.voice_call_mid_state_call_back_url
        if self.voice_call_record_call_back_url is not None:
            result['VoiceCallRecordCallBackUrl'] = self.voice_call_record_call_back_url
        if self.voice_recording_call_back_url is not None:
            result['VoiceRecordingCallBackUrl'] = self.voice_recording_call_back_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AiccsCallMidRecordCallbackUrl') is not None:
            self.aiccs_call_mid_record_callback_url = m.get('AiccsCallMidRecordCallbackUrl')
        if m.get('AiccsCallRecordCallbackUrl') is not None:
            self.aiccs_call_record_callback_url = m.get('AiccsCallRecordCallbackUrl')
        if m.get('AiccsSentRecordCallbackUrl') is not None:
            self.aiccs_sent_record_callback_url = m.get('AiccsSentRecordCallbackUrl')
        if m.get('ArtcCdrReportCallBackUrl') is not None:
            self.artc_cdr_report_call_back_url = m.get('ArtcCdrReportCallBackUrl')
        if m.get('ArtcTempStatusReportCallBackUrl') is not None:
            self.artc_temp_status_report_call_back_url = m.get('ArtcTempStatusReportCallBackUrl')
        if m.get('CardDyncResCallbackUrl') is not None:
            self.card_dync_res_callback_url = m.get('CardDyncResCallbackUrl')
        if m.get('CardTemplateCallBackUrl') is not None:
            self.card_template_call_back_url = m.get('CardTemplateCallBackUrl')
        if m.get('CardVerderCallBackUrl') is not None:
            self.card_verder_call_back_url = m.get('CardVerderCallBackUrl')
        if m.get('DcdpCallbackUrl') is not None:
            self.dcdp_callback_url = m.get('DcdpCallbackUrl')
        if m.get('DigitSmsTemplateCallBackUrl') is not None:
            self.digit_sms_template_call_back_url = m.get('DigitSmsTemplateCallBackUrl')
        if m.get('GlobeSmsReportCallback') is not None:
            self.globe_sms_report_callback = m.get('GlobeSmsReportCallback')
        if m.get('GlobeSmsReportCallbackUrl') is not None:
            self.globe_sms_report_callback_url = m.get('GlobeSmsReportCallbackUrl')
        if m.get('IsAiccsCallMidRecord') is not None:
            self.is_aiccs_call_mid_record = m.get('IsAiccsCallMidRecord')
        if m.get('IsAiccsCallRecord') is not None:
            self.is_aiccs_call_record = m.get('IsAiccsCallRecord')
        if m.get('IsAiccsSentRecord') is not None:
            self.is_aiccs_sent_record = m.get('IsAiccsSentRecord')
        if m.get('IsArtcCdrReportCallBack') is not None:
            self.is_artc_cdr_report_call_back = m.get('IsArtcCdrReportCallBack')
        if m.get('IsArtcTempStatusReportCallBack') is not None:
            self.is_artc_temp_status_report_call_back = m.get('IsArtcTempStatusReportCallBack')
        if m.get('IsDcdpCallback') is not None:
            self.is_dcdp_callback = m.get('IsDcdpCallback')
        if m.get('IsDigitSmsTemplateCallBack') is not None:
            self.is_digit_sms_template_call_back = m.get('IsDigitSmsTemplateCallBack')
        if m.get('IsGlobeSmsReportCallback') is not None:
            self.is_globe_sms_report_callback = m.get('IsGlobeSmsReportCallback')
        if m.get('IsOpened') is not None:
            self.is_opened = m.get('IsOpened')
        if m.get('IsSecretReportMessageCallback') is not None:
            self.is_secret_report_message_callback = m.get('IsSecretReportMessageCallback')
        if m.get('IsSecretSmsMessageCallback') is not None:
            self.is_secret_sms_message_callback = m.get('IsSecretSmsMessageCallback')
        if m.get('IsSignReportCallback') is not None:
            self.is_sign_report_callback = m.get('IsSignReportCallback')
        if m.get('IsSmartCallAsrCallBack') is not None:
            self.is_smart_call_asr_call_back = m.get('IsSmartCallAsrCallBack')
        if m.get('IsSmsReportMessageCallback') is not None:
            self.is_sms_report_message_callback = m.get('IsSmsReportMessageCallback')
        if m.get('IsSmsUpMessageCallback') is not None:
            self.is_sms_up_message_callback = m.get('IsSmsUpMessageCallback')
        if m.get('IsTemplateReportCallback') is not None:
            self.is_template_report_callback = m.get('IsTemplateReportCallback')
        if m.get('IsVoiceAsrCallBack') is not None:
            self.is_voice_asr_call_back = m.get('IsVoiceAsrCallBack')
        if m.get('IsVoiceCallMidStateCallBack') is not None:
            self.is_voice_call_mid_state_call_back = m.get('IsVoiceCallMidStateCallBack')
        if m.get('IsVoiceCallRecordCallBack') is not None:
            self.is_voice_call_record_call_back = m.get('IsVoiceCallRecordCallBack')
        if m.get('IsVoiceRecordingCallBack') is not None:
            self.is_voice_recording_call_back = m.get('IsVoiceRecordingCallBack')
        if m.get('ReportCallbackUrl') is not None:
            self.report_callback_url = m.get('ReportCallbackUrl')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SecretCallbackUrl') is not None:
            self.secret_callback_url = m.get('SecretCallbackUrl')
        if m.get('SecretSmsCallbackUrl') is not None:
            self.secret_sms_callback_url = m.get('SecretSmsCallbackUrl')
        if m.get('ShortLinkCallBackUrl') is not None:
            self.short_link_call_back_url = m.get('ShortLinkCallBackUrl')
        if m.get('SignReportCallbackUrl') is not None:
            self.sign_report_callback_url = m.get('SignReportCallbackUrl')
        if m.get('SmartCallAsrCallBackUrl') is not None:
            self.smart_call_asr_call_back_url = m.get('SmartCallAsrCallBackUrl')
        if m.get('TemplateReportCallbackUrl') is not None:
            self.template_report_callback_url = m.get('TemplateReportCallbackUrl')
        if m.get('UpCallbackUrl') is not None:
            self.up_callback_url = m.get('UpCallbackUrl')
        if m.get('VoiceAsrCallBackUrl') is not None:
            self.voice_asr_call_back_url = m.get('VoiceAsrCallBackUrl')
        if m.get('VoiceCallMidStateCallBackUrl') is not None:
            self.voice_call_mid_state_call_back_url = m.get('VoiceCallMidStateCallBackUrl')
        if m.get('VoiceCallRecordCallBackUrl') is not None:
            self.voice_call_record_call_back_url = m.get('VoiceCallRecordCallBackUrl')
        if m.get('VoiceRecordingCallBackUrl') is not None:
            self.voice_recording_call_back_url = m.get('VoiceRecordingCallBackUrl')
        return self


class QueryMessageCallbackNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryMessageCallbackNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMessageCallbackNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMessageQueueNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        queue_types: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.queue_types = queue_types
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.queue_types is not None:
            result['QueueTypes'] = self.queue_types
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('QueueTypes') is not None:
            self.queue_types = m.get('QueueTypes')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryMessageQueueNewResponseBodyList(TeaModel):
    def __init__(
        self,
        is_created: bool = None,
        queue_name: str = None,
        queue_type: str = None,
        region: str = None,
    ):
        self.is_created = is_created
        self.queue_name = queue_name
        self.queue_type = queue_type
        self.region = region

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_created is not None:
            result['IsCreated'] = self.is_created
        if self.queue_name is not None:
            result['QueueName'] = self.queue_name
        if self.queue_type is not None:
            result['QueueType'] = self.queue_type
        if self.region is not None:
            result['Region'] = self.region
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsCreated') is not None:
            self.is_created = m.get('IsCreated')
        if m.get('QueueName') is not None:
            self.queue_name = m.get('QueueName')
        if m.get('QueueType') is not None:
            self.queue_type = m.get('QueueType')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        return self


class QueryMessageQueueNewResponseBody(TeaModel):
    def __init__(
        self,
        list: List[QueryMessageQueueNewResponseBodyList] = None,
        request_id: str = None,
    ):
        self.list = list
        self.request_id = request_id

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QueryMessageQueueNewResponseBodyList()
                self.list.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QueryMessageQueueNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryMessageQueueNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMessageQueueNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMonthlyBillInfoLeafNewRequest(TeaModel):
    def __init__(
        self,
        bill_cycle: str = None,
        item_id: str = None,
        item_name: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        subject_item_id: str = None,
    ):
        self.bill_cycle = bill_cycle
        self.item_id = item_id
        self.item_name = item_name
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.subject_item_id = subject_item_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_cycle is not None:
            result['BillCycle'] = self.bill_cycle
        if self.item_id is not None:
            result['ItemId'] = self.item_id
        if self.item_name is not None:
            result['ItemName'] = self.item_name
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.subject_item_id is not None:
            result['SubjectItemId'] = self.subject_item_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BillCycle') is not None:
            self.bill_cycle = m.get('BillCycle')
        if m.get('ItemId') is not None:
            self.item_id = m.get('ItemId')
        if m.get('ItemName') is not None:
            self.item_name = m.get('ItemName')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SubjectItemId') is not None:
            self.subject_item_id = m.get('SubjectItemId')
        return self


class QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList(TeaModel):
    def __init__(
        self,
        add_count: int = None,
        add_unit: str = None,
        bill_amount: str = None,
        item_id: str = None,
        item_name: str = None,
        operator: str = None,
        package_bill: str = None,
        single_price: str = None,
        subject_item_id: str = None,
        subject_name: str = None,
    ):
        self.add_count = add_count
        self.add_unit = add_unit
        self.bill_amount = bill_amount
        self.item_id = item_id
        self.item_name = item_name
        self.operator = operator
        self.package_bill = package_bill
        self.single_price = single_price
        self.subject_item_id = subject_item_id
        self.subject_name = subject_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.add_count is not None:
            result['AddCount'] = self.add_count
        if self.add_unit is not None:
            result['AddUnit'] = self.add_unit
        if self.bill_amount is not None:
            result['BillAmount'] = self.bill_amount
        if self.item_id is not None:
            result['ItemId'] = self.item_id
        if self.item_name is not None:
            result['ItemName'] = self.item_name
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.package_bill is not None:
            result['PackageBill'] = self.package_bill
        if self.single_price is not None:
            result['SinglePrice'] = self.single_price
        if self.subject_item_id is not None:
            result['SubjectItemId'] = self.subject_item_id
        if self.subject_name is not None:
            result['SubjectName'] = self.subject_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AddCount') is not None:
            self.add_count = m.get('AddCount')
        if m.get('AddUnit') is not None:
            self.add_unit = m.get('AddUnit')
        if m.get('BillAmount') is not None:
            self.bill_amount = m.get('BillAmount')
        if m.get('ItemId') is not None:
            self.item_id = m.get('ItemId')
        if m.get('ItemName') is not None:
            self.item_name = m.get('ItemName')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('PackageBill') is not None:
            self.package_bill = m.get('PackageBill')
        if m.get('SinglePrice') is not None:
            self.single_price = m.get('SinglePrice')
        if m.get('SubjectItemId') is not None:
            self.subject_item_id = m.get('SubjectItemId')
        if m.get('SubjectName') is not None:
            self.subject_name = m.get('SubjectName')
        return self


class QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList(TeaModel):
    def __init__(
        self,
        add_count: int = None,
        add_unit: str = None,
        bill_amount: str = None,
        item_id: str = None,
        item_name: str = None,
        operator: str = None,
        package_bill: str = None,
        single_price: str = None,
        subject_detail_list: List[QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList] = None,
        subject_item_id: str = None,
        subject_name: str = None,
    ):
        self.add_count = add_count
        self.add_unit = add_unit
        self.bill_amount = bill_amount
        self.item_id = item_id
        self.item_name = item_name
        self.operator = operator
        self.package_bill = package_bill
        self.single_price = single_price
        self.subject_detail_list = subject_detail_list
        self.subject_item_id = subject_item_id
        self.subject_name = subject_name

    def validate(self):
        if self.subject_detail_list:
            for k in self.subject_detail_list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.add_count is not None:
            result['AddCount'] = self.add_count
        if self.add_unit is not None:
            result['AddUnit'] = self.add_unit
        if self.bill_amount is not None:
            result['BillAmount'] = self.bill_amount
        if self.item_id is not None:
            result['ItemId'] = self.item_id
        if self.item_name is not None:
            result['ItemName'] = self.item_name
        if self.operator is not None:
            result['Operator'] = self.operator
        if self.package_bill is not None:
            result['PackageBill'] = self.package_bill
        if self.single_price is not None:
            result['SinglePrice'] = self.single_price
        result['SubjectDetailList'] = []
        if self.subject_detail_list is not None:
            for k in self.subject_detail_list:
                result['SubjectDetailList'].append(k.to_map() if k else None)
        if self.subject_item_id is not None:
            result['SubjectItemId'] = self.subject_item_id
        if self.subject_name is not None:
            result['SubjectName'] = self.subject_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AddCount') is not None:
            self.add_count = m.get('AddCount')
        if m.get('AddUnit') is not None:
            self.add_unit = m.get('AddUnit')
        if m.get('BillAmount') is not None:
            self.bill_amount = m.get('BillAmount')
        if m.get('ItemId') is not None:
            self.item_id = m.get('ItemId')
        if m.get('ItemName') is not None:
            self.item_name = m.get('ItemName')
        if m.get('Operator') is not None:
            self.operator = m.get('Operator')
        if m.get('PackageBill') is not None:
            self.package_bill = m.get('PackageBill')
        if m.get('SinglePrice') is not None:
            self.single_price = m.get('SinglePrice')
        self.subject_detail_list = []
        if m.get('SubjectDetailList') is not None:
            for k in m.get('SubjectDetailList'):
                temp_model = QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOListSubjectDetailList()
                self.subject_detail_list.append(temp_model.from_map(k))
        if m.get('SubjectItemId') is not None:
            self.subject_item_id = m.get('SubjectItemId')
        if m.get('SubjectName') is not None:
            self.subject_name = m.get('SubjectName')
        return self


class QueryMonthlyBillInfoLeafNewResponseBody(TeaModel):
    def __init__(
        self,
        coupon_payment: str = None,
        is_separated_price: bool = None,
        layered_bill_dolist: List[QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList] = None,
        package_amount: str = None,
        real_payment: str = None,
        request_id: str = None,
        total_payment: str = None,
    ):
        self.coupon_payment = coupon_payment
        self.is_separated_price = is_separated_price
        self.layered_bill_dolist = layered_bill_dolist
        self.package_amount = package_amount
        self.real_payment = real_payment
        self.request_id = request_id
        self.total_payment = total_payment

    def validate(self):
        if self.layered_bill_dolist:
            for k in self.layered_bill_dolist:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.coupon_payment is not None:
            result['CouponPayment'] = self.coupon_payment
        if self.is_separated_price is not None:
            result['IsSeparatedPrice'] = self.is_separated_price
        result['LayeredBillDOList'] = []
        if self.layered_bill_dolist is not None:
            for k in self.layered_bill_dolist:
                result['LayeredBillDOList'].append(k.to_map() if k else None)
        if self.package_amount is not None:
            result['PackageAmount'] = self.package_amount
        if self.real_payment is not None:
            result['RealPayment'] = self.real_payment
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total_payment is not None:
            result['TotalPayment'] = self.total_payment
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CouponPayment') is not None:
            self.coupon_payment = m.get('CouponPayment')
        if m.get('IsSeparatedPrice') is not None:
            self.is_separated_price = m.get('IsSeparatedPrice')
        self.layered_bill_dolist = []
        if m.get('LayeredBillDOList') is not None:
            for k in m.get('LayeredBillDOList'):
                temp_model = QueryMonthlyBillInfoLeafNewResponseBodyLayeredBillDOList()
                self.layered_bill_dolist.append(temp_model.from_map(k))
        if m.get('PackageAmount') is not None:
            self.package_amount = m.get('PackageAmount')
        if m.get('RealPayment') is not None:
            self.real_payment = m.get('RealPayment')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('TotalPayment') is not None:
            self.total_payment = m.get('TotalPayment')
        return self


class QueryMonthlyBillInfoLeafNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryMonthlyBillInfoLeafNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMonthlyBillInfoLeafNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMonthlyBillRentalRequest(TeaModel):
    def __init__(
        self,
        bill_cycle: str = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        # This parameter is required.
        self.bill_cycle = bill_cycle
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_cycle is not None:
            result['BillCycle'] = self.bill_cycle
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BillCycle') is not None:
            self.bill_cycle = m.get('BillCycle')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryMonthlyBillRentalResponseBodyDataRecords(TeaModel):
    def __init__(
        self,
        bill_time: int = None,
        item_id: str = None,
        item_name: str = None,
        offer_time: int = None,
        rental: str = None,
        sub_item_id: str = None,
        sub_item_name: str = None,
    ):
        self.bill_time = bill_time
        self.item_id = item_id
        self.item_name = item_name
        self.offer_time = offer_time
        self.rental = rental
        self.sub_item_id = sub_item_id
        self.sub_item_name = sub_item_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_time is not None:
            result['billTime'] = self.bill_time
        if self.item_id is not None:
            result['itemId'] = self.item_id
        if self.item_name is not None:
            result['itemName'] = self.item_name
        if self.offer_time is not None:
            result['offerTime'] = self.offer_time
        if self.rental is not None:
            result['rental'] = self.rental
        if self.sub_item_id is not None:
            result['subItemId'] = self.sub_item_id
        if self.sub_item_name is not None:
            result['subItemName'] = self.sub_item_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('billTime') is not None:
            self.bill_time = m.get('billTime')
        if m.get('itemId') is not None:
            self.item_id = m.get('itemId')
        if m.get('itemName') is not None:
            self.item_name = m.get('itemName')
        if m.get('offerTime') is not None:
            self.offer_time = m.get('offerTime')
        if m.get('rental') is not None:
            self.rental = m.get('rental')
        if m.get('subItemId') is not None:
            self.sub_item_id = m.get('subItemId')
        if m.get('subItemName') is not None:
            self.sub_item_name = m.get('subItemName')
        return self


class QueryMonthlyBillRentalResponseBodyData(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        records: List[QueryMonthlyBillRentalResponseBodyDataRecords] = None,
        rental_sum: str = None,
        total: int = None,
    ):
        self.page_no = page_no
        self.page_size = page_size
        self.records = records
        self.rental_sum = rental_sum
        self.total = total

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['pageNo'] = self.page_no
        if self.page_size is not None:
            result['pageSize'] = self.page_size
        result['records'] = []
        if self.records is not None:
            for k in self.records:
                result['records'].append(k.to_map() if k else None)
        if self.rental_sum is not None:
            result['rentalSum'] = self.rental_sum
        if self.total is not None:
            result['total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('pageNo') is not None:
            self.page_no = m.get('pageNo')
        if m.get('pageSize') is not None:
            self.page_size = m.get('pageSize')
        self.records = []
        if m.get('records') is not None:
            for k in m.get('records'):
                temp_model = QueryMonthlyBillRentalResponseBodyDataRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('rentalSum') is not None:
            self.rental_sum = m.get('rentalSum')
        if m.get('total') is not None:
            self.total = m.get('total')
        return self


class QueryMonthlyBillRentalResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: QueryMonthlyBillRentalResponseBodyData = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = QueryMonthlyBillRentalResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryMonthlyBillRentalResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryMonthlyBillRentalResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMonthlyBillRentalResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMonthlyBillRentalNewRequest(TeaModel):
    def __init__(
        self,
        bill_cycle: str = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        # This parameter is required.
        self.bill_cycle = bill_cycle
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_cycle is not None:
            result['BillCycle'] = self.bill_cycle
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BillCycle') is not None:
            self.bill_cycle = m.get('BillCycle')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryMonthlyBillRentalNewResponseBodyRecords(TeaModel):
    def __init__(
        self,
        bill_time: int = None,
        item_id: str = None,
        item_name: str = None,
        offer_time: int = None,
        rental: str = None,
        sub_item_id: str = None,
        sub_item_name: str = None,
    ):
        self.bill_time = bill_time
        self.item_id = item_id
        self.item_name = item_name
        self.offer_time = offer_time
        self.rental = rental
        self.sub_item_id = sub_item_id
        self.sub_item_name = sub_item_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_time is not None:
            result['BillTime'] = self.bill_time
        if self.item_id is not None:
            result['ItemId'] = self.item_id
        if self.item_name is not None:
            result['ItemName'] = self.item_name
        if self.offer_time is not None:
            result['OfferTime'] = self.offer_time
        if self.rental is not None:
            result['Rental'] = self.rental
        if self.sub_item_id is not None:
            result['SubItemId'] = self.sub_item_id
        if self.sub_item_name is not None:
            result['SubItemName'] = self.sub_item_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BillTime') is not None:
            self.bill_time = m.get('BillTime')
        if m.get('ItemId') is not None:
            self.item_id = m.get('ItemId')
        if m.get('ItemName') is not None:
            self.item_name = m.get('ItemName')
        if m.get('OfferTime') is not None:
            self.offer_time = m.get('OfferTime')
        if m.get('Rental') is not None:
            self.rental = m.get('Rental')
        if m.get('SubItemId') is not None:
            self.sub_item_id = m.get('SubItemId')
        if m.get('SubItemName') is not None:
            self.sub_item_name = m.get('SubItemName')
        return self


class QueryMonthlyBillRentalNewResponseBody(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        records: List[QueryMonthlyBillRentalNewResponseBodyRecords] = None,
        rental_sum: str = None,
        request_id: str = None,
        total: int = None,
    ):
        self.page_no = page_no
        self.page_size = page_size
        self.records = records
        self.rental_sum = rental_sum
        self.request_id = request_id
        self.total = total

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.rental_sum is not None:
            result['RentalSum'] = self.rental_sum
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = QueryMonthlyBillRentalNewResponseBodyRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('RentalSum') is not None:
            self.rental_sum = m.get('RentalSum')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class QueryMonthlyBillRentalNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryMonthlyBillRentalNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMonthlyBillRentalNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryMsgCountRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryMsgCountResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryMsgCountResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryMsgCountResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryMsgCountResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryOpenStatusRequest(TeaModel):
    def __init__(
        self,
        bus_offer: int = None,
        owner_id: int = None,
        prod_code: str = None,
        prod_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.bus_offer = bus_offer
        self.owner_id = owner_id
        self.prod_code = prod_code
        # This parameter is required.
        self.prod_id = prod_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bus_offer is not None:
            result['BusOffer'] = self.bus_offer
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_id is not None:
            result['ProdId'] = self.prod_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BusOffer') is not None:
            self.bus_offer = m.get('BusOffer')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdId') is not None:
            self.prod_id = m.get('ProdId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryOpenStatusResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: bool = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryOpenStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryOpenStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryOpenStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryOpencFlagNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryOpencFlagNewResponseBody(TeaModel):
    def __init__(
        self,
        is_open: int = None,
        request_id: str = None,
    ):
        self.is_open = is_open
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_open is not None:
            result['IsOpen'] = self.is_open
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsOpen') is not None:
            self.is_open = m.get('IsOpen')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QueryOpencFlagNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryOpencFlagNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryOpencFlagNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryPhoneWhiteListRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        phone_number: str = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.phone_number = phone_number
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryPhoneWhiteListResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryPhoneWhiteListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryPhoneWhiteListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryPhoneWhiteListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryPhoneWhiteListNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        phone_number: str = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.phone_number = phone_number
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryPhoneWhiteListNewResponseBodyList(TeaModel):
    def __init__(
        self,
        id: int = None,
        phone_number: str = None,
        remark: str = None,
    ):
        self.id = id
        self.phone_number = phone_number
        self.remark = remark

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.remark is not None:
            result['Remark'] = self.remark
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        return self


class QueryPhoneWhiteListNewResponseBody(TeaModel):
    def __init__(
        self,
        list: List[QueryPhoneWhiteListNewResponseBodyList] = None,
        page_no: int = None,
        page_size: int = None,
        request_id: str = None,
        total: int = None,
        total_without_filter: int = None,
    ):
        self.list = list
        self.page_no = page_no
        self.page_size = page_size
        self.request_id = request_id
        self.total = total
        self.total_without_filter = total_without_filter

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total is not None:
            result['Total'] = self.total
        if self.total_without_filter is not None:
            result['TotalWithoutFilter'] = self.total_without_filter
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QueryPhoneWhiteListNewResponseBodyList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        if m.get('TotalWithoutFilter') is not None:
            self.total_without_filter = m.get('TotalWithoutFilter')
        return self


class QueryPhoneWhiteListNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryPhoneWhiteListNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryPhoneWhiteListNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryPkgThresholdRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryPkgThresholdResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryPkgThresholdResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryPkgThresholdResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryPkgThresholdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryPkgThresholdNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryPkgThresholdNewResponseBody(TeaModel):
    def __init__(
        self,
        package_warning_limit: int = None,
        request_id: str = None,
    ):
        self.package_warning_limit = package_warning_limit
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.package_warning_limit is not None:
            result['PackageWarningLimit'] = self.package_warning_limit
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PackageWarningLimit') is not None:
            self.package_warning_limit = m.get('PackageWarningLimit')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QueryPkgThresholdNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryPkgThresholdNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryPkgThresholdNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryPrevLimitNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryPrevLimitNewResponseBody(TeaModel):
    def __init__(
        self,
        hour_limit: int = None,
        increase_rate: int = None,
        request_id: str = None,
        success_rate: int = None,
    ):
        self.hour_limit = hour_limit
        self.increase_rate = increase_rate
        self.request_id = request_id
        self.success_rate = success_rate

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.hour_limit is not None:
            result['HourLimit'] = self.hour_limit
        if self.increase_rate is not None:
            result['IncreaseRate'] = self.increase_rate
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success_rate is not None:
            result['SuccessRate'] = self.success_rate
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('HourLimit') is not None:
            self.hour_limit = m.get('HourLimit')
        if m.get('IncreaseRate') is not None:
            self.increase_rate = m.get('IncreaseRate')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SuccessRate') is not None:
            self.success_rate = m.get('SuccessRate')
        return self


class QueryPrevLimitNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryPrevLimitNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryPrevLimitNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySaasRecordRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        index_col: str = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        result: int = None,
        task_id: int = None,
        task_instance_id: int = None,
    ):
        self.biz_type = biz_type
        self.index_col = index_col
        self.owner_id = owner_id
        # This parameter is required.
        self.page_no = page_no
        # This parameter is required.
        self.page_size = page_size
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.result = result
        # This parameter is required.
        self.task_id = task_id
        # This parameter is required.
        self.task_instance_id = task_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.index_col is not None:
            result['IndexCol'] = self.index_col
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.result is not None:
            result['Result'] = self.result
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_instance_id is not None:
            result['TaskInstanceId'] = self.task_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('IndexCol') is not None:
            self.index_col = m.get('IndexCol')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskInstanceId') is not None:
            self.task_instance_id = m.get('TaskInstanceId')
        return self


class QuerySaasRecordResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySaasRecordResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySaasRecordResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySaasRecordResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySaasRecordNewRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        index_col: str = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        result: int = None,
        task_id: int = None,
        task_instance_id: int = None,
    ):
        # This parameter is required.
        self.biz_type = biz_type
        self.index_col = index_col
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.result = result
        # This parameter is required.
        self.task_id = task_id
        # This parameter is required.
        self.task_instance_id = task_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.index_col is not None:
            result['IndexCol'] = self.index_col
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.result is not None:
            result['Result'] = self.result
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_instance_id is not None:
            result['TaskInstanceId'] = self.task_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('IndexCol') is not None:
            self.index_col = m.get('IndexCol')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskInstanceId') is not None:
            self.task_instance_id = m.get('TaskInstanceId')
        return self


class QuerySaasRecordNewResponseBodyListSaasRecord(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        detail_pk_id: int = None,
        index_col: str = None,
        last_deal_date: str = None,
        record_biz_expire_date: str = None,
        result: str = None,
        result_desc: str = None,
        saas_content: str = None,
        suggestion: str = None,
    ):
        self.biz_type = biz_type
        self.detail_pk_id = detail_pk_id
        self.index_col = index_col
        self.last_deal_date = last_deal_date
        self.record_biz_expire_date = record_biz_expire_date
        self.result = result
        self.result_desc = result_desc
        self.saas_content = saas_content
        self.suggestion = suggestion

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.detail_pk_id is not None:
            result['DetailPkId'] = self.detail_pk_id
        if self.index_col is not None:
            result['IndexCol'] = self.index_col
        if self.last_deal_date is not None:
            result['LastDealDate'] = self.last_deal_date
        if self.record_biz_expire_date is not None:
            result['RecordBizExpireDate'] = self.record_biz_expire_date
        if self.result is not None:
            result['Result'] = self.result
        if self.result_desc is not None:
            result['ResultDesc'] = self.result_desc
        if self.saas_content is not None:
            result['SaasContent'] = self.saas_content
        if self.suggestion is not None:
            result['Suggestion'] = self.suggestion
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('DetailPkId') is not None:
            self.detail_pk_id = m.get('DetailPkId')
        if m.get('IndexCol') is not None:
            self.index_col = m.get('IndexCol')
        if m.get('LastDealDate') is not None:
            self.last_deal_date = m.get('LastDealDate')
        if m.get('RecordBizExpireDate') is not None:
            self.record_biz_expire_date = m.get('RecordBizExpireDate')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        if m.get('ResultDesc') is not None:
            self.result_desc = m.get('ResultDesc')
        if m.get('SaasContent') is not None:
            self.saas_content = m.get('SaasContent')
        if m.get('Suggestion') is not None:
            self.suggestion = m.get('Suggestion')
        return self


class QuerySaasRecordNewResponseBodyList(TeaModel):
    def __init__(
        self,
        saas_record: List[QuerySaasRecordNewResponseBodyListSaasRecord] = None,
    ):
        self.saas_record = saas_record

    def validate(self):
        if self.saas_record:
            for k in self.saas_record:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SaasRecord'] = []
        if self.saas_record is not None:
            for k in self.saas_record:
                result['SaasRecord'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.saas_record = []
        if m.get('SaasRecord') is not None:
            for k in m.get('SaasRecord'):
                temp_model = QuerySaasRecordNewResponseBodyListSaasRecord()
                self.saas_record.append(temp_model.from_map(k))
        return self


class QuerySaasRecordNewResponseBody(TeaModel):
    def __init__(
        self,
        list: QuerySaasRecordNewResponseBodyList = None,
        page_no: int = None,
        page_size: int = None,
        request_id: str = None,
        total: int = None,
    ):
        self.list = list
        self.page_no = page_no
        self.page_size = page_size
        self.request_id = request_id
        self.total = total

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = QuerySaasRecordNewResponseBodyList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class QuerySaasRecordNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySaasRecordNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySaasRecordNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySendDetailsByPhoneNumRequest(TeaModel):
    def __init__(
        self,
        biz_type: int = None,
        error_code: str = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        phone_num: str = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        send_date: str = None,
        send_status: int = None,
        sign_name: str = None,
        template_code: str = None,
    ):
        self.biz_type = biz_type
        self.error_code = error_code
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.phone_num = phone_num
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.send_date = send_date
        self.send_status = send_status
        self.sign_name = sign_name
        self.template_code = template_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.phone_num is not None:
            result['PhoneNum'] = self.phone_num
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.send_date is not None:
            result['SendDate'] = self.send_date
        if self.send_status is not None:
            result['SendStatus'] = self.send_status
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PhoneNum') is not None:
            self.phone_num = m.get('PhoneNum')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SendDate') is not None:
            self.send_date = m.get('SendDate')
        if m.get('SendStatus') is not None:
            self.send_status = m.get('SendStatus')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        return self


class QuerySendDetailsByPhoneNumResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySendDetailsByPhoneNumResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySendDetailsByPhoneNumResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySendDetailsByPhoneNumResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySendDetailsByPhoneNumNewRequest(TeaModel):
    def __init__(
        self,
        biz_id: str = None,
        biz_type: int = None,
        error_code: str = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        phone_num: str = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        send_date: str = None,
        send_status: int = None,
        sign_name: str = None,
        statistics_status: int = None,
        template_code: str = None,
    ):
        self.biz_id = biz_id
        self.biz_type = biz_type
        self.error_code = error_code
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.phone_num = phone_num
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.send_date = send_date
        self.send_status = send_status
        self.sign_name = sign_name
        self.statistics_status = statistics_status
        self.template_code = template_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.error_code is not None:
            result['ErrorCode'] = self.error_code
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.phone_num is not None:
            result['PhoneNum'] = self.phone_num
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.send_date is not None:
            result['SendDate'] = self.send_date
        if self.send_status is not None:
            result['SendStatus'] = self.send_status
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.statistics_status is not None:
            result['StatisticsStatus'] = self.statistics_status
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('ErrorCode') is not None:
            self.error_code = m.get('ErrorCode')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('PhoneNum') is not None:
            self.phone_num = m.get('PhoneNum')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SendDate') is not None:
            self.send_date = m.get('SendDate')
        if m.get('SendStatus') is not None:
            self.send_status = m.get('SendStatus')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('StatisticsStatus') is not None:
            self.statistics_status = m.get('StatisticsStatus')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        return self


class QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse(TeaModel):
    def __init__(
        self,
        apply_date_str: str = None,
        bill_count: int = None,
        biz_id: str = None,
        biz_type: int = None,
        black_list_status: int = None,
        content: str = None,
        err_code: str = None,
        err_code_desc: str = None,
        inner_err_code: str = None,
        out_id: str = None,
        phone_num: str = None,
        receive_date_str: str = None,
        send_date_str: str = None,
        send_status: int = None,
        sms_length: int = None,
        statistics_status: int = None,
        suggestion: str = None,
        template_code: str = None,
    ):
        self.apply_date_str = apply_date_str
        self.bill_count = bill_count
        self.biz_id = biz_id
        self.biz_type = biz_type
        self.black_list_status = black_list_status
        self.content = content
        self.err_code = err_code
        self.err_code_desc = err_code_desc
        self.inner_err_code = inner_err_code
        self.out_id = out_id
        self.phone_num = phone_num
        self.receive_date_str = receive_date_str
        self.send_date_str = send_date_str
        self.send_status = send_status
        self.sms_length = sms_length
        self.statistics_status = statistics_status
        self.suggestion = suggestion
        self.template_code = template_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_date_str is not None:
            result['ApplyDateStr'] = self.apply_date_str
        if self.bill_count is not None:
            result['BillCount'] = self.bill_count
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.black_list_status is not None:
            result['BlackListStatus'] = self.black_list_status
        if self.content is not None:
            result['Content'] = self.content
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_code_desc is not None:
            result['ErrCodeDesc'] = self.err_code_desc
        if self.inner_err_code is not None:
            result['InnerErrCode'] = self.inner_err_code
        if self.out_id is not None:
            result['OutId'] = self.out_id
        if self.phone_num is not None:
            result['PhoneNum'] = self.phone_num
        if self.receive_date_str is not None:
            result['ReceiveDateStr'] = self.receive_date_str
        if self.send_date_str is not None:
            result['SendDateStr'] = self.send_date_str
        if self.send_status is not None:
            result['SendStatus'] = self.send_status
        if self.sms_length is not None:
            result['SmsLength'] = self.sms_length
        if self.statistics_status is not None:
            result['StatisticsStatus'] = self.statistics_status
        if self.suggestion is not None:
            result['Suggestion'] = self.suggestion
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ApplyDateStr') is not None:
            self.apply_date_str = m.get('ApplyDateStr')
        if m.get('BillCount') is not None:
            self.bill_count = m.get('BillCount')
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('BlackListStatus') is not None:
            self.black_list_status = m.get('BlackListStatus')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrCodeDesc') is not None:
            self.err_code_desc = m.get('ErrCodeDesc')
        if m.get('InnerErrCode') is not None:
            self.inner_err_code = m.get('InnerErrCode')
        if m.get('OutId') is not None:
            self.out_id = m.get('OutId')
        if m.get('PhoneNum') is not None:
            self.phone_num = m.get('PhoneNum')
        if m.get('ReceiveDateStr') is not None:
            self.receive_date_str = m.get('ReceiveDateStr')
        if m.get('SendDateStr') is not None:
            self.send_date_str = m.get('SendDateStr')
        if m.get('SendStatus') is not None:
            self.send_status = m.get('SendStatus')
        if m.get('SmsLength') is not None:
            self.sms_length = m.get('SmsLength')
        if m.get('StatisticsStatus') is not None:
            self.statistics_status = m.get('StatisticsStatus')
        if m.get('Suggestion') is not None:
            self.suggestion = m.get('Suggestion')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        return self


class QuerySendDetailsByPhoneNumNewResponseBodyList(TeaModel):
    def __init__(
        self,
        sms_send_detail_response: List[QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse] = None,
    ):
        self.sms_send_detail_response = sms_send_detail_response

    def validate(self):
        if self.sms_send_detail_response:
            for k in self.sms_send_detail_response:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SmsSendDetailResponse'] = []
        if self.sms_send_detail_response is not None:
            for k in self.sms_send_detail_response:
                result['SmsSendDetailResponse'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.sms_send_detail_response = []
        if m.get('SmsSendDetailResponse') is not None:
            for k in m.get('SmsSendDetailResponse'):
                temp_model = QuerySendDetailsByPhoneNumNewResponseBodyListSmsSendDetailResponse()
                self.sms_send_detail_response.append(temp_model.from_map(k))
        return self


class QuerySendDetailsByPhoneNumNewResponseBody(TeaModel):
    def __init__(
        self,
        list: QuerySendDetailsByPhoneNumNewResponseBodyList = None,
        page_no: int = None,
        page_size: int = None,
        request_id: str = None,
        total: int = None,
    ):
        self.list = list
        self.page_no = page_no
        self.page_size = page_size
        self.request_id = request_id
        self.total = total

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = QuerySendDetailsByPhoneNumNewResponseBodyList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class QuerySendDetailsByPhoneNumNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySendDetailsByPhoneNumNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySendDetailsByPhoneNumNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySendFailDetailsRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        prod_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        send_date: str = None,
    ):
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.prod_id = prod_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.send_date = send_date

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_id is not None:
            result['ProdId'] = self.prod_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.send_date is not None:
            result['SendDate'] = self.send_date
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdId') is not None:
            self.prod_id = m.get('ProdId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SendDate') is not None:
            self.send_date = m.get('SendDate')
        return self


class QuerySendFailDetailsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySendFailDetailsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySendFailDetailsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySendFailDetailsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySendFailDetailsNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        prod_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        send_date: str = None,
    ):
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.prod_id = prod_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.send_date = send_date

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_id is not None:
            result['ProdId'] = self.prod_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.send_date is not None:
            result['SendDate'] = self.send_date
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdId') is not None:
            self.prod_id = m.get('ProdId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SendDate') is not None:
            self.send_date = m.get('SendDate')
        return self


class QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse(TeaModel):
    def __init__(
        self,
        black_list_status: int = None,
        content: str = None,
        err_code: str = None,
        err_code_desc: str = None,
        out_id: str = None,
        phone_num: str = None,
        receive_date_str: str = None,
        send_date_str: str = None,
        send_status: int = None,
        suggestion: str = None,
        template_code: str = None,
    ):
        self.black_list_status = black_list_status
        self.content = content
        self.err_code = err_code
        self.err_code_desc = err_code_desc
        self.out_id = out_id
        self.phone_num = phone_num
        self.receive_date_str = receive_date_str
        self.send_date_str = send_date_str
        self.send_status = send_status
        self.suggestion = suggestion
        self.template_code = template_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.black_list_status is not None:
            result['BlackListStatus'] = self.black_list_status
        if self.content is not None:
            result['Content'] = self.content
        if self.err_code is not None:
            result['ErrCode'] = self.err_code
        if self.err_code_desc is not None:
            result['ErrCodeDesc'] = self.err_code_desc
        if self.out_id is not None:
            result['OutId'] = self.out_id
        if self.phone_num is not None:
            result['PhoneNum'] = self.phone_num
        if self.receive_date_str is not None:
            result['ReceiveDateStr'] = self.receive_date_str
        if self.send_date_str is not None:
            result['SendDateStr'] = self.send_date_str
        if self.send_status is not None:
            result['SendStatus'] = self.send_status
        if self.suggestion is not None:
            result['Suggestion'] = self.suggestion
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BlackListStatus') is not None:
            self.black_list_status = m.get('BlackListStatus')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('ErrCode') is not None:
            self.err_code = m.get('ErrCode')
        if m.get('ErrCodeDesc') is not None:
            self.err_code_desc = m.get('ErrCodeDesc')
        if m.get('OutId') is not None:
            self.out_id = m.get('OutId')
        if m.get('PhoneNum') is not None:
            self.phone_num = m.get('PhoneNum')
        if m.get('ReceiveDateStr') is not None:
            self.receive_date_str = m.get('ReceiveDateStr')
        if m.get('SendDateStr') is not None:
            self.send_date_str = m.get('SendDateStr')
        if m.get('SendStatus') is not None:
            self.send_status = m.get('SendStatus')
        if m.get('Suggestion') is not None:
            self.suggestion = m.get('Suggestion')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        return self


class QuerySendFailDetailsNewResponseBodyList(TeaModel):
    def __init__(
        self,
        sms_send_detail_response: List[QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse] = None,
    ):
        self.sms_send_detail_response = sms_send_detail_response

    def validate(self):
        if self.sms_send_detail_response:
            for k in self.sms_send_detail_response:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SmsSendDetailResponse'] = []
        if self.sms_send_detail_response is not None:
            for k in self.sms_send_detail_response:
                result['SmsSendDetailResponse'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.sms_send_detail_response = []
        if m.get('SmsSendDetailResponse') is not None:
            for k in m.get('SmsSendDetailResponse'):
                temp_model = QuerySendFailDetailsNewResponseBodyListSmsSendDetailResponse()
                self.sms_send_detail_response.append(temp_model.from_map(k))
        return self


class QuerySendFailDetailsNewResponseBody(TeaModel):
    def __init__(
        self,
        apply_date_str: str = None,
        bill_count: int = None,
        biz_type: int = None,
        inner_err_code: str = None,
        list: QuerySendFailDetailsNewResponseBodyList = None,
        page_no: int = None,
        page_size: int = None,
        request_id: str = None,
        sms_length: int = None,
        total: int = None,
    ):
        self.apply_date_str = apply_date_str
        self.bill_count = bill_count
        self.biz_type = biz_type
        self.inner_err_code = inner_err_code
        self.list = list
        self.page_no = page_no
        self.page_size = page_size
        self.request_id = request_id
        self.sms_length = sms_length
        self.total = total

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.apply_date_str is not None:
            result['ApplyDateStr'] = self.apply_date_str
        if self.bill_count is not None:
            result['BillCount'] = self.bill_count
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.inner_err_code is not None:
            result['InnerErrCode'] = self.inner_err_code
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.sms_length is not None:
            result['SmsLength'] = self.sms_length
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ApplyDateStr') is not None:
            self.apply_date_str = m.get('ApplyDateStr')
        if m.get('BillCount') is not None:
            self.bill_count = m.get('BillCount')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('InnerErrCode') is not None:
            self.inner_err_code = m.get('InnerErrCode')
        if m.get('List') is not None:
            temp_model = QuerySendFailDetailsNewResponseBodyList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SmsLength') is not None:
            self.sms_length = m.get('SmsLength')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class QuerySendFailDetailsNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySendFailDetailsNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySendFailDetailsNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySendToGlobeStatusRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QuerySendToGlobeStatusResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: bool = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QuerySendToGlobeStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySendToGlobeStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySendToGlobeStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryShortUrlDetailNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        short_url_id: str = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.short_url_id = short_url_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.short_url_id is not None:
            result['ShortUrlId'] = self.short_url_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ShortUrlId') is not None:
            self.short_url_id = m.get('ShortUrlId')
        return self


class QueryShortUrlDetailNewResponseBodyRecord(TeaModel):
    def __init__(
        self,
        event_name: str = None,
        gmt_create_time: str = None,
        gmt_invalid_time: str = None,
        id: str = None,
        short_url: str = None,
        source_url: str = None,
        status: int = None,
        total_pv: str = None,
        total_uv: str = None,
    ):
        self.event_name = event_name
        self.gmt_create_time = gmt_create_time
        self.gmt_invalid_time = gmt_invalid_time
        self.id = id
        self.short_url = short_url
        self.source_url = source_url
        self.status = status
        self.total_pv = total_pv
        self.total_uv = total_uv

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_name is not None:
            result['EventName'] = self.event_name
        if self.gmt_create_time is not None:
            result['GmtCreateTime'] = self.gmt_create_time
        if self.gmt_invalid_time is not None:
            result['GmtInvalidTime'] = self.gmt_invalid_time
        if self.id is not None:
            result['Id'] = self.id
        if self.short_url is not None:
            result['ShortUrl'] = self.short_url
        if self.source_url is not None:
            result['SourceUrl'] = self.source_url
        if self.status is not None:
            result['Status'] = self.status
        if self.total_pv is not None:
            result['TotalPv'] = self.total_pv
        if self.total_uv is not None:
            result['TotalUv'] = self.total_uv
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EventName') is not None:
            self.event_name = m.get('EventName')
        if m.get('GmtCreateTime') is not None:
            self.gmt_create_time = m.get('GmtCreateTime')
        if m.get('GmtInvalidTime') is not None:
            self.gmt_invalid_time = m.get('GmtInvalidTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('ShortUrl') is not None:
            self.short_url = m.get('ShortUrl')
        if m.get('SourceUrl') is not None:
            self.source_url = m.get('SourceUrl')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalPv') is not None:
            self.total_pv = m.get('TotalPv')
        if m.get('TotalUv') is not None:
            self.total_uv = m.get('TotalUv')
        return self


class QueryShortUrlDetailNewResponseBody(TeaModel):
    def __init__(
        self,
        event_name: str = None,
        gmt_create_time: str = None,
        gmt_invalid_time: str = None,
        id: str = None,
        record: List[QueryShortUrlDetailNewResponseBodyRecord] = None,
        request_id: str = None,
        short_url: str = None,
        source_url: str = None,
        status: int = None,
        total_pv: str = None,
        total_uv: str = None,
    ):
        self.event_name = event_name
        self.gmt_create_time = gmt_create_time
        self.gmt_invalid_time = gmt_invalid_time
        self.id = id
        self.record = record
        self.request_id = request_id
        self.short_url = short_url
        self.source_url = source_url
        self.status = status
        self.total_pv = total_pv
        self.total_uv = total_uv

    def validate(self):
        if self.record:
            for k in self.record:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_name is not None:
            result['EventName'] = self.event_name
        if self.gmt_create_time is not None:
            result['GmtCreateTime'] = self.gmt_create_time
        if self.gmt_invalid_time is not None:
            result['GmtInvalidTime'] = self.gmt_invalid_time
        if self.id is not None:
            result['Id'] = self.id
        result['Record'] = []
        if self.record is not None:
            for k in self.record:
                result['Record'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.short_url is not None:
            result['ShortUrl'] = self.short_url
        if self.source_url is not None:
            result['SourceUrl'] = self.source_url
        if self.status is not None:
            result['Status'] = self.status
        if self.total_pv is not None:
            result['TotalPv'] = self.total_pv
        if self.total_uv is not None:
            result['TotalUv'] = self.total_uv
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EventName') is not None:
            self.event_name = m.get('EventName')
        if m.get('GmtCreateTime') is not None:
            self.gmt_create_time = m.get('GmtCreateTime')
        if m.get('GmtInvalidTime') is not None:
            self.gmt_invalid_time = m.get('GmtInvalidTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        self.record = []
        if m.get('Record') is not None:
            for k in m.get('Record'):
                temp_model = QueryShortUrlDetailNewResponseBodyRecord()
                self.record.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ShortUrl') is not None:
            self.short_url = m.get('ShortUrl')
        if m.get('SourceUrl') is not None:
            self.source_url = m.get('SourceUrl')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalPv') is not None:
            self.total_pv = m.get('TotalPv')
        if m.get('TotalUv') is not None:
            self.total_uv = m.get('TotalUv')
        return self


class QueryShortUrlDetailNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryShortUrlDetailNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryShortUrlDetailNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryShortUrlListNewRequest(TeaModel):
    def __init__(
        self,
        event_name: str = None,
        key_word: str = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        short_url: str = None,
    ):
        self.event_name = event_name
        self.key_word = key_word
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.short_url = short_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_name is not None:
            result['EventName'] = self.event_name
        if self.key_word is not None:
            result['KeyWord'] = self.key_word
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.short_url is not None:
            result['ShortUrl'] = self.short_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EventName') is not None:
            self.event_name = m.get('EventName')
        if m.get('KeyWord') is not None:
            self.key_word = m.get('KeyWord')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ShortUrl') is not None:
            self.short_url = m.get('ShortUrl')
        return self


class QueryShortUrlListNewResponseBodyListRecord(TeaModel):
    def __init__(
        self,
        event_name: str = None,
        gmt_create_time: str = None,
        gmt_invalid_time: str = None,
        id: str = None,
        reason: str = None,
        short_url: str = None,
        source_url: str = None,
        status: int = None,
        total_pv: str = None,
        total_uv: str = None,
    ):
        self.event_name = event_name
        self.gmt_create_time = gmt_create_time
        self.gmt_invalid_time = gmt_invalid_time
        self.id = id
        self.reason = reason
        self.short_url = short_url
        self.source_url = source_url
        self.status = status
        self.total_pv = total_pv
        self.total_uv = total_uv

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_name is not None:
            result['EventName'] = self.event_name
        if self.gmt_create_time is not None:
            result['GmtCreateTime'] = self.gmt_create_time
        if self.gmt_invalid_time is not None:
            result['GmtInvalidTime'] = self.gmt_invalid_time
        if self.id is not None:
            result['Id'] = self.id
        if self.reason is not None:
            result['Reason'] = self.reason
        if self.short_url is not None:
            result['ShortUrl'] = self.short_url
        if self.source_url is not None:
            result['SourceUrl'] = self.source_url
        if self.status is not None:
            result['Status'] = self.status
        if self.total_pv is not None:
            result['TotalPv'] = self.total_pv
        if self.total_uv is not None:
            result['TotalUv'] = self.total_uv
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EventName') is not None:
            self.event_name = m.get('EventName')
        if m.get('GmtCreateTime') is not None:
            self.gmt_create_time = m.get('GmtCreateTime')
        if m.get('GmtInvalidTime') is not None:
            self.gmt_invalid_time = m.get('GmtInvalidTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Reason') is not None:
            self.reason = m.get('Reason')
        if m.get('ShortUrl') is not None:
            self.short_url = m.get('ShortUrl')
        if m.get('SourceUrl') is not None:
            self.source_url = m.get('SourceUrl')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalPv') is not None:
            self.total_pv = m.get('TotalPv')
        if m.get('TotalUv') is not None:
            self.total_uv = m.get('TotalUv')
        return self


class QueryShortUrlListNewResponseBodyList(TeaModel):
    def __init__(
        self,
        event_name: str = None,
        gmt_create_time: str = None,
        gmt_invalid_time: str = None,
        id: str = None,
        reason: str = None,
        record: List[QueryShortUrlListNewResponseBodyListRecord] = None,
        short_url: str = None,
        source_url: str = None,
        status: int = None,
        total_pv: str = None,
        total_uv: str = None,
    ):
        self.event_name = event_name
        self.gmt_create_time = gmt_create_time
        self.gmt_invalid_time = gmt_invalid_time
        self.id = id
        self.reason = reason
        self.record = record
        self.short_url = short_url
        self.source_url = source_url
        self.status = status
        self.total_pv = total_pv
        self.total_uv = total_uv

    def validate(self):
        if self.record:
            for k in self.record:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.event_name is not None:
            result['EventName'] = self.event_name
        if self.gmt_create_time is not None:
            result['GmtCreateTime'] = self.gmt_create_time
        if self.gmt_invalid_time is not None:
            result['GmtInvalidTime'] = self.gmt_invalid_time
        if self.id is not None:
            result['Id'] = self.id
        if self.reason is not None:
            result['Reason'] = self.reason
        result['Record'] = []
        if self.record is not None:
            for k in self.record:
                result['Record'].append(k.to_map() if k else None)
        if self.short_url is not None:
            result['ShortUrl'] = self.short_url
        if self.source_url is not None:
            result['SourceUrl'] = self.source_url
        if self.status is not None:
            result['Status'] = self.status
        if self.total_pv is not None:
            result['TotalPv'] = self.total_pv
        if self.total_uv is not None:
            result['TotalUv'] = self.total_uv
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EventName') is not None:
            self.event_name = m.get('EventName')
        if m.get('GmtCreateTime') is not None:
            self.gmt_create_time = m.get('GmtCreateTime')
        if m.get('GmtInvalidTime') is not None:
            self.gmt_invalid_time = m.get('GmtInvalidTime')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Reason') is not None:
            self.reason = m.get('Reason')
        self.record = []
        if m.get('Record') is not None:
            for k in m.get('Record'):
                temp_model = QueryShortUrlListNewResponseBodyListRecord()
                self.record.append(temp_model.from_map(k))
        if m.get('ShortUrl') is not None:
            self.short_url = m.get('ShortUrl')
        if m.get('SourceUrl') is not None:
            self.source_url = m.get('SourceUrl')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalPv') is not None:
            self.total_pv = m.get('TotalPv')
        if m.get('TotalUv') is not None:
            self.total_uv = m.get('TotalUv')
        return self


class QueryShortUrlListNewResponseBody(TeaModel):
    def __init__(
        self,
        list: List[QueryShortUrlListNewResponseBodyList] = None,
        page_no: int = None,
        page_size: int = None,
        request_id: str = None,
        total: int = None,
    ):
        self.list = list
        self.page_no = page_no
        self.page_size = page_size
        self.request_id = request_id
        self.total = total

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QueryShortUrlListNewResponseBodyList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class QueryShortUrlListNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryShortUrlListNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryShortUrlListNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryShortUrlStatusRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryShortUrlStatusResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryShortUrlStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryShortUrlStatusResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryShortUrlStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySlsStatusNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QuerySlsStatusNewResponseBody(TeaModel):
    def __init__(
        self,
        authorize_status: bool = None,
        open_status: bool = None,
        prod_code: str = None,
        request_id: str = None,
        save_time: int = None,
        uid: str = None,
    ):
        self.authorize_status = authorize_status
        self.open_status = open_status
        self.prod_code = prod_code
        self.request_id = request_id
        self.save_time = save_time
        self.uid = uid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.authorize_status is not None:
            result['AuthorizeStatus'] = self.authorize_status
        if self.open_status is not None:
            result['OpenStatus'] = self.open_status
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.save_time is not None:
            result['SaveTime'] = self.save_time
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuthorizeStatus') is not None:
            self.authorize_status = m.get('AuthorizeStatus')
        if m.get('OpenStatus') is not None:
            self.open_status = m.get('OpenStatus')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SaveTime') is not None:
            self.save_time = m.get('SaveTime')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class QuerySlsStatusNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySlsStatusNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySlsStatusNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsBaseScreenNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QuerySmsBaseScreenNewResponseBody(TeaModel):
    def __init__(
        self,
        account_balance: str = None,
        card_ability_mark: str = None,
        card_customer_mark: str = None,
        certify_type: str = None,
        channel_type: str = None,
        child_account_auth: str = None,
        credit_value: str = None,
        current_locale: str = None,
        cust_from: int = None,
        cust_name: str = None,
        data_ability_mark: str = None,
        dayu_migrate_status: int = None,
        invoice_balance: str = None,
        ip_sms_ability_mark: str = None,
        is_account_merged: bool = None,
        is_ali_inner_user: bool = None,
        is_chinese_user: bool = None,
        is_dayu_customer: bool = None,
        is_dayu_top_cust: bool = None,
        is_mns_force_migrating_customer: bool = None,
        is_mns_migrating_customer: bool = None,
        is_need_auth: bool = None,
        is_old_fis_cust: bool = None,
        is_old_sms: bool = None,
        is_opened: bool = None,
        is_remain_mns_package: bool = None,
        is_send_sms_to_globe_user: bool = None,
        is_short_url_normal_use: bool = None,
        is_short_url_opened: bool = None,
        is_silent_cust: bool = None,
        os_status: int = None,
        prod_code: str = None,
        request_id: str = None,
        short_url_serve_tag: bool = None,
        sms_marketing_assistant_tag: bool = None,
        text_ability_mark: str = None,
        voucher_num: int = None,
    ):
        self.account_balance = account_balance
        self.card_ability_mark = card_ability_mark
        self.card_customer_mark = card_customer_mark
        self.certify_type = certify_type
        self.channel_type = channel_type
        self.child_account_auth = child_account_auth
        self.credit_value = credit_value
        self.current_locale = current_locale
        self.cust_from = cust_from
        self.cust_name = cust_name
        self.data_ability_mark = data_ability_mark
        self.dayu_migrate_status = dayu_migrate_status
        self.invoice_balance = invoice_balance
        self.ip_sms_ability_mark = ip_sms_ability_mark
        self.is_account_merged = is_account_merged
        self.is_ali_inner_user = is_ali_inner_user
        self.is_chinese_user = is_chinese_user
        self.is_dayu_customer = is_dayu_customer
        self.is_dayu_top_cust = is_dayu_top_cust
        self.is_mns_force_migrating_customer = is_mns_force_migrating_customer
        self.is_mns_migrating_customer = is_mns_migrating_customer
        self.is_need_auth = is_need_auth
        self.is_old_fis_cust = is_old_fis_cust
        self.is_old_sms = is_old_sms
        self.is_opened = is_opened
        self.is_remain_mns_package = is_remain_mns_package
        self.is_send_sms_to_globe_user = is_send_sms_to_globe_user
        self.is_short_url_normal_use = is_short_url_normal_use
        self.is_short_url_opened = is_short_url_opened
        self.is_silent_cust = is_silent_cust
        self.os_status = os_status
        self.prod_code = prod_code
        self.request_id = request_id
        self.short_url_serve_tag = short_url_serve_tag
        self.sms_marketing_assistant_tag = sms_marketing_assistant_tag
        self.text_ability_mark = text_ability_mark
        self.voucher_num = voucher_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.account_balance is not None:
            result['AccountBalance'] = self.account_balance
        if self.card_ability_mark is not None:
            result['CardAbilityMark'] = self.card_ability_mark
        if self.card_customer_mark is not None:
            result['CardCustomerMark'] = self.card_customer_mark
        if self.certify_type is not None:
            result['CertifyType'] = self.certify_type
        if self.channel_type is not None:
            result['ChannelType'] = self.channel_type
        if self.child_account_auth is not None:
            result['ChildAccountAuth'] = self.child_account_auth
        if self.credit_value is not None:
            result['CreditValue'] = self.credit_value
        if self.current_locale is not None:
            result['CurrentLocale'] = self.current_locale
        if self.cust_from is not None:
            result['CustFrom'] = self.cust_from
        if self.cust_name is not None:
            result['CustName'] = self.cust_name
        if self.data_ability_mark is not None:
            result['DataAbilityMark'] = self.data_ability_mark
        if self.dayu_migrate_status is not None:
            result['DayuMigrateStatus'] = self.dayu_migrate_status
        if self.invoice_balance is not None:
            result['InvoiceBalance'] = self.invoice_balance
        if self.ip_sms_ability_mark is not None:
            result['IpSmsAbilityMark'] = self.ip_sms_ability_mark
        if self.is_account_merged is not None:
            result['IsAccountMerged'] = self.is_account_merged
        if self.is_ali_inner_user is not None:
            result['IsAliInnerUser'] = self.is_ali_inner_user
        if self.is_chinese_user is not None:
            result['IsChineseUser'] = self.is_chinese_user
        if self.is_dayu_customer is not None:
            result['IsDayuCustomer'] = self.is_dayu_customer
        if self.is_dayu_top_cust is not None:
            result['IsDayuTopCust'] = self.is_dayu_top_cust
        if self.is_mns_force_migrating_customer is not None:
            result['IsMnsForceMigratingCustomer'] = self.is_mns_force_migrating_customer
        if self.is_mns_migrating_customer is not None:
            result['IsMnsMigratingCustomer'] = self.is_mns_migrating_customer
        if self.is_need_auth is not None:
            result['IsNeedAuth'] = self.is_need_auth
        if self.is_old_fis_cust is not None:
            result['IsOldFisCust'] = self.is_old_fis_cust
        if self.is_old_sms is not None:
            result['IsOldSms'] = self.is_old_sms
        if self.is_opened is not None:
            result['IsOpened'] = self.is_opened
        if self.is_remain_mns_package is not None:
            result['IsRemainMnsPackage'] = self.is_remain_mns_package
        if self.is_send_sms_to_globe_user is not None:
            result['IsSendSmsToGlobeUser'] = self.is_send_sms_to_globe_user
        if self.is_short_url_normal_use is not None:
            result['IsShortUrlNormalUse'] = self.is_short_url_normal_use
        if self.is_short_url_opened is not None:
            result['IsShortUrlOpened'] = self.is_short_url_opened
        if self.is_silent_cust is not None:
            result['IsSilentCust'] = self.is_silent_cust
        if self.os_status is not None:
            result['OsStatus'] = self.os_status
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.short_url_serve_tag is not None:
            result['ShortUrlServeTag'] = self.short_url_serve_tag
        if self.sms_marketing_assistant_tag is not None:
            result['SmsMarketingAssistantTag'] = self.sms_marketing_assistant_tag
        if self.text_ability_mark is not None:
            result['TextAbilityMark'] = self.text_ability_mark
        if self.voucher_num is not None:
            result['VoucherNum'] = self.voucher_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccountBalance') is not None:
            self.account_balance = m.get('AccountBalance')
        if m.get('CardAbilityMark') is not None:
            self.card_ability_mark = m.get('CardAbilityMark')
        if m.get('CardCustomerMark') is not None:
            self.card_customer_mark = m.get('CardCustomerMark')
        if m.get('CertifyType') is not None:
            self.certify_type = m.get('CertifyType')
        if m.get('ChannelType') is not None:
            self.channel_type = m.get('ChannelType')
        if m.get('ChildAccountAuth') is not None:
            self.child_account_auth = m.get('ChildAccountAuth')
        if m.get('CreditValue') is not None:
            self.credit_value = m.get('CreditValue')
        if m.get('CurrentLocale') is not None:
            self.current_locale = m.get('CurrentLocale')
        if m.get('CustFrom') is not None:
            self.cust_from = m.get('CustFrom')
        if m.get('CustName') is not None:
            self.cust_name = m.get('CustName')
        if m.get('DataAbilityMark') is not None:
            self.data_ability_mark = m.get('DataAbilityMark')
        if m.get('DayuMigrateStatus') is not None:
            self.dayu_migrate_status = m.get('DayuMigrateStatus')
        if m.get('InvoiceBalance') is not None:
            self.invoice_balance = m.get('InvoiceBalance')
        if m.get('IpSmsAbilityMark') is not None:
            self.ip_sms_ability_mark = m.get('IpSmsAbilityMark')
        if m.get('IsAccountMerged') is not None:
            self.is_account_merged = m.get('IsAccountMerged')
        if m.get('IsAliInnerUser') is not None:
            self.is_ali_inner_user = m.get('IsAliInnerUser')
        if m.get('IsChineseUser') is not None:
            self.is_chinese_user = m.get('IsChineseUser')
        if m.get('IsDayuCustomer') is not None:
            self.is_dayu_customer = m.get('IsDayuCustomer')
        if m.get('IsDayuTopCust') is not None:
            self.is_dayu_top_cust = m.get('IsDayuTopCust')
        if m.get('IsMnsForceMigratingCustomer') is not None:
            self.is_mns_force_migrating_customer = m.get('IsMnsForceMigratingCustomer')
        if m.get('IsMnsMigratingCustomer') is not None:
            self.is_mns_migrating_customer = m.get('IsMnsMigratingCustomer')
        if m.get('IsNeedAuth') is not None:
            self.is_need_auth = m.get('IsNeedAuth')
        if m.get('IsOldFisCust') is not None:
            self.is_old_fis_cust = m.get('IsOldFisCust')
        if m.get('IsOldSms') is not None:
            self.is_old_sms = m.get('IsOldSms')
        if m.get('IsOpened') is not None:
            self.is_opened = m.get('IsOpened')
        if m.get('IsRemainMnsPackage') is not None:
            self.is_remain_mns_package = m.get('IsRemainMnsPackage')
        if m.get('IsSendSmsToGlobeUser') is not None:
            self.is_send_sms_to_globe_user = m.get('IsSendSmsToGlobeUser')
        if m.get('IsShortUrlNormalUse') is not None:
            self.is_short_url_normal_use = m.get('IsShortUrlNormalUse')
        if m.get('IsShortUrlOpened') is not None:
            self.is_short_url_opened = m.get('IsShortUrlOpened')
        if m.get('IsSilentCust') is not None:
            self.is_silent_cust = m.get('IsSilentCust')
        if m.get('OsStatus') is not None:
            self.os_status = m.get('OsStatus')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ShortUrlServeTag') is not None:
            self.short_url_serve_tag = m.get('ShortUrlServeTag')
        if m.get('SmsMarketingAssistantTag') is not None:
            self.sms_marketing_assistant_tag = m.get('SmsMarketingAssistantTag')
        if m.get('TextAbilityMark') is not None:
            self.text_ability_mark = m.get('TextAbilityMark')
        if m.get('VoucherNum') is not None:
            self.voucher_num = m.get('VoucherNum')
        return self


class QuerySmsBaseScreenNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsBaseScreenNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsBaseScreenNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsDetectCountsRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QuerySmsDetectCountsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QuerySmsDetectCountsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsDetectCountsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsDetectCountsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsDetectCountsNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QuerySmsDetectCountsNewResponseBody(TeaModel):
    def __init__(
        self,
        detected_times: int = None,
        left_times: int = None,
        request_id: str = None,
    ):
        self.detected_times = detected_times
        self.left_times = left_times
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.detected_times is not None:
            result['DetectedTimes'] = self.detected_times
        if self.left_times is not None:
            result['LeftTimes'] = self.left_times
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DetectedTimes') is not None:
            self.detected_times = m.get('DetectedTimes')
        if m.get('LeftTimes') is not None:
            self.left_times = m.get('LeftTimes')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QuerySmsDetectCountsNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsDetectCountsNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsDetectCountsNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsDetectListRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QuerySmsDetectListResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QuerySmsDetectListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsDetectListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsDetectListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsDetectListNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QuerySmsDetectListNewResponseBodyList(TeaModel):
    def __init__(
        self,
        detect_content: str = None,
        detect_sign_name: str = None,
        detect_time: str = None,
        status: int = None,
        success_rate: str = None,
        template_code: str = None,
        template_param: str = None,
    ):
        self.detect_content = detect_content
        self.detect_sign_name = detect_sign_name
        self.detect_time = detect_time
        self.status = status
        self.success_rate = success_rate
        self.template_code = template_code
        self.template_param = template_param

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.detect_content is not None:
            result['DetectContent'] = self.detect_content
        if self.detect_sign_name is not None:
            result['DetectSignName'] = self.detect_sign_name
        if self.detect_time is not None:
            result['DetectTime'] = self.detect_time
        if self.status is not None:
            result['Status'] = self.status
        if self.success_rate is not None:
            result['SuccessRate'] = self.success_rate
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_param is not None:
            result['TemplateParam'] = self.template_param
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DetectContent') is not None:
            self.detect_content = m.get('DetectContent')
        if m.get('DetectSignName') is not None:
            self.detect_sign_name = m.get('DetectSignName')
        if m.get('DetectTime') is not None:
            self.detect_time = m.get('DetectTime')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('SuccessRate') is not None:
            self.success_rate = m.get('SuccessRate')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateParam') is not None:
            self.template_param = m.get('TemplateParam')
        return self


class QuerySmsDetectListNewResponseBody(TeaModel):
    def __init__(
        self,
        list: List[QuerySmsDetectListNewResponseBodyList] = None,
        page_no: int = None,
        page_size: int = None,
        request_id: str = None,
        total: int = None,
    ):
        self.list = list
        self.page_no = page_no
        self.page_size = page_size
        self.request_id = request_id
        self.total = total

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QuerySmsDetectListNewResponseBodyList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class QuerySmsDetectListNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsDetectListNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsDetectListNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsPackageDetailRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        package_type: str = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        status: int = None,
    ):
        self.owner_id = owner_id
        self.package_type = package_type
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.package_type is not None:
            result['PackageType'] = self.package_type
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PackageType') is not None:
            self.package_type = m.get('PackageType')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class QuerySmsPackageDetailResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySmsPackageDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsPackageDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsPackageDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsPackageDetailNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        package_type: str = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        status: int = None,
    ):
        self.owner_id = owner_id
        self.package_type = package_type
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.package_type is not None:
            result['PackageType'] = self.package_type
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PackageType') is not None:
            self.package_type = m.get('PackageType')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO(TeaModel):
    def __init__(
        self,
        invalid_time: int = None,
        order_time: int = None,
        package_type: str = None,
        remain_count: int = None,
        status: int = None,
        total_count: int = None,
    ):
        self.invalid_time = invalid_time
        self.order_time = order_time
        self.package_type = package_type
        self.remain_count = remain_count
        self.status = status
        self.total_count = total_count

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.invalid_time is not None:
            result['InvalidTime'] = self.invalid_time
        if self.order_time is not None:
            result['OrderTime'] = self.order_time
        if self.package_type is not None:
            result['PackageType'] = self.package_type
        if self.remain_count is not None:
            result['RemainCount'] = self.remain_count
        if self.status is not None:
            result['Status'] = self.status
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InvalidTime') is not None:
            self.invalid_time = m.get('InvalidTime')
        if m.get('OrderTime') is not None:
            self.order_time = m.get('OrderTime')
        if m.get('PackageType') is not None:
            self.package_type = m.get('PackageType')
        if m.get('RemainCount') is not None:
            self.remain_count = m.get('RemainCount')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class QuerySmsPackageDetailNewResponseBodyList(TeaModel):
    def __init__(
        self,
        sms_package_detail_dto: List[QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO] = None,
    ):
        self.sms_package_detail_dto = sms_package_detail_dto

    def validate(self):
        if self.sms_package_detail_dto:
            for k in self.sms_package_detail_dto:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SmsPackageDetailDTO'] = []
        if self.sms_package_detail_dto is not None:
            for k in self.sms_package_detail_dto:
                result['SmsPackageDetailDTO'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.sms_package_detail_dto = []
        if m.get('SmsPackageDetailDTO') is not None:
            for k in m.get('SmsPackageDetailDTO'):
                temp_model = QuerySmsPackageDetailNewResponseBodyListSmsPackageDetailDTO()
                self.sms_package_detail_dto.append(temp_model.from_map(k))
        return self


class QuerySmsPackageDetailNewResponseBody(TeaModel):
    def __init__(
        self,
        list: QuerySmsPackageDetailNewResponseBodyList = None,
        page_no: int = None,
        page_size: int = None,
        remain_sms_count: int = None,
        request_id: str = None,
        total: int = None,
        total_sms_count: int = None,
    ):
        self.list = list
        self.page_no = page_no
        self.page_size = page_size
        self.remain_sms_count = remain_sms_count
        self.request_id = request_id
        self.total = total
        self.total_sms_count = total_sms_count

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.remain_sms_count is not None:
            result['RemainSmsCount'] = self.remain_sms_count
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total is not None:
            result['Total'] = self.total
        if self.total_sms_count is not None:
            result['TotalSmsCount'] = self.total_sms_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = QuerySmsPackageDetailNewResponseBodyList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RemainSmsCount') is not None:
            self.remain_sms_count = m.get('RemainSmsCount')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        if m.get('TotalSmsCount') is not None:
            self.total_sms_count = m.get('TotalSmsCount')
        return self


class QuerySmsPackageDetailNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsPackageDetailNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsPackageDetailNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsPackageNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        package_type: str = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        product_name: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        state: int = None,
        time: str = None,
    ):
        self.owner_id = owner_id
        self.package_type = package_type
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.product_name = product_name
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.state = state
        self.time = time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.package_type is not None:
            result['PackageType'] = self.package_type
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.product_name is not None:
            result['ProductName'] = self.product_name
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.state is not None:
            result['State'] = self.state
        if self.time is not None:
            result['Time'] = self.time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PackageType') is not None:
            self.package_type = m.get('PackageType')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProductName') is not None:
            self.product_name = m.get('ProductName')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Time') is not None:
            self.time = m.get('Time')
        return self


class QuerySmsPackageNewResponseBodyListSmsPackageInfo(TeaModel):
    def __init__(
        self,
        buy_time: str = None,
        detail_order_id: str = None,
        eff_time: str = None,
        exp_time: str = None,
        order_id: str = None,
        package_name: str = None,
        package_type: str = None,
        pay_price: float = None,
        pkg_id: int = None,
        refund_status: int = None,
        state: int = None,
        total: int = None,
        usage: int = None,
    ):
        self.buy_time = buy_time
        self.detail_order_id = detail_order_id
        self.eff_time = eff_time
        self.exp_time = exp_time
        self.order_id = order_id
        self.package_name = package_name
        self.package_type = package_type
        self.pay_price = pay_price
        self.pkg_id = pkg_id
        self.refund_status = refund_status
        self.state = state
        self.total = total
        self.usage = usage

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.buy_time is not None:
            result['BuyTime'] = self.buy_time
        if self.detail_order_id is not None:
            result['DetailOrderId'] = self.detail_order_id
        if self.eff_time is not None:
            result['EffTime'] = self.eff_time
        if self.exp_time is not None:
            result['ExpTime'] = self.exp_time
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.package_name is not None:
            result['PackageName'] = self.package_name
        if self.package_type is not None:
            result['PackageType'] = self.package_type
        if self.pay_price is not None:
            result['PayPrice'] = self.pay_price
        if self.pkg_id is not None:
            result['PkgId'] = self.pkg_id
        if self.refund_status is not None:
            result['RefundStatus'] = self.refund_status
        if self.state is not None:
            result['State'] = self.state
        if self.total is not None:
            result['Total'] = self.total
        if self.usage is not None:
            result['Usage'] = self.usage
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BuyTime') is not None:
            self.buy_time = m.get('BuyTime')
        if m.get('DetailOrderId') is not None:
            self.detail_order_id = m.get('DetailOrderId')
        if m.get('EffTime') is not None:
            self.eff_time = m.get('EffTime')
        if m.get('ExpTime') is not None:
            self.exp_time = m.get('ExpTime')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('PackageName') is not None:
            self.package_name = m.get('PackageName')
        if m.get('PackageType') is not None:
            self.package_type = m.get('PackageType')
        if m.get('PayPrice') is not None:
            self.pay_price = m.get('PayPrice')
        if m.get('PkgId') is not None:
            self.pkg_id = m.get('PkgId')
        if m.get('RefundStatus') is not None:
            self.refund_status = m.get('RefundStatus')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        return self


class QuerySmsPackageNewResponseBodyList(TeaModel):
    def __init__(
        self,
        sms_package_info: List[QuerySmsPackageNewResponseBodyListSmsPackageInfo] = None,
    ):
        self.sms_package_info = sms_package_info

    def validate(self):
        if self.sms_package_info:
            for k in self.sms_package_info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SmsPackageInfo'] = []
        if self.sms_package_info is not None:
            for k in self.sms_package_info:
                result['SmsPackageInfo'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.sms_package_info = []
        if m.get('SmsPackageInfo') is not None:
            for k in m.get('SmsPackageInfo'):
                temp_model = QuerySmsPackageNewResponseBodyListSmsPackageInfo()
                self.sms_package_info.append(temp_model.from_map(k))
        return self


class QuerySmsPackageNewResponseBody(TeaModel):
    def __init__(
        self,
        list: QuerySmsPackageNewResponseBodyList = None,
        page_no: int = None,
        page_size: int = None,
        request_id: str = None,
        total: int = None,
    ):
        self.list = list
        self.page_no = page_no
        self.page_size = page_size
        self.request_id = request_id
        self.total = total

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = QuerySmsPackageNewResponseBodyList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class QuerySmsPackageNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsPackageNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsPackageNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsPackageOrderListRequest(TeaModel):
    def __init__(
        self,
        bill_cycle: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.bill_cycle = bill_cycle
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_cycle is not None:
            result['BillCycle'] = self.bill_cycle
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BillCycle') is not None:
            self.bill_cycle = m.get('BillCycle')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QuerySmsPackageOrderListResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySmsPackageOrderListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsPackageOrderListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsPackageOrderListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsPackageOrderListNewRequest(TeaModel):
    def __init__(
        self,
        bill_cycle: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.bill_cycle = bill_cycle
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_cycle is not None:
            result['BillCycle'] = self.bill_cycle
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BillCycle') is not None:
            self.bill_cycle = m.get('BillCycle')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QuerySmsPackageOrderListNewResponseBodyListSmsPackageOrderResponse(TeaModel):
    def __init__(
        self,
        effect_date: str = None,
        expire_date: str = None,
        name: str = None,
        pay_price: str = None,
        state: int = None,
    ):
        self.effect_date = effect_date
        self.expire_date = expire_date
        self.name = name
        self.pay_price = pay_price
        self.state = state

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.effect_date is not None:
            result['EffectDate'] = self.effect_date
        if self.expire_date is not None:
            result['ExpireDate'] = self.expire_date
        if self.name is not None:
            result['Name'] = self.name
        if self.pay_price is not None:
            result['PayPrice'] = self.pay_price
        if self.state is not None:
            result['State'] = self.state
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EffectDate') is not None:
            self.effect_date = m.get('EffectDate')
        if m.get('ExpireDate') is not None:
            self.expire_date = m.get('ExpireDate')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('PayPrice') is not None:
            self.pay_price = m.get('PayPrice')
        if m.get('State') is not None:
            self.state = m.get('State')
        return self


class QuerySmsPackageOrderListNewResponseBodyList(TeaModel):
    def __init__(
        self,
        sms_package_order_response: List[QuerySmsPackageOrderListNewResponseBodyListSmsPackageOrderResponse] = None,
    ):
        self.sms_package_order_response = sms_package_order_response

    def validate(self):
        if self.sms_package_order_response:
            for k in self.sms_package_order_response:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SmsPackageOrderResponse'] = []
        if self.sms_package_order_response is not None:
            for k in self.sms_package_order_response:
                result['SmsPackageOrderResponse'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.sms_package_order_response = []
        if m.get('SmsPackageOrderResponse') is not None:
            for k in m.get('SmsPackageOrderResponse'):
                temp_model = QuerySmsPackageOrderListNewResponseBodyListSmsPackageOrderResponse()
                self.sms_package_order_response.append(temp_model.from_map(k))
        return self


class QuerySmsPackageOrderListNewResponseBody(TeaModel):
    def __init__(
        self,
        list: QuerySmsPackageOrderListNewResponseBodyList = None,
        request_id: str = None,
    ):
        self.list = list
        self.request_id = request_id

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = QuerySmsPackageOrderListNewResponseBodyList()
            self.list = temp_model.from_map(m['List'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QuerySmsPackageOrderListNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsPackageOrderListNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsPackageOrderListNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsPackageSummaryRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QuerySmsPackageSummaryResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySmsPackageSummaryResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsPackageSummaryResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsPackageSummaryResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsPackageSummaryNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QuerySmsPackageSummaryNewResponseBody(TeaModel):
    def __init__(
        self,
        certify_type: int = None,
        inter_package_count: int = None,
        inter_package_sum: int = None,
        mkt_package_count: int = None,
        mkt_package_sum: int = None,
        request_id: str = None,
        sms_package_count: int = None,
        sms_package_sum: int = None,
        sys_package_count: int = None,
        sys_package_sum: int = None,
    ):
        self.certify_type = certify_type
        self.inter_package_count = inter_package_count
        self.inter_package_sum = inter_package_sum
        self.mkt_package_count = mkt_package_count
        self.mkt_package_sum = mkt_package_sum
        self.request_id = request_id
        self.sms_package_count = sms_package_count
        self.sms_package_sum = sms_package_sum
        self.sys_package_count = sys_package_count
        self.sys_package_sum = sys_package_sum

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.certify_type is not None:
            result['CertifyType'] = self.certify_type
        if self.inter_package_count is not None:
            result['InterPackageCount'] = self.inter_package_count
        if self.inter_package_sum is not None:
            result['InterPackageSum'] = self.inter_package_sum
        if self.mkt_package_count is not None:
            result['MktPackageCount'] = self.mkt_package_count
        if self.mkt_package_sum is not None:
            result['MktPackageSum'] = self.mkt_package_sum
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.sms_package_count is not None:
            result['SmsPackageCount'] = self.sms_package_count
        if self.sms_package_sum is not None:
            result['SmsPackageSum'] = self.sms_package_sum
        if self.sys_package_count is not None:
            result['SysPackageCount'] = self.sys_package_count
        if self.sys_package_sum is not None:
            result['SysPackageSum'] = self.sys_package_sum
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CertifyType') is not None:
            self.certify_type = m.get('CertifyType')
        if m.get('InterPackageCount') is not None:
            self.inter_package_count = m.get('InterPackageCount')
        if m.get('InterPackageSum') is not None:
            self.inter_package_sum = m.get('InterPackageSum')
        if m.get('MktPackageCount') is not None:
            self.mkt_package_count = m.get('MktPackageCount')
        if m.get('MktPackageSum') is not None:
            self.mkt_package_sum = m.get('MktPackageSum')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SmsPackageCount') is not None:
            self.sms_package_count = m.get('SmsPackageCount')
        if m.get('SmsPackageSum') is not None:
            self.sms_package_sum = m.get('SmsPackageSum')
        if m.get('SysPackageCount') is not None:
            self.sys_package_count = m.get('SysPackageCount')
        if m.get('SysPackageSum') is not None:
            self.sys_package_sum = m.get('SysPackageSum')
        return self


class QuerySmsPackageSummaryNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsPackageSummaryNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsPackageSummaryNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsSaasTaskDetailRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        task_id: int = None,
        task_instance_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.task_id = task_id
        self.task_instance_id = task_instance_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_instance_id is not None:
            result['TaskInstanceId'] = self.task_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskInstanceId') is not None:
            self.task_instance_id = m.get('TaskInstanceId')
        return self


class QuerySmsSaasTaskDetailResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySmsSaasTaskDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsSaasTaskDetailResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsSaasTaskDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsSaasTaskDetailNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        task_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class QuerySmsSaasTaskDetailNewResponseBodyPhoneList(TeaModel):
    def __init__(
        self,
        phone_num: List[str] = None,
    ):
        self.phone_num = phone_num

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.phone_num is not None:
            result['phoneNum'] = self.phone_num
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('phoneNum') is not None:
            self.phone_num = m.get('phoneNum')
        return self


class QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParamParamList(TeaModel):
    def __init__(
        self,
        param: List[str] = None,
    ):
        self.param = param

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.param is not None:
            result['Param'] = self.param
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Param') is not None:
            self.param = m.get('Param')
        return self


class QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam(TeaModel):
    def __init__(
        self,
        aliyun_uid: int = None,
        bill_count: int = None,
        byte_count: int = None,
        client_ip: str = None,
        cust_id: int = None,
        cycle_num: int = None,
        param_list: QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParamParamList = None,
        partner_id: int = None,
        signature: str = None,
        sms_content: str = None,
        sms_template_code: str = None,
        task_error_case: str = None,
        task_error_suggestion: str = None,
    ):
        self.aliyun_uid = aliyun_uid
        self.bill_count = bill_count
        self.byte_count = byte_count
        self.client_ip = client_ip
        self.cust_id = cust_id
        self.cycle_num = cycle_num
        self.param_list = param_list
        self.partner_id = partner_id
        self.signature = signature
        self.sms_content = sms_content
        self.sms_template_code = sms_template_code
        self.task_error_case = task_error_case
        self.task_error_suggestion = task_error_suggestion

    def validate(self):
        if self.param_list:
            self.param_list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.bill_count is not None:
            result['BillCount'] = self.bill_count
        if self.byte_count is not None:
            result['ByteCount'] = self.byte_count
        if self.client_ip is not None:
            result['ClientIp'] = self.client_ip
        if self.cust_id is not None:
            result['CustId'] = self.cust_id
        if self.cycle_num is not None:
            result['CycleNum'] = self.cycle_num
        if self.param_list is not None:
            result['ParamList'] = self.param_list.to_map()
        if self.partner_id is not None:
            result['PartnerId'] = self.partner_id
        if self.signature is not None:
            result['Signature'] = self.signature
        if self.sms_content is not None:
            result['SmsContent'] = self.sms_content
        if self.sms_template_code is not None:
            result['SmsTemplateCode'] = self.sms_template_code
        if self.task_error_case is not None:
            result['TaskErrorCase'] = self.task_error_case
        if self.task_error_suggestion is not None:
            result['TaskErrorSuggestion'] = self.task_error_suggestion
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('BillCount') is not None:
            self.bill_count = m.get('BillCount')
        if m.get('ByteCount') is not None:
            self.byte_count = m.get('ByteCount')
        if m.get('ClientIp') is not None:
            self.client_ip = m.get('ClientIp')
        if m.get('CustId') is not None:
            self.cust_id = m.get('CustId')
        if m.get('CycleNum') is not None:
            self.cycle_num = m.get('CycleNum')
        if m.get('ParamList') is not None:
            temp_model = QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParamParamList()
            self.param_list = temp_model.from_map(m['ParamList'])
        if m.get('PartnerId') is not None:
            self.partner_id = m.get('PartnerId')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        if m.get('SmsContent') is not None:
            self.sms_content = m.get('SmsContent')
        if m.get('SmsTemplateCode') is not None:
            self.sms_template_code = m.get('SmsTemplateCode')
        if m.get('TaskErrorCase') is not None:
            self.task_error_case = m.get('TaskErrorCase')
        if m.get('TaskErrorSuggestion') is not None:
            self.task_error_suggestion = m.get('TaskErrorSuggestion')
        return self


class QuerySmsSaasTaskDetailNewResponseBody(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        detail_download_url: str = None,
        detail_download_url_for_success: str = None,
        ext_params: str = None,
        fail_count: int = None,
        fire_time: str = None,
        gmt_create: str = None,
        is_deleted: bool = None,
        is_permit_order: bool = None,
        is_permit_order_for_success: bool = None,
        oss_file_path: str = None,
        phone_list: QuerySmsSaasTaskDetailNewResponseBodyPhoneList = None,
        request_id: str = None,
        saas_base_comm_param: QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam = None,
        saas_file_url: str = None,
        schedule_type: str = None,
        status: str = None,
        success_count: int = None,
        task_id: int = None,
        task_instance_id: int = None,
        task_name: str = None,
        total_count: int = None,
    ):
        self.biz_type = biz_type
        self.detail_download_url = detail_download_url
        self.detail_download_url_for_success = detail_download_url_for_success
        self.ext_params = ext_params
        self.fail_count = fail_count
        self.fire_time = fire_time
        self.gmt_create = gmt_create
        self.is_deleted = is_deleted
        self.is_permit_order = is_permit_order
        self.is_permit_order_for_success = is_permit_order_for_success
        self.oss_file_path = oss_file_path
        self.phone_list = phone_list
        self.request_id = request_id
        self.saas_base_comm_param = saas_base_comm_param
        self.saas_file_url = saas_file_url
        self.schedule_type = schedule_type
        self.status = status
        self.success_count = success_count
        self.task_id = task_id
        self.task_instance_id = task_instance_id
        self.task_name = task_name
        self.total_count = total_count

    def validate(self):
        if self.phone_list:
            self.phone_list.validate()
        if self.saas_base_comm_param:
            self.saas_base_comm_param.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.detail_download_url is not None:
            result['DetailDownloadUrl'] = self.detail_download_url
        if self.detail_download_url_for_success is not None:
            result['DetailDownloadUrlForSuccess'] = self.detail_download_url_for_success
        if self.ext_params is not None:
            result['ExtParams'] = self.ext_params
        if self.fail_count is not None:
            result['FailCount'] = self.fail_count
        if self.fire_time is not None:
            result['FireTime'] = self.fire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.is_deleted is not None:
            result['IsDeleted'] = self.is_deleted
        if self.is_permit_order is not None:
            result['IsPermitOrder'] = self.is_permit_order
        if self.is_permit_order_for_success is not None:
            result['IsPermitOrderForSuccess'] = self.is_permit_order_for_success
        if self.oss_file_path is not None:
            result['OssFilePath'] = self.oss_file_path
        if self.phone_list is not None:
            result['PhoneList'] = self.phone_list.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.saas_base_comm_param is not None:
            result['SaasBaseCommParam'] = self.saas_base_comm_param.to_map()
        if self.saas_file_url is not None:
            result['SaasFileUrl'] = self.saas_file_url
        if self.schedule_type is not None:
            result['ScheduleType'] = self.schedule_type
        if self.status is not None:
            result['Status'] = self.status
        if self.success_count is not None:
            result['SuccessCount'] = self.success_count
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_instance_id is not None:
            result['TaskInstanceId'] = self.task_instance_id
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('DetailDownloadUrl') is not None:
            self.detail_download_url = m.get('DetailDownloadUrl')
        if m.get('DetailDownloadUrlForSuccess') is not None:
            self.detail_download_url_for_success = m.get('DetailDownloadUrlForSuccess')
        if m.get('ExtParams') is not None:
            self.ext_params = m.get('ExtParams')
        if m.get('FailCount') is not None:
            self.fail_count = m.get('FailCount')
        if m.get('FireTime') is not None:
            self.fire_time = m.get('FireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('IsDeleted') is not None:
            self.is_deleted = m.get('IsDeleted')
        if m.get('IsPermitOrder') is not None:
            self.is_permit_order = m.get('IsPermitOrder')
        if m.get('IsPermitOrderForSuccess') is not None:
            self.is_permit_order_for_success = m.get('IsPermitOrderForSuccess')
        if m.get('OssFilePath') is not None:
            self.oss_file_path = m.get('OssFilePath')
        if m.get('PhoneList') is not None:
            temp_model = QuerySmsSaasTaskDetailNewResponseBodyPhoneList()
            self.phone_list = temp_model.from_map(m['PhoneList'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SaasBaseCommParam') is not None:
            temp_model = QuerySmsSaasTaskDetailNewResponseBodySaasBaseCommParam()
            self.saas_base_comm_param = temp_model.from_map(m['SaasBaseCommParam'])
        if m.get('SaasFileUrl') is not None:
            self.saas_file_url = m.get('SaasFileUrl')
        if m.get('ScheduleType') is not None:
            self.schedule_type = m.get('ScheduleType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('SuccessCount') is not None:
            self.success_count = m.get('SuccessCount')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskInstanceId') is not None:
            self.task_instance_id = m.get('TaskInstanceId')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class QuerySmsSaasTaskDetailNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsSaasTaskDetailNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsSaasTaskDetailNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsSaasTaskListRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        service_type: str = None,
        status: str = None,
        task_name: str = None,
    ):
        self.biz_type = biz_type
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.service_type = service_type
        self.status = status
        self.task_name = task_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        if self.status is not None:
            result['Status'] = self.status
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        return self


class QuerySmsSaasTaskListResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySmsSaasTaskListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsSaasTaskListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsSaasTaskListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsSaasTaskListNewRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        status: str = None,
        task_name: str = None,
    ):
        self.biz_type = biz_type
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.status = status
        self.task_name = task_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.status is not None:
            result['Status'] = self.status
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        return self


class QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTOCommParams(TeaModel):
    def __init__(
        self,
        aliyun_uid: int = None,
        cust_id: int = None,
        cycle_num: int = None,
        partner_id: int = None,
    ):
        self.aliyun_uid = aliyun_uid
        self.cust_id = cust_id
        self.cycle_num = cycle_num
        self.partner_id = partner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aliyun_uid is not None:
            result['AliyunUid'] = self.aliyun_uid
        if self.cust_id is not None:
            result['CustId'] = self.cust_id
        if self.cycle_num is not None:
            result['CycleNum'] = self.cycle_num
        if self.partner_id is not None:
            result['PartnerId'] = self.partner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AliyunUid') is not None:
            self.aliyun_uid = m.get('AliyunUid')
        if m.get('CustId') is not None:
            self.cust_id = m.get('CustId')
        if m.get('CycleNum') is not None:
            self.cycle_num = m.get('CycleNum')
        if m.get('PartnerId') is not None:
            self.partner_id = m.get('PartnerId')
        return self


class QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        comm_params: QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTOCommParams = None,
        detail_download_url: str = None,
        detail_download_url_for_success: str = None,
        ext_params: str = None,
        fail_count: int = None,
        fire_time: str = None,
        gmt_create: str = None,
        is_deleted: bool = None,
        is_permit_order: bool = None,
        is_permit_order_for_success: bool = None,
        oss_file_path: str = None,
        schedule_type: str = None,
        status: str = None,
        success_count: int = None,
        task_id: int = None,
        task_instance_id: int = None,
        task_name: str = None,
        total_count: int = None,
    ):
        self.biz_type = biz_type
        self.comm_params = comm_params
        self.detail_download_url = detail_download_url
        self.detail_download_url_for_success = detail_download_url_for_success
        self.ext_params = ext_params
        self.fail_count = fail_count
        self.fire_time = fire_time
        self.gmt_create = gmt_create
        self.is_deleted = is_deleted
        self.is_permit_order = is_permit_order
        self.is_permit_order_for_success = is_permit_order_for_success
        self.oss_file_path = oss_file_path
        self.schedule_type = schedule_type
        self.status = status
        self.success_count = success_count
        self.task_id = task_id
        self.task_instance_id = task_instance_id
        self.task_name = task_name
        self.total_count = total_count

    def validate(self):
        if self.comm_params:
            self.comm_params.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.comm_params is not None:
            result['CommParams'] = self.comm_params.to_map()
        if self.detail_download_url is not None:
            result['DetailDownloadUrl'] = self.detail_download_url
        if self.detail_download_url_for_success is not None:
            result['DetailDownloadUrlForSuccess'] = self.detail_download_url_for_success
        if self.ext_params is not None:
            result['ExtParams'] = self.ext_params
        if self.fail_count is not None:
            result['FailCount'] = self.fail_count
        if self.fire_time is not None:
            result['FireTime'] = self.fire_time
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.is_deleted is not None:
            result['IsDeleted'] = self.is_deleted
        if self.is_permit_order is not None:
            result['IsPermitOrder'] = self.is_permit_order
        if self.is_permit_order_for_success is not None:
            result['IsPermitOrderForSuccess'] = self.is_permit_order_for_success
        if self.oss_file_path is not None:
            result['OssFilePath'] = self.oss_file_path
        if self.schedule_type is not None:
            result['ScheduleType'] = self.schedule_type
        if self.status is not None:
            result['Status'] = self.status
        if self.success_count is not None:
            result['SuccessCount'] = self.success_count
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.task_instance_id is not None:
            result['TaskInstanceId'] = self.task_instance_id
        if self.task_name is not None:
            result['TaskName'] = self.task_name
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('CommParams') is not None:
            temp_model = QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTOCommParams()
            self.comm_params = temp_model.from_map(m['CommParams'])
        if m.get('DetailDownloadUrl') is not None:
            self.detail_download_url = m.get('DetailDownloadUrl')
        if m.get('DetailDownloadUrlForSuccess') is not None:
            self.detail_download_url_for_success = m.get('DetailDownloadUrlForSuccess')
        if m.get('ExtParams') is not None:
            self.ext_params = m.get('ExtParams')
        if m.get('FailCount') is not None:
            self.fail_count = m.get('FailCount')
        if m.get('FireTime') is not None:
            self.fire_time = m.get('FireTime')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('IsDeleted') is not None:
            self.is_deleted = m.get('IsDeleted')
        if m.get('IsPermitOrder') is not None:
            self.is_permit_order = m.get('IsPermitOrder')
        if m.get('IsPermitOrderForSuccess') is not None:
            self.is_permit_order_for_success = m.get('IsPermitOrderForSuccess')
        if m.get('OssFilePath') is not None:
            self.oss_file_path = m.get('OssFilePath')
        if m.get('ScheduleType') is not None:
            self.schedule_type = m.get('ScheduleType')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('SuccessCount') is not None:
            self.success_count = m.get('SuccessCount')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('TaskInstanceId') is not None:
            self.task_instance_id = m.get('TaskInstanceId')
        if m.get('TaskName') is not None:
            self.task_name = m.get('TaskName')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class QuerySmsSaasTaskListNewResponseBodyList(TeaModel):
    def __init__(
        self,
        fc_saas_task_dto: List[QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO] = None,
    ):
        self.fc_saas_task_dto = fc_saas_task_dto

    def validate(self):
        if self.fc_saas_task_dto:
            for k in self.fc_saas_task_dto:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['FcSaasTaskDTO'] = []
        if self.fc_saas_task_dto is not None:
            for k in self.fc_saas_task_dto:
                result['FcSaasTaskDTO'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.fc_saas_task_dto = []
        if m.get('FcSaasTaskDTO') is not None:
            for k in m.get('FcSaasTaskDTO'):
                temp_model = QuerySmsSaasTaskListNewResponseBodyListFcSaasTaskDTO()
                self.fc_saas_task_dto.append(temp_model.from_map(k))
        return self


class QuerySmsSaasTaskListNewResponseBody(TeaModel):
    def __init__(
        self,
        list: QuerySmsSaasTaskListNewResponseBodyList = None,
        page_no: int = None,
        page_size: int = None,
        request_id: str = None,
        total: int = None,
    ):
        self.list = list
        self.page_no = page_no
        self.page_size = page_size
        self.request_id = request_id
        self.total = total

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = QuerySmsSaasTaskListNewResponseBodyList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class QuerySmsSaasTaskListNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsSaasTaskListNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsSaasTaskListNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsSendFailDetailsUrlRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        prod_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        send_date: str = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.prod_id = prod_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.send_date = send_date

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_id is not None:
            result['ProdId'] = self.prod_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.send_date is not None:
            result['SendDate'] = self.send_date
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdId') is not None:
            self.prod_id = m.get('ProdId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SendDate') is not None:
            self.send_date = m.get('SendDate')
        return self


class QuerySmsSendFailDetailsUrlResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySmsSendFailDetailsUrlResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsSendFailDetailsUrlResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsSendFailDetailsUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsSendFailDetailsUrlNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        prod_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        send_date: str = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.prod_id = prod_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.send_date = send_date

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_id is not None:
            result['ProdId'] = self.prod_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.send_date is not None:
            result['SendDate'] = self.send_date
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdId') is not None:
            self.prod_id = m.get('ProdId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SendDate') is not None:
            self.send_date = m.get('SendDate')
        return self


class QuerySmsSendFailDetailsUrlNewResponseBody(TeaModel):
    def __init__(
        self,
        download_url: str = None,
        request_id: str = None,
        status: str = None,
    ):
        self.download_url = download_url
        self.request_id = request_id
        self.status = status

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.download_url is not None:
            result['DownloadUrl'] = self.download_url
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.status is not None:
            result['Status'] = self.status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DownloadUrl') is not None:
            self.download_url = m.get('DownloadUrl')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        return self


class QuerySmsSendFailDetailsUrlNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsSendFailDetailsUrlNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsSendFailDetailsUrlNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsSignDetailBySignIdNewRequest(TeaModel):
    def __init__(
        self,
        id: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        sign_gray: bool = None,
    ):
        # This parameter is required.
        self.id = id
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.sign_gray = sign_gray

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.id is not None:
            result['Id'] = self.id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.sign_gray is not None:
            result['SignGray'] = self.sign_gray
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SignGray') is not None:
            self.sign_gray = m.get('SignGray')
        return self


class QuerySmsSignDetailBySignIdNewResponseBodyApplicationScene(TeaModel):
    def __init__(
        self,
        content: str = None,
        id: int = None,
        name: str = None,
    ):
        self.content = content
        self.id = id
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class QuerySmsSignDetailBySignIdNewResponseBodyList(TeaModel):
    def __init__(
        self,
        audit_state: str = None,
        scene_type: int = None,
    ):
        self.audit_state = audit_state
        self.scene_type = scene_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        return self


class QuerySmsSignDetailBySignIdNewResponseBody(TeaModel):
    def __init__(
        self,
        access_token: str = None,
        application_scene: QuerySmsSignDetailBySignIdNewResponseBodyApplicationScene = None,
        audit_info: str = None,
        audit_remark_info: str = None,
        audit_state: str = None,
        authorization: str = None,
        authorization_eff_time: str = None,
        authorization_letter: str = None,
        authorization_letter_audit_pass: bool = None,
        authorization_letter_id: str = None,
        authorization_letter_name: str = None,
        authorization_letter_state: str = None,
        authorization_letter_status: str = None,
        authorization_sign_scope: str = None,
        effect_scene_type: int = None,
        enable_authorization_letter: bool = None,
        extend_message: str = None,
        file_ids: List[int] = None,
        file_url_list: List[str] = None,
        from_: str = None,
        gmt_create_str: str = None,
        id: str = None,
        is_authorization_letter_ocrcomplete: bool = None,
        is_authorization_letter_ocrdiff: bool = None,
        is_sign_scope_ocrdiff: bool = None,
        list: List[QuerySmsSignDetailBySignIdNewResponseBodyList] = None,
        need_authorized: bool = None,
        open_tag: bool = None,
        order_id: str = None,
        organization_code: str = None,
        oss_keys: List[str] = None,
        proxy_authorization: str = None,
        remark: str = None,
        request_id: str = None,
        scene_type: int = None,
        service_type: int = None,
        sign_code: str = None,
        sign_name: str = None,
        sign_scope_ocr: str = None,
        sign_upgrade: str = None,
    ):
        self.access_token = access_token
        self.application_scene = application_scene
        self.audit_info = audit_info
        self.audit_remark_info = audit_remark_info
        self.audit_state = audit_state
        self.authorization = authorization
        self.authorization_eff_time = authorization_eff_time
        self.authorization_letter = authorization_letter
        self.authorization_letter_audit_pass = authorization_letter_audit_pass
        self.authorization_letter_id = authorization_letter_id
        self.authorization_letter_name = authorization_letter_name
        self.authorization_letter_state = authorization_letter_state
        self.authorization_letter_status = authorization_letter_status
        self.authorization_sign_scope = authorization_sign_scope
        self.effect_scene_type = effect_scene_type
        self.enable_authorization_letter = enable_authorization_letter
        self.extend_message = extend_message
        self.file_ids = file_ids
        self.file_url_list = file_url_list
        self.from_ = from_
        self.gmt_create_str = gmt_create_str
        self.id = id
        self.is_authorization_letter_ocrcomplete = is_authorization_letter_ocrcomplete
        self.is_authorization_letter_ocrdiff = is_authorization_letter_ocrdiff
        self.is_sign_scope_ocrdiff = is_sign_scope_ocrdiff
        self.list = list
        self.need_authorized = need_authorized
        self.open_tag = open_tag
        self.order_id = order_id
        self.organization_code = organization_code
        self.oss_keys = oss_keys
        self.proxy_authorization = proxy_authorization
        self.remark = remark
        self.request_id = request_id
        self.scene_type = scene_type
        self.service_type = service_type
        self.sign_code = sign_code
        self.sign_name = sign_name
        self.sign_scope_ocr = sign_scope_ocr
        self.sign_upgrade = sign_upgrade

    def validate(self):
        if self.application_scene:
            self.application_scene.validate()
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_token is not None:
            result['AccessToken'] = self.access_token
        if self.application_scene is not None:
            result['ApplicationScene'] = self.application_scene.to_map()
        if self.audit_info is not None:
            result['AuditInfo'] = self.audit_info
        if self.audit_remark_info is not None:
            result['AuditRemarkInfo'] = self.audit_remark_info
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.authorization is not None:
            result['Authorization'] = self.authorization
        if self.authorization_eff_time is not None:
            result['AuthorizationEffTime'] = self.authorization_eff_time
        if self.authorization_letter is not None:
            result['AuthorizationLetter'] = self.authorization_letter
        if self.authorization_letter_audit_pass is not None:
            result['AuthorizationLetterAuditPass'] = self.authorization_letter_audit_pass
        if self.authorization_letter_id is not None:
            result['AuthorizationLetterId'] = self.authorization_letter_id
        if self.authorization_letter_name is not None:
            result['AuthorizationLetterName'] = self.authorization_letter_name
        if self.authorization_letter_state is not None:
            result['AuthorizationLetterState'] = self.authorization_letter_state
        if self.authorization_letter_status is not None:
            result['AuthorizationLetterStatus'] = self.authorization_letter_status
        if self.authorization_sign_scope is not None:
            result['AuthorizationSignScope'] = self.authorization_sign_scope
        if self.effect_scene_type is not None:
            result['EffectSceneType'] = self.effect_scene_type
        if self.enable_authorization_letter is not None:
            result['EnableAuthorizationLetter'] = self.enable_authorization_letter
        if self.extend_message is not None:
            result['ExtendMessage'] = self.extend_message
        if self.file_ids is not None:
            result['FileIds'] = self.file_ids
        if self.file_url_list is not None:
            result['FileUrlList'] = self.file_url_list
        if self.from_ is not None:
            result['From'] = self.from_
        if self.gmt_create_str is not None:
            result['GmtCreateStr'] = self.gmt_create_str
        if self.id is not None:
            result['Id'] = self.id
        if self.is_authorization_letter_ocrcomplete is not None:
            result['IsAuthorizationLetterOCRComplete'] = self.is_authorization_letter_ocrcomplete
        if self.is_authorization_letter_ocrdiff is not None:
            result['IsAuthorizationLetterOCRDiff'] = self.is_authorization_letter_ocrdiff
        if self.is_sign_scope_ocrdiff is not None:
            result['IsSignScopeOCRDiff'] = self.is_sign_scope_ocrdiff
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.need_authorized is not None:
            result['NeedAuthorized'] = self.need_authorized
        if self.open_tag is not None:
            result['OpenTag'] = self.open_tag
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.organization_code is not None:
            result['OrganizationCode'] = self.organization_code
        if self.oss_keys is not None:
            result['OssKeys'] = self.oss_keys
        if self.proxy_authorization is not None:
            result['ProxyAuthorization'] = self.proxy_authorization
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        if self.sign_code is not None:
            result['SignCode'] = self.sign_code
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.sign_scope_ocr is not None:
            result['SignScopeOCR'] = self.sign_scope_ocr
        if self.sign_upgrade is not None:
            result['SignUpgrade'] = self.sign_upgrade
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessToken') is not None:
            self.access_token = m.get('AccessToken')
        if m.get('ApplicationScene') is not None:
            temp_model = QuerySmsSignDetailBySignIdNewResponseBodyApplicationScene()
            self.application_scene = temp_model.from_map(m['ApplicationScene'])
        if m.get('AuditInfo') is not None:
            self.audit_info = m.get('AuditInfo')
        if m.get('AuditRemarkInfo') is not None:
            self.audit_remark_info = m.get('AuditRemarkInfo')
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('Authorization') is not None:
            self.authorization = m.get('Authorization')
        if m.get('AuthorizationEffTime') is not None:
            self.authorization_eff_time = m.get('AuthorizationEffTime')
        if m.get('AuthorizationLetter') is not None:
            self.authorization_letter = m.get('AuthorizationLetter')
        if m.get('AuthorizationLetterAuditPass') is not None:
            self.authorization_letter_audit_pass = m.get('AuthorizationLetterAuditPass')
        if m.get('AuthorizationLetterId') is not None:
            self.authorization_letter_id = m.get('AuthorizationLetterId')
        if m.get('AuthorizationLetterName') is not None:
            self.authorization_letter_name = m.get('AuthorizationLetterName')
        if m.get('AuthorizationLetterState') is not None:
            self.authorization_letter_state = m.get('AuthorizationLetterState')
        if m.get('AuthorizationLetterStatus') is not None:
            self.authorization_letter_status = m.get('AuthorizationLetterStatus')
        if m.get('AuthorizationSignScope') is not None:
            self.authorization_sign_scope = m.get('AuthorizationSignScope')
        if m.get('EffectSceneType') is not None:
            self.effect_scene_type = m.get('EffectSceneType')
        if m.get('EnableAuthorizationLetter') is not None:
            self.enable_authorization_letter = m.get('EnableAuthorizationLetter')
        if m.get('ExtendMessage') is not None:
            self.extend_message = m.get('ExtendMessage')
        if m.get('FileIds') is not None:
            self.file_ids = m.get('FileIds')
        if m.get('FileUrlList') is not None:
            self.file_url_list = m.get('FileUrlList')
        if m.get('From') is not None:
            self.from_ = m.get('From')
        if m.get('GmtCreateStr') is not None:
            self.gmt_create_str = m.get('GmtCreateStr')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsAuthorizationLetterOCRComplete') is not None:
            self.is_authorization_letter_ocrcomplete = m.get('IsAuthorizationLetterOCRComplete')
        if m.get('IsAuthorizationLetterOCRDiff') is not None:
            self.is_authorization_letter_ocrdiff = m.get('IsAuthorizationLetterOCRDiff')
        if m.get('IsSignScopeOCRDiff') is not None:
            self.is_sign_scope_ocrdiff = m.get('IsSignScopeOCRDiff')
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QuerySmsSignDetailBySignIdNewResponseBodyList()
                self.list.append(temp_model.from_map(k))
        if m.get('NeedAuthorized') is not None:
            self.need_authorized = m.get('NeedAuthorized')
        if m.get('OpenTag') is not None:
            self.open_tag = m.get('OpenTag')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OrganizationCode') is not None:
            self.organization_code = m.get('OrganizationCode')
        if m.get('OssKeys') is not None:
            self.oss_keys = m.get('OssKeys')
        if m.get('ProxyAuthorization') is not None:
            self.proxy_authorization = m.get('ProxyAuthorization')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        if m.get('SignCode') is not None:
            self.sign_code = m.get('SignCode')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('SignScopeOCR') is not None:
            self.sign_scope_ocr = m.get('SignScopeOCR')
        if m.get('SignUpgrade') is not None:
            self.sign_upgrade = m.get('SignUpgrade')
        return self


class QuerySmsSignDetailBySignIdNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsSignDetailBySignIdNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsSignDetailBySignIdNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsSignLastRangeRequest(TeaModel):
    def __init__(
        self,
        audit_state: str = None,
        biz_type: str = None,
        is_globe_sign: int = None,
        limit: int = None,
        need_default_sign: bool = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        sign_name: str = None,
    ):
        self.audit_state = audit_state
        self.biz_type = biz_type
        self.is_globe_sign = is_globe_sign
        self.limit = limit
        self.need_default_sign = need_default_sign
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.sign_name = sign_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.is_globe_sign is not None:
            result['IsGlobeSign'] = self.is_globe_sign
        if self.limit is not None:
            result['Limit'] = self.limit
        if self.need_default_sign is not None:
            result['NeedDefaultSign'] = self.need_default_sign
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('IsGlobeSign') is not None:
            self.is_globe_sign = m.get('IsGlobeSign')
        if m.get('Limit') is not None:
            self.limit = m.get('Limit')
        if m.get('NeedDefaultSign') is not None:
            self.need_default_sign = m.get('NeedDefaultSign')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        return self


class QuerySmsSignLastRangeResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySmsSignLastRangeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsSignLastRangeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsSignLastRangeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsSignLastRangeNewRequest(TeaModel):
    def __init__(
        self,
        audit_state: str = None,
        is_globe_sign: int = None,
        limit: int = None,
        need_default_sign: bool = None,
        owner_id: int = None,
        page_index: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        scene_type: int = None,
        sign_name: str = None,
    ):
        self.audit_state = audit_state
        self.is_globe_sign = is_globe_sign
        self.limit = limit
        self.need_default_sign = need_default_sign
        self.owner_id = owner_id
        self.page_index = page_index
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.scene_type = scene_type
        self.sign_name = sign_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.is_globe_sign is not None:
            result['IsGlobeSign'] = self.is_globe_sign
        if self.limit is not None:
            result['Limit'] = self.limit
        if self.need_default_sign is not None:
            result['NeedDefaultSign'] = self.need_default_sign
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_index is not None:
            result['PageIndex'] = self.page_index
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('IsGlobeSign') is not None:
            self.is_globe_sign = m.get('IsGlobeSign')
        if m.get('Limit') is not None:
            self.limit = m.get('Limit')
        if m.get('NeedDefaultSign') is not None:
            self.need_default_sign = m.get('NeedDefaultSign')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageIndex') is not None:
            self.page_index = m.get('PageIndex')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        return self


class QuerySmsSignLastRangeNewResponseBodyListSmsSignFileIds(TeaModel):
    def __init__(
        self,
        file_id: List[int] = None,
    ):
        self.file_id = file_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_id is not None:
            result['FileId'] = self.file_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileId') is not None:
            self.file_id = m.get('FileId')
        return self


class QuerySmsSignLastRangeNewResponseBodyListSmsSignFileUrlList(TeaModel):
    def __init__(
        self,
        file_url: List[str] = None,
    ):
        self.file_url = file_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_url is not None:
            result['FileUrl'] = self.file_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileUrl') is not None:
            self.file_url = m.get('FileUrl')
        return self


class QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailListSignSceneDetail(TeaModel):
    def __init__(
        self,
        audit_state: str = None,
        scene_type: int = None,
    ):
        self.audit_state = audit_state
        self.scene_type = scene_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        return self


class QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailList(TeaModel):
    def __init__(
        self,
        sign_scene_detail: List[QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailListSignSceneDetail] = None,
    ):
        self.sign_scene_detail = sign_scene_detail

    def validate(self):
        if self.sign_scene_detail:
            for k in self.sign_scene_detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SignSceneDetail'] = []
        if self.sign_scene_detail is not None:
            for k in self.sign_scene_detail:
                result['SignSceneDetail'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.sign_scene_detail = []
        if m.get('SignSceneDetail') is not None:
            for k in m.get('SignSceneDetail'):
                temp_model = QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailListSignSceneDetail()
                self.sign_scene_detail.append(temp_model.from_map(k))
        return self


class QuerySmsSignLastRangeNewResponseBodyListSmsSign(TeaModel):
    def __init__(
        self,
        audit_info: str = None,
        audit_remark_info: str = None,
        audit_state: str = None,
        extend_message: str = None,
        file_ids: QuerySmsSignLastRangeNewResponseBodyListSmsSignFileIds = None,
        file_url_list: QuerySmsSignLastRangeNewResponseBodyListSmsSignFileUrlList = None,
        gmt_create_str: str = None,
        id: str = None,
        is_default_sign: bool = None,
        operate_date_str: str = None,
        order_id: str = None,
        remark: str = None,
        scene_type: int = None,
        service_type: int = None,
        sign_name: str = None,
        sign_scene_detail_list: QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailList = None,
        sign_type: int = None,
        sign_usage_name: str = None,
    ):
        self.audit_info = audit_info
        self.audit_remark_info = audit_remark_info
        self.audit_state = audit_state
        self.extend_message = extend_message
        self.file_ids = file_ids
        self.file_url_list = file_url_list
        self.gmt_create_str = gmt_create_str
        self.id = id
        self.is_default_sign = is_default_sign
        self.operate_date_str = operate_date_str
        self.order_id = order_id
        self.remark = remark
        self.scene_type = scene_type
        self.service_type = service_type
        self.sign_name = sign_name
        self.sign_scene_detail_list = sign_scene_detail_list
        self.sign_type = sign_type
        self.sign_usage_name = sign_usage_name

    def validate(self):
        if self.file_ids:
            self.file_ids.validate()
        if self.file_url_list:
            self.file_url_list.validate()
        if self.sign_scene_detail_list:
            self.sign_scene_detail_list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_info is not None:
            result['AuditInfo'] = self.audit_info
        if self.audit_remark_info is not None:
            result['AuditRemarkInfo'] = self.audit_remark_info
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.extend_message is not None:
            result['ExtendMessage'] = self.extend_message
        if self.file_ids is not None:
            result['FileIds'] = self.file_ids.to_map()
        if self.file_url_list is not None:
            result['FileUrlList'] = self.file_url_list.to_map()
        if self.gmt_create_str is not None:
            result['GmtCreateStr'] = self.gmt_create_str
        if self.id is not None:
            result['Id'] = self.id
        if self.is_default_sign is not None:
            result['IsDefaultSign'] = self.is_default_sign
        if self.operate_date_str is not None:
            result['OperateDateStr'] = self.operate_date_str
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.sign_scene_detail_list is not None:
            result['SignSceneDetailList'] = self.sign_scene_detail_list.to_map()
        if self.sign_type is not None:
            result['SignType'] = self.sign_type
        if self.sign_usage_name is not None:
            result['SignUsageName'] = self.sign_usage_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditInfo') is not None:
            self.audit_info = m.get('AuditInfo')
        if m.get('AuditRemarkInfo') is not None:
            self.audit_remark_info = m.get('AuditRemarkInfo')
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('ExtendMessage') is not None:
            self.extend_message = m.get('ExtendMessage')
        if m.get('FileIds') is not None:
            temp_model = QuerySmsSignLastRangeNewResponseBodyListSmsSignFileIds()
            self.file_ids = temp_model.from_map(m['FileIds'])
        if m.get('FileUrlList') is not None:
            temp_model = QuerySmsSignLastRangeNewResponseBodyListSmsSignFileUrlList()
            self.file_url_list = temp_model.from_map(m['FileUrlList'])
        if m.get('GmtCreateStr') is not None:
            self.gmt_create_str = m.get('GmtCreateStr')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsDefaultSign') is not None:
            self.is_default_sign = m.get('IsDefaultSign')
        if m.get('OperateDateStr') is not None:
            self.operate_date_str = m.get('OperateDateStr')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('SignSceneDetailList') is not None:
            temp_model = QuerySmsSignLastRangeNewResponseBodyListSmsSignSignSceneDetailList()
            self.sign_scene_detail_list = temp_model.from_map(m['SignSceneDetailList'])
        if m.get('SignType') is not None:
            self.sign_type = m.get('SignType')
        if m.get('SignUsageName') is not None:
            self.sign_usage_name = m.get('SignUsageName')
        return self


class QuerySmsSignLastRangeNewResponseBodyList(TeaModel):
    def __init__(
        self,
        sms_sign: List[QuerySmsSignLastRangeNewResponseBodyListSmsSign] = None,
    ):
        self.sms_sign = sms_sign

    def validate(self):
        if self.sms_sign:
            for k in self.sms_sign:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SmsSign'] = []
        if self.sms_sign is not None:
            for k in self.sms_sign:
                result['SmsSign'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.sms_sign = []
        if m.get('SmsSign') is not None:
            for k in m.get('SmsSign'):
                temp_model = QuerySmsSignLastRangeNewResponseBodyListSmsSign()
                self.sms_sign.append(temp_model.from_map(k))
        return self


class QuerySmsSignLastRangeNewResponseBody(TeaModel):
    def __init__(
        self,
        list: QuerySmsSignLastRangeNewResponseBodyList = None,
        request_id: str = None,
    ):
        self.list = list
        self.request_id = request_id

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = QuerySmsSignLastRangeNewResponseBodyList()
            self.list = temp_model.from_map(m['List'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QuerySmsSignLastRangeNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsSignLastRangeNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsSignLastRangeNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsSignListRequest(TeaModel):
    def __init__(
        self,
        audit_state: str = None,
        biz_type: str = None,
        is_globe_sign: int = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        service_type: str = None,
        sign_name: str = None,
    ):
        self.audit_state = audit_state
        self.biz_type = biz_type
        self.is_globe_sign = is_globe_sign
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.service_type = service_type
        self.sign_name = sign_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.is_globe_sign is not None:
            result['IsGlobeSign'] = self.is_globe_sign
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('IsGlobeSign') is not None:
            self.is_globe_sign = m.get('IsGlobeSign')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        return self


class QuerySmsSignListResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySmsSignListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsSignListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsSignListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsSignListNewRequest(TeaModel):
    def __init__(
        self,
        aggregated_register_status: int = None,
        audit_state: str = None,
        biz_type: str = None,
        is_globe_sign: int = None,
        operator_codes: List[str] = None,
        operator_register_status: int = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        qualification_name: str = None,
        register_result: int = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        service_type: str = None,
        sign_name: str = None,
        sign_source: str = None,
    ):
        self.aggregated_register_status = aggregated_register_status
        self.audit_state = audit_state
        self.biz_type = biz_type
        self.is_globe_sign = is_globe_sign
        self.operator_codes = operator_codes
        self.operator_register_status = operator_register_status
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.qualification_name = qualification_name
        self.register_result = register_result
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.service_type = service_type
        self.sign_name = sign_name
        self.sign_source = sign_source

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aggregated_register_status is not None:
            result['AggregatedRegisterStatus'] = self.aggregated_register_status
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.is_globe_sign is not None:
            result['IsGlobeSign'] = self.is_globe_sign
        if self.operator_codes is not None:
            result['OperatorCodes'] = self.operator_codes
        if self.operator_register_status is not None:
            result['OperatorRegisterStatus'] = self.operator_register_status
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.qualification_name is not None:
            result['QualificationName'] = self.qualification_name
        if self.register_result is not None:
            result['RegisterResult'] = self.register_result
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.sign_source is not None:
            result['SignSource'] = self.sign_source
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AggregatedRegisterStatus') is not None:
            self.aggregated_register_status = m.get('AggregatedRegisterStatus')
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('IsGlobeSign') is not None:
            self.is_globe_sign = m.get('IsGlobeSign')
        if m.get('OperatorCodes') is not None:
            self.operator_codes = m.get('OperatorCodes')
        if m.get('OperatorRegisterStatus') is not None:
            self.operator_register_status = m.get('OperatorRegisterStatus')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('QualificationName') is not None:
            self.qualification_name = m.get('QualificationName')
        if m.get('RegisterResult') is not None:
            self.register_result = m.get('RegisterResult')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('SignSource') is not None:
            self.sign_source = m.get('SignSource')
        return self


class QuerySmsSignListNewShrinkRequest(TeaModel):
    def __init__(
        self,
        aggregated_register_status: int = None,
        audit_state: str = None,
        biz_type: str = None,
        is_globe_sign: int = None,
        operator_codes_shrink: str = None,
        operator_register_status: int = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        qualification_name: str = None,
        register_result: int = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        service_type: str = None,
        sign_name: str = None,
        sign_source: str = None,
    ):
        self.aggregated_register_status = aggregated_register_status
        self.audit_state = audit_state
        self.biz_type = biz_type
        self.is_globe_sign = is_globe_sign
        self.operator_codes_shrink = operator_codes_shrink
        self.operator_register_status = operator_register_status
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.qualification_name = qualification_name
        self.register_result = register_result
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.service_type = service_type
        self.sign_name = sign_name
        self.sign_source = sign_source

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aggregated_register_status is not None:
            result['AggregatedRegisterStatus'] = self.aggregated_register_status
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.is_globe_sign is not None:
            result['IsGlobeSign'] = self.is_globe_sign
        if self.operator_codes_shrink is not None:
            result['OperatorCodes'] = self.operator_codes_shrink
        if self.operator_register_status is not None:
            result['OperatorRegisterStatus'] = self.operator_register_status
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.qualification_name is not None:
            result['QualificationName'] = self.qualification_name
        if self.register_result is not None:
            result['RegisterResult'] = self.register_result
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.sign_source is not None:
            result['SignSource'] = self.sign_source
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AggregatedRegisterStatus') is not None:
            self.aggregated_register_status = m.get('AggregatedRegisterStatus')
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('IsGlobeSign') is not None:
            self.is_globe_sign = m.get('IsGlobeSign')
        if m.get('OperatorCodes') is not None:
            self.operator_codes_shrink = m.get('OperatorCodes')
        if m.get('OperatorRegisterStatus') is not None:
            self.operator_register_status = m.get('OperatorRegisterStatus')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('QualificationName') is not None:
            self.qualification_name = m.get('QualificationName')
        if m.get('RegisterResult') is not None:
            self.register_result = m.get('RegisterResult')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('SignSource') is not None:
            self.sign_source = m.get('SignSource')
        return self


class QuerySmsSignListNewResponseBodySmsSignSmsSignFileIds(TeaModel):
    def __init__(
        self,
        file_id: List[int] = None,
    ):
        self.file_id = file_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_id is not None:
            result['FileId'] = self.file_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileId') is not None:
            self.file_id = m.get('FileId')
        return self


class QuerySmsSignListNewResponseBodySmsSignSmsSignFileUrlList(TeaModel):
    def __init__(
        self,
        file_url: List[str] = None,
    ):
        self.file_url = file_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_url is not None:
            result['FileUrl'] = self.file_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileUrl') is not None:
            self.file_url = m.get('FileUrl')
        return self


class QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailListSignSceneDetail(TeaModel):
    def __init__(
        self,
        audit_state: str = None,
        scene_type: int = None,
    ):
        self.audit_state = audit_state
        self.scene_type = scene_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        return self


class QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailList(TeaModel):
    def __init__(
        self,
        sign_scene_detail: List[QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailListSignSceneDetail] = None,
    ):
        self.sign_scene_detail = sign_scene_detail

    def validate(self):
        if self.sign_scene_detail:
            for k in self.sign_scene_detail:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SignSceneDetail'] = []
        if self.sign_scene_detail is not None:
            for k in self.sign_scene_detail:
                result['SignSceneDetail'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.sign_scene_detail = []
        if m.get('SignSceneDetail') is not None:
            for k in m.get('SignSceneDetail'):
                temp_model = QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailListSignSceneDetail()
                self.sign_scene_detail.append(temp_model.from_map(k))
        return self


class QuerySmsSignListNewResponseBodySmsSignSmsSign(TeaModel):
    def __init__(
        self,
        aggregated_register_status: int = None,
        apply_source: str = None,
        audit_info: str = None,
        audit_remark_info: str = None,
        audit_state: str = None,
        authorization: str = None,
        authorization_eff_time: str = None,
        authorization_letter: str = None,
        authorization_letter_audit_pass: bool = None,
        authorization_letter_id: int = None,
        authorization_letter_name: str = None,
        authorization_letter_status: str = None,
        authorization_sign_scope: str = None,
        can_register: bool = None,
        enable_authorization_letter: bool = None,
        extend_message: str = None,
        file_ids: QuerySmsSignListNewResponseBodySmsSignSmsSignFileIds = None,
        file_url_list: QuerySmsSignListNewResponseBodySmsSignSmsSignFileUrlList = None,
        gmt_create_str: str = None,
        id: str = None,
        is_authorization_letter_ocrcomplete: bool = None,
        is_authorization_letter_ocrdiff: bool = None,
        is_default_sign: bool = None,
        is_sign_scope_ocrdiff: bool = None,
        mobile_register_status: int = None,
        operate_date_str: str = None,
        order_count: int = None,
        order_id: str = None,
        organization_code: str = None,
        proxy_authorization: str = None,
        qualification_id: int = None,
        qualification_name: str = None,
        qualification_state: str = None,
        qualification_version: int = None,
        qualification_work_order_id: int = None,
        register_result: int = None,
        register_time: int = None,
        remark: str = None,
        result_reason: str = None,
        scene_type: int = None,
        service_type: int = None,
        sign_code: str = None,
        sign_name: str = None,
        sign_scene_detail_list: QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailList = None,
        sign_scope_ocr: str = None,
        sign_source: str = None,
        sign_type: int = None,
        telecom_register_status: int = None,
        unicom_register_status: int = None,
    ):
        self.aggregated_register_status = aggregated_register_status
        self.apply_source = apply_source
        self.audit_info = audit_info
        self.audit_remark_info = audit_remark_info
        self.audit_state = audit_state
        self.authorization = authorization
        self.authorization_eff_time = authorization_eff_time
        self.authorization_letter = authorization_letter
        self.authorization_letter_audit_pass = authorization_letter_audit_pass
        self.authorization_letter_id = authorization_letter_id
        self.authorization_letter_name = authorization_letter_name
        self.authorization_letter_status = authorization_letter_status
        self.authorization_sign_scope = authorization_sign_scope
        self.can_register = can_register
        self.enable_authorization_letter = enable_authorization_letter
        self.extend_message = extend_message
        self.file_ids = file_ids
        self.file_url_list = file_url_list
        self.gmt_create_str = gmt_create_str
        self.id = id
        self.is_authorization_letter_ocrcomplete = is_authorization_letter_ocrcomplete
        self.is_authorization_letter_ocrdiff = is_authorization_letter_ocrdiff
        self.is_default_sign = is_default_sign
        self.is_sign_scope_ocrdiff = is_sign_scope_ocrdiff
        self.mobile_register_status = mobile_register_status
        self.operate_date_str = operate_date_str
        self.order_count = order_count
        self.order_id = order_id
        self.organization_code = organization_code
        self.proxy_authorization = proxy_authorization
        self.qualification_id = qualification_id
        self.qualification_name = qualification_name
        self.qualification_state = qualification_state
        self.qualification_version = qualification_version
        self.qualification_work_order_id = qualification_work_order_id
        self.register_result = register_result
        self.register_time = register_time
        self.remark = remark
        self.result_reason = result_reason
        self.scene_type = scene_type
        self.service_type = service_type
        self.sign_code = sign_code
        self.sign_name = sign_name
        self.sign_scene_detail_list = sign_scene_detail_list
        self.sign_scope_ocr = sign_scope_ocr
        self.sign_source = sign_source
        self.sign_type = sign_type
        self.telecom_register_status = telecom_register_status
        self.unicom_register_status = unicom_register_status

    def validate(self):
        if self.file_ids:
            self.file_ids.validate()
        if self.file_url_list:
            self.file_url_list.validate()
        if self.sign_scene_detail_list:
            self.sign_scene_detail_list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.aggregated_register_status is not None:
            result['AggregatedRegisterStatus'] = self.aggregated_register_status
        if self.apply_source is not None:
            result['ApplySource'] = self.apply_source
        if self.audit_info is not None:
            result['AuditInfo'] = self.audit_info
        if self.audit_remark_info is not None:
            result['AuditRemarkInfo'] = self.audit_remark_info
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.authorization is not None:
            result['Authorization'] = self.authorization
        if self.authorization_eff_time is not None:
            result['AuthorizationEffTime'] = self.authorization_eff_time
        if self.authorization_letter is not None:
            result['AuthorizationLetter'] = self.authorization_letter
        if self.authorization_letter_audit_pass is not None:
            result['AuthorizationLetterAuditPass'] = self.authorization_letter_audit_pass
        if self.authorization_letter_id is not None:
            result['AuthorizationLetterId'] = self.authorization_letter_id
        if self.authorization_letter_name is not None:
            result['AuthorizationLetterName'] = self.authorization_letter_name
        if self.authorization_letter_status is not None:
            result['AuthorizationLetterStatus'] = self.authorization_letter_status
        if self.authorization_sign_scope is not None:
            result['AuthorizationSignScope'] = self.authorization_sign_scope
        if self.can_register is not None:
            result['CanRegister'] = self.can_register
        if self.enable_authorization_letter is not None:
            result['EnableAuthorizationLetter'] = self.enable_authorization_letter
        if self.extend_message is not None:
            result['ExtendMessage'] = self.extend_message
        if self.file_ids is not None:
            result['FileIds'] = self.file_ids.to_map()
        if self.file_url_list is not None:
            result['FileUrlList'] = self.file_url_list.to_map()
        if self.gmt_create_str is not None:
            result['GmtCreateStr'] = self.gmt_create_str
        if self.id is not None:
            result['Id'] = self.id
        if self.is_authorization_letter_ocrcomplete is not None:
            result['IsAuthorizationLetterOCRComplete'] = self.is_authorization_letter_ocrcomplete
        if self.is_authorization_letter_ocrdiff is not None:
            result['IsAuthorizationLetterOCRDiff'] = self.is_authorization_letter_ocrdiff
        if self.is_default_sign is not None:
            result['IsDefaultSign'] = self.is_default_sign
        if self.is_sign_scope_ocrdiff is not None:
            result['IsSignScopeOCRDiff'] = self.is_sign_scope_ocrdiff
        if self.mobile_register_status is not None:
            result['MobileRegisterStatus'] = self.mobile_register_status
        if self.operate_date_str is not None:
            result['OperateDateStr'] = self.operate_date_str
        if self.order_count is not None:
            result['OrderCount'] = self.order_count
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.organization_code is not None:
            result['OrganizationCode'] = self.organization_code
        if self.proxy_authorization is not None:
            result['ProxyAuthorization'] = self.proxy_authorization
        if self.qualification_id is not None:
            result['QualificationId'] = self.qualification_id
        if self.qualification_name is not None:
            result['QualificationName'] = self.qualification_name
        if self.qualification_state is not None:
            result['QualificationState'] = self.qualification_state
        if self.qualification_version is not None:
            result['QualificationVersion'] = self.qualification_version
        if self.qualification_work_order_id is not None:
            result['QualificationWorkOrderId'] = self.qualification_work_order_id
        if self.register_result is not None:
            result['RegisterResult'] = self.register_result
        if self.register_time is not None:
            result['RegisterTime'] = self.register_time
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.result_reason is not None:
            result['ResultReason'] = self.result_reason
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        if self.sign_code is not None:
            result['SignCode'] = self.sign_code
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.sign_scene_detail_list is not None:
            result['SignSceneDetailList'] = self.sign_scene_detail_list.to_map()
        if self.sign_scope_ocr is not None:
            result['SignScopeOCR'] = self.sign_scope_ocr
        if self.sign_source is not None:
            result['SignSource'] = self.sign_source
        if self.sign_type is not None:
            result['SignType'] = self.sign_type
        if self.telecom_register_status is not None:
            result['TelecomRegisterStatus'] = self.telecom_register_status
        if self.unicom_register_status is not None:
            result['UnicomRegisterStatus'] = self.unicom_register_status
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AggregatedRegisterStatus') is not None:
            self.aggregated_register_status = m.get('AggregatedRegisterStatus')
        if m.get('ApplySource') is not None:
            self.apply_source = m.get('ApplySource')
        if m.get('AuditInfo') is not None:
            self.audit_info = m.get('AuditInfo')
        if m.get('AuditRemarkInfo') is not None:
            self.audit_remark_info = m.get('AuditRemarkInfo')
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('Authorization') is not None:
            self.authorization = m.get('Authorization')
        if m.get('AuthorizationEffTime') is not None:
            self.authorization_eff_time = m.get('AuthorizationEffTime')
        if m.get('AuthorizationLetter') is not None:
            self.authorization_letter = m.get('AuthorizationLetter')
        if m.get('AuthorizationLetterAuditPass') is not None:
            self.authorization_letter_audit_pass = m.get('AuthorizationLetterAuditPass')
        if m.get('AuthorizationLetterId') is not None:
            self.authorization_letter_id = m.get('AuthorizationLetterId')
        if m.get('AuthorizationLetterName') is not None:
            self.authorization_letter_name = m.get('AuthorizationLetterName')
        if m.get('AuthorizationLetterStatus') is not None:
            self.authorization_letter_status = m.get('AuthorizationLetterStatus')
        if m.get('AuthorizationSignScope') is not None:
            self.authorization_sign_scope = m.get('AuthorizationSignScope')
        if m.get('CanRegister') is not None:
            self.can_register = m.get('CanRegister')
        if m.get('EnableAuthorizationLetter') is not None:
            self.enable_authorization_letter = m.get('EnableAuthorizationLetter')
        if m.get('ExtendMessage') is not None:
            self.extend_message = m.get('ExtendMessage')
        if m.get('FileIds') is not None:
            temp_model = QuerySmsSignListNewResponseBodySmsSignSmsSignFileIds()
            self.file_ids = temp_model.from_map(m['FileIds'])
        if m.get('FileUrlList') is not None:
            temp_model = QuerySmsSignListNewResponseBodySmsSignSmsSignFileUrlList()
            self.file_url_list = temp_model.from_map(m['FileUrlList'])
        if m.get('GmtCreateStr') is not None:
            self.gmt_create_str = m.get('GmtCreateStr')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsAuthorizationLetterOCRComplete') is not None:
            self.is_authorization_letter_ocrcomplete = m.get('IsAuthorizationLetterOCRComplete')
        if m.get('IsAuthorizationLetterOCRDiff') is not None:
            self.is_authorization_letter_ocrdiff = m.get('IsAuthorizationLetterOCRDiff')
        if m.get('IsDefaultSign') is not None:
            self.is_default_sign = m.get('IsDefaultSign')
        if m.get('IsSignScopeOCRDiff') is not None:
            self.is_sign_scope_ocrdiff = m.get('IsSignScopeOCRDiff')
        if m.get('MobileRegisterStatus') is not None:
            self.mobile_register_status = m.get('MobileRegisterStatus')
        if m.get('OperateDateStr') is not None:
            self.operate_date_str = m.get('OperateDateStr')
        if m.get('OrderCount') is not None:
            self.order_count = m.get('OrderCount')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OrganizationCode') is not None:
            self.organization_code = m.get('OrganizationCode')
        if m.get('ProxyAuthorization') is not None:
            self.proxy_authorization = m.get('ProxyAuthorization')
        if m.get('QualificationId') is not None:
            self.qualification_id = m.get('QualificationId')
        if m.get('QualificationName') is not None:
            self.qualification_name = m.get('QualificationName')
        if m.get('QualificationState') is not None:
            self.qualification_state = m.get('QualificationState')
        if m.get('QualificationVersion') is not None:
            self.qualification_version = m.get('QualificationVersion')
        if m.get('QualificationWorkOrderId') is not None:
            self.qualification_work_order_id = m.get('QualificationWorkOrderId')
        if m.get('RegisterResult') is not None:
            self.register_result = m.get('RegisterResult')
        if m.get('RegisterTime') is not None:
            self.register_time = m.get('RegisterTime')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('ResultReason') is not None:
            self.result_reason = m.get('ResultReason')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        if m.get('SignCode') is not None:
            self.sign_code = m.get('SignCode')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('SignSceneDetailList') is not None:
            temp_model = QuerySmsSignListNewResponseBodySmsSignSmsSignSignSceneDetailList()
            self.sign_scene_detail_list = temp_model.from_map(m['SignSceneDetailList'])
        if m.get('SignScopeOCR') is not None:
            self.sign_scope_ocr = m.get('SignScopeOCR')
        if m.get('SignSource') is not None:
            self.sign_source = m.get('SignSource')
        if m.get('SignType') is not None:
            self.sign_type = m.get('SignType')
        if m.get('TelecomRegisterStatus') is not None:
            self.telecom_register_status = m.get('TelecomRegisterStatus')
        if m.get('UnicomRegisterStatus') is not None:
            self.unicom_register_status = m.get('UnicomRegisterStatus')
        return self


class QuerySmsSignListNewResponseBodySmsSign(TeaModel):
    def __init__(
        self,
        sms_sign: List[QuerySmsSignListNewResponseBodySmsSignSmsSign] = None,
    ):
        self.sms_sign = sms_sign

    def validate(self):
        if self.sms_sign:
            for k in self.sms_sign:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SmsSign'] = []
        if self.sms_sign is not None:
            for k in self.sms_sign:
                result['SmsSign'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.sms_sign = []
        if m.get('SmsSign') is not None:
            for k in m.get('SmsSign'):
                temp_model = QuerySmsSignListNewResponseBodySmsSignSmsSign()
                self.sms_sign.append(temp_model.from_map(k))
        return self


class QuerySmsSignListNewResponseBody(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        request_id: str = None,
        sms_sign: QuerySmsSignListNewResponseBodySmsSign = None,
        total: int = None,
    ):
        self.page_no = page_no
        self.page_size = page_size
        self.request_id = request_id
        self.sms_sign = sms_sign
        self.total = total

    def validate(self):
        if self.sms_sign:
            self.sms_sign.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.sms_sign is not None:
            result['SmsSign'] = self.sms_sign.to_map()
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SmsSign') is not None:
            temp_model = QuerySmsSignListNewResponseBodySmsSign()
            self.sms_sign = temp_model.from_map(m['SmsSign'])
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class QuerySmsSignListNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsSignListNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsSignListNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsSignValidRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        service_type: int = None,
        sign_name: str = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.service_type = service_type
        self.sign_name = sign_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        return self


class QuerySmsSignValidResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySmsSignValidResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsSignValidResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsSignValidResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsSignValidNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        service_type: int = None,
        sign_name: str = None,
        sign_upgrade: bool = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.service_type = service_type
        self.sign_name = sign_name
        self.sign_upgrade = sign_upgrade

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.sign_upgrade is not None:
            result['SignUpgrade'] = self.sign_upgrade
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('SignUpgrade') is not None:
            self.sign_upgrade = m.get('SignUpgrade')
        return self


class QuerySmsSignValidNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        msg: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.msg = msg
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QuerySmsSignValidNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsSignValidNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsSignValidNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsStatisticsRequest(TeaModel):
    def __init__(
        self,
        end_date: str = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        prod_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        sign_name: str = None,
        start_date: str = None,
        template: str = None,
    ):
        # This parameter is required.
        self.end_date = end_date
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.prod_id = prod_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.sign_name = sign_name
        # This parameter is required.
        self.start_date = start_date
        self.template = template

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_id is not None:
            result['ProdId'] = self.prod_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.start_date is not None:
            result['StartDate'] = self.start_date
        if self.template is not None:
            result['Template'] = self.template
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdId') is not None:
            self.prod_id = m.get('ProdId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('StartDate') is not None:
            self.start_date = m.get('StartDate')
        if m.get('Template') is not None:
            self.template = m.get('Template')
        return self


class QuerySmsStatisticsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySmsStatisticsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsStatisticsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsStatisticsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsStatisticsByTemplateRequest(TeaModel):
    def __init__(
        self,
        end_date: str = None,
        owner_id: int = None,
        prod_code: str = None,
        prod_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        start_date: str = None,
        template: str = None,
    ):
        # This parameter is required.
        self.end_date = end_date
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.prod_id = prod_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.start_date = start_date
        self.template = template

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_id is not None:
            result['ProdId'] = self.prod_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.start_date is not None:
            result['StartDate'] = self.start_date
        if self.template is not None:
            result['Template'] = self.template
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdId') is not None:
            self.prod_id = m.get('ProdId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('StartDate') is not None:
            self.start_date = m.get('StartDate')
        if m.get('Template') is not None:
            self.template = m.get('Template')
        return self


class QuerySmsStatisticsByTemplateResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySmsStatisticsByTemplateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsStatisticsByTemplateResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsStatisticsByTemplateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsStatisticsByTemplateNewRequest(TeaModel):
    def __init__(
        self,
        end_date: str = None,
        owner_id: int = None,
        prod_code: str = None,
        prod_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        start_date: str = None,
        template: str = None,
    ):
        # This parameter is required.
        self.end_date = end_date
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.prod_id = prod_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.start_date = start_date
        self.template = template

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_id is not None:
            result['ProdId'] = self.prod_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.start_date is not None:
            result['StartDate'] = self.start_date
        if self.template is not None:
            result['Template'] = self.template
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdId') is not None:
            self.prod_id = m.get('ProdId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('StartDate') is not None:
            self.start_date = m.get('StartDate')
        if m.get('Template') is not None:
            self.template = m.get('Template')
        return self


class QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse(TeaModel):
    def __init__(
        self,
        detail_sts_date: str = None,
        download_url: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        send_success_rate: str = None,
        send_total: int = None,
        send_total_fail: int = None,
        send_total_success: int = None,
        send_total_unknown: int = None,
        status: str = None,
        template_code: str = None,
        template_name: str = None,
    ):
        self.detail_sts_date = detail_sts_date
        self.download_url = download_url
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.send_success_rate = send_success_rate
        self.send_total = send_total
        self.send_total_fail = send_total_fail
        self.send_total_success = send_total_success
        self.send_total_unknown = send_total_unknown
        self.status = status
        self.template_code = template_code
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.detail_sts_date is not None:
            result['DetailStsDate'] = self.detail_sts_date
        if self.download_url is not None:
            result['DownloadUrl'] = self.download_url
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.send_success_rate is not None:
            result['SendSuccessRate'] = self.send_success_rate
        if self.send_total is not None:
            result['SendTotal'] = self.send_total
        if self.send_total_fail is not None:
            result['SendTotalFail'] = self.send_total_fail
        if self.send_total_success is not None:
            result['SendTotalSuccess'] = self.send_total_success
        if self.send_total_unknown is not None:
            result['SendTotalUnknown'] = self.send_total_unknown
        if self.status is not None:
            result['Status'] = self.status
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DetailStsDate') is not None:
            self.detail_sts_date = m.get('DetailStsDate')
        if m.get('DownloadUrl') is not None:
            self.download_url = m.get('DownloadUrl')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('SendSuccessRate') is not None:
            self.send_success_rate = m.get('SendSuccessRate')
        if m.get('SendTotal') is not None:
            self.send_total = m.get('SendTotal')
        if m.get('SendTotalFail') is not None:
            self.send_total_fail = m.get('SendTotalFail')
        if m.get('SendTotalSuccess') is not None:
            self.send_total_success = m.get('SendTotalSuccess')
        if m.get('SendTotalUnknown') is not None:
            self.send_total_unknown = m.get('SendTotalUnknown')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class QuerySmsStatisticsByTemplateNewResponseBodyList(TeaModel):
    def __init__(
        self,
        sms_statistics_response: List[QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse] = None,
    ):
        self.sms_statistics_response = sms_statistics_response

    def validate(self):
        if self.sms_statistics_response:
            for k in self.sms_statistics_response:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SmsStatisticsResponse'] = []
        if self.sms_statistics_response is not None:
            for k in self.sms_statistics_response:
                result['SmsStatisticsResponse'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.sms_statistics_response = []
        if m.get('SmsStatisticsResponse') is not None:
            for k in m.get('SmsStatisticsResponse'):
                temp_model = QuerySmsStatisticsByTemplateNewResponseBodyListSmsStatisticsResponse()
                self.sms_statistics_response.append(temp_model.from_map(k))
        return self


class QuerySmsStatisticsByTemplateNewResponseBody(TeaModel):
    def __init__(
        self,
        list: QuerySmsStatisticsByTemplateNewResponseBodyList = None,
        page_no: int = None,
        page_size: int = None,
        request_id: str = None,
        total: int = None,
    ):
        self.list = list
        self.page_no = page_no
        self.page_size = page_size
        self.request_id = request_id
        self.total = total

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = QuerySmsStatisticsByTemplateNewResponseBodyList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class QuerySmsStatisticsByTemplateNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsStatisticsByTemplateNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsStatisticsByTemplateNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsStatisticsNewRequest(TeaModel):
    def __init__(
        self,
        end_date: str = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        prod_id: int = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        sign_name: str = None,
        start_date: str = None,
        template: str = None,
    ):
        # This parameter is required.
        self.end_date = end_date
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.prod_id = prod_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.sign_name = sign_name
        # This parameter is required.
        self.start_date = start_date
        self.template = template

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_id is not None:
            result['ProdId'] = self.prod_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.start_date is not None:
            result['StartDate'] = self.start_date
        if self.template is not None:
            result['Template'] = self.template
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdId') is not None:
            self.prod_id = m.get('ProdId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('StartDate') is not None:
            self.start_date = m.get('StartDate')
        if m.get('Template') is not None:
            self.template = m.get('Template')
        return self


class QuerySmsStatisticsNewResponseBodyList(TeaModel):
    def __init__(
        self,
        biz_type: int = None,
        detail_sts_date: str = None,
        download_url: str = None,
        gmt_create: str = None,
        gmt_modified: str = None,
        id: int = None,
        send_success_rate: str = None,
        send_total: int = None,
        send_total_fail: int = None,
        send_total_success: int = None,
        send_total_unknown: int = None,
        sign_name: str = None,
        status: str = None,
        template_code: str = None,
        template_name: str = None,
    ):
        self.biz_type = biz_type
        self.detail_sts_date = detail_sts_date
        self.download_url = download_url
        self.gmt_create = gmt_create
        self.gmt_modified = gmt_modified
        self.id = id
        self.send_success_rate = send_success_rate
        self.send_total = send_total
        self.send_total_fail = send_total_fail
        self.send_total_success = send_total_success
        self.send_total_unknown = send_total_unknown
        self.sign_name = sign_name
        self.status = status
        self.template_code = template_code
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.detail_sts_date is not None:
            result['DetailStsDate'] = self.detail_sts_date
        if self.download_url is not None:
            result['DownloadUrl'] = self.download_url
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.id is not None:
            result['Id'] = self.id
        if self.send_success_rate is not None:
            result['SendSuccessRate'] = self.send_success_rate
        if self.send_total is not None:
            result['SendTotal'] = self.send_total
        if self.send_total_fail is not None:
            result['SendTotalFail'] = self.send_total_fail
        if self.send_total_success is not None:
            result['SendTotalSuccess'] = self.send_total_success
        if self.send_total_unknown is not None:
            result['SendTotalUnknown'] = self.send_total_unknown
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.status is not None:
            result['Status'] = self.status
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('DetailStsDate') is not None:
            self.detail_sts_date = m.get('DetailStsDate')
        if m.get('DownloadUrl') is not None:
            self.download_url = m.get('DownloadUrl')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('SendSuccessRate') is not None:
            self.send_success_rate = m.get('SendSuccessRate')
        if m.get('SendTotal') is not None:
            self.send_total = m.get('SendTotal')
        if m.get('SendTotalFail') is not None:
            self.send_total_fail = m.get('SendTotalFail')
        if m.get('SendTotalSuccess') is not None:
            self.send_total_success = m.get('SendTotalSuccess')
        if m.get('SendTotalUnknown') is not None:
            self.send_total_unknown = m.get('SendTotalUnknown')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class QuerySmsStatisticsNewResponseBody(TeaModel):
    def __init__(
        self,
        list: List[QuerySmsStatisticsNewResponseBodyList] = None,
        request_id: str = None,
    ):
        self.list = list
        self.request_id = request_id

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QuerySmsStatisticsNewResponseBodyList()
                self.list.append(temp_model.from_map(k))
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QuerySmsStatisticsNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsStatisticsNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsStatisticsNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsStatisticsUrlRequest(TeaModel):
    def __init__(
        self,
        end_date: str = None,
        owner_id: int = None,
        prod_code: str = None,
        prod_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        sign_name: str = None,
        start_date: str = None,
        template: str = None,
    ):
        # This parameter is required.
        self.end_date = end_date
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.prod_id = prod_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.sign_name = sign_name
        # This parameter is required.
        self.start_date = start_date
        self.template = template

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_id is not None:
            result['ProdId'] = self.prod_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.start_date is not None:
            result['StartDate'] = self.start_date
        if self.template is not None:
            result['Template'] = self.template
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdId') is not None:
            self.prod_id = m.get('ProdId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('StartDate') is not None:
            self.start_date = m.get('StartDate')
        if m.get('Template') is not None:
            self.template = m.get('Template')
        return self


class QuerySmsStatisticsUrlResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySmsStatisticsUrlResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsStatisticsUrlResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsStatisticsUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsStatisticsUrlNewRequest(TeaModel):
    def __init__(
        self,
        end_date: str = None,
        owner_id: int = None,
        prod_code: str = None,
        prod_id: int = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        sign_name: str = None,
        start_date: str = None,
        template: str = None,
    ):
        # This parameter is required.
        self.end_date = end_date
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.prod_id = prod_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.sign_name = sign_name
        # This parameter is required.
        self.start_date = start_date
        self.template = template

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_id is not None:
            result['ProdId'] = self.prod_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.start_date is not None:
            result['StartDate'] = self.start_date
        if self.template is not None:
            result['Template'] = self.template
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdId') is not None:
            self.prod_id = m.get('ProdId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('StartDate') is not None:
            self.start_date = m.get('StartDate')
        if m.get('Template') is not None:
            self.template = m.get('Template')
        return self


class QuerySmsStatisticsUrlNewResponseBody(TeaModel):
    def __init__(
        self,
        download_url: str = None,
        request_id: str = None,
    ):
        self.download_url = download_url
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.download_url is not None:
            result['DownloadUrl'] = self.download_url
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DownloadUrl') is not None:
            self.download_url = m.get('DownloadUrl')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QuerySmsStatisticsUrlNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsStatisticsUrlNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsStatisticsUrlNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsStepRequest(TeaModel):
    def __init__(
        self,
        bill_cycle: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.bill_cycle = bill_cycle
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.bill_cycle is not None:
            result['BillCycle'] = self.bill_cycle
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BillCycle') is not None:
            self.bill_cycle = m.get('BillCycle')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QuerySmsStepResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySmsStepResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsStepResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsStepResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsTemplateByCodeRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        template_code: str = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.template_code = template_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        return self


class QuerySmsTemplateByCodeResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySmsTemplateByCodeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsTemplateByCodeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsTemplateByCodeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsTemplateByCodeNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        template_code: str = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.template_code = template_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        return self


class QuerySmsTemplateByCodeNewResponseBodyApplicationScene(TeaModel):
    def __init__(
        self,
        content: str = None,
        id: int = None,
        name: str = None,
    ):
        self.content = content
        self.id = id
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.content is not None:
            result['Content'] = self.content
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class QuerySmsTemplateByCodeNewResponseBodyFileIds(TeaModel):
    def __init__(
        self,
        file_id: List[int] = None,
    ):
        self.file_id = file_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_id is not None:
            result['FileId'] = self.file_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileId') is not None:
            self.file_id = m.get('FileId')
        return self


class QuerySmsTemplateByCodeNewResponseBodyFileUrlList(TeaModel):
    def __init__(
        self,
        file_url: List[str] = None,
    ):
        self.file_url = file_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.file_url is not None:
            result['FileUrl'] = self.file_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FileUrl') is not None:
            self.file_url = m.get('FileUrl')
        return self


class QuerySmsTemplateByCodeNewResponseBodyMoreDataFileIds(TeaModel):
    def __init__(
        self,
        more_data_file_id: List[int] = None,
    ):
        self.more_data_file_id = more_data_file_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.more_data_file_id is not None:
            result['MoreDataFileId'] = self.more_data_file_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('MoreDataFileId') is not None:
            self.more_data_file_id = m.get('MoreDataFileId')
        return self


class QuerySmsTemplateByCodeNewResponseBodyMoreDataFileUrls(TeaModel):
    def __init__(
        self,
        more_data_file_url: List[str] = None,
    ):
        self.more_data_file_url = more_data_file_url

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.more_data_file_url is not None:
            result['MoreDataFileUrl'] = self.more_data_file_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('MoreDataFileUrl') is not None:
            self.more_data_file_url = m.get('MoreDataFileUrl')
        return self


class QuerySmsTemplateByCodeNewResponseBodyMoreDataOssKeys(TeaModel):
    def __init__(
        self,
        more_data_oss_key: List[str] = None,
    ):
        self.more_data_oss_key = more_data_oss_key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.more_data_oss_key is not None:
            result['MoreDataOssKey'] = self.more_data_oss_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('MoreDataOssKey') is not None:
            self.more_data_oss_key = m.get('MoreDataOssKey')
        return self


class QuerySmsTemplateByCodeNewResponseBodyOssKeys(TeaModel):
    def __init__(
        self,
        oss_key: List[str] = None,
    ):
        self.oss_key = oss_key

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.oss_key is not None:
            result['OssKey'] = self.oss_key
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OssKey') is not None:
            self.oss_key = m.get('OssKey')
        return self


class QuerySmsTemplateByCodeNewResponseBodyTagsTagInfo(TeaModel):
    def __init__(
        self,
        tag_key: str = None,
        tag_value: str = None,
    ):
        self.tag_key = tag_key
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class QuerySmsTemplateByCodeNewResponseBodyTags(TeaModel):
    def __init__(
        self,
        tag_info: List[QuerySmsTemplateByCodeNewResponseBodyTagsTagInfo] = None,
    ):
        self.tag_info = tag_info

    def validate(self):
        if self.tag_info:
            for k in self.tag_info:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['TagInfo'] = []
        if self.tag_info is not None:
            for k in self.tag_info:
                result['TagInfo'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.tag_info = []
        if m.get('TagInfo') is not None:
            for k in m.get('TagInfo'):
                temp_model = QuerySmsTemplateByCodeNewResponseBodyTagsTagInfo()
                self.tag_info.append(temp_model.from_map(k))
        return self


class QuerySmsTemplateByCodeNewResponseBody(TeaModel):
    def __init__(
        self,
        access_token: str = None,
        application_scene: QuerySmsTemplateByCodeNewResponseBodyApplicationScene = None,
        audit_info: str = None,
        audit_remark_info: str = None,
        biz_type: str = None,
        file_ids: QuerySmsTemplateByCodeNewResponseBodyFileIds = None,
        file_url_list: QuerySmsTemplateByCodeNewResponseBodyFileUrlList = None,
        from_: str = None,
        gmt_create_str: str = None,
        intl_type: int = None,
        more_data_file_ids: QuerySmsTemplateByCodeNewResponseBodyMoreDataFileIds = None,
        more_data_file_urls: QuerySmsTemplateByCodeNewResponseBodyMoreDataFileUrls = None,
        more_data_oss_keys: QuerySmsTemplateByCodeNewResponseBodyMoreDataOssKeys = None,
        need_authorized: bool = None,
        open_tag: bool = None,
        order_id: str = None,
        oss_keys: QuerySmsTemplateByCodeNewResponseBodyOssKeys = None,
        product_url: str = None,
        related_sign_name: str = None,
        remark: str = None,
        request_id: str = None,
        rmd_template_id: int = None,
        rmd_template_variable_num: int = None,
        sign_name: str = None,
        sign_type: int = None,
        sms_content: str = None,
        tags: QuerySmsTemplateByCodeNewResponseBodyTags = None,
        template_code: str = None,
        template_name: str = None,
        template_rule: str = None,
    ):
        self.access_token = access_token
        self.application_scene = application_scene
        self.audit_info = audit_info
        self.audit_remark_info = audit_remark_info
        self.biz_type = biz_type
        self.file_ids = file_ids
        self.file_url_list = file_url_list
        self.from_ = from_
        self.gmt_create_str = gmt_create_str
        self.intl_type = intl_type
        self.more_data_file_ids = more_data_file_ids
        self.more_data_file_urls = more_data_file_urls
        self.more_data_oss_keys = more_data_oss_keys
        self.need_authorized = need_authorized
        self.open_tag = open_tag
        self.order_id = order_id
        self.oss_keys = oss_keys
        self.product_url = product_url
        self.related_sign_name = related_sign_name
        self.remark = remark
        self.request_id = request_id
        self.rmd_template_id = rmd_template_id
        self.rmd_template_variable_num = rmd_template_variable_num
        self.sign_name = sign_name
        self.sign_type = sign_type
        self.sms_content = sms_content
        self.tags = tags
        self.template_code = template_code
        self.template_name = template_name
        self.template_rule = template_rule

    def validate(self):
        if self.application_scene:
            self.application_scene.validate()
        if self.file_ids:
            self.file_ids.validate()
        if self.file_url_list:
            self.file_url_list.validate()
        if self.more_data_file_ids:
            self.more_data_file_ids.validate()
        if self.more_data_file_urls:
            self.more_data_file_urls.validate()
        if self.more_data_oss_keys:
            self.more_data_oss_keys.validate()
        if self.oss_keys:
            self.oss_keys.validate()
        if self.tags:
            self.tags.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_token is not None:
            result['AccessToken'] = self.access_token
        if self.application_scene is not None:
            result['ApplicationScene'] = self.application_scene.to_map()
        if self.audit_info is not None:
            result['AuditInfo'] = self.audit_info
        if self.audit_remark_info is not None:
            result['AuditRemarkInfo'] = self.audit_remark_info
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.file_ids is not None:
            result['FileIds'] = self.file_ids.to_map()
        if self.file_url_list is not None:
            result['FileUrlList'] = self.file_url_list.to_map()
        if self.from_ is not None:
            result['From'] = self.from_
        if self.gmt_create_str is not None:
            result['GmtCreateStr'] = self.gmt_create_str
        if self.intl_type is not None:
            result['IntlType'] = self.intl_type
        if self.more_data_file_ids is not None:
            result['MoreDataFileIds'] = self.more_data_file_ids.to_map()
        if self.more_data_file_urls is not None:
            result['MoreDataFileUrls'] = self.more_data_file_urls.to_map()
        if self.more_data_oss_keys is not None:
            result['MoreDataOssKeys'] = self.more_data_oss_keys.to_map()
        if self.need_authorized is not None:
            result['NeedAuthorized'] = self.need_authorized
        if self.open_tag is not None:
            result['OpenTag'] = self.open_tag
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.oss_keys is not None:
            result['OssKeys'] = self.oss_keys.to_map()
        if self.product_url is not None:
            result['ProductUrl'] = self.product_url
        if self.related_sign_name is not None:
            result['RelatedSignName'] = self.related_sign_name
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.rmd_template_id is not None:
            result['RmdTemplateId'] = self.rmd_template_id
        if self.rmd_template_variable_num is not None:
            result['RmdTemplateVariableNum'] = self.rmd_template_variable_num
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.sign_type is not None:
            result['SignType'] = self.sign_type
        if self.sms_content is not None:
            result['SmsContent'] = self.sms_content
        if self.tags is not None:
            result['Tags'] = self.tags.to_map()
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.template_rule is not None:
            result['TemplateRule'] = self.template_rule
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessToken') is not None:
            self.access_token = m.get('AccessToken')
        if m.get('ApplicationScene') is not None:
            temp_model = QuerySmsTemplateByCodeNewResponseBodyApplicationScene()
            self.application_scene = temp_model.from_map(m['ApplicationScene'])
        if m.get('AuditInfo') is not None:
            self.audit_info = m.get('AuditInfo')
        if m.get('AuditRemarkInfo') is not None:
            self.audit_remark_info = m.get('AuditRemarkInfo')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('FileIds') is not None:
            temp_model = QuerySmsTemplateByCodeNewResponseBodyFileIds()
            self.file_ids = temp_model.from_map(m['FileIds'])
        if m.get('FileUrlList') is not None:
            temp_model = QuerySmsTemplateByCodeNewResponseBodyFileUrlList()
            self.file_url_list = temp_model.from_map(m['FileUrlList'])
        if m.get('From') is not None:
            self.from_ = m.get('From')
        if m.get('GmtCreateStr') is not None:
            self.gmt_create_str = m.get('GmtCreateStr')
        if m.get('IntlType') is not None:
            self.intl_type = m.get('IntlType')
        if m.get('MoreDataFileIds') is not None:
            temp_model = QuerySmsTemplateByCodeNewResponseBodyMoreDataFileIds()
            self.more_data_file_ids = temp_model.from_map(m['MoreDataFileIds'])
        if m.get('MoreDataFileUrls') is not None:
            temp_model = QuerySmsTemplateByCodeNewResponseBodyMoreDataFileUrls()
            self.more_data_file_urls = temp_model.from_map(m['MoreDataFileUrls'])
        if m.get('MoreDataOssKeys') is not None:
            temp_model = QuerySmsTemplateByCodeNewResponseBodyMoreDataOssKeys()
            self.more_data_oss_keys = temp_model.from_map(m['MoreDataOssKeys'])
        if m.get('NeedAuthorized') is not None:
            self.need_authorized = m.get('NeedAuthorized')
        if m.get('OpenTag') is not None:
            self.open_tag = m.get('OpenTag')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OssKeys') is not None:
            temp_model = QuerySmsTemplateByCodeNewResponseBodyOssKeys()
            self.oss_keys = temp_model.from_map(m['OssKeys'])
        if m.get('ProductUrl') is not None:
            self.product_url = m.get('ProductUrl')
        if m.get('RelatedSignName') is not None:
            self.related_sign_name = m.get('RelatedSignName')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('RmdTemplateId') is not None:
            self.rmd_template_id = m.get('RmdTemplateId')
        if m.get('RmdTemplateVariableNum') is not None:
            self.rmd_template_variable_num = m.get('RmdTemplateVariableNum')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('SignType') is not None:
            self.sign_type = m.get('SignType')
        if m.get('SmsContent') is not None:
            self.sms_content = m.get('SmsContent')
        if m.get('Tags') is not None:
            temp_model = QuerySmsTemplateByCodeNewResponseBodyTags()
            self.tags = temp_model.from_map(m['Tags'])
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('TemplateRule') is not None:
            self.template_rule = m.get('TemplateRule')
        return self


class QuerySmsTemplateByCodeNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsTemplateByCodeNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsTemplateByCodeNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsTemplateLastRangeRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        limit: int = None,
        need_default_template: bool = None,
        owner_id: int = None,
        prod_code: str = None,
        prod_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        template_name: str = None,
    ):
        self.biz_type = biz_type
        self.limit = limit
        self.need_default_template = need_default_template
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.prod_id = prod_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.limit is not None:
            result['Limit'] = self.limit
        if self.need_default_template is not None:
            result['NeedDefaultTemplate'] = self.need_default_template
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_id is not None:
            result['ProdId'] = self.prod_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('Limit') is not None:
            self.limit = m.get('Limit')
        if m.get('NeedDefaultTemplate') is not None:
            self.need_default_template = m.get('NeedDefaultTemplate')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdId') is not None:
            self.prod_id = m.get('ProdId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class QuerySmsTemplateLastRangeResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySmsTemplateLastRangeResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsTemplateLastRangeResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsTemplateLastRangeResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsTemplateLastRangeNewRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        filter_any_param: bool = None,
        limit: int = None,
        need_default_template: bool = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        prod_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        template_name: str = None,
    ):
        self.biz_type = biz_type
        self.filter_any_param = filter_any_param
        self.limit = limit
        self.need_default_template = need_default_template
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.prod_id = prod_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.filter_any_param is not None:
            result['FilterAnyParam'] = self.filter_any_param
        if self.limit is not None:
            result['Limit'] = self.limit
        if self.need_default_template is not None:
            result['NeedDefaultTemplate'] = self.need_default_template
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_id is not None:
            result['ProdId'] = self.prod_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('FilterAnyParam') is not None:
            self.filter_any_param = m.get('FilterAnyParam')
        if m.get('Limit') is not None:
            self.limit = m.get('Limit')
        if m.get('NeedDefaultTemplate') is not None:
            self.need_default_template = m.get('NeedDefaultTemplate')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdId') is not None:
            self.prod_id = m.get('ProdId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTagsTag(TeaModel):
    def __init__(
        self,
        resource_id: str = None,
        resource_type: str = None,
        tag_key: str = None,
        tag_value: str = None,
    ):
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.tag_key = tag_key
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTags(TeaModel):
    def __init__(
        self,
        tag: List[QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTagsTag] = None,
    ):
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTagsTag()
                self.tag.append(temp_model.from_map(k))
        return self


class QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate(TeaModel):
    def __init__(
        self,
        audit_info: str = None,
        audit_remark_info: str = None,
        audit_state: str = None,
        biz_type: str = None,
        expire_date_str: str = None,
        gmt_create_str: str = None,
        id: str = None,
        is_any_param: bool = None,
        is_default_template: bool = None,
        is_recently: bool = None,
        order_id: str = None,
        pass_err_type: str = None,
        remark: str = None,
        sign_type: int = None,
        sms_content: str = None,
        support_vendor: str = None,
        tags: QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTags = None,
        template_code: str = None,
        template_content: str = None,
        template_name: str = None,
        template_rule: str = None,
    ):
        self.audit_info = audit_info
        self.audit_remark_info = audit_remark_info
        self.audit_state = audit_state
        self.biz_type = biz_type
        self.expire_date_str = expire_date_str
        self.gmt_create_str = gmt_create_str
        self.id = id
        self.is_any_param = is_any_param
        self.is_default_template = is_default_template
        self.is_recently = is_recently
        self.order_id = order_id
        self.pass_err_type = pass_err_type
        self.remark = remark
        self.sign_type = sign_type
        self.sms_content = sms_content
        self.support_vendor = support_vendor
        self.tags = tags
        self.template_code = template_code
        self.template_content = template_content
        self.template_name = template_name
        self.template_rule = template_rule

    def validate(self):
        if self.tags:
            self.tags.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_info is not None:
            result['AuditInfo'] = self.audit_info
        if self.audit_remark_info is not None:
            result['AuditRemarkInfo'] = self.audit_remark_info
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.expire_date_str is not None:
            result['ExpireDateStr'] = self.expire_date_str
        if self.gmt_create_str is not None:
            result['GmtCreateStr'] = self.gmt_create_str
        if self.id is not None:
            result['Id'] = self.id
        if self.is_any_param is not None:
            result['IsAnyParam'] = self.is_any_param
        if self.is_default_template is not None:
            result['IsDefaultTemplate'] = self.is_default_template
        if self.is_recently is not None:
            result['IsRecently'] = self.is_recently
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.pass_err_type is not None:
            result['PassErrType'] = self.pass_err_type
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.sign_type is not None:
            result['SignType'] = self.sign_type
        if self.sms_content is not None:
            result['SmsContent'] = self.sms_content
        if self.support_vendor is not None:
            result['SupportVendor'] = self.support_vendor
        if self.tags is not None:
            result['Tags'] = self.tags.to_map()
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_content is not None:
            result['TemplateContent'] = self.template_content
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.template_rule is not None:
            result['TemplateRule'] = self.template_rule
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditInfo') is not None:
            self.audit_info = m.get('AuditInfo')
        if m.get('AuditRemarkInfo') is not None:
            self.audit_remark_info = m.get('AuditRemarkInfo')
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('ExpireDateStr') is not None:
            self.expire_date_str = m.get('ExpireDateStr')
        if m.get('GmtCreateStr') is not None:
            self.gmt_create_str = m.get('GmtCreateStr')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsAnyParam') is not None:
            self.is_any_param = m.get('IsAnyParam')
        if m.get('IsDefaultTemplate') is not None:
            self.is_default_template = m.get('IsDefaultTemplate')
        if m.get('IsRecently') is not None:
            self.is_recently = m.get('IsRecently')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('PassErrType') is not None:
            self.pass_err_type = m.get('PassErrType')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('SignType') is not None:
            self.sign_type = m.get('SignType')
        if m.get('SmsContent') is not None:
            self.sms_content = m.get('SmsContent')
        if m.get('SupportVendor') is not None:
            self.support_vendor = m.get('SupportVendor')
        if m.get('Tags') is not None:
            temp_model = QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplateTags()
            self.tags = temp_model.from_map(m['Tags'])
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateContent') is not None:
            self.template_content = m.get('TemplateContent')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('TemplateRule') is not None:
            self.template_rule = m.get('TemplateRule')
        return self


class QuerySmsTemplateLastRangeNewResponseBodyList(TeaModel):
    def __init__(
        self,
        sms_template: List[QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate] = None,
    ):
        self.sms_template = sms_template

    def validate(self):
        if self.sms_template:
            for k in self.sms_template:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SmsTemplate'] = []
        if self.sms_template is not None:
            for k in self.sms_template:
                result['SmsTemplate'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.sms_template = []
        if m.get('SmsTemplate') is not None:
            for k in m.get('SmsTemplate'):
                temp_model = QuerySmsTemplateLastRangeNewResponseBodyListSmsTemplate()
                self.sms_template.append(temp_model.from_map(k))
        return self


class QuerySmsTemplateLastRangeNewResponseBody(TeaModel):
    def __init__(
        self,
        list: QuerySmsTemplateLastRangeNewResponseBodyList = None,
        request_id: str = None,
    ):
        self.list = list
        self.request_id = request_id

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = QuerySmsTemplateLastRangeNewResponseBodyList()
            self.list = temp_model.from_map(m['List'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QuerySmsTemplateLastRangeNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsTemplateLastRangeNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsTemplateLastRangeNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsTemplateListRequestTags(TeaModel):
    def __init__(
        self,
        tag_key: str = None,
        tag_value: str = None,
    ):
        self.tag_key = tag_key
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class QuerySmsTemplateListRequest(TeaModel):
    def __init__(
        self,
        audit_state: str = None,
        biz_type: str = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        prod_type: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        tags: List[QuerySmsTemplateListRequestTags] = None,
        template_name: str = None,
    ):
        self.audit_state = audit_state
        self.biz_type = biz_type
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.prod_type = prod_type
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.tags = tags
        self.template_name = template_name

    def validate(self):
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_type is not None:
            result['ProdType'] = self.prod_type
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdType') is not None:
            self.prod_type = m.get('ProdType')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = QuerySmsTemplateListRequestTags()
                self.tags.append(temp_model.from_map(k))
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class QuerySmsTemplateListResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySmsTemplateListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsTemplateListResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsTemplateListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsTemplateListNewRequestTags(TeaModel):
    def __init__(
        self,
        tag_key: str = None,
        tag_value: str = None,
    ):
        self.tag_key = tag_key
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class QuerySmsTemplateListNewRequest(TeaModel):
    def __init__(
        self,
        audit_state: str = None,
        biz_type: str = None,
        intl_type: int = None,
        owner_id: int = None,
        page_no: int = None,
        page_size: int = None,
        prod_code: str = None,
        prod_type: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        tag_list_string: str = None,
        tags: List[QuerySmsTemplateListNewRequestTags] = None,
        template_name: str = None,
    ):
        self.audit_state = audit_state
        self.biz_type = biz_type
        self.intl_type = intl_type
        self.owner_id = owner_id
        self.page_no = page_no
        self.page_size = page_size
        self.prod_code = prod_code
        self.prod_type = prod_type
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.tag_list_string = tag_list_string
        self.tags = tags
        self.template_name = template_name

    def validate(self):
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.intl_type is not None:
            result['IntlType'] = self.intl_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.prod_type is not None:
            result['ProdType'] = self.prod_type
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.tag_list_string is not None:
            result['TagListString'] = self.tag_list_string
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('IntlType') is not None:
            self.intl_type = m.get('IntlType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProdType') is not None:
            self.prod_type = m.get('ProdType')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TagListString') is not None:
            self.tag_list_string = m.get('TagListString')
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = QuerySmsTemplateListNewRequestTags()
                self.tags.append(temp_model.from_map(k))
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class QuerySmsTemplateListNewResponseBodyListSmsTemplateTagsTag(TeaModel):
    def __init__(
        self,
        resource_id: str = None,
        resource_type: str = None,
        tag_key: str = None,
        tag_value: str = None,
    ):
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.tag_key = tag_key
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class QuerySmsTemplateListNewResponseBodyListSmsTemplateTags(TeaModel):
    def __init__(
        self,
        tag: List[QuerySmsTemplateListNewResponseBodyListSmsTemplateTagsTag] = None,
    ):
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = QuerySmsTemplateListNewResponseBodyListSmsTemplateTagsTag()
                self.tag.append(temp_model.from_map(k))
        return self


class QuerySmsTemplateListNewResponseBodyListSmsTemplate(TeaModel):
    def __init__(
        self,
        audit_info: str = None,
        audit_remark_info: str = None,
        audit_state: str = None,
        biz_type: str = None,
        expire_date_str: str = None,
        gmt_create_str: str = None,
        id: str = None,
        intelligent_approval: bool = None,
        intl_type: int = None,
        is_any_param: bool = None,
        is_default_template: bool = None,
        is_recently: bool = None,
        order_count: int = None,
        order_id: str = None,
        pass_err_type: str = None,
        product_url: str = None,
        related_sign_name: str = None,
        remark: str = None,
        sign_type: int = None,
        sms_content: str = None,
        support_vendor: str = None,
        tags: QuerySmsTemplateListNewResponseBodyListSmsTemplateTags = None,
        template_code: str = None,
        template_content: str = None,
        template_name: str = None,
        template_rule: str = None,
    ):
        self.audit_info = audit_info
        self.audit_remark_info = audit_remark_info
        self.audit_state = audit_state
        self.biz_type = biz_type
        self.expire_date_str = expire_date_str
        self.gmt_create_str = gmt_create_str
        self.id = id
        self.intelligent_approval = intelligent_approval
        self.intl_type = intl_type
        self.is_any_param = is_any_param
        self.is_default_template = is_default_template
        self.is_recently = is_recently
        self.order_count = order_count
        self.order_id = order_id
        self.pass_err_type = pass_err_type
        self.product_url = product_url
        self.related_sign_name = related_sign_name
        self.remark = remark
        self.sign_type = sign_type
        self.sms_content = sms_content
        self.support_vendor = support_vendor
        self.tags = tags
        self.template_code = template_code
        self.template_content = template_content
        self.template_name = template_name
        self.template_rule = template_rule

    def validate(self):
        if self.tags:
            self.tags.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_info is not None:
            result['AuditInfo'] = self.audit_info
        if self.audit_remark_info is not None:
            result['AuditRemarkInfo'] = self.audit_remark_info
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.expire_date_str is not None:
            result['ExpireDateStr'] = self.expire_date_str
        if self.gmt_create_str is not None:
            result['GmtCreateStr'] = self.gmt_create_str
        if self.id is not None:
            result['Id'] = self.id
        if self.intelligent_approval is not None:
            result['IntelligentApproval'] = self.intelligent_approval
        if self.intl_type is not None:
            result['IntlType'] = self.intl_type
        if self.is_any_param is not None:
            result['IsAnyParam'] = self.is_any_param
        if self.is_default_template is not None:
            result['IsDefaultTemplate'] = self.is_default_template
        if self.is_recently is not None:
            result['IsRecently'] = self.is_recently
        if self.order_count is not None:
            result['OrderCount'] = self.order_count
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.pass_err_type is not None:
            result['PassErrType'] = self.pass_err_type
        if self.product_url is not None:
            result['ProductUrl'] = self.product_url
        if self.related_sign_name is not None:
            result['RelatedSignName'] = self.related_sign_name
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.sign_type is not None:
            result['SignType'] = self.sign_type
        if self.sms_content is not None:
            result['SmsContent'] = self.sms_content
        if self.support_vendor is not None:
            result['SupportVendor'] = self.support_vendor
        if self.tags is not None:
            result['Tags'] = self.tags.to_map()
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_content is not None:
            result['TemplateContent'] = self.template_content
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.template_rule is not None:
            result['TemplateRule'] = self.template_rule
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditInfo') is not None:
            self.audit_info = m.get('AuditInfo')
        if m.get('AuditRemarkInfo') is not None:
            self.audit_remark_info = m.get('AuditRemarkInfo')
        if m.get('AuditState') is not None:
            self.audit_state = m.get('AuditState')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('ExpireDateStr') is not None:
            self.expire_date_str = m.get('ExpireDateStr')
        if m.get('GmtCreateStr') is not None:
            self.gmt_create_str = m.get('GmtCreateStr')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IntelligentApproval') is not None:
            self.intelligent_approval = m.get('IntelligentApproval')
        if m.get('IntlType') is not None:
            self.intl_type = m.get('IntlType')
        if m.get('IsAnyParam') is not None:
            self.is_any_param = m.get('IsAnyParam')
        if m.get('IsDefaultTemplate') is not None:
            self.is_default_template = m.get('IsDefaultTemplate')
        if m.get('IsRecently') is not None:
            self.is_recently = m.get('IsRecently')
        if m.get('OrderCount') is not None:
            self.order_count = m.get('OrderCount')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('PassErrType') is not None:
            self.pass_err_type = m.get('PassErrType')
        if m.get('ProductUrl') is not None:
            self.product_url = m.get('ProductUrl')
        if m.get('RelatedSignName') is not None:
            self.related_sign_name = m.get('RelatedSignName')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('SignType') is not None:
            self.sign_type = m.get('SignType')
        if m.get('SmsContent') is not None:
            self.sms_content = m.get('SmsContent')
        if m.get('SupportVendor') is not None:
            self.support_vendor = m.get('SupportVendor')
        if m.get('Tags') is not None:
            temp_model = QuerySmsTemplateListNewResponseBodyListSmsTemplateTags()
            self.tags = temp_model.from_map(m['Tags'])
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateContent') is not None:
            self.template_content = m.get('TemplateContent')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('TemplateRule') is not None:
            self.template_rule = m.get('TemplateRule')
        return self


class QuerySmsTemplateListNewResponseBodyList(TeaModel):
    def __init__(
        self,
        sms_template: List[QuerySmsTemplateListNewResponseBodyListSmsTemplate] = None,
    ):
        self.sms_template = sms_template

    def validate(self):
        if self.sms_template:
            for k in self.sms_template:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['SmsTemplate'] = []
        if self.sms_template is not None:
            for k in self.sms_template:
                result['SmsTemplate'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.sms_template = []
        if m.get('SmsTemplate') is not None:
            for k in m.get('SmsTemplate'):
                temp_model = QuerySmsTemplateListNewResponseBodyListSmsTemplate()
                self.sms_template.append(temp_model.from_map(k))
        return self


class QuerySmsTemplateListNewResponseBody(TeaModel):
    def __init__(
        self,
        list: QuerySmsTemplateListNewResponseBodyList = None,
        page_no: int = None,
        page_size: int = None,
        request_id: str = None,
        total: int = None,
    ):
        self.list = list
        self.page_no = page_no
        self.page_size = page_size
        self.request_id = request_id
        self.total = total

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = QuerySmsTemplateListNewResponseBodyList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class QuerySmsTemplateListNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsTemplateListNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsTemplateListNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsUserTagsRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QuerySmsUserTagsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QuerySmsUserTagsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsUserTagsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsUserTagsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QuerySmsUserTagsNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QuerySmsUserTagsNewResponseBody(TeaModel):
    def __init__(
        self,
        is_any_param_template_user: bool = None,
        is_batch_create_sms_sign: bool = None,
        is_inner_user: bool = None,
        is_new_user: bool = None,
        is_none_status_no_charge_cust: bool = None,
        is_open_template_rule: bool = None,
        is_opened_card: bool = None,
        is_opened_digit: bool = None,
        is_opened_international_sms: bool = None,
        is_opened_market: bool = None,
        is_opened_saas: bool = None,
        is_opened_smpp_standard_protocol: bool = None,
        is_opened_standard_protocol: bool = None,
        is_virtual_cust: bool = None,
        request_id: bool = None,
        sign_check_common: bool = None,
        sign_check_verification: bool = None,
        sms_information_supervision: bool = None,
    ):
        self.is_any_param_template_user = is_any_param_template_user
        self.is_batch_create_sms_sign = is_batch_create_sms_sign
        self.is_inner_user = is_inner_user
        self.is_new_user = is_new_user
        self.is_none_status_no_charge_cust = is_none_status_no_charge_cust
        self.is_open_template_rule = is_open_template_rule
        self.is_opened_card = is_opened_card
        self.is_opened_digit = is_opened_digit
        self.is_opened_international_sms = is_opened_international_sms
        self.is_opened_market = is_opened_market
        self.is_opened_saas = is_opened_saas
        self.is_opened_smpp_standard_protocol = is_opened_smpp_standard_protocol
        self.is_opened_standard_protocol = is_opened_standard_protocol
        self.is_virtual_cust = is_virtual_cust
        self.request_id = request_id
        self.sign_check_common = sign_check_common
        self.sign_check_verification = sign_check_verification
        self.sms_information_supervision = sms_information_supervision

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.is_any_param_template_user is not None:
            result['IsAnyParamTemplateUser'] = self.is_any_param_template_user
        if self.is_batch_create_sms_sign is not None:
            result['IsBatchCreateSmsSign'] = self.is_batch_create_sms_sign
        if self.is_inner_user is not None:
            result['IsInnerUser'] = self.is_inner_user
        if self.is_new_user is not None:
            result['IsNewUser'] = self.is_new_user
        if self.is_none_status_no_charge_cust is not None:
            result['IsNoneStatusNoChargeCust'] = self.is_none_status_no_charge_cust
        if self.is_open_template_rule is not None:
            result['IsOpenTemplateRule'] = self.is_open_template_rule
        if self.is_opened_card is not None:
            result['IsOpenedCard'] = self.is_opened_card
        if self.is_opened_digit is not None:
            result['IsOpenedDigit'] = self.is_opened_digit
        if self.is_opened_international_sms is not None:
            result['IsOpenedInternationalSms'] = self.is_opened_international_sms
        if self.is_opened_market is not None:
            result['IsOpenedMarket'] = self.is_opened_market
        if self.is_opened_saas is not None:
            result['IsOpenedSaas'] = self.is_opened_saas
        if self.is_opened_smpp_standard_protocol is not None:
            result['IsOpenedSmppStandardProtocol'] = self.is_opened_smpp_standard_protocol
        if self.is_opened_standard_protocol is not None:
            result['IsOpenedStandardProtocol'] = self.is_opened_standard_protocol
        if self.is_virtual_cust is not None:
            result['IsVirtualCust'] = self.is_virtual_cust
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.sign_check_common is not None:
            result['SignCheckCommon'] = self.sign_check_common
        if self.sign_check_verification is not None:
            result['SignCheckVerification'] = self.sign_check_verification
        if self.sms_information_supervision is not None:
            result['SmsInformationSupervision'] = self.sms_information_supervision
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsAnyParamTemplateUser') is not None:
            self.is_any_param_template_user = m.get('IsAnyParamTemplateUser')
        if m.get('IsBatchCreateSmsSign') is not None:
            self.is_batch_create_sms_sign = m.get('IsBatchCreateSmsSign')
        if m.get('IsInnerUser') is not None:
            self.is_inner_user = m.get('IsInnerUser')
        if m.get('IsNewUser') is not None:
            self.is_new_user = m.get('IsNewUser')
        if m.get('IsNoneStatusNoChargeCust') is not None:
            self.is_none_status_no_charge_cust = m.get('IsNoneStatusNoChargeCust')
        if m.get('IsOpenTemplateRule') is not None:
            self.is_open_template_rule = m.get('IsOpenTemplateRule')
        if m.get('IsOpenedCard') is not None:
            self.is_opened_card = m.get('IsOpenedCard')
        if m.get('IsOpenedDigit') is not None:
            self.is_opened_digit = m.get('IsOpenedDigit')
        if m.get('IsOpenedInternationalSms') is not None:
            self.is_opened_international_sms = m.get('IsOpenedInternationalSms')
        if m.get('IsOpenedMarket') is not None:
            self.is_opened_market = m.get('IsOpenedMarket')
        if m.get('IsOpenedSaas') is not None:
            self.is_opened_saas = m.get('IsOpenedSaas')
        if m.get('IsOpenedSmppStandardProtocol') is not None:
            self.is_opened_smpp_standard_protocol = m.get('IsOpenedSmppStandardProtocol')
        if m.get('IsOpenedStandardProtocol') is not None:
            self.is_opened_standard_protocol = m.get('IsOpenedStandardProtocol')
        if m.get('IsVirtualCust') is not None:
            self.is_virtual_cust = m.get('IsVirtualCust')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SignCheckCommon') is not None:
            self.sign_check_common = m.get('SignCheckCommon')
        if m.get('SignCheckVerification') is not None:
            self.sign_check_verification = m.get('SignCheckVerification')
        if m.get('SmsInformationSupervision') is not None:
            self.sms_information_supervision = m.get('SmsInformationSupervision')
        return self


class QuerySmsUserTagsNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QuerySmsUserTagsNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QuerySmsUserTagsNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryStandarTemplateCollectionsRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        template_content: str = None,
    ):
        self.biz_type = biz_type
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.template_content = template_content

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.template_content is not None:
            result['TemplateContent'] = self.template_content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TemplateContent') is not None:
            self.template_content = m.get('TemplateContent')
        return self


class QueryStandarTemplateCollectionsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryStandarTemplateCollectionsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryStandarTemplateCollectionsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryStandarTemplateCollectionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryStandarTemplateCollectionsNewRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        template_content: str = None,
    ):
        self.biz_type = biz_type
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.template_content = template_content

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.template_content is not None:
            result['TemplateContent'] = self.template_content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TemplateContent') is not None:
            self.template_content = m.get('TemplateContent')
        return self


class QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO(TeaModel):
    def __init__(
        self,
        business_type: int = None,
        fc_tag: int = None,
        i_18n: str = None,
        id: int = None,
        is_deleted: int = None,
        mc_business_type: int = None,
        mc_category: int = None,
        mc_signature: str = None,
        message_type_id: int = None,
        op_nick: str = None,
        partner_id: int = None,
        qualification_id: int = None,
        remark: str = None,
        sign_template_id: int = None,
        sign_type: int = None,
        source_id: str = None,
        speed_level: int = None,
        state: int = None,
        template_code: str = None,
        template_content: str = None,
        template_id: int = None,
        template_name: str = None,
        template_param_rule: str = None,
        template_sender_type: int = None,
        template_type: int = None,
        total_count_limit: int = None,
        voice_type: int = None,
    ):
        self.business_type = business_type
        self.fc_tag = fc_tag
        self.i_18n = i_18n
        self.id = id
        self.is_deleted = is_deleted
        self.mc_business_type = mc_business_type
        self.mc_category = mc_category
        self.mc_signature = mc_signature
        self.message_type_id = message_type_id
        self.op_nick = op_nick
        self.partner_id = partner_id
        self.qualification_id = qualification_id
        self.remark = remark
        self.sign_template_id = sign_template_id
        self.sign_type = sign_type
        self.source_id = source_id
        self.speed_level = speed_level
        self.state = state
        self.template_code = template_code
        self.template_content = template_content
        self.template_id = template_id
        self.template_name = template_name
        self.template_param_rule = template_param_rule
        self.template_sender_type = template_sender_type
        self.template_type = template_type
        self.total_count_limit = total_count_limit
        self.voice_type = voice_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.business_type is not None:
            result['BusinessType'] = self.business_type
        if self.fc_tag is not None:
            result['FcTag'] = self.fc_tag
        if self.i_18n is not None:
            result['I18n'] = self.i_18n
        if self.id is not None:
            result['Id'] = self.id
        if self.is_deleted is not None:
            result['IsDeleted'] = self.is_deleted
        if self.mc_business_type is not None:
            result['McBusinessType'] = self.mc_business_type
        if self.mc_category is not None:
            result['McCategory'] = self.mc_category
        if self.mc_signature is not None:
            result['McSignature'] = self.mc_signature
        if self.message_type_id is not None:
            result['MessageTypeId'] = self.message_type_id
        if self.op_nick is not None:
            result['OpNick'] = self.op_nick
        if self.partner_id is not None:
            result['PartnerId'] = self.partner_id
        if self.qualification_id is not None:
            result['QualificationId'] = self.qualification_id
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.sign_template_id is not None:
            result['SignTemplateId'] = self.sign_template_id
        if self.sign_type is not None:
            result['SignType'] = self.sign_type
        if self.source_id is not None:
            result['SourceId'] = self.source_id
        if self.speed_level is not None:
            result['SpeedLevel'] = self.speed_level
        if self.state is not None:
            result['State'] = self.state
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_content is not None:
            result['TemplateContent'] = self.template_content
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        if self.template_param_rule is not None:
            result['TemplateParamRule'] = self.template_param_rule
        if self.template_sender_type is not None:
            result['TemplateSenderType'] = self.template_sender_type
        if self.template_type is not None:
            result['TemplateType'] = self.template_type
        if self.total_count_limit is not None:
            result['TotalCountLimit'] = self.total_count_limit
        if self.voice_type is not None:
            result['VoiceType'] = self.voice_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BusinessType') is not None:
            self.business_type = m.get('BusinessType')
        if m.get('FcTag') is not None:
            self.fc_tag = m.get('FcTag')
        if m.get('I18n') is not None:
            self.i_18n = m.get('I18n')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('IsDeleted') is not None:
            self.is_deleted = m.get('IsDeleted')
        if m.get('McBusinessType') is not None:
            self.mc_business_type = m.get('McBusinessType')
        if m.get('McCategory') is not None:
            self.mc_category = m.get('McCategory')
        if m.get('McSignature') is not None:
            self.mc_signature = m.get('McSignature')
        if m.get('MessageTypeId') is not None:
            self.message_type_id = m.get('MessageTypeId')
        if m.get('OpNick') is not None:
            self.op_nick = m.get('OpNick')
        if m.get('PartnerId') is not None:
            self.partner_id = m.get('PartnerId')
        if m.get('QualificationId') is not None:
            self.qualification_id = m.get('QualificationId')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('SignTemplateId') is not None:
            self.sign_template_id = m.get('SignTemplateId')
        if m.get('SignType') is not None:
            self.sign_type = m.get('SignType')
        if m.get('SourceId') is not None:
            self.source_id = m.get('SourceId')
        if m.get('SpeedLevel') is not None:
            self.speed_level = m.get('SpeedLevel')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateContent') is not None:
            self.template_content = m.get('TemplateContent')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        if m.get('TemplateParamRule') is not None:
            self.template_param_rule = m.get('TemplateParamRule')
        if m.get('TemplateSenderType') is not None:
            self.template_sender_type = m.get('TemplateSenderType')
        if m.get('TemplateType') is not None:
            self.template_type = m.get('TemplateType')
        if m.get('TotalCountLimit') is not None:
            self.total_count_limit = m.get('TotalCountLimit')
        if m.get('VoiceType') is not None:
            self.voice_type = m.get('VoiceType')
        return self


class QueryStandarTemplateCollectionsNewResponseBodyList(TeaModel):
    def __init__(
        self,
        fc_partner_template_dto: List[QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO] = None,
    ):
        self.fc_partner_template_dto = fc_partner_template_dto

    def validate(self):
        if self.fc_partner_template_dto:
            for k in self.fc_partner_template_dto:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['FcPartnerTemplateDTO'] = []
        if self.fc_partner_template_dto is not None:
            for k in self.fc_partner_template_dto:
                result['FcPartnerTemplateDTO'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.fc_partner_template_dto = []
        if m.get('FcPartnerTemplateDTO') is not None:
            for k in m.get('FcPartnerTemplateDTO'):
                temp_model = QueryStandarTemplateCollectionsNewResponseBodyListFcPartnerTemplateDTO()
                self.fc_partner_template_dto.append(temp_model.from_map(k))
        return self


class QueryStandarTemplateCollectionsNewResponseBody(TeaModel):
    def __init__(
        self,
        list: QueryStandarTemplateCollectionsNewResponseBodyList = None,
        request_id: str = None,
    ):
        self.list = list
        self.request_id = request_id

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = QueryStandarTemplateCollectionsNewResponseBodyList()
            self.list = temp_model.from_map(m['List'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QueryStandarTemplateCollectionsNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryStandarTemplateCollectionsNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryStandarTemplateCollectionsNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryStandardProtocolRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        protocol_type: int = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        # This parameter is required.
        self.protocol_type = protocol_type
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.protocol_type is not None:
            result['ProtocolType'] = self.protocol_type
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProtocolType') is not None:
            self.protocol_type = m.get('ProtocolType')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryStandardProtocolResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryStandardProtocolResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryStandardProtocolResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryStandardProtocolResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryStandardProtocolListNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        protocol_type: int = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        # This parameter is required.
        self.protocol_type = protocol_type
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.protocol_type is not None:
            result['ProtocolType'] = self.protocol_type
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ProtocolType') is not None:
            self.protocol_type = m.get('ProtocolType')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryStandardProtocolListNewResponseBodyList(TeaModel):
    def __init__(
        self,
        audit_order_id: str = None,
        corp_code: str = None,
        eff_ip_white_list: str = None,
        feature_code: int = None,
        ip: str = None,
        ip_audit_status: int = None,
        ip_white_list: str = None,
        partner_id: int = None,
        port: str = None,
        profile_id: int = None,
        protocol_type: int = None,
        protocol_type_str: str = None,
        real_name_ins_id: int = None,
        res_code: str = None,
        sms_sign: str = None,
        sms_type: str = None,
        sp_code: str = None,
        status: str = None,
        template_code: str = None,
        user_limit: int = None,
        user_max_channel: int = None,
        user_name: str = None,
        user_pwd: str = None,
    ):
        self.audit_order_id = audit_order_id
        self.corp_code = corp_code
        self.eff_ip_white_list = eff_ip_white_list
        self.feature_code = feature_code
        self.ip = ip
        self.ip_audit_status = ip_audit_status
        self.ip_white_list = ip_white_list
        self.partner_id = partner_id
        self.port = port
        self.profile_id = profile_id
        self.protocol_type = protocol_type
        self.protocol_type_str = protocol_type_str
        self.real_name_ins_id = real_name_ins_id
        self.res_code = res_code
        self.sms_sign = sms_sign
        self.sms_type = sms_type
        self.sp_code = sp_code
        self.status = status
        self.template_code = template_code
        self.user_limit = user_limit
        self.user_max_channel = user_max_channel
        self.user_name = user_name
        self.user_pwd = user_pwd

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_order_id is not None:
            result['AuditOrderId'] = self.audit_order_id
        if self.corp_code is not None:
            result['CorpCode'] = self.corp_code
        if self.eff_ip_white_list is not None:
            result['EffIpWhiteList'] = self.eff_ip_white_list
        if self.feature_code is not None:
            result['FeatureCode'] = self.feature_code
        if self.ip is not None:
            result['Ip'] = self.ip
        if self.ip_audit_status is not None:
            result['IpAuditStatus'] = self.ip_audit_status
        if self.ip_white_list is not None:
            result['IpWhiteList'] = self.ip_white_list
        if self.partner_id is not None:
            result['PartnerId'] = self.partner_id
        if self.port is not None:
            result['Port'] = self.port
        if self.profile_id is not None:
            result['ProfileId'] = self.profile_id
        if self.protocol_type is not None:
            result['ProtocolType'] = self.protocol_type
        if self.protocol_type_str is not None:
            result['ProtocolTypeStr'] = self.protocol_type_str
        if self.real_name_ins_id is not None:
            result['RealNameInsId'] = self.real_name_ins_id
        if self.res_code is not None:
            result['ResCode'] = self.res_code
        if self.sms_sign is not None:
            result['SmsSign'] = self.sms_sign
        if self.sms_type is not None:
            result['SmsType'] = self.sms_type
        if self.sp_code is not None:
            result['SpCode'] = self.sp_code
        if self.status is not None:
            result['Status'] = self.status
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.user_limit is not None:
            result['UserLimit'] = self.user_limit
        if self.user_max_channel is not None:
            result['UserMaxChannel'] = self.user_max_channel
        if self.user_name is not None:
            result['UserName'] = self.user_name
        if self.user_pwd is not None:
            result['UserPwd'] = self.user_pwd
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditOrderId') is not None:
            self.audit_order_id = m.get('AuditOrderId')
        if m.get('CorpCode') is not None:
            self.corp_code = m.get('CorpCode')
        if m.get('EffIpWhiteList') is not None:
            self.eff_ip_white_list = m.get('EffIpWhiteList')
        if m.get('FeatureCode') is not None:
            self.feature_code = m.get('FeatureCode')
        if m.get('Ip') is not None:
            self.ip = m.get('Ip')
        if m.get('IpAuditStatus') is not None:
            self.ip_audit_status = m.get('IpAuditStatus')
        if m.get('IpWhiteList') is not None:
            self.ip_white_list = m.get('IpWhiteList')
        if m.get('PartnerId') is not None:
            self.partner_id = m.get('PartnerId')
        if m.get('Port') is not None:
            self.port = m.get('Port')
        if m.get('ProfileId') is not None:
            self.profile_id = m.get('ProfileId')
        if m.get('ProtocolType') is not None:
            self.protocol_type = m.get('ProtocolType')
        if m.get('ProtocolTypeStr') is not None:
            self.protocol_type_str = m.get('ProtocolTypeStr')
        if m.get('RealNameInsId') is not None:
            self.real_name_ins_id = m.get('RealNameInsId')
        if m.get('ResCode') is not None:
            self.res_code = m.get('ResCode')
        if m.get('SmsSign') is not None:
            self.sms_sign = m.get('SmsSign')
        if m.get('SmsType') is not None:
            self.sms_type = m.get('SmsType')
        if m.get('SpCode') is not None:
            self.sp_code = m.get('SpCode')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('UserLimit') is not None:
            self.user_limit = m.get('UserLimit')
        if m.get('UserMaxChannel') is not None:
            self.user_max_channel = m.get('UserMaxChannel')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        if m.get('UserPwd') is not None:
            self.user_pwd = m.get('UserPwd')
        return self


class QueryStandardProtocolListNewResponseBody(TeaModel):
    def __init__(
        self,
        list: List[QueryStandardProtocolListNewResponseBodyList] = None,
        page_no: int = None,
        page_size: int = None,
        request_id: str = None,
        total: int = None,
    ):
        self.list = list
        self.page_no = page_no
        self.page_size = page_size
        self.request_id = request_id
        self.total = total

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QueryStandardProtocolListNewResponseBodyList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class QueryStandardProtocolListNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryStandardProtocolListNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryStandardProtocolListNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryTagResourcesRequestTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class QueryTagResourcesRequest(TeaModel):
    def __init__(
        self,
        category: str = None,
        next_token: str = None,
        owner_id: int = None,
        page_size: int = None,
        prod_code: str = None,
        region_id: str = None,
        resource_id: List[str] = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        resource_type: str = None,
        tag: List[QueryTagResourcesRequestTag] = None,
    ):
        self.category = category
        self.next_token = next_token
        self.owner_id = owner_id
        self.page_size = page_size
        self.prod_code = prod_code
        # This parameter is required.
        self.region_id = region_id
        self.resource_id = resource_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.resource_type = resource_type
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = QueryTagResourcesRequestTag()
                self.tag.append(temp_model.from_map(k))
        return self


class QueryTagResourcesResponseBodyTagResources(TeaModel):
    def __init__(
        self,
        resource_id: str = None,
        resource_type: str = None,
        tag_key: str = None,
        tag_value: str = None,
    ):
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.tag_key = tag_key
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class QueryTagResourcesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        next_token: str = None,
        request_id: str = None,
        tag_resources: List[QueryTagResourcesResponseBodyTagResources] = None,
    ):
        self.code = code
        self.data = data
        self.next_token = next_token
        self.request_id = request_id
        self.tag_resources = tag_resources

    def validate(self):
        if self.tag_resources:
            for k in self.tag_resources:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['TagResources'] = []
        if self.tag_resources is not None:
            for k in self.tag_resources:
                result['TagResources'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.tag_resources = []
        if m.get('TagResources') is not None:
            for k in m.get('TagResources'):
                temp_model = QueryTagResourcesResponseBodyTagResources()
                self.tag_resources.append(temp_model.from_map(k))
        return self


class QueryTagResourcesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryTagResourcesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryTagResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryTagResourcesNewRequestTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class QueryTagResourcesNewRequest(TeaModel):
    def __init__(
        self,
        category: str = None,
        next_token: str = None,
        owner_id: int = None,
        page_size: int = None,
        prod_code: str = None,
        region_id: str = None,
        resource_id: List[str] = None,
        resource_id_list_string: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        resource_type: str = None,
        tag: List[QueryTagResourcesNewRequestTag] = None,
        tag_list_string: str = None,
    ):
        self.category = category
        self.next_token = next_token
        self.owner_id = owner_id
        self.page_size = page_size
        self.prod_code = prod_code
        # This parameter is required.
        self.region_id = region_id
        self.resource_id = resource_id
        self.resource_id_list_string = resource_id_list_string
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.resource_type = resource_type
        self.tag = tag
        self.tag_list_string = tag_list_string

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.category is not None:
            result['Category'] = self.category
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_id_list_string is not None:
            result['ResourceIdListString'] = self.resource_id_list_string
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        if self.tag_list_string is not None:
            result['TagListString'] = self.tag_list_string
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceIdListString') is not None:
            self.resource_id_list_string = m.get('ResourceIdListString')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = QueryTagResourcesNewRequestTag()
                self.tag.append(temp_model.from_map(k))
        if m.get('TagListString') is not None:
            self.tag_list_string = m.get('TagListString')
        return self


class QueryTagResourcesNewResponseBodyTagResources(TeaModel):
    def __init__(
        self,
        resource_id: str = None,
        resource_type: str = None,
        tag_key: str = None,
        tag_value: str = None,
    ):
        self.resource_id = resource_id
        self.resource_type = resource_type
        self.tag_key = tag_key
        self.tag_value = tag_value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        return self


class QueryTagResourcesNewResponseBody(TeaModel):
    def __init__(
        self,
        next_token: str = None,
        request_id: str = None,
        tag_resources: List[QueryTagResourcesNewResponseBodyTagResources] = None,
    ):
        self.next_token = next_token
        self.request_id = request_id
        self.tag_resources = tag_resources

    def validate(self):
        if self.tag_resources:
            for k in self.tag_resources:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['TagResources'] = []
        if self.tag_resources is not None:
            for k in self.tag_resources:
                result['TagResources'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.tag_resources = []
        if m.get('TagResources') is not None:
            for k in m.get('TagResources'):
                temp_model = QueryTagResourcesNewResponseBodyTagResources()
                self.tag_resources.append(temp_model.from_map(k))
        return self


class QueryTagResourcesNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryTagResourcesNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryTagResourcesNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryTmpEffectReportDataRequest(TeaModel):
    def __init__(
        self,
        end_date: str = None,
        page_no: int = None,
        page_size: int = None,
        start_date: str = None,
        tmp_code: str = None,
        tmp_name: str = None,
        vendor_code: str = None,
        vendor_name: str = None,
    ):
        # This parameter is required.
        self.end_date = end_date
        # This parameter is required.
        self.page_no = page_no
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.start_date = start_date
        self.tmp_code = tmp_code
        self.tmp_name = tmp_name
        self.vendor_code = vendor_code
        self.vendor_name = vendor_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_date is not None:
            result['StartDate'] = self.start_date
        if self.tmp_code is not None:
            result['TmpCode'] = self.tmp_code
        if self.tmp_name is not None:
            result['TmpName'] = self.tmp_name
        if self.vendor_code is not None:
            result['VendorCode'] = self.vendor_code
        if self.vendor_name is not None:
            result['VendorName'] = self.vendor_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartDate') is not None:
            self.start_date = m.get('StartDate')
        if m.get('TmpCode') is not None:
            self.tmp_code = m.get('TmpCode')
        if m.get('TmpName') is not None:
            self.tmp_name = m.get('TmpName')
        if m.get('VendorCode') is not None:
            self.vendor_code = m.get('VendorCode')
        if m.get('VendorName') is not None:
            self.vendor_name = m.get('VendorName')
        return self


class QueryTmpEffectReportDataResponseBodyModelRecords(TeaModel):
    def __init__(
        self,
        click_pv: str = None,
        click_uv: str = None,
        date: str = None,
        expose_pv: str = None,
        expose_uv: str = None,
        id: int = None,
        rpt_success_count: str = None,
        tmp_code: str = None,
        tmp_name: str = None,
        vendor_name: str = None,
    ):
        self.click_pv = click_pv
        self.click_uv = click_uv
        self.date = date
        self.expose_pv = expose_pv
        self.expose_uv = expose_uv
        self.id = id
        self.rpt_success_count = rpt_success_count
        self.tmp_code = tmp_code
        self.tmp_name = tmp_name
        self.vendor_name = vendor_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.click_pv is not None:
            result['ClickPv'] = self.click_pv
        if self.click_uv is not None:
            result['ClickUv'] = self.click_uv
        if self.date is not None:
            result['Date'] = self.date
        if self.expose_pv is not None:
            result['ExposePv'] = self.expose_pv
        if self.expose_uv is not None:
            result['ExposeUv'] = self.expose_uv
        if self.id is not None:
            result['Id'] = self.id
        if self.rpt_success_count is not None:
            result['RptSuccessCount'] = self.rpt_success_count
        if self.tmp_code is not None:
            result['TmpCode'] = self.tmp_code
        if self.tmp_name is not None:
            result['TmpName'] = self.tmp_name
        if self.vendor_name is not None:
            result['VendorName'] = self.vendor_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ClickPv') is not None:
            self.click_pv = m.get('ClickPv')
        if m.get('ClickUv') is not None:
            self.click_uv = m.get('ClickUv')
        if m.get('Date') is not None:
            self.date = m.get('Date')
        if m.get('ExposePv') is not None:
            self.expose_pv = m.get('ExposePv')
        if m.get('ExposeUv') is not None:
            self.expose_uv = m.get('ExposeUv')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('RptSuccessCount') is not None:
            self.rpt_success_count = m.get('RptSuccessCount')
        if m.get('TmpCode') is not None:
            self.tmp_code = m.get('TmpCode')
        if m.get('TmpName') is not None:
            self.tmp_name = m.get('TmpName')
        if m.get('VendorName') is not None:
            self.vendor_name = m.get('VendorName')
        return self


class QueryTmpEffectReportDataResponseBodyModel(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        records: List[QueryTmpEffectReportDataResponseBodyModelRecords] = None,
        total_count: int = None,
    ):
        self.page_no = page_no
        self.page_size = page_size
        self.records = records
        self.total_count = total_count

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = QueryTmpEffectReportDataResponseBodyModelRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class QueryTmpEffectReportDataResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        model: QueryTmpEffectReportDataResponseBodyModel = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.model = model
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.model:
            self.model.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.model is not None:
            result['Model'] = self.model.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Model') is not None:
            temp_model = QueryTmpEffectReportDataResponseBodyModel()
            self.model = temp_model.from_map(m['Model'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryTmpEffectReportDataResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryTmpEffectReportDataResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryTmpEffectReportDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryTmpEffectReportDayDataRequest(TeaModel):
    def __init__(
        self,
        end_date: str = None,
        page_no: int = None,
        page_size: int = None,
        start_date: str = None,
        tmp_code: str = None,
        tmp_name: str = None,
        vendor_name: str = None,
    ):
        # This parameter is required.
        self.end_date = end_date
        # This parameter is required.
        self.page_no = page_no
        # This parameter is required.
        self.page_size = page_size
        # This parameter is required.
        self.start_date = start_date
        self.tmp_code = tmp_code
        self.tmp_name = tmp_name
        self.vendor_name = vendor_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.start_date is not None:
            result['StartDate'] = self.start_date
        if self.tmp_code is not None:
            result['TmpCode'] = self.tmp_code
        if self.tmp_name is not None:
            result['TmpName'] = self.tmp_name
        if self.vendor_name is not None:
            result['VendorName'] = self.vendor_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('StartDate') is not None:
            self.start_date = m.get('StartDate')
        if m.get('TmpCode') is not None:
            self.tmp_code = m.get('TmpCode')
        if m.get('TmpName') is not None:
            self.tmp_name = m.get('TmpName')
        if m.get('VendorName') is not None:
            self.vendor_name = m.get('VendorName')
        return self


class QueryTmpEffectReportDayDataResponseBodyModelRecords(TeaModel):
    def __init__(
        self,
        click_pv: str = None,
        click_uv: str = None,
        date: str = None,
        expose_pv: str = None,
        expose_uv: str = None,
        rpt_success_count: str = None,
        tmp_code: str = None,
        tmp_name: str = None,
        vendor_name: str = None,
    ):
        self.click_pv = click_pv
        self.click_uv = click_uv
        self.date = date
        self.expose_pv = expose_pv
        self.expose_uv = expose_uv
        self.rpt_success_count = rpt_success_count
        self.tmp_code = tmp_code
        self.tmp_name = tmp_name
        self.vendor_name = vendor_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.click_pv is not None:
            result['ClickPv'] = self.click_pv
        if self.click_uv is not None:
            result['ClickUv'] = self.click_uv
        if self.date is not None:
            result['Date'] = self.date
        if self.expose_pv is not None:
            result['ExposePv'] = self.expose_pv
        if self.expose_uv is not None:
            result['ExposeUv'] = self.expose_uv
        if self.rpt_success_count is not None:
            result['RptSuccessCount'] = self.rpt_success_count
        if self.tmp_code is not None:
            result['TmpCode'] = self.tmp_code
        if self.tmp_name is not None:
            result['TmpName'] = self.tmp_name
        if self.vendor_name is not None:
            result['VendorName'] = self.vendor_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ClickPv') is not None:
            self.click_pv = m.get('ClickPv')
        if m.get('ClickUv') is not None:
            self.click_uv = m.get('ClickUv')
        if m.get('Date') is not None:
            self.date = m.get('Date')
        if m.get('ExposePv') is not None:
            self.expose_pv = m.get('ExposePv')
        if m.get('ExposeUv') is not None:
            self.expose_uv = m.get('ExposeUv')
        if m.get('RptSuccessCount') is not None:
            self.rpt_success_count = m.get('RptSuccessCount')
        if m.get('TmpCode') is not None:
            self.tmp_code = m.get('TmpCode')
        if m.get('TmpName') is not None:
            self.tmp_name = m.get('TmpName')
        if m.get('VendorName') is not None:
            self.vendor_name = m.get('VendorName')
        return self


class QueryTmpEffectReportDayDataResponseBodyModel(TeaModel):
    def __init__(
        self,
        page_no: int = None,
        page_size: int = None,
        records: List[QueryTmpEffectReportDayDataResponseBodyModelRecords] = None,
        total_count: int = None,
    ):
        self.page_no = page_no
        self.page_size = page_size
        self.records = records
        self.total_count = total_count

    def validate(self):
        if self.records:
            for k in self.records:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['Records'] = []
        if self.records is not None:
            for k in self.records:
                result['Records'].append(k.to_map() if k else None)
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.records = []
        if m.get('Records') is not None:
            for k in m.get('Records'):
                temp_model = QueryTmpEffectReportDayDataResponseBodyModelRecords()
                self.records.append(temp_model.from_map(k))
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class QueryTmpEffectReportDayDataResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        model: QueryTmpEffectReportDayDataResponseBodyModel = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.code = code
        self.model = model
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.model:
            self.model.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.model is not None:
            result['Model'] = self.model.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Model') is not None:
            temp_model = QueryTmpEffectReportDayDataResponseBodyModel()
            self.model = temp_model.from_map(m['Model'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class QueryTmpEffectReportDayDataResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryTmpEffectReportDayDataResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryTmpEffectReportDayDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryUsertagExistenceRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        usertag_position: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.usertag_position = usertag_position

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.usertag_position is not None:
            result['UsertagPosition'] = self.usertag_position
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('UsertagPosition') is not None:
            self.usertag_position = m.get('UsertagPosition')
        return self


class QueryUsertagExistenceResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: bool = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryUsertagExistenceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryUsertagExistenceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryUsertagExistenceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryWarningThresholdRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.biz_type = biz_type
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryWarningThresholdResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class QueryWarningThresholdResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryWarningThresholdResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryWarningThresholdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryWarningThresholdNewRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.biz_type = biz_type
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryWarningThresholdNewResponseBody(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        contact_phone: str = None,
        daily_halt_limit: int = None,
        daily_warning_limit: int = None,
        domestic_daily_success: int = None,
        domestic_daily_total: int = None,
        domestic_monthly_success: int = None,
        domestic_monthly_total: int = None,
        monthly_halt_limit: int = None,
        monthly_warning_limit: int = None,
        out_daily_success: int = None,
        out_daily_total: int = None,
        out_monthly_success: int = None,
        out_monthly_total: int = None,
        prev_waring_notice: bool = None,
        request_id: str = None,
    ):
        self.biz_type = biz_type
        self.contact_phone = contact_phone
        self.daily_halt_limit = daily_halt_limit
        self.daily_warning_limit = daily_warning_limit
        self.domestic_daily_success = domestic_daily_success
        self.domestic_daily_total = domestic_daily_total
        self.domestic_monthly_success = domestic_monthly_success
        self.domestic_monthly_total = domestic_monthly_total
        self.monthly_halt_limit = monthly_halt_limit
        self.monthly_warning_limit = monthly_warning_limit
        self.out_daily_success = out_daily_success
        self.out_daily_total = out_daily_total
        self.out_monthly_success = out_monthly_success
        self.out_monthly_total = out_monthly_total
        self.prev_waring_notice = prev_waring_notice
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.contact_phone is not None:
            result['ContactPhone'] = self.contact_phone
        if self.daily_halt_limit is not None:
            result['DailyHaltLimit'] = self.daily_halt_limit
        if self.daily_warning_limit is not None:
            result['DailyWarningLimit'] = self.daily_warning_limit
        if self.domestic_daily_success is not None:
            result['DomesticDailySuccess'] = self.domestic_daily_success
        if self.domestic_daily_total is not None:
            result['DomesticDailyTotal'] = self.domestic_daily_total
        if self.domestic_monthly_success is not None:
            result['DomesticMonthlySuccess'] = self.domestic_monthly_success
        if self.domestic_monthly_total is not None:
            result['DomesticMonthlyTotal'] = self.domestic_monthly_total
        if self.monthly_halt_limit is not None:
            result['MonthlyHaltLimit'] = self.monthly_halt_limit
        if self.monthly_warning_limit is not None:
            result['MonthlyWarningLimit'] = self.monthly_warning_limit
        if self.out_daily_success is not None:
            result['OutDailySuccess'] = self.out_daily_success
        if self.out_daily_total is not None:
            result['OutDailyTotal'] = self.out_daily_total
        if self.out_monthly_success is not None:
            result['OutMonthlySuccess'] = self.out_monthly_success
        if self.out_monthly_total is not None:
            result['OutMonthlyTotal'] = self.out_monthly_total
        if self.prev_waring_notice is not None:
            result['PrevWaringNotice'] = self.prev_waring_notice
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('ContactPhone') is not None:
            self.contact_phone = m.get('ContactPhone')
        if m.get('DailyHaltLimit') is not None:
            self.daily_halt_limit = m.get('DailyHaltLimit')
        if m.get('DailyWarningLimit') is not None:
            self.daily_warning_limit = m.get('DailyWarningLimit')
        if m.get('DomesticDailySuccess') is not None:
            self.domestic_daily_success = m.get('DomesticDailySuccess')
        if m.get('DomesticDailyTotal') is not None:
            self.domestic_daily_total = m.get('DomesticDailyTotal')
        if m.get('DomesticMonthlySuccess') is not None:
            self.domestic_monthly_success = m.get('DomesticMonthlySuccess')
        if m.get('DomesticMonthlyTotal') is not None:
            self.domestic_monthly_total = m.get('DomesticMonthlyTotal')
        if m.get('MonthlyHaltLimit') is not None:
            self.monthly_halt_limit = m.get('MonthlyHaltLimit')
        if m.get('MonthlyWarningLimit') is not None:
            self.monthly_warning_limit = m.get('MonthlyWarningLimit')
        if m.get('OutDailySuccess') is not None:
            self.out_daily_success = m.get('OutDailySuccess')
        if m.get('OutDailyTotal') is not None:
            self.out_daily_total = m.get('OutDailyTotal')
        if m.get('OutMonthlySuccess') is not None:
            self.out_monthly_success = m.get('OutMonthlySuccess')
        if m.get('OutMonthlyTotal') is not None:
            self.out_monthly_total = m.get('OutMonthlyTotal')
        if m.get('PrevWaringNotice') is not None:
            self.prev_waring_notice = m.get('PrevWaringNotice')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class QueryWarningThresholdNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryWarningThresholdNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryWarningThresholdNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class QueryWorkOrdAuditListNewRequest(TeaModel):
    def __init__(
        self,
        order_id: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
    ):
        self.order_id = order_id
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        return self


class QueryWorkOrdAuditListNewResponseBodyListParamAuditRemarkInfo(TeaModel):
    def __init__(
        self,
        reject_date: str = None,
        reject_info: str = None,
        reject_sub_info: str = None,
    ):
        self.reject_date = reject_date
        self.reject_info = reject_info
        self.reject_sub_info = reject_sub_info

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.reject_date is not None:
            result['RejectDate'] = self.reject_date
        if self.reject_info is not None:
            result['RejectInfo'] = self.reject_info
        if self.reject_sub_info is not None:
            result['RejectSubInfo'] = self.reject_sub_info
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RejectDate') is not None:
            self.reject_date = m.get('RejectDate')
        if m.get('RejectInfo') is not None:
            self.reject_info = m.get('RejectInfo')
        if m.get('RejectSubInfo') is not None:
            self.reject_sub_info = m.get('RejectSubInfo')
        return self


class QueryWorkOrdAuditListNewResponseBodyListParamAuditState(TeaModel):
    def __init__(
        self,
        key: str = None,
        name: str = None,
        value: int = None,
    ):
        self.key = key
        self.name = name
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.name is not None:
            result['Name'] = self.name
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class QueryWorkOrdAuditListNewResponseBodyListParam(TeaModel):
    def __init__(
        self,
        audit_info: str = None,
        audit_remark_info: QueryWorkOrdAuditListNewResponseBodyListParamAuditRemarkInfo = None,
        audit_state: QueryWorkOrdAuditListNewResponseBodyListParamAuditState = None,
        business_type: int = None,
        extend_message: str = None,
        file_ids: List[int] = None,
        file_url_list: List[str] = None,
        gmt_create_str: str = None,
        id: int = None,
        order_id: str = None,
        partner_id: int = None,
        remark: str = None,
        scene_type: int = None,
        sign_name: str = None,
        sign_type: int = None,
    ):
        self.audit_info = audit_info
        self.audit_remark_info = audit_remark_info
        self.audit_state = audit_state
        self.business_type = business_type
        self.extend_message = extend_message
        self.file_ids = file_ids
        self.file_url_list = file_url_list
        self.gmt_create_str = gmt_create_str
        self.id = id
        self.order_id = order_id
        self.partner_id = partner_id
        self.remark = remark
        self.scene_type = scene_type
        self.sign_name = sign_name
        self.sign_type = sign_type

    def validate(self):
        if self.audit_remark_info:
            self.audit_remark_info.validate()
        if self.audit_state:
            self.audit_state.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_info is not None:
            result['AuditInfo'] = self.audit_info
        if self.audit_remark_info is not None:
            result['AuditRemarkInfo'] = self.audit_remark_info.to_map()
        if self.audit_state is not None:
            result['AuditState'] = self.audit_state.to_map()
        if self.business_type is not None:
            result['BusinessType'] = self.business_type
        if self.extend_message is not None:
            result['ExtendMessage'] = self.extend_message
        if self.file_ids is not None:
            result['FileIds'] = self.file_ids
        if self.file_url_list is not None:
            result['FileUrlList'] = self.file_url_list
        if self.gmt_create_str is not None:
            result['GmtCreateStr'] = self.gmt_create_str
        if self.id is not None:
            result['Id'] = self.id
        if self.order_id is not None:
            result['OrderId'] = self.order_id
        if self.partner_id is not None:
            result['PartnerId'] = self.partner_id
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.scene_type is not None:
            result['SceneType'] = self.scene_type
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.sign_type is not None:
            result['SignType'] = self.sign_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditInfo') is not None:
            self.audit_info = m.get('AuditInfo')
        if m.get('AuditRemarkInfo') is not None:
            temp_model = QueryWorkOrdAuditListNewResponseBodyListParamAuditRemarkInfo()
            self.audit_remark_info = temp_model.from_map(m['AuditRemarkInfo'])
        if m.get('AuditState') is not None:
            temp_model = QueryWorkOrdAuditListNewResponseBodyListParamAuditState()
            self.audit_state = temp_model.from_map(m['AuditState'])
        if m.get('BusinessType') is not None:
            self.business_type = m.get('BusinessType')
        if m.get('ExtendMessage') is not None:
            self.extend_message = m.get('ExtendMessage')
        if m.get('FileIds') is not None:
            self.file_ids = m.get('FileIds')
        if m.get('FileUrlList') is not None:
            self.file_url_list = m.get('FileUrlList')
        if m.get('GmtCreateStr') is not None:
            self.gmt_create_str = m.get('GmtCreateStr')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OrderId') is not None:
            self.order_id = m.get('OrderId')
        if m.get('PartnerId') is not None:
            self.partner_id = m.get('PartnerId')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('SceneType') is not None:
            self.scene_type = m.get('SceneType')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('SignType') is not None:
            self.sign_type = m.get('SignType')
        return self


class QueryWorkOrdAuditListNewResponseBodyList(TeaModel):
    def __init__(
        self,
        audit_remark: str = None,
        audit_result: str = None,
        biz_type: str = None,
        create_date: str = None,
        ord_id: str = None,
        ord_status: str = None,
        param: QueryWorkOrdAuditListNewResponseBodyListParam = None,
    ):
        self.audit_remark = audit_remark
        self.audit_result = audit_result
        self.biz_type = biz_type
        self.create_date = create_date
        self.ord_id = ord_id
        self.ord_status = ord_status
        self.param = param

    def validate(self):
        if self.param:
            self.param.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.audit_remark is not None:
            result['AuditRemark'] = self.audit_remark
        if self.audit_result is not None:
            result['AuditResult'] = self.audit_result
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.create_date is not None:
            result['CreateDate'] = self.create_date
        if self.ord_id is not None:
            result['OrdId'] = self.ord_id
        if self.ord_status is not None:
            result['OrdStatus'] = self.ord_status
        if self.param is not None:
            result['Param'] = self.param.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuditRemark') is not None:
            self.audit_remark = m.get('AuditRemark')
        if m.get('AuditResult') is not None:
            self.audit_result = m.get('AuditResult')
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('CreateDate') is not None:
            self.create_date = m.get('CreateDate')
        if m.get('OrdId') is not None:
            self.ord_id = m.get('OrdId')
        if m.get('OrdStatus') is not None:
            self.ord_status = m.get('OrdStatus')
        if m.get('Param') is not None:
            temp_model = QueryWorkOrdAuditListNewResponseBodyListParam()
            self.param = temp_model.from_map(m['Param'])
        return self


class QueryWorkOrdAuditListNewResponseBody(TeaModel):
    def __init__(
        self,
        list: List[QueryWorkOrdAuditListNewResponseBodyList] = None,
        page_no: int = None,
        page_size: int = None,
        request_id: str = None,
        total: int = None,
    ):
        self.list = list
        self.page_no = page_no
        self.page_size = page_size
        self.request_id = request_id
        self.total = total

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_no is not None:
            result['PageNo'] = self.page_no
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.total is not None:
            result['Total'] = self.total
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = QueryWorkOrdAuditListNewResponseBodyList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNo') is not None:
            self.page_no = m.get('PageNo')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Total') is not None:
            self.total = m.get('Total')
        return self


class QueryWorkOrdAuditListNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: QueryWorkOrdAuditListNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = QueryWorkOrdAuditListNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveContactsNewRequest(TeaModel):
    def __init__(
        self,
        email: str = None,
        id: int = None,
        name: str = None,
        open_pkg_warning: int = None,
        open_prevent_brush_warning: int = None,
        open_send_warning: int = None,
        owner_id: int = None,
        phone: str = None,
        prod_code: str = None,
        receive_sign_template_audit_result: int = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        verification_code: str = None,
    ):
        self.email = email
        self.id = id
        self.name = name
        self.open_pkg_warning = open_pkg_warning
        self.open_prevent_brush_warning = open_prevent_brush_warning
        self.open_send_warning = open_send_warning
        self.owner_id = owner_id
        self.phone = phone
        self.prod_code = prod_code
        self.receive_sign_template_audit_result = receive_sign_template_audit_result
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.verification_code = verification_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.email is not None:
            result['Email'] = self.email
        if self.id is not None:
            result['Id'] = self.id
        if self.name is not None:
            result['Name'] = self.name
        if self.open_pkg_warning is not None:
            result['OpenPkgWarning'] = self.open_pkg_warning
        if self.open_prevent_brush_warning is not None:
            result['OpenPreventBrushWarning'] = self.open_prevent_brush_warning
        if self.open_send_warning is not None:
            result['OpenSendWarning'] = self.open_send_warning
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.receive_sign_template_audit_result is not None:
            result['ReceiveSignTemplateAuditResult'] = self.receive_sign_template_audit_result
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.verification_code is not None:
            result['VerificationCode'] = self.verification_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('OpenPkgWarning') is not None:
            self.open_pkg_warning = m.get('OpenPkgWarning')
        if m.get('OpenPreventBrushWarning') is not None:
            self.open_prevent_brush_warning = m.get('OpenPreventBrushWarning')
        if m.get('OpenSendWarning') is not None:
            self.open_send_warning = m.get('OpenSendWarning')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ReceiveSignTemplateAuditResult') is not None:
            self.receive_sign_template_audit_result = m.get('ReceiveSignTemplateAuditResult')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('VerificationCode') is not None:
            self.verification_code = m.get('VerificationCode')
        return self


class SaveContactsNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class SaveContactsNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SaveContactsNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveContactsNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveLearningStatusNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        type: str = None,
        value: str = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.type = type
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.type is not None:
            result['Type'] = self.type
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class SaveLearningStatusNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class SaveLearningStatusNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SaveLearningStatusNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SaveLearningStatusNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SelectTagResourceRequest(TeaModel):
    def __init__(
        self,
        next_token: str = None,
        owner_id: int = None,
        page_size: int = None,
        prod_code: str = None,
        region_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        resource_type: str = None,
        tag_key: str = None,
        tag_value: str = None,
        type: str = None,
    ):
        self.next_token = next_token
        self.owner_id = owner_id
        self.page_size = page_size
        self.prod_code = prod_code
        self.region_id = region_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.resource_type = resource_type
        self.tag_key = tag_key
        self.tag_value = tag_value
        # This parameter is required.
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class SelectTagResourceResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class SelectTagResourceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SelectTagResourceResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SelectTagResourceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SelectTagResourceNewRequest(TeaModel):
    def __init__(
        self,
        next_token: str = None,
        owner_id: int = None,
        page_size: int = None,
        prod_code: str = None,
        region_id: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        resource_type: str = None,
        tag_key: str = None,
        tag_value: str = None,
        type: str = None,
    ):
        self.next_token = next_token
        self.owner_id = owner_id
        self.page_size = page_size
        self.prod_code = prod_code
        self.region_id = region_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.resource_type = resource_type
        self.tag_key = tag_key
        self.tag_value = tag_value
        # This parameter is required.
        self.type = type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_value is not None:
            result['TagValue'] = self.tag_value
        if self.type is not None:
            result['Type'] = self.type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagValue') is not None:
            self.tag_value = m.get('TagValue')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        return self


class SelectTagResourceNewResponseBodyTags(TeaModel):
    def __init__(
        self,
        tag: List[str] = None,
    ):
        self.tag = tag

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.tag is not None:
            result['Tag'] = self.tag
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Tag') is not None:
            self.tag = m.get('Tag')
        return self


class SelectTagResourceNewResponseBody(TeaModel):
    def __init__(
        self,
        next_token: str = None,
        request_id: str = None,
        tags: SelectTagResourceNewResponseBodyTags = None,
    ):
        self.next_token = next_token
        self.request_id = request_id
        self.tags = tags

    def validate(self):
        if self.tags:
            self.tags.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.next_token is not None:
            result['NextToken'] = self.next_token
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.tags is not None:
            result['Tags'] = self.tags.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NextToken') is not None:
            self.next_token = m.get('NextToken')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Tags') is not None:
            temp_model = SelectTagResourceNewResponseBodyTags()
            self.tags = temp_model.from_map(m['Tags'])
        return self


class SelectTagResourceNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SelectTagResourceNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SelectTagResourceNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SendSmsTestRequest(TeaModel):
    def __init__(
        self,
        nc_token: str = None,
        owner_id: int = None,
        phone_number: str = None,
        prod_code: str = None,
        remote_ip: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        session_id: str = None,
        sig: str = None,
        sign_name: str = None,
        template_code: str = None,
        template_param: str = None,
        test_type: str = None,
    ):
        self.nc_token = nc_token
        self.owner_id = owner_id
        # This parameter is required.
        self.phone_number = phone_number
        self.prod_code = prod_code
        self.remote_ip = remote_ip
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.session_id = session_id
        self.sig = sig
        self.sign_name = sign_name
        self.template_code = template_code
        self.template_param = template_param
        self.test_type = test_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.nc_token is not None:
            result['NcToken'] = self.nc_token
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.remote_ip is not None:
            result['RemoteIp'] = self.remote_ip
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.session_id is not None:
            result['SessionId'] = self.session_id
        if self.sig is not None:
            result['Sig'] = self.sig
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_param is not None:
            result['TemplateParam'] = self.template_param
        if self.test_type is not None:
            result['TestType'] = self.test_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NcToken') is not None:
            self.nc_token = m.get('NcToken')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('RemoteIp') is not None:
            self.remote_ip = m.get('RemoteIp')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SessionId') is not None:
            self.session_id = m.get('SessionId')
        if m.get('Sig') is not None:
            self.sig = m.get('Sig')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateParam') is not None:
            self.template_param = m.get('TemplateParam')
        if m.get('TestType') is not None:
            self.test_type = m.get('TestType')
        return self


class SendSmsTestResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class SendSmsTestResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SendSmsTestResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SendSmsTestResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SendSmsTestNewRequest(TeaModel):
    def __init__(
        self,
        nc_token: str = None,
        owner_id: int = None,
        phone_number: str = None,
        prod_code: str = None,
        remote_ip: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        session_id: str = None,
        sig: str = None,
        sign_name: str = None,
        template_code: str = None,
        template_param: str = None,
        test_type: str = None,
    ):
        self.nc_token = nc_token
        self.owner_id = owner_id
        # This parameter is required.
        self.phone_number = phone_number
        self.prod_code = prod_code
        self.remote_ip = remote_ip
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.session_id = session_id
        self.sig = sig
        self.sign_name = sign_name
        self.template_code = template_code
        self.template_param = template_param
        self.test_type = test_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.nc_token is not None:
            result['NcToken'] = self.nc_token
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.remote_ip is not None:
            result['RemoteIp'] = self.remote_ip
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.session_id is not None:
            result['SessionId'] = self.session_id
        if self.sig is not None:
            result['Sig'] = self.sig
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_param is not None:
            result['TemplateParam'] = self.template_param
        if self.test_type is not None:
            result['TestType'] = self.test_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NcToken') is not None:
            self.nc_token = m.get('NcToken')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('RemoteIp') is not None:
            self.remote_ip = m.get('RemoteIp')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SessionId') is not None:
            self.session_id = m.get('SessionId')
        if m.get('Sig') is not None:
            self.sig = m.get('Sig')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateParam') is not None:
            self.template_param = m.get('TemplateParam')
        if m.get('TestType') is not None:
            self.test_type = m.get('TestType')
        return self


class SendSmsTestNewResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        msg: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.msg = msg
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.msg is not None:
            result['Msg'] = self.msg
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Msg') is not None:
            self.msg = m.get('Msg')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class SendSmsTestNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SendSmsTestNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SendSmsTestNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SendVerificationRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        target: str = None,
        verify_type: str = None,
    ):
        # This parameter is required.
        self.biz_type = biz_type
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.target = target
        # This parameter is required.
        self.verify_type = verify_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.target is not None:
            result['Target'] = self.target
        if self.verify_type is not None:
            result['VerifyType'] = self.verify_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('Target') is not None:
            self.target = m.get('Target')
        if m.get('VerifyType') is not None:
            self.verify_type = m.get('VerifyType')
        return self


class SendVerificationResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        code: str = None,
        data: str = None,
    ):
        self.request_id = request_id
        self.code = code
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.code is not None:
            result['code'] = self.code
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('code') is not None:
            self.code = m.get('code')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class SendVerificationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SendVerificationResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SendVerificationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SendVerificationNewRequest(TeaModel):
    def __init__(
        self,
        biz_type: str = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        target: str = None,
        verify_type: str = None,
    ):
        # This parameter is required.
        self.biz_type = biz_type
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.target = target
        # This parameter is required.
        self.verify_type = verify_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.biz_type is not None:
            result['BizType'] = self.biz_type
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.target is not None:
            result['Target'] = self.target
        if self.verify_type is not None:
            result['VerifyType'] = self.verify_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BizType') is not None:
            self.biz_type = m.get('BizType')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('Target') is not None:
            self.target = m.get('Target')
        if m.get('VerifyType') is not None:
            self.verify_type = m.get('VerifyType')
        return self


class SendVerificationNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class SendVerificationNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: SendVerificationNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = SendVerificationNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TagResourcesRequestTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class TagResourcesRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        region_id: str = None,
        resource_id: List[str] = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        resource_type: str = None,
        tag: List[TagResourcesRequestTag] = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        # This parameter is required.
        self.region_id = region_id
        # This parameter is required.
        self.resource_id = resource_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.resource_type = resource_type
        # This parameter is required.
        self.tag = tag

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = TagResourcesRequestTag()
                self.tag.append(temp_model.from_map(k))
        return self


class TagResourcesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class TagResourcesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TagResourcesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TagResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TagResourcesNewRequestTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class TagResourcesNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        region_id: str = None,
        resource_id: List[str] = None,
        resource_id_list_string: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        resource_type: str = None,
        tag: List[TagResourcesNewRequestTag] = None,
        tag_list_string: str = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        # This parameter is required.
        self.region_id = region_id
        self.resource_id = resource_id
        self.resource_id_list_string = resource_id_list_string
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.resource_type = resource_type
        self.tag = tag
        self.tag_list_string = tag_list_string

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_id_list_string is not None:
            result['ResourceIdListString'] = self.resource_id_list_string
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        if self.tag_list_string is not None:
            result['TagListString'] = self.tag_list_string
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceIdListString') is not None:
            self.resource_id_list_string = m.get('ResourceIdListString')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = TagResourcesNewRequestTag()
                self.tag.append(temp_model.from_map(k))
        if m.get('TagListString') is not None:
            self.tag_list_string = m.get('TagListString')
        return self


class TagResourcesNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class TagResourcesNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TagResourcesNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TagResourcesNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TagResourcesSystemTagsRequestTag(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class TagResourcesSystemTagsRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        region_id: str = None,
        resource_id: List[str] = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        resource_type: str = None,
        scope: str = None,
        tag: List[TagResourcesSystemTagsRequestTag] = None,
        tag_owner_uid: int = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        # This parameter is required.
        self.region_id = region_id
        # This parameter is required.
        self.resource_id = resource_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.resource_type = resource_type
        self.scope = scope
        # This parameter is required.
        self.tag = tag
        # This parameter is required.
        self.tag_owner_uid = tag_owner_uid

    def validate(self):
        if self.tag:
            for k in self.tag:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.scope is not None:
            result['Scope'] = self.scope
        result['Tag'] = []
        if self.tag is not None:
            for k in self.tag:
                result['Tag'].append(k.to_map() if k else None)
        if self.tag_owner_uid is not None:
            result['TagOwnerUid'] = self.tag_owner_uid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('Scope') is not None:
            self.scope = m.get('Scope')
        self.tag = []
        if m.get('Tag') is not None:
            for k in m.get('Tag'):
                temp_model = TagResourcesSystemTagsRequestTag()
                self.tag.append(temp_model.from_map(k))
        if m.get('TagOwnerUid') is not None:
            self.tag_owner_uid = m.get('TagOwnerUid')
        return self


class TagResourcesSystemTagsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class TagResourcesSystemTagsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: TagResourcesSystemTagsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = TagResourcesSystemTagsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UntagResourcesRequestTags(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class UntagResourcesRequest(TeaModel):
    def __init__(
        self,
        all: bool = None,
        owner_id: int = None,
        prod_code: str = None,
        region_id: str = None,
        resource_id: List[str] = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        resource_type: str = None,
        tags: List[UntagResourcesRequestTags] = None,
    ):
        self.all = all
        self.owner_id = owner_id
        self.prod_code = prod_code
        # This parameter is required.
        self.region_id = region_id
        # This parameter is required.
        self.resource_id = resource_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.resource_type = resource_type
        self.tags = tags

    def validate(self):
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = UntagResourcesRequestTags()
                self.tags.append(temp_model.from_map(k))
        return self


class UntagResourcesResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UntagResourcesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UntagResourcesResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UntagResourcesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UntagResourcesNewRequestTags(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class UntagResourcesNewRequest(TeaModel):
    def __init__(
        self,
        all: bool = None,
        owner_id: int = None,
        prod_code: str = None,
        region_id: str = None,
        resource_id: List[str] = None,
        resource_id_list_string: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        resource_type: str = None,
        tag_list_string: str = None,
        tags: List[UntagResourcesNewRequestTags] = None,
    ):
        self.all = all
        self.owner_id = owner_id
        self.prod_code = prod_code
        # This parameter is required.
        self.region_id = region_id
        self.resource_id = resource_id
        self.resource_id_list_string = resource_id_list_string
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.resource_type = resource_type
        self.tag_list_string = tag_list_string
        self.tags = tags

    def validate(self):
        if self.tags:
            for k in self.tags:
                if k:
                    k.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_id_list_string is not None:
            result['ResourceIdListString'] = self.resource_id_list_string
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_list_string is not None:
            result['TagListString'] = self.tag_list_string
        result['Tags'] = []
        if self.tags is not None:
            for k in self.tags:
                result['Tags'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceIdListString') is not None:
            self.resource_id_list_string = m.get('ResourceIdListString')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagListString') is not None:
            self.tag_list_string = m.get('TagListString')
        self.tags = []
        if m.get('Tags') is not None:
            for k in m.get('Tags'):
                temp_model = UntagResourcesNewRequestTags()
                self.tags.append(temp_model.from_map(k))
        return self


class UntagResourcesNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: bool = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class UntagResourcesNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UntagResourcesNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UntagResourcesNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UntagResourcesSystemTagsRequest(TeaModel):
    def __init__(
        self,
        all: bool = None,
        owner_id: int = None,
        prod_code: str = None,
        region_id: str = None,
        resource_id: List[str] = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        resource_type: str = None,
        tag_key: List[str] = None,
        tag_owner_uid: int = None,
    ):
        self.all = all
        self.owner_id = owner_id
        self.prod_code = prod_code
        # This parameter is required.
        self.region_id = region_id
        # This parameter is required.
        self.resource_id = resource_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.resource_type = resource_type
        self.tag_key = tag_key
        # This parameter is required.
        self.tag_owner_uid = tag_owner_uid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.all is not None:
            result['All'] = self.all
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.region_id is not None:
            result['RegionId'] = self.region_id
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.tag_key is not None:
            result['TagKey'] = self.tag_key
        if self.tag_owner_uid is not None:
            result['TagOwnerUid'] = self.tag_owner_uid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('RegionId') is not None:
            self.region_id = m.get('RegionId')
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TagKey') is not None:
            self.tag_key = m.get('TagKey')
        if m.get('TagOwnerUid') is not None:
            self.tag_owner_uid = m.get('TagOwnerUid')
        return self


class UntagResourcesSystemTagsResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        request_id: str = None,
    ):
        self.code = code
        self.data = data
        self.request_id = request_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        return self


class UntagResourcesSystemTagsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UntagResourcesSystemTagsResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UntagResourcesSystemTagsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateIpWhiteListNewRequest(TeaModel):
    def __init__(
        self,
        feature_code: int = None,
        ip_white_list: str = None,
        owner_id: int = None,
        prod_code: str = None,
        real_name_ins_id: int = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        user_name: str = None,
    ):
        # This parameter is required.
        self.feature_code = feature_code
        # This parameter is required.
        self.ip_white_list = ip_white_list
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.real_name_ins_id = real_name_ins_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.feature_code is not None:
            result['FeatureCode'] = self.feature_code
        if self.ip_white_list is not None:
            result['IpWhiteList'] = self.ip_white_list
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.real_name_ins_id is not None:
            result['RealNameInsId'] = self.real_name_ins_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FeatureCode') is not None:
            self.feature_code = m.get('FeatureCode')
        if m.get('IpWhiteList') is not None:
            self.ip_white_list = m.get('IpWhiteList')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('RealNameInsId') is not None:
            self.real_name_ins_id = m.get('RealNameInsId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class UpdateIpWhiteListNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class UpdateIpWhiteListNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateIpWhiteListNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateIpWhiteListNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdatePartnerTemplateNewRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        template_code: str = None,
        template_name: str = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.template_code = template_code
        self.template_name = template_name

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.template_name is not None:
            result['TemplateName'] = self.template_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('TemplateName') is not None:
            self.template_name = m.get('TemplateName')
        return self


class UpdatePartnerTemplateNewResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        result: str = None,
    ):
        self.request_id = request_id
        self.result = result

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.result is not None:
            result['Result'] = self.result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Result') is not None:
            self.result = m.get('Result')
        return self


class UpdatePartnerTemplateNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdatePartnerTemplateNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdatePartnerTemplateNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UpdateSlsStatusNewRequest(TeaModel):
    def __init__(
        self,
        auth_status: bool = None,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        save_time: int = None,
    ):
        self.auth_status = auth_status
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.save_time = save_time

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.auth_status is not None:
            result['AuthStatus'] = self.auth_status
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.save_time is not None:
            result['SaveTime'] = self.save_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuthStatus') is not None:
            self.auth_status = m.get('AuthStatus')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('SaveTime') is not None:
            self.save_time = m.get('SaveTime')
        return self


class UpdateSlsStatusNewResponseBody(TeaModel):
    def __init__(
        self,
        authorize_status: bool = None,
        open_status: bool = None,
        prod_code: str = None,
        request_id: str = None,
        save_time: int = None,
        uid: str = None,
    ):
        self.authorize_status = authorize_status
        self.open_status = open_status
        self.prod_code = prod_code
        self.request_id = request_id
        self.save_time = save_time
        self.uid = uid

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.authorize_status is not None:
            result['AuthorizeStatus'] = self.authorize_status
        if self.open_status is not None:
            result['OpenStatus'] = self.open_status
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.save_time is not None:
            result['SaveTime'] = self.save_time
        if self.uid is not None:
            result['Uid'] = self.uid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AuthorizeStatus') is not None:
            self.authorize_status = m.get('AuthorizeStatus')
        if m.get('OpenStatus') is not None:
            self.open_status = m.get('OpenStatus')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('SaveTime') is not None:
            self.save_time = m.get('SaveTime')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        return self


class UpdateSlsStatusNewResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UpdateSlsStatusNewResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UpdateSlsStatusNewResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UploadCardResRequest(TeaModel):
    def __init__(
        self,
        caller_parent_id: str = None,
        caller_type: str = None,
        caller_uid: str = None,
        extend_info: str = None,
        file_size: int = None,
        file_url: str = None,
        memo: str = None,
        owner_id: int = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        resource_type: str = None,
    ):
        self.caller_parent_id = caller_parent_id
        self.caller_type = caller_type
        self.caller_uid = caller_uid
        self.extend_info = extend_info
        self.file_size = file_size
        self.file_url = file_url
        self.memo = memo
        self.owner_id = owner_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.resource_type = resource_type

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.caller_parent_id is not None:
            result['CallerParentId'] = self.caller_parent_id
        if self.caller_type is not None:
            result['CallerType'] = self.caller_type
        if self.caller_uid is not None:
            result['CallerUid'] = self.caller_uid
        if self.extend_info is not None:
            result['ExtendInfo'] = self.extend_info
        if self.file_size is not None:
            result['FileSize'] = self.file_size
        if self.file_url is not None:
            result['FileUrl'] = self.file_url
        if self.memo is not None:
            result['Memo'] = self.memo
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallerParentId') is not None:
            self.caller_parent_id = m.get('CallerParentId')
        if m.get('CallerType') is not None:
            self.caller_type = m.get('CallerType')
        if m.get('CallerUid') is not None:
            self.caller_uid = m.get('CallerUid')
        if m.get('ExtendInfo') is not None:
            self.extend_info = m.get('ExtendInfo')
        if m.get('FileSize') is not None:
            self.file_size = m.get('FileSize')
        if m.get('FileUrl') is not None:
            self.file_url = m.get('FileUrl')
        if m.get('Memo') is not None:
            self.memo = m.get('Memo')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        return self


class UploadCardResResponseBodyModel(TeaModel):
    def __init__(
        self,
        resource_id: str = None,
    ):
        self.resource_id = resource_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        return self


class UploadCardResResponseBody(TeaModel):
    def __init__(
        self,
        access_denied_detail: str = None,
        code: str = None,
        message: str = None,
        model: UploadCardResResponseBodyModel = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.access_denied_detail = access_denied_detail
        self.code = code
        self.message = message
        self.model = model
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.model:
            self.model.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_denied_detail is not None:
            result['AccessDeniedDetail'] = self.access_denied_detail
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.model is not None:
            result['Model'] = self.model.to_map()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessDeniedDetail') is not None:
            self.access_denied_detail = m.get('AccessDeniedDetail')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Model') is not None:
            temp_model = UploadCardResResponseBodyModel()
            self.model = temp_model.from_map(m['Model'])
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UploadCardResResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UploadCardResResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UploadCardResResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class UploadCardResWithDyncParamRequest(TeaModel):
    def __init__(
        self,
        dynamic_param: str = None,
        expired_times: int = None,
        file_size: int = None,
        file_url: str = None,
        memo: str = None,
        owner_id: int = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        resource_type: str = None,
        template_code: str = None,
    ):
        self.dynamic_param = dynamic_param
        self.expired_times = expired_times
        self.file_size = file_size
        self.file_url = file_url
        self.memo = memo
        self.owner_id = owner_id
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        self.resource_type = resource_type
        self.template_code = template_code

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.dynamic_param is not None:
            result['DynamicParam'] = self.dynamic_param
        if self.expired_times is not None:
            result['ExpiredTimes'] = self.expired_times
        if self.file_size is not None:
            result['FileSize'] = self.file_size
        if self.file_url is not None:
            result['FileUrl'] = self.file_url
        if self.memo is not None:
            result['Memo'] = self.memo
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.resource_type is not None:
            result['ResourceType'] = self.resource_type
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DynamicParam') is not None:
            self.dynamic_param = m.get('DynamicParam')
        if m.get('ExpiredTimes') is not None:
            self.expired_times = m.get('ExpiredTimes')
        if m.get('FileSize') is not None:
            self.file_size = m.get('FileSize')
        if m.get('FileUrl') is not None:
            self.file_url = m.get('FileUrl')
        if m.get('Memo') is not None:
            self.memo = m.get('Memo')
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('ResourceType') is not None:
            self.resource_type = m.get('ResourceType')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        return self


class UploadCardResWithDyncParamResponseBodyData(TeaModel):
    def __init__(
        self,
        resource_id: int = None,
    ):
        self.resource_id = resource_id

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.resource_id is not None:
            result['ResourceId'] = self.resource_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ResourceId') is not None:
            self.resource_id = m.get('ResourceId')
        return self


class UploadCardResWithDyncParamResponseBody(TeaModel):
    def __init__(
        self,
        access_denied_detail: str = None,
        code: str = None,
        data: UploadCardResWithDyncParamResponseBodyData = None,
        message: str = None,
        request_id: str = None,
        success: bool = None,
    ):
        self.access_denied_detail = access_denied_detail
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.access_denied_detail is not None:
            result['AccessDeniedDetail'] = self.access_denied_detail
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AccessDeniedDetail') is not None:
            self.access_denied_detail = m.get('AccessDeniedDetail')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            temp_model = UploadCardResWithDyncParamResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class UploadCardResWithDyncParamResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: UploadCardResWithDyncParamResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = UploadCardResWithDyncParamResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ValidatYunSmsIdRequest(TeaModel):
    def __init__(
        self,
        owner_id: int = None,
        prod_code: str = None,
        resource_owner_account: str = None,
        resource_owner_id: int = None,
        data: str = None,
    ):
        self.owner_id = owner_id
        self.prod_code = prod_code
        self.resource_owner_account = resource_owner_account
        self.resource_owner_id = resource_owner_id
        # This parameter is required.
        self.data = data

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.owner_id is not None:
            result['OwnerId'] = self.owner_id
        if self.prod_code is not None:
            result['ProdCode'] = self.prod_code
        if self.resource_owner_account is not None:
            result['ResourceOwnerAccount'] = self.resource_owner_account
        if self.resource_owner_id is not None:
            result['ResourceOwnerId'] = self.resource_owner_id
        if self.data is not None:
            result['data'] = self.data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OwnerId') is not None:
            self.owner_id = m.get('OwnerId')
        if m.get('ProdCode') is not None:
            self.prod_code = m.get('ProdCode')
        if m.get('ResourceOwnerAccount') is not None:
            self.resource_owner_account = m.get('ResourceOwnerAccount')
        if m.get('ResourceOwnerId') is not None:
            self.resource_owner_id = m.get('ResourceOwnerId')
        if m.get('data') is not None:
            self.data = m.get('data')
        return self


class ValidatYunSmsIdResponseBody(TeaModel):
    def __init__(
        self,
        code: str = None,
        data: str = None,
        message: str = None,
        request_id: str = None,
        success: str = None,
    ):
        self.code = code
        self.data = data
        self.message = message
        self.request_id = request_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.code is not None:
            result['Code'] = self.code
        if self.data is not None:
            result['Data'] = self.data
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Data') is not None:
            self.data = m.get('Data')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ValidatYunSmsIdResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        status_code: int = None,
        body: ValidatYunSmsIdResponseBody = None,
    ):
        self.headers = headers
        self.status_code = status_code
        self.body = body

    def validate(self):
        if self.body:
            self.body.validate()

    def to_map(self):
        _map = super().to_map()
        if _map is not None:
            return _map

        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.status_code is not None:
            result['statusCode'] = self.status_code
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('statusCode') is not None:
            self.status_code = m.get('statusCode')
        if m.get('body') is not None:
            temp_model = ValidatYunSmsIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


