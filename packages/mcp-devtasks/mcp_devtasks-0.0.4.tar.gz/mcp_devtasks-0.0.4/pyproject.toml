[project]
name = "mcp_devtasks"
version = "0.0.4"
authors = [{ name = "Austin Gregg-Smith", email = "blooop@gmail.com" }]
description = "A development tasks MCP server for automating install, build, lint, test, and CI commands."
readme = "README.md"
license = "MIT"

dependencies = [
  "fastmcp",
  "pyyaml"
]

[project.urls]
Source = "https://github.com/blooop/mcp_devtasks"
Home = "https://github.com/blooop/mcp_devtasks"

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64"]

[tool.pixi.dependencies]
python = ">=3.10"

[tool.pixi.feature.py310.dependencies]
python = "3.10.*"
[tool.pixi.feature.py311.dependencies]
python = "3.11.*"
[tool.pixi.feature.py312.dependencies]
python = "3.12.*"
[tool.pixi.feature.py313.dependencies]
python = "3.13.*"


[tool.pixi.pypi-dependencies]
mcp_devtasks = { path = ".", editable = true }

[project.optional-dependencies]
test = [
  "pylint>=3.2.5,<=3.3.7",
  "pytest-cov>=4.1,<=6.2.1",
  "pytest>=7.4,<=8.4.1",
  "hypothesis>=6.104.2,<=6.135.18",
  "ruff>=0.5.0,<=0.12.1",
  "coverage>=7.5.4,<=7.9.1",
  "pre-commit<=4.2.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build]
include = ["mcp_devtasks"]

# Environments
[tool.pixi.environments]
default = { features = ["test"], solve-group = "default" }
py310 = ["py310", "test"]
py311 = ["py311", "test"]
py312 = ["py312", "test"]
py313 = ["py313", "test"]


[tool.pixi.tasks]
pre-commit = "pre-commit run -a"
pre-commit-update = "pre-commit autoupdate"
format = "ruff format ."
check-clean-workspace = "git diff --exit-code"
ruff-lint = "ruff check . --fix"
pylint = "pylint --version && echo 'running pylint...' && pylint $(git ls-files '*.py')"
lint = { depends-on = ["ruff-lint", "pylint"] }
style = { depends-on = ["format", "lint"] }
commit-format = "git commit -a -m'autoformat code' || true"
test = "pytest"
coverage = "coverage run -m pytest && coverage xml -o coverage.xml"
coverage-report = "coverage report -m"
update-lock = "pixi update && git commit -a -m'update pixi.lock' || true"
push = "git push"
update-lock-push = { depends-on = ["update-lock", "push"] }
fix = { depends-on = ["update-lock", "format", "ruff-lint", "pre-commit"] }
fix-commit-push = { depends-on = ["fix", "commit-format", "update-lock-push"] }
ci-no-cover = { depends-on = ["style", "test"] }
ci = { depends-on = [
  "format",
  "ruff-lint",
  "pylint",
  "coverage",
  "coverage-report",
] }
ci-push = { depends-on = ["format", "ruff-lint", "update-lock", "ci", "push"] }
clear-pixi = "rm -rf .pixi pixi.lock"
setup-git-merge-driver = "git config merge.ourslock.driver true"
update-from-template-repo = "./scripts/update_from_template.sh"

[tool.pylint]
extension-pkg-whitelist = ["numpy"]
jobs = 16                           #detect number of cores

[tool.pylint.'MESSAGES CONTROL']
disable = "C,logging-fstring-interpolation,line-too-long,fixme,broad-exception-caught,missing-module-docstring,too-many-instance-attributes,too-few-public-methods,too-many-arguments,too-many-locals,too-many-branches,too-many-statements,use-dict-literal,cyclic-import,duplicate-code,too-many-public-methods"
enable = "no-else-return,consider-using-in"

[tool.coverage.run]
omit = ["*/test/*", "__init__.py"]

[tool.coverage.report]
exclude_also = [
  "def __repr__",
  "if False:",
  "if 0:",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "pass",
  "(_):",
]

[project.scripts]
mcp-devtasks = "mcp_devtasks.server:main"
