[project]
name            = "galaxy-update"
description     = "Update dependencies in requirements.yml"
readme          = "README.md"
license         = "MIT"
authors         = [{ name = "deadnews", email = "deadnewsgit@gmail.com" }]
classifiers     = ["Operating System :: OS Independent"]
keywords        = ["ansible", "galaxy", "ansible-galaxy ", "requirements"]
dynamic         = ["version"]
requires-python = ">=3.10"

dependencies = [
  "click>=8.1.7",
  "httpx>=0.28.0",
  "pyyaml>=6.0.2",
  "pyaml>=25.5.0",
]

[dependency-groups]
dev = [
  "mypy>=1.16.1",
  "pyright>=1.1.402",
  "ruff>=0.12.1",
  "types-pyyaml>=6.0.12.20240917",
  "pytest>=8.4.1",
  "pytest-cov>=6.2.1",
  "pytest-mock>=3.14.0",
]

[project.scripts]
galaxy-update = "galaxy_update.__main__:cli"

[project.urls]
Repository = "https://github.com/deadnews/galaxy-update"
Changelog  = "https://github.com/deadnews/galaxy-update/CHANGELOG.md"

[build-system]
requires      = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
vcs   = "git"
style = "semver"

[tool.ruff]
line-length        = 99
format.line-ending = "lf"

[tool.ruff.lint]
flake8-tidy-imports.ban-relative-imports = "all"
pycodestyle.max-doc-length               = 129
pycodestyle.max-line-length              = 129
pydocstyle.convention                    = "google"

select = ["ALL"]
ignore = [
  "COM812",  # Trailing comma missing
  "FBT001",  # Boolean positional arg in function definition
  "FBT002",  # Boolean default value in function definition
  "ISC001",  # Checks for implicitly concatenated strings on a single line
  "PLR0913", # Too many arguments to function call
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*"     = ["ANN", "D", "E501", "PLC1901", "PLR2004", "S"]

[tool.pytest.ini_options]
addopts   = "--verbose --cov=./src --cov-report=term --cov-report=xml"
testpaths = ["tests"]
markers   = ["online"]

[tool.coverage.report]
exclude_lines = [
  "# pragma: no cover",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.mypy]
disallow_untyped_defs  = true
follow_imports         = "normal"
ignore_missing_imports = true
show_column_numbers    = true
show_error_codes       = true
warn_unused_ignores    = true

[[tool.mypy.overrides]]
module                = ["tests.*"]
disallow_untyped_defs = false

[tool.pyright]
include          = ["src"]
ignore           = ["tests"]
typeCheckingMode = "standard"
