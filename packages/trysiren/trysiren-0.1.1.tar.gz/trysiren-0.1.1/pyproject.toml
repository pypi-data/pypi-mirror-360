[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "trysiren"
version = "0.1.1"
description = "Python SDK for the Siren Notification Platform."
readme = "README.md"
requires-python = ">=3.8"
license = { file = "LICENSE" }

classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License", # Must match the license field above
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

keywords = ["siren", "notifications", "api", "sdk", "ai", "messaging", "communication"]

dependencies = [
    "requests>=2.25.0", # HTTP client library
    "httpx>=0.26.0", # Async/sync HTTP client supporting both transports
    "pydantic[email]>=2.0,<3.0", # Data validation and settings management
]

[project.urls]
"Homepage" = "https://github.com/KeyValueSoftwareSystems/siren-py-sdk"
"Documentation" = "https://github.com/KeyValueSoftwareSystems/siren-py-sdk#readme"
"Repository" = "https://github.com/KeyValueSoftwareSystems/siren-py-sdk"
"Bug Tracker" = "https://github.com/KeyValueSoftwareSystems/siren-py-sdk/issues"

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov",      # For test coverage reports
    "pytest-mock",     # For mocking objects in tests
    "requests-mock",   # For mocking HTTP requests in tests
    "pytest-asyncio>=0.20",  # Async test support
    "respx>=0.21.0,<0.23",   # For mocking httpx in async tests
    "ruff",            # Linter, formatter, import sorter
    "pyright",         # Static type checker
    "pre-commit",      # For managing pre-commit hooks
    "uv",              # Explicitly list if desired, often installed globally
    "python-dotenv",   # For loading .env files
    "build>=0.10.0",
    "twine>=3.8.0",
]

# Specifies that the 'siren' package is in the project root.
[tool.setuptools.packages.find]
where = ["."]
include = ["siren*"]
exclude = ["tests*", "examples*"] # Exclude tests and examples from the wheel

# --- Tool Configurations ---

[tool.pytest.ini_options]
minversion = "6.0"
# Add -ra for detailed summary, -q for quieter output.
# --cov generates coverage reports for the 'siren' package.
addopts = "-ra -q --cov=siren --cov-report=term-missing --cov-report=xml"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.ruff]
exclude = [
    ".bzr", ".direnv", ".eggs", ".git", ".hg", ".mypy_cache", ".nox",
    ".pants.d", ".ruff_cache", ".svn", ".tox", ".venv", "__pypackages__",
    "_build", "buck-out", "build", "dist", "node_modules", "venv",
]
line-length = 88
indent-width = 4
target-version = "py38" # Match requires-python

[tool.ruff.lint]
# See https://docs.astral.sh/ruff/rules/ for all rules
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort (import sorting)
    "UP",  # pyupgrade
    "C90", # McCabe complexity
    "N",   # pep8-naming
    "D",   # pydocstyle
    # Consider adding more, e.g.: B (flake8-bugbear), A (flake8-builtins), SIM (flake8-simplify)
]
ignore = [
    "D203", # Conflicts with D211 (pydocstyle: One blank line required before class docstring)
    "D212", # Conflicts with D213 (pydocstyle: Multi-line docstring summary should start at the first line)
    # "D100", # Missing docstring in public module
    # "D104", # Missing docstring in public package
    "E501", # Line too long (handled by formatter)
]
fixable = ["ALL"]

[tool.ruff.lint.pydocstyle]
convention = "google" # Or "numpy", "pep257"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# Pyright configuration (static type checker)
[tool.pyright]
include = ["siren", "tests", "examples"]
exclude = [
    "**/__pycache__",
    ".venv",
    ".git",
    ".ruff_cache",
    # Add other typical cache/build directories if needed, e.g., "dist", "build"
]
reportMissingImports = true
# reportUnusedImport = true # Optional: to report unused imports
# pythonVersion = "3.8" # Usually inferred or can be set if specific behavior is needed
# pythonPlatform = "Linux" # Usually inferred
