import argparse
import json
import sqlite3
import webbrowser
from http.server import HTTPServer, SimpleHTTPRequestHandler
from pathlib import Path
from urllib.parse import parse_qs, urlparse

__version__ = "0.1.0"


def main() -> None:
    parser = argparse.ArgumentParser(prog="lamber_report")

    parser.add_argument(
        "db_file", type=Path, help="Sqlit3 db file generated by Lamber."
    )
    parser.add_argument(
        "--port", type=int, default=8000, help="HTTP serve port. (default: %(default)s)"
    )

    args = parser.parse_args()

    db_file: Path = args.db_file
    assert db_file, f"{db_file} does not exist!"

    connection = sqlite3.connect(db_file)
    connection.execute("PRAGMA foreign_keys = ON")
    connection.row_factory = lambda cursor, row: {
        key: value
        for key, value in zip([column[0] for column in cursor.description], row)
    }
    cursor = connection.cursor()

    class LamberHTTPRequestHandler(SimpleHTTPRequestHandler):
        def __init__(self, *args, **kwargs):
            super().__init__(
                *args, directory=str(Path(__file__).parent / "frontend"), **kwargs
            )

        def _set_json_headers(self):
            self.send_response(200)
            self.send_header("Content-type", "application/json")
            self.end_headers()

        def do_HEAD(self) -> None:
            self._set_json_headers()
            return super().do_HEAD()

        def do_GET(self) -> None:
            if self.path == "/api/projects":
                self._set_json_headers()

                cursor.execute(
                    """
                    SELECT
                        *
                    FROM
                        lamber_project

                    ORDER BY
                        last_run_time DESC;
                    """
                )
                return self.wfile.write(json.dumps(cursor.fetchall()).encode("utf-8"))

            elif self.path.startswith("/api/project/test_sessions"):
                self._set_json_headers()
                query_params = parse_qs(urlparse(self.path).query)
                project_id = query_params.get("project_id", [""])[0]

                cursor.execute(
                    """
                    SELECT
                        uuid,
                        start_time,
                        host_ip,
                        duration
                    FROM
                        lamber_session
                    WHERE
                        project_id = ?
                    ORDER BY
                        start_time DESC;
                    """,
                    (int(project_id),),
                )
                return self.wfile.write(json.dumps(cursor.fetchall()).encode("utf-8"))

            elif self.path.startswith("/api/test_session/environment"):
                self._set_json_headers()
                query_params = parse_qs(urlparse(self.path).query)
                test_session_id = query_params.get("test_session_id", [""])[0]

                cursor.execute(
                    """
                    SELECT
                        json (environment) AS environment
                    FROM
                        lamber_session
                    WHERE
                        uuid = ?;
                    """,
                    (test_session_id,),
                )
                return self.wfile.write(json.dumps(cursor.fetchone()).encode("utf-8"))

            elif self.path.startswith("/api/test_session/result_statistic"):
                self._set_json_headers()
                query_params = parse_qs(urlparse(self.path).query)
                test_session_id = query_params.get("test_session_id", [""])[0]

                ret: dict = {}

                cursor.execute(
                    """
                    SELECT
                        start_time,
                        stop_time,
                        duration
                    FROM
                        lamber_session
                    WHERE
                        uuid = ?;
                    """,
                    (test_session_id,),
                )
                ret.update(cursor.fetchone())

                cursor.execute(
                    """
                    SELECT
                        result,
                        COUNT(*) as count
                    FROM
                        lamber_testcase
                    WHERE
                        session_uuid = ?
                    GROUP BY
                        result
                    ORDER BY
                        count DESC;
                    """,
                    (test_session_id,),
                )
                ret.update({"statistics": cursor.fetchall()})

                return self.wfile.write(json.dumps(ret).encode("utf-8"))

            elif self.path.startswith("/api/test_session/testcases"):
                self._set_json_headers()
                query_params = parse_qs(urlparse(self.path).query)
                test_session_id = query_params.get("test_session_id", [""])[0]

                cursor.execute(
                    """
                    SELECT
                        uuid,
                        nodeid,
                        start_time,
                        json (marker) AS marker,
                        duration,
                        result,
                        json (result_detail) AS result_detail
                    FROM
                        lamber_testcase
                    WHERE
                        session_uuid = ?
                    ORDER BY
                        start_time IS NULL,
                        start_time ASC,
                        nodeid ASC;
                    """,
                    (test_session_id,),
                )
                return self.wfile.write(json.dumps(cursor.fetchall()).encode("utf-8"))

            elif self.path.startswith("/api/testcase/landing"):
                self._set_json_headers()
                query_params = parse_qs(urlparse(self.path).query)
                testcase_id = query_params.get("testcase_id", [""])[0]

                cursor.execute(
                    """
                    SELECT
                        uuid,
                        nodeid,
                        start_time,
                        stop_time,
                        json (marker) AS marker,
                        duration,
                        result
                    FROM
                        lamber_testcase
                    WHERE
                        uuid = ?;
                    """,
                    (testcase_id,),
                )
                return self.wfile.write(json.dumps(cursor.fetchone()).encode("utf-8"))

            elif self.path.startswith("/api/testcase/explorer"):
                self._set_json_headers()
                query_params = parse_qs(urlparse(self.path).query)
                testcase_id = query_params.get("testcase_id", [""])[0]

                ret: dict = {}

                cursor.execute(
                    """
                    SELECT
                        uuid,
                        json (result_detail) AS traceback
                    FROM
                        lamber_testcase
                    WHERE
                        uuid = ?;
                    """,
                    (testcase_id,),
                )
                ret.update(cursor.fetchone())

                cursor.execute(
                    """
                    SELECT
                        uuid AS key,
                        title,
                        when_,
                        scope,
                        result,
                        start_time,
                        stop_time,
                        duration
                    FROM
                        lamber_teststep
                    WHERE
                        testcase_uuid = ?
                    ORDER BY
                        start_time;
                    """,
                    (testcase_id,),
                )

                steps = cursor.fetchall()
                for step in steps:
                    _load_sub_steps(step, cursor)

                ret.update({"steps": steps})

                return self.wfile.write(json.dumps(ret).encode("utf-8"))

            elif self.path.startswith("/api/testcase/sourcecode"):
                self._set_json_headers()
                query_params = parse_qs(urlparse(self.path).query)
                testcase_id = query_params.get("testcase_id", [""])[0]

                cursor.execute(
                    """
                    SELECT
                        uuid,
                        sourcecode
                    FROM
                        lamber_testcase
                    WHERE
                        uuid = ?;
                    """,
                    (testcase_id,),
                )
                return self.wfile.write(json.dumps(cursor.fetchone()).encode("utf-8"))

            elif self.path.startswith("/api/testcase/histories"):
                self._set_json_headers()
                query_params = parse_qs(urlparse(self.path).query)
                testcase_id = query_params.get("testcase_id", [""])[0]

                cursor.execute(
                    """
                    SELECT
                        uuid,
                        nodeid,
                        start_time,
                        json(marker) AS marker,
                        duration,
                        result,
                        json(result_detail) AS result_detail
                    FROM
                        lamber_testcase
                    WHERE
                        nodeid = (
                            SELECT
                                nodeid
                            FROM
                                lamber_testcase
                            WHERE
                                uuid = ?
                        )
                        AND start_time < (
                            SELECT
                                start_time
                            FROM
                                lamber_testcase
                            WHERE
                                uuid = ?
                        )
                    ORDER BY
                        start_time DESC;
                    """,
                    (testcase_id, testcase_id),
                )
                return self.wfile.write(json.dumps(cursor.fetchall()).encode("utf-8"))

            elif self.path.startswith("/api/testcase/pytest_logs"):
                self._set_json_headers()
                query_params = parse_qs(urlparse(self.path).query)
                testcase_id = query_params.get("testcase_id", [""])[0]

                cursor.execute(
                    """
                    SELECT
                        uuid,
                        pytest_caplog AS caplog,
                        pytest_capstderr AS capstderr,
                        pytest_capstdout AS capstdout
                    FROM
                        lamber_testcase
                    WHERE
                        uuid = ?;
                    """,
                    (testcase_id,),
                )
                return self.wfile.write(json.dumps(cursor.fetchone()).encode("utf-8"))

            else:
                parsed_url = urlparse(self.path)
                if parsed_url.path in ("/project", "/test_session", "/testcase"):
                    self.path = parsed_url._replace(
                        path=parsed_url.path + ".html"
                    ).geturl()

                return super().do_GET()

    url = f"http://localhost:{args.port}"
    httpd = HTTPServer(("", args.port), LamberHTTPRequestHandler)
    try:
        print(f"Start http server on port {args.port} based on db file {db_file}")
        webbrowser.open(url)
        httpd.serve_forever()
    except webbrowser.Error:
        print(f"Open browser: {url}")
    except KeyboardInterrupt:
        pass
    finally:
        connection.close()


def _load_sub_steps(parent: dict, cursor: sqlite3.Cursor):
    cursor.execute(
        """
        SELECT
            uuid AS key,
            title,
            when_,
            scope,
            result,
            start_time,
            stop_time,
            duration
        FROM
            lamber_teststep
        WHERE
            parent_uuid = ?
        ORDER BY
            start_time;
        """,
        (parent["key"],),
    )
    children = cursor.fetchall()
    if children:
        parent["children"] = children
        for step in parent["children"]:
            _load_sub_steps(step, cursor)
