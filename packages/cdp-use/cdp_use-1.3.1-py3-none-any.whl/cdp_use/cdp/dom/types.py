# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP DOM Domain Types"""

from enum import Enum
from typing import Any, List
from typing_extensions import NotRequired, TypedDict

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..page.types import FrameId

"""Unique DOM node identifier."""
NodeId = int



"""Unique DOM node identifier used to reference a node that may not have been pushed to the
front-end."""
BackendNodeId = int



"""Backend node with a friendly name."""
class BackendNode(TypedDict):
    nodeType: "int"
    """`Node`'s nodeType."""
    nodeName: "str"
    """`Node`'s nodeName."""
    backendNodeId: "BackendNodeId"



"""Pseudo element type."""
class PseudoType(Enum):
    FIRST_LINE = "first-line"
    FIRST_LETTER = "first-letter"
    CHECKMARK = "checkmark"
    BEFORE = "before"
    AFTER = "after"
    PICKER_ICON = "picker-icon"
    MARKER = "marker"
    BACKDROP = "backdrop"
    COLUMN = "column"
    SELECTION = "selection"
    SEARCH_TEXT = "search-text"
    TARGET_TEXT = "target-text"
    SPELLING_ERROR = "spelling-error"
    GRAMMAR_ERROR = "grammar-error"
    HIGHLIGHT = "highlight"
    FIRST_LINE_INHERITED = "first-line-inherited"
    SCROLL_MARKER = "scroll-marker"
    SCROLL_MARKER_GROUP = "scroll-marker-group"
    SCROLL_BUTTON = "scroll-button"
    SCROLLBAR = "scrollbar"
    SCROLLBAR_THUMB = "scrollbar-thumb"
    SCROLLBAR_BUTTON = "scrollbar-button"
    SCROLLBAR_TRACK = "scrollbar-track"
    SCROLLBAR_TRACK_PIECE = "scrollbar-track-piece"
    SCROLLBAR_CORNER = "scrollbar-corner"
    RESIZER = "resizer"
    INPUT_LIST_BUTTON = "input-list-button"
    VIEW_TRANSITION = "view-transition"
    VIEW_TRANSITION_GROUP = "view-transition-group"
    VIEW_TRANSITION_IMAGE_PAIR = "view-transition-image-pair"
    VIEW_TRANSITION_GROUP_CHILDREN = "view-transition-group-children"
    VIEW_TRANSITION_OLD = "view-transition-old"
    VIEW_TRANSITION_NEW = "view-transition-new"
    PLACEHOLDER = "placeholder"
    FILE_SELECTOR_BUTTON = "file-selector-button"
    DETAILS_CONTENT = "details-content"
    PICKER = "picker"
    PERMISSION_ICON = "permission-icon"



"""Shadow root type."""
class ShadowRootType(Enum):
    USER_AGENT = "user-agent"
    OPEN = "open"
    CLOSED = "closed"



"""Document compatibility mode."""
class CompatibilityMode(Enum):
    QUIRKSMODE = "QuirksMode"
    LIMITEDQUIRKSMODE = "LimitedQuirksMode"
    NOQUIRKSMODE = "NoQuirksMode"



"""ContainerSelector physical axes"""
class PhysicalAxes(Enum):
    HORIZONTAL = "Horizontal"
    VERTICAL = "Vertical"
    BOTH = "Both"



"""ContainerSelector logical axes"""
class LogicalAxes(Enum):
    INLINE = "Inline"
    BLOCK = "Block"
    BOTH = "Both"



"""Physical scroll orientation"""
class ScrollOrientation(Enum):
    HORIZONTAL = "horizontal"
    VERTICAL = "vertical"



"""DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes.
DOMNode is a base node mirror type."""
class Node(TypedDict):
    nodeId: "NodeId"
    """Node identifier that is passed into the rest of the DOM messages as the `nodeId`. Backend
will only push node with given `id` once. It is aware of all requested nodes and will only
fire DOM events for nodes known to the client."""
    parentId: "NotRequired[NodeId]"
    """The id of the parent node if any."""
    backendNodeId: "BackendNodeId"
    """The BackendNodeId for this node."""
    nodeType: "int"
    """`Node`'s nodeType."""
    nodeName: "str"
    """`Node`'s nodeName."""
    localName: "str"
    """`Node`'s localName."""
    nodeValue: "str"
    """`Node`'s nodeValue."""
    childNodeCount: "NotRequired[int]"
    """Child count for `Container` nodes."""
    children: "NotRequired[List[Node]]"
    """Child nodes of this node when requested with children."""
    attributes: "NotRequired[List[str]]"
    """Attributes of the `Element` node in the form of flat array `[name1, value1, name2, value2]`."""
    documentURL: "NotRequired[str]"
    """Document URL that `Document` or `FrameOwner` node points to."""
    baseURL: "NotRequired[str]"
    """Base URL that `Document` or `FrameOwner` node uses for URL completion."""
    publicId: "NotRequired[str]"
    """`DocumentType`'s publicId."""
    systemId: "NotRequired[str]"
    """`DocumentType`'s systemId."""
    internalSubset: "NotRequired[str]"
    """`DocumentType`'s internalSubset."""
    xmlVersion: "NotRequired[str]"
    """`Document`'s XML version in case of XML documents."""
    name: "NotRequired[str]"
    """`Attr`'s name."""
    value: "NotRequired[str]"
    """`Attr`'s value."""
    pseudoType: "NotRequired[PseudoType]"
    """Pseudo element type for this node."""
    pseudoIdentifier: "NotRequired[str]"
    """Pseudo element identifier for this node. Only present if there is a
valid pseudoType."""
    shadowRootType: "NotRequired[ShadowRootType]"
    """Shadow root type."""
    frameId: "NotRequired[FrameId]"
    """Frame ID for frame owner elements."""
    contentDocument: "NotRequired[Node]"
    """Content document for frame owner elements."""
    shadowRoots: "NotRequired[List[Node]]"
    """Shadow root list for given element host."""
    templateContent: "NotRequired[Node]"
    """Content document fragment for template elements."""
    pseudoElements: "NotRequired[List[Node]]"
    """Pseudo elements associated with this node."""
    importedDocument: "NotRequired[Node]"
    """Deprecated, as the HTML Imports API has been removed (crbug.com/937746).
This property used to return the imported document for the HTMLImport links.
The property is always undefined now."""
    distributedNodes: "NotRequired[List[BackendNode]]"
    """Distributed nodes for given insertion point."""
    isSVG: "NotRequired[bool]"
    """Whether the node is SVG."""
    compatibilityMode: "NotRequired[CompatibilityMode]"
    assignedSlot: "NotRequired[BackendNode]"
    isScrollable: "NotRequired[bool]"



"""A structure to hold the top-level node of a detached tree and an array of its retained descendants."""
class DetachedElementInfo(TypedDict):
    treeNode: "Node"
    retainedNodeIds: "List[NodeId]"



"""A structure holding an RGBA color."""
class RGBA(TypedDict):
    r: "int"
    """The red component, in the [0-255] range."""
    g: "int"
    """The green component, in the [0-255] range."""
    b: "int"
    """The blue component, in the [0-255] range."""
    a: "NotRequired[float]"
    """The alpha component, in the [0-1] range (default: 1)."""



"""An array of quad vertices, x immediately followed by y for each point, points clock-wise."""
Quad = List[float]



"""Box model."""
class BoxModel(TypedDict):
    content: "Quad"
    """Content box"""
    padding: "Quad"
    """Padding box"""
    border: "Quad"
    """Border box"""
    margin: "Quad"
    """Margin box"""
    width: "int"
    """Node width"""
    height: "int"
    """Node height"""
    shapeOutside: "NotRequired[ShapeOutsideInfo]"
    """Shape outside coordinates"""



"""CSS Shape Outside details."""
class ShapeOutsideInfo(TypedDict):
    bounds: "Quad"
    """Shape bounds"""
    shape: "List[Any]"
    """Shape coordinate details"""
    marginShape: "List[Any]"
    """Margin shape bounds"""



"""Rectangle."""
class Rect(TypedDict):
    x: "float"
    """X coordinate"""
    y: "float"
    """Y coordinate"""
    width: "float"
    """Rectangle width"""
    height: "float"
    """Rectangle height"""



class CSSComputedStyleProperty(TypedDict):
    name: "str"
    """Computed style property name."""
    value: "str"
    """Computed style property value."""
