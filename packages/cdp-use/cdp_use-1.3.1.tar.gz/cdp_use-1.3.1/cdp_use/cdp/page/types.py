# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Page Domain Types"""

from enum import Enum
from typing import List
from typing_extensions import NotRequired, TypedDict

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..network.types import LoaderId
    from ..network.types import ResourceType
    from ..network.types import TimeSinceEpoch
    from ..runtime.types import ScriptId
    from ..runtime.types import UniqueDebuggerId

"""Unique frame identifier."""
FrameId = str



"""Indicates whether a frame has been identified as an ad."""
class AdFrameType(Enum):
    NONE = "none"
    CHILD = "child"
    ROOT = "root"



class AdFrameExplanation(Enum):
    PARENTISAD = "ParentIsAd"
    CREATEDBYADSCRIPT = "CreatedByAdScript"
    MATCHEDBLOCKINGRULE = "MatchedBlockingRule"



"""Indicates whether a frame has been identified as an ad and why."""
class AdFrameStatus(TypedDict):
    adFrameType: "AdFrameType"
    explanations: "NotRequired[List[AdFrameExplanation]]"



"""Identifies the script which caused a script or frame to be labelled as an
ad."""
class AdScriptId(TypedDict):
    scriptId: "ScriptId"
    """Script Id of the script which caused a script or frame to be labelled as
an ad."""
    debuggerId: "UniqueDebuggerId"
    """Id of scriptId's debugger."""



"""Encapsulates the script ancestry and the root script filterlist rule that
caused the frame to be labelled as an ad. Only created when `ancestryChain`
is not empty."""
class AdScriptAncestry(TypedDict):
    ancestryChain: "List[AdScriptId]"
    """A chain of `AdScriptId`s representing the ancestry of an ad script that
led to the creation of a frame. The chain is ordered from the script
itself (lower level) up to its root ancestor that was flagged by
filterlist."""
    rootScriptFilterlistRule: "NotRequired[str]"
    """The filterlist rule that caused the root (last) script in
`ancestryChain` to be ad-tagged. Only populated if the rule is
available."""



"""Indicates whether the frame is a secure context and why it is the case."""
class SecureContextType(Enum):
    SECURE = "Secure"
    SECURELOCALHOST = "SecureLocalhost"
    INSECURESCHEME = "InsecureScheme"
    INSECUREANCESTOR = "InsecureAncestor"



"""Indicates whether the frame is cross-origin isolated and why it is the case."""
class CrossOriginIsolatedContextType(Enum):
    ISOLATED = "Isolated"
    NOTISOLATED = "NotIsolated"
    NOTISOLATEDFEATUREDISABLED = "NotIsolatedFeatureDisabled"



class GatedAPIFeatures(Enum):
    SHAREDARRAYBUFFERS = "SharedArrayBuffers"
    SHAREDARRAYBUFFERSTRANSFERALLOWED = "SharedArrayBuffersTransferAllowed"
    PERFORMANCEMEASUREMEMORY = "PerformanceMeasureMemory"
    PERFORMANCEPROFILE = "PerformanceProfile"



"""All Permissions Policy features. This enum should match the one defined
in services/network/public/cpp/permissions_policy/permissions_policy_features.json5.
LINT.IfChange(PermissionsPolicyFeature)"""
class PermissionsPolicyFeature(Enum):
    ACCELEROMETER = "accelerometer"
    ALL_SCREENS_CAPTURE = "all-screens-capture"
    AMBIENT_LIGHT_SENSOR = "ambient-light-sensor"
    ATTRIBUTION_REPORTING = "attribution-reporting"
    AUTOPLAY = "autoplay"
    BLUETOOTH = "bluetooth"
    BROWSING_TOPICS = "browsing-topics"
    CAMERA = "camera"
    CAPTURED_SURFACE_CONTROL = "captured-surface-control"
    CH_DPR = "ch-dpr"
    CH_DEVICE_MEMORY = "ch-device-memory"
    CH_DOWNLINK = "ch-downlink"
    CH_ECT = "ch-ect"
    CH_PREFERS_COLOR_SCHEME = "ch-prefers-color-scheme"
    CH_PREFERS_REDUCED_MOTION = "ch-prefers-reduced-motion"
    CH_PREFERS_REDUCED_TRANSPARENCY = "ch-prefers-reduced-transparency"
    CH_RTT = "ch-rtt"
    CH_SAVE_DATA = "ch-save-data"
    CH_UA = "ch-ua"
    CH_UA_ARCH = "ch-ua-arch"
    CH_UA_BITNESS = "ch-ua-bitness"
    CH_UA_HIGH_ENTROPY_VALUES = "ch-ua-high-entropy-values"
    CH_UA_PLATFORM = "ch-ua-platform"
    CH_UA_MODEL = "ch-ua-model"
    CH_UA_MOBILE = "ch-ua-mobile"
    CH_UA_FORM_FACTORS = "ch-ua-form-factors"
    CH_UA_FULL_VERSION = "ch-ua-full-version"
    CH_UA_FULL_VERSION_LIST = "ch-ua-full-version-list"
    CH_UA_PLATFORM_VERSION = "ch-ua-platform-version"
    CH_UA_WOW64 = "ch-ua-wow64"
    CH_VIEWPORT_HEIGHT = "ch-viewport-height"
    CH_VIEWPORT_WIDTH = "ch-viewport-width"
    CH_WIDTH = "ch-width"
    CLIPBOARD_READ = "clipboard-read"
    CLIPBOARD_WRITE = "clipboard-write"
    COMPUTE_PRESSURE = "compute-pressure"
    CONTROLLED_FRAME = "controlled-frame"
    CROSS_ORIGIN_ISOLATED = "cross-origin-isolated"
    DEFERRED_FETCH = "deferred-fetch"
    DEFERRED_FETCH_MINIMAL = "deferred-fetch-minimal"
    DEVICE_ATTRIBUTES = "device-attributes"
    DIGITAL_CREDENTIALS_GET = "digital-credentials-get"
    DIRECT_SOCKETS = "direct-sockets"
    DIRECT_SOCKETS_PRIVATE = "direct-sockets-private"
    DISPLAY_CAPTURE = "display-capture"
    DOCUMENT_DOMAIN = "document-domain"
    ENCRYPTED_MEDIA = "encrypted-media"
    EXECUTION_WHILE_OUT_OF_VIEWPORT = "execution-while-out-of-viewport"
    EXECUTION_WHILE_NOT_RENDERED = "execution-while-not-rendered"
    FENCED_UNPARTITIONED_STORAGE_READ = "fenced-unpartitioned-storage-read"
    FOCUS_WITHOUT_USER_ACTIVATION = "focus-without-user-activation"
    FULLSCREEN = "fullscreen"
    FROBULATE = "frobulate"
    GAMEPAD = "gamepad"
    GEOLOCATION = "geolocation"
    GYROSCOPE = "gyroscope"
    HID = "hid"
    IDENTITY_CREDENTIALS_GET = "identity-credentials-get"
    IDLE_DETECTION = "idle-detection"
    INTEREST_COHORT = "interest-cohort"
    JOIN_AD_INTEREST_GROUP = "join-ad-interest-group"
    KEYBOARD_MAP = "keyboard-map"
    LANGUAGE_DETECTOR = "language-detector"
    LANGUAGE_MODEL = "language-model"
    LOCAL_FONTS = "local-fonts"
    LOCAL_NETWORK_ACCESS = "local-network-access"
    MAGNETOMETER = "magnetometer"
    MEDIA_PLAYBACK_WHILE_NOT_VISIBLE = "media-playback-while-not-visible"
    MICROPHONE = "microphone"
    MIDI = "midi"
    ON_DEVICE_SPEECH_RECOGNITION = "on-device-speech-recognition"
    OTP_CREDENTIALS = "otp-credentials"
    PAYMENT = "payment"
    PICTURE_IN_PICTURE = "picture-in-picture"
    POPINS = "popins"
    PRIVATE_AGGREGATION = "private-aggregation"
    PRIVATE_STATE_TOKEN_ISSUANCE = "private-state-token-issuance"
    PRIVATE_STATE_TOKEN_REDEMPTION = "private-state-token-redemption"
    PUBLICKEY_CREDENTIALS_CREATE = "publickey-credentials-create"
    PUBLICKEY_CREDENTIALS_GET = "publickey-credentials-get"
    RECORD_AD_AUCTION_EVENTS = "record-ad-auction-events"
    REWRITER = "rewriter"
    RUN_AD_AUCTION = "run-ad-auction"
    SCREEN_WAKE_LOCK = "screen-wake-lock"
    SERIAL = "serial"
    SHARED_AUTOFILL = "shared-autofill"
    SHARED_STORAGE = "shared-storage"
    SHARED_STORAGE_SELECT_URL = "shared-storage-select-url"
    SMART_CARD = "smart-card"
    SPEAKER_SELECTION = "speaker-selection"
    STORAGE_ACCESS = "storage-access"
    SUB_APPS = "sub-apps"
    SUMMARIZER = "summarizer"
    SYNC_XHR = "sync-xhr"
    TRANSLATOR = "translator"
    UNLOAD = "unload"
    USB = "usb"
    USB_UNRESTRICTED = "usb-unrestricted"
    VERTICAL_SCROLL = "vertical-scroll"
    WEB_APP_INSTALLATION = "web-app-installation"
    WEB_PRINTING = "web-printing"
    WEB_SHARE = "web-share"
    WINDOW_MANAGEMENT = "window-management"
    WRITER = "writer"
    XR_SPATIAL_TRACKING = "xr-spatial-tracking"



"""Reason for a permissions policy feature to be disabled."""
class PermissionsPolicyBlockReason(Enum):
    HEADER = "Header"
    IFRAMEATTRIBUTE = "IframeAttribute"
    INFENCEDFRAMETREE = "InFencedFrameTree"
    INISOLATEDAPP = "InIsolatedApp"



class PermissionsPolicyBlockLocator(TypedDict):
    frameId: "FrameId"
    blockReason: "PermissionsPolicyBlockReason"



class PermissionsPolicyFeatureState(TypedDict):
    feature: "PermissionsPolicyFeature"
    allowed: "bool"
    locator: "NotRequired[PermissionsPolicyBlockLocator]"



"""Origin Trial(https://www.chromium.org/blink/origin-trials) support.
Status for an Origin Trial token."""
class OriginTrialTokenStatus(Enum):
    SUCCESS = "Success"
    NOTSUPPORTED = "NotSupported"
    INSECURE = "Insecure"
    EXPIRED = "Expired"
    WRONGORIGIN = "WrongOrigin"
    INVALIDSIGNATURE = "InvalidSignature"
    MALFORMED = "Malformed"
    WRONGVERSION = "WrongVersion"
    FEATUREDISABLED = "FeatureDisabled"
    TOKENDISABLED = "TokenDisabled"
    FEATUREDISABLEDFORUSER = "FeatureDisabledForUser"
    UNKNOWNTRIAL = "UnknownTrial"



"""Status for an Origin Trial."""
class OriginTrialStatus(Enum):
    ENABLED = "Enabled"
    VALIDTOKENNOTPROVIDED = "ValidTokenNotProvided"
    OSNOTSUPPORTED = "OSNotSupported"
    TRIALNOTALLOWED = "TrialNotAllowed"



class OriginTrialUsageRestriction(Enum):
    NONE = "None"
    SUBSET = "Subset"



class OriginTrialToken(TypedDict):
    origin: "str"
    matchSubDomains: "bool"
    trialName: "str"
    expiryTime: "TimeSinceEpoch"
    isThirdParty: "bool"
    usageRestriction: "OriginTrialUsageRestriction"



class OriginTrialTokenWithStatus(TypedDict):
    rawTokenText: "str"
    parsedToken: "NotRequired[OriginTrialToken]"
    """`parsedToken` is present only when the token is extractable and
parsable."""
    status: "OriginTrialTokenStatus"



class OriginTrial(TypedDict):
    trialName: "str"
    status: "OriginTrialStatus"
    tokensWithStatus: "List[OriginTrialTokenWithStatus]"



"""Additional information about the frame document's security origin."""
class SecurityOriginDetails(TypedDict):
    isLocalhost: "bool"
    """Indicates whether the frame document's security origin is one
of the local hostnames (e.g. \"localhost\") or IP addresses (IPv4
127.0.0.0/8 or IPv6 ::1)."""



"""Information about the Frame on the page."""
class Frame(TypedDict):
    id: "FrameId"
    """Frame unique identifier."""
    parentId: "NotRequired[FrameId]"
    """Parent frame identifier."""
    loaderId: "LoaderId"
    """Identifier of the loader associated with this frame."""
    name: "NotRequired[str]"
    """Frame's name as specified in the tag."""
    url: "str"
    """Frame document's URL without fragment."""
    urlFragment: "NotRequired[str]"
    """Frame document's URL fragment including the '#'."""
    domainAndRegistry: "str"
    """Frame document's registered domain, taking the public suffixes list into account.
Extracted from the Frame's url.
Example URLs: http://www.google.com/file.html -> \"google.com\"
              http://a.b.co.uk/file.html      -> \"b.co.uk\""""
    securityOrigin: "str"
    """Frame document's security origin."""
    securityOriginDetails: "NotRequired[SecurityOriginDetails]"
    """Additional details about the frame document's security origin."""
    mimeType: "str"
    """Frame document's mimeType as determined by the browser."""
    unreachableUrl: "NotRequired[str]"
    """If the frame failed to load, this contains the URL that could not be loaded. Note that unlike url above, this URL may contain a fragment."""
    adFrameStatus: "NotRequired[AdFrameStatus]"
    """Indicates whether this frame was tagged as an ad and why."""
    secureContextType: "SecureContextType"
    """Indicates whether the main document is a secure context and explains why that is the case."""
    crossOriginIsolatedContextType: "CrossOriginIsolatedContextType"
    """Indicates whether this is a cross origin isolated context."""
    gatedAPIFeatures: "List[GatedAPIFeatures]"
    """Indicated which gated APIs / features are available."""



"""Information about the Resource on the page."""
class FrameResource(TypedDict):
    url: "str"
    """Resource URL."""
    type: "ResourceType"
    """Type of this resource."""
    mimeType: "str"
    """Resource mimeType as determined by the browser."""
    lastModified: "NotRequired[TimeSinceEpoch]"
    """last-modified timestamp as reported by server."""
    contentSize: "NotRequired[float]"
    """Resource content size."""
    failed: "NotRequired[bool]"
    """True if the resource failed to load."""
    canceled: "NotRequired[bool]"
    """True if the resource was canceled during loading."""



"""Information about the Frame hierarchy along with their cached resources."""
class FrameResourceTree(TypedDict):
    frame: "Frame"
    """Frame information for this tree item."""
    childFrames: "NotRequired[List[FrameResourceTree]]"
    """Child frames."""
    resources: "List[FrameResource]"
    """Information about frame resources."""



"""Information about the Frame hierarchy."""
class FrameTree(TypedDict):
    frame: "Frame"
    """Frame information for this tree item."""
    childFrames: "NotRequired[List[FrameTree]]"
    """Child frames."""



"""Unique script identifier."""
ScriptIdentifier = str



"""Transition type."""
class TransitionType(Enum):
    LINK = "link"
    TYPED = "typed"
    ADDRESS_BAR = "address_bar"
    AUTO_BOOKMARK = "auto_bookmark"
    AUTO_SUBFRAME = "auto_subframe"
    MANUAL_SUBFRAME = "manual_subframe"
    GENERATED = "generated"
    AUTO_TOPLEVEL = "auto_toplevel"
    FORM_SUBMIT = "form_submit"
    RELOAD = "reload"
    KEYWORD = "keyword"
    KEYWORD_GENERATED = "keyword_generated"
    OTHER = "other"



"""Navigation history entry."""
class NavigationEntry(TypedDict):
    id: "int"
    """Unique id of the navigation history entry."""
    url: "str"
    """URL of the navigation history entry."""
    userTypedURL: "str"
    """URL that the user typed in the url bar."""
    title: "str"
    """Title of the navigation history entry."""
    transitionType: "TransitionType"
    """Transition type."""



"""Screencast frame metadata."""
class ScreencastFrameMetadata(TypedDict):
    offsetTop: "float"
    """Top offset in DIP."""
    pageScaleFactor: "float"
    """Page scale factor."""
    deviceWidth: "float"
    """Device screen width in DIP."""
    deviceHeight: "float"
    """Device screen height in DIP."""
    scrollOffsetX: "float"
    """Position of horizontal scroll in CSS pixels."""
    scrollOffsetY: "float"
    """Position of vertical scroll in CSS pixels."""
    timestamp: "NotRequired[TimeSinceEpoch]"
    """Frame swap timestamp."""



"""Javascript dialog type."""
class DialogType(Enum):
    ALERT = "alert"
    CONFIRM = "confirm"
    PROMPT = "prompt"
    BEFOREUNLOAD = "beforeunload"



"""Error while paring app manifest."""
class AppManifestError(TypedDict):
    message: "str"
    """Error message."""
    critical: "int"
    """If critical, this is a non-recoverable parse error."""
    line: "int"
    """Error line."""
    column: "int"
    """Error column."""



"""Parsed app manifest properties."""
class AppManifestParsedProperties(TypedDict):
    scope: "str"
    """Computed scope value"""



"""Layout viewport position and dimensions."""
class LayoutViewport(TypedDict):
    pageX: "int"
    """Horizontal offset relative to the document (CSS pixels)."""
    pageY: "int"
    """Vertical offset relative to the document (CSS pixels)."""
    clientWidth: "int"
    """Width (CSS pixels), excludes scrollbar if present."""
    clientHeight: "int"
    """Height (CSS pixels), excludes scrollbar if present."""



"""Visual viewport position, dimensions, and scale."""
class VisualViewport(TypedDict):
    offsetX: "float"
    """Horizontal offset relative to the layout viewport (CSS pixels)."""
    offsetY: "float"
    """Vertical offset relative to the layout viewport (CSS pixels)."""
    pageX: "float"
    """Horizontal offset relative to the document (CSS pixels)."""
    pageY: "float"
    """Vertical offset relative to the document (CSS pixels)."""
    clientWidth: "float"
    """Width (CSS pixels), excludes scrollbar if present."""
    clientHeight: "float"
    """Height (CSS pixels), excludes scrollbar if present."""
    scale: "float"
    """Scale relative to the ideal viewport (size at width=device-width)."""
    zoom: "NotRequired[float]"
    """Page zoom factor (CSS to device independent pixels ratio)."""



"""Viewport for capturing screenshot."""
class Viewport(TypedDict):
    x: "float"
    """X offset in device independent pixels (dip)."""
    y: "float"
    """Y offset in device independent pixels (dip)."""
    width: "float"
    """Rectangle width in device independent pixels (dip)."""
    height: "float"
    """Rectangle height in device independent pixels (dip)."""
    scale: "float"
    """Page scale factor."""



"""Generic font families collection."""
class FontFamilies(TypedDict, total=False):
    standard: "str"
    """The standard font-family."""
    fixed: "str"
    """The fixed font-family."""
    serif: "str"
    """The serif font-family."""
    sansSerif: "str"
    """The sansSerif font-family."""
    cursive: "str"
    """The cursive font-family."""
    fantasy: "str"
    """The fantasy font-family."""
    math: "str"
    """The math font-family."""



"""Font families collection for a script."""
class ScriptFontFamilies(TypedDict):
    script: "str"
    """Name of the script which these font families are defined for."""
    fontFamilies: "FontFamilies"
    """Generic font families collection for the script."""



"""Default font sizes."""
class FontSizes(TypedDict, total=False):
    standard: "int"
    """Default standard font size."""
    fixed: "int"
    """Default fixed font size."""



class ClientNavigationReason(Enum):
    ANCHORCLICK = "anchorClick"
    FORMSUBMISSIONGET = "formSubmissionGet"
    FORMSUBMISSIONPOST = "formSubmissionPost"
    HTTPHEADERREFRESH = "httpHeaderRefresh"
    INITIALFRAMENAVIGATION = "initialFrameNavigation"
    METATAGREFRESH = "metaTagRefresh"
    OTHER = "other"
    PAGEBLOCKINTERSTITIAL = "pageBlockInterstitial"
    RELOAD = "reload"
    SCRIPTINITIATED = "scriptInitiated"



class ClientNavigationDisposition(Enum):
    CURRENTTAB = "currentTab"
    NEWTAB = "newTab"
    NEWWINDOW = "newWindow"
    DOWNLOAD = "download"



class InstallabilityErrorArgument(TypedDict):
    name: "str"
    """Argument name (e.g. name:'minimum-icon-size-in-pixels')."""
    value: "str"
    """Argument value (e.g. value:'64')."""



"""The installability error"""
class InstallabilityError(TypedDict):
    errorId: "str"
    """The error id (e.g. 'manifest-missing-suitable-icon')."""
    errorArguments: "List[InstallabilityErrorArgument]"
    """The list of error arguments (e.g. {name:'minimum-icon-size-in-pixels', value:'64'})."""



"""The referring-policy used for the navigation."""
class ReferrerPolicy(Enum):
    NOREFERRER = "noReferrer"
    NOREFERRERWHENDOWNGRADE = "noReferrerWhenDowngrade"
    ORIGIN = "origin"
    ORIGINWHENCROSSORIGIN = "originWhenCrossOrigin"
    SAMEORIGIN = "sameOrigin"
    STRICTORIGIN = "strictOrigin"
    STRICTORIGINWHENCROSSORIGIN = "strictOriginWhenCrossOrigin"
    UNSAFEURL = "unsafeUrl"



"""Per-script compilation cache parameters for `Page.produceCompilationCache`"""
class CompilationCacheParams(TypedDict):
    url: "str"
    """The URL of the script to produce a compilation cache entry for."""
    eager: "NotRequired[bool]"
    """A hint to the backend whether eager compilation is recommended.
(the actual compilation mode used is upon backend discretion)."""



class FileFilter(TypedDict, total=False):
    name: "str"
    accepts: "List[str]"



class FileHandler(TypedDict):
    action: "str"
    name: "str"
    icons: "NotRequired[List[ImageResource]]"
    accepts: "NotRequired[List[FileFilter]]"
    """Mimic a map, name is the key, accepts is the value."""
    launchType: "str"
    """Won't repeat the enums, using string for easy comparison. Same as the
other enums below."""



"""The image definition used in both icon and screenshot."""
class ImageResource(TypedDict):
    url: "str"
    """The src field in the definition, but changing to url in favor of
consistency."""
    sizes: "NotRequired[str]"
    type: "NotRequired[str]"



class LaunchHandler(TypedDict):
    clientMode: "str"



class ProtocolHandler(TypedDict):
    protocol: "str"
    url: "str"



class RelatedApplication(TypedDict):
    id: "NotRequired[str]"
    url: "str"



class ScopeExtension(TypedDict):
    origin: "str"
    """Instead of using tuple, this field always returns the serialized string
for easy understanding and comparison."""
    hasOriginWildcard: "bool"



class Screenshot(TypedDict):
    image: "ImageResource"
    formFactor: "str"
    label: "NotRequired[str]"



class ShareTarget(TypedDict):
    action: "str"
    method: "str"
    enctype: "str"
    title: "NotRequired[str]"
    """Embed the ShareTargetParams"""
    text: "NotRequired[str]"
    url: "NotRequired[str]"
    files: "NotRequired[List[FileFilter]]"



class Shortcut(TypedDict):
    name: "str"
    url: "str"



class WebAppManifest(TypedDict, total=False):
    backgroundColor: "str"
    description: "str"
    """The extra description provided by the manifest."""
    dir: "str"
    display: "str"
    displayOverrides: "List[str]"
    """The overrided display mode controlled by the user."""
    fileHandlers: "List[FileHandler]"
    """The handlers to open files."""
    icons: "List[ImageResource]"
    id: "str"
    lang: "str"
    launchHandler: "LaunchHandler"
    """TODO(crbug.com/1231886): This field is non-standard and part of a Chrome
experiment. See:
https://github.com/WICG/web-app-launch/blob/main/launch_handler.md"""
    name: "str"
    orientation: "str"
    preferRelatedApplications: "bool"
    protocolHandlers: "List[ProtocolHandler]"
    """The handlers to open protocols."""
    relatedApplications: "List[RelatedApplication]"
    scope: "str"
    scopeExtensions: "List[ScopeExtension]"
    """Non-standard, see
https://github.com/WICG/manifest-incubations/blob/gh-pages/scope_extensions-explainer.md"""
    screenshots: "List[Screenshot]"
    """The screenshots used by chromium."""
    shareTarget: "ShareTarget"
    shortName: "str"
    shortcuts: "List[Shortcut]"
    startUrl: "str"
    themeColor: "str"



"""The type of a frameNavigated event."""
class NavigationType(Enum):
    NAVIGATION = "Navigation"
    BACKFORWARDCACHERESTORE = "BackForwardCacheRestore"



"""List of not restored reasons for back-forward cache."""
class BackForwardCacheNotRestoredReason(Enum):
    NOTPRIMARYMAINFRAME = "NotPrimaryMainFrame"
    BACKFORWARDCACHEDISABLED = "BackForwardCacheDisabled"
    RELATEDACTIVECONTENTSEXIST = "RelatedActiveContentsExist"
    HTTPSTATUSNOTOK = "HTTPStatusNotOK"
    SCHEMENOTHTTPORHTTPS = "SchemeNotHTTPOrHTTPS"
    LOADING = "Loading"
    WASGRANTEDMEDIAACCESS = "WasGrantedMediaAccess"
    DISABLEFORRENDERFRAMEHOSTCALLED = "DisableForRenderFrameHostCalled"
    DOMAINNOTALLOWED = "DomainNotAllowed"
    HTTPMETHODNOTGET = "HTTPMethodNotGET"
    SUBFRAMEISNAVIGATING = "SubframeIsNavigating"
    TIMEOUT = "Timeout"
    CACHELIMIT = "CacheLimit"
    JAVASCRIPTEXECUTION = "JavaScriptExecution"
    RENDERERPROCESSKILLED = "RendererProcessKilled"
    RENDERERPROCESSCRASHED = "RendererProcessCrashed"
    SCHEDULERTRACKEDFEATUREUSED = "SchedulerTrackedFeatureUsed"
    CONFLICTINGBROWSINGINSTANCE = "ConflictingBrowsingInstance"
    CACHEFLUSHED = "CacheFlushed"
    SERVICEWORKERVERSIONACTIVATION = "ServiceWorkerVersionActivation"
    SESSIONRESTORED = "SessionRestored"
    SERVICEWORKERPOSTMESSAGE = "ServiceWorkerPostMessage"
    ENTEREDBACKFORWARDCACHEBEFORESERVICEWORKERHOSTADDED = "EnteredBackForwardCacheBeforeServiceWorkerHostAdded"
    RENDERFRAMEHOSTREUSED_SAMESITE = "RenderFrameHostReused_SameSite"
    RENDERFRAMEHOSTREUSED_CROSSSITE = "RenderFrameHostReused_CrossSite"
    SERVICEWORKERCLAIM = "ServiceWorkerClaim"
    IGNOREEVENTANDEVICT = "IgnoreEventAndEvict"
    HAVEINNERCONTENTS = "HaveInnerContents"
    TIMEOUTPUTTINGINCACHE = "TimeoutPuttingInCache"
    BACKFORWARDCACHEDISABLEDBYLOWMEMORY = "BackForwardCacheDisabledByLowMemory"
    BACKFORWARDCACHEDISABLEDBYCOMMANDLINE = "BackForwardCacheDisabledByCommandLine"
    NETWORKREQUESTDATAPIPEDRAINEDASBYTESCONSUMER = "NetworkRequestDatapipeDrainedAsBytesConsumer"
    NETWORKREQUESTREDIRECTED = "NetworkRequestRedirected"
    NETWORKREQUESTTIMEOUT = "NetworkRequestTimeout"
    NETWORKEXCEEDSBUFFERLIMIT = "NetworkExceedsBufferLimit"
    NAVIGATIONCANCELLEDWHILERESTORING = "NavigationCancelledWhileRestoring"
    NOTMOSTRECENTNAVIGATIONENTRY = "NotMostRecentNavigationEntry"
    BACKFORWARDCACHEDISABLEDFORPRERENDER = "BackForwardCacheDisabledForPrerender"
    USERAGENTOVERRIDEDIFFERS = "UserAgentOverrideDiffers"
    FOREGROUNDCACHELIMIT = "ForegroundCacheLimit"
    BROWSINGINSTANCENOTSWAPPED = "BrowsingInstanceNotSwapped"
    BACKFORWARDCACHEDISABLEDFORDELEGATE = "BackForwardCacheDisabledForDelegate"
    UNLOADHANDLEREXISTSINMAINFRAME = "UnloadHandlerExistsInMainFrame"
    UNLOADHANDLEREXISTSINSUBFRAME = "UnloadHandlerExistsInSubFrame"
    SERVICEWORKERUNREGISTRATION = "ServiceWorkerUnregistration"
    CACHECONTROLNOSTORE = "CacheControlNoStore"
    CACHECONTROLNOSTORECOOKIEMODIFIED = "CacheControlNoStoreCookieModified"
    CACHECONTROLNOSTOREHTTPONLYCOOKIEMODIFIED = "CacheControlNoStoreHTTPOnlyCookieModified"
    NORESPONSEHEAD = "NoResponseHead"
    UNKNOWN = "Unknown"
    ACTIVATIONNAVIGATIONSDISALLOWEDFORBUG1234857 = "ActivationNavigationsDisallowedForBug1234857"
    ERRORDOCUMENT = "ErrorDocument"
    FENCEDFRAMESEMBEDDER = "FencedFramesEmbedder"
    COOKIEDISABLED = "CookieDisabled"
    HTTPAUTHREQUIRED = "HTTPAuthRequired"
    COOKIEFLUSHED = "CookieFlushed"
    BROADCASTCHANNELONMESSAGE = "BroadcastChannelOnMessage"
    WEBVIEWSETTINGSCHANGED = "WebViewSettingsChanged"
    WEBVIEWJAVASCRIPTOBJECTCHANGED = "WebViewJavaScriptObjectChanged"
    WEBVIEWMESSAGELISTENERINJECTED = "WebViewMessageListenerInjected"
    WEBVIEWSAFEBROWSINGALLOWLISTCHANGED = "WebViewSafeBrowsingAllowlistChanged"
    WEBVIEWDOCUMENTSTARTJAVASCRIPTCHANGED = "WebViewDocumentStartJavascriptChanged"
    WEBSOCKET = "WebSocket"
    WEBTRANSPORT = "WebTransport"
    WEBRTC = "WebRTC"
    MAINRESOURCEHASCACHECONTROLNOSTORE = "MainResourceHasCacheControlNoStore"
    MAINRESOURCEHASCACHECONTROLNOCACHE = "MainResourceHasCacheControlNoCache"
    SUBRESOURCEHASCACHECONTROLNOSTORE = "SubresourceHasCacheControlNoStore"
    SUBRESOURCEHASCACHECONTROLNOCACHE = "SubresourceHasCacheControlNoCache"
    CONTAINSPLUGINS = "ContainsPlugins"
    DOCUMENTLOADED = "DocumentLoaded"
    OUTSTANDINGNETWORKREQUESTOTHERS = "OutstandingNetworkRequestOthers"
    REQUESTEDMIDIPERMISSION = "RequestedMIDIPermission"
    REQUESTEDAUDIOCAPTUREPERMISSION = "RequestedAudioCapturePermission"
    REQUESTEDVIDEOCAPTUREPERMISSION = "RequestedVideoCapturePermission"
    REQUESTEDBACKFORWARDCACHEBLOCKEDSENSORS = "RequestedBackForwardCacheBlockedSensors"
    REQUESTEDBACKGROUNDWORKPERMISSION = "RequestedBackgroundWorkPermission"
    BROADCASTCHANNEL = "BroadcastChannel"
    WEBXR = "WebXR"
    SHAREDWORKER = "SharedWorker"
    SHAREDWORKERMESSAGE = "SharedWorkerMessage"
    WEBLOCKS = "WebLocks"
    WEBHID = "WebHID"
    WEBSHARE = "WebShare"
    REQUESTEDSTORAGEACCESSGRANT = "RequestedStorageAccessGrant"
    WEBNFC = "WebNfc"
    OUTSTANDINGNETWORKREQUESTFETCH = "OutstandingNetworkRequestFetch"
    OUTSTANDINGNETWORKREQUESTXHR = "OutstandingNetworkRequestXHR"
    APPBANNER = "AppBanner"
    PRINTING = "Printing"
    WEBDATABASE = "WebDatabase"
    PICTUREINPICTURE = "PictureInPicture"
    SPEECHRECOGNIZER = "SpeechRecognizer"
    IDLEMANAGER = "IdleManager"
    PAYMENTMANAGER = "PaymentManager"
    SPEECHSYNTHESIS = "SpeechSynthesis"
    KEYBOARDLOCK = "KeyboardLock"
    WEBOTPSERVICE = "WebOTPService"
    OUTSTANDINGNETWORKREQUESTDIRECTSOCKET = "OutstandingNetworkRequestDirectSocket"
    INJECTEDJAVASCRIPT = "InjectedJavascript"
    INJECTEDSTYLESHEET = "InjectedStyleSheet"
    KEEPALIVEREQUEST = "KeepaliveRequest"
    INDEXEDDBEVENT = "IndexedDBEvent"
    DUMMY = "Dummy"
    JSNETWORKREQUESTRECEIVEDCACHECONTROLNOSTORERESOURCE = "JsNetworkRequestReceivedCacheControlNoStoreResource"
    WEBRTCSTICKY = "WebRTCSticky"
    WEBTRANSPORTSTICKY = "WebTransportSticky"
    WEBSOCKETSTICKY = "WebSocketSticky"
    SMARTCARD = "SmartCard"
    LIVEMEDIASTREAMTRACK = "LiveMediaStreamTrack"
    UNLOADHANDLER = "UnloadHandler"
    PARSERABORTED = "ParserAborted"
    CONTENTSECURITYHANDLER = "ContentSecurityHandler"
    CONTENTWEBAUTHENTICATIONAPI = "ContentWebAuthenticationAPI"
    CONTENTFILECHOOSER = "ContentFileChooser"
    CONTENTSERIAL = "ContentSerial"
    CONTENTFILESYSTEMACCESS = "ContentFileSystemAccess"
    CONTENTMEDIADEVICESDISPATCHERHOST = "ContentMediaDevicesDispatcherHost"
    CONTENTWEBBLUETOOTH = "ContentWebBluetooth"
    CONTENTWEBUSB = "ContentWebUSB"
    CONTENTMEDIASESSIONSERVICE = "ContentMediaSessionService"
    CONTENTSCREENREADER = "ContentScreenReader"
    CONTENTDISCARDED = "ContentDiscarded"
    EMBEDDERPOPUPBLOCKERTABHELPER = "EmbedderPopupBlockerTabHelper"
    EMBEDDERSAFEBROWSINGTRIGGEREDPOPUPBLOCKER = "EmbedderSafeBrowsingTriggeredPopupBlocker"
    EMBEDDERSAFEBROWSINGTHREATDETAILS = "EmbedderSafeBrowsingThreatDetails"
    EMBEDDERAPPBANNERMANAGER = "EmbedderAppBannerManager"
    EMBEDDERDOMDISTILLERVIEWERSOURCE = "EmbedderDomDistillerViewerSource"
    EMBEDDERDOMDISTILLERSELFDELETINGREQUESTDELEGATE = "EmbedderDomDistillerSelfDeletingRequestDelegate"
    EMBEDDEROOMINTERVENTIONTABHELPER = "EmbedderOomInterventionTabHelper"
    EMBEDDEROFFLINEPAGE = "EmbedderOfflinePage"
    EMBEDDERCHROMEPASSWORDMANAGERCLIENTBINDCREDENTIALMANAGER = "EmbedderChromePasswordManagerClientBindCredentialManager"
    EMBEDDERPERMISSIONREQUESTMANAGER = "EmbedderPermissionRequestManager"
    EMBEDDERMODALDIALOG = "EmbedderModalDialog"
    EMBEDDEREXTENSIONS = "EmbedderExtensions"
    EMBEDDEREXTENSIONMESSAGING = "EmbedderExtensionMessaging"
    EMBEDDEREXTENSIONMESSAGINGFOROPENPORT = "EmbedderExtensionMessagingForOpenPort"
    EMBEDDEREXTENSIONSENTMESSAGETOCACHEDFRAME = "EmbedderExtensionSentMessageToCachedFrame"
    REQUESTEDBYWEBVIEWCLIENT = "RequestedByWebViewClient"
    POSTMESSAGEBYWEBVIEWCLIENT = "PostMessageByWebViewClient"
    CACHECONTROLNOSTOREDEVICEBOUNDSESSIONTERMINATED = "CacheControlNoStoreDeviceBoundSessionTerminated"
    CACHELIMITPRUNEDONMODERATEMEMORYPRESSURE = "CacheLimitPrunedOnModerateMemoryPressure"
    CACHELIMITPRUNEDONCRITICALMEMORYPRESSURE = "CacheLimitPrunedOnCriticalMemoryPressure"



"""Types of not restored reasons for back-forward cache."""
class BackForwardCacheNotRestoredReasonType(Enum):
    SUPPORTPENDING = "SupportPending"
    PAGESUPPORTNEEDED = "PageSupportNeeded"
    CIRCUMSTANTIAL = "Circumstantial"



class BackForwardCacheBlockingDetails(TypedDict):
    url: "NotRequired[str]"
    """Url of the file where blockage happened. Optional because of tests."""
    function: "NotRequired[str]"
    """Function name where blockage happened. Optional because of anonymous functions and tests."""
    lineNumber: "int"
    """Line number in the script (0-based)."""
    columnNumber: "int"
    """Column number in the script (0-based)."""



class BackForwardCacheNotRestoredExplanation(TypedDict):
    type: "BackForwardCacheNotRestoredReasonType"
    """Type of the reason"""
    reason: "BackForwardCacheNotRestoredReason"
    """Not restored reason"""
    context: "NotRequired[str]"
    """Context associated with the reason. The meaning of this context is
dependent on the reason:
- EmbedderExtensionSentMessageToCachedFrame: the extension ID."""
    details: "NotRequired[List[BackForwardCacheBlockingDetails]]"



class BackForwardCacheNotRestoredExplanationTree(TypedDict):
    url: "str"
    """URL of each frame"""
    explanations: "List[BackForwardCacheNotRestoredExplanation]"
    """Not restored reasons of each frame"""
    children: "List[BackForwardCacheNotRestoredExplanationTree]"
    """Array of children frame"""
