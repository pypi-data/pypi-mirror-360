# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Storage Domain Types"""

from enum import Enum
from typing import List, Optional
from typing_extensions import TypedDict

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..network.types import TimeSinceEpoch
    from ..target.types import TargetID

SerializedStorageKey = str



"""Enum of possible storage types."""
class StorageType(Enum):
    COOKIES = "cookies"
    FILE_SYSTEMS = "file_systems"
    INDEXEDDB = "indexeddb"
    LOCAL_STORAGE = "local_storage"
    SHADER_CACHE = "shader_cache"
    WEBSQL = "websql"
    SERVICE_WORKERS = "service_workers"
    CACHE_STORAGE = "cache_storage"
    INTEREST_GROUPS = "interest_groups"
    SHARED_STORAGE = "shared_storage"
    STORAGE_BUCKETS = "storage_buckets"
    ALL = "all"
    OTHER = "other"



"""Usage for a storage type."""
class UsageForType(TypedDict):
    storageType: "StorageType"
    """Name of storage type."""
    usage: "float"
    """Storage usage (bytes)."""



"""Pair of issuer origin and number of available (signed, but not used) Trust
Tokens from that issuer."""
class TrustTokens(TypedDict):
    issuerOrigin: "str"
    count: "float"



"""Protected audience interest group auction identifier."""
InterestGroupAuctionId = str



"""Enum of interest group access types."""
class InterestGroupAccessType(Enum):
    JOIN = "join"
    LEAVE = "leave"
    UPDATE = "update"
    LOADED = "loaded"
    BID = "bid"
    WIN = "win"
    ADDITIONALBID = "additionalBid"
    ADDITIONALBIDWIN = "additionalBidWin"
    TOPLEVELBID = "topLevelBid"
    TOPLEVELADDITIONALBID = "topLevelAdditionalBid"
    CLEAR = "clear"



"""Enum of auction events."""
class InterestGroupAuctionEventType(Enum):
    STARTED = "started"
    CONFIGRESOLVED = "configResolved"



"""Enum of network fetches auctions can do."""
class InterestGroupAuctionFetchType(Enum):
    BIDDERJS = "bidderJs"
    BIDDERWASM = "bidderWasm"
    SELLERJS = "sellerJs"
    BIDDERTRUSTEDSIGNALS = "bidderTrustedSignals"
    SELLERTRUSTEDSIGNALS = "sellerTrustedSignals"



"""Enum of shared storage access scopes."""
class SharedStorageAccessScope(Enum):
    WINDOW = "window"
    SHAREDSTORAGEWORKLET = "sharedStorageWorklet"
    PROTECTEDAUDIENCEWORKLET = "protectedAudienceWorklet"
    HEADER = "header"



"""Enum of shared storage access methods."""
class SharedStorageAccessMethod(Enum):
    ADDMODULE = "addModule"
    CREATEWORKLET = "createWorklet"
    SELECTURL = "selectURL"
    RUN = "run"
    BATCHUPDATE = "batchUpdate"
    SET = "set"
    APPEND = "append"
    DELETE = "delete"
    CLEAR = "clear"
    GET = "get"
    KEYS = "keys"
    VALUES = "values"
    ENTRIES = "entries"
    LENGTH = "length"
    REMAININGBUDGET = "remainingBudget"



"""Struct for a single key-value pair in an origin's shared storage."""
class SharedStorageEntry(TypedDict):
    key: "str"
    value: "str"



"""Details for an origin's shared storage."""
class SharedStorageMetadata(TypedDict):
    creationTime: "TimeSinceEpoch"
    """Time when the origin's shared storage was last created."""
    length: "int"
    """Number of key-value pairs stored in origin's shared storage."""
    remainingBudget: "float"
    """Current amount of bits of entropy remaining in the navigation budget."""
    bytesUsed: "int"
    """Total number of bytes stored as key-value pairs in origin's shared
storage."""



"""Represents a dictionary object passed in as privateAggregationConfig to
run or selectURL."""
class SharedStoragePrivateAggregationConfig(TypedDict):
    aggregationCoordinatorOrigin: "Optional[str]"
    """The chosen aggregation service deployment."""
    contextId: "Optional[str]"
    """The context ID provided."""
    filteringIdMaxBytes: "int"
    """Configures the maximum size allowed for filtering IDs."""
    maxContributions: "Optional[int]"
    """The limit on the number of contributions in the final report."""



"""Pair of reporting metadata details for a candidate URL for `selectURL()`."""
class SharedStorageReportingMetadata(TypedDict):
    eventType: "str"
    reportingUrl: "str"



"""Bundles a candidate URL with its reporting metadata."""
class SharedStorageUrlWithMetadata(TypedDict):
    url: "str"
    """Spec of candidate URL."""
    reportingMetadata: "List[SharedStorageReportingMetadata]"
    """Any associated reporting metadata."""



"""Bundles the parameters for shared storage access events whose
presence/absence can vary according to SharedStorageAccessType."""
class SharedStorageAccessParams(TypedDict, total=False):
    scriptSourceUrl: "str"
    """Spec of the module script URL.
Present only for SharedStorageAccessMethods: addModule and
createWorklet."""
    dataOrigin: "str"
    """String denoting \"context-origin\", \"script-origin\", or a custom
origin to be used as the worklet's data origin.
Present only for SharedStorageAccessMethod: createWorklet."""
    operationName: "str"
    """Name of the registered operation to be run.
Present only for SharedStorageAccessMethods: run and selectURL."""
    operationId: "str"
    """ID of the operation call.
Present only for SharedStorageAccessMethods: run and selectURL."""
    keepAlive: "bool"
    """Whether or not to keep the worket alive for future run or selectURL
calls.
Present only for SharedStorageAccessMethods: run and selectURL."""
    privateAggregationConfig: "SharedStoragePrivateAggregationConfig"
    """Configures the private aggregation options.
Present only for SharedStorageAccessMethods: run and selectURL."""
    serializedData: "str"
    """The operation's serialized data in bytes (converted to a string).
Present only for SharedStorageAccessMethods: run and selectURL.
TODO(crbug.com/401011862): Consider updating this parameter to binary."""
    urlsWithMetadata: "List[SharedStorageUrlWithMetadata]"
    """Array of candidate URLs' specs, along with any associated metadata.
Present only for SharedStorageAccessMethod: selectURL."""
    urnUuid: "str"
    """Spec of the URN:UUID generated for a selectURL call.
Present only for SharedStorageAccessMethod: selectURL."""
    key: "str"
    """Key for a specific entry in an origin's shared storage.
Present only for SharedStorageAccessMethods: set, append, delete, and
get."""
    value: "str"
    """Value for a specific entry in an origin's shared storage.
Present only for SharedStorageAccessMethods: set and append."""
    ignoreIfPresent: "bool"
    """Whether or not to set an entry for a key if that key is already present.
Present only for SharedStorageAccessMethod: set."""
    workletOrdinal: "int"
    """A number denoting the (0-based) order of the worklet's
creation relative to all other shared storage worklets created by
documents using the current storage partition.
Present only for SharedStorageAccessMethods: addModule, createWorklet."""
    workletTargetId: "TargetID"
    """Hex representation of the DevTools token used as the TargetID for the
associated shared storage worklet.
Present only for SharedStorageAccessMethods: addModule, createWorklet,
run, selectURL, and any other SharedStorageAccessMethod when the
SharedStorageAccessScope is sharedStorageWorklet."""
    withLock: "str"
    """Name of the lock to be acquired, if present.
Optionally present only for SharedStorageAccessMethods: batchUpdate,
set, append, delete, and clear."""
    batchUpdateId: "str"
    """If the method has been called as part of a batchUpdate, then this
number identifies the batch to which it belongs.
Optionally present only for SharedStorageAccessMethods:
batchUpdate (required), set, append, delete, and clear."""
    batchSize: "int"
    """Number of modifier methods sent in batch.
Present only for SharedStorageAccessMethod: batchUpdate."""



class StorageBucketsDurability(Enum):
    RELAXED = "relaxed"
    STRICT = "strict"



class StorageBucket(TypedDict):
    storageKey: "SerializedStorageKey"
    name: "Optional[str]"
    """If not specified, it is the default bucket of the storageKey."""



class StorageBucketInfo(TypedDict):
    bucket: "StorageBucket"
    id: "str"
    expiration: "TimeSinceEpoch"
    quota: "float"
    """Storage quota (bytes)."""
    persistent: "bool"
    durability: "StorageBucketsDurability"



class AttributionReportingSourceType(Enum):
    NAVIGATION = "navigation"
    EVENT = "event"



UnsignedInt64AsBase10 = str



UnsignedInt128AsBase16 = str



SignedInt64AsBase10 = str



class AttributionReportingFilterDataEntry(TypedDict):
    key: "str"
    values: "List[str]"



class AttributionReportingFilterConfig(TypedDict):
    filterValues: "List[AttributionReportingFilterDataEntry]"
    lookbackWindow: "Optional[int]"
    """duration in seconds"""



class AttributionReportingFilterPair(TypedDict):
    filters: "List[AttributionReportingFilterConfig]"
    notFilters: "List[AttributionReportingFilterConfig]"



class AttributionReportingAggregationKeysEntry(TypedDict):
    key: "str"
    value: "UnsignedInt128AsBase16"



class AttributionReportingEventReportWindows(TypedDict):
    start: "int"
    """duration in seconds"""
    ends: "List[int]"
    """duration in seconds"""



class AttributionReportingTriggerDataMatching(Enum):
    EXACT = "exact"
    MODULUS = "modulus"



class AttributionReportingAggregatableDebugReportingData(TypedDict):
    keyPiece: "UnsignedInt128AsBase16"
    value: "float"
    """number instead of integer because not all uint32 can be represented by
int"""
    types: "List[str]"



class AttributionReportingAggregatableDebugReportingConfig(TypedDict):
    budget: "Optional[float]"
    """number instead of integer because not all uint32 can be represented by
int, only present for source registrations"""
    keyPiece: "UnsignedInt128AsBase16"
    debugData: "List[AttributionReportingAggregatableDebugReportingData]"
    aggregationCoordinatorOrigin: "Optional[str]"



class AttributionScopesData(TypedDict):
    values: "List[str]"
    limit: "float"
    """number instead of integer because not all uint32 can be represented by
int"""
    maxEventStates: "float"



class AttributionReportingNamedBudgetDef(TypedDict):
    name: "str"
    budget: "int"



class AttributionReportingSourceRegistration(TypedDict):
    time: "TimeSinceEpoch"
    expiry: "int"
    """duration in seconds"""
    triggerData: "List[float]"
    """number instead of integer because not all uint32 can be represented by
int"""
    eventReportWindows: "AttributionReportingEventReportWindows"
    aggregatableReportWindow: "int"
    """duration in seconds"""
    type: "AttributionReportingSourceType"
    sourceOrigin: "str"
    reportingOrigin: "str"
    destinationSites: "List[str]"
    eventId: "UnsignedInt64AsBase10"
    priority: "SignedInt64AsBase10"
    filterData: "List[AttributionReportingFilterDataEntry]"
    aggregationKeys: "List[AttributionReportingAggregationKeysEntry]"
    debugKey: "Optional[UnsignedInt64AsBase10]"
    triggerDataMatching: "AttributionReportingTriggerDataMatching"
    destinationLimitPriority: "SignedInt64AsBase10"
    aggregatableDebugReportingConfig: "AttributionReportingAggregatableDebugReportingConfig"
    scopesData: "Optional[AttributionScopesData]"
    maxEventLevelReports: "int"
    namedBudgets: "List[AttributionReportingNamedBudgetDef]"
    debugReporting: "bool"
    eventLevelEpsilon: "float"



class AttributionReportingSourceRegistrationResult(Enum):
    SUCCESS = "success"
    INTERNALERROR = "internalError"
    INSUFFICIENTSOURCECAPACITY = "insufficientSourceCapacity"
    INSUFFICIENTUNIQUEDESTINATIONCAPACITY = "insufficientUniqueDestinationCapacity"
    EXCESSIVEREPORTINGORIGINS = "excessiveReportingOrigins"
    PROHIBITEDBYBROWSERPOLICY = "prohibitedByBrowserPolicy"
    SUCCESSNOISED = "successNoised"
    DESTINATIONREPORTINGLIMITREACHED = "destinationReportingLimitReached"
    DESTINATIONGLOBALLIMITREACHED = "destinationGlobalLimitReached"
    DESTINATIONBOTHLIMITSREACHED = "destinationBothLimitsReached"
    REPORTINGORIGINSPERSITELIMITREACHED = "reportingOriginsPerSiteLimitReached"
    EXCEEDSMAXCHANNELCAPACITY = "exceedsMaxChannelCapacity"
    EXCEEDSMAXSCOPESCHANNELCAPACITY = "exceedsMaxScopesChannelCapacity"
    EXCEEDSMAXTRIGGERSTATECARDINALITY = "exceedsMaxTriggerStateCardinality"
    EXCEEDSMAXEVENTSTATESLIMIT = "exceedsMaxEventStatesLimit"
    DESTINATIONPERDAYREPORTINGLIMITREACHED = "destinationPerDayReportingLimitReached"



class AttributionReportingSourceRegistrationTimeConfig(Enum):
    INCLUDE = "include"
    EXCLUDE = "exclude"



class AttributionReportingAggregatableValueDictEntry(TypedDict):
    key: "str"
    value: "float"
    """number instead of integer because not all uint32 can be represented by
int"""
    filteringId: "UnsignedInt64AsBase10"



class AttributionReportingAggregatableValueEntry(TypedDict):
    values: "List[AttributionReportingAggregatableValueDictEntry]"
    filters: "AttributionReportingFilterPair"



class AttributionReportingEventTriggerData(TypedDict):
    data: "UnsignedInt64AsBase10"
    priority: "SignedInt64AsBase10"
    dedupKey: "Optional[UnsignedInt64AsBase10]"
    filters: "AttributionReportingFilterPair"



class AttributionReportingAggregatableTriggerData(TypedDict):
    keyPiece: "UnsignedInt128AsBase16"
    sourceKeys: "List[str]"
    filters: "AttributionReportingFilterPair"



class AttributionReportingAggregatableDedupKey(TypedDict):
    dedupKey: "Optional[UnsignedInt64AsBase10]"
    filters: "AttributionReportingFilterPair"



class AttributionReportingNamedBudgetCandidate(TypedDict):
    name: "Optional[str]"
    filters: "AttributionReportingFilterPair"



class AttributionReportingTriggerRegistration(TypedDict):
    filters: "AttributionReportingFilterPair"
    debugKey: "Optional[UnsignedInt64AsBase10]"
    aggregatableDedupKeys: "List[AttributionReportingAggregatableDedupKey]"
    eventTriggerData: "List[AttributionReportingEventTriggerData]"
    aggregatableTriggerData: "List[AttributionReportingAggregatableTriggerData]"
    aggregatableValues: "List[AttributionReportingAggregatableValueEntry]"
    aggregatableFilteringIdMaxBytes: "int"
    debugReporting: "bool"
    aggregationCoordinatorOrigin: "Optional[str]"
    sourceRegistrationTimeConfig: "AttributionReportingSourceRegistrationTimeConfig"
    triggerContextId: "Optional[str]"
    aggregatableDebugReportingConfig: "AttributionReportingAggregatableDebugReportingConfig"
    scopes: "List[str]"
    namedBudgets: "List[AttributionReportingNamedBudgetCandidate]"



class AttributionReportingEventLevelResult(Enum):
    SUCCESS = "success"
    SUCCESSDROPPEDLOWERPRIORITY = "successDroppedLowerPriority"
    INTERNALERROR = "internalError"
    NOCAPACITYFORATTRIBUTIONDESTINATION = "noCapacityForAttributionDestination"
    NOMATCHINGSOURCES = "noMatchingSources"
    DEDUPLICATED = "deduplicated"
    EXCESSIVEATTRIBUTIONS = "excessiveAttributions"
    PRIORITYTOOLOW = "priorityTooLow"
    NEVERATTRIBUTEDSOURCE = "neverAttributedSource"
    EXCESSIVEREPORTINGORIGINS = "excessiveReportingOrigins"
    NOMATCHINGSOURCEFILTERDATA = "noMatchingSourceFilterData"
    PROHIBITEDBYBROWSERPOLICY = "prohibitedByBrowserPolicy"
    NOMATCHINGCONFIGURATIONS = "noMatchingConfigurations"
    EXCESSIVEREPORTS = "excessiveReports"
    FALSELYATTRIBUTEDSOURCE = "falselyAttributedSource"
    REPORTWINDOWPASSED = "reportWindowPassed"
    NOTREGISTERED = "notRegistered"
    REPORTWINDOWNOTSTARTED = "reportWindowNotStarted"
    NOMATCHINGTRIGGERDATA = "noMatchingTriggerData"



class AttributionReportingAggregatableResult(Enum):
    SUCCESS = "success"
    INTERNALERROR = "internalError"
    NOCAPACITYFORATTRIBUTIONDESTINATION = "noCapacityForAttributionDestination"
    NOMATCHINGSOURCES = "noMatchingSources"
    EXCESSIVEATTRIBUTIONS = "excessiveAttributions"
    EXCESSIVEREPORTINGORIGINS = "excessiveReportingOrigins"
    NOHISTOGRAMS = "noHistograms"
    INSUFFICIENTBUDGET = "insufficientBudget"
    INSUFFICIENTNAMEDBUDGET = "insufficientNamedBudget"
    NOMATCHINGSOURCEFILTERDATA = "noMatchingSourceFilterData"
    NOTREGISTERED = "notRegistered"
    PROHIBITEDBYBROWSERPOLICY = "prohibitedByBrowserPolicy"
    DEDUPLICATED = "deduplicated"
    REPORTWINDOWPASSED = "reportWindowPassed"
    EXCESSIVEREPORTS = "excessiveReports"



class AttributionReportingReportResult(Enum):
    SENT = "sent"
    PROHIBITED = "prohibited"
    FAILEDTOASSEMBLE = "failedToAssemble"
    EXPIRED = "expired"



"""A single Related Website Set object."""
class RelatedWebsiteSet(TypedDict):
    primarySites: "List[str]"
    """The primary site of this set, along with the ccTLDs if there is any."""
    associatedSites: "List[str]"
    """The associated sites of this set, along with the ccTLDs if there is any."""
    serviceSites: "List[str]"
    """The service sites of this set, along with the ccTLDs if there is any."""
