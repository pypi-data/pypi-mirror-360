# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Input Domain Commands"""

from typing import List, Optional
from typing_extensions import TypedDict

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from .types import DragData
    from .types import GestureSourceType
    from .types import MouseButton
    from .types import TimeSinceEpoch
    from .types import TouchPoint

class DispatchDragEventParameters(TypedDict):
    type: "str"
    """Type of the drag event."""
    x: "float"
    """X coordinate of the event relative to the main frame's viewport in CSS pixels."""
    y: "float"
    """Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to
the top of the viewport and Y increases as it proceeds towards the bottom of the viewport."""
    data: "DragData"
    modifiers: "Optional[int]"
    """Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
(default: 0)."""





class DispatchKeyEventParameters(TypedDict):
    type: "str"
    """Type of the key event."""
    modifiers: "Optional[int]"
    """Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
(default: 0)."""
    timestamp: "Optional[TimeSinceEpoch]"
    """Time at which the event occurred."""
    text: "Optional[str]"
    """Text as generated by processing a virtual key code with a keyboard layout. Not needed for
for `keyUp` and `rawKeyDown` events (default: \"\")"""
    unmodifiedText: "Optional[str]"
    """Text that would have been generated by the keyboard if no modifiers were pressed (except for
shift). Useful for shortcut (accelerator) key handling (default: \"\")."""
    keyIdentifier: "Optional[str]"
    """Unique key identifier (e.g., 'U+0041') (default: \"\")."""
    code: "Optional[str]"
    """Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: \"\")."""
    key: "Optional[str]"
    """Unique DOM defined string value describing the meaning of the key in the context of active
modifiers, keyboard layout, etc (e.g., 'AltGr') (default: \"\")."""
    windowsVirtualKeyCode: "Optional[int]"
    """Windows virtual key code (default: 0)."""
    nativeVirtualKeyCode: "Optional[int]"
    """Native virtual key code (default: 0)."""
    autoRepeat: "Optional[bool]"
    """Whether the event was generated from auto repeat (default: false)."""
    isKeypad: "Optional[bool]"
    """Whether the event was generated from the keypad (default: false)."""
    isSystemKey: "Optional[bool]"
    """Whether the event was a system key event (default: false)."""
    location: "Optional[int]"
    """Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default:
0)."""
    commands: "Optional[List[str]]"
    """Editing commands to send with the key event (e.g., 'selectAll') (default: []).
These are related to but not equal the command names used in `document.execCommand` and NSStandardKeyBindingResponding.
See https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/editing/commands/editor_command_names.h for valid command names."""





class InsertTextParameters(TypedDict):
    text: "str"
    """The text to insert."""





class ImeSetCompositionParameters(TypedDict):
    text: "str"
    """The text to insert"""
    selectionStart: "int"
    """selection start"""
    selectionEnd: "int"
    """selection end"""
    replacementStart: "Optional[int]"
    """replacement start"""
    replacementEnd: "Optional[int]"
    """replacement end"""





class DispatchMouseEventParameters(TypedDict):
    type: "str"
    """Type of the mouse event."""
    x: "float"
    """X coordinate of the event relative to the main frame's viewport in CSS pixels."""
    y: "float"
    """Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers to
the top of the viewport and Y increases as it proceeds towards the bottom of the viewport."""
    modifiers: "Optional[int]"
    """Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
(default: 0)."""
    timestamp: "Optional[TimeSinceEpoch]"
    """Time at which the event occurred."""
    button: "Optional[MouseButton]"
    """Mouse button (default: \"none\")."""
    buttons: "Optional[int]"
    """A number indicating which buttons are pressed on the mouse when a mouse event is triggered.
Left=1, Right=2, Middle=4, Back=8, Forward=16, None=0."""
    clickCount: "Optional[int]"
    """Number of times the mouse button was clicked (default: 0)."""
    force: "Optional[float]"
    """The normalized pressure, which has a range of [0,1] (default: 0)."""
    tangentialPressure: "Optional[float]"
    """The normalized tangential pressure, which has a range of [-1,1] (default: 0)."""
    tiltX: "Optional[float]"
    """The plane angle between the Y-Z plane and the plane containing both the stylus axis and the Y axis, in degrees of the range [-90,90], a positive tiltX is to the right (default: 0)."""
    tiltY: "Optional[float]"
    """The plane angle between the X-Z plane and the plane containing both the stylus axis and the X axis, in degrees of the range [-90,90], a positive tiltY is towards the user (default: 0)."""
    twist: "Optional[int]"
    """The clockwise rotation of a pen stylus around its own major axis, in degrees in the range [0,359] (default: 0)."""
    deltaX: "Optional[float]"
    """X delta in CSS pixels for mouse wheel event (default: 0)."""
    deltaY: "Optional[float]"
    """Y delta in CSS pixels for mouse wheel event (default: 0)."""
    pointerType: "Optional[str]"
    """Pointer type (default: \"mouse\")."""





class DispatchTouchEventParameters(TypedDict):
    type: "str"
    """Type of the touch event. TouchEnd and TouchCancel must not contain any touch points, while
TouchStart and TouchMove must contains at least one."""
    touchPoints: "List[TouchPoint]"
    """Active touch points on the touch device. One event per any changed point (compared to
previous touch event in a sequence) is generated, emulating pressing/moving/releasing points
one by one."""
    modifiers: "Optional[int]"
    """Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
(default: 0)."""
    timestamp: "Optional[TimeSinceEpoch]"
    """Time at which the event occurred."""





class EmulateTouchFromMouseEventParameters(TypedDict):
    type: "str"
    """Type of the mouse event."""
    x: "int"
    """X coordinate of the mouse pointer in DIP."""
    y: "int"
    """Y coordinate of the mouse pointer in DIP."""
    button: "MouseButton"
    """Mouse button. Only \"none\", \"left\", \"right\" are supported."""
    timestamp: "Optional[TimeSinceEpoch]"
    """Time at which the event occurred (default: current time)."""
    deltaX: "Optional[float]"
    """X delta in DIP for mouse wheel event (default: 0)."""
    deltaY: "Optional[float]"
    """Y delta in DIP for mouse wheel event (default: 0)."""
    modifiers: "Optional[int]"
    """Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8
(default: 0)."""
    clickCount: "Optional[int]"
    """Number of times the mouse button was clicked (default: 0)."""





class SetIgnoreInputEventsParameters(TypedDict):
    ignore: "bool"
    """Ignores input events processing when set to true."""





class SetInterceptDragsParameters(TypedDict):
    enabled: "bool"





class SynthesizePinchGestureParameters(TypedDict):
    x: "float"
    """X coordinate of the start of the gesture in CSS pixels."""
    y: "float"
    """Y coordinate of the start of the gesture in CSS pixels."""
    scaleFactor: "float"
    """Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out)."""
    relativeSpeed: "Optional[int]"
    """Relative pointer speed in pixels per second (default: 800)."""
    gestureSourceType: "Optional[GestureSourceType]"
    """Which type of input events to be generated (default: 'default', which queries the platform
for the preferred input type)."""





class SynthesizeScrollGestureParameters(TypedDict):
    x: "float"
    """X coordinate of the start of the gesture in CSS pixels."""
    y: "float"
    """Y coordinate of the start of the gesture in CSS pixels."""
    xDistance: "Optional[float]"
    """The distance to scroll along the X axis (positive to scroll left)."""
    yDistance: "Optional[float]"
    """The distance to scroll along the Y axis (positive to scroll up)."""
    xOverscroll: "Optional[float]"
    """The number of additional pixels to scroll back along the X axis, in addition to the given
distance."""
    yOverscroll: "Optional[float]"
    """The number of additional pixels to scroll back along the Y axis, in addition to the given
distance."""
    preventFling: "Optional[bool]"
    """Prevent fling (default: true)."""
    speed: "Optional[int]"
    """Swipe speed in pixels per second (default: 800)."""
    gestureSourceType: "Optional[GestureSourceType]"
    """Which type of input events to be generated (default: 'default', which queries the platform
for the preferred input type)."""
    repeatCount: "Optional[int]"
    """The number of times to repeat the gesture (default: 0)."""
    repeatDelayMs: "Optional[int]"
    """The number of milliseconds delay between each repeat. (default: 250)."""
    interactionMarkerName: "Optional[str]"
    """The name of the interaction markers to generate, if not empty (default: \"\")."""





class SynthesizeTapGestureParameters(TypedDict):
    x: "float"
    """X coordinate of the start of the gesture in CSS pixels."""
    y: "float"
    """Y coordinate of the start of the gesture in CSS pixels."""
    duration: "Optional[int]"
    """Duration between touchdown and touchup events in ms (default: 50)."""
    tapCount: "Optional[int]"
    """Number of times to perform the tap (e.g. 2 for double tap, default: 1)."""
    gestureSourceType: "Optional[GestureSourceType]"
    """Which type of input events to be generated (default: 'default', which queries the platform
for the preferred input type)."""


