# This file is auto-generated by the CDP protocol generator.
# Do not edit this file manually as your changes will be overwritten.
# Generated from Chrome DevTools Protocol specifications.

"""CDP Debugger Domain Types"""

from enum import Enum
from typing import List, Optional
from typing_extensions import TypedDict

from typing import TYPE_CHECKING

if TYPE_CHECKING:
    from ..runtime.types import RemoteObject
    from ..runtime.types import ScriptId

"""Breakpoint identifier."""
BreakpointId = str



"""Call frame identifier."""
CallFrameId = str



"""Location in the source code."""
class Location(TypedDict):
    scriptId: "ScriptId"
    """Script identifier as reported in the `Debugger.scriptParsed`."""
    lineNumber: "int"
    """Line number in the script (0-based)."""
    columnNumber: "Optional[int]"
    """Column number in the script (0-based)."""



"""Location in the source code."""
class ScriptPosition(TypedDict):
    lineNumber: "int"
    columnNumber: "int"



"""Location range within one script."""
class LocationRange(TypedDict):
    scriptId: "ScriptId"
    start: "ScriptPosition"
    end: "ScriptPosition"



"""JavaScript call frame. Array of call frames form the call stack."""
class CallFrame(TypedDict):
    callFrameId: "CallFrameId"
    """Call frame identifier. This identifier is only valid while the virtual machine is paused."""
    functionName: "str"
    """Name of the JavaScript function called on this call frame."""
    functionLocation: "Optional[Location]"
    """Location in the source code."""
    location: "Location"
    """Location in the source code."""
    url: "str"
    """JavaScript script name or url.
Deprecated in favor of using the `location.scriptId` to resolve the URL via a previously
sent `Debugger.scriptParsed` event."""
    scopeChain: "List[Scope]"
    """Scope chain for this call frame."""
    this: "RemoteObject"
    """`this` object for this call frame."""
    returnValue: "Optional[RemoteObject]"
    """The value being returned, if the function is at return point."""
    canBeRestarted: "Optional[bool]"
    """Valid only while the VM is paused and indicates whether this frame
can be restarted or not. Note that a `true` value here does not
guarantee that Debugger#restartFrame with this CallFrameId will be
successful, but it is very likely."""



"""Scope description."""
class Scope(TypedDict):
    type: "str"
    """Scope type."""
    object: "RemoteObject"
    """Object representing the scope. For `global` and `with` scopes it represents the actual
object; for the rest of the scopes, it is artificial transient object enumerating scope
variables as its properties."""
    name: "Optional[str]"
    startLocation: "Optional[Location]"
    """Location in the source code where scope starts"""
    endLocation: "Optional[Location]"
    """Location in the source code where scope ends"""



"""Search match for resource."""
class SearchMatch(TypedDict):
    lineNumber: "float"
    """Line number in resource content."""
    lineContent: "str"
    """Line with match content."""



class BreakLocation(TypedDict):
    scriptId: "ScriptId"
    """Script identifier as reported in the `Debugger.scriptParsed`."""
    lineNumber: "int"
    """Line number in the script (0-based)."""
    columnNumber: "Optional[int]"
    """Column number in the script (0-based)."""
    type: "Optional[str]"



class WasmDisassemblyChunk(TypedDict):
    lines: "List[str]"
    """The next chunk of disassembled lines."""
    bytecodeOffsets: "List[int]"
    """The bytecode offsets describing the start of each line."""



"""Enum of possible script languages."""
class ScriptLanguage(Enum):
    JAVASCRIPT = "JavaScript"
    WEBASSEMBLY = "WebAssembly"



"""Debug symbols available for a wasm script."""
class DebugSymbols(TypedDict):
    type: "str"
    """Type of the debug symbols."""
    externalURL: "Optional[str]"
    """URL of the external symbol source."""



class ResolvedBreakpoint(TypedDict):
    breakpointId: "BreakpointId"
    """Breakpoint unique identifier."""
    location: "Location"
    """Actual breakpoint location."""
