"""
Code generated from Facebook API specs - DO NOT EDIT MANUALLY.
This file contains all models and enums from the Facebook Business API.
"""

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import TYPE_CHECKING, Any, Literal, Union

from pydantic import BaseModel, ConfigDict, Field, field_serializer

# ============================================================================
# ENUMS
# ============================================================================


class AdAccountAgencyFeeConfig_status(str, Enum):
    """AdAccountAgencyFeeConfig_status enum values."""

    ACTIVE = "ACTIVE"
    ARCHIVED = "ARCHIVED"
    DRAFT = "DRAFT"
    UNKNOWN = "UNKNOWN"


class AdAccountBusinessConstraints_status(str, Enum):
    """AdAccountBusinessConstraints_status enum values."""

    ACTIVE = "ACTIVE"
    APPLICATION_IN_PROGRESS = "APPLICATION_IN_PROGRESS"
    WITH_CAMPAIGN_ERROR = "WITH_CAMPAIGN_ERROR"


class AdAccountDefaultObjective_default_objective_for_user(str, Enum):
    """AdAccountDefaultObjective_default_objective_for_user enum values."""

    APP_INSTALLS = "APP_INSTALLS"
    BRAND_AWARENESS = "BRAND_AWARENESS"
    EVENT_RESPONSES = "EVENT_RESPONSES"
    LEAD_GENERATION = "LEAD_GENERATION"
    LINK_CLICKS = "LINK_CLICKS"
    LOCAL_AWARENESS = "LOCAL_AWARENESS"
    MESSAGES = "MESSAGES"
    OFFER_CLAIMS = "OFFER_CLAIMS"
    OUTCOME_APP_PROMOTION = "OUTCOME_APP_PROMOTION"
    OUTCOME_AWARENESS = "OUTCOME_AWARENESS"
    OUTCOME_ENGAGEMENT = "OUTCOME_ENGAGEMENT"
    OUTCOME_LEADS = "OUTCOME_LEADS"
    OUTCOME_SALES = "OUTCOME_SALES"
    OUTCOME_TRAFFIC = "OUTCOME_TRAFFIC"
    PAGE_LIKES = "PAGE_LIKES"
    POST_ENGAGEMENT = "POST_ENGAGEMENT"
    PRODUCT_CATALOG_SALES = "PRODUCT_CATALOG_SALES"
    REACH = "REACH"
    STORE_VISITS = "STORE_VISITS"
    VIDEO_VIEWS = "VIDEO_VIEWS"
    WEBSITE_CONVERSIONS = "WEBSITE_CONVERSIONS"


class AdAccountDefaultObjective_objective_for_level(str, Enum):
    """AdAccountDefaultObjective_objective_for_level enum values."""

    APP_INSTALLS = "APP_INSTALLS"
    BRAND_AWARENESS = "BRAND_AWARENESS"
    EVENT_RESPONSES = "EVENT_RESPONSES"
    LEAD_GENERATION = "LEAD_GENERATION"
    LINK_CLICKS = "LINK_CLICKS"
    LOCAL_AWARENESS = "LOCAL_AWARENESS"
    MESSAGES = "MESSAGES"
    OFFER_CLAIMS = "OFFER_CLAIMS"
    OUTCOME_APP_PROMOTION = "OUTCOME_APP_PROMOTION"
    OUTCOME_AWARENESS = "OUTCOME_AWARENESS"
    OUTCOME_ENGAGEMENT = "OUTCOME_ENGAGEMENT"
    OUTCOME_LEADS = "OUTCOME_LEADS"
    OUTCOME_SALES = "OUTCOME_SALES"
    OUTCOME_TRAFFIC = "OUTCOME_TRAFFIC"
    PAGE_LIKES = "PAGE_LIKES"
    POST_ENGAGEMENT = "POST_ENGAGEMENT"
    PRODUCT_CATALOG_SALES = "PRODUCT_CATALOG_SALES"
    REACH = "REACH"
    STORE_VISITS = "STORE_VISITS"
    VIDEO_VIEWS = "VIDEO_VIEWS"
    WEBSITE_CONVERSIONS = "WEBSITE_CONVERSIONS"


class AdAccountOptimizationGoalsAEMv2Eligibility_optimization_goal(str, Enum):
    """AdAccountOptimizationGoalsAEMv2Eligibility_optimization_goal enum values."""

    ADVERTISER_SILOED_VALUE = "ADVERTISER_SILOED_VALUE"
    AD_RECALL_LIFT = "AD_RECALL_LIFT"
    APP_INSTALLS = "APP_INSTALLS"
    APP_INSTALLS_AND_OFFSITE_CONVERSIONS = "APP_INSTALLS_AND_OFFSITE_CONVERSIONS"
    CONVERSATIONS = "CONVERSATIONS"
    DERIVED_EVENTS = "DERIVED_EVENTS"
    ENGAGED_USERS = "ENGAGED_USERS"
    EVENT_RESPONSES = "EVENT_RESPONSES"
    IMPRESSIONS = "IMPRESSIONS"
    IN_APP_VALUE = "IN_APP_VALUE"
    LANDING_PAGE_VIEWS = "LANDING_PAGE_VIEWS"
    LEAD_GENERATION = "LEAD_GENERATION"
    LINK_CLICKS = "LINK_CLICKS"
    MEANINGFUL_CALL_ATTEMPT = "MEANINGFUL_CALL_ATTEMPT"
    MESSAGING_APPOINTMENT_CONVERSION = "MESSAGING_APPOINTMENT_CONVERSION"
    MESSAGING_PURCHASE_CONVERSION = "MESSAGING_PURCHASE_CONVERSION"
    NONE = "NONE"
    OFFSITE_CONVERSIONS = "OFFSITE_CONVERSIONS"
    PAGE_LIKES = "PAGE_LIKES"
    POST_ENGAGEMENT = "POST_ENGAGEMENT"
    PROFILE_AND_PAGE_ENGAGEMENT = "PROFILE_AND_PAGE_ENGAGEMENT"
    PROFILE_VISIT = "PROFILE_VISIT"
    QUALITY_CALL = "QUALITY_CALL"
    QUALITY_LEAD = "QUALITY_LEAD"
    REACH = "REACH"
    REMINDERS_SET = "REMINDERS_SET"
    SUBSCRIBERS = "SUBSCRIBERS"
    THRUPLAY = "THRUPLAY"
    VALUE = "VALUE"
    VISIT_INSTAGRAM_PROFILE = "VISIT_INSTAGRAM_PROFILE"


class AdAccountUserSettings_syd_campaign_trends_objective(str, Enum):
    """AdAccountUserSettings_syd_campaign_trends_objective enum values."""

    APP_INSTALLS = "APP_INSTALLS"
    BRAND_AWARENESS = "BRAND_AWARENESS"
    EVENT_RESPONSES = "EVENT_RESPONSES"
    LEAD_GENERATION = "LEAD_GENERATION"
    LINK_CLICKS = "LINK_CLICKS"
    LOCAL_AWARENESS = "LOCAL_AWARENESS"
    MESSAGES = "MESSAGES"
    OFFER_CLAIMS = "OFFER_CLAIMS"
    OUTCOME_APP_PROMOTION = "OUTCOME_APP_PROMOTION"
    OUTCOME_AWARENESS = "OUTCOME_AWARENESS"
    OUTCOME_ENGAGEMENT = "OUTCOME_ENGAGEMENT"
    OUTCOME_LEADS = "OUTCOME_LEADS"
    OUTCOME_SALES = "OUTCOME_SALES"
    OUTCOME_TRAFFIC = "OUTCOME_TRAFFIC"
    PAGE_LIKES = "PAGE_LIKES"
    POST_ENGAGEMENT = "POST_ENGAGEMENT"
    PRODUCT_CATALOG_SALES = "PRODUCT_CATALOG_SALES"
    REACH = "REACH"
    STORE_VISITS = "STORE_VISITS"
    VIDEO_VIEWS = "VIDEO_VIEWS"
    WEBSITE_CONVERSIONS = "WEBSITE_CONVERSIONS"


class AdActivity_event_type(str, Enum):
    """AdActivity_event_type enum values."""

    account_spending_limit_reached = "account_spending_limit_reached"
    ad_account_add_user_to_role = "ad_account_add_user_to_role"
    ad_account_billing_charge = "ad_account_billing_charge"
    ad_account_billing_charge_failed = "ad_account_billing_charge_failed"
    ad_account_billing_chargeback = "ad_account_billing_chargeback"
    ad_account_billing_chargeback_reversal = "ad_account_billing_chargeback_reversal"
    ad_account_billing_decline = "ad_account_billing_decline"
    ad_account_billing_refund = "ad_account_billing_refund"
    ad_account_remove_spend_limit = "ad_account_remove_spend_limit"
    ad_account_remove_user_from_role = "ad_account_remove_user_from_role"
    ad_account_reset_spend_limit = "ad_account_reset_spend_limit"
    ad_account_set_business_information = "ad_account_set_business_information"
    ad_account_update_audience_type_url_parameter = "ad_account_update_audience_type_url_parameter"
    ad_account_update_spend_limit = "ad_account_update_spend_limit"
    ad_account_update_status = "ad_account_update_status"
    ad_review_approved = "ad_review_approved"
    ad_review_declined = "ad_review_declined"
    adaccount_update_audience_segment = "adaccount_update_audience_segment"
    add_funding_source = "add_funding_source"
    add_images = "add_images"
    billing_event = "billing_event"
    campaign_ended = "campaign_ended"
    campaign_spending_limit_reached = "campaign_spending_limit_reached"
    conversion_event_updated = "conversion_event_updated"
    create_ad = "create_ad"
    create_ad_set = "create_ad_set"
    create_audience = "create_audience"
    create_campaign_group = "create_campaign_group"
    create_campaign_legacy = "create_campaign_legacy"
    delete_audience = "delete_audience"
    delete_images = "delete_images"
    di_ad_set_learning_stage_exit = "di_ad_set_learning_stage_exit"
    edit_and_update_ad_creative = "edit_and_update_ad_creative"
    edit_images = "edit_images"
    first_delivery_event = "first_delivery_event"
    funding_event_initiated = "funding_event_initiated"
    funding_event_successful = "funding_event_successful"
    lifetime_budget_spent = "lifetime_budget_spent"
    merge_campaigns = "merge_campaigns"
    receive_audience = "receive_audience"
    remove_funding_source = "remove_funding_source"
    remove_shared_audience = "remove_shared_audience"
    share_audience = "share_audience"
    unknown = "unknown"
    unshare_audience = "unshare_audience"
    update_ad_bid_info = "update_ad_bid_info"
    update_ad_bid_type = "update_ad_bid_type"
    update_ad_creative = "update_ad_creative"
    update_ad_friendly_name = "update_ad_friendly_name"
    update_ad_labels = "update_ad_labels"
    update_ad_run_status = "update_ad_run_status"
    update_ad_run_status_to_be_set_after_review = "update_ad_run_status_to_be_set_after_review"
    update_ad_set_ad_keywords = "update_ad_set_ad_keywords"
    update_ad_set_bid_adjustments = "update_ad_set_bid_adjustments"
    update_ad_set_bid_strategy = "update_ad_set_bid_strategy"
    update_ad_set_bidding = "update_ad_set_bidding"
    update_ad_set_budget = "update_ad_set_budget"
    update_ad_set_duration = "update_ad_set_duration"
    update_ad_set_learning_stage_status = "update_ad_set_learning_stage_status"
    update_ad_set_min_spend_target = "update_ad_set_min_spend_target"
    update_ad_set_name = "update_ad_set_name"
    update_ad_set_optimization_goal = "update_ad_set_optimization_goal"
    update_ad_set_run_status = "update_ad_set_run_status"
    update_ad_set_spend_cap = "update_ad_set_spend_cap"
    update_ad_set_target_spec = "update_ad_set_target_spec"
    update_ad_targets_spec = "update_ad_targets_spec"
    update_adgroup_stop_delivery = "update_adgroup_stop_delivery"
    update_audience = "update_audience"
    update_campaign_ad_scheduling = "update_campaign_ad_scheduling"
    update_campaign_budget = "update_campaign_budget"
    update_campaign_budget_optimization_toggling_status = (
        "update_campaign_budget_optimization_toggling_status"
    )
    update_campaign_budget_scheduling_state = "update_campaign_budget_scheduling_state"
    update_campaign_conversion_goal = "update_campaign_conversion_goal"
    update_campaign_delivery_destination = "update_campaign_delivery_destination"
    update_campaign_delivery_type = "update_campaign_delivery_type"
    update_campaign_group_ad_scheduling = "update_campaign_group_ad_scheduling"
    update_campaign_group_budget_scheduling_state = "update_campaign_group_budget_scheduling_state"
    update_campaign_group_delivery_type = "update_campaign_group_delivery_type"
    update_campaign_group_high_demand_periods = "update_campaign_group_high_demand_periods"
    update_campaign_group_spend_cap = "update_campaign_group_spend_cap"
    update_campaign_high_demand_periods = "update_campaign_high_demand_periods"
    update_campaign_name = "update_campaign_name"
    update_campaign_run_status = "update_campaign_run_status"
    update_campaign_schedule = "update_campaign_schedule"
    update_campaign_value_adjustment_rule = "update_campaign_value_adjustment_rule"
    update_delivery_type_cross_level_shift = "update_delivery_type_cross_level_shift"


class AdAssetCustomizationRuleCustomizationSpec_device_platforms(str, Enum):
    """AdAssetCustomizationRuleCustomizationSpec_device_platforms enum values."""

    desktop = "desktop"
    mobile = "mobile"


class AdAssetFeedSpec_call_to_action_types(str, Enum):
    """AdAssetFeedSpec_call_to_action_types enum values."""

    ADD_TO_CART = "ADD_TO_CART"
    APPLY_NOW = "APPLY_NOW"
    ASK_ABOUT_SERVICES = "ASK_ABOUT_SERVICES"
    ASK_FOR_MORE_INFO = "ASK_FOR_MORE_INFO"
    AUDIO_CALL = "AUDIO_CALL"
    BOOK_A_CONSULTATION = "BOOK_A_CONSULTATION"
    BOOK_NOW = "BOOK_NOW"
    BOOK_TRAVEL = "BOOK_TRAVEL"
    BUY = "BUY"
    BUY_NOW = "BUY_NOW"
    BUY_TICKETS = "BUY_TICKETS"
    BUY_VIA_MESSAGE = "BUY_VIA_MESSAGE"
    CALL = "CALL"
    CALL_ME = "CALL_ME"
    CALL_NOW = "CALL_NOW"
    CHAT_WITH_US = "CHAT_WITH_US"
    CONFIRM = "CONFIRM"
    CONTACT = "CONTACT"
    CONTACT_US = "CONTACT_US"
    DONATE = "DONATE"
    DONATE_NOW = "DONATE_NOW"
    DOWNLOAD = "DOWNLOAD"
    EVENT_RSVP = "EVENT_RSVP"
    FIND_A_GROUP = "FIND_A_GROUP"
    FIND_YOUR_GROUPS = "FIND_YOUR_GROUPS"
    FOLLOW_NEWS_STORYLINE = "FOLLOW_NEWS_STORYLINE"
    FOLLOW_PAGE = "FOLLOW_PAGE"
    FOLLOW_USER = "FOLLOW_USER"
    GET_A_QUOTE = "GET_A_QUOTE"
    GET_DIRECTIONS = "GET_DIRECTIONS"
    GET_IN_TOUCH = "GET_IN_TOUCH"
    GET_OFFER = "GET_OFFER"
    GET_OFFER_VIEW = "GET_OFFER_VIEW"
    GET_PROMOTIONS = "GET_PROMOTIONS"
    GET_QUOTE = "GET_QUOTE"
    GET_SHOWTIMES = "GET_SHOWTIMES"
    GET_STARTED = "GET_STARTED"
    INQUIRE_NOW = "INQUIRE_NOW"
    INSTALL_APP = "INSTALL_APP"
    INSTALL_MOBILE_APP = "INSTALL_MOBILE_APP"
    JOIN_CHANNEL = "JOIN_CHANNEL"
    LEARN_MORE = "LEARN_MORE"
    LIKE_PAGE = "LIKE_PAGE"
    LISTEN_MUSIC = "LISTEN_MUSIC"
    LISTEN_NOW = "LISTEN_NOW"
    MAKE_AN_APPOINTMENT = "MAKE_AN_APPOINTMENT"
    MESSAGE_PAGE = "MESSAGE_PAGE"
    MOBILE_DOWNLOAD = "MOBILE_DOWNLOAD"
    NO_BUTTON = "NO_BUTTON"
    OPEN_INSTANT_APP = "OPEN_INSTANT_APP"
    OPEN_LINK = "OPEN_LINK"
    ORDER_NOW = "ORDER_NOW"
    PAY_TO_ACCESS = "PAY_TO_ACCESS"
    PLAY_GAME = "PLAY_GAME"
    PLAY_GAME_ON_FACEBOOK = "PLAY_GAME_ON_FACEBOOK"
    PURCHASE_GIFT_CARDS = "PURCHASE_GIFT_CARDS"
    RAISE_MONEY = "RAISE_MONEY"
    RECORD_NOW = "RECORD_NOW"
    REFER_FRIENDS = "REFER_FRIENDS"
    REQUEST_TIME = "REQUEST_TIME"
    SAY_THANKS = "SAY_THANKS"
    SEE_MORE = "SEE_MORE"
    SELL_NOW = "SELL_NOW"
    SEND_A_GIFT = "SEND_A_GIFT"
    SEND_GIFT_MONEY = "SEND_GIFT_MONEY"
    SEND_UPDATES = "SEND_UPDATES"
    SHARE = "SHARE"
    SHOP_NOW = "SHOP_NOW"
    SIGN_UP = "SIGN_UP"
    SOTTO_SUBSCRIBE = "SOTTO_SUBSCRIBE"
    START_ORDER = "START_ORDER"
    SUBSCRIBE = "SUBSCRIBE"
    SWIPE_UP_PRODUCT = "SWIPE_UP_PRODUCT"
    SWIPE_UP_SHOP = "SWIPE_UP_SHOP"
    UPDATE_APP = "UPDATE_APP"
    USE_APP = "USE_APP"
    USE_MOBILE_APP = "USE_MOBILE_APP"
    VIDEO_ANNOTATION = "VIDEO_ANNOTATION"
    VIDEO_CALL = "VIDEO_CALL"
    VIEW_CART = "VIEW_CART"
    VIEW_CHANNEL = "VIEW_CHANNEL"
    VIEW_IN_CART = "VIEW_IN_CART"
    VIEW_PRODUCT = "VIEW_PRODUCT"
    VISIT_PAGES_FEED = "VISIT_PAGES_FEED"
    WATCH_LIVE_VIDEO = "WATCH_LIVE_VIDEO"
    WATCH_MORE = "WATCH_MORE"
    WATCH_VIDEO = "WATCH_VIDEO"
    WHATSAPP_MESSAGE = "WHATSAPP_MESSAGE"
    WOODHENGE_SUPPORT = "WOODHENGE_SUPPORT"


class AdAssetTargetRuleTargeting_device_platforms(str, Enum):
    """AdAssetTargetRuleTargeting_device_platforms enum values."""

    desktop = "desktop"
    mobile = "mobile"


class AdAsyncRequestSet_notification_mode(str, Enum):
    """AdAsyncRequestSet_notification_mode enum values."""

    OFF = "OFF"
    ON_COMPLETE = "ON_COMPLETE"


class AdCreativeLinkDataCallToAction_type(str, Enum):
    """AdCreativeLinkDataCallToAction_type enum values."""

    ADD_TO_CART = "ADD_TO_CART"
    APPLY_NOW = "APPLY_NOW"
    ASK_ABOUT_SERVICES = "ASK_ABOUT_SERVICES"
    ASK_FOR_MORE_INFO = "ASK_FOR_MORE_INFO"
    AUDIO_CALL = "AUDIO_CALL"
    BOOK_A_CONSULTATION = "BOOK_A_CONSULTATION"
    BOOK_NOW = "BOOK_NOW"
    BOOK_TRAVEL = "BOOK_TRAVEL"
    BUY = "BUY"
    BUY_NOW = "BUY_NOW"
    BUY_TICKETS = "BUY_TICKETS"
    BUY_VIA_MESSAGE = "BUY_VIA_MESSAGE"
    CALL = "CALL"
    CALL_ME = "CALL_ME"
    CALL_NOW = "CALL_NOW"
    CHAT_WITH_US = "CHAT_WITH_US"
    CONFIRM = "CONFIRM"
    CONTACT = "CONTACT"
    CONTACT_US = "CONTACT_US"
    DONATE = "DONATE"
    DONATE_NOW = "DONATE_NOW"
    DOWNLOAD = "DOWNLOAD"
    EVENT_RSVP = "EVENT_RSVP"
    FIND_A_GROUP = "FIND_A_GROUP"
    FIND_YOUR_GROUPS = "FIND_YOUR_GROUPS"
    FOLLOW_NEWS_STORYLINE = "FOLLOW_NEWS_STORYLINE"
    FOLLOW_PAGE = "FOLLOW_PAGE"
    FOLLOW_USER = "FOLLOW_USER"
    GET_A_QUOTE = "GET_A_QUOTE"
    GET_DIRECTIONS = "GET_DIRECTIONS"
    GET_IN_TOUCH = "GET_IN_TOUCH"
    GET_OFFER = "GET_OFFER"
    GET_OFFER_VIEW = "GET_OFFER_VIEW"
    GET_PROMOTIONS = "GET_PROMOTIONS"
    GET_QUOTE = "GET_QUOTE"
    GET_SHOWTIMES = "GET_SHOWTIMES"
    GET_STARTED = "GET_STARTED"
    INQUIRE_NOW = "INQUIRE_NOW"
    INSTALL_APP = "INSTALL_APP"
    INSTALL_MOBILE_APP = "INSTALL_MOBILE_APP"
    JOIN_CHANNEL = "JOIN_CHANNEL"
    LEARN_MORE = "LEARN_MORE"
    LIKE_PAGE = "LIKE_PAGE"
    LISTEN_MUSIC = "LISTEN_MUSIC"
    LISTEN_NOW = "LISTEN_NOW"
    MAKE_AN_APPOINTMENT = "MAKE_AN_APPOINTMENT"
    MESSAGE_PAGE = "MESSAGE_PAGE"
    MOBILE_DOWNLOAD = "MOBILE_DOWNLOAD"
    NO_BUTTON = "NO_BUTTON"
    OPEN_INSTANT_APP = "OPEN_INSTANT_APP"
    OPEN_LINK = "OPEN_LINK"
    ORDER_NOW = "ORDER_NOW"
    PAY_TO_ACCESS = "PAY_TO_ACCESS"
    PLAY_GAME = "PLAY_GAME"
    PLAY_GAME_ON_FACEBOOK = "PLAY_GAME_ON_FACEBOOK"
    PURCHASE_GIFT_CARDS = "PURCHASE_GIFT_CARDS"
    RAISE_MONEY = "RAISE_MONEY"
    RECORD_NOW = "RECORD_NOW"
    REFER_FRIENDS = "REFER_FRIENDS"
    REQUEST_TIME = "REQUEST_TIME"
    SAY_THANKS = "SAY_THANKS"
    SEE_MORE = "SEE_MORE"
    SELL_NOW = "SELL_NOW"
    SEND_A_GIFT = "SEND_A_GIFT"
    SEND_GIFT_MONEY = "SEND_GIFT_MONEY"
    SEND_UPDATES = "SEND_UPDATES"
    SHARE = "SHARE"
    SHOP_NOW = "SHOP_NOW"
    SIGN_UP = "SIGN_UP"
    SOTTO_SUBSCRIBE = "SOTTO_SUBSCRIBE"
    START_ORDER = "START_ORDER"
    SUBSCRIBE = "SUBSCRIBE"
    SWIPE_UP_PRODUCT = "SWIPE_UP_PRODUCT"
    SWIPE_UP_SHOP = "SWIPE_UP_SHOP"
    UPDATE_APP = "UPDATE_APP"
    USE_APP = "USE_APP"
    USE_MOBILE_APP = "USE_MOBILE_APP"
    VIDEO_ANNOTATION = "VIDEO_ANNOTATION"
    VIDEO_CALL = "VIDEO_CALL"
    VIEW_CART = "VIEW_CART"
    VIEW_CHANNEL = "VIEW_CHANNEL"
    VIEW_IN_CART = "VIEW_IN_CART"
    VIEW_PRODUCT = "VIEW_PRODUCT"
    VISIT_PAGES_FEED = "VISIT_PAGES_FEED"
    WATCH_LIVE_VIDEO = "WATCH_LIVE_VIDEO"
    WATCH_MORE = "WATCH_MORE"
    WATCH_VIDEO = "WATCH_VIDEO"
    WHATSAPP_MESSAGE = "WHATSAPP_MESSAGE"
    WOODHENGE_SUPPORT = "WOODHENGE_SUPPORT"


class AdCreativeLinkDataCustomOverlaySpec_background_color(str, Enum):
    """AdCreativeLinkDataCustomOverlaySpec_background_color enum values."""

    background_000000 = "background_000000"
    background_0090ff = "background_0090ff"
    background_00af4c = "background_00af4c"
    background_595959 = "background_595959"
    background_755dde = "background_755dde"
    background_e50900 = "background_e50900"
    background_f23474 = "background_f23474"
    background_f78400 = "background_f78400"
    background_ffffff = "background_ffffff"


class AdCreativeLinkDataCustomOverlaySpec_font(str, Enum):
    """AdCreativeLinkDataCustomOverlaySpec_font enum values."""

    droid_serif_regular = "droid_serif_regular"
    lato_regular = "lato_regular"
    noto_sans_regular = "noto_sans_regular"
    nunito_sans_bold = "nunito_sans_bold"
    open_sans_bold = "open_sans_bold"
    pt_serif_bold = "pt_serif_bold"
    roboto_condensed_regular = "roboto_condensed_regular"
    roboto_medium = "roboto_medium"


class AdCreativeLinkDataCustomOverlaySpec_option(str, Enum):
    """AdCreativeLinkDataCustomOverlaySpec_option enum values."""

    bank_transfer = "bank_transfer"
    boleto = "boleto"
    cash_on_delivery = "cash_on_delivery"
    discount_with_boleto = "discount_with_boleto"
    fast_delivery = "fast_delivery"
    free_shipping = "free_shipping"
    home_delivery = "home_delivery"
    inventory = "inventory"
    pay_at_hotel = "pay_at_hotel"
    pay_on_arrival = "pay_on_arrival"


class AdCreativeLinkDataCustomOverlaySpec_position(str, Enum):
    """AdCreativeLinkDataCustomOverlaySpec_position enum values."""

    bottom_left = "bottom_left"
    bottom_right = "bottom_right"
    top_left = "top_left"
    top_right = "top_right"


class AdCreativeLinkDataCustomOverlaySpec_template(str, Enum):
    """AdCreativeLinkDataCustomOverlaySpec_template enum values."""

    pill_with_text = "pill_with_text"


class AdCreativeLinkDataCustomOverlaySpec_text_color(str, Enum):
    """AdCreativeLinkDataCustomOverlaySpec_text_color enum values."""

    text_000000 = "text_000000"
    text_007ad0 = "text_007ad0"
    text_009c2a = "text_009c2a"
    text_646464 = "text_646464"
    text_755dde = "text_755dde"
    text_c91b00 = "text_c91b00"
    text_f23474 = "text_f23474"
    text_f78400 = "text_f78400"
    text_ffffff = "text_ffffff"


class AdCreativeLinkDataImageLayerSpec_blending_mode(str, Enum):
    """AdCreativeLinkDataImageLayerSpec_blending_mode enum values."""

    lighten = "lighten"
    multiply = "multiply"
    normal = "normal"


class AdCreativeLinkDataImageLayerSpec_frame_source(str, Enum):
    """AdCreativeLinkDataImageLayerSpec_frame_source enum values."""

    custom = "custom"


class AdCreativeLinkDataImageLayerSpec_image_source(str, Enum):
    """AdCreativeLinkDataImageLayerSpec_image_source enum values."""

    catalog = "catalog"


class AdCreativeLinkDataImageLayerSpec_layer_type(str, Enum):
    """AdCreativeLinkDataImageLayerSpec_layer_type enum values."""

    frame_overlay = "frame_overlay"
    image = "image"
    text_overlay = "text_overlay"


class AdCreativeLinkDataImageLayerSpec_overlay_position(str, Enum):
    """AdCreativeLinkDataImageLayerSpec_overlay_position enum values."""

    bottom = "bottom"
    bottom_left = "bottom_left"
    bottom_right = "bottom_right"
    center = "center"
    left = "left"
    right = "right"
    top = "top"
    top_left = "top_left"
    top_right = "top_right"


class AdCreativeLinkDataImageLayerSpec_overlay_shape(str, Enum):
    """AdCreativeLinkDataImageLayerSpec_overlay_shape enum values."""

    circle = "circle"
    none = "none"
    pill = "pill"
    rectangle = "rectangle"
    triangle = "triangle"


class AdCreativeLinkDataImageLayerSpec_text_font(str, Enum):
    """AdCreativeLinkDataImageLayerSpec_text_font enum values."""

    droid_serif_regular = "droid_serif_regular"
    lato_regular = "lato_regular"
    noto_sans_regular = "noto_sans_regular"
    nunito_sans_bold = "nunito_sans_bold"
    open_sans_bold = "open_sans_bold"
    open_sans_condensed_bold = "open_sans_condensed_bold"
    pt_serif_bold = "pt_serif_bold"
    roboto_condensed_regular = "roboto_condensed_regular"
    roboto_medium = "roboto_medium"


class AdCreativeLinkDataImageOverlaySpec_custom_text_type(str, Enum):
    """AdCreativeLinkDataImageOverlaySpec_custom_text_type enum values."""

    free_shipping = "free_shipping"
    popular = "popular"
    sale = "sale"


class AdCreativeLinkDataImageOverlaySpec_overlay_template(str, Enum):
    """AdCreativeLinkDataImageOverlaySpec_overlay_template enum values."""

    circle_with_text = "circle_with_text"
    pill_with_text = "pill_with_text"
    triangle_with_text = "triangle_with_text"


class AdCreativeLinkDataImageOverlaySpec_position(str, Enum):
    """AdCreativeLinkDataImageOverlaySpec_position enum values."""

    bottom_left = "bottom_left"
    bottom_right = "bottom_right"
    top_left = "top_left"
    top_right = "top_right"


class AdCreativeLinkDataImageOverlaySpec_text_font(str, Enum):
    """AdCreativeLinkDataImageOverlaySpec_text_font enum values."""

    droid_serif_regular = "droid_serif_regular"
    dynads_hybrid_bold = "dynads_hybrid_bold"
    lato_regular = "lato_regular"
    noto_sans_regular = "noto_sans_regular"
    nunito_sans_bold = "nunito_sans_bold"
    open_sans_bold = "open_sans_bold"
    open_sans_condensed_bold = "open_sans_condensed_bold"
    pt_serif_bold = "pt_serif_bold"
    roboto_condensed_regular = "roboto_condensed_regular"
    roboto_medium = "roboto_medium"


class AdCreativeLinkDataImageOverlaySpec_text_type(str, Enum):
    """AdCreativeLinkDataImageOverlaySpec_text_type enum values."""

    automated_personalize = "automated_personalize"
    custom = "custom"
    disclaimer = "disclaimer"
    from_price = "from_price"
    guest_rating = "guest_rating"
    percentage_off = "percentage_off"
    price = "price"
    star_rating = "star_rating"
    strikethrough_price = "strikethrough_price"
    sustainable = "sustainable"


class AdCreativeLinkDataImageOverlaySpec_theme_color(str, Enum):
    """AdCreativeLinkDataImageOverlaySpec_theme_color enum values."""

    background_000000_text_ffffff = "background_000000_text_ffffff"
    background_0090ff_text_ffffff = "background_0090ff_text_ffffff"
    background_00af4c_text_ffffff = "background_00af4c_text_ffffff"
    background_595959_text_ffffff = "background_595959_text_ffffff"
    background_755dde_text_ffffff = "background_755dde_text_ffffff"
    background_e50900_text_ffffff = "background_e50900_text_ffffff"
    background_f23474_text_ffffff = "background_f23474_text_ffffff"
    background_f78400_text_ffffff = "background_f78400_text_ffffff"
    background_ffffff_text_000000 = "background_ffffff_text_000000"
    background_ffffff_text_007ad0 = "background_ffffff_text_007ad0"
    background_ffffff_text_009c2a = "background_ffffff_text_009c2a"
    background_ffffff_text_646464 = "background_ffffff_text_646464"
    background_ffffff_text_755dde = "background_ffffff_text_755dde"
    background_ffffff_text_c91b00 = "background_ffffff_text_c91b00"
    background_ffffff_text_f23474 = "background_ffffff_text_f23474"
    background_ffffff_text_f78400 = "background_ffffff_text_f78400"


class AdCreativeLinkDataMoment_type(str, Enum):
    """AdCreativeLinkDataMoment_type enum values."""

    FB_LIVE_SHOPPING = "FB_LIVE_SHOPPING"
    IG_LIVE_SHOPPING = "IG_LIVE_SHOPPING"


class AdCreativeLinkData_format_option(str, Enum):
    """AdCreativeLinkData_format_option enum values."""

    carousel_ar_effects = "carousel_ar_effects"
    carousel_images_multi_items = "carousel_images_multi_items"
    carousel_images_single_item = "carousel_images_single_item"
    carousel_slideshows = "carousel_slideshows"
    collection_video = "collection_video"
    single_image = "single_image"


class AdCreativeVideoDataCustomOverlaySpec_background_opacity(str, Enum):
    """AdCreativeVideoDataCustomOverlaySpec_background_opacity enum values."""

    half = "half"
    solid = "solid"


class AdCreativeVideoDataCustomOverlaySpec_option(str, Enum):
    """AdCreativeVideoDataCustomOverlaySpec_option enum values."""

    bank_transfer = "bank_transfer"
    boleto = "boleto"
    cash_on_delivery = "cash_on_delivery"
    discount_with_boleto = "discount_with_boleto"
    fast_delivery = "fast_delivery"
    free_shipping = "free_shipping"
    home_delivery = "home_delivery"
    inventory = "inventory"
    pay_at_hotel = "pay_at_hotel"
    pay_on_arrival = "pay_on_arrival"


class AdCreativeVideoDataCustomOverlaySpec_position(str, Enum):
    """AdCreativeVideoDataCustomOverlaySpec_position enum values."""

    middle_center = "middle_center"
    middle_left = "middle_left"
    middle_right = "middle_right"
    top_center = "top_center"
    top_left = "top_left"
    top_right = "top_right"


class AdCreativeVideoDataCustomOverlaySpec_template(str, Enum):
    """AdCreativeVideoDataCustomOverlaySpec_template enum values."""

    rectangle_with_text = "rectangle_with_text"


class AdCreative_call_to_action_type(str, Enum):
    """AdCreative_call_to_action_type enum values."""

    ADD_TO_CART = "ADD_TO_CART"
    APPLY_NOW = "APPLY_NOW"
    ASK_ABOUT_SERVICES = "ASK_ABOUT_SERVICES"
    ASK_FOR_MORE_INFO = "ASK_FOR_MORE_INFO"
    AUDIO_CALL = "AUDIO_CALL"
    BOOK_A_CONSULTATION = "BOOK_A_CONSULTATION"
    BOOK_NOW = "BOOK_NOW"
    BOOK_TRAVEL = "BOOK_TRAVEL"
    BUY = "BUY"
    BUY_NOW = "BUY_NOW"
    BUY_TICKETS = "BUY_TICKETS"
    BUY_VIA_MESSAGE = "BUY_VIA_MESSAGE"
    CALL = "CALL"
    CALL_ME = "CALL_ME"
    CALL_NOW = "CALL_NOW"
    CHAT_WITH_US = "CHAT_WITH_US"
    CONFIRM = "CONFIRM"
    CONTACT = "CONTACT"
    CONTACT_US = "CONTACT_US"
    DONATE = "DONATE"
    DONATE_NOW = "DONATE_NOW"
    DOWNLOAD = "DOWNLOAD"
    EVENT_RSVP = "EVENT_RSVP"
    FIND_A_GROUP = "FIND_A_GROUP"
    FIND_YOUR_GROUPS = "FIND_YOUR_GROUPS"
    FOLLOW_NEWS_STORYLINE = "FOLLOW_NEWS_STORYLINE"
    FOLLOW_PAGE = "FOLLOW_PAGE"
    FOLLOW_USER = "FOLLOW_USER"
    GET_A_QUOTE = "GET_A_QUOTE"
    GET_DIRECTIONS = "GET_DIRECTIONS"
    GET_IN_TOUCH = "GET_IN_TOUCH"
    GET_OFFER = "GET_OFFER"
    GET_OFFER_VIEW = "GET_OFFER_VIEW"
    GET_PROMOTIONS = "GET_PROMOTIONS"
    GET_QUOTE = "GET_QUOTE"
    GET_SHOWTIMES = "GET_SHOWTIMES"
    GET_STARTED = "GET_STARTED"
    INQUIRE_NOW = "INQUIRE_NOW"
    INSTALL_APP = "INSTALL_APP"
    INSTALL_MOBILE_APP = "INSTALL_MOBILE_APP"
    JOIN_CHANNEL = "JOIN_CHANNEL"
    LEARN_MORE = "LEARN_MORE"
    LIKE_PAGE = "LIKE_PAGE"
    LISTEN_MUSIC = "LISTEN_MUSIC"
    LISTEN_NOW = "LISTEN_NOW"
    MAKE_AN_APPOINTMENT = "MAKE_AN_APPOINTMENT"
    MESSAGE_PAGE = "MESSAGE_PAGE"
    MOBILE_DOWNLOAD = "MOBILE_DOWNLOAD"
    NO_BUTTON = "NO_BUTTON"
    OPEN_INSTANT_APP = "OPEN_INSTANT_APP"
    OPEN_LINK = "OPEN_LINK"
    ORDER_NOW = "ORDER_NOW"
    PAY_TO_ACCESS = "PAY_TO_ACCESS"
    PLAY_GAME = "PLAY_GAME"
    PLAY_GAME_ON_FACEBOOK = "PLAY_GAME_ON_FACEBOOK"
    PURCHASE_GIFT_CARDS = "PURCHASE_GIFT_CARDS"
    RAISE_MONEY = "RAISE_MONEY"
    RECORD_NOW = "RECORD_NOW"
    REFER_FRIENDS = "REFER_FRIENDS"
    REQUEST_TIME = "REQUEST_TIME"
    SAY_THANKS = "SAY_THANKS"
    SEE_MORE = "SEE_MORE"
    SELL_NOW = "SELL_NOW"
    SEND_A_GIFT = "SEND_A_GIFT"
    SEND_GIFT_MONEY = "SEND_GIFT_MONEY"
    SEND_UPDATES = "SEND_UPDATES"
    SHARE = "SHARE"
    SHOP_NOW = "SHOP_NOW"
    SIGN_UP = "SIGN_UP"
    SOTTO_SUBSCRIBE = "SOTTO_SUBSCRIBE"
    START_ORDER = "START_ORDER"
    SUBSCRIBE = "SUBSCRIBE"
    SWIPE_UP_PRODUCT = "SWIPE_UP_PRODUCT"
    SWIPE_UP_SHOP = "SWIPE_UP_SHOP"
    UPDATE_APP = "UPDATE_APP"
    USE_APP = "USE_APP"
    USE_MOBILE_APP = "USE_MOBILE_APP"
    VIDEO_ANNOTATION = "VIDEO_ANNOTATION"
    VIDEO_CALL = "VIDEO_CALL"
    VIEW_CART = "VIEW_CART"
    VIEW_CHANNEL = "VIEW_CHANNEL"
    VIEW_IN_CART = "VIEW_IN_CART"
    VIEW_PRODUCT = "VIEW_PRODUCT"
    VISIT_PAGES_FEED = "VISIT_PAGES_FEED"
    WATCH_LIVE_VIDEO = "WATCH_LIVE_VIDEO"
    WATCH_MORE = "WATCH_MORE"
    WATCH_VIDEO = "WATCH_VIDEO"
    WHATSAPP_MESSAGE = "WHATSAPP_MESSAGE"
    WOODHENGE_SUPPORT = "WOODHENGE_SUPPORT"


class AdCreative_object_type(str, Enum):
    """AdCreative_object_type enum values."""

    APPLICATION = "APPLICATION"
    DOMAIN = "DOMAIN"
    EVENT = "EVENT"
    INVALID = "INVALID"
    OFFER = "OFFER"
    PAGE = "PAGE"
    PHOTO = "PHOTO"
    POST_DELETED = "POST_DELETED"
    PRIVACY_CHECK_FAIL = "PRIVACY_CHECK_FAIL"
    SHARE = "SHARE"
    STATUS = "STATUS"
    STORE_ITEM = "STORE_ITEM"
    VIDEO = "VIDEO"


class AdCreative_status(str, Enum):
    """AdCreative_status enum values."""

    ACTIVE = "ACTIVE"
    DELETED = "DELETED"
    IN_PROCESS = "IN_PROCESS"
    WITH_ISSUES = "WITH_ISSUES"


class AdImage_status(str, Enum):
    """AdImage_status enum values."""

    ACTIVE = "ACTIVE"
    DELETED = "DELETED"
    INTERNAL = "INTERNAL"


class AdPromotedObject_custom_event_type(str, Enum):
    """AdPromotedObject_custom_event_type enum values."""

    ACHIEVEMENT_UNLOCKED = "ACHIEVEMENT_UNLOCKED"
    ADD_PAYMENT_INFO = "ADD_PAYMENT_INFO"
    ADD_TO_CART = "ADD_TO_CART"
    ADD_TO_WISHLIST = "ADD_TO_WISHLIST"
    AD_IMPRESSION = "AD_IMPRESSION"
    COMPLETE_REGISTRATION = "COMPLETE_REGISTRATION"
    CONTACT = "CONTACT"
    CONTENT_VIEW = "CONTENT_VIEW"
    CUSTOMIZE_PRODUCT = "CUSTOMIZE_PRODUCT"
    D2_RETENTION = "D2_RETENTION"
    D7_RETENTION = "D7_RETENTION"
    DONATE = "DONATE"
    FIND_LOCATION = "FIND_LOCATION"
    INITIATED_CHECKOUT = "INITIATED_CHECKOUT"
    LEAD = "LEAD"
    LEVEL_ACHIEVED = "LEVEL_ACHIEVED"
    LISTING_INTERACTION = "LISTING_INTERACTION"
    MESSAGING_CONVERSATION_STARTED_7D = "MESSAGING_CONVERSATION_STARTED_7D"
    OTHER = "OTHER"
    PURCHASE = "PURCHASE"
    RATE = "RATE"
    SCHEDULE = "SCHEDULE"
    SEARCH = "SEARCH"
    SERVICE_BOOKING_REQUEST = "SERVICE_BOOKING_REQUEST"
    SPENT_CREDITS = "SPENT_CREDITS"
    START_TRIAL = "START_TRIAL"
    SUBMIT_APPLICATION = "SUBMIT_APPLICATION"
    SUBSCRIBE = "SUBSCRIBE"
    TUTORIAL_COMPLETION = "TUTORIAL_COMPLETION"


class AdPromotedObject_lead_ads_custom_event_type(str, Enum):
    """AdPromotedObject_lead_ads_custom_event_type enum values."""

    ACHIEVEMENT_UNLOCKED = "ACHIEVEMENT_UNLOCKED"
    ADD_PAYMENT_INFO = "ADD_PAYMENT_INFO"
    ADD_TO_CART = "ADD_TO_CART"
    ADD_TO_WISHLIST = "ADD_TO_WISHLIST"
    AD_IMPRESSION = "AD_IMPRESSION"
    COMPLETE_REGISTRATION = "COMPLETE_REGISTRATION"
    CONTACT = "CONTACT"
    CONTENT_VIEW = "CONTENT_VIEW"
    CUSTOMIZE_PRODUCT = "CUSTOMIZE_PRODUCT"
    D2_RETENTION = "D2_RETENTION"
    D7_RETENTION = "D7_RETENTION"
    DONATE = "DONATE"
    FIND_LOCATION = "FIND_LOCATION"
    INITIATED_CHECKOUT = "INITIATED_CHECKOUT"
    LEAD = "LEAD"
    LEVEL_ACHIEVED = "LEVEL_ACHIEVED"
    LISTING_INTERACTION = "LISTING_INTERACTION"
    MESSAGING_CONVERSATION_STARTED_7D = "MESSAGING_CONVERSATION_STARTED_7D"
    OTHER = "OTHER"
    PURCHASE = "PURCHASE"
    RATE = "RATE"
    SCHEDULE = "SCHEDULE"
    SEARCH = "SEARCH"
    SERVICE_BOOKING_REQUEST = "SERVICE_BOOKING_REQUEST"
    SPENT_CREDITS = "SPENT_CREDITS"
    START_TRIAL = "START_TRIAL"
    SUBMIT_APPLICATION = "SUBMIT_APPLICATION"
    SUBSCRIBE = "SUBSCRIBE"
    TUTORIAL_COMPLETION = "TUTORIAL_COMPLETION"


class AdRecommendation_confidence(str, Enum):
    """AdRecommendation_confidence enum values."""

    HIGH = "HIGH"
    LOW = "LOW"
    MEDIUM = "MEDIUM"


class AdRecommendation_importance(str, Enum):
    """AdRecommendation_importance enum values."""

    HIGH = "HIGH"
    LOW = "LOW"
    MEDIUM = "MEDIUM"


class AdRuleEvaluationSpec_evaluation_type(str, Enum):
    """AdRuleEvaluationSpec_evaluation_type enum values."""

    SCHEDULE = "SCHEDULE"
    TRIGGER = "TRIGGER"


class AdRuleExecutionOptions_operator(str, Enum):
    """AdRuleExecutionOptions_operator enum values."""

    EQUAL = "EQUAL"
    IN = "IN"


class AdRuleExecutionSpec_execution_type(str, Enum):
    """AdRuleExecutionSpec_execution_type enum values."""

    ADD_INTEREST_RELAXATION = "ADD_INTEREST_RELAXATION"
    ADD_QUESTIONNAIRE_INTERESTS = "ADD_QUESTIONNAIRE_INTERESTS"
    AD_RECOMMENDATION_APPLY = "AD_RECOMMENDATION_APPLY"
    AUDIENCE_CONSOLIDATION = "AUDIENCE_CONSOLIDATION"
    AUDIENCE_CONSOLIDATION_ASK_FIRST = "AUDIENCE_CONSOLIDATION_ASK_FIRST"
    CHANGE_BID = "CHANGE_BID"
    CHANGE_BUDGET = "CHANGE_BUDGET"
    CHANGE_CAMPAIGN_BUDGET = "CHANGE_CAMPAIGN_BUDGET"
    DCO = "DCO"
    INCREASE_RADIUS = "INCREASE_RADIUS"
    NOTIFICATION = "NOTIFICATION"
    PAUSE = "PAUSE"
    PING_ENDPOINT = "PING_ENDPOINT"
    REBALANCE_BUDGET = "REBALANCE_BUDGET"
    ROTATE = "ROTATE"
    UNPAUSE = "UNPAUSE"
    UPDATE_CREATIVE = "UPDATE_CREATIVE"
    UPDATE_LAX_BUDGET = "UPDATE_LAX_BUDGET"
    UPDATE_LAX_DURATION = "UPDATE_LAX_DURATION"


class AdRuleFilters_operator(str, Enum):
    """AdRuleFilters_operator enum values."""

    ALL = "ALL"
    ANY = "ANY"
    CONTAIN = "CONTAIN"
    EQUAL = "EQUAL"
    GREATER_THAN = "GREATER_THAN"
    IN = "IN"
    IN_RANGE = "IN_RANGE"
    LESS_THAN = "LESS_THAN"
    NONE = "NONE"
    NOT_CONTAIN = "NOT_CONTAIN"
    NOT_EQUAL = "NOT_EQUAL"
    NOT_IN = "NOT_IN"
    NOT_IN_RANGE = "NOT_IN_RANGE"


class AdRuleHistoryResult_object_type(str, Enum):
    """AdRuleHistoryResult_object_type enum values."""

    AD = "AD"
    ADSET = "ADSET"
    CAMPAIGN = "CAMPAIGN"


class AdRuleTrigger_operator(str, Enum):
    """AdRuleTrigger_operator enum values."""

    ALL = "ALL"
    ANY = "ANY"
    CONTAIN = "CONTAIN"
    EQUAL = "EQUAL"
    GREATER_THAN = "GREATER_THAN"
    IN = "IN"
    IN_RANGE = "IN_RANGE"
    LESS_THAN = "LESS_THAN"
    NONE = "NONE"
    NOT_CONTAIN = "NOT_CONTAIN"
    NOT_EQUAL = "NOT_EQUAL"
    NOT_IN = "NOT_IN"
    NOT_IN_RANGE = "NOT_IN_RANGE"


class AdRuleTrigger_type(str, Enum):
    """AdRuleTrigger_type enum values."""

    DELIVERY_INSIGHTS_CHANGE = "DELIVERY_INSIGHTS_CHANGE"
    METADATA_CREATION = "METADATA_CREATION"
    METADATA_UPDATE = "METADATA_UPDATE"
    STATS_CHANGE = "STATS_CHANGE"
    STATS_MILESTONE = "STATS_MILESTONE"


class AdSet_bid_strategy(str, Enum):
    """AdSet_bid_strategy enum values."""

    COST_CAP = "COST_CAP"
    LOWEST_COST_WITHOUT_CAP = "LOWEST_COST_WITHOUT_CAP"
    LOWEST_COST_WITH_BID_CAP = "LOWEST_COST_WITH_BID_CAP"
    LOWEST_COST_WITH_MIN_ROAS = "LOWEST_COST_WITH_MIN_ROAS"


class AdSet_billing_event(str, Enum):
    """AdSet_billing_event enum values."""

    APP_INSTALLS = "APP_INSTALLS"
    CLICKS = "CLICKS"
    IMPRESSIONS = "IMPRESSIONS"
    LINK_CLICKS = "LINK_CLICKS"
    LISTING_INTERACTION = "LISTING_INTERACTION"
    NONE = "NONE"
    OFFER_CLAIMS = "OFFER_CLAIMS"
    PAGE_LIKES = "PAGE_LIKES"
    POST_ENGAGEMENT = "POST_ENGAGEMENT"
    PURCHASE = "PURCHASE"
    THRUPLAY = "THRUPLAY"


class AdSet_configured_status(str, Enum):
    """AdSet_configured_status enum values."""

    ACTIVE = "ACTIVE"
    ARCHIVED = "ARCHIVED"
    DELETED = "DELETED"
    PAUSED = "PAUSED"


class AdSet_effective_status(str, Enum):
    """AdSet_effective_status enum values."""

    ACTIVE = "ACTIVE"
    ARCHIVED = "ARCHIVED"
    CAMPAIGN_PAUSED = "CAMPAIGN_PAUSED"
    DELETED = "DELETED"
    IN_PROCESS = "IN_PROCESS"
    PAUSED = "PAUSED"
    WITH_ISSUES = "WITH_ISSUES"


class AdSet_optimization_goal(str, Enum):
    """AdSet_optimization_goal enum values."""

    ADVERTISER_SILOED_VALUE = "ADVERTISER_SILOED_VALUE"
    AD_RECALL_LIFT = "AD_RECALL_LIFT"
    APP_INSTALLS = "APP_INSTALLS"
    APP_INSTALLS_AND_OFFSITE_CONVERSIONS = "APP_INSTALLS_AND_OFFSITE_CONVERSIONS"
    CONVERSATIONS = "CONVERSATIONS"
    DERIVED_EVENTS = "DERIVED_EVENTS"
    ENGAGED_USERS = "ENGAGED_USERS"
    EVENT_RESPONSES = "EVENT_RESPONSES"
    IMPRESSIONS = "IMPRESSIONS"
    IN_APP_VALUE = "IN_APP_VALUE"
    LANDING_PAGE_VIEWS = "LANDING_PAGE_VIEWS"
    LEAD_GENERATION = "LEAD_GENERATION"
    LINK_CLICKS = "LINK_CLICKS"
    MEANINGFUL_CALL_ATTEMPT = "MEANINGFUL_CALL_ATTEMPT"
    MESSAGING_APPOINTMENT_CONVERSION = "MESSAGING_APPOINTMENT_CONVERSION"
    MESSAGING_PURCHASE_CONVERSION = "MESSAGING_PURCHASE_CONVERSION"
    NONE = "NONE"
    OFFSITE_CONVERSIONS = "OFFSITE_CONVERSIONS"
    PAGE_LIKES = "PAGE_LIKES"
    POST_ENGAGEMENT = "POST_ENGAGEMENT"
    PROFILE_AND_PAGE_ENGAGEMENT = "PROFILE_AND_PAGE_ENGAGEMENT"
    PROFILE_VISIT = "PROFILE_VISIT"
    QUALITY_CALL = "QUALITY_CALL"
    QUALITY_LEAD = "QUALITY_LEAD"
    REACH = "REACH"
    REMINDERS_SET = "REMINDERS_SET"
    SUBSCRIBERS = "SUBSCRIBERS"
    THRUPLAY = "THRUPLAY"
    VALUE = "VALUE"
    VISIT_INSTAGRAM_PROFILE = "VISIT_INSTAGRAM_PROFILE"


class AdSet_status(str, Enum):
    """AdSet_status enum values."""

    ACTIVE = "ACTIVE"
    ARCHIVED = "ARCHIVED"
    DELETED = "DELETED"
    PAUSED = "PAUSED"


class Ad_bid_type(str, Enum):
    """Ad_bid_type enum values."""

    ABSOLUTE_OCPM = "ABSOLUTE_OCPM"
    CPA = "CPA"
    CPC = "CPC"
    CPM = "CPM"
    MULTI_PREMIUM = "MULTI_PREMIUM"


class Ad_configured_status(str, Enum):
    """Ad_configured_status enum values."""

    ACTIVE = "ACTIVE"
    ARCHIVED = "ARCHIVED"
    DELETED = "DELETED"
    PAUSED = "PAUSED"


class Ad_effective_status(str, Enum):
    """Ad_effective_status enum values."""

    ACTIVE = "ACTIVE"
    ADSET_PAUSED = "ADSET_PAUSED"
    ARCHIVED = "ARCHIVED"
    CAMPAIGN_PAUSED = "CAMPAIGN_PAUSED"
    DELETED = "DELETED"
    DISAPPROVED = "DISAPPROVED"
    IN_PROCESS = "IN_PROCESS"
    PAUSED = "PAUSED"
    PENDING_BILLING_INFO = "PENDING_BILLING_INFO"
    PENDING_REVIEW = "PENDING_REVIEW"
    PREAPPROVED = "PREAPPROVED"
    WITH_ISSUES = "WITH_ISSUES"


class Ad_status(str, Enum):
    """Ad_status enum values."""

    ACTIVE = "ACTIVE"
    ARCHIVED = "ARCHIVED"
    DELETED = "DELETED"
    PAUSED = "PAUSED"


class AdsNamingTemplate_level(str, Enum):
    """AdsNamingTemplate_level enum values."""

    ADGROUP = "ADGROUP"
    AD_ACCOUNT = "AD_ACCOUNT"
    CAMPAIGN = "CAMPAIGN"
    CAMPAIGN_GROUP = "CAMPAIGN_GROUP"
    OPPORTUNITIES = "OPPORTUNITIES"
    PRIVACY_INFO_CENTER = "PRIVACY_INFO_CENTER"
    PRODUCT = "PRODUCT"
    TOPLINE = "TOPLINE"
    UNIQUE_ADCREATIVE = "UNIQUE_ADCREATIVE"


class Application_supported_platforms(str, Enum):
    """Application_supported_platforms enum values."""

    AMAZON = "AMAZON"
    ANDROID = "ANDROID"
    CANVAS = "CANVAS"
    GAMEROOM = "GAMEROOM"
    INSTANT_GAME = "INSTANT_GAME"
    IPAD = "IPAD"
    IPHONE = "IPHONE"
    MOBILE_WEB = "MOBILE_WEB"
    OCULUS = "OCULUS"
    SAMSUNG = "SAMSUNG"
    SUPPLEMENTARY_IMAGES = "SUPPLEMENTARY_IMAGES"
    WEB = "WEB"
    WINDOWS = "WINDOWS"
    XIAOMI = "XIAOMI"


class AutomotiveModel_image_fetch_status(str, Enum):
    """AutomotiveModel_image_fetch_status enum values."""

    DIRECT_UPLOAD = "DIRECT_UPLOAD"
    FETCHED = "FETCHED"
    FETCH_FAILED = "FETCH_FAILED"
    NO_STATUS = "NO_STATUS"
    OUTDATED = "OUTDATED"
    PARTIAL_FETCH = "PARTIAL_FETCH"


class AutomotiveModel_visibility(str, Enum):
    """AutomotiveModel_visibility enum values."""

    PUBLISHED = "PUBLISHED"
    STAGING = "STAGING"


class Business_verification_status(str, Enum):
    """Business_verification_status enum values."""

    expired = "expired"
    failed = "failed"
    ineligible = "ineligible"
    not_verified = "not_verified"
    pending = "pending"
    pending_need_more_info = "pending_need_more_info"
    pending_submission = "pending_submission"
    rejected = "rejected"
    revoked = "revoked"
    verified = "verified"


class Campaign_bid_strategy(str, Enum):
    """Campaign_bid_strategy enum values."""

    COST_CAP = "COST_CAP"
    LOWEST_COST_WITHOUT_CAP = "LOWEST_COST_WITHOUT_CAP"
    LOWEST_COST_WITH_BID_CAP = "LOWEST_COST_WITH_BID_CAP"
    LOWEST_COST_WITH_MIN_ROAS = "LOWEST_COST_WITH_MIN_ROAS"


class Campaign_configured_status(str, Enum):
    """Campaign_configured_status enum values."""

    ACTIVE = "ACTIVE"
    ARCHIVED = "ARCHIVED"
    DELETED = "DELETED"
    PAUSED = "PAUSED"


class Campaign_effective_status(str, Enum):
    """Campaign_effective_status enum values."""

    ACTIVE = "ACTIVE"
    ARCHIVED = "ARCHIVED"
    DELETED = "DELETED"
    IN_PROCESS = "IN_PROCESS"
    PAUSED = "PAUSED"
    WITH_ISSUES = "WITH_ISSUES"


class Campaign_status(str, Enum):
    """Campaign_status enum values."""

    ACTIVE = "ACTIVE"
    ARCHIVED = "ARCHIVED"
    DELETED = "DELETED"
    PAUSED = "PAUSED"


class CustomAudienceDataSource_sub_type(str, Enum):
    """CustomAudienceDataSource_sub_type enum values."""

    AD_CAMPAIGN = "AD_CAMPAIGN"
    ANYTHING = "ANYTHING"
    APP_USERS = "APP_USERS"
    AR_EFFECTS_EVENTS = "AR_EFFECTS_EVENTS"
    AR_EXPERIENCE_EVENTS = "AR_EXPERIENCE_EVENTS"
    CAMPAIGN_CONVERSIONS = "CAMPAIGN_CONVERSIONS"
    COMBINATION_CUSTOM_AUDIENCE_USERS = "COMBINATION_CUSTOM_AUDIENCE_USERS"
    CONSTANT_CONTACTS_EMAIL_HASHES = "CONSTANT_CONTACTS_EMAIL_HASHES"
    CONTACT_IMPORTER = "CONTACT_IMPORTER"
    CONVERSION_PIXEL_HITS = "CONVERSION_PIXEL_HITS"
    COPY_PASTE_EMAIL_HASHES = "COPY_PASTE_EMAIL_HASHES"
    CUSTOM_AUDIENCE_USERS = "CUSTOM_AUDIENCE_USERS"
    CUSTOM_DATA_TARGETING = "CUSTOM_DATA_TARGETING"
    DATA_FILE = "DATA_FILE"
    DYNAMIC_RULE = "DYNAMIC_RULE"
    ENGAGEMENT_EVENT_USERS = "ENGAGEMENT_EVENT_USERS"
    EXPANDED_AUDIENCE = "EXPANDED_AUDIENCE"
    EXTERNAL_IDS = "EXTERNAL_IDS"
    EXTERNAL_IDS_MIX = "EXTERNAL_IDS_MIX"
    FACEBOOK_WIFI_EVENTS = "FACEBOOK_WIFI_EVENTS"
    FB_EVENT_SIGNALS = "FB_EVENT_SIGNALS"
    FB_PIXEL_HITS = "FB_PIXEL_HITS"
    GROUP_EVENTS = "GROUP_EVENTS"
    HASHES = "HASHES"
    HASHES_OR_USER_IDS = "HASHES_OR_USER_IDS"
    HOUSEHOLD_EXPANSION = "HOUSEHOLD_EXPANSION"
    IG_BUSINESS_EVENTS = "IG_BUSINESS_EVENTS"
    IG_PROMOTED_POST = "IG_PROMOTED_POST"
    INSTANT_ARTICLE_EVENTS = "INSTANT_ARTICLE_EVENTS"
    LOOKALIKE_PLATFORM = "LOOKALIKE_PLATFORM"
    MAIL_CHIMP_EMAIL_HASHES = "MAIL_CHIMP_EMAIL_HASHES"
    MARKETPLACE_LISTINGS = "MARKETPLACE_LISTINGS"
    MESSENGER_ONSITE_SUBSCRIPTION = "MESSENGER_ONSITE_SUBSCRIPTION"
    MOBILE_ADVERTISER_IDS = "MOBILE_ADVERTISER_IDS"
    MOBILE_APP_COMBINATION_EVENTS = "MOBILE_APP_COMBINATION_EVENTS"
    MOBILE_APP_CUSTOM_AUDIENCE_USERS = "MOBILE_APP_CUSTOM_AUDIENCE_USERS"
    MOBILE_APP_EVENTS = "MOBILE_APP_EVENTS"
    MULTICOUNTRY_COMBINATION = "MULTICOUNTRY_COMBINATION"
    MULTI_DATA_EVENTS = "MULTI_DATA_EVENTS"
    MULTI_EVENT_SOURCE = "MULTI_EVENT_SOURCE"
    MULTI_HASHES = "MULTI_HASHES"
    NOTHING = "NOTHING"
    OFFLINE_EVENT_USERS = "OFFLINE_EVENT_USERS"
    PAGE_FANS = "PAGE_FANS"
    PAGE_SMART_AUDIENCE = "PAGE_SMART_AUDIENCE"
    PARTNER_CATEGORY_USERS = "PARTNER_CATEGORY_USERS"
    PLACE_VISITS = "PLACE_VISITS"
    PLATFORM = "PLATFORM"
    PLATFORM_USERS = "PLATFORM_USERS"
    SEED_LIST = "SEED_LIST"
    SIGNAL_SOURCE = "SIGNAL_SOURCE"
    SMART_AUDIENCE = "SMART_AUDIENCE"
    STORE_VISIT_EVENTS = "STORE_VISIT_EVENTS"
    SUBSCRIBER_LIST = "SUBSCRIBER_LIST"
    S_EXPR = "S_EXPR"
    TOKENS = "TOKENS"
    USER_IDS = "USER_IDS"
    VIDEO_EVENTS = "VIDEO_EVENTS"
    VIDEO_EVENT_USERS = "VIDEO_EVENT_USERS"
    WEB_PIXEL_COMBINATION_EVENTS = "WEB_PIXEL_COMBINATION_EVENTS"
    WEB_PIXEL_HITS = "WEB_PIXEL_HITS"
    WEB_PIXEL_HITS_CUSTOM_AUDIENCE_USERS = "WEB_PIXEL_HITS_CUSTOM_AUDIENCE_USERS"
    WHATSAPP_SUBSCRIBER_POOL = "WHATSAPP_SUBSCRIBER_POOL"


class CustomAudienceDataSource_type(str, Enum):
    """CustomAudienceDataSource_type enum values."""

    CONTACT_IMPORTER = "CONTACT_IMPORTER"
    COPY_PASTE = "COPY_PASTE"
    EVENT_BASED = "EVENT_BASED"
    FILE_IMPORTED = "FILE_IMPORTED"
    HOUSEHOLD_AUDIENCE = "HOUSEHOLD_AUDIENCE"
    SEED_BASED = "SEED_BASED"
    THIRD_PARTY_IMPORTED = "THIRD_PARTY_IMPORTED"
    UNKNOWN = "UNKNOWN"


class CustomConversionStatsResult_aggregation(str, Enum):
    """CustomConversionStatsResult_aggregation enum values."""

    count = "count"
    device_type = "device_type"
    host = "host"
    pixel_fire = "pixel_fire"
    unmatched_count = "unmatched_count"
    unmatched_usd_amount = "unmatched_usd_amount"
    url = "url"
    usd_amount = "usd_amount"


class CustomConversion_custom_event_type(str, Enum):
    """CustomConversion_custom_event_type enum values."""

    ADD_PAYMENT_INFO = "ADD_PAYMENT_INFO"
    ADD_TO_CART = "ADD_TO_CART"
    ADD_TO_WISHLIST = "ADD_TO_WISHLIST"
    COMPLETE_REGISTRATION = "COMPLETE_REGISTRATION"
    CONTACT = "CONTACT"
    CONTENT_VIEW = "CONTENT_VIEW"
    CUSTOMIZE_PRODUCT = "CUSTOMIZE_PRODUCT"
    DONATE = "DONATE"
    FACEBOOK_SELECTED = "FACEBOOK_SELECTED"
    FIND_LOCATION = "FIND_LOCATION"
    INITIATED_CHECKOUT = "INITIATED_CHECKOUT"
    LEAD = "LEAD"
    LISTING_INTERACTION = "LISTING_INTERACTION"
    OTHER = "OTHER"
    PURCHASE = "PURCHASE"
    SCHEDULE = "SCHEDULE"
    SEARCH = "SEARCH"
    START_TRIAL = "START_TRIAL"
    SUBMIT_APPLICATION = "SUBMIT_APPLICATION"
    SUBSCRIBE = "SUBSCRIBE"


class Destination_image_fetch_status(str, Enum):
    """Destination_image_fetch_status enum values."""

    DIRECT_UPLOAD = "DIRECT_UPLOAD"
    FETCHED = "FETCHED"
    FETCH_FAILED = "FETCH_FAILED"
    NO_STATUS = "NO_STATUS"
    OUTDATED = "OUTDATED"
    PARTIAL_FETCH = "PARTIAL_FETCH"


class Destination_visibility(str, Enum):
    """Destination_visibility enum values."""

    PUBLISHED = "PUBLISHED"
    STAGING = "STAGING"


class EntityAtTextRange_type(str, Enum):
    """EntityAtTextRange_type enum values."""

    application = "application"
    event = "event"
    group = "group"
    page = "page"
    user = "user"


class Event_category(str, Enum):
    """Event_category enum values."""

    CLASSIC_LITERATURE = "CLASSIC_LITERATURE"
    COMEDY = "COMEDY"
    CRAFTS = "CRAFTS"
    DANCE = "DANCE"
    DRINKS = "DRINKS"
    FITNESS_AND_WORKOUTS = "FITNESS_AND_WORKOUTS"
    FOODS = "FOODS"
    GAMES = "GAMES"
    GARDENING = "GARDENING"
    HEALTHY_LIVING_AND_SELF_CARE = "HEALTHY_LIVING_AND_SELF_CARE"
    HEALTH_AND_MEDICAL = "HEALTH_AND_MEDICAL"
    HOME_AND_GARDEN = "HOME_AND_GARDEN"
    MUSIC_AND_AUDIO = "MUSIC_AND_AUDIO"
    PARTIES = "PARTIES"
    PROFESSIONAL_NETWORKING = "PROFESSIONAL_NETWORKING"
    RELIGIONS = "RELIGIONS"
    SHOPPING_EVENT = "SHOPPING_EVENT"
    SOCIAL_ISSUES = "SOCIAL_ISSUES"
    SPORTS = "SPORTS"
    THEATER = "THEATER"
    TV_AND_MOVIES = "TV_AND_MOVIES"
    VISUAL_ARTS = "VISUAL_ARTS"


class Event_online_event_format(str, Enum):
    """Event_online_event_format enum values."""

    fb_live = "fb_live"
    horizon_event = "horizon_event"
    horizon_world = "horizon_world"
    messenger_room = "messenger_room"
    none = "none"
    other = "other"
    third_party = "third_party"


class Event_type(str, Enum):
    """Event_type enum values."""

    community = "community"
    friends = "friends"
    group = "group"
    messenger_community = "messenger_community"
    private = "private"
    public = "public"
    work_company = "work_company"


class Flight_image_fetch_status(str, Enum):
    """Flight_image_fetch_status enum values."""

    DIRECT_UPLOAD = "DIRECT_UPLOAD"
    FETCHED = "FETCHED"
    FETCH_FAILED = "FETCH_FAILED"
    NO_STATUS = "NO_STATUS"
    OUTDATED = "OUTDATED"
    PARTIAL_FETCH = "PARTIAL_FETCH"


class Flight_visibility(str, Enum):
    """Flight_visibility enum values."""

    PUBLISHED = "PUBLISHED"
    STAGING = "STAGING"


class HomeListing_image_fetch_status(str, Enum):
    """HomeListing_image_fetch_status enum values."""

    DIRECT_UPLOAD = "DIRECT_UPLOAD"
    FETCHED = "FETCHED"
    FETCH_FAILED = "FETCH_FAILED"
    NO_STATUS = "NO_STATUS"
    OUTDATED = "OUTDATED"
    PARTIAL_FETCH = "PARTIAL_FETCH"


class HomeListing_visibility(str, Enum):
    """HomeListing_visibility enum values."""

    PUBLISHED = "PUBLISHED"
    STAGING = "STAGING"


class Hotel_image_fetch_status(str, Enum):
    """Hotel_image_fetch_status enum values."""

    DIRECT_UPLOAD = "DIRECT_UPLOAD"
    FETCHED = "FETCHED"
    FETCH_FAILED = "FETCH_FAILED"
    NO_STATUS = "NO_STATUS"
    OUTDATED = "OUTDATED"
    PARTIAL_FETCH = "PARTIAL_FETCH"


class Hotel_visibility(str, Enum):
    """Hotel_visibility enum values."""

    PUBLISHED = "PUBLISHED"
    STAGING = "STAGING"


class JobOpening_job_status(str, Enum):
    """JobOpening_job_status enum values."""

    CLOSED = "CLOSED"
    DRAFT = "DRAFT"
    OPEN = "OPEN"
    PROVISIONAL = "PROVISIONAL"


class JobOpening_platform_review_status(str, Enum):
    """JobOpening_platform_review_status enum values."""

    APPROVED = "APPROVED"
    PENDING = "PENDING"
    REJECTED = "REJECTED"


class JobOpening_review_rejection_reasons(str, Enum):
    """JobOpening_review_rejection_reasons enum values."""

    ADULT_CONTENT = "ADULT_CONTENT"
    DISCRIMINATION = "DISCRIMINATION"
    DRUGS = "DRUGS"
    GENERIC_DEFAULT = "GENERIC_DEFAULT"
    ILLEGAL = "ILLEGAL"
    IMPERSONATION = "IMPERSONATION"
    MISLEADING = "MISLEADING"
    MULTILEVEL_MARKETING = "MULTILEVEL_MARKETING"
    PERSONAL_INFO = "PERSONAL_INFO"
    SEXUAL = "SEXUAL"


class JobOpening_type(str, Enum):
    """JobOpening_type enum values."""

    CONTRACT = "CONTRACT"
    FULL_TIME = "FULL_TIME"
    INTERNSHIP = "INTERNSHIP"
    PART_TIME = "PART_TIME"
    VOLUNTEER = "VOLUNTEER"


class LocalServiceBusiness_availability(str, Enum):
    """LocalServiceBusiness_availability enum values."""

    AVAILABLE_FOR_ORDER = "AVAILABLE_FOR_ORDER"
    DISCONTINUED = "DISCONTINUED"
    IN_STOCK = "IN_STOCK"
    MARK_AS_SOLD = "MARK_AS_SOLD"
    OUT_OF_STOCK = "OUT_OF_STOCK"
    PENDING = "PENDING"
    PREORDER = "PREORDER"


class LocalServiceBusiness_condition(str, Enum):
    """LocalServiceBusiness_condition enum values."""

    PC_CPO = "PC_CPO"
    PC_NEW = "PC_NEW"
    PC_OPEN_BOX_NEW = "PC_OPEN_BOX_NEW"
    PC_REFURBISHED = "PC_REFURBISHED"
    PC_USED = "PC_USED"
    PC_USED_FAIR = "PC_USED_FAIR"
    PC_USED_GOOD = "PC_USED_GOOD"
    PC_USED_LIKE_NEW = "PC_USED_LIKE_NEW"


class LocalServiceBusiness_image_fetch_status(str, Enum):
    """LocalServiceBusiness_image_fetch_status enum values."""

    DIRECT_UPLOAD = "DIRECT_UPLOAD"
    FETCHED = "FETCHED"
    FETCH_FAILED = "FETCH_FAILED"
    NO_STATUS = "NO_STATUS"
    OUTDATED = "OUTDATED"
    PARTIAL_FETCH = "PARTIAL_FETCH"


class LocalServiceBusiness_visibility(str, Enum):
    """LocalServiceBusiness_visibility enum values."""

    PUBLISHED = "PUBLISHED"
    STAGING = "STAGING"


class MediaTitle_image_fetch_status(str, Enum):
    """MediaTitle_image_fetch_status enum values."""

    DIRECT_UPLOAD = "DIRECT_UPLOAD"
    FETCHED = "FETCHED"
    FETCH_FAILED = "FETCH_FAILED"
    NO_STATUS = "NO_STATUS"
    OUTDATED = "OUTDATED"
    PARTIAL_FETCH = "PARTIAL_FETCH"


class MediaTitle_visibility(str, Enum):
    """MediaTitle_visibility enum values."""

    PUBLISHED = "PUBLISHED"
    STAGING = "STAGING"


class OfflineProductItem_image_fetch_status(str, Enum):
    """OfflineProductItem_image_fetch_status enum values."""

    DIRECT_UPLOAD = "DIRECT_UPLOAD"
    FETCHED = "FETCHED"
    FETCH_FAILED = "FETCH_FAILED"
    NO_STATUS = "NO_STATUS"
    OUTDATED = "OUTDATED"
    PARTIAL_FETCH = "PARTIAL_FETCH"


class OfflineProductItem_visibility(str, Enum):
    """OfflineProductItem_visibility enum values."""

    PUBLISHED = "PUBLISHED"
    STAGING = "STAGING"


class Placement_device_platforms(str, Enum):
    """Placement_device_platforms enum values."""

    desktop = "desktop"
    mobile = "mobile"


class Placement_effective_device_platforms(str, Enum):
    """Placement_effective_device_platforms enum values."""

    desktop = "desktop"
    mobile = "mobile"


class ProductCatalogDiagnosticGroup_affected_entity(str, Enum):
    """ProductCatalogDiagnosticGroup_affected_entity enum values."""

    product_catalog = "product_catalog"
    product_event = "product_event"
    product_item = "product_item"
    product_set = "product_set"


class ProductCatalogDiagnosticGroup_affected_features(str, Enum):
    """ProductCatalogDiagnosticGroup_affected_features enum values."""

    augmented_reality = "augmented_reality"
    checkout = "checkout"


class ProductCatalogDiagnosticGroup_severity(str, Enum):
    """ProductCatalogDiagnosticGroup_severity enum values."""

    MUST_FIX = "MUST_FIX"
    OPPORTUNITY = "OPPORTUNITY"


class ProductCatalogDiagnosticGroup_type(str, Enum):
    """ProductCatalogDiagnosticGroup_type enum values."""

    AR_VISIBILITY_ISSUES = "AR_VISIBILITY_ISSUES"
    ATTRIBUTES_INVALID = "ATTRIBUTES_INVALID"
    ATTRIBUTES_MISSING = "ATTRIBUTES_MISSING"
    CATEGORY = "CATEGORY"
    CHECKOUT = "CHECKOUT"
    DA_VISIBILITY_ISSUES = "DA_VISIBILITY_ISSUES"
    EVENT_SOURCE_ISSUES = "EVENT_SOURCE_ISSUES"
    IMAGE_QUALITY = "IMAGE_QUALITY"
    LOW_QUALITY_TITLE_AND_DESCRIPTION = "LOW_QUALITY_TITLE_AND_DESCRIPTION"
    POLICY_VIOLATION = "POLICY_VIOLATION"
    SHOPS_VISIBILITY_ISSUES = "SHOPS_VISIBILITY_ISSUES"


class ProductEventStat_device_type(str, Enum):
    """ProductEventStat_device_type enum values."""

    desktop = "desktop"
    mobile_android_phone = "mobile_android_phone"
    mobile_android_tablet = "mobile_android_tablet"
    mobile_ipad = "mobile_ipad"
    mobile_iphone = "mobile_iphone"
    mobile_ipod = "mobile_ipod"
    mobile_phone = "mobile_phone"
    mobile_tablet = "mobile_tablet"
    mobile_windows_phone = "mobile_windows_phone"
    unknown = "unknown"


class ProductEventStat_event(str, Enum):
    """ProductEventStat_event enum values."""

    AddToCart = "AddToCart"
    AddToWishlist = "AddToWishlist"
    InitiateCheckout = "InitiateCheckout"
    Lead = "Lead"
    Purchase = "Purchase"
    Search = "Search"
    Subscribe = "Subscribe"
    ViewContent = "ViewContent"


class ProductFeedSchedule_interval(str, Enum):
    """ProductFeedSchedule_interval enum values."""

    DAILY = "DAILY"
    HOURLY = "HOURLY"
    MONTHLY = "MONTHLY"
    WEEKLY = "WEEKLY"


class ProductFeedUploadError_affected_surfaces(str, Enum):
    """ProductFeedUploadError_affected_surfaces enum values."""

    DYNAMIC_ADS = "Dynamic Ads"
    Marketplace = "Marketplace"
    US_MARKETPLACE = "US Marketplace"


class ProductFeedUploadError_severity(str, Enum):
    """ProductFeedUploadError_severity enum values."""

    fatal = "fatal"
    warning = "warning"


class ProductFeedUpload_input_method(str, Enum):
    """ProductFeedUpload_input_method enum values."""

    GOOGLE_SHEETS_FETCH = "Google Sheets Fetch"
    MANUAL_UPLOAD = "Manual Upload"
    REUPLOAD_LAST_FILE = "Reupload Last File"
    SERVER_FETCH = "Server Fetch"
    USER_INITIATED_SERVER_FETCH = "User initiated server fetch"


class ProductFeed_delimiter(str, Enum):
    """ProductFeed_delimiter enum values."""

    AUTODETECT = "AUTODETECT"
    BAR = "BAR"
    COMMA = "COMMA"
    SEMICOLON = "SEMICOLON"
    TAB = "TAB"
    TILDE = "TILDE"


class ProductFeed_ingestion_source_type(str, Enum):
    """ProductFeed_ingestion_source_type enum values."""

    primary_feed = "primary_feed"
    supplementary_feed = "supplementary_feed"


class ProductFeed_quoted_fields_mode(str, Enum):
    """ProductFeed_quoted_fields_mode enum values."""

    AUTODETECT = "AUTODETECT"
    OFF = "OFF"
    ON = "ON"


class ProductItemLandingPageData_availability(str, Enum):
    """ProductItemLandingPageData_availability enum values."""

    AVAILABLE_FOR_ORDER = "available for order"
    discontinued = "discontinued"
    IN_STOCK = "in stock"
    mark_as_sold = "mark_as_sold"
    OUT_OF_STOCK = "out of stock"
    pending = "pending"
    preorder = "preorder"


class ProductItem_age_group(str, Enum):
    """ProductItem_age_group enum values."""

    adult = "adult"
    ALL_AGES = "all ages"
    infant = "infant"
    kids = "kids"
    newborn = "newborn"
    teen = "teen"
    toddler = "toddler"


class ProductItem_availability(str, Enum):
    """ProductItem_availability enum values."""

    AVAILABLE_FOR_ORDER = "available for order"
    discontinued = "discontinued"
    IN_STOCK = "in stock"
    mark_as_sold = "mark_as_sold"
    OUT_OF_STOCK = "out of stock"
    pending = "pending"
    preorder = "preorder"


class ProductItem_capability_to_review_status(str, Enum):
    """ProductItem_capability_to_review_status enum values."""

    APPROVED = "APPROVED"
    NO_REVIEW = "NO_REVIEW"
    OUTDATED = "OUTDATED"
    PENDING = "PENDING"
    REJECTED = "REJECTED"


class ProductItem_condition(str, Enum):
    """ProductItem_condition enum values."""

    cpo = "cpo"
    new = "new"
    open_box_new = "open_box_new"
    refurbished = "refurbished"
    used = "used"
    used_fair = "used_fair"
    used_good = "used_good"
    used_like_new = "used_like_new"


class ProductItem_gender(str, Enum):
    """ProductItem_gender enum values."""

    female = "female"
    male = "male"
    unisex = "unisex"


class ProductItem_image_fetch_status(str, Enum):
    """ProductItem_image_fetch_status enum values."""

    DIRECT_UPLOAD = "DIRECT_UPLOAD"
    FETCHED = "FETCHED"
    FETCH_FAILED = "FETCH_FAILED"
    NO_STATUS = "NO_STATUS"
    OUTDATED = "OUTDATED"
    PARTIAL_FETCH = "PARTIAL_FETCH"


class ProductItem_review_status(str, Enum):
    """ProductItem_review_status enum values."""

    VALUE_EMPTY = ""
    approved = "approved"
    outdated = "outdated"
    pending = "pending"
    rejected = "rejected"


class ProductItem_shipping_weight_unit(str, Enum):
    """ProductItem_shipping_weight_unit enum values."""

    g = "g"
    kg = "kg"
    lb = "lb"
    oz = "oz"


class ProductItem_video_fetch_status(str, Enum):
    """ProductItem_video_fetch_status enum values."""

    DIRECT_UPLOAD = "DIRECT_UPLOAD"
    FETCHED = "FETCHED"
    FETCH_FAILED = "FETCH_FAILED"
    NO_STATUS = "NO_STATUS"
    OUTDATED = "OUTDATED"
    PARTIAL_FETCH = "PARTIAL_FETCH"


class ProductItem_visibility(str, Enum):
    """ProductItem_visibility enum values."""

    published = "published"
    staging = "staging"


class Profile_profile_type(str, Enum):
    """Profile_profile_type enum values."""

    application = "application"
    event = "event"
    group = "group"
    page = "page"
    user = "user"


class Targeting_device_platforms(str, Enum):
    """Targeting_device_platforms enum values."""

    desktop = "desktop"
    mobile = "mobile"


class Targeting_effective_device_platforms(str, Enum):
    """Targeting_effective_device_platforms enum values."""

    desktop = "desktop"
    mobile = "mobile"


class ThirdPartyPartnerLiftRequest_status(str, Enum):
    """ThirdPartyPartnerLiftRequest_status enum values."""

    CREATED = "CREATED"
    FAILURE = "FAILURE"
    IN_PROGRESS = "IN_PROGRESS"
    SCHEDULED = "SCHEDULED"
    SUCCESS = "SUCCESS"


class ThirdPartyPartnerPanelRequest_status(str, Enum):
    """ThirdPartyPartnerPanelRequest_status enum values."""

    CREATED = "CREATED"
    FAILURE = "FAILURE"
    IN_PROGRESS = "IN_PROGRESS"
    SCHEDULED = "SCHEDULED"
    SUCCESS = "SUCCESS"


class ThirdPartyPartnerPanelRequest_study_type(str, Enum):
    """ThirdPartyPartnerPanelRequest_study_type enum values."""

    BRAND_LIFT = "BRAND_LIFT"
    PANEL_SALES_ATTRIBUTION = "PANEL_SALES_ATTRIBUTION"
    REACH = "REACH"


class ThirdPartyPartnerPanelScheduled_status(str, Enum):
    """ThirdPartyPartnerPanelScheduled_status enum values."""

    CANCELLED = "CANCELLED"
    CREATED = "CREATED"
    FINISHED = "FINISHED"
    ONGOING = "ONGOING"


class ThirdPartyPartnerPanelScheduled_study_type(str, Enum):
    """ThirdPartyPartnerPanelScheduled_study_type enum values."""

    BRAND_LIFT = "BRAND_LIFT"
    PANEL_SALES_ATTRIBUTION = "PANEL_SALES_ATTRIBUTION"
    REACH = "REACH"


class ThirdPartyPartnerViewabilityRequest_metric(str, Enum):
    """ThirdPartyPartnerViewabilityRequest_metric enum values."""

    DISPLAY_EVENT = "DISPLAY_EVENT"
    IMPRESSION = "IMPRESSION"
    VIDEO_EVENT = "VIDEO_EVENT"


class ThirdPartyPartnerViewabilityRequest_platform(str, Enum):
    """ThirdPartyPartnerViewabilityRequest_platform enum values."""

    AUDIENCE_NETWORK = "AUDIENCE_NETWORK"
    FACEBOOK = "FACEBOOK"
    INSTAGRAM = "INSTAGRAM"


class ThirdPartyPartnerViewabilityRequest_status(str, Enum):
    """ThirdPartyPartnerViewabilityRequest_status enum values."""

    CREATED = "CREATED"
    FAILURE = "FAILURE"
    IN_PROGRESS = "IN_PROGRESS"
    SCHEDULED = "SCHEDULED"
    SUCCESS = "SUCCESS"


class TransactableItem_image_fetch_status(str, Enum):
    """TransactableItem_image_fetch_status enum values."""

    DIRECT_UPLOAD = "DIRECT_UPLOAD"
    FETCHED = "FETCHED"
    FETCH_FAILED = "FETCH_FAILED"
    NO_STATUS = "NO_STATUS"
    OUTDATED = "OUTDATED"
    PARTIAL_FETCH = "PARTIAL_FETCH"


class TransactableItem_visibility(str, Enum):
    """TransactableItem_visibility enum values."""

    PUBLISHED = "PUBLISHED"
    STAGING = "STAGING"


class Transaction_product_type(str, Enum):
    """Transaction_product_type enum values."""

    cp_return_label = "cp_return_label"
    facebook_ad = "facebook_ad"
    ig_ad = "ig_ad"
    whatsapp = "whatsapp"
    workplace = "workplace"


class VehicleOffer_image_fetch_status(str, Enum):
    """VehicleOffer_image_fetch_status enum values."""

    DIRECT_UPLOAD = "DIRECT_UPLOAD"
    FETCHED = "FETCHED"
    FETCH_FAILED = "FETCH_FAILED"
    NO_STATUS = "NO_STATUS"
    OUTDATED = "OUTDATED"
    PARTIAL_FETCH = "PARTIAL_FETCH"


class VehicleOffer_visibility(str, Enum):
    """VehicleOffer_visibility enum values."""

    PUBLISHED = "PUBLISHED"
    STAGING = "STAGING"


class Vehicle_image_fetch_status(str, Enum):
    """Vehicle_image_fetch_status enum values."""

    DIRECT_UPLOAD = "DIRECT_UPLOAD"
    FETCHED = "FETCHED"
    FETCH_FAILED = "FETCH_FAILED"
    NO_STATUS = "NO_STATUS"
    OUTDATED = "OUTDATED"
    PARTIAL_FETCH = "PARTIAL_FETCH"


class Vehicle_visibility(str, Enum):
    """Vehicle_visibility enum values."""

    PUBLISHED = "PUBLISHED"
    STAGING = "STAGING"


class VideoPoll_status(str, Enum):
    """VideoPoll_status enum values."""

    closed = "closed"
    results_open = "results_open"
    voting_open = "voting_open"


class WhatsAppBusinessAccount_business_verification_status(str, Enum):
    """WhatsAppBusinessAccount_business_verification_status enum values."""

    expired = "expired"
    failed = "failed"
    ineligible = "ineligible"
    not_verified = "not_verified"
    pending = "pending"
    pending_need_more_info = "pending_need_more_info"
    pending_submission = "pending_submission"
    rejected = "rejected"
    revoked = "revoked"
    verified = "verified"


class WhatsAppBusinessPartnerClientVerificationSubmission_rejection_reasons(str, Enum):
    """WhatsAppBusinessPartnerClientVerificationSubmission_rejection_reasons enum values."""

    ADDRESS_NOT_MATCHING = "ADDRESS_NOT_MATCHING"
    BUSINESS_NOT_ELIGIBLE = "BUSINESS_NOT_ELIGIBLE"
    LEGAL_NAME_NOT_FOUND_IN_DOCUMENTS = "LEGAL_NAME_NOT_FOUND_IN_DOCUMENTS"
    LEGAL_NAME_NOT_MATCHING = "LEGAL_NAME_NOT_MATCHING"
    MALFORMED_DOCUMENTS = "MALFORMED_DOCUMENTS"
    NONE = "NONE"
    WEBSITE_NOT_MATCHING = "WEBSITE_NOT_MATCHING"


class WhatsAppBusinessPartnerClientVerificationSubmission_verification_status(str, Enum):
    """WhatsAppBusinessPartnerClientVerificationSubmission_verification_status enum values."""

    APPROVED = "APPROVED"
    DISCARDED = "DISCARDED"
    FAILED = "FAILED"
    PENDING = "PENDING"
    REVOKED = "REVOKED"


class WhatsAppBusinessPreVerifiedPhoneNumber_code_verification_status(str, Enum):
    """WhatsAppBusinessPreVerifiedPhoneNumber_code_verification_status enum values."""

    EXPIRED = "EXPIRED"
    NOT_VERIFIED = "NOT_VERIFIED"
    VERIFIED = "VERIFIED"


class adaccount_currency(str, Enum):
    """adaccount_currency enum values."""

    AED = "AED"
    ARS = "ARS"
    AUD = "AUD"
    BDT = "BDT"
    BOB = "BOB"
    BRL = "BRL"
    CAD = "CAD"
    CHF = "CHF"
    CLP = "CLP"
    CNY = "CNY"
    COP = "COP"
    CRC = "CRC"
    CZK = "CZK"
    DKK = "DKK"
    DZD = "DZD"
    EGP = "EGP"
    EUR = "EUR"
    GBP = "GBP"
    GTQ = "GTQ"
    HKD = "HKD"
    HNL = "HNL"
    HUF = "HUF"
    IDR = "IDR"
    ILS = "ILS"
    INR = "INR"
    ISK = "ISK"
    JPY = "JPY"
    KES = "KES"
    KRW = "KRW"
    LKR = "LKR"
    MOP = "MOP"
    MXN = "MXN"
    MYR = "MYR"
    NGN = "NGN"
    NIO = "NIO"
    NOK = "NOK"
    NZD = "NZD"
    PEN = "PEN"
    PHP = "PHP"
    PKR = "PKR"
    PLN = "PLN"
    PYG = "PYG"
    QAR = "QAR"
    RON = "RON"
    SAR = "SAR"
    SEK = "SEK"
    SGD = "SGD"
    THB = "THB"
    TRY = "TRY"
    TWD = "TWD"
    UAH = "UAH"
    USD = "USD"
    UYU = "UYU"
    VND = "VND"
    ZAR = "ZAR"


class adaccountactivities_category_enum_param(str, Enum):
    """adaccountactivities_category_enum_param enum values."""

    ACCOUNT = "ACCOUNT"
    AD = "AD"
    AD_KEYWORDS = "AD_KEYWORDS"
    AD_SET = "AD_SET"
    AUDIENCE = "AUDIENCE"
    BID = "BID"
    BUDGET = "BUDGET"
    CAMPAIGN = "CAMPAIGN"
    DATE = "DATE"
    STATUS = "STATUS"
    TARGETING = "TARGETING"


class adaccountactivities_data_source_enum_param(str, Enum):
    """adaccountactivities_data_source_enum_param enum values."""

    CALYPSO = "CALYPSO"
    TAO = "TAO"
    TAO_AD_ACCOUNT = "TAO_AD_ACCOUNT"
    TAO_AD_STATUS = "TAO_AD_STATUS"


class adaccountad_place_page_sets_async_location_types_enum_param(str, Enum):
    """adaccountad_place_page_sets_async_location_types_enum_param enum values."""

    home = "home"
    recent = "recent"


class adaccountad_place_page_sets_async_targeted_area_type_enum_param(str, Enum):
    """adaccountad_place_page_sets_async_targeted_area_type_enum_param enum values."""

    CUSTOM_RADIUS = "CUSTOM_RADIUS"
    MARKETING_AREA = "MARKETING_AREA"
    NONE = "NONE"


class adaccountad_place_page_sets_location_types_enum_param(str, Enum):
    """adaccountad_place_page_sets_location_types_enum_param enum values."""

    home = "home"
    recent = "recent"


class adaccountad_place_page_sets_targeted_area_type_enum_param(str, Enum):
    """adaccountad_place_page_sets_targeted_area_type_enum_param enum values."""

    CUSTOM_RADIUS = "CUSTOM_RADIUS"
    MARKETING_AREA = "MARKETING_AREA"
    NONE = "NONE"


class adaccountadcreatives_applink_treatment_enum_param(str, Enum):
    """adaccountadcreatives_applink_treatment_enum_param enum values."""

    automatic = "automatic"
    deeplink_with_appstore_fallback = "deeplink_with_appstore_fallback"
    deeplink_with_web_fallback = "deeplink_with_web_fallback"
    web_only = "web_only"


class adaccountadcreatives_authorization_category_enum_param(str, Enum):
    """adaccountadcreatives_authorization_category_enum_param enum values."""

    NONE = "NONE"
    POLITICAL = "POLITICAL"
    POLITICAL_WITH_DIGITALLY_CREATED_MEDIA = "POLITICAL_WITH_DIGITALLY_CREATED_MEDIA"


class adaccountadcreatives_categorization_criteria_enum_param(str, Enum):
    """adaccountadcreatives_categorization_criteria_enum_param enum values."""

    brand = "brand"
    category = "category"
    product_type = "product_type"


class adaccountadcreatives_category_media_source_enum_param(str, Enum):
    """adaccountadcreatives_category_media_source_enum_param enum values."""

    CATEGORY = "CATEGORY"
    MIXED = "MIXED"
    PRODUCTS_COLLAGE = "PRODUCTS_COLLAGE"
    PRODUCTS_SLIDESHOW = "PRODUCTS_SLIDESHOW"


class adaccountadcreatives_dynamic_ad_voice_enum_param(str, Enum):
    """adaccountadcreatives_dynamic_ad_voice_enum_param enum values."""

    DYNAMIC = "DYNAMIC"
    STORY_OWNER = "STORY_OWNER"


class adaccountadcreativesbylabels_operator_enum_param(str, Enum):
    """adaccountadcreativesbylabels_operator_enum_param enum values."""

    ALL = "ALL"
    ANY = "ANY"


class adaccountadrules_history_action_enum_param(str, Enum):
    """adaccountadrules_history_action_enum_param enum values."""

    BUDGET_NOT_REDISTRIBUTED = "BUDGET_NOT_REDISTRIBUTED"
    CHANGED_BID = "CHANGED_BID"
    CHANGED_BUDGET = "CHANGED_BUDGET"
    CONSOLIDATE_ASC_FRAGMENTATION = "CONSOLIDATE_ASC_FRAGMENTATION"
    CONSOLIDATE_FRAGMENTATION = "CONSOLIDATE_FRAGMENTATION"
    CONVERT_ASC_CP_SINGLE_INSTANCE = "CONVERT_ASC_CP_SINGLE_INSTANCE"
    EMAIL = "EMAIL"
    ENABLE_ADVANTAGE_CAMPAIGN_BUDGET = "ENABLE_ADVANTAGE_CAMPAIGN_BUDGET"
    ENABLE_ADVANTAGE_PLUS_AUDIENCE = "ENABLE_ADVANTAGE_PLUS_AUDIENCE"
    ENABLE_ADVANTAGE_PLUS_CREATIVE = "ENABLE_ADVANTAGE_PLUS_CREATIVE"
    ENABLE_ADVANTAGE_PLUS_PLACEMENTS = "ENABLE_ADVANTAGE_PLUS_PLACEMENTS"
    ENABLE_AUTOFLOW = "ENABLE_AUTOFLOW"
    ENABLE_GEN_UNCROP = "ENABLE_GEN_UNCROP"
    ENABLE_LANDING_PAGE_VIEWS = "ENABLE_LANDING_PAGE_VIEWS"
    ENABLE_MUSIC = "ENABLE_MUSIC"
    ENABLE_REELS_PLACEMENTS = "ENABLE_REELS_PLACEMENTS"
    ENABLE_SEMANTIC_BASED_AUDIENCE_EXPANSION = "ENABLE_SEMANTIC_BASED_AUDIENCE_EXPANSION"
    ENABLE_SHOPS_ADS = "ENABLE_SHOPS_ADS"
    ENDPOINT_PINGED = "ENDPOINT_PINGED"
    ERROR = "ERROR"
    FACEBOOK_NOTIFICATION_SENT = "FACEBOOK_NOTIFICATION_SENT"
    MESSAGE_SENT = "MESSAGE_SENT"
    NOT_CHANGED = "NOT_CHANGED"
    PAUSED = "PAUSED"
    UNPAUSED = "UNPAUSED"


class adaccountadrules_history_evaluation_type_enum_param(str, Enum):
    """adaccountadrules_history_evaluation_type_enum_param enum values."""

    SCHEDULE = "SCHEDULE"
    TRIGGER = "TRIGGER"


class adaccountadrules_library_status_enum_param(str, Enum):
    """adaccountadrules_library_status_enum_param enum values."""

    DELETED = "DELETED"
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"
    HAS_ISSUES = "HAS_ISSUES"


class adaccountadrules_library_ui_creation_source_enum_param(str, Enum):
    """adaccountadrules_library_ui_creation_source_enum_param enum values."""

    AM_ACCOUNT_OVERVIEW_RECOMMENDATIONS = "AM_ACCOUNT_OVERVIEW_RECOMMENDATIONS"
    AM_ACTIVITY_HISTORY_TABLE = "AM_ACTIVITY_HISTORY_TABLE"
    AM_AD_OBJECT_NAME_CARD = "AM_AD_OBJECT_NAME_CARD"
    AM_AMFE_L3_RECOMMENDATION = "AM_AMFE_L3_RECOMMENDATION"
    AM_AUTOFLOW_GUIDANCE_CARD = "AM_AUTOFLOW_GUIDANCE_CARD"
    AM_AUTO_APPLY_WIDGET = "AM_AUTO_APPLY_WIDGET"
    AM_EDITOR_CARD = "AM_EDITOR_CARD"
    AM_INFO_CARD = "AM_INFO_CARD"
    AM_NAME_CELL_DROPDOWN = "AM_NAME_CELL_DROPDOWN"
    AM_OPTIMIZATION_TIP_GUIDANCE_CARD = "AM_OPTIMIZATION_TIP_GUIDANCE_CARD"
    AM_PERFORMANCE_SUMMARY = "AM_PERFORMANCE_SUMMARY"
    AM_RULE_LANDING_PAGE_BANNER = "AM_RULE_LANDING_PAGE_BANNER"
    AM_SYD_RESOLUTION_FLOW = "AM_SYD_RESOLUTION_FLOW"
    AM_SYD_RESOLUTION_FLOW_MODAL = "AM_SYD_RESOLUTION_FLOW_MODAL"
    AM_TABLE_DELIVERY_COLUMN_POPOVER = "AM_TABLE_DELIVERY_COLUMN_POPOVER"
    AM_TABLE_MORE_RULES_DROPDOWN = "AM_TABLE_MORE_RULES_DROPDOWN"
    AM_TABLE_TOGGLE_POPOVER = "AM_TABLE_TOGGLE_POPOVER"
    AM_TOOLBAR_CREATE_RULE_DROPDOWN = "AM_TOOLBAR_CREATE_RULE_DROPDOWN"
    PE_CAMPAIGN_STRUCTURE_MENU = "PE_CAMPAIGN_STRUCTURE_MENU"
    PE_EDITOR_CARD = "PE_EDITOR_CARD"
    PE_INFO_CARD = "PE_INFO_CARD"
    PE_TOOLBAR_CREATE_RULE_DROPDOWN = "PE_TOOLBAR_CREATE_RULE_DROPDOWN"
    RULES_MANAGEMENT_PAGE_ACTION_DROPDOWN = "RULES_MANAGEMENT_PAGE_ACTION_DROPDOWN"
    RULES_MANAGEMENT_PAGE_RULE_GROUP = "RULES_MANAGEMENT_PAGE_RULE_GROUP"
    RULES_MANAGEMENT_PAGE_RULE_NAME = "RULES_MANAGEMENT_PAGE_RULE_NAME"
    RULES_MANAGEMENT_PAGE_TOP_NAV = "RULES_MANAGEMENT_PAGE_TOP_NAV"
    RULES_VIEW_ACTIVE_RULES_DIALOG = "RULES_VIEW_ACTIVE_RULES_DIALOG"
    RULE_CREATION_SUCCESS_DIALOG = "RULE_CREATION_SUCCESS_DIALOG"
    RULE_SYD_REDIRECT = "RULE_SYD_REDIRECT"
    RULE_TEMPLATES_DIALOG = "RULE_TEMPLATES_DIALOG"


class adaccountads_date_preset_enum_param(str, Enum):
    """adaccountads_date_preset_enum_param enum values."""

    data_maximum = "data_maximum"
    last_14d = "last_14d"
    last_28d = "last_28d"
    last_30d = "last_30d"
    last_3d = "last_3d"
    last_7d = "last_7d"
    last_90d = "last_90d"
    last_month = "last_month"
    last_quarter = "last_quarter"
    last_week_mon_sun = "last_week_mon_sun"
    last_week_sun_sat = "last_week_sun_sat"
    last_year = "last_year"
    maximum = "maximum"
    this_month = "this_month"
    this_quarter = "this_quarter"
    this_week_mon_today = "this_week_mon_today"
    this_week_sun_today = "this_week_sun_today"
    this_year = "this_year"
    today = "today"
    yesterday = "yesterday"


class adaccountads_execution_options_enum_param(str, Enum):
    """adaccountads_execution_options_enum_param enum values."""

    include_recommendations = "include_recommendations"
    synchronous_ad_review = "synchronous_ad_review"
    validate_only = "validate_only"


class adaccountads_status_enum_param(str, Enum):
    """adaccountads_status_enum_param enum values."""

    ACTIVE = "ACTIVE"
    ARCHIVED = "ARCHIVED"
    DELETED = "DELETED"
    PAUSED = "PAUSED"


class adaccountads_volume_recommendation_type_enum_param(str, Enum):
    """adaccountads_volume_recommendation_type_enum_param enum values."""

    AAC_CREATION_PACKAGE = "AAC_CREATION_PACKAGE"
    AB_TEST = "AB_TEST"
    ACCOUNT_ERROR = "ACCOUNT_ERROR"
    ACCOUNT_NEEDS_CREDIT = "ACCOUNT_NEEDS_CREDIT"
    ACCOUNT_SPEND_LIMIT = "ACCOUNT_SPEND_LIMIT"
    ACCOUNT_SPEND_LIMIT_DUPLICATION = "ACCOUNT_SPEND_LIMIT_DUPLICATION"
    ACO_TOGGLE = "ACO_TOGGLE"
    ADSET_BUDGET_SHARING = "ADSET_BUDGET_SHARING"
    ADS_REPORTING = "ADS_REPORTING"
    ADS_STATUS = "ADS_STATUS"
    ADVANCED_CAMPAIGN_BUDGET = "ADVANCED_CAMPAIGN_BUDGET"
    ADVANTAGE_APP_CAMPAIGN = "ADVANTAGE_APP_CAMPAIGN"
    ADVANTAGE_CAMPAIGN_BUDGET_DUPLICATION = "ADVANTAGE_CAMPAIGN_BUDGET_DUPLICATION"
    ADVANTAGE_CUSTOM_AUDIENCE = "ADVANTAGE_CUSTOM_AUDIENCE"
    ADVANTAGE_CUSTOM_AUDIENCE_DUPLICATION = "ADVANTAGE_CUSTOM_AUDIENCE_DUPLICATION"
    ADVANTAGE_CUSTOM_AUDIENCE_UPSELL = "ADVANTAGE_CUSTOM_AUDIENCE_UPSELL"
    ADVANTAGE_DETAILED_TARGETING = "ADVANTAGE_DETAILED_TARGETING"
    ADVANTAGE_LOOKALIKE_AUDIENCE = "ADVANTAGE_LOOKALIKE_AUDIENCE"
    ADVANTAGE_LOOKALIKE_DUPLICATION = "ADVANTAGE_LOOKALIKE_DUPLICATION"
    ADVANTAGE_PLUS_APP_CAMPAIGN = "ADVANTAGE_PLUS_APP_CAMPAIGN"
    ADVANTAGE_PLUS_APP_CAMPAIGN_PRECREATE = "ADVANTAGE_PLUS_APP_CAMPAIGN_PRECREATE"
    ADVANTAGE_PLUS_AUDIENCE = "ADVANTAGE_PLUS_AUDIENCE"
    ADVANTAGE_PLUS_AUDIENCE_DUPLICATION = "ADVANTAGE_PLUS_AUDIENCE_DUPLICATION"
    ADVANTAGE_PLUS_AUDIENCE_FRICTION = "ADVANTAGE_PLUS_AUDIENCE_FRICTION"
    ADVANTAGE_PLUS_AUDIENCE_TOGGLE = "ADVANTAGE_PLUS_AUDIENCE_TOGGLE"
    ADVANTAGE_PLUS_CAMPAIGN_BUDGET = "ADVANTAGE_PLUS_CAMPAIGN_BUDGET"
    ADVANTAGE_PLUS_CATALOG_ADS = "ADVANTAGE_PLUS_CATALOG_ADS"
    ADVANTAGE_PLUS_CREATIVE = "ADVANTAGE_PLUS_CREATIVE"
    ADVANTAGE_PLUS_CREATIVE_CATALOG = "ADVANTAGE_PLUS_CREATIVE_CATALOG"
    ADVANTAGE_PLUS_CREATIVE_SE = "ADVANTAGE_PLUS_CREATIVE_SE"
    ADVANTAGE_PLUS_LEAD_CAMPAIGN = "ADVANTAGE_PLUS_LEAD_CAMPAIGN"
    ADVANTAGE_PLUS_PLACEMENTS_DUPLICATION = "ADVANTAGE_PLUS_PLACEMENTS_DUPLICATION"
    ADVANTAGE_PLUS_PLACEMENTS_FRICTION = "ADVANTAGE_PLUS_PLACEMENTS_FRICTION"
    ADVANTAGE_PLUS_PLACEMENTS_V2_DUPLICATION = "ADVANTAGE_PLUS_PLACEMENTS_V2_DUPLICATION"
    ADVANTAGE_SHOPPING_CAMPAIGN = "ADVANTAGE_SHOPPING_CAMPAIGN"
    ADVANTAGE_SHOPPING_CAMPAIGN_FRAGMENTATION = "ADVANTAGE_SHOPPING_CAMPAIGN_FRAGMENTATION"
    AD_ACCOUNT_PLACEMENT_CONTROLS_UPSELL = "AD_ACCOUNT_PLACEMENT_CONTROLS_UPSELL"
    AD_LIFT_RECALL_GOAL = "AD_LIFT_RECALL_GOAL"
    AD_LIFT_RECALL_GOAL_PRECREATE = "AD_LIFT_RECALL_GOAL_PRECREATE"
    AD_LIFT_RECALL_OPTIMIZATION_GOAL = "AD_LIFT_RECALL_OPTIMIZATION_GOAL"
    AD_OBJECTIVE = "AD_OBJECTIVE"
    AD_SET_BUDGET_SHARING_GUIDANCE = "AD_SET_BUDGET_SHARING_GUIDANCE"
    AEM_V2_INELIGIBLE = "AEM_V2_INELIGIBLE"
    AGGREGATED_BID_LIMITED = "AGGREGATED_BID_LIMITED"
    AGGREGATED_BUDGET_LIMITED = "AGGREGATED_BUDGET_LIMITED"
    AGGREGATED_COST_LIMITED = "AGGREGATED_COST_LIMITED"
    APLUSC_ADD_OVERLAYS = "APLUSC_ADD_OVERLAYS"
    APLUSC_DYNAMIC_DESCRIPTION = "APLUSC_DYNAMIC_DESCRIPTION"
    APLUSC_IMAGE_BACKGROUND_GENERATION = "APLUSC_IMAGE_BACKGROUND_GENERATION"
    APLUSC_MUSIC = "APLUSC_MUSIC"
    APLUSC_RELEVANT_COMMENTS = "APLUSC_RELEVANT_COMMENTS"
    APLUSC_STANDARD_ENHANCEMENTS_BUNDLE = "APLUSC_STANDARD_ENHANCEMENTS_BUNDLE"
    APLUSC_TEXT_IMPROVEMENTS = "APLUSC_TEXT_IMPROVEMENTS"
    APLUSC_VISUAL_TOUCHUPS = "APLUSC_VISUAL_TOUCHUPS"
    APLUS_C_CATALOG_DUPLICATION = "APLUS_C_CATALOG_DUPLICATION"
    APP_AEM_V2_INSTALLATION_PROMOTION = "APP_AEM_V2_INSTALLATION_PROMOTION"
    APP_ENGAGED_VIEW_CONVERSIONS_DUPLICATION = "APP_ENGAGED_VIEW_CONVERSIONS_DUPLICATION"
    ASC_AUTOMATION = "ASC_AUTOMATION"
    ASC_BUDGET_OPTIMIZATION = "ASC_BUDGET_OPTIMIZATION"
    ASC_CREATION_PACKAGE = "ASC_CREATION_PACKAGE"
    ASC_FRAGMENTATION_V2 = "ASC_FRAGMENTATION_V2"
    ASC_PRECREATE = "ASC_PRECREATE"
    ASPECT_RATIO = "ASPECT_RATIO"
    ATLEAST_6_PLACEMENTS = "ATLEAST_6_PLACEMENTS"
    AUCTION_OVERLAP = "AUCTION_OVERLAP"
    AUCTION_OVERLAP_CONSOLIDATION = "AUCTION_OVERLAP_CONSOLIDATION"
    AUDIENCE_EXPANSION = "AUDIENCE_EXPANSION"
    AUDIENCE_EXPANSION_GEORADIUS = "AUDIENCE_EXPANSION_GEORADIUS"
    AUDIENCE_EXPANSION_LOOKALIKE = "AUDIENCE_EXPANSION_LOOKALIKE"
    AUDIENCE_EXPANSION_RETARGETING = "AUDIENCE_EXPANSION_RETARGETING"
    AUDIENCE_LEARNING_LIMITED = "AUDIENCE_LEARNING_LIMITED"
    AUTOBID_TO_MANUAL_BID = "AUTOBID_TO_MANUAL_BID"
    AUTOFLOW_OPT_IN = "AUTOFLOW_OPT_IN"
    AUTOFLOW_OPT_IN_FALLBACK_DUPLICATION_FLOW = "AUTOFLOW_OPT_IN_FALLBACK_DUPLICATION_FLOW"
    AUTOFLOW_OPT_IN_V2 = "AUTOFLOW_OPT_IN_V2"
    AUTOMATIC_PLACEMENTS = "AUTOMATIC_PLACEMENTS"
    AUTOMATIC_PLACEMENTS_V2 = "AUTOMATIC_PLACEMENTS_V2"
    AUTO_BID = "AUTO_BID"
    AUTO_CAT_SELECTION_ENHANCEMENT = "AUTO_CAT_SELECTION_ENHANCEMENT"
    BACKGROUND_GENERATION = "BACKGROUND_GENERATION"
    BID_LIMITED_SENSITIVE = "BID_LIMITED_SENSITIVE"
    BID_LIMITED_STARVING = "BID_LIMITED_STARVING"
    BLENDED_ADS = "BLENDED_ADS"
    BLENDED_ADS_DUPLICATION = "BLENDED_ADS_DUPLICATION"
    BLENDED_ADS_FOR_SHOPS_ADS_DUPLICATION = "BLENDED_ADS_FOR_SHOPS_ADS_DUPLICATION"
    BPBAA_WITH_CAPI_UPSELL = "BPBAA_WITH_CAPI_UPSELL"
    BROADGEO_AM_UPSELL_GUIDANCE = "BROADGEO_AM_UPSELL_GUIDANCE"
    BROAD_TARGETING = "BROAD_TARGETING"
    BUDGET_AMORTIZATION = "BUDGET_AMORTIZATION"
    BUDGET_LIMITED = "BUDGET_LIMITED"
    BUDGET_REALLOCATION = "BUDGET_REALLOCATION"
    CALL_ADS_DAYPARTING_L3_RECOMMENDATION = "CALL_ADS_DAYPARTING_L3_RECOMMENDATION"
    CAMPAIGN_GUIDANCE_NAVIGATOR_REELS_TIPS = "CAMPAIGN_GUIDANCE_NAVIGATOR_REELS_TIPS"
    CAPI = "CAPI"
    CAPI_CRM_FUNNEL = "CAPI_CRM_FUNNEL"
    CAPI_CRM_GUIDANCE = "CAPI_CRM_GUIDANCE"
    CAPI_CRM_SETUP = "CAPI_CRM_SETUP"
    CAPI_EVENT_COVERAGE = "CAPI_EVENT_COVERAGE"
    CAPI_PENETRATION = "CAPI_PENETRATION"
    CAPI_PERFORMANCE_MATCH_KEY = "CAPI_PERFORMANCE_MATCH_KEY"
    CAPI_PERFORMANCE_MATCH_KEY_V2 = "CAPI_PERFORMANCE_MATCH_KEY_V2"
    CASH_REWARDS_OPT_IN = "CASH_REWARDS_OPT_IN"
    CATALOG_DYNAMIC_MEDIA = "CATALOG_DYNAMIC_MEDIA"
    CATALOG_MATCH_RATE = "CATALOG_MATCH_RATE"
    COMMERCE_SHOPS_ADS_DUPLICATION = "COMMERCE_SHOPS_ADS_DUPLICATION"
    CONNECTED_SOURCES = "CONNECTED_SOURCES"
    CONNECTED_SOURCES_DUPLICATION = "CONNECTED_SOURCES_DUPLICATION"
    CONNECT_FACEBOOK_PAGE_TO_INSTAGRAM = "CONNECT_FACEBOOK_PAGE_TO_INSTAGRAM"
    CONNECT_FACEBOOK_PAGE_TO_WHATSAPP = "CONNECT_FACEBOOK_PAGE_TO_WHATSAPP"
    CONVERSION_LEADS_OPTIMIZATION = "CONVERSION_LEADS_OPTIMIZATION"
    CONVERSION_LEADS_OPTIMIZATION_DUPLICATION = "CONVERSION_LEADS_OPTIMIZATION_DUPLICATION"
    CONVERSION_LEAD_ADS = "CONVERSION_LEAD_ADS"
    COST_GOAL = "COST_GOAL"
    COST_GOAL_BUDGET_LIMITED = "COST_GOAL_BUDGET_LIMITED"
    COST_GOAL_CPA_LIMITED = "COST_GOAL_CPA_LIMITED"
    COST_PER_RESULT = "COST_PER_RESULT"
    CREATION_PACKAGE_UPGRADE_TO_ASC = "CREATION_PACKAGE_UPGRADE_TO_ASC"
    CREATION_PACKAGE_UPGRADE_TO_CTX = "CREATION_PACKAGE_UPGRADE_TO_CTX"
    CREATION_PACKAGE_UPGRADE_TO_TLA = "CREATION_PACKAGE_UPGRADE_TO_TLA"
    CREATION_PACKAGE_UPGRADE_TO_TMC = "CREATION_PACKAGE_UPGRADE_TO_TMC"
    CREATIVE_BADGE = "CREATIVE_BADGE"
    CREATIVE_DIVERSITY = "CREATIVE_DIVERSITY"
    CREATIVE_FATIGUE = "CREATIVE_FATIGUE"
    CREATIVE_FATIGUE_DUPLICATION = "CREATIVE_FATIGUE_DUPLICATION"
    CREATIVE_FATIGUE_HOURLY = "CREATIVE_FATIGUE_HOURLY"
    CREATIVE_LIMITED = "CREATIVE_LIMITED"
    CREATIVE_LIMITED_DUPLICATION = "CREATIVE_LIMITED_DUPLICATION"
    CREATIVE_LIMITED_HOURLY = "CREATIVE_LIMITED_HOURLY"
    CREATOR_ADS_PA_CONVERSION = "CREATOR_ADS_PA_CONVERSION"
    CTA = "CTA"
    CTM_AD_OBJECTIVE_GROWTH = "CTM_AD_OBJECTIVE_GROWTH"
    CTM_LEADS_OPTIMIZATION_UPSELL = "CTM_LEADS_OPTIMIZATION_UPSELL"
    CTX_BUDGET_OPTIMIZATION = "CTX_BUDGET_OPTIMIZATION"
    CTX_CREATION_PACKAGE = "CTX_CREATION_PACKAGE"
    CTX_CTA_UPGRADE_IN_DUPLICATION = "CTX_CTA_UPGRADE_IN_DUPLICATION"
    CTX_CTMPO_UPGRADE = "CTX_CTMPO_UPGRADE"
    CTX_CTWAPO_UPGRADE = "CTX_CTWAPO_UPGRADE"
    CTX_GUIDANCE = "CTX_GUIDANCE"
    CTX_HVS = "CTX_HVS"
    CTX_MULTI_MESSAGE_DESTINATION = "CTX_MULTI_MESSAGE_DESTINATION"
    CTX_PRECREATE = "CTX_PRECREATE"
    CTX_PRODUCT_EXTENSION_DUPLICATION = "CTX_PRODUCT_EXTENSION_DUPLICATION"
    CTX_SABR_CBO = "CTX_SABR_CBO"
    CTX_SABR_NON_CBO = "CTX_SABR_NON_CBO"
    CTX_SMART_DEFAULTING = "CTX_SMART_DEFAULTING"
    CTX_ZO_CBO = "CTX_ZO_CBO"
    CTX_ZO_NON_CBO = "CTX_ZO_NON_CBO"
    CUSTOM_AUDIENCE_RELAXATION = "CUSTOM_AUDIENCE_RELAXATION"
    DA_ADVANTAGE_PLUS_CREATIVE_INFO_LABELS = "DA_ADVANTAGE_PLUS_CREATIVE_INFO_LABELS"
    DA_DUPLICATION_PRODUCT_TAGS = "DA_DUPLICATION_PRODUCT_TAGS"
    DEAD_LINK = "DEAD_LINK"
    DEFRAGMENTATION_ACB = "DEFRAGMENTATION_ACB"
    DEFRAGMENTATION_ACB_DUPLICATION = "DEFRAGMENTATION_ACB_DUPLICATION"
    DEFRAGMENTATION_USING_VALUE_RULES_TEST_V2 = "DEFRAGMENTATION_USING_VALUE_RULES_TEST_V2"
    DELIVERY_ERROR = "DELIVERY_ERROR"
    DELIVERY_WARNING = "DELIVERY_WARNING"
    DYNAMIC_ADVANTAGE_CAMPAIGN_BUDGET = "DYNAMIC_ADVANTAGE_CAMPAIGN_BUDGET"
    ECOSYSTEM_BID_REDUCE_L1_CARDINALITY = "ECOSYSTEM_BID_REDUCE_L1_CARDINALITY"
    ENABLE_WHATS_APP_ADS_DATA_SHARING = "ENABLE_WHATS_APP_ADS_DATA_SHARING"
    ENGAGED_VIEW_CONVERSIONS_CREATION = "ENGAGED_VIEW_CONVERSIONS_CREATION"
    EVC_APP_DUPLICATION_UPGRADE = "EVC_APP_DUPLICATION_UPGRADE"
    EVC_WEB_DUPLICATION_UPGRADE = "EVC_WEB_DUPLICATION_UPGRADE"
    FRAGMENTATION = "FRAGMENTATION"
    FRAGMENTATION_RESOLUTION_UPDATE = "FRAGMENTATION_RESOLUTION_UPDATE"
    FRAGMENTATION_V2 = "FRAGMENTATION_V2"
    GENERATIVE_UNCROP_DUPLICATION = "GENERATIVE_UNCROP_DUPLICATION"
    GEN_AI_MVP = "GEN_AI_MVP"
    GES_TEST = "GES_TEST"
    GUIDANCE_CENTER_CODE_GEN = "GUIDANCE_CENTER_CODE_GEN"
    HEURISTIC_DEFAULT_DURATION = "HEURISTIC_DEFAULT_DURATION"
    HIGH_COST = "HIGH_COST"
    HISTORICAL_BENCHMARK = "HISTORICAL_BENCHMARK"
    IAA_ROAS_OPTIMIZATION = "IAA_ROAS_OPTIMIZATION"
    IG_MULTI_ADS = "IG_MULTI_ADS"
    IG_SURFACES_MANUAL_PLACEMENTS = "IG_SURFACES_MANUAL_PLACEMENTS"
    INCREMENTAL_ATTRIBUTION = "INCREMENTAL_ATTRIBUTION"
    INSTANT_FORMS_LEADS = "INSTANT_FORMS_LEADS"
    LANDING_PAGE_VIEW = "LANDING_PAGE_VIEW"
    LANDING_PAGE_VIEW_OPTIMIZATION_GOAL = "LANDING_PAGE_VIEW_OPTIMIZATION_GOAL"
    LANDING_PAGE_VIEW_PRECREATE = "LANDING_PAGE_VIEW_PRECREATE"
    LEAD_ADS_GUIDANCE = "LEAD_ADS_GUIDANCE"
    LEARNING_LIMITED = "LEARNING_LIMITED"
    LEARNING_PAUSE_FRICTION = "LEARNING_PAUSE_FRICTION"
    LEARNING_PHASE_BUDGET_EDITS = "LEARNING_PHASE_BUDGET_EDITS"
    LOW_BUDGET_UTILIZATION = "LOW_BUDGET_UTILIZATION"
    LOW_OUTCOME = "LOW_OUTCOME"
    MERLIN_GUIDANCE = "MERLIN_GUIDANCE"
    MESSAGING_EVENTS = "MESSAGING_EVENTS"
    MESSAGING_EVENTS_PRECREATE = "MESSAGING_EVENTS_PRECREATE"
    MESSAGING_PARTNERS = "MESSAGING_PARTNERS"
    MESSAGING_PARTNERS_PRECREATE = "MESSAGING_PARTNERS_PRECREATE"
    META_VERIFIED_ADS_PERFORMANCE_GUIDANCE = "META_VERIFIED_ADS_PERFORMANCE_GUIDANCE"
    MISSING_OR_INVALID_PARAMETERS = "MISSING_OR_INVALID_PARAMETERS"
    MIXED_FORMATS = "MIXED_FORMATS"
    MIXED_PA_COMBINE_ADSETS = "MIXED_PA_COMBINE_ADSETS"
    MMT_CAROUSEL_TO_VIDEO = "MMT_CAROUSEL_TO_VIDEO"
    MOBILE_FIRST_CREATIVE = "MOBILE_FIRST_CREATIVE"
    MOBILE_FIRST_VIDEO = "MOBILE_FIRST_VIDEO"
    MR_AEMV2SUB_KCONSOLIDATION = "MR_AEMV2SUB_KCONSOLIDATION"
    MULTI_ADVERTISER_ADS = "MULTI_ADVERTISER_ADS"
    MULTI_TEXT = "MULTI_TEXT"
    MUSIC = "MUSIC"
    NOT_APPLICABLE = "NOT_APPLICABLE"
    NO_DELIVERY_STATUS = "NO_DELIVERY_STATUS"
    OFFSITE_CONVERSION = "OFFSITE_CONVERSION"
    OFFSITE_CONVERSION_BASED_ON_SIGNALS = "OFFSITE_CONVERSION_BASED_ON_SIGNALS"
    OPTIMAL_BAU = "OPTIMAL_BAU"
    OUTCOME_FORECASTER_BUDGET_RECOMMENDATION = "OUTCOME_FORECASTER_BUDGET_RECOMMENDATION"
    OUTCOME_FORECASTER_SHADOW_LOGGING = "OUTCOME_FORECASTER_SHADOW_LOGGING"
    PAYMENT_METHOD = "PAYMENT_METHOD"
    PERFORMANT_CREATIVE_REELS_OPT_IN = "PERFORMANT_CREATIVE_REELS_OPT_IN"
    PFR_L1_INLINE_MMT = "PFR_L1_INLINE_MMT"
    PIXELLESS_LPV_OPTIMIZATION_GOAL = "PIXELLESS_LPV_OPTIMIZATION_GOAL"
    PIXEL_OPTIMIZATION_AAM = "PIXEL_OPTIMIZATION_AAM"
    PIXEL_OPTIMIZATION_AAM_PRECREATE = "PIXEL_OPTIMIZATION_AAM_PRECREATE"
    PIXEL_OPTIMIZATION_HIE = "PIXEL_OPTIMIZATION_HIE"
    PIXEL_OPTIMIZATION_HIE_PRECREATE = "PIXEL_OPTIMIZATION_HIE_PRECREATE"
    PIXEL_SETUP = "PIXEL_SETUP"
    PIXEL_SETUP_PRECREATE = "PIXEL_SETUP_PRECREATE"
    PIXEL_UPSELL = "PIXEL_UPSELL"
    PLACEMENTS_LIQUIDITY_AUTOMATIC_GUIDANCE = "PLACEMENTS_LIQUIDITY_AUTOMATIC_GUIDANCE"
    PREDICTIVE_CREATIVE_LIMITED = "PREDICTIVE_CREATIVE_LIMITED"
    PREDICTIVE_CREATIVE_LIMITED_HOURLY = "PREDICTIVE_CREATIVE_LIMITED_HOURLY"
    PREPARING_STATUS = "PREPARING_STATUS"
    PRODUCT_SET_BOOSTING = "PRODUCT_SET_BOOSTING"
    PROMO_ADS_UPSELL_GUIDANCE = "PROMO_ADS_UPSELL_GUIDANCE"
    PURCHASE_OPTIMIZATION = "PURCHASE_OPTIMIZATION"
    RAPID_LEARNING_LIMITED = "RAPID_LEARNING_LIMITED"
    RAPID_LEARNING_PHASE = "RAPID_LEARNING_PHASE"
    REACH_OPTIMIZATION_GOAL = "REACH_OPTIMIZATION_GOAL"
    REACH_OPTIMIZATION_GOAL_PRECREATE = "REACH_OPTIMIZATION_GOAL_PRECREATE"
    REELS_DUPLICATION_UPSELL = "REELS_DUPLICATION_UPSELL"
    REELS_MUSIC_DUPLICATION = "REELS_MUSIC_DUPLICATION"
    REELS_PC_AND_MOBILE_FIRST_CREATIVE = "REELS_PC_AND_MOBILE_FIRST_CREATIVE"
    REELS_PC_RECOMMENDATION = "REELS_PC_RECOMMENDATION"
    REELS_PERFORMANT_CREATIVE = "REELS_PERFORMANT_CREATIVE"
    REELS_PLACEMENT = "REELS_PLACEMENT"
    REVERT = "REVERT"
    REVIEW_CREATIVE_DUPLICATED_REJECTED_ADS = "REVIEW_CREATIVE_DUPLICATED_REJECTED_ADS"
    SABR_DEFAULT_DURATION = "SABR_DEFAULT_DURATION"
    SALES_CONVERSION = "SALES_CONVERSION"
    SAVED_AUDIENCE = "SAVED_AUDIENCE"
    SCALE_GOOD_CAMPAIGN = "SCALE_GOOD_CAMPAIGN"
    SCALE_GOOD_CAMPAIGN_DUPLICATION = "SCALE_GOOD_CAMPAIGN_DUPLICATION"
    SCALE_GOOD_CAMPAIGN_SMB = "SCALE_GOOD_CAMPAIGN_SMB"
    SCALE_GOOD_CTX_CAMPAIGN = "SCALE_GOOD_CTX_CAMPAIGN"
    SEASONAL_CAMPAIGNS = "SEASONAL_CAMPAIGNS"
    SEMANTIC_BASED_AUDIENCE_DUPLICATION = "SEMANTIC_BASED_AUDIENCE_DUPLICATION"
    SEMANTIC_BASED_AUDIENCE_EXPANSION = "SEMANTIC_BASED_AUDIENCE_EXPANSION"
    SETUP_PIXEL = "SETUP_PIXEL"
    SHOPS_ADS = "SHOPS_ADS"
    SHOPS_ADS_DUPLICATION = "SHOPS_ADS_DUPLICATION"
    SHOPS_ADS_SAOFF = "SHOPS_ADS_SAOFF"
    SHOPS_ADS_TRAFFIC_CAP_SETTINGS = "SHOPS_ADS_TRAFFIC_CAP_SETTINGS"
    SHOP_ADS_V2 = "SHOP_ADS_V2"
    SIGNALS_DOWN_FUNNEL_EVENT_OPTIMIZATION = "SIGNALS_DOWN_FUNNEL_EVENT_OPTIMIZATION"
    SIGNALS_GROWTH_CAPI = "SIGNALS_GROWTH_CAPI"
    SIGNALS_GROWTH_CAPI_PRECREATE = "SIGNALS_GROWTH_CAPI_PRECREATE"
    SIGNALS_GROWTH_CAPI_TABLE = "SIGNALS_GROWTH_CAPI_TABLE"
    SIGNALS_GROWTH_CAPI_V2 = "SIGNALS_GROWTH_CAPI_V2"
    SIMILAR_ADVERTISER_BUDGET_RECOMMENDATION = "SIMILAR_ADVERTISER_BUDGET_RECOMMENDATION"
    SITE_EXTENSIONS_DUPLICATION = "SITE_EXTENSIONS_DUPLICATION"
    SIX_PLUS_MANUAL_PLACEMENTS = "SIX_PLUS_MANUAL_PLACEMENTS"
    SIX_PLUS_PLACEMENTS_DUPLICATION = "SIX_PLUS_PLACEMENTS_DUPLICATION"
    SPEND_LIMIT = "SPEND_LIMIT"
    SYD_TEST_MODE = "SYD_TEST_MODE"
    TAILORED_LEAD_AD_CAMPAIGN = "TAILORED_LEAD_AD_CAMPAIGN"
    TAILORED_MESSAGES_CAMPAIGN = "TAILORED_MESSAGES_CAMPAIGN"
    TARGETING_CREATIVE_FRAGMENTATION = "TARGETING_CREATIVE_FRAGMENTATION"
    TLA_CREATION_PACKAGE = "TLA_CREATION_PACKAGE"
    TOP_ADSETS_WITH_ADS_UNDER_CAP = "TOP_ADSETS_WITH_ADS_UNDER_CAP"
    TOP_CAMPAIGNS_WITH_ADS_UNDER_CAP = "TOP_CAMPAIGNS_WITH_ADS_UNDER_CAP"
    TWO_P_GUIDANCE_CARD_AAA = "TWO_P_GUIDANCE_CARD_AAA"
    TWO_P_GUIDANCE_CARD_AUTO_PLACEMENT = "TWO_P_GUIDANCE_CARD_AUTO_PLACEMENT"
    TWO_P_GUIDANCE_CARD_CBO_OFF = "TWO_P_GUIDANCE_CARD_CBO_OFF"
    TWO_P_GUIDANCE_CARD_CTM_PREFLIGHT = "TWO_P_GUIDANCE_CARD_CTM_PREFLIGHT"
    UNCROP_IMAGE = "UNCROP_IMAGE"
    UNECONOMICAL_ADS_THROTTLING = "UNECONOMICAL_ADS_THROTTLING"
    UNIFIED_INBOX = "UNIFIED_INBOX"
    UNUSED_BUDGET = "UNUSED_BUDGET"
    VALUE_DIAGNOSTICS_GUIDANCE = "VALUE_DIAGNOSTICS_GUIDANCE"
    VALUE_OPTIMIZATION_GOAL = "VALUE_OPTIMIZATION_GOAL"
    VALUE_RULES_GUIDANCE = "VALUE_RULES_GUIDANCE"
    VIDEO_LENGTH = "VIDEO_LENGTH"
    VIDEO_VIEWS_UPSELL = "VIDEO_VIEWS_UPSELL"
    VIDEO_VIEWS_UPSELL_PRECREATE = "VIDEO_VIEWS_UPSELL_PRECREATE"
    VO_VT_1D_DEFAULTING = "VO_VT_1D_DEFAULTING"
    WA_MESSAGING_PARTNERS = "WA_MESSAGING_PARTNERS"
    WA_MESSAGING_PARTNERS_PRECREATE = "WA_MESSAGING_PARTNERS_PRECREATE"
    WEB_ENGAGED_VIEW_CONVERSIONS = "WEB_ENGAGED_VIEW_CONVERSIONS"
    WTWA_UPSELL_IN_DUPLICATION = "WTWA_UPSELL_IN_DUPLICATION"
    ZERO_CONVERSION = "ZERO_CONVERSION"
    ZERO_IMPRESSION = "ZERO_IMPRESSION"
    ZERO_OUTCOME_BUDGET = "ZERO_OUTCOME_BUDGET"


class adaccountadsbylabels_operator_enum_param(str, Enum):
    """adaccountadsbylabels_operator_enum_param enum values."""

    ALL = "ALL"
    ANY = "ANY"


class adaccountadsets_bid_strategy_enum_param(str, Enum):
    """adaccountadsets_bid_strategy_enum_param enum values."""

    COST_CAP = "COST_CAP"
    LOWEST_COST_WITHOUT_CAP = "LOWEST_COST_WITHOUT_CAP"
    LOWEST_COST_WITH_BID_CAP = "LOWEST_COST_WITH_BID_CAP"
    LOWEST_COST_WITH_MIN_ROAS = "LOWEST_COST_WITH_MIN_ROAS"


class adaccountadsets_billing_event_enum_param(str, Enum):
    """adaccountadsets_billing_event_enum_param enum values."""

    APP_INSTALLS = "APP_INSTALLS"
    CLICKS = "CLICKS"
    IMPRESSIONS = "IMPRESSIONS"
    LINK_CLICKS = "LINK_CLICKS"
    LISTING_INTERACTION = "LISTING_INTERACTION"
    NONE = "NONE"
    OFFER_CLAIMS = "OFFER_CLAIMS"
    PAGE_LIKES = "PAGE_LIKES"
    POST_ENGAGEMENT = "POST_ENGAGEMENT"
    PURCHASE = "PURCHASE"
    THRUPLAY = "THRUPLAY"


class adaccountadsets_budget_source_enum_param(str, Enum):
    """adaccountadsets_budget_source_enum_param enum values."""

    NONE = "NONE"
    RMN = "RMN"


class adaccountadsets_creative_sequence_repetition_pattern_enum_param(str, Enum):
    """adaccountadsets_creative_sequence_repetition_pattern_enum_param enum values."""

    FULL_SEQUENCE = "FULL_SEQUENCE"
    LAST_AD = "LAST_AD"


class adaccountadsets_date_preset_enum_param(str, Enum):
    """adaccountadsets_date_preset_enum_param enum values."""

    DATA_MAXIMUM = "DATA_MAXIMUM"
    LAST_14D = "LAST_14D"
    LAST_28D = "LAST_28D"
    LAST_30D = "LAST_30D"
    LAST_3D = "LAST_3D"
    LAST_7D = "LAST_7D"
    LAST_90D = "LAST_90D"
    LAST_MONTH = "LAST_MONTH"
    LAST_QUARTER = "LAST_QUARTER"
    LAST_WEEK_MON_SUN = "LAST_WEEK_MON_SUN"
    LAST_WEEK_SUN_SAT = "LAST_WEEK_SUN_SAT"
    LAST_YEAR = "LAST_YEAR"
    MAXIMUM = "MAXIMUM"
    THIS_MONTH = "THIS_MONTH"
    THIS_QUARTER = "THIS_QUARTER"
    THIS_WEEK_MON_TODAY = "THIS_WEEK_MON_TODAY"
    THIS_WEEK_SUN_TODAY = "THIS_WEEK_SUN_TODAY"
    THIS_YEAR = "THIS_YEAR"
    TODAY = "TODAY"
    YESTERDAY = "YESTERDAY"


class adaccountadsets_destination_type_enum_param(str, Enum):
    """adaccountadsets_destination_type_enum_param enum values."""

    APP = "APP"
    APPLINKS_AUTOMATIC = "APPLINKS_AUTOMATIC"
    FACEBOOK = "FACEBOOK"
    FACEBOOK_LIVE = "FACEBOOK_LIVE"
    FACEBOOK_PAGE = "FACEBOOK_PAGE"
    IMAGINE = "IMAGINE"
    INSTAGRAM_DIRECT = "INSTAGRAM_DIRECT"
    INSTAGRAM_LIVE = "INSTAGRAM_LIVE"
    INSTAGRAM_PROFILE = "INSTAGRAM_PROFILE"
    INSTAGRAM_PROFILE_AND_FACEBOOK_PAGE = "INSTAGRAM_PROFILE_AND_FACEBOOK_PAGE"
    MESSAGING_INSTAGRAM_DIRECT_MESSENGER = "MESSAGING_INSTAGRAM_DIRECT_MESSENGER"
    MESSAGING_INSTAGRAM_DIRECT_MESSENGER_WHATSAPP = "MESSAGING_INSTAGRAM_DIRECT_MESSENGER_WHATSAPP"
    MESSAGING_INSTAGRAM_DIRECT_WHATSAPP = "MESSAGING_INSTAGRAM_DIRECT_WHATSAPP"
    MESSAGING_MESSENGER_WHATSAPP = "MESSAGING_MESSENGER_WHATSAPP"
    MESSENGER = "MESSENGER"
    ON_AD = "ON_AD"
    ON_EVENT = "ON_EVENT"
    ON_PAGE = "ON_PAGE"
    ON_POST = "ON_POST"
    ON_VIDEO = "ON_VIDEO"
    SHOP_AUTOMATIC = "SHOP_AUTOMATIC"
    WEBSITE = "WEBSITE"
    WHATSAPP = "WHATSAPP"


class adaccountadsets_effective_status_enum_param(str, Enum):
    """adaccountadsets_effective_status_enum_param enum values."""

    ACTIVE = "ACTIVE"
    ADSET_PAUSED = "ADSET_PAUSED"
    ARCHIVED = "ARCHIVED"
    CAMPAIGN_PAUSED = "CAMPAIGN_PAUSED"
    DELETED = "DELETED"
    DISAPPROVED = "DISAPPROVED"
    IN_PROCESS = "IN_PROCESS"
    PAUSED = "PAUSED"
    PENDING_BILLING_INFO = "PENDING_BILLING_INFO"
    PENDING_REVIEW = "PENDING_REVIEW"
    PREAPPROVED = "PREAPPROVED"
    WITH_ISSUES = "WITH_ISSUES"


class adaccountadsets_execution_options_enum_param(str, Enum):
    """adaccountadsets_execution_options_enum_param enum values."""

    include_recommendations = "include_recommendations"
    validate_only = "validate_only"


class adaccountadsets_full_funnel_exploration_mode_enum_param(str, Enum):
    """adaccountadsets_full_funnel_exploration_mode_enum_param enum values."""

    EXTENDED_EXPLORATION = "EXTENDED_EXPLORATION"
    LIMITED_EXPLORATION = "LIMITED_EXPLORATION"
    NONE_EXPLORATION = "NONE_EXPLORATION"


class adaccountadsets_multi_optimization_goal_weight_enum_param(str, Enum):
    """adaccountadsets_multi_optimization_goal_weight_enum_param enum values."""

    BALANCED = "BALANCED"
    PREFER_EVENT = "PREFER_EVENT"
    PREFER_INSTALL = "PREFER_INSTALL"
    UNDEFINED = "UNDEFINED"


class adaccountadsets_optimization_goal_enum_param(str, Enum):
    """adaccountadsets_optimization_goal_enum_param enum values."""

    ADVERTISER_SILOED_VALUE = "ADVERTISER_SILOED_VALUE"
    AD_RECALL_LIFT = "AD_RECALL_LIFT"
    APP_INSTALLS = "APP_INSTALLS"
    APP_INSTALLS_AND_OFFSITE_CONVERSIONS = "APP_INSTALLS_AND_OFFSITE_CONVERSIONS"
    CONVERSATIONS = "CONVERSATIONS"
    DERIVED_EVENTS = "DERIVED_EVENTS"
    ENGAGED_USERS = "ENGAGED_USERS"
    EVENT_RESPONSES = "EVENT_RESPONSES"
    IMPRESSIONS = "IMPRESSIONS"
    IN_APP_VALUE = "IN_APP_VALUE"
    LANDING_PAGE_VIEWS = "LANDING_PAGE_VIEWS"
    LEAD_GENERATION = "LEAD_GENERATION"
    LINK_CLICKS = "LINK_CLICKS"
    MEANINGFUL_CALL_ATTEMPT = "MEANINGFUL_CALL_ATTEMPT"
    MESSAGING_APPOINTMENT_CONVERSION = "MESSAGING_APPOINTMENT_CONVERSION"
    MESSAGING_PURCHASE_CONVERSION = "MESSAGING_PURCHASE_CONVERSION"
    NONE = "NONE"
    OFFSITE_CONVERSIONS = "OFFSITE_CONVERSIONS"
    PAGE_LIKES = "PAGE_LIKES"
    POST_ENGAGEMENT = "POST_ENGAGEMENT"
    PROFILE_AND_PAGE_ENGAGEMENT = "PROFILE_AND_PAGE_ENGAGEMENT"
    PROFILE_VISIT = "PROFILE_VISIT"
    QUALITY_CALL = "QUALITY_CALL"
    QUALITY_LEAD = "QUALITY_LEAD"
    REACH = "REACH"
    REMINDERS_SET = "REMINDERS_SET"
    SUBSCRIBERS = "SUBSCRIBERS"
    THRUPLAY = "THRUPLAY"
    VALUE = "VALUE"
    VISIT_INSTAGRAM_PROFILE = "VISIT_INSTAGRAM_PROFILE"


class adaccountadsets_optimization_sub_event_enum_param(str, Enum):
    """adaccountadsets_optimization_sub_event_enum_param enum values."""

    NONE = "NONE"
    TRAVEL_INTENT = "TRAVEL_INTENT"
    TRAVEL_INTENT_BUCKET_01 = "TRAVEL_INTENT_BUCKET_01"
    TRAVEL_INTENT_BUCKET_02 = "TRAVEL_INTENT_BUCKET_02"
    TRAVEL_INTENT_BUCKET_03 = "TRAVEL_INTENT_BUCKET_03"
    TRAVEL_INTENT_BUCKET_04 = "TRAVEL_INTENT_BUCKET_04"
    TRAVEL_INTENT_BUCKET_05 = "TRAVEL_INTENT_BUCKET_05"
    TRAVEL_INTENT_NO_DESTINATION_INTENT = "TRAVEL_INTENT_NO_DESTINATION_INTENT"
    TRIP_CONSIDERATION = "TRIP_CONSIDERATION"
    VIDEO_SOUND_ON = "VIDEO_SOUND_ON"


class adaccountadsets_regional_regulated_categories_enum_param(str, Enum):
    """adaccountadsets_regional_regulated_categories_enum_param enum values."""

    VALUE_0 = "0"
    VALUE_1 = "1"
    VALUE_2 = "2"
    VALUE_3 = "3"
    VALUE_4 = "4"
    VALUE_5 = "5"
    VALUE_6 = "6"


class adaccountadsets_status_enum_param(str, Enum):
    """adaccountadsets_status_enum_param enum values."""

    ACTIVE = "ACTIVE"
    ARCHIVED = "ARCHIVED"
    DELETED = "DELETED"
    PAUSED = "PAUSED"


class adaccountadsets_tune_for_category_enum_param(str, Enum):
    """adaccountadsets_tune_for_category_enum_param enum values."""

    CREDIT = "CREDIT"
    EMPLOYMENT = "EMPLOYMENT"
    FINANCIAL_PRODUCTS_SERVICES = "FINANCIAL_PRODUCTS_SERVICES"
    HOUSING = "HOUSING"
    ISSUES_ELECTIONS_POLITICS = "ISSUES_ELECTIONS_POLITICS"
    NONE = "NONE"
    ONLINE_GAMBLING_AND_GAMING = "ONLINE_GAMBLING_AND_GAMING"


class adaccountadsetsbylabels_operator_enum_param(str, Enum):
    """adaccountadsetsbylabels_operator_enum_param enum values."""

    ALL = "ALL"
    ANY = "ANY"


class adaccountadspixels_sort_by_enum_param(str, Enum):
    """adaccountadspixels_sort_by_enum_param enum values."""

    LAST_FIRED_TIME = "LAST_FIRED_TIME"
    NAME = "NAME"


class adaccountadvideos_container_type_enum_param(str, Enum):
    """adaccountadvideos_container_type_enum_param enum values."""

    ACO_VIDEO_VARIATION = "ACO_VIDEO_VARIATION"
    ADS_AI_GENERATED = "ADS_AI_GENERATED"
    AD_BREAK_PREVIEW = "AD_BREAK_PREVIEW"
    AD_DERIVATIVE = "AD_DERIVATIVE"
    AD_LIBRARY_WATERMARK = "AD_LIBRARY_WATERMARK"
    ALBUM_MULTIMEDIA_POST = "ALBUM_MULTIMEDIA_POST"
    ALOHA_SUPERFRAME = "ALOHA_SUPERFRAME"
    APP_REREVIEW_SCREENCAST = "APP_REREVIEW_SCREENCAST"
    APP_REVIEW_SCREENCAST = "APP_REVIEW_SCREENCAST"
    ASSET_MANAGER = "ASSET_MANAGER"
    ATLAS_VIDEO = "ATLAS_VIDEO"
    AUDIO_BROADCAST = "AUDIO_BROADCAST"
    AUDIO_COMMENT = "AUDIO_COMMENT"
    BROADCAST = "BROADCAST"
    CANVAS = "CANVAS"
    CMS_MEDIA_MANAGER = "CMS_MEDIA_MANAGER"
    CONTAINED_POST_ATTACHMENT = "CONTAINED_POST_ATTACHMENT"
    CONTAINED_POST_AUDIO_BROADCAST = "CONTAINED_POST_AUDIO_BROADCAST"
    CONTAINED_POST_COPYRIGHT_REFERENCE_BROADCAST = "CONTAINED_POST_COPYRIGHT_REFERENCE_BROADCAST"
    COPYRIGHT_REFERENCE_BROADCAST = "COPYRIGHT_REFERENCE_BROADCAST"
    COPYRIGHT_REFERENCE_IG_XPOST_VIDEO = "COPYRIGHT_REFERENCE_IG_XPOST_VIDEO"
    COPYRIGHT_REFERENCE_VIDEO = "COPYRIGHT_REFERENCE_VIDEO"
    CREATION_ML_PRECREATION = "CREATION_ML_PRECREATION"
    CREATOR_FAN_CHALLENGE = "CREATOR_FAN_CHALLENGE"
    CREATOR_STOREFRONT_PERSONALIZED_VIDEO = "CREATOR_STOREFRONT_PERSONALIZED_VIDEO"
    DATAGENIX_VIDEO = "DATAGENIX_VIDEO"
    DCO_AD_ASSET_FEED = "DCO_AD_ASSET_FEED"
    DCO_AUTOGEN_VIDEO = "DCO_AUTOGEN_VIDEO"
    DCO_TRIMMED_VIDEO = "DCO_TRIMMED_VIDEO"
    DIM_SUM = "DIM_SUM"
    DIRECTED_POST_ATTACHMENT = "DIRECTED_POST_ATTACHMENT"
    DIRECT_INBOX = "DIRECT_INBOX"
    DROPS_SHOPPING_EVENT_PAGE = "DROPS_SHOPPING_EVENT_PAGE"
    DYNAMIC_ITEM_VIDEO = "DYNAMIC_ITEM_VIDEO"
    DYNAMIC_TEMPLATE_VIDEO = "DYNAMIC_TEMPLATE_VIDEO"
    EVENT_COVER_VIDEO = "EVENT_COVER_VIDEO"
    EVENT_TOUR = "EVENT_TOUR"
    FACECAST_DVR = "FACECAST_DVR"
    FB_AVATAR_ANIMATED_SATP = "FB_AVATAR_ANIMATED_SATP"
    FB_COLLECTIBLE_VIDEO = "FB_COLLECTIBLE_VIDEO"
    FB_SHORTS = "FB_SHORTS"
    FB_SHORTS_CONTENT_REMIXABLE = "FB_SHORTS_CONTENT_REMIXABLE"
    FB_SHORTS_GROUP_POST = "FB_SHORTS_GROUP_POST"
    FB_SHORTS_LINKED_PRODUCT = "FB_SHORTS_LINKED_PRODUCT"
    FB_SHORTS_PMV_POST = "FB_SHORTS_PMV_POST"
    FB_SHORTS_POST = "FB_SHORTS_POST"
    FB_SHORTS_REMIX_POST = "FB_SHORTS_REMIX_POST"
    FUNDRAISER_COVER_VIDEO = "FUNDRAISER_COVER_VIDEO"
    GAME_CLIP = "GAME_CLIP"
    GIF_TO_VIDEO = "GIF_TO_VIDEO"
    GOODWILL_ANNIVERSARY_DEPRECATED = "GOODWILL_ANNIVERSARY_DEPRECATED"
    GOODWILL_ANNIVERSARY_PROMOTION_DEPRECATED = "GOODWILL_ANNIVERSARY_PROMOTION_DEPRECATED"
    GOODWILL_VIDEO_CONTAINED_SHARE = "GOODWILL_VIDEO_CONTAINED_SHARE"
    GOODWILL_VIDEO_PROMOTION = "GOODWILL_VIDEO_PROMOTION"
    GOODWILL_VIDEO_SHARE = "GOODWILL_VIDEO_SHARE"
    GOODWILL_VIDEO_TOKEN_REQUIRED = "GOODWILL_VIDEO_TOKEN_REQUIRED"
    GROUP_POST = "GROUP_POST"
    HEURISTIC_CLUSTER_VIDEO = "HEURISTIC_CLUSTER_VIDEO"
    HIGHLIGHT_CLIP_VIDEO = "HIGHLIGHT_CLIP_VIDEO"
    HORIZON_WORLDS_TV = "HORIZON_WORLDS_TV"
    HUDDLE_BROADCAST = "HUDDLE_BROADCAST"
    IG_REELS_XPV = "IG_REELS_XPV"
    IG_STORIES_READER = "IG_STORIES_READER"
    INJECTABLE = "INJECTABLE"
    INSPIRATION_VIDEO = "INSPIRATION_VIDEO"
    INSTAGRAM_VIDEO_COPY = "INSTAGRAM_VIDEO_COPY"
    INSTANT_APPLICATION_PREVIEW = "INSTANT_APPLICATION_PREVIEW"
    INSTANT_ARTICLE = "INSTANT_ARTICLE"
    ISSUE_MODULE = "ISSUE_MODULE"
    LEARN = "LEARN"
    LEGACY = "LEGACY"
    LEGACY_CONTAINED_POST_BROADCAST = "LEGACY_CONTAINED_POST_BROADCAST"
    LIVE_AUDIO_ROOM_BROADCAST = "LIVE_AUDIO_ROOM_BROADCAST"
    LIVE_CLIP_PREVIEW = "LIVE_CLIP_PREVIEW"
    LIVE_CLIP_WORKCHAT = "LIVE_CLIP_WORKCHAT"
    LIVE_CREATIVE_KIT_VIDEO = "LIVE_CREATIVE_KIT_VIDEO"
    LIVE_PHOTO = "LIVE_PHOTO"
    LOOK_NOW_DEPRECATED = "LOOK_NOW_DEPRECATED"
    MARKETPLACE_LISTING_VIDEO = "MARKETPLACE_LISTING_VIDEO"
    MARKETPLACE_PRE_RECORDED_VIDEO = "MARKETPLACE_PRE_RECORDED_VIDEO"
    MOMENTS_VIDEO = "MOMENTS_VIDEO"
    MUSIC_CLIP = "MUSIC_CLIP"
    MUSIC_CLIP_IN_COMMENT = "MUSIC_CLIP_IN_COMMENT"
    MUSIC_CLIP_IN_LIGHTWEIGHT_STATUS = "MUSIC_CLIP_IN_LIGHTWEIGHT_STATUS"
    MUSIC_CLIP_IN_MSGR_NOTE = "MUSIC_CLIP_IN_MSGR_NOTE"
    MUSIC_CLIP_IN_POLL_OPTION = "MUSIC_CLIP_IN_POLL_OPTION"
    MUSIC_CLIP_ON_DATING_PROFILE = "MUSIC_CLIP_ON_DATING_PROFILE"
    NEO_ASYNC_GAME_VIDEO = "NEO_ASYNC_GAME_VIDEO"
    NEW_CONTAINED_POST_BROADCAST = "NEW_CONTAINED_POST_BROADCAST"
    NO_STORY = "NO_STORY"
    OCULUS_CREATOR_PORTAL = "OCULUS_CREATOR_PORTAL"
    OCULUS_VENUES_BROADCAST = "OCULUS_VENUES_BROADCAST"
    ORIGINALITY_SELF_ADVOCACY = "ORIGINALITY_SELF_ADVOCACY"
    PAGES_COVER_VIDEO = "PAGES_COVER_VIDEO"
    PAGE_REVIEW_SCREENCAST = "PAGE_REVIEW_SCREENCAST"
    PAGE_SLIDESHOW_VIDEO = "PAGE_SLIDESHOW_VIDEO"
    PAID_CONTENT_PREVIEW = "PAID_CONTENT_PREVIEW"
    PAID_CONTENT_VIDEO = "PAID_CONTENT_VIDEO"
    PAID_CONTENT_VIDEO__POST = "PAID_CONTENT_VIDEO__POST"
    PIXELCLOUD = "PIXELCLOUD"
    PODCAST_HIGHLIGHT = "PODCAST_HIGHLIGHT"
    PODCAST_ML_PREVIEW = "PODCAST_ML_PREVIEW"
    PODCAST_ML_PREVIEW_NO_NEWSFEED_STORY = "PODCAST_ML_PREVIEW_NO_NEWSFEED_STORY"
    PODCAST_RSS = "PODCAST_RSS"
    PODCAST_RSS_EPHEMERAL = "PODCAST_RSS_EPHEMERAL"
    PODCAST_RSS_NO_NEWSFEED_STORY = "PODCAST_RSS_NO_NEWSFEED_STORY"
    PODCAST_VOICES = "PODCAST_VOICES"
    PODCAST_VOICES_NO_NEWSFEED_STORY = "PODCAST_VOICES_NO_NEWSFEED_STORY"
    PREMIERE_SOURCE = "PREMIERE_SOURCE"
    PREMIUM_MUSIC_VIDEO_CLIP = "PREMIUM_MUSIC_VIDEO_CLIP"
    PREMIUM_MUSIC_VIDEO_CROPPED_CLIP = "PREMIUM_MUSIC_VIDEO_CROPPED_CLIP"
    PREMIUM_MUSIC_VIDEO_NO_NEWSFEED_STORY = "PREMIUM_MUSIC_VIDEO_NO_NEWSFEED_STORY"
    PREMIUM_MUSIC_VIDEO_WITH_NEWSFEED_STORY = "PREMIUM_MUSIC_VIDEO_WITH_NEWSFEED_STORY"
    PRIVATE_GALLERY_VIDEO = "PRIVATE_GALLERY_VIDEO"
    PRODUCT_VIDEO = "PRODUCT_VIDEO"
    PROFILE_COVER_VIDEO = "PROFILE_COVER_VIDEO"
    PROFILE_INTRO_CARD = "PROFILE_INTRO_CARD"
    PROFILE_VIDEO = "PROFILE_VIDEO"
    PROTON = "PROTON"
    QUICK_CLIP_WORKPLACE_POST = "QUICK_CLIP_WORKPLACE_POST"
    QUICK_PROMOTION = "QUICK_PROMOTION"
    REPLACE_VIDEO = "REPLACE_VIDEO"
    SALES_CLIENT_INTERACTION = "SALES_CLIENT_INTERACTION"
    SHOWREEL_NATIVE_DUMMY_VIDEO = "SHOWREEL_NATIVE_DUMMY_VIDEO"
    SLIDESHOW_ANIMOTO = "SLIDESHOW_ANIMOTO"
    SLIDESHOW_SHAKR = "SLIDESHOW_SHAKR"
    SLIDESHOW_VARIATION_VIDEO = "SLIDESHOW_VARIATION_VIDEO"
    SOUND_PLATFORM_STREAM = "SOUND_PLATFORM_STREAM"
    SRT_ATTACHMENT = "SRT_ATTACHMENT"
    STORIES_VIDEO = "STORIES_VIDEO"
    STORYLINE = "STORYLINE"
    STORYLINE_WITH_EXTERNAL_MUSIC = "STORYLINE_WITH_EXTERNAL_MUSIC"
    STORY_ARCHIVE_VIDEO = "STORY_ARCHIVE_VIDEO"
    STORY_CARD_TEMPLATE = "STORY_CARD_TEMPLATE"
    STREAM_HIGHLIGHTS_VIDEO = "STREAM_HIGHLIGHTS_VIDEO"
    TAROT_DIGEST = "TAROT_DIGEST"
    TEMPORARY_UNLISTED = "TEMPORARY_UNLISTED"
    TEMP_VIDEO_COPYRIGHT_SCAN = "TEMP_VIDEO_COPYRIGHT_SCAN"
    UNLISTED = "UNLISTED"
    UNLISTED_OCULUS = "UNLISTED_OCULUS"
    VIDEO_COMMENT = "VIDEO_COMMENT"
    VIDEO_COMPOSITION_VARIATION = "VIDEO_COMPOSITION_VARIATION"
    VIDEO_CREATIVE_EDITOR_AUTOGEN_AD_VIDEO = "VIDEO_CREATIVE_EDITOR_AUTOGEN_AD_VIDEO"
    VIDEO_SUPERRES = "VIDEO_SUPERRES"
    VOICES_ARTICLE_VIDEO = "VOICES_ARTICLE_VIDEO"
    VU_GENERATED_VIDEO = "VU_GENERATED_VIDEO"
    WOODHENGE = "WOODHENGE"
    WORK_KNOWLEDGE_VIDEO = "WORK_KNOWLEDGE_VIDEO"
    YOUR_DAY = "YOUR_DAY"


class adaccountadvideos_content_category_enum_param(str, Enum):
    """adaccountadvideos_content_category_enum_param enum values."""

    BEAUTY_FASHION = "BEAUTY_FASHION"
    BUSINESS = "BUSINESS"
    CARS_TRUCKS = "CARS_TRUCKS"
    COMEDY = "COMEDY"
    CUTE_ANIMALS = "CUTE_ANIMALS"
    ENTERTAINMENT = "ENTERTAINMENT"
    FAMILY = "FAMILY"
    FOOD_HEALTH = "FOOD_HEALTH"
    HOME = "HOME"
    LIFESTYLE = "LIFESTYLE"
    MUSIC = "MUSIC"
    NEWS = "NEWS"
    OTHER = "OTHER"
    POLITICS = "POLITICS"
    SCIENCE = "SCIENCE"
    SPORTS = "SPORTS"
    TECHNOLOGY = "TECHNOLOGY"
    VIDEO_GAMING = "VIDEO_GAMING"


class adaccountadvideos_formatting_enum_param(str, Enum):
    """adaccountadvideos_formatting_enum_param enum values."""

    MARKDOWN = "MARKDOWN"
    PLAINTEXT = "PLAINTEXT"


class adaccountadvideos_original_projection_type_enum_param(str, Enum):
    """adaccountadvideos_original_projection_type_enum_param enum values."""

    cubemap = "cubemap"
    equirectangular = "equirectangular"
    half_equirectangular = "half_equirectangular"


class adaccountadvideos_swap_mode_enum_param(str, Enum):
    """adaccountadvideos_swap_mode_enum_param enum values."""

    replace = "replace"


class adaccountadvideos_unpublished_content_type_enum_param(str, Enum):
    """adaccountadvideos_unpublished_content_type_enum_param enum values."""

    ADS_POST = "ADS_POST"
    DRAFT = "DRAFT"
    INLINE_CREATED = "INLINE_CREATED"
    PUBLISHED = "PUBLISHED"
    REVIEWABLE_BRANDED_CONTENT = "REVIEWABLE_BRANDED_CONTENT"
    SCHEDULED = "SCHEDULED"
    SCHEDULED_RECURRING = "SCHEDULED_RECURRING"


class adaccountadvideos_upload_phase_enum_param(str, Enum):
    """adaccountadvideos_upload_phase_enum_param enum values."""

    cancel = "cancel"
    finish = "finish"
    start = "start"
    transfer = "transfer"


class adaccountagencies_permitted_tasks_enum_param(str, Enum):
    """adaccountagencies_permitted_tasks_enum_param enum values."""

    AA_ANALYZE = "AA_ANALYZE"
    ADVERTISE = "ADVERTISE"
    ANALYZE = "ANALYZE"
    DRAFT = "DRAFT"
    MANAGE = "MANAGE"


class adaccountassigned_users_tasks_enum_param(str, Enum):
    """adaccountassigned_users_tasks_enum_param enum values."""

    AA_ANALYZE = "AA_ANALYZE"
    ADVERTISE = "ADVERTISE"
    ANALYZE = "ANALYZE"
    DRAFT = "DRAFT"
    MANAGE = "MANAGE"


class adaccountasync_requests_status_enum_param(str, Enum):
    """adaccountasync_requests_status_enum_param enum values."""

    ERROR = "ERROR"
    EXECUTING = "EXECUTING"
    FINISHED = "FINISHED"
    INITIALIZED = "INITIALIZED"


class adaccountasync_requests_type_enum_param(str, Enum):
    """adaccountasync_requests_type_enum_param enum values."""

    ASYNC_ADGROUP_CREATION = "ASYNC_ADGROUP_CREATION"
    BATCH_API = "BATCH_API"
    DRAFTS = "DRAFTS"


class adaccountasyncadcreatives_notification_mode_enum_param(str, Enum):
    """adaccountasyncadcreatives_notification_mode_enum_param enum values."""

    OFF = "OFF"
    ON_COMPLETE = "ON_COMPLETE"


class adaccountasyncadrequestsets_notification_mode_enum_param(str, Enum):
    """adaccountasyncadrequestsets_notification_mode_enum_param enum values."""

    OFF = "OFF"
    ON_COMPLETE = "ON_COMPLETE"


class adaccountbrand_safety_content_filter_levels_brand_safety_content_filter_levels_enum_param(
    str, Enum
):
    """adaccountbrand_safety_content_filter_levels_brand_safety_content_filter_levels_enum_param enum values."""

    AN_RELAXED = "AN_RELAXED"
    AN_STANDARD = "AN_STANDARD"
    AN_STRICT = "AN_STRICT"
    FACEBOOK_RELAXED = "FACEBOOK_RELAXED"
    FACEBOOK_STANDARD = "FACEBOOK_STANDARD"
    FACEBOOK_STRICT = "FACEBOOK_STRICT"
    FEED_DNM = "FEED_DNM"
    FEED_RELAXED = "FEED_RELAXED"
    FEED_STANDARD = "FEED_STANDARD"
    FEED_STRICT = "FEED_STRICT"
    UNINITIALIZED = "UNINITIALIZED"
    UNKNOWN = "UNKNOWN"


class adaccountcampaigns_bid_strategy_enum_param(str, Enum):
    """adaccountcampaigns_bid_strategy_enum_param enum values."""

    COST_CAP = "COST_CAP"
    LOWEST_COST_WITHOUT_CAP = "LOWEST_COST_WITHOUT_CAP"
    LOWEST_COST_WITH_BID_CAP = "LOWEST_COST_WITH_BID_CAP"
    LOWEST_COST_WITH_MIN_ROAS = "LOWEST_COST_WITH_MIN_ROAS"


class adaccountcampaigns_date_preset_enum_param(str, Enum):
    """adaccountcampaigns_date_preset_enum_param enum values."""

    data_maximum = "data_maximum"
    last_14d = "last_14d"
    last_28d = "last_28d"
    last_30d = "last_30d"
    last_3d = "last_3d"
    last_7d = "last_7d"
    last_90d = "last_90d"
    last_month = "last_month"
    last_quarter = "last_quarter"
    last_week_mon_sun = "last_week_mon_sun"
    last_week_sun_sat = "last_week_sun_sat"
    last_year = "last_year"
    maximum = "maximum"
    this_month = "this_month"
    this_quarter = "this_quarter"
    this_week_mon_today = "this_week_mon_today"
    this_week_sun_today = "this_week_sun_today"
    this_year = "this_year"
    today = "today"
    yesterday = "yesterday"


class adaccountcampaigns_delete_strategy_enum_param(str, Enum):
    """adaccountcampaigns_delete_strategy_enum_param enum values."""

    DELETE_ANY = "DELETE_ANY"
    DELETE_ARCHIVED_BEFORE = "DELETE_ARCHIVED_BEFORE"
    DELETE_OLDEST = "DELETE_OLDEST"


class adaccountcampaigns_effective_status_enum_param(str, Enum):
    """adaccountcampaigns_effective_status_enum_param enum values."""

    ACTIVE = "ACTIVE"
    ADSET_PAUSED = "ADSET_PAUSED"
    ARCHIVED = "ARCHIVED"
    CAMPAIGN_PAUSED = "CAMPAIGN_PAUSED"
    DELETED = "DELETED"
    DISAPPROVED = "DISAPPROVED"
    IN_PROCESS = "IN_PROCESS"
    PAUSED = "PAUSED"
    PENDING_BILLING_INFO = "PENDING_BILLING_INFO"
    PENDING_REVIEW = "PENDING_REVIEW"
    PREAPPROVED = "PREAPPROVED"
    WITH_ISSUES = "WITH_ISSUES"


class adaccountcampaigns_execution_options_enum_param(str, Enum):
    """adaccountcampaigns_execution_options_enum_param enum values."""

    include_recommendations = "include_recommendations"
    validate_only = "validate_only"


class adaccountcampaigns_objective_enum_param(str, Enum):
    """adaccountcampaigns_objective_enum_param enum values."""

    APP_INSTALLS = "APP_INSTALLS"
    BRAND_AWARENESS = "BRAND_AWARENESS"
    CONVERSIONS = "CONVERSIONS"
    EVENT_RESPONSES = "EVENT_RESPONSES"
    LEAD_GENERATION = "LEAD_GENERATION"
    LINK_CLICKS = "LINK_CLICKS"
    LOCAL_AWARENESS = "LOCAL_AWARENESS"
    MESSAGES = "MESSAGES"
    OFFER_CLAIMS = "OFFER_CLAIMS"
    OUTCOME_APP_PROMOTION = "OUTCOME_APP_PROMOTION"
    OUTCOME_AWARENESS = "OUTCOME_AWARENESS"
    OUTCOME_ENGAGEMENT = "OUTCOME_ENGAGEMENT"
    OUTCOME_LEADS = "OUTCOME_LEADS"
    OUTCOME_SALES = "OUTCOME_SALES"
    OUTCOME_TRAFFIC = "OUTCOME_TRAFFIC"
    PAGE_LIKES = "PAGE_LIKES"
    POST_ENGAGEMENT = "POST_ENGAGEMENT"
    PRODUCT_CATALOG_SALES = "PRODUCT_CATALOG_SALES"
    REACH = "REACH"
    STORE_VISITS = "STORE_VISITS"
    VIDEO_VIEWS = "VIDEO_VIEWS"


class adaccountcampaigns_smart_promotion_type_enum_param(str, Enum):
    """adaccountcampaigns_smart_promotion_type_enum_param enum values."""

    GUIDED_CREATION = "GUIDED_CREATION"
    SMART_APP_PROMOTION = "SMART_APP_PROMOTION"


class adaccountcampaigns_special_ad_categories_enum_param(str, Enum):
    """adaccountcampaigns_special_ad_categories_enum_param enum values."""

    CREDIT = "CREDIT"
    EMPLOYMENT = "EMPLOYMENT"
    FINANCIAL_PRODUCTS_SERVICES = "FINANCIAL_PRODUCTS_SERVICES"
    HOUSING = "HOUSING"
    ISSUES_ELECTIONS_POLITICS = "ISSUES_ELECTIONS_POLITICS"
    NONE = "NONE"
    ONLINE_GAMBLING_AND_GAMING = "ONLINE_GAMBLING_AND_GAMING"


class adaccountcampaigns_special_ad_category_country_enum_param(str, Enum):
    """adaccountcampaigns_special_ad_category_country_enum_param enum values."""

    AD = "AD"
    AE = "AE"
    AF = "AF"
    AG = "AG"
    AI = "AI"
    AL = "AL"
    AM = "AM"
    AN = "AN"
    AO = "AO"
    AQ = "AQ"
    AR = "AR"
    AS = "AS"
    AT = "AT"
    AU = "AU"
    AW = "AW"
    AX = "AX"
    AZ = "AZ"
    BA = "BA"
    BB = "BB"
    BD = "BD"
    BE = "BE"
    BF = "BF"
    BG = "BG"
    BH = "BH"
    BI = "BI"
    BJ = "BJ"
    BL = "BL"
    BM = "BM"
    BN = "BN"
    BO = "BO"
    BQ = "BQ"
    BR = "BR"
    BS = "BS"
    BT = "BT"
    BV = "BV"
    BW = "BW"
    BY = "BY"
    BZ = "BZ"
    CA = "CA"
    CC = "CC"
    CD = "CD"
    CF = "CF"
    CG = "CG"
    CH = "CH"
    CI = "CI"
    CK = "CK"
    CL = "CL"
    CM = "CM"
    CN = "CN"
    CO = "CO"
    CR = "CR"
    CU = "CU"
    CV = "CV"
    CW = "CW"
    CX = "CX"
    CY = "CY"
    CZ = "CZ"
    DE = "DE"
    DJ = "DJ"
    DK = "DK"
    DM = "DM"
    DO = "DO"
    DZ = "DZ"
    EC = "EC"
    EE = "EE"
    EG = "EG"
    EH = "EH"
    ER = "ER"
    ES = "ES"
    ET = "ET"
    FI = "FI"
    FJ = "FJ"
    FK = "FK"
    FM = "FM"
    FO = "FO"
    FR = "FR"
    GA = "GA"
    GB = "GB"
    GD = "GD"
    GE = "GE"
    GF = "GF"
    GG = "GG"
    GH = "GH"
    GI = "GI"
    GL = "GL"
    GM = "GM"
    GN = "GN"
    GP = "GP"
    GQ = "GQ"
    GR = "GR"
    GS = "GS"
    GT = "GT"
    GU = "GU"
    GW = "GW"
    GY = "GY"
    HK = "HK"
    HM = "HM"
    HN = "HN"
    HR = "HR"
    HT = "HT"
    HU = "HU"
    ID = "ID"
    IE = "IE"
    IL = "IL"
    IM = "IM"
    IN = "IN"
    IO = "IO"
    IQ = "IQ"
    IR = "IR"
    IS = "IS"
    IT = "IT"
    JE = "JE"
    JM = "JM"
    JO = "JO"
    JP = "JP"
    KE = "KE"
    KG = "KG"
    KH = "KH"
    KI = "KI"
    KM = "KM"
    KN = "KN"
    KP = "KP"
    KR = "KR"
    KW = "KW"
    KY = "KY"
    KZ = "KZ"
    LA = "LA"
    LB = "LB"
    LC = "LC"
    LI = "LI"
    LK = "LK"
    LR = "LR"
    LS = "LS"
    LT = "LT"
    LU = "LU"
    LV = "LV"
    LY = "LY"
    MA = "MA"
    MC = "MC"
    MD = "MD"
    ME = "ME"
    MF = "MF"
    MG = "MG"
    MH = "MH"
    MK = "MK"
    ML = "ML"
    MM = "MM"
    MN = "MN"
    MO = "MO"
    MP = "MP"
    MQ = "MQ"
    MR = "MR"
    MS = "MS"
    MT = "MT"
    MU = "MU"
    MV = "MV"
    MW = "MW"
    MX = "MX"
    MY = "MY"
    MZ = "MZ"
    NA = "NA"
    NC = "NC"
    NE = "NE"
    NF = "NF"
    NG = "NG"
    NI = "NI"
    NL = "NL"
    NO = "NO"
    NP = "NP"
    NR = "NR"
    NU = "NU"
    NZ = "NZ"
    OM = "OM"
    PA = "PA"
    PE = "PE"
    PF = "PF"
    PG = "PG"
    PH = "PH"
    PK = "PK"
    PL = "PL"
    PM = "PM"
    PN = "PN"
    PR = "PR"
    PS = "PS"
    PT = "PT"
    PW = "PW"
    PY = "PY"
    QA = "QA"
    RE = "RE"
    RO = "RO"
    RS = "RS"
    RU = "RU"
    RW = "RW"
    SA = "SA"
    SB = "SB"
    SC = "SC"
    SD = "SD"
    SE = "SE"
    SG = "SG"
    SH = "SH"
    SI = "SI"
    SJ = "SJ"
    SK = "SK"
    SL = "SL"
    SM = "SM"
    SN = "SN"
    SO = "SO"
    SR = "SR"
    SS = "SS"
    ST = "ST"
    SV = "SV"
    SX = "SX"
    SY = "SY"
    SZ = "SZ"
    TC = "TC"
    TD = "TD"
    TF = "TF"
    TG = "TG"
    TH = "TH"
    TJ = "TJ"
    TK = "TK"
    TL = "TL"
    TM = "TM"
    TN = "TN"
    TO = "TO"
    TR = "TR"
    TT = "TT"
    TV = "TV"
    TW = "TW"
    TZ = "TZ"
    UA = "UA"
    UG = "UG"
    UM = "UM"
    US = "US"
    UY = "UY"
    UZ = "UZ"
    VA = "VA"
    VC = "VC"
    VE = "VE"
    VG = "VG"
    VI = "VI"
    VN = "VN"
    VU = "VU"
    WF = "WF"
    WS = "WS"
    XK = "XK"
    YE = "YE"
    YT = "YT"
    ZA = "ZA"
    ZM = "ZM"
    ZW = "ZW"


class adaccountcampaigns_status_enum_param(str, Enum):
    """adaccountcampaigns_status_enum_param enum values."""

    ACTIVE = "ACTIVE"
    ARCHIVED = "ARCHIVED"
    DELETED = "DELETED"
    PAUSED = "PAUSED"


class adaccountcampaignsbylabels_operator_enum_param(str, Enum):
    """adaccountcampaignsbylabels_operator_enum_param enum values."""

    ALL = "ALL"
    ANY = "ANY"


class adaccountcustomaudiences_claim_objective_enum_param(str, Enum):
    """adaccountcustomaudiences_claim_objective_enum_param enum values."""

    AUTOMOTIVE_MODEL = "AUTOMOTIVE_MODEL"
    COLLABORATIVE_ADS = "COLLABORATIVE_ADS"
    HOME_LISTING = "HOME_LISTING"
    MEDIA_TITLE = "MEDIA_TITLE"
    PRODUCT = "PRODUCT"
    TRAVEL = "TRAVEL"
    VEHICLE = "VEHICLE"
    VEHICLE_OFFER = "VEHICLE_OFFER"


class adaccountcustomaudiences_content_type_enum_param(str, Enum):
    """adaccountcustomaudiences_content_type_enum_param enum values."""

    AUTOMOTIVE_MODEL = "AUTOMOTIVE_MODEL"
    DESTINATION = "DESTINATION"
    FLIGHT = "FLIGHT"
    GENERIC = "GENERIC"
    HOME_LISTING = "HOME_LISTING"
    HOTEL = "HOTEL"
    LOCAL_SERVICE_BUSINESS = "LOCAL_SERVICE_BUSINESS"
    MEDIA_TITLE = "MEDIA_TITLE"
    OFFLINE_PRODUCT = "OFFLINE_PRODUCT"
    PRODUCT = "PRODUCT"
    VEHICLE = "VEHICLE"
    VEHICLE_OFFER = "VEHICLE_OFFER"


class adaccountcustomaudiences_customer_file_source_enum_param(str, Enum):
    """adaccountcustomaudiences_customer_file_source_enum_param enum values."""

    BOTH_USER_AND_PARTNER_PROVIDED = "BOTH_USER_AND_PARTNER_PROVIDED"
    PARTNER_PROVIDED_ONLY = "PARTNER_PROVIDED_ONLY"
    USER_PROVIDED_ONLY = "USER_PROVIDED_ONLY"


class adaccountcustomaudiences_subscription_info_enum_param(str, Enum):
    """adaccountcustomaudiences_subscription_info_enum_param enum values."""

    MESSENGER = "MESSENGER"
    WHATSAPP = "WHATSAPP"


class adaccountcustomaudiences_subtype_enum_param(str, Enum):
    """adaccountcustomaudiences_subtype_enum_param enum values."""

    APP = "APP"
    BAG_OF_ACCOUNTS = "BAG_OF_ACCOUNTS"
    BIDDING = "BIDDING"
    CLAIM = "CLAIM"
    CUSTOM = "CUSTOM"
    ENGAGEMENT = "ENGAGEMENT"
    EXCLUSION = "EXCLUSION"
    FOX = "FOX"
    LOOKALIKE = "LOOKALIKE"
    MANAGED = "MANAGED"
    MEASUREMENT = "MEASUREMENT"
    MESSENGER_SUBSCRIBER_LIST = "MESSENGER_SUBSCRIBER_LIST"
    OFFLINE_CONVERSION = "OFFLINE_CONVERSION"
    PARTNER = "PARTNER"
    PRIMARY = "PRIMARY"
    REGULATED_CATEGORIES_AUDIENCE = "REGULATED_CATEGORIES_AUDIENCE"
    STUDY_RULE_AUDIENCE = "STUDY_RULE_AUDIENCE"
    VIDEO = "VIDEO"
    WEBSITE = "WEBSITE"


class adaccountcustomaudiences_use_for_products_enum_param(str, Enum):
    """adaccountcustomaudiences_use_for_products_enum_param enum values."""

    ADS = "ADS"
    MARKETING_MESSAGES = "MARKETING_MESSAGES"


class adaccountcustomconversions_action_source_type_enum_param(str, Enum):
    """adaccountcustomconversions_action_source_type_enum_param enum values."""

    app = "app"
    business_messaging = "business_messaging"
    chat = "chat"
    email = "email"
    other = "other"
    phone_call = "phone_call"
    physical_store = "physical_store"
    system_generated = "system_generated"
    website = "website"


class adaccountcustomconversions_custom_event_type_enum_param(str, Enum):
    """adaccountcustomconversions_custom_event_type_enum_param enum values."""

    ADD_PAYMENT_INFO = "ADD_PAYMENT_INFO"
    ADD_TO_CART = "ADD_TO_CART"
    ADD_TO_WISHLIST = "ADD_TO_WISHLIST"
    COMPLETE_REGISTRATION = "COMPLETE_REGISTRATION"
    CONTACT = "CONTACT"
    CONTENT_VIEW = "CONTENT_VIEW"
    CUSTOMIZE_PRODUCT = "CUSTOMIZE_PRODUCT"
    DONATE = "DONATE"
    FACEBOOK_SELECTED = "FACEBOOK_SELECTED"
    FIND_LOCATION = "FIND_LOCATION"
    INITIATED_CHECKOUT = "INITIATED_CHECKOUT"
    LEAD = "LEAD"
    LISTING_INTERACTION = "LISTING_INTERACTION"
    OTHER = "OTHER"
    PURCHASE = "PURCHASE"
    SCHEDULE = "SCHEDULE"
    SEARCH = "SEARCH"
    START_TRIAL = "START_TRIAL"
    SUBMIT_APPLICATION = "SUBMIT_APPLICATION"
    SUBSCRIBE = "SUBSCRIBE"


class adaccountdelivery_estimate_optimization_goal_enum_param(str, Enum):
    """adaccountdelivery_estimate_optimization_goal_enum_param enum values."""

    ADVERTISER_SILOED_VALUE = "ADVERTISER_SILOED_VALUE"
    AD_RECALL_LIFT = "AD_RECALL_LIFT"
    APP_INSTALLS = "APP_INSTALLS"
    APP_INSTALLS_AND_OFFSITE_CONVERSIONS = "APP_INSTALLS_AND_OFFSITE_CONVERSIONS"
    CONVERSATIONS = "CONVERSATIONS"
    DERIVED_EVENTS = "DERIVED_EVENTS"
    ENGAGED_USERS = "ENGAGED_USERS"
    EVENT_RESPONSES = "EVENT_RESPONSES"
    IMPRESSIONS = "IMPRESSIONS"
    IN_APP_VALUE = "IN_APP_VALUE"
    LANDING_PAGE_VIEWS = "LANDING_PAGE_VIEWS"
    LEAD_GENERATION = "LEAD_GENERATION"
    LINK_CLICKS = "LINK_CLICKS"
    MEANINGFUL_CALL_ATTEMPT = "MEANINGFUL_CALL_ATTEMPT"
    MESSAGING_APPOINTMENT_CONVERSION = "MESSAGING_APPOINTMENT_CONVERSION"
    MESSAGING_PURCHASE_CONVERSION = "MESSAGING_PURCHASE_CONVERSION"
    NONE = "NONE"
    OFFSITE_CONVERSIONS = "OFFSITE_CONVERSIONS"
    PAGE_LIKES = "PAGE_LIKES"
    POST_ENGAGEMENT = "POST_ENGAGEMENT"
    PROFILE_AND_PAGE_ENGAGEMENT = "PROFILE_AND_PAGE_ENGAGEMENT"
    PROFILE_VISIT = "PROFILE_VISIT"
    QUALITY_CALL = "QUALITY_CALL"
    QUALITY_LEAD = "QUALITY_LEAD"
    REACH = "REACH"
    REMINDERS_SET = "REMINDERS_SET"
    SUBSCRIBERS = "SUBSCRIBERS"
    THRUPLAY = "THRUPLAY"
    VALUE = "VALUE"
    VISIT_INSTAGRAM_PROFILE = "VISIT_INSTAGRAM_PROFILE"


class adaccountgeneratepreviews_ad_format_enum_param(str, Enum):
    """adaccountgeneratepreviews_ad_format_enum_param enum values."""

    AUDIENCE_NETWORK_INSTREAM_VIDEO = "AUDIENCE_NETWORK_INSTREAM_VIDEO"
    AUDIENCE_NETWORK_INSTREAM_VIDEO_MOBILE = "AUDIENCE_NETWORK_INSTREAM_VIDEO_MOBILE"
    AUDIENCE_NETWORK_OUTSTREAM_VIDEO = "AUDIENCE_NETWORK_OUTSTREAM_VIDEO"
    AUDIENCE_NETWORK_REWARDED_VIDEO = "AUDIENCE_NETWORK_REWARDED_VIDEO"
    BIZ_DISCO_FEED_MOBILE = "BIZ_DISCO_FEED_MOBILE"
    DESKTOP_FEED_STANDARD = "DESKTOP_FEED_STANDARD"
    FACEBOOK_PROFILE_FEED_DESKTOP = "FACEBOOK_PROFILE_FEED_DESKTOP"
    FACEBOOK_PROFILE_FEED_MOBILE = "FACEBOOK_PROFILE_FEED_MOBILE"
    FACEBOOK_PROFILE_REELS_MOBILE = "FACEBOOK_PROFILE_REELS_MOBILE"
    FACEBOOK_REELS_BANNER = "FACEBOOK_REELS_BANNER"
    FACEBOOK_REELS_BANNER_DESKTOP = "FACEBOOK_REELS_BANNER_DESKTOP"
    FACEBOOK_REELS_BANNER_FULLSCREEN_IOS = "FACEBOOK_REELS_BANNER_FULLSCREEN_IOS"
    FACEBOOK_REELS_BANNER_FULLSCREEN_MOBILE = "FACEBOOK_REELS_BANNER_FULLSCREEN_MOBILE"
    FACEBOOK_REELS_MOBILE = "FACEBOOK_REELS_MOBILE"
    FACEBOOK_REELS_POSTLOOP = "FACEBOOK_REELS_POSTLOOP"
    FACEBOOK_REELS_STICKER = "FACEBOOK_REELS_STICKER"
    FACEBOOK_STORY_MOBILE = "FACEBOOK_STORY_MOBILE"
    FACEBOOK_STORY_STICKER_MOBILE = "FACEBOOK_STORY_STICKER_MOBILE"
    INSTAGRAM_EXPLORE_CONTEXTUAL = "INSTAGRAM_EXPLORE_CONTEXTUAL"
    INSTAGRAM_EXPLORE_GRID_HOME = "INSTAGRAM_EXPLORE_GRID_HOME"
    INSTAGRAM_EXPLORE_IMMERSIVE = "INSTAGRAM_EXPLORE_IMMERSIVE"
    INSTAGRAM_FEED_WEB = "INSTAGRAM_FEED_WEB"
    INSTAGRAM_FEED_WEB_M_SITE = "INSTAGRAM_FEED_WEB_M_SITE"
    INSTAGRAM_LEAD_GEN_MULTI_SUBMIT_ADS = "INSTAGRAM_LEAD_GEN_MULTI_SUBMIT_ADS"
    INSTAGRAM_PROFILE_FEED = "INSTAGRAM_PROFILE_FEED"
    INSTAGRAM_PROFILE_REELS = "INSTAGRAM_PROFILE_REELS"
    INSTAGRAM_REELS = "INSTAGRAM_REELS"
    INSTAGRAM_REELS_OVERLAY = "INSTAGRAM_REELS_OVERLAY"
    INSTAGRAM_SEARCH_CHAIN = "INSTAGRAM_SEARCH_CHAIN"
    INSTAGRAM_SEARCH_GRID = "INSTAGRAM_SEARCH_GRID"
    INSTAGRAM_STANDARD = "INSTAGRAM_STANDARD"
    INSTAGRAM_STORY = "INSTAGRAM_STORY"
    INSTAGRAM_STORY_EFFECT_TRAY = "INSTAGRAM_STORY_EFFECT_TRAY"
    INSTAGRAM_STORY_WEB = "INSTAGRAM_STORY_WEB"
    INSTAGRAM_STORY_WEB_M_SITE = "INSTAGRAM_STORY_WEB_M_SITE"
    INSTANT_ARTICLE_RECIRCULATION_AD = "INSTANT_ARTICLE_RECIRCULATION_AD"
    INSTANT_ARTICLE_STANDARD = "INSTANT_ARTICLE_STANDARD"
    INSTREAM_BANNER_DESKTOP = "INSTREAM_BANNER_DESKTOP"
    INSTREAM_BANNER_FULLSCREEN_IOS = "INSTREAM_BANNER_FULLSCREEN_IOS"
    INSTREAM_BANNER_FULLSCREEN_MOBILE = "INSTREAM_BANNER_FULLSCREEN_MOBILE"
    INSTREAM_BANNER_IMMERSIVE_MOBILE = "INSTREAM_BANNER_IMMERSIVE_MOBILE"
    INSTREAM_BANNER_MOBILE = "INSTREAM_BANNER_MOBILE"
    INSTREAM_VIDEO_DESKTOP = "INSTREAM_VIDEO_DESKTOP"
    INSTREAM_VIDEO_FULLSCREEN_IOS = "INSTREAM_VIDEO_FULLSCREEN_IOS"
    INSTREAM_VIDEO_FULLSCREEN_MOBILE = "INSTREAM_VIDEO_FULLSCREEN_MOBILE"
    INSTREAM_VIDEO_IMAGE = "INSTREAM_VIDEO_IMAGE"
    INSTREAM_VIDEO_IMMERSIVE_MOBILE = "INSTREAM_VIDEO_IMMERSIVE_MOBILE"
    INSTREAM_VIDEO_MOBILE = "INSTREAM_VIDEO_MOBILE"
    JOB_BROWSER_DESKTOP = "JOB_BROWSER_DESKTOP"
    JOB_BROWSER_MOBILE = "JOB_BROWSER_MOBILE"
    MARKETPLACE_MOBILE = "MARKETPLACE_MOBILE"
    MESSENGER_MOBILE_INBOX_MEDIA = "MESSENGER_MOBILE_INBOX_MEDIA"
    MESSENGER_MOBILE_STORY_MEDIA = "MESSENGER_MOBILE_STORY_MEDIA"
    MOBILE_BANNER = "MOBILE_BANNER"
    MOBILE_FEED_BASIC = "MOBILE_FEED_BASIC"
    MOBILE_FEED_STANDARD = "MOBILE_FEED_STANDARD"
    MOBILE_FULLWIDTH = "MOBILE_FULLWIDTH"
    MOBILE_INTERSTITIAL = "MOBILE_INTERSTITIAL"
    MOBILE_MEDIUM_RECTANGLE = "MOBILE_MEDIUM_RECTANGLE"
    MOBILE_NATIVE = "MOBILE_NATIVE"
    RIGHT_COLUMN_STANDARD = "RIGHT_COLUMN_STANDARD"
    SUGGESTED_VIDEO_DESKTOP = "SUGGESTED_VIDEO_DESKTOP"
    SUGGESTED_VIDEO_FULLSCREEN_MOBILE = "SUGGESTED_VIDEO_FULLSCREEN_MOBILE"
    SUGGESTED_VIDEO_IMMERSIVE_MOBILE = "SUGGESTED_VIDEO_IMMERSIVE_MOBILE"
    SUGGESTED_VIDEO_MOBILE = "SUGGESTED_VIDEO_MOBILE"
    WATCH_FEED_HOME = "WATCH_FEED_HOME"
    WATCH_FEED_MOBILE = "WATCH_FEED_MOBILE"


class adaccountgeneratepreviews_creative_feature_enum_param(str, Enum):
    """adaccountgeneratepreviews_creative_feature_enum_param enum values."""

    product_metadata_automation = "product_metadata_automation"
    profile_card = "profile_card"
    standard_enhancements_catalog = "standard_enhancements_catalog"
    video_to_image = "video_to_image"


class adaccountgeneratepreviews_render_type_enum_param(str, Enum):
    """adaccountgeneratepreviews_render_type_enum_param enum values."""

    FALLBACK = "FALLBACK"


class adaccountinsights_action_attribution_windows_enum_param(str, Enum):
    """adaccountinsights_action_attribution_windows_enum_param enum values."""

    VALUE_1D_CLICK = "1d_click"
    VALUE_1D_EV = "1d_ev"
    VALUE_1D_VIEW = "1d_view"
    VALUE_28D_CLICK = "28d_click"
    VALUE_28D_VIEW = "28d_view"
    VALUE_28D_VIEW_ALL_CONVERSIONS = "28d_view_all_conversions"
    VALUE_28D_VIEW_FIRST_CONVERSION = "28d_view_first_conversion"
    VALUE_7D_CLICK = "7d_click"
    VALUE_7D_VIEW = "7d_view"
    VALUE_7D_VIEW_ALL_CONVERSIONS = "7d_view_all_conversions"
    VALUE_7D_VIEW_FIRST_CONVERSION = "7d_view_first_conversion"
    dda = "dda"
    default = "default"
    skan_click = "skan_click"
    skan_click_second_postback = "skan_click_second_postback"
    skan_click_third_postback = "skan_click_third_postback"
    skan_view = "skan_view"
    skan_view_second_postback = "skan_view_second_postback"
    skan_view_third_postback = "skan_view_third_postback"


class adaccountinsights_action_breakdowns_enum_param(str, Enum):
    """adaccountinsights_action_breakdowns_enum_param enum values."""

    action_canvas_component_name = "action_canvas_component_name"
    action_carousel_card_id = "action_carousel_card_id"
    action_carousel_card_name = "action_carousel_card_name"
    action_destination = "action_destination"
    action_device = "action_device"
    action_reaction = "action_reaction"
    action_target_id = "action_target_id"
    action_type = "action_type"
    action_video_sound = "action_video_sound"
    action_video_type = "action_video_type"
    conversion_destination = "conversion_destination"
    matched_persona_id = "matched_persona_id"
    matched_persona_name = "matched_persona_name"
    signal_source_bucket = "signal_source_bucket"
    standard_event_content_type = "standard_event_content_type"


class adaccountinsights_action_report_time_enum_param(str, Enum):
    """adaccountinsights_action_report_time_enum_param enum values."""

    conversion = "conversion"
    impression = "impression"
    lifetime = "lifetime"
    mixed = "mixed"


class adaccountinsights_breakdowns_enum_param(str, Enum):
    """adaccountinsights_breakdowns_enum_param enum values."""

    ad_extension_domain = "ad_extension_domain"
    ad_extension_url = "ad_extension_url"
    ad_format_asset = "ad_format_asset"
    age = "age"
    app_id = "app_id"
    body_asset = "body_asset"
    breakdown_ad_objective = "breakdown_ad_objective"
    breakdown_reporting_ad_id = "breakdown_reporting_ad_id"
    call_to_action_asset = "call_to_action_asset"
    coarse_conversion_value = "coarse_conversion_value"
    comscore_market = "comscore_market"
    comscore_market_code = "comscore_market_code"
    conversion_destination = "conversion_destination"
    country = "country"
    creative_relaxation_asset_type = "creative_relaxation_asset_type"
    description_asset = "description_asset"
    device_platform = "device_platform"
    dma = "dma"
    fidelity_type = "fidelity_type"
    flexible_format_asset_type = "flexible_format_asset_type"
    frequency_value = "frequency_value"
    gen_ai_asset_type = "gen_ai_asset_type"
    gender = "gender"
    hourly_stats_aggregated_by_advertiser_time_zone = (
        "hourly_stats_aggregated_by_advertiser_time_zone"
    )
    hourly_stats_aggregated_by_audience_time_zone = "hourly_stats_aggregated_by_audience_time_zone"
    hsid = "hsid"
    image_asset = "image_asset"
    impression_device = "impression_device"
    impression_view_time_advertiser_hour_v2 = "impression_view_time_advertiser_hour_v2"
    is_auto_advance = "is_auto_advance"
    is_conversion_id_modeled = "is_conversion_id_modeled"
    is_rendered_as_delayed_skip_ad = "is_rendered_as_delayed_skip_ad"
    landing_destination = "landing_destination"
    link_url_asset = "link_url_asset"
    marketing_messages_btn_name = "marketing_messages_btn_name"
    mdsa_landing_destination = "mdsa_landing_destination"
    media_asset_url = "media_asset_url"
    media_creator = "media_creator"
    media_destination_url = "media_destination_url"
    media_format = "media_format"
    media_origin_url = "media_origin_url"
    media_text_content = "media_text_content"
    media_type = "media_type"
    mmm = "mmm"
    place_page_id = "place_page_id"
    platform_position = "platform_position"
    postback_sequence_index = "postback_sequence_index"
    product_id = "product_id"
    publisher_platform = "publisher_platform"
    redownload = "redownload"
    region = "region"
    signal_source_bucket = "signal_source_bucket"
    skan_campaign_id = "skan_campaign_id"
    skan_conversion_id = "skan_conversion_id"
    skan_version = "skan_version"
    sot_attribution_model_type = "sot_attribution_model_type"
    sot_attribution_window = "sot_attribution_window"
    sot_channel = "sot_channel"
    sot_event_type = "sot_event_type"
    sot_source = "sot_source"
    standard_event_content_type = "standard_event_content_type"
    title_asset = "title_asset"
    user_persona_id = "user_persona_id"
    user_persona_name = "user_persona_name"
    video_asset = "video_asset"


class adaccountinsights_date_preset_enum_param(str, Enum):
    """adaccountinsights_date_preset_enum_param enum values."""

    data_maximum = "data_maximum"
    last_14d = "last_14d"
    last_28d = "last_28d"
    last_30d = "last_30d"
    last_3d = "last_3d"
    last_7d = "last_7d"
    last_90d = "last_90d"
    last_month = "last_month"
    last_quarter = "last_quarter"
    last_week_mon_sun = "last_week_mon_sun"
    last_week_sun_sat = "last_week_sun_sat"
    last_year = "last_year"
    maximum = "maximum"
    this_month = "this_month"
    this_quarter = "this_quarter"
    this_week_mon_today = "this_week_mon_today"
    this_week_sun_today = "this_week_sun_today"
    this_year = "this_year"
    today = "today"
    yesterday = "yesterday"


class adaccountinsights_level_enum_param(str, Enum):
    """adaccountinsights_level_enum_param enum values."""

    account = "account"
    ad = "ad"
    adset = "adset"
    campaign = "campaign"


class adaccountinsights_summary_action_breakdowns_enum_param(str, Enum):
    """adaccountinsights_summary_action_breakdowns_enum_param enum values."""

    action_canvas_component_name = "action_canvas_component_name"
    action_carousel_card_id = "action_carousel_card_id"
    action_carousel_card_name = "action_carousel_card_name"
    action_destination = "action_destination"
    action_device = "action_device"
    action_reaction = "action_reaction"
    action_target_id = "action_target_id"
    action_type = "action_type"
    action_video_sound = "action_video_sound"
    action_video_type = "action_video_type"
    conversion_destination = "conversion_destination"
    matched_persona_id = "matched_persona_id"
    matched_persona_name = "matched_persona_name"
    signal_source_bucket = "signal_source_bucket"
    standard_event_content_type = "standard_event_content_type"


class adaccountmatched_search_applications_app_store_enum_param(str, Enum):
    """adaccountmatched_search_applications_app_store_enum_param enum values."""

    AMAZON_APP_STORE = "AMAZON_APP_STORE"
    APK_MIRROR = "APK_MIRROR"
    APK_MONK = "APK_MONK"
    APK_PURE = "APK_PURE"
    APTOIDE_A1_STORE = "APTOIDE_A1_STORE"
    BEMOBI_MOBILE_STORE = "BEMOBI_MOBILE_STORE"
    DIGITAL_TURBINE_STORE = "DIGITAL_TURBINE_STORE"
    DOES_NOT_EXIST = "DOES_NOT_EXIST"
    FB_ANDROID_STORE = "FB_ANDROID_STORE"
    FB_CANVAS = "FB_CANVAS"
    FB_GAMEROOM = "FB_GAMEROOM"
    GALAXY_STORE = "GALAXY_STORE"
    GOOGLE_PLAY = "GOOGLE_PLAY"
    INSTANT_GAME = "INSTANT_GAME"
    ITUNES = "ITUNES"
    ITUNES_IPAD = "ITUNES_IPAD"
    NEON_ANDROID_STORE = "NEON_ANDROID_STORE"
    NONE = "NONE"
    OCULUS_APP_STORE = "OCULUS_APP_STORE"
    OPPO = "OPPO"
    ROKU_STORE = "ROKU_STORE"
    UPTODOWN = "UPTODOWN"
    VIVO = "VIVO"
    WINDOWS_10_STORE = "WINDOWS_10_STORE"
    WINDOWS_STORE = "WINDOWS_STORE"
    XIAOMI = "XIAOMI"


class adaccountonbehalf_requests_status_enum_param(str, Enum):
    """adaccountonbehalf_requests_status_enum_param enum values."""

    APPROVE = "APPROVE"
    CANCELED = "CANCELED"
    DECLINE = "DECLINE"
    EXPIRED = "EXPIRED"
    IN_PROGRESS = "IN_PROGRESS"
    PENDING = "PENDING"
    PENDING_EMAIL_VERIFICATION = "PENDING_EMAIL_VERIFICATION"
    PENDING_INTEGRITY_REVIEW = "PENDING_INTEGRITY_REVIEW"


class adaccountproduct_audiences_claim_objective_enum_param(str, Enum):
    """adaccountproduct_audiences_claim_objective_enum_param enum values."""

    AUTOMOTIVE_MODEL = "AUTOMOTIVE_MODEL"
    COLLABORATIVE_ADS = "COLLABORATIVE_ADS"
    HOME_LISTING = "HOME_LISTING"
    MEDIA_TITLE = "MEDIA_TITLE"
    PRODUCT = "PRODUCT"
    TRAVEL = "TRAVEL"
    VEHICLE = "VEHICLE"
    VEHICLE_OFFER = "VEHICLE_OFFER"


class adaccountproduct_audiences_content_type_enum_param(str, Enum):
    """adaccountproduct_audiences_content_type_enum_param enum values."""

    AUTOMOTIVE_MODEL = "AUTOMOTIVE_MODEL"
    DESTINATION = "DESTINATION"
    FLIGHT = "FLIGHT"
    GENERIC = "GENERIC"
    HOME_LISTING = "HOME_LISTING"
    HOTEL = "HOTEL"
    LOCAL_SERVICE_BUSINESS = "LOCAL_SERVICE_BUSINESS"
    MEDIA_TITLE = "MEDIA_TITLE"
    OFFLINE_PRODUCT = "OFFLINE_PRODUCT"
    PRODUCT = "PRODUCT"
    VEHICLE = "VEHICLE"
    VEHICLE_OFFER = "VEHICLE_OFFER"


class adaccountproduct_audiences_subtype_enum_param(str, Enum):
    """adaccountproduct_audiences_subtype_enum_param enum values."""

    APP = "APP"
    BAG_OF_ACCOUNTS = "BAG_OF_ACCOUNTS"
    BIDDING = "BIDDING"
    CLAIM = "CLAIM"
    CUSTOM = "CUSTOM"
    ENGAGEMENT = "ENGAGEMENT"
    EXCLUSION = "EXCLUSION"
    FOX = "FOX"
    LOOKALIKE = "LOOKALIKE"
    MANAGED = "MANAGED"
    MEASUREMENT = "MEASUREMENT"
    MESSENGER_SUBSCRIBER_LIST = "MESSENGER_SUBSCRIBER_LIST"
    OFFLINE_CONVERSION = "OFFLINE_CONVERSION"
    PARTNER = "PARTNER"
    PRIMARY = "PRIMARY"
    REGULATED_CATEGORIES_AUDIENCE = "REGULATED_CATEGORIES_AUDIENCE"
    STUDY_RULE_AUDIENCE = "STUDY_RULE_AUDIENCE"
    VIDEO = "VIDEO"
    WEBSITE = "WEBSITE"


class adaccountreachfrequencypredictions_action_enum_param(str, Enum):
    """adaccountreachfrequencypredictions_action_enum_param enum values."""

    cancel = "cancel"
    quote = "quote"
    reserve = "reserve"


class adaccountreachfrequencypredictions_buying_type_enum_param(str, Enum):
    """adaccountreachfrequencypredictions_buying_type_enum_param enum values."""

    AUCTION = "AUCTION"
    DEPRECATED_REACH_BLOCK = "DEPRECATED_REACH_BLOCK"
    FIXED_CPM = "FIXED_CPM"
    MIXED = "MIXED"
    REACHBLOCK = "REACHBLOCK"
    RESEARCH_POLL = "RESEARCH_POLL"
    RESERVED = "RESERVED"


class adaccountreachfrequencypredictions_instream_packages_enum_param(str, Enum):
    """adaccountreachfrequencypredictions_instream_packages_enum_param enum values."""

    BEAUTY = "BEAUTY"
    ENTERTAINMENT = "ENTERTAINMENT"
    FOOD = "FOOD"
    NORMAL = "NORMAL"
    PREMIUM = "PREMIUM"
    REGULAR_ANIMALS_PETS = "REGULAR_ANIMALS_PETS"
    REGULAR_FOOD = "REGULAR_FOOD"
    REGULAR_GAMES = "REGULAR_GAMES"
    REGULAR_POLITICS = "REGULAR_POLITICS"
    REGULAR_SPORTS = "REGULAR_SPORTS"
    REGULAR_STYLE = "REGULAR_STYLE"
    REGULAR_TV_MOVIES = "REGULAR_TV_MOVIES"
    SPANISH = "SPANISH"
    SPORTS = "SPORTS"


class adaccounttargetingbrowse_limit_type_enum_param(str, Enum):
    """adaccounttargetingbrowse_limit_type_enum_param enum values."""

    behaviors = "behaviors"
    college_years = "college_years"
    education_majors = "education_majors"
    education_schools = "education_schools"
    education_statuses = "education_statuses"
    ethnic_affinity = "ethnic_affinity"
    family_statuses = "family_statuses"
    generation = "generation"
    home_ownership = "home_ownership"
    home_type = "home_type"
    home_value = "home_value"
    household_composition = "household_composition"
    income = "income"
    industries = "industries"
    interested_in = "interested_in"
    interests = "interests"
    life_events = "life_events"
    location_categories = "location_categories"
    moms = "moms"
    net_worth = "net_worth"
    office_type = "office_type"
    politics = "politics"
    relationship_statuses = "relationship_statuses"
    user_adclusters = "user_adclusters"
    work_employers = "work_employers"
    work_positions = "work_positions"


class adaccounttargetingbrowse_regulated_categories_enum_param(str, Enum):
    """adaccounttargetingbrowse_regulated_categories_enum_param enum values."""

    CREDIT = "CREDIT"
    EMPLOYMENT = "EMPLOYMENT"
    FINANCIAL_PRODUCTS_SERVICES = "FINANCIAL_PRODUCTS_SERVICES"
    HOUSING = "HOUSING"
    ISSUES_ELECTIONS_POLITICS = "ISSUES_ELECTIONS_POLITICS"
    NONE = "NONE"
    ONLINE_GAMBLING_AND_GAMING = "ONLINE_GAMBLING_AND_GAMING"


class adaccounttargetingbrowse_regulated_countries_enum_param(str, Enum):
    """adaccounttargetingbrowse_regulated_countries_enum_param enum values."""

    AD = "AD"
    AE = "AE"
    AF = "AF"
    AG = "AG"
    AI = "AI"
    AL = "AL"
    AM = "AM"
    AN = "AN"
    AO = "AO"
    AQ = "AQ"
    AR = "AR"
    AS = "AS"
    AT = "AT"
    AU = "AU"
    AW = "AW"
    AX = "AX"
    AZ = "AZ"
    BA = "BA"
    BB = "BB"
    BD = "BD"
    BE = "BE"
    BF = "BF"
    BG = "BG"
    BH = "BH"
    BI = "BI"
    BJ = "BJ"
    BL = "BL"
    BM = "BM"
    BN = "BN"
    BO = "BO"
    BQ = "BQ"
    BR = "BR"
    BS = "BS"
    BT = "BT"
    BV = "BV"
    BW = "BW"
    BY = "BY"
    BZ = "BZ"
    CA = "CA"
    CC = "CC"
    CD = "CD"
    CF = "CF"
    CG = "CG"
    CH = "CH"
    CI = "CI"
    CK = "CK"
    CL = "CL"
    CM = "CM"
    CN = "CN"
    CO = "CO"
    CR = "CR"
    CU = "CU"
    CV = "CV"
    CW = "CW"
    CX = "CX"
    CY = "CY"
    CZ = "CZ"
    DE = "DE"
    DJ = "DJ"
    DK = "DK"
    DM = "DM"
    DO = "DO"
    DZ = "DZ"
    EC = "EC"
    EE = "EE"
    EG = "EG"
    EH = "EH"
    ER = "ER"
    ES = "ES"
    ET = "ET"
    FI = "FI"
    FJ = "FJ"
    FK = "FK"
    FM = "FM"
    FO = "FO"
    FR = "FR"
    GA = "GA"
    GB = "GB"
    GD = "GD"
    GE = "GE"
    GF = "GF"
    GG = "GG"
    GH = "GH"
    GI = "GI"
    GL = "GL"
    GM = "GM"
    GN = "GN"
    GP = "GP"
    GQ = "GQ"
    GR = "GR"
    GS = "GS"
    GT = "GT"
    GU = "GU"
    GW = "GW"
    GY = "GY"
    HK = "HK"
    HM = "HM"
    HN = "HN"
    HR = "HR"
    HT = "HT"
    HU = "HU"
    ID = "ID"
    IE = "IE"
    IL = "IL"
    IM = "IM"
    IN = "IN"
    IO = "IO"
    IQ = "IQ"
    IR = "IR"
    IS = "IS"
    IT = "IT"
    JE = "JE"
    JM = "JM"
    JO = "JO"
    JP = "JP"
    KE = "KE"
    KG = "KG"
    KH = "KH"
    KI = "KI"
    KM = "KM"
    KN = "KN"
    KP = "KP"
    KR = "KR"
    KW = "KW"
    KY = "KY"
    KZ = "KZ"
    LA = "LA"
    LB = "LB"
    LC = "LC"
    LI = "LI"
    LK = "LK"
    LR = "LR"
    LS = "LS"
    LT = "LT"
    LU = "LU"
    LV = "LV"
    LY = "LY"
    MA = "MA"
    MC = "MC"
    MD = "MD"
    ME = "ME"
    MF = "MF"
    MG = "MG"
    MH = "MH"
    MK = "MK"
    ML = "ML"
    MM = "MM"
    MN = "MN"
    MO = "MO"
    MP = "MP"
    MQ = "MQ"
    MR = "MR"
    MS = "MS"
    MT = "MT"
    MU = "MU"
    MV = "MV"
    MW = "MW"
    MX = "MX"
    MY = "MY"
    MZ = "MZ"
    NA = "NA"
    NC = "NC"
    NE = "NE"
    NF = "NF"
    NG = "NG"
    NI = "NI"
    NL = "NL"
    NO = "NO"
    NP = "NP"
    NR = "NR"
    NU = "NU"
    NZ = "NZ"
    OM = "OM"
    PA = "PA"
    PE = "PE"
    PF = "PF"
    PG = "PG"
    PH = "PH"
    PK = "PK"
    PL = "PL"
    PM = "PM"
    PN = "PN"
    PR = "PR"
    PS = "PS"
    PT = "PT"
    PW = "PW"
    PY = "PY"
    QA = "QA"
    RE = "RE"
    RO = "RO"
    RS = "RS"
    RU = "RU"
    RW = "RW"
    SA = "SA"
    SB = "SB"
    SC = "SC"
    SD = "SD"
    SE = "SE"
    SG = "SG"
    SH = "SH"
    SI = "SI"
    SJ = "SJ"
    SK = "SK"
    SL = "SL"
    SM = "SM"
    SN = "SN"
    SO = "SO"
    SR = "SR"
    SS = "SS"
    ST = "ST"
    SV = "SV"
    SX = "SX"
    SY = "SY"
    SZ = "SZ"
    TC = "TC"
    TD = "TD"
    TF = "TF"
    TG = "TG"
    TH = "TH"
    TJ = "TJ"
    TK = "TK"
    TL = "TL"
    TM = "TM"
    TN = "TN"
    TO = "TO"
    TR = "TR"
    TT = "TT"
    TV = "TV"
    TW = "TW"
    TZ = "TZ"
    UA = "UA"
    UG = "UG"
    UM = "UM"
    US = "US"
    UY = "UY"
    UZ = "UZ"
    VA = "VA"
    VC = "VC"
    VE = "VE"
    VG = "VG"
    VI = "VI"
    VN = "VN"
    VU = "VU"
    WF = "WF"
    WS = "WS"
    XK = "XK"
    YE = "YE"
    YT = "YT"
    ZA = "ZA"
    ZM = "ZM"
    ZW = "ZW"


class adaccounttargetingbrowse_whitelisted_types_enum_param(str, Enum):
    """adaccounttargetingbrowse_whitelisted_types_enum_param enum values."""

    adgroup_id = "adgroup_id"
    age_max = "age_max"
    age_min = "age_min"
    age_range = "age_range"
    alternate_auto_targeting_option = "alternate_auto_targeting_option"
    app_install_state = "app_install_state"
    audience_network_positions = "audience_network_positions"
    behaviors = "behaviors"
    brand_safety_content_filter_levels = "brand_safety_content_filter_levels"
    brand_safety_content_severity_levels = "brand_safety_content_severity_levels"
    cafe_ca_contraction_targeting_signal = "cafe_ca_contraction_targeting_signal"
    cafe_ca_expansion_targeting_signal = "cafe_ca_expansion_targeting_signal"
    catalog_based_targeting = "catalog_based_targeting"
    cities = "cities"
    city_keys = "city_keys"
    college_years = "college_years"
    conjunctive_user_adclusters = "conjunctive_user_adclusters"
    connections = "connections"
    contextual_targeting_categories = "contextual_targeting_categories"
    countries = "countries"
    country = "country"
    country_groups = "country_groups"
    custom_audiences = "custom_audiences"
    device_platforms = "device_platforms"
    direct_install_devices = "direct_install_devices"
    dynamic_audience_ids = "dynamic_audience_ids"
    education_majors = "education_majors"
    education_schools = "education_schools"
    education_statuses = "education_statuses"
    effective_audience_network_positions = "effective_audience_network_positions"
    effective_device_platforms = "effective_device_platforms"
    effective_facebook_positions = "effective_facebook_positions"
    effective_instagram_positions = "effective_instagram_positions"
    effective_messenger_positions = "effective_messenger_positions"
    effective_oculus_positions = "effective_oculus_positions"
    effective_publisher_platforms = "effective_publisher_platforms"
    effective_threads_positions = "effective_threads_positions"
    effective_whatsapp_positions = "effective_whatsapp_positions"
    engagement_specs = "engagement_specs"
    ethnic_affinity = "ethnic_affinity"
    exclude_previous_days = "exclude_previous_days"
    exclude_reached_since = "exclude_reached_since"
    excluded_brand_safety_content_types = "excluded_brand_safety_content_types"
    excluded_connections = "excluded_connections"
    excluded_custom_audiences = "excluded_custom_audiences"
    excluded_dynamic_audience_ids = "excluded_dynamic_audience_ids"
    excluded_engagement_specs = "excluded_engagement_specs"
    excluded_geo_locations = "excluded_geo_locations"
    excluded_mobile_device_model = "excluded_mobile_device_model"
    excluded_product_audience_specs = "excluded_product_audience_specs"
    excluded_publisher_categories = "excluded_publisher_categories"
    excluded_publisher_list_ids = "excluded_publisher_list_ids"
    excluded_user_adclusters = "excluded_user_adclusters"
    excluded_user_device = "excluded_user_device"
    exclusions = "exclusions"
    expanded_implicit_custom_audiences = "expanded_implicit_custom_audiences"
    facebook_positions = "facebook_positions"
    family_statuses = "family_statuses"
    fb_deal_id = "fb_deal_id"
    flexible_spec = "flexible_spec"
    follow_profiles = "follow_profiles"
    follow_profiles_negative = "follow_profiles_negative"
    format = "format"
    friends_of_connections = "friends_of_connections"
    gatekeepers = "gatekeepers"
    genders = "genders"
    generation = "generation"
    geo_locations = "geo_locations"
    home_ownership = "home_ownership"
    home_type = "home_type"
    home_value = "home_value"
    household_composition = "household_composition"
    household_income = "household_income"
    id = "id"
    income = "income"
    industries = "industries"
    instagram_hashtags = "instagram_hashtags"
    instagram_positions = "instagram_positions"
    install_state_application = "install_state_application"
    instream_video_skippable_excluded = "instream_video_skippable_excluded"
    instream_video_sponsorship_placements = "instream_video_sponsorship_placements"
    interest_defaults_source = "interest_defaults_source"
    interested_in = "interested_in"
    interests = "interests"
    is_instagram_destination_ad = "is_instagram_destination_ad"
    is_whatsapp_destination_ad = "is_whatsapp_destination_ad"
    keywords = "keywords"
    life_events = "life_events"
    locales = "locales"
    location_categories = "location_categories"
    location_cluster_ids = "location_cluster_ids"
    location_expansion = "location_expansion"
    marketing_message_channels = "marketing_message_channels"
    marketplace_product_categories = "marketplace_product_categories"
    messenger_positions = "messenger_positions"
    mobile_device_model = "mobile_device_model"
    moms = "moms"
    net_worth = "net_worth"
    oculus_positions = "oculus_positions"
    office_type = "office_type"
    page_types = "page_types"
    place_page_set_ids = "place_page_set_ids"
    political_views = "political_views"
    politics = "politics"
    product_audience_specs = "product_audience_specs"
    prospecting_audience = "prospecting_audience"
    publisher_platforms = "publisher_platforms"
    radius = "radius"
    region_keys = "region_keys"
    regions = "regions"
    relationship_statuses = "relationship_statuses"
    rtb_flag = "rtb_flag"
    site_category = "site_category"
    subscriber_universe = "subscriber_universe"
    tafe_ca_mitigation_strategy = "tafe_ca_mitigation_strategy"
    targeting_automation = "targeting_automation"
    targeting_optimization = "targeting_optimization"
    targeting_relaxation_types = "targeting_relaxation_types"
    threads_positions = "threads_positions"
    timezones = "timezones"
    topic = "topic"
    trending = "trending"
    user_adclusters = "user_adclusters"
    user_age_unknown = "user_age_unknown"
    user_device = "user_device"
    user_event = "user_event"
    user_os = "user_os"
    user_page_threads = "user_page_threads"
    user_page_threads_excluded = "user_page_threads_excluded"
    whatsapp_positions = "whatsapp_positions"
    wireless_carrier = "wireless_carrier"
    work_employers = "work_employers"
    work_positions = "work_positions"
    zips = "zips"


class adaccounttargetingsearch_app_store_enum_param(str, Enum):
    """adaccounttargetingsearch_app_store_enum_param enum values."""

    amazon_app_store = "amazon_app_store"
    apk_mirror = "apk_mirror"
    apk_monk = "apk_monk"
    apk_pure = "apk_pure"
    aptoide_a1_store = "aptoide_a1_store"
    bemobi_mobile_store = "bemobi_mobile_store"
    digital_turbine_store = "digital_turbine_store"
    does_not_exist = "does_not_exist"
    fb_android_store = "fb_android_store"
    fb_canvas = "fb_canvas"
    fb_gameroom = "fb_gameroom"
    galaxy_store = "galaxy_store"
    google_play = "google_play"
    instant_game = "instant_game"
    itunes = "itunes"
    itunes_ipad = "itunes_ipad"
    neon_android_store = "neon_android_store"
    none = "none"
    oculus_app_store = "oculus_app_store"
    oppo = "oppo"
    roku_channel_store = "roku_channel_store"
    uptodown = "uptodown"
    vivo = "vivo"
    windows_10_store = "windows_10_store"
    windows_store = "windows_store"
    xiaomi = "xiaomi"


class adaccounttargetingsearch_limit_type_enum_param(str, Enum):
    """adaccounttargetingsearch_limit_type_enum_param enum values."""

    adgroup_id = "adgroup_id"
    age_max = "age_max"
    age_min = "age_min"
    age_range = "age_range"
    alternate_auto_targeting_option = "alternate_auto_targeting_option"
    app_install_state = "app_install_state"
    audience_network_positions = "audience_network_positions"
    behaviors = "behaviors"
    brand_safety_content_filter_levels = "brand_safety_content_filter_levels"
    brand_safety_content_severity_levels = "brand_safety_content_severity_levels"
    cafe_ca_contraction_targeting_signal = "cafe_ca_contraction_targeting_signal"
    cafe_ca_expansion_targeting_signal = "cafe_ca_expansion_targeting_signal"
    catalog_based_targeting = "catalog_based_targeting"
    cities = "cities"
    city_keys = "city_keys"
    college_years = "college_years"
    conjunctive_user_adclusters = "conjunctive_user_adclusters"
    connections = "connections"
    contextual_targeting_categories = "contextual_targeting_categories"
    countries = "countries"
    country = "country"
    country_groups = "country_groups"
    custom_audiences = "custom_audiences"
    device_platforms = "device_platforms"
    direct_install_devices = "direct_install_devices"
    dynamic_audience_ids = "dynamic_audience_ids"
    education_majors = "education_majors"
    education_schools = "education_schools"
    education_statuses = "education_statuses"
    effective_audience_network_positions = "effective_audience_network_positions"
    effective_device_platforms = "effective_device_platforms"
    effective_facebook_positions = "effective_facebook_positions"
    effective_instagram_positions = "effective_instagram_positions"
    effective_messenger_positions = "effective_messenger_positions"
    effective_oculus_positions = "effective_oculus_positions"
    effective_publisher_platforms = "effective_publisher_platforms"
    effective_threads_positions = "effective_threads_positions"
    effective_whatsapp_positions = "effective_whatsapp_positions"
    engagement_specs = "engagement_specs"
    ethnic_affinity = "ethnic_affinity"
    exclude_previous_days = "exclude_previous_days"
    exclude_reached_since = "exclude_reached_since"
    excluded_brand_safety_content_types = "excluded_brand_safety_content_types"
    excluded_connections = "excluded_connections"
    excluded_custom_audiences = "excluded_custom_audiences"
    excluded_dynamic_audience_ids = "excluded_dynamic_audience_ids"
    excluded_engagement_specs = "excluded_engagement_specs"
    excluded_geo_locations = "excluded_geo_locations"
    excluded_mobile_device_model = "excluded_mobile_device_model"
    excluded_product_audience_specs = "excluded_product_audience_specs"
    excluded_publisher_categories = "excluded_publisher_categories"
    excluded_publisher_list_ids = "excluded_publisher_list_ids"
    excluded_user_adclusters = "excluded_user_adclusters"
    excluded_user_device = "excluded_user_device"
    exclusions = "exclusions"
    expanded_implicit_custom_audiences = "expanded_implicit_custom_audiences"
    facebook_positions = "facebook_positions"
    family_statuses = "family_statuses"
    fb_deal_id = "fb_deal_id"
    flexible_spec = "flexible_spec"
    follow_profiles = "follow_profiles"
    follow_profiles_negative = "follow_profiles_negative"
    format = "format"
    friends_of_connections = "friends_of_connections"
    gatekeepers = "gatekeepers"
    genders = "genders"
    generation = "generation"
    geo_locations = "geo_locations"
    home_ownership = "home_ownership"
    home_type = "home_type"
    home_value = "home_value"
    household_composition = "household_composition"
    household_income = "household_income"
    id = "id"
    income = "income"
    industries = "industries"
    instagram_hashtags = "instagram_hashtags"
    instagram_positions = "instagram_positions"
    install_state_application = "install_state_application"
    instream_video_skippable_excluded = "instream_video_skippable_excluded"
    instream_video_sponsorship_placements = "instream_video_sponsorship_placements"
    interest_defaults_source = "interest_defaults_source"
    interested_in = "interested_in"
    interests = "interests"
    is_instagram_destination_ad = "is_instagram_destination_ad"
    is_whatsapp_destination_ad = "is_whatsapp_destination_ad"
    keywords = "keywords"
    life_events = "life_events"
    locales = "locales"
    location_categories = "location_categories"
    location_cluster_ids = "location_cluster_ids"
    location_expansion = "location_expansion"
    marketing_message_channels = "marketing_message_channels"
    marketplace_product_categories = "marketplace_product_categories"
    messenger_positions = "messenger_positions"
    mobile_device_model = "mobile_device_model"
    moms = "moms"
    net_worth = "net_worth"
    oculus_positions = "oculus_positions"
    office_type = "office_type"
    page_types = "page_types"
    place_page_set_ids = "place_page_set_ids"
    political_views = "political_views"
    politics = "politics"
    product_audience_specs = "product_audience_specs"
    prospecting_audience = "prospecting_audience"
    publisher_platforms = "publisher_platforms"
    radius = "radius"
    region_keys = "region_keys"
    regions = "regions"
    relationship_statuses = "relationship_statuses"
    rtb_flag = "rtb_flag"
    site_category = "site_category"
    subscriber_universe = "subscriber_universe"
    tafe_ca_mitigation_strategy = "tafe_ca_mitigation_strategy"
    targeting_automation = "targeting_automation"
    targeting_optimization = "targeting_optimization"
    targeting_relaxation_types = "targeting_relaxation_types"
    threads_positions = "threads_positions"
    timezones = "timezones"
    topic = "topic"
    trending = "trending"
    user_adclusters = "user_adclusters"
    user_age_unknown = "user_age_unknown"
    user_device = "user_device"
    user_event = "user_event"
    user_os = "user_os"
    user_page_threads = "user_page_threads"
    user_page_threads_excluded = "user_page_threads_excluded"
    whatsapp_positions = "whatsapp_positions"
    wireless_carrier = "wireless_carrier"
    work_employers = "work_employers"
    work_positions = "work_positions"
    zips = "zips"


class adaccounttargetingsearch_objective_enum_param(str, Enum):
    """adaccounttargetingsearch_objective_enum_param enum values."""

    APP_INSTALLS = "APP_INSTALLS"
    BRAND_AWARENESS = "BRAND_AWARENESS"
    CONVERSIONS = "CONVERSIONS"
    EVENT_RESPONSES = "EVENT_RESPONSES"
    LEAD_GENERATION = "LEAD_GENERATION"
    LINK_CLICKS = "LINK_CLICKS"
    LOCAL_AWARENESS = "LOCAL_AWARENESS"
    MESSAGES = "MESSAGES"
    OFFER_CLAIMS = "OFFER_CLAIMS"
    OUTCOME_APP_PROMOTION = "OUTCOME_APP_PROMOTION"
    OUTCOME_AWARENESS = "OUTCOME_AWARENESS"
    OUTCOME_ENGAGEMENT = "OUTCOME_ENGAGEMENT"
    OUTCOME_LEADS = "OUTCOME_LEADS"
    OUTCOME_SALES = "OUTCOME_SALES"
    OUTCOME_TRAFFIC = "OUTCOME_TRAFFIC"
    PAGE_LIKES = "PAGE_LIKES"
    POST_ENGAGEMENT = "POST_ENGAGEMENT"
    PRODUCT_CATALOG_SALES = "PRODUCT_CATALOG_SALES"
    REACH = "REACH"
    STORE_VISITS = "STORE_VISITS"
    VIDEO_VIEWS = "VIDEO_VIEWS"


class adaccounttargetingsearch_regulated_categories_enum_param(str, Enum):
    """adaccounttargetingsearch_regulated_categories_enum_param enum values."""

    CREDIT = "CREDIT"
    EMPLOYMENT = "EMPLOYMENT"
    FINANCIAL_PRODUCTS_SERVICES = "FINANCIAL_PRODUCTS_SERVICES"
    HOUSING = "HOUSING"
    ISSUES_ELECTIONS_POLITICS = "ISSUES_ELECTIONS_POLITICS"
    NONE = "NONE"
    ONLINE_GAMBLING_AND_GAMING = "ONLINE_GAMBLING_AND_GAMING"


class adaccounttargetingsearch_regulated_countries_enum_param(str, Enum):
    """adaccounttargetingsearch_regulated_countries_enum_param enum values."""

    AD = "AD"
    AE = "AE"
    AF = "AF"
    AG = "AG"
    AI = "AI"
    AL = "AL"
    AM = "AM"
    AN = "AN"
    AO = "AO"
    AQ = "AQ"
    AR = "AR"
    AS = "AS"
    AT = "AT"
    AU = "AU"
    AW = "AW"
    AX = "AX"
    AZ = "AZ"
    BA = "BA"
    BB = "BB"
    BD = "BD"
    BE = "BE"
    BF = "BF"
    BG = "BG"
    BH = "BH"
    BI = "BI"
    BJ = "BJ"
    BL = "BL"
    BM = "BM"
    BN = "BN"
    BO = "BO"
    BQ = "BQ"
    BR = "BR"
    BS = "BS"
    BT = "BT"
    BV = "BV"
    BW = "BW"
    BY = "BY"
    BZ = "BZ"
    CA = "CA"
    CC = "CC"
    CD = "CD"
    CF = "CF"
    CG = "CG"
    CH = "CH"
    CI = "CI"
    CK = "CK"
    CL = "CL"
    CM = "CM"
    CN = "CN"
    CO = "CO"
    CR = "CR"
    CU = "CU"
    CV = "CV"
    CW = "CW"
    CX = "CX"
    CY = "CY"
    CZ = "CZ"
    DE = "DE"
    DJ = "DJ"
    DK = "DK"
    DM = "DM"
    DO = "DO"
    DZ = "DZ"
    EC = "EC"
    EE = "EE"
    EG = "EG"
    EH = "EH"
    ER = "ER"
    ES = "ES"
    ET = "ET"
    FI = "FI"
    FJ = "FJ"
    FK = "FK"
    FM = "FM"
    FO = "FO"
    FR = "FR"
    GA = "GA"
    GB = "GB"
    GD = "GD"
    GE = "GE"
    GF = "GF"
    GG = "GG"
    GH = "GH"
    GI = "GI"
    GL = "GL"
    GM = "GM"
    GN = "GN"
    GP = "GP"
    GQ = "GQ"
    GR = "GR"
    GS = "GS"
    GT = "GT"
    GU = "GU"
    GW = "GW"
    GY = "GY"
    HK = "HK"
    HM = "HM"
    HN = "HN"
    HR = "HR"
    HT = "HT"
    HU = "HU"
    ID = "ID"
    IE = "IE"
    IL = "IL"
    IM = "IM"
    IN = "IN"
    IO = "IO"
    IQ = "IQ"
    IR = "IR"
    IS = "IS"
    IT = "IT"
    JE = "JE"
    JM = "JM"
    JO = "JO"
    JP = "JP"
    KE = "KE"
    KG = "KG"
    KH = "KH"
    KI = "KI"
    KM = "KM"
    KN = "KN"
    KP = "KP"
    KR = "KR"
    KW = "KW"
    KY = "KY"
    KZ = "KZ"
    LA = "LA"
    LB = "LB"
    LC = "LC"
    LI = "LI"
    LK = "LK"
    LR = "LR"
    LS = "LS"
    LT = "LT"
    LU = "LU"
    LV = "LV"
    LY = "LY"
    MA = "MA"
    MC = "MC"
    MD = "MD"
    ME = "ME"
    MF = "MF"
    MG = "MG"
    MH = "MH"
    MK = "MK"
    ML = "ML"
    MM = "MM"
    MN = "MN"
    MO = "MO"
    MP = "MP"
    MQ = "MQ"
    MR = "MR"
    MS = "MS"
    MT = "MT"
    MU = "MU"
    MV = "MV"
    MW = "MW"
    MX = "MX"
    MY = "MY"
    MZ = "MZ"
    NA = "NA"
    NC = "NC"
    NE = "NE"
    NF = "NF"
    NG = "NG"
    NI = "NI"
    NL = "NL"
    NO = "NO"
    NP = "NP"
    NR = "NR"
    NU = "NU"
    NZ = "NZ"
    OM = "OM"
    PA = "PA"
    PE = "PE"
    PF = "PF"
    PG = "PG"
    PH = "PH"
    PK = "PK"
    PL = "PL"
    PM = "PM"
    PN = "PN"
    PR = "PR"
    PS = "PS"
    PT = "PT"
    PW = "PW"
    PY = "PY"
    QA = "QA"
    RE = "RE"
    RO = "RO"
    RS = "RS"
    RU = "RU"
    RW = "RW"
    SA = "SA"
    SB = "SB"
    SC = "SC"
    SD = "SD"
    SE = "SE"
    SG = "SG"
    SH = "SH"
    SI = "SI"
    SJ = "SJ"
    SK = "SK"
    SL = "SL"
    SM = "SM"
    SN = "SN"
    SO = "SO"
    SR = "SR"
    SS = "SS"
    ST = "ST"
    SV = "SV"
    SX = "SX"
    SY = "SY"
    SZ = "SZ"
    TC = "TC"
    TD = "TD"
    TF = "TF"
    TG = "TG"
    TH = "TH"
    TJ = "TJ"
    TK = "TK"
    TL = "TL"
    TM = "TM"
    TN = "TN"
    TO = "TO"
    TR = "TR"
    TT = "TT"
    TV = "TV"
    TW = "TW"
    TZ = "TZ"
    UA = "UA"
    UG = "UG"
    UM = "UM"
    US = "US"
    UY = "UY"
    UZ = "UZ"
    VA = "VA"
    VC = "VC"
    VE = "VE"
    VG = "VG"
    VI = "VI"
    VN = "VN"
    VU = "VU"
    WF = "WF"
    WS = "WS"
    XK = "XK"
    YE = "YE"
    YT = "YT"
    ZA = "ZA"
    ZM = "ZM"
    ZW = "ZW"


class adaccounttargetingsearch_whitelisted_types_enum_param(str, Enum):
    """adaccounttargetingsearch_whitelisted_types_enum_param enum values."""

    adgroup_id = "adgroup_id"
    age_max = "age_max"
    age_min = "age_min"
    age_range = "age_range"
    alternate_auto_targeting_option = "alternate_auto_targeting_option"
    app_install_state = "app_install_state"
    audience_network_positions = "audience_network_positions"
    behaviors = "behaviors"
    brand_safety_content_filter_levels = "brand_safety_content_filter_levels"
    brand_safety_content_severity_levels = "brand_safety_content_severity_levels"
    cafe_ca_contraction_targeting_signal = "cafe_ca_contraction_targeting_signal"
    cafe_ca_expansion_targeting_signal = "cafe_ca_expansion_targeting_signal"
    catalog_based_targeting = "catalog_based_targeting"
    cities = "cities"
    city_keys = "city_keys"
    college_years = "college_years"
    conjunctive_user_adclusters = "conjunctive_user_adclusters"
    connections = "connections"
    contextual_targeting_categories = "contextual_targeting_categories"
    countries = "countries"
    country = "country"
    country_groups = "country_groups"
    custom_audiences = "custom_audiences"
    device_platforms = "device_platforms"
    direct_install_devices = "direct_install_devices"
    dynamic_audience_ids = "dynamic_audience_ids"
    education_majors = "education_majors"
    education_schools = "education_schools"
    education_statuses = "education_statuses"
    effective_audience_network_positions = "effective_audience_network_positions"
    effective_device_platforms = "effective_device_platforms"
    effective_facebook_positions = "effective_facebook_positions"
    effective_instagram_positions = "effective_instagram_positions"
    effective_messenger_positions = "effective_messenger_positions"
    effective_oculus_positions = "effective_oculus_positions"
    effective_publisher_platforms = "effective_publisher_platforms"
    effective_threads_positions = "effective_threads_positions"
    effective_whatsapp_positions = "effective_whatsapp_positions"
    engagement_specs = "engagement_specs"
    ethnic_affinity = "ethnic_affinity"
    exclude_previous_days = "exclude_previous_days"
    exclude_reached_since = "exclude_reached_since"
    excluded_brand_safety_content_types = "excluded_brand_safety_content_types"
    excluded_connections = "excluded_connections"
    excluded_custom_audiences = "excluded_custom_audiences"
    excluded_dynamic_audience_ids = "excluded_dynamic_audience_ids"
    excluded_engagement_specs = "excluded_engagement_specs"
    excluded_geo_locations = "excluded_geo_locations"
    excluded_mobile_device_model = "excluded_mobile_device_model"
    excluded_product_audience_specs = "excluded_product_audience_specs"
    excluded_publisher_categories = "excluded_publisher_categories"
    excluded_publisher_list_ids = "excluded_publisher_list_ids"
    excluded_user_adclusters = "excluded_user_adclusters"
    excluded_user_device = "excluded_user_device"
    exclusions = "exclusions"
    expanded_implicit_custom_audiences = "expanded_implicit_custom_audiences"
    facebook_positions = "facebook_positions"
    family_statuses = "family_statuses"
    fb_deal_id = "fb_deal_id"
    flexible_spec = "flexible_spec"
    follow_profiles = "follow_profiles"
    follow_profiles_negative = "follow_profiles_negative"
    format = "format"
    friends_of_connections = "friends_of_connections"
    gatekeepers = "gatekeepers"
    genders = "genders"
    generation = "generation"
    geo_locations = "geo_locations"
    home_ownership = "home_ownership"
    home_type = "home_type"
    home_value = "home_value"
    household_composition = "household_composition"
    household_income = "household_income"
    id = "id"
    income = "income"
    industries = "industries"
    instagram_hashtags = "instagram_hashtags"
    instagram_positions = "instagram_positions"
    install_state_application = "install_state_application"
    instream_video_skippable_excluded = "instream_video_skippable_excluded"
    instream_video_sponsorship_placements = "instream_video_sponsorship_placements"
    interest_defaults_source = "interest_defaults_source"
    interested_in = "interested_in"
    interests = "interests"
    is_instagram_destination_ad = "is_instagram_destination_ad"
    is_whatsapp_destination_ad = "is_whatsapp_destination_ad"
    keywords = "keywords"
    life_events = "life_events"
    locales = "locales"
    location_categories = "location_categories"
    location_cluster_ids = "location_cluster_ids"
    location_expansion = "location_expansion"
    marketing_message_channels = "marketing_message_channels"
    marketplace_product_categories = "marketplace_product_categories"
    messenger_positions = "messenger_positions"
    mobile_device_model = "mobile_device_model"
    moms = "moms"
    net_worth = "net_worth"
    oculus_positions = "oculus_positions"
    office_type = "office_type"
    page_types = "page_types"
    place_page_set_ids = "place_page_set_ids"
    political_views = "political_views"
    politics = "politics"
    product_audience_specs = "product_audience_specs"
    prospecting_audience = "prospecting_audience"
    publisher_platforms = "publisher_platforms"
    radius = "radius"
    region_keys = "region_keys"
    regions = "regions"
    relationship_statuses = "relationship_statuses"
    rtb_flag = "rtb_flag"
    site_category = "site_category"
    subscriber_universe = "subscriber_universe"
    tafe_ca_mitigation_strategy = "tafe_ca_mitigation_strategy"
    targeting_automation = "targeting_automation"
    targeting_optimization = "targeting_optimization"
    targeting_relaxation_types = "targeting_relaxation_types"
    threads_positions = "threads_positions"
    timezones = "timezones"
    topic = "topic"
    trending = "trending"
    user_adclusters = "user_adclusters"
    user_age_unknown = "user_age_unknown"
    user_device = "user_device"
    user_event = "user_event"
    user_os = "user_os"
    user_page_threads = "user_page_threads"
    user_page_threads_excluded = "user_page_threads_excluded"
    whatsapp_positions = "whatsapp_positions"
    wireless_carrier = "wireless_carrier"
    work_employers = "work_employers"
    work_positions = "work_positions"
    zips = "zips"


class adaccounttargetingsuggestions_app_store_enum_param(str, Enum):
    """adaccounttargetingsuggestions_app_store_enum_param enum values."""

    amazon_app_store = "amazon_app_store"
    apk_mirror = "apk_mirror"
    apk_monk = "apk_monk"
    apk_pure = "apk_pure"
    aptoide_a1_store = "aptoide_a1_store"
    bemobi_mobile_store = "bemobi_mobile_store"
    digital_turbine_store = "digital_turbine_store"
    does_not_exist = "does_not_exist"
    fb_android_store = "fb_android_store"
    fb_canvas = "fb_canvas"
    fb_gameroom = "fb_gameroom"
    galaxy_store = "galaxy_store"
    google_play = "google_play"
    instant_game = "instant_game"
    itunes = "itunes"
    itunes_ipad = "itunes_ipad"
    neon_android_store = "neon_android_store"
    none = "none"
    oculus_app_store = "oculus_app_store"
    oppo = "oppo"
    roku_channel_store = "roku_channel_store"
    uptodown = "uptodown"
    vivo = "vivo"
    windows_10_store = "windows_10_store"
    windows_store = "windows_store"
    xiaomi = "xiaomi"


class adaccounttargetingsuggestions_limit_type_enum_param(str, Enum):
    """adaccounttargetingsuggestions_limit_type_enum_param enum values."""

    behaviors = "behaviors"
    college_years = "college_years"
    education_majors = "education_majors"
    education_schools = "education_schools"
    education_statuses = "education_statuses"
    family_statuses = "family_statuses"
    home_value = "home_value"
    income = "income"
    industries = "industries"
    interested_in = "interested_in"
    interests = "interests"
    life_events = "life_events"
    location_categories = "location_categories"
    relationship_statuses = "relationship_statuses"
    user_adclusters = "user_adclusters"
    work_employers = "work_employers"
    work_positions = "work_positions"


class adaccounttargetingsuggestions_mode_enum_param(str, Enum):
    """adaccounttargetingsuggestions_mode_enum_param enum values."""

    best_performing = "best_performing"
    recently_used = "recently_used"
    related = "related"
    suggestions = "suggestions"


class adaccounttargetingsuggestions_objective_enum_param(str, Enum):
    """adaccounttargetingsuggestions_objective_enum_param enum values."""

    APP_INSTALLS = "APP_INSTALLS"
    BRAND_AWARENESS = "BRAND_AWARENESS"
    CONVERSIONS = "CONVERSIONS"
    EVENT_RESPONSES = "EVENT_RESPONSES"
    LEAD_GENERATION = "LEAD_GENERATION"
    LINK_CLICKS = "LINK_CLICKS"
    LOCAL_AWARENESS = "LOCAL_AWARENESS"
    MESSAGES = "MESSAGES"
    OFFER_CLAIMS = "OFFER_CLAIMS"
    OUTCOME_APP_PROMOTION = "OUTCOME_APP_PROMOTION"
    OUTCOME_AWARENESS = "OUTCOME_AWARENESS"
    OUTCOME_ENGAGEMENT = "OUTCOME_ENGAGEMENT"
    OUTCOME_LEADS = "OUTCOME_LEADS"
    OUTCOME_SALES = "OUTCOME_SALES"
    OUTCOME_TRAFFIC = "OUTCOME_TRAFFIC"
    PAGE_LIKES = "PAGE_LIKES"
    POST_ENGAGEMENT = "POST_ENGAGEMENT"
    PRODUCT_CATALOG_SALES = "PRODUCT_CATALOG_SALES"
    REACH = "REACH"
    STORE_VISITS = "STORE_VISITS"
    VIDEO_VIEWS = "VIDEO_VIEWS"


class adaccounttargetingsuggestions_regulated_categories_enum_param(str, Enum):
    """adaccounttargetingsuggestions_regulated_categories_enum_param enum values."""

    CREDIT = "CREDIT"
    EMPLOYMENT = "EMPLOYMENT"
    FINANCIAL_PRODUCTS_SERVICES = "FINANCIAL_PRODUCTS_SERVICES"
    HOUSING = "HOUSING"
    ISSUES_ELECTIONS_POLITICS = "ISSUES_ELECTIONS_POLITICS"
    NONE = "NONE"
    ONLINE_GAMBLING_AND_GAMING = "ONLINE_GAMBLING_AND_GAMING"


class adaccounttargetingsuggestions_regulated_countries_enum_param(str, Enum):
    """adaccounttargetingsuggestions_regulated_countries_enum_param enum values."""

    AD = "AD"
    AE = "AE"
    AF = "AF"
    AG = "AG"
    AI = "AI"
    AL = "AL"
    AM = "AM"
    AN = "AN"
    AO = "AO"
    AQ = "AQ"
    AR = "AR"
    AS = "AS"
    AT = "AT"
    AU = "AU"
    AW = "AW"
    AX = "AX"
    AZ = "AZ"
    BA = "BA"
    BB = "BB"
    BD = "BD"
    BE = "BE"
    BF = "BF"
    BG = "BG"
    BH = "BH"
    BI = "BI"
    BJ = "BJ"
    BL = "BL"
    BM = "BM"
    BN = "BN"
    BO = "BO"
    BQ = "BQ"
    BR = "BR"
    BS = "BS"
    BT = "BT"
    BV = "BV"
    BW = "BW"
    BY = "BY"
    BZ = "BZ"
    CA = "CA"
    CC = "CC"
    CD = "CD"
    CF = "CF"
    CG = "CG"
    CH = "CH"
    CI = "CI"
    CK = "CK"
    CL = "CL"
    CM = "CM"
    CN = "CN"
    CO = "CO"
    CR = "CR"
    CU = "CU"
    CV = "CV"
    CW = "CW"
    CX = "CX"
    CY = "CY"
    CZ = "CZ"
    DE = "DE"
    DJ = "DJ"
    DK = "DK"
    DM = "DM"
    DO = "DO"
    DZ = "DZ"
    EC = "EC"
    EE = "EE"
    EG = "EG"
    EH = "EH"
    ER = "ER"
    ES = "ES"
    ET = "ET"
    FI = "FI"
    FJ = "FJ"
    FK = "FK"
    FM = "FM"
    FO = "FO"
    FR = "FR"
    GA = "GA"
    GB = "GB"
    GD = "GD"
    GE = "GE"
    GF = "GF"
    GG = "GG"
    GH = "GH"
    GI = "GI"
    GL = "GL"
    GM = "GM"
    GN = "GN"
    GP = "GP"
    GQ = "GQ"
    GR = "GR"
    GS = "GS"
    GT = "GT"
    GU = "GU"
    GW = "GW"
    GY = "GY"
    HK = "HK"
    HM = "HM"
    HN = "HN"
    HR = "HR"
    HT = "HT"
    HU = "HU"
    ID = "ID"
    IE = "IE"
    IL = "IL"
    IM = "IM"
    IN = "IN"
    IO = "IO"
    IQ = "IQ"
    IR = "IR"
    IS = "IS"
    IT = "IT"
    JE = "JE"
    JM = "JM"
    JO = "JO"
    JP = "JP"
    KE = "KE"
    KG = "KG"
    KH = "KH"
    KI = "KI"
    KM = "KM"
    KN = "KN"
    KP = "KP"
    KR = "KR"
    KW = "KW"
    KY = "KY"
    KZ = "KZ"
    LA = "LA"
    LB = "LB"
    LC = "LC"
    LI = "LI"
    LK = "LK"
    LR = "LR"
    LS = "LS"
    LT = "LT"
    LU = "LU"
    LV = "LV"
    LY = "LY"
    MA = "MA"
    MC = "MC"
    MD = "MD"
    ME = "ME"
    MF = "MF"
    MG = "MG"
    MH = "MH"
    MK = "MK"
    ML = "ML"
    MM = "MM"
    MN = "MN"
    MO = "MO"
    MP = "MP"
    MQ = "MQ"
    MR = "MR"
    MS = "MS"
    MT = "MT"
    MU = "MU"
    MV = "MV"
    MW = "MW"
    MX = "MX"
    MY = "MY"
    MZ = "MZ"
    NA = "NA"
    NC = "NC"
    NE = "NE"
    NF = "NF"
    NG = "NG"
    NI = "NI"
    NL = "NL"
    NO = "NO"
    NP = "NP"
    NR = "NR"
    NU = "NU"
    NZ = "NZ"
    OM = "OM"
    PA = "PA"
    PE = "PE"
    PF = "PF"
    PG = "PG"
    PH = "PH"
    PK = "PK"
    PL = "PL"
    PM = "PM"
    PN = "PN"
    PR = "PR"
    PS = "PS"
    PT = "PT"
    PW = "PW"
    PY = "PY"
    QA = "QA"
    RE = "RE"
    RO = "RO"
    RS = "RS"
    RU = "RU"
    RW = "RW"
    SA = "SA"
    SB = "SB"
    SC = "SC"
    SD = "SD"
    SE = "SE"
    SG = "SG"
    SH = "SH"
    SI = "SI"
    SJ = "SJ"
    SK = "SK"
    SL = "SL"
    SM = "SM"
    SN = "SN"
    SO = "SO"
    SR = "SR"
    SS = "SS"
    ST = "ST"
    SV = "SV"
    SX = "SX"
    SY = "SY"
    SZ = "SZ"
    TC = "TC"
    TD = "TD"
    TF = "TF"
    TG = "TG"
    TH = "TH"
    TJ = "TJ"
    TK = "TK"
    TL = "TL"
    TM = "TM"
    TN = "TN"
    TO = "TO"
    TR = "TR"
    TT = "TT"
    TV = "TV"
    TW = "TW"
    TZ = "TZ"
    UA = "UA"
    UG = "UG"
    UM = "UM"
    US = "US"
    UY = "UY"
    UZ = "UZ"
    VA = "VA"
    VC = "VC"
    VE = "VE"
    VG = "VG"
    VI = "VI"
    VN = "VN"
    VU = "VU"
    WF = "WF"
    WS = "WS"
    XK = "XK"
    YE = "YE"
    YT = "YT"
    ZA = "ZA"
    ZM = "ZM"
    ZW = "ZW"


class adaccounttargetingsuggestions_whitelisted_types_enum_param(str, Enum):
    """adaccounttargetingsuggestions_whitelisted_types_enum_param enum values."""

    behaviors = "behaviors"
    college_years = "college_years"
    education_majors = "education_majors"
    education_schools = "education_schools"
    education_statuses = "education_statuses"
    family_statuses = "family_statuses"
    home_value = "home_value"
    income = "income"
    industries = "industries"
    interested_in = "interested_in"
    interests = "interests"
    life_events = "life_events"
    location_categories = "location_categories"
    relationship_statuses = "relationship_statuses"
    user_adclusters = "user_adclusters"
    work_employers = "work_employers"
    work_positions = "work_positions"


class adaccountvalue_rule_set_product_type_enum_param(str, Enum):
    """adaccountvalue_rule_set_product_type_enum_param enum values."""

    AUDIENCE = "AUDIENCE"
    LEADGEN_ADS = "LEADGEN_ADS"
    OMNI_CHANNEL = "OMNI_CHANNEL"


class adaccountvalue_rule_set_status_enum_param(str, Enum):
    """adaccountvalue_rule_set_status_enum_param enum values."""

    ACTIVE = "ACTIVE"
    DELETED = "DELETED"


class adaccountvideo_ads_upload_phase_enum_param(str, Enum):
    """adaccountvideo_ads_upload_phase_enum_param enum values."""

    FINISH = "FINISH"
    START = "START"


class adaccountvideo_ads_video_state_enum_param(str, Enum):
    """adaccountvideo_ads_video_state_enum_param enum values."""

    DRAFT = "DRAFT"
    PUBLISHED = "PUBLISHED"
    SCHEDULED = "SCHEDULED"


class adasyncrequestset_notification_mode(str, Enum):
    """adasyncrequestset_notification_mode enum values."""

    OFF = "OFF"
    ON_COMPLETE = "ON_COMPLETE"


class adasyncrequestsetrequests_statuses_enum_param(str, Enum):
    """adasyncrequestsetrequests_statuses_enum_param enum values."""

    CANCELED = "CANCELED"
    CANCELED_DEPENDENCY = "CANCELED_DEPENDENCY"
    ERROR = "ERROR"
    ERROR_CONFLICTS = "ERROR_CONFLICTS"
    ERROR_DEPENDENCY = "ERROR_DEPENDENCY"
    INITIAL = "INITIAL"
    IN_PROGRESS = "IN_PROGRESS"
    PENDING_DEPENDENCY = "PENDING_DEPENDENCY"
    PROCESS_BY_AD_ASYNC_ENGINE = "PROCESS_BY_AD_ASYNC_ENGINE"
    PROCESS_BY_EVENT_PROCESSOR = "PROCESS_BY_EVENT_PROCESSOR"
    SUCCESS = "SUCCESS"
    USER_CANCELED = "USER_CANCELED"
    USER_CANCELED_DEPENDENCY = "USER_CANCELED_DEPENDENCY"


class adcampaign_bid_strategy(str, Enum):
    """adcampaign_bid_strategy enum values."""

    COST_CAP = "COST_CAP"
    LOWEST_COST_WITHOUT_CAP = "LOWEST_COST_WITHOUT_CAP"
    LOWEST_COST_WITH_BID_CAP = "LOWEST_COST_WITH_BID_CAP"
    LOWEST_COST_WITH_MIN_ROAS = "LOWEST_COST_WITH_MIN_ROAS"


class adcampaign_billing_event(str, Enum):
    """adcampaign_billing_event enum values."""

    APP_INSTALLS = "APP_INSTALLS"
    CLICKS = "CLICKS"
    IMPRESSIONS = "IMPRESSIONS"
    LINK_CLICKS = "LINK_CLICKS"
    LISTING_INTERACTION = "LISTING_INTERACTION"
    NONE = "NONE"
    OFFER_CLAIMS = "OFFER_CLAIMS"
    PAGE_LIKES = "PAGE_LIKES"
    POST_ENGAGEMENT = "POST_ENGAGEMENT"
    PURCHASE = "PURCHASE"
    THRUPLAY = "THRUPLAY"


class adcampaign_creative_sequence_repetition_pattern(str, Enum):
    """adcampaign_creative_sequence_repetition_pattern enum values."""

    FULL_SEQUENCE = "FULL_SEQUENCE"
    LAST_AD = "LAST_AD"


class adcampaign_date_preset(str, Enum):
    """adcampaign_date_preset enum values."""

    data_maximum = "data_maximum"
    last_14d = "last_14d"
    last_28d = "last_28d"
    last_30d = "last_30d"
    last_3d = "last_3d"
    last_7d = "last_7d"
    last_90d = "last_90d"
    last_month = "last_month"
    last_quarter = "last_quarter"
    last_week_mon_sun = "last_week_mon_sun"
    last_week_sun_sat = "last_week_sun_sat"
    last_year = "last_year"
    maximum = "maximum"
    this_month = "this_month"
    this_quarter = "this_quarter"
    this_week_mon_today = "this_week_mon_today"
    this_week_sun_today = "this_week_sun_today"
    this_year = "this_year"
    today = "today"
    yesterday = "yesterday"


class adcampaign_destination_type(str, Enum):
    """adcampaign_destination_type enum values."""

    APP = "APP"
    APPLINKS_AUTOMATIC = "APPLINKS_AUTOMATIC"
    FACEBOOK = "FACEBOOK"
    FACEBOOK_LIVE = "FACEBOOK_LIVE"
    FACEBOOK_PAGE = "FACEBOOK_PAGE"
    IMAGINE = "IMAGINE"
    INSTAGRAM_DIRECT = "INSTAGRAM_DIRECT"
    INSTAGRAM_LIVE = "INSTAGRAM_LIVE"
    INSTAGRAM_PROFILE = "INSTAGRAM_PROFILE"
    INSTAGRAM_PROFILE_AND_FACEBOOK_PAGE = "INSTAGRAM_PROFILE_AND_FACEBOOK_PAGE"
    MESSAGING_INSTAGRAM_DIRECT_MESSENGER = "MESSAGING_INSTAGRAM_DIRECT_MESSENGER"
    MESSAGING_INSTAGRAM_DIRECT_MESSENGER_WHATSAPP = "MESSAGING_INSTAGRAM_DIRECT_MESSENGER_WHATSAPP"
    MESSAGING_INSTAGRAM_DIRECT_WHATSAPP = "MESSAGING_INSTAGRAM_DIRECT_WHATSAPP"
    MESSAGING_MESSENGER_WHATSAPP = "MESSAGING_MESSENGER_WHATSAPP"
    MESSENGER = "MESSENGER"
    ON_AD = "ON_AD"
    ON_EVENT = "ON_EVENT"
    ON_PAGE = "ON_PAGE"
    ON_POST = "ON_POST"
    ON_VIDEO = "ON_VIDEO"
    SHOP_AUTOMATIC = "SHOP_AUTOMATIC"
    WEBSITE = "WEBSITE"
    WHATSAPP = "WHATSAPP"


class adcampaign_execution_options(str, Enum):
    """adcampaign_execution_options enum values."""

    include_recommendations = "include_recommendations"
    validate_only = "validate_only"


class adcampaign_full_funnel_exploration_mode(str, Enum):
    """adcampaign_full_funnel_exploration_mode enum values."""

    EXTENDED_EXPLORATION = "EXTENDED_EXPLORATION"
    LIMITED_EXPLORATION = "LIMITED_EXPLORATION"
    NONE_EXPLORATION = "NONE_EXPLORATION"


class adcampaign_multi_optimization_goal_weight(str, Enum):
    """adcampaign_multi_optimization_goal_weight enum values."""

    BALANCED = "BALANCED"
    PREFER_EVENT = "PREFER_EVENT"
    PREFER_INSTALL = "PREFER_INSTALL"
    UNDEFINED = "UNDEFINED"


class adcampaign_optimization_goal(str, Enum):
    """adcampaign_optimization_goal enum values."""

    ADVERTISER_SILOED_VALUE = "ADVERTISER_SILOED_VALUE"
    AD_RECALL_LIFT = "AD_RECALL_LIFT"
    APP_INSTALLS = "APP_INSTALLS"
    APP_INSTALLS_AND_OFFSITE_CONVERSIONS = "APP_INSTALLS_AND_OFFSITE_CONVERSIONS"
    CONVERSATIONS = "CONVERSATIONS"
    DERIVED_EVENTS = "DERIVED_EVENTS"
    ENGAGED_USERS = "ENGAGED_USERS"
    EVENT_RESPONSES = "EVENT_RESPONSES"
    IMPRESSIONS = "IMPRESSIONS"
    IN_APP_VALUE = "IN_APP_VALUE"
    LANDING_PAGE_VIEWS = "LANDING_PAGE_VIEWS"
    LEAD_GENERATION = "LEAD_GENERATION"
    LINK_CLICKS = "LINK_CLICKS"
    MEANINGFUL_CALL_ATTEMPT = "MEANINGFUL_CALL_ATTEMPT"
    MESSAGING_APPOINTMENT_CONVERSION = "MESSAGING_APPOINTMENT_CONVERSION"
    MESSAGING_PURCHASE_CONVERSION = "MESSAGING_PURCHASE_CONVERSION"
    NONE = "NONE"
    OFFSITE_CONVERSIONS = "OFFSITE_CONVERSIONS"
    PAGE_LIKES = "PAGE_LIKES"
    POST_ENGAGEMENT = "POST_ENGAGEMENT"
    PROFILE_AND_PAGE_ENGAGEMENT = "PROFILE_AND_PAGE_ENGAGEMENT"
    PROFILE_VISIT = "PROFILE_VISIT"
    QUALITY_CALL = "QUALITY_CALL"
    QUALITY_LEAD = "QUALITY_LEAD"
    REACH = "REACH"
    REMINDERS_SET = "REMINDERS_SET"
    SUBSCRIBERS = "SUBSCRIBERS"
    THRUPLAY = "THRUPLAY"
    VALUE = "VALUE"
    VISIT_INSTAGRAM_PROFILE = "VISIT_INSTAGRAM_PROFILE"


class adcampaign_optimization_sub_event(str, Enum):
    """adcampaign_optimization_sub_event enum values."""

    NONE = "NONE"
    TRAVEL_INTENT = "TRAVEL_INTENT"
    TRAVEL_INTENT_BUCKET_01 = "TRAVEL_INTENT_BUCKET_01"
    TRAVEL_INTENT_BUCKET_02 = "TRAVEL_INTENT_BUCKET_02"
    TRAVEL_INTENT_BUCKET_03 = "TRAVEL_INTENT_BUCKET_03"
    TRAVEL_INTENT_BUCKET_04 = "TRAVEL_INTENT_BUCKET_04"
    TRAVEL_INTENT_BUCKET_05 = "TRAVEL_INTENT_BUCKET_05"
    TRAVEL_INTENT_NO_DESTINATION_INTENT = "TRAVEL_INTENT_NO_DESTINATION_INTENT"
    TRIP_CONSIDERATION = "TRIP_CONSIDERATION"
    VIDEO_SOUND_ON = "VIDEO_SOUND_ON"


class adcampaign_regional_regulated_categories(str, Enum):
    """adcampaign_regional_regulated_categories enum values."""

    VALUE_0 = "0"
    VALUE_1 = "1"
    VALUE_2 = "2"
    VALUE_3 = "3"
    VALUE_4 = "4"
    VALUE_5 = "5"
    VALUE_6 = "6"


class adcampaign_status(str, Enum):
    """adcampaign_status enum values."""

    ACTIVE = "ACTIVE"
    ARCHIVED = "ARCHIVED"
    DELETED = "DELETED"
    PAUSED = "PAUSED"


class adcampaign_tune_for_category(str, Enum):
    """adcampaign_tune_for_category enum values."""

    CREDIT = "CREDIT"
    EMPLOYMENT = "EMPLOYMENT"
    FINANCIAL_PRODUCTS_SERVICES = "FINANCIAL_PRODUCTS_SERVICES"
    HOUSING = "HOUSING"
    ISSUES_ELECTIONS_POLITICS = "ISSUES_ELECTIONS_POLITICS"
    NONE = "NONE"
    ONLINE_GAMBLING_AND_GAMING = "ONLINE_GAMBLING_AND_GAMING"


class adcampaignactivities_category_enum_param(str, Enum):
    """adcampaignactivities_category_enum_param enum values."""

    ACCOUNT = "ACCOUNT"
    AD = "AD"
    AD_KEYWORDS = "AD_KEYWORDS"
    AD_SET = "AD_SET"
    AUDIENCE = "AUDIENCE"
    BID = "BID"
    BUDGET = "BUDGET"
    CAMPAIGN = "CAMPAIGN"
    DATE = "DATE"
    STATUS = "STATUS"
    TARGETING = "TARGETING"


class adcampaignadlabels_execution_options_enum_param(str, Enum):
    """adcampaignadlabels_execution_options_enum_param enum values."""

    validate_only = "validate_only"


class adcampaignads_date_preset_enum_param(str, Enum):
    """adcampaignads_date_preset_enum_param enum values."""

    data_maximum = "data_maximum"
    last_14d = "last_14d"
    last_28d = "last_28d"
    last_30d = "last_30d"
    last_3d = "last_3d"
    last_7d = "last_7d"
    last_90d = "last_90d"
    last_month = "last_month"
    last_quarter = "last_quarter"
    last_week_mon_sun = "last_week_mon_sun"
    last_week_sun_sat = "last_week_sun_sat"
    last_year = "last_year"
    maximum = "maximum"
    this_month = "this_month"
    this_quarter = "this_quarter"
    this_week_mon_today = "this_week_mon_today"
    this_week_sun_today = "this_week_sun_today"
    this_year = "this_year"
    today = "today"
    yesterday = "yesterday"


class adcampaignasyncadrequests_statuses_enum_param(str, Enum):
    """adcampaignasyncadrequests_statuses_enum_param enum values."""

    CANCELED = "CANCELED"
    CANCELED_DEPENDENCY = "CANCELED_DEPENDENCY"
    ERROR = "ERROR"
    ERROR_CONFLICTS = "ERROR_CONFLICTS"
    ERROR_DEPENDENCY = "ERROR_DEPENDENCY"
    INITIAL = "INITIAL"
    IN_PROGRESS = "IN_PROGRESS"
    PENDING_DEPENDENCY = "PENDING_DEPENDENCY"
    PROCESS_BY_AD_ASYNC_ENGINE = "PROCESS_BY_AD_ASYNC_ENGINE"
    PROCESS_BY_EVENT_PROCESSOR = "PROCESS_BY_EVENT_PROCESSOR"
    SUCCESS = "SUCCESS"
    USER_CANCELED = "USER_CANCELED"
    USER_CANCELED_DEPENDENCY = "USER_CANCELED_DEPENDENCY"


class adcampaignbudget_schedules_budget_value_type_enum_param(str, Enum):
    """adcampaignbudget_schedules_budget_value_type_enum_param enum values."""

    ABSOLUTE = "ABSOLUTE"
    MULTIPLIER = "MULTIPLIER"


class adcampaigncopies_date_preset_enum_param(str, Enum):
    """adcampaigncopies_date_preset_enum_param enum values."""

    data_maximum = "data_maximum"
    last_14d = "last_14d"
    last_28d = "last_28d"
    last_30d = "last_30d"
    last_3d = "last_3d"
    last_7d = "last_7d"
    last_90d = "last_90d"
    last_month = "last_month"
    last_quarter = "last_quarter"
    last_week_mon_sun = "last_week_mon_sun"
    last_week_sun_sat = "last_week_sun_sat"
    last_year = "last_year"
    maximum = "maximum"
    this_month = "this_month"
    this_quarter = "this_quarter"
    this_week_mon_today = "this_week_mon_today"
    this_week_sun_today = "this_week_sun_today"
    this_year = "this_year"
    today = "today"
    yesterday = "yesterday"


class adcampaigncopies_effective_status_enum_param(str, Enum):
    """adcampaigncopies_effective_status_enum_param enum values."""

    ACTIVE = "ACTIVE"
    ADSET_PAUSED = "ADSET_PAUSED"
    ARCHIVED = "ARCHIVED"
    CAMPAIGN_PAUSED = "CAMPAIGN_PAUSED"
    DELETED = "DELETED"
    DISAPPROVED = "DISAPPROVED"
    IN_PROCESS = "IN_PROCESS"
    PAUSED = "PAUSED"
    PENDING_BILLING_INFO = "PENDING_BILLING_INFO"
    PENDING_REVIEW = "PENDING_REVIEW"
    PREAPPROVED = "PREAPPROVED"
    WITH_ISSUES = "WITH_ISSUES"


class adcampaigncopies_status_option_enum_param(str, Enum):
    """adcampaigncopies_status_option_enum_param enum values."""

    ACTIVE = "ACTIVE"
    INHERITED_FROM_SOURCE = "INHERITED_FROM_SOURCE"
    PAUSED = "PAUSED"


class adcampaigndelivery_estimate_optimization_goal_enum_param(str, Enum):
    """adcampaigndelivery_estimate_optimization_goal_enum_param enum values."""

    ADVERTISER_SILOED_VALUE = "ADVERTISER_SILOED_VALUE"
    AD_RECALL_LIFT = "AD_RECALL_LIFT"
    APP_INSTALLS = "APP_INSTALLS"
    APP_INSTALLS_AND_OFFSITE_CONVERSIONS = "APP_INSTALLS_AND_OFFSITE_CONVERSIONS"
    CONVERSATIONS = "CONVERSATIONS"
    DERIVED_EVENTS = "DERIVED_EVENTS"
    ENGAGED_USERS = "ENGAGED_USERS"
    EVENT_RESPONSES = "EVENT_RESPONSES"
    IMPRESSIONS = "IMPRESSIONS"
    IN_APP_VALUE = "IN_APP_VALUE"
    LANDING_PAGE_VIEWS = "LANDING_PAGE_VIEWS"
    LEAD_GENERATION = "LEAD_GENERATION"
    LINK_CLICKS = "LINK_CLICKS"
    MEANINGFUL_CALL_ATTEMPT = "MEANINGFUL_CALL_ATTEMPT"
    MESSAGING_APPOINTMENT_CONVERSION = "MESSAGING_APPOINTMENT_CONVERSION"
    MESSAGING_PURCHASE_CONVERSION = "MESSAGING_PURCHASE_CONVERSION"
    NONE = "NONE"
    OFFSITE_CONVERSIONS = "OFFSITE_CONVERSIONS"
    PAGE_LIKES = "PAGE_LIKES"
    POST_ENGAGEMENT = "POST_ENGAGEMENT"
    PROFILE_AND_PAGE_ENGAGEMENT = "PROFILE_AND_PAGE_ENGAGEMENT"
    PROFILE_VISIT = "PROFILE_VISIT"
    QUALITY_CALL = "QUALITY_CALL"
    QUALITY_LEAD = "QUALITY_LEAD"
    REACH = "REACH"
    REMINDERS_SET = "REMINDERS_SET"
    SUBSCRIBERS = "SUBSCRIBERS"
    THRUPLAY = "THRUPLAY"
    VALUE = "VALUE"
    VISIT_INSTAGRAM_PROFILE = "VISIT_INSTAGRAM_PROFILE"


class adcampaigngroup_bid_strategy(str, Enum):
    """adcampaigngroup_bid_strategy enum values."""

    COST_CAP = "COST_CAP"
    LOWEST_COST_WITHOUT_CAP = "LOWEST_COST_WITHOUT_CAP"
    LOWEST_COST_WITH_BID_CAP = "LOWEST_COST_WITH_BID_CAP"
    LOWEST_COST_WITH_MIN_ROAS = "LOWEST_COST_WITH_MIN_ROAS"


class adcampaigngroup_date_preset(str, Enum):
    """adcampaigngroup_date_preset enum values."""

    data_maximum = "data_maximum"
    last_14d = "last_14d"
    last_28d = "last_28d"
    last_30d = "last_30d"
    last_3d = "last_3d"
    last_7d = "last_7d"
    last_90d = "last_90d"
    last_month = "last_month"
    last_quarter = "last_quarter"
    last_week_mon_sun = "last_week_mon_sun"
    last_week_sun_sat = "last_week_sun_sat"
    last_year = "last_year"
    maximum = "maximum"
    this_month = "this_month"
    this_quarter = "this_quarter"
    this_week_mon_today = "this_week_mon_today"
    this_week_sun_today = "this_week_sun_today"
    this_year = "this_year"
    today = "today"
    yesterday = "yesterday"


class adcampaigngroup_execution_options(str, Enum):
    """adcampaigngroup_execution_options enum values."""

    include_recommendations = "include_recommendations"
    validate_only = "validate_only"


class adcampaigngroup_objective(str, Enum):
    """adcampaigngroup_objective enum values."""

    APP_INSTALLS = "APP_INSTALLS"
    BRAND_AWARENESS = "BRAND_AWARENESS"
    CONVERSIONS = "CONVERSIONS"
    EVENT_RESPONSES = "EVENT_RESPONSES"
    LEAD_GENERATION = "LEAD_GENERATION"
    LINK_CLICKS = "LINK_CLICKS"
    LOCAL_AWARENESS = "LOCAL_AWARENESS"
    MESSAGES = "MESSAGES"
    OFFER_CLAIMS = "OFFER_CLAIMS"
    OUTCOME_APP_PROMOTION = "OUTCOME_APP_PROMOTION"
    OUTCOME_AWARENESS = "OUTCOME_AWARENESS"
    OUTCOME_ENGAGEMENT = "OUTCOME_ENGAGEMENT"
    OUTCOME_LEADS = "OUTCOME_LEADS"
    OUTCOME_SALES = "OUTCOME_SALES"
    OUTCOME_TRAFFIC = "OUTCOME_TRAFFIC"
    PAGE_LIKES = "PAGE_LIKES"
    POST_ENGAGEMENT = "POST_ENGAGEMENT"
    PRODUCT_CATALOG_SALES = "PRODUCT_CATALOG_SALES"
    REACH = "REACH"
    STORE_VISITS = "STORE_VISITS"
    VIDEO_VIEWS = "VIDEO_VIEWS"


class adcampaigngroup_smart_promotion_type(str, Enum):
    """adcampaigngroup_smart_promotion_type enum values."""

    GUIDED_CREATION = "GUIDED_CREATION"
    SMART_APP_PROMOTION = "SMART_APP_PROMOTION"


class adcampaigngroup_special_ad_categories(str, Enum):
    """adcampaigngroup_special_ad_categories enum values."""

    CREDIT = "CREDIT"
    EMPLOYMENT = "EMPLOYMENT"
    FINANCIAL_PRODUCTS_SERVICES = "FINANCIAL_PRODUCTS_SERVICES"
    HOUSING = "HOUSING"
    ISSUES_ELECTIONS_POLITICS = "ISSUES_ELECTIONS_POLITICS"
    NONE = "NONE"
    ONLINE_GAMBLING_AND_GAMING = "ONLINE_GAMBLING_AND_GAMING"


class adcampaigngroup_special_ad_category(str, Enum):
    """adcampaigngroup_special_ad_category enum values."""

    CREDIT = "CREDIT"
    EMPLOYMENT = "EMPLOYMENT"
    FINANCIAL_PRODUCTS_SERVICES = "FINANCIAL_PRODUCTS_SERVICES"
    HOUSING = "HOUSING"
    ISSUES_ELECTIONS_POLITICS = "ISSUES_ELECTIONS_POLITICS"
    NONE = "NONE"
    ONLINE_GAMBLING_AND_GAMING = "ONLINE_GAMBLING_AND_GAMING"


class adcampaigngroup_special_ad_category_country(str, Enum):
    """adcampaigngroup_special_ad_category_country enum values."""

    AD = "AD"
    AE = "AE"
    AF = "AF"
    AG = "AG"
    AI = "AI"
    AL = "AL"
    AM = "AM"
    AN = "AN"
    AO = "AO"
    AQ = "AQ"
    AR = "AR"
    AS = "AS"
    AT = "AT"
    AU = "AU"
    AW = "AW"
    AX = "AX"
    AZ = "AZ"
    BA = "BA"
    BB = "BB"
    BD = "BD"
    BE = "BE"
    BF = "BF"
    BG = "BG"
    BH = "BH"
    BI = "BI"
    BJ = "BJ"
    BL = "BL"
    BM = "BM"
    BN = "BN"
    BO = "BO"
    BQ = "BQ"
    BR = "BR"
    BS = "BS"
    BT = "BT"
    BV = "BV"
    BW = "BW"
    BY = "BY"
    BZ = "BZ"
    CA = "CA"
    CC = "CC"
    CD = "CD"
    CF = "CF"
    CG = "CG"
    CH = "CH"
    CI = "CI"
    CK = "CK"
    CL = "CL"
    CM = "CM"
    CN = "CN"
    CO = "CO"
    CR = "CR"
    CU = "CU"
    CV = "CV"
    CW = "CW"
    CX = "CX"
    CY = "CY"
    CZ = "CZ"
    DE = "DE"
    DJ = "DJ"
    DK = "DK"
    DM = "DM"
    DO = "DO"
    DZ = "DZ"
    EC = "EC"
    EE = "EE"
    EG = "EG"
    EH = "EH"
    ER = "ER"
    ES = "ES"
    ET = "ET"
    FI = "FI"
    FJ = "FJ"
    FK = "FK"
    FM = "FM"
    FO = "FO"
    FR = "FR"
    GA = "GA"
    GB = "GB"
    GD = "GD"
    GE = "GE"
    GF = "GF"
    GG = "GG"
    GH = "GH"
    GI = "GI"
    GL = "GL"
    GM = "GM"
    GN = "GN"
    GP = "GP"
    GQ = "GQ"
    GR = "GR"
    GS = "GS"
    GT = "GT"
    GU = "GU"
    GW = "GW"
    GY = "GY"
    HK = "HK"
    HM = "HM"
    HN = "HN"
    HR = "HR"
    HT = "HT"
    HU = "HU"
    ID = "ID"
    IE = "IE"
    IL = "IL"
    IM = "IM"
    IN = "IN"
    IO = "IO"
    IQ = "IQ"
    IR = "IR"
    IS = "IS"
    IT = "IT"
    JE = "JE"
    JM = "JM"
    JO = "JO"
    JP = "JP"
    KE = "KE"
    KG = "KG"
    KH = "KH"
    KI = "KI"
    KM = "KM"
    KN = "KN"
    KP = "KP"
    KR = "KR"
    KW = "KW"
    KY = "KY"
    KZ = "KZ"
    LA = "LA"
    LB = "LB"
    LC = "LC"
    LI = "LI"
    LK = "LK"
    LR = "LR"
    LS = "LS"
    LT = "LT"
    LU = "LU"
    LV = "LV"
    LY = "LY"
    MA = "MA"
    MC = "MC"
    MD = "MD"
    ME = "ME"
    MF = "MF"
    MG = "MG"
    MH = "MH"
    MK = "MK"
    ML = "ML"
    MM = "MM"
    MN = "MN"
    MO = "MO"
    MP = "MP"
    MQ = "MQ"
    MR = "MR"
    MS = "MS"
    MT = "MT"
    MU = "MU"
    MV = "MV"
    MW = "MW"
    MX = "MX"
    MY = "MY"
    MZ = "MZ"
    NA = "NA"
    NC = "NC"
    NE = "NE"
    NF = "NF"
    NG = "NG"
    NI = "NI"
    NL = "NL"
    NO = "NO"
    NP = "NP"
    NR = "NR"
    NU = "NU"
    NZ = "NZ"
    OM = "OM"
    PA = "PA"
    PE = "PE"
    PF = "PF"
    PG = "PG"
    PH = "PH"
    PK = "PK"
    PL = "PL"
    PM = "PM"
    PN = "PN"
    PR = "PR"
    PS = "PS"
    PT = "PT"
    PW = "PW"
    PY = "PY"
    QA = "QA"
    RE = "RE"
    RO = "RO"
    RS = "RS"
    RU = "RU"
    RW = "RW"
    SA = "SA"
    SB = "SB"
    SC = "SC"
    SD = "SD"
    SE = "SE"
    SG = "SG"
    SH = "SH"
    SI = "SI"
    SJ = "SJ"
    SK = "SK"
    SL = "SL"
    SM = "SM"
    SN = "SN"
    SO = "SO"
    SR = "SR"
    SS = "SS"
    ST = "ST"
    SV = "SV"
    SX = "SX"
    SY = "SY"
    SZ = "SZ"
    TC = "TC"
    TD = "TD"
    TF = "TF"
    TG = "TG"
    TH = "TH"
    TJ = "TJ"
    TK = "TK"
    TL = "TL"
    TM = "TM"
    TN = "TN"
    TO = "TO"
    TR = "TR"
    TT = "TT"
    TV = "TV"
    TW = "TW"
    TZ = "TZ"
    UA = "UA"
    UG = "UG"
    UM = "UM"
    US = "US"
    UY = "UY"
    UZ = "UZ"
    VA = "VA"
    VC = "VC"
    VE = "VE"
    VG = "VG"
    VI = "VI"
    VN = "VN"
    VU = "VU"
    WF = "WF"
    WS = "WS"
    XK = "XK"
    YE = "YE"
    YT = "YT"
    ZA = "ZA"
    ZM = "ZM"
    ZW = "ZW"


class adcampaigngroup_status(str, Enum):
    """adcampaigngroup_status enum values."""

    ACTIVE = "ACTIVE"
    ARCHIVED = "ARCHIVED"
    DELETED = "DELETED"
    PAUSED = "PAUSED"


class adcampaigngroupadlabels_execution_options_enum_param(str, Enum):
    """adcampaigngroupadlabels_execution_options_enum_param enum values."""

    validate_only = "validate_only"


class adcampaigngroupads_date_preset_enum_param(str, Enum):
    """adcampaigngroupads_date_preset_enum_param enum values."""

    data_maximum = "data_maximum"
    last_14d = "last_14d"
    last_28d = "last_28d"
    last_30d = "last_30d"
    last_3d = "last_3d"
    last_7d = "last_7d"
    last_90d = "last_90d"
    last_month = "last_month"
    last_quarter = "last_quarter"
    last_week_mon_sun = "last_week_mon_sun"
    last_week_sun_sat = "last_week_sun_sat"
    last_year = "last_year"
    maximum = "maximum"
    this_month = "this_month"
    this_quarter = "this_quarter"
    this_week_mon_today = "this_week_mon_today"
    this_week_sun_today = "this_week_sun_today"
    this_year = "this_year"
    today = "today"
    yesterday = "yesterday"


class adcampaigngroupadsets_date_preset_enum_param(str, Enum):
    """adcampaigngroupadsets_date_preset_enum_param enum values."""

    data_maximum = "data_maximum"
    last_14d = "last_14d"
    last_28d = "last_28d"
    last_30d = "last_30d"
    last_3d = "last_3d"
    last_7d = "last_7d"
    last_90d = "last_90d"
    last_month = "last_month"
    last_quarter = "last_quarter"
    last_week_mon_sun = "last_week_mon_sun"
    last_week_sun_sat = "last_week_sun_sat"
    last_year = "last_year"
    maximum = "maximum"
    this_month = "this_month"
    this_quarter = "this_quarter"
    this_week_mon_today = "this_week_mon_today"
    this_week_sun_today = "this_week_sun_today"
    this_year = "this_year"
    today = "today"
    yesterday = "yesterday"


class adcampaigngroupadsets_effective_status_enum_param(str, Enum):
    """adcampaigngroupadsets_effective_status_enum_param enum values."""

    ACTIVE = "ACTIVE"
    ADSET_PAUSED = "ADSET_PAUSED"
    ARCHIVED = "ARCHIVED"
    CAMPAIGN_PAUSED = "CAMPAIGN_PAUSED"
    DELETED = "DELETED"
    DISAPPROVED = "DISAPPROVED"
    IN_PROCESS = "IN_PROCESS"
    PAUSED = "PAUSED"
    PENDING_BILLING_INFO = "PENDING_BILLING_INFO"
    PENDING_REVIEW = "PENDING_REVIEW"
    PREAPPROVED = "PREAPPROVED"
    WITH_ISSUES = "WITH_ISSUES"


class adcampaigngroupbudget_schedules_budget_value_type_enum_param(str, Enum):
    """adcampaigngroupbudget_schedules_budget_value_type_enum_param enum values."""

    ABSOLUTE = "ABSOLUTE"
    MULTIPLIER = "MULTIPLIER"


class adcampaigngroupcopies_date_preset_enum_param(str, Enum):
    """adcampaigngroupcopies_date_preset_enum_param enum values."""

    data_maximum = "data_maximum"
    last_14d = "last_14d"
    last_28d = "last_28d"
    last_30d = "last_30d"
    last_3d = "last_3d"
    last_7d = "last_7d"
    last_90d = "last_90d"
    last_month = "last_month"
    last_quarter = "last_quarter"
    last_week_mon_sun = "last_week_mon_sun"
    last_week_sun_sat = "last_week_sun_sat"
    last_year = "last_year"
    maximum = "maximum"
    this_month = "this_month"
    this_quarter = "this_quarter"
    this_week_mon_today = "this_week_mon_today"
    this_week_sun_today = "this_week_sun_today"
    this_year = "this_year"
    today = "today"
    yesterday = "yesterday"


class adcampaigngroupcopies_effective_status_enum_param(str, Enum):
    """adcampaigngroupcopies_effective_status_enum_param enum values."""

    ACTIVE = "ACTIVE"
    ADSET_PAUSED = "ADSET_PAUSED"
    ARCHIVED = "ARCHIVED"
    CAMPAIGN_PAUSED = "CAMPAIGN_PAUSED"
    DELETED = "DELETED"
    DISAPPROVED = "DISAPPROVED"
    IN_PROCESS = "IN_PROCESS"
    PAUSED = "PAUSED"
    PENDING_BILLING_INFO = "PENDING_BILLING_INFO"
    PENDING_REVIEW = "PENDING_REVIEW"
    PREAPPROVED = "PREAPPROVED"
    WITH_ISSUES = "WITH_ISSUES"


class adcampaigngroupcopies_status_option_enum_param(str, Enum):
    """adcampaigngroupcopies_status_option_enum_param enum values."""

    ACTIVE = "ACTIVE"
    INHERITED_FROM_SOURCE = "INHERITED_FROM_SOURCE"
    PAUSED = "PAUSED"


class adcampaigngroupinsights_action_attribution_windows_enum_param(str, Enum):
    """adcampaigngroupinsights_action_attribution_windows_enum_param enum values."""

    VALUE_1D_CLICK = "1d_click"
    VALUE_1D_EV = "1d_ev"
    VALUE_1D_VIEW = "1d_view"
    VALUE_28D_CLICK = "28d_click"
    VALUE_28D_VIEW = "28d_view"
    VALUE_28D_VIEW_ALL_CONVERSIONS = "28d_view_all_conversions"
    VALUE_28D_VIEW_FIRST_CONVERSION = "28d_view_first_conversion"
    VALUE_7D_CLICK = "7d_click"
    VALUE_7D_VIEW = "7d_view"
    VALUE_7D_VIEW_ALL_CONVERSIONS = "7d_view_all_conversions"
    VALUE_7D_VIEW_FIRST_CONVERSION = "7d_view_first_conversion"
    dda = "dda"
    default = "default"
    skan_click = "skan_click"
    skan_click_second_postback = "skan_click_second_postback"
    skan_click_third_postback = "skan_click_third_postback"
    skan_view = "skan_view"
    skan_view_second_postback = "skan_view_second_postback"
    skan_view_third_postback = "skan_view_third_postback"


class adcampaigngroupinsights_action_breakdowns_enum_param(str, Enum):
    """adcampaigngroupinsights_action_breakdowns_enum_param enum values."""

    action_canvas_component_name = "action_canvas_component_name"
    action_carousel_card_id = "action_carousel_card_id"
    action_carousel_card_name = "action_carousel_card_name"
    action_destination = "action_destination"
    action_device = "action_device"
    action_reaction = "action_reaction"
    action_target_id = "action_target_id"
    action_type = "action_type"
    action_video_sound = "action_video_sound"
    action_video_type = "action_video_type"
    conversion_destination = "conversion_destination"
    matched_persona_id = "matched_persona_id"
    matched_persona_name = "matched_persona_name"
    signal_source_bucket = "signal_source_bucket"
    standard_event_content_type = "standard_event_content_type"


class adcampaigngroupinsights_action_report_time_enum_param(str, Enum):
    """adcampaigngroupinsights_action_report_time_enum_param enum values."""

    conversion = "conversion"
    impression = "impression"
    lifetime = "lifetime"
    mixed = "mixed"


class adcampaigngroupinsights_breakdowns_enum_param(str, Enum):
    """adcampaigngroupinsights_breakdowns_enum_param enum values."""

    ad_extension_domain = "ad_extension_domain"
    ad_extension_url = "ad_extension_url"
    ad_format_asset = "ad_format_asset"
    age = "age"
    app_id = "app_id"
    body_asset = "body_asset"
    breakdown_ad_objective = "breakdown_ad_objective"
    breakdown_reporting_ad_id = "breakdown_reporting_ad_id"
    call_to_action_asset = "call_to_action_asset"
    coarse_conversion_value = "coarse_conversion_value"
    comscore_market = "comscore_market"
    comscore_market_code = "comscore_market_code"
    conversion_destination = "conversion_destination"
    country = "country"
    creative_relaxation_asset_type = "creative_relaxation_asset_type"
    description_asset = "description_asset"
    device_platform = "device_platform"
    dma = "dma"
    fidelity_type = "fidelity_type"
    flexible_format_asset_type = "flexible_format_asset_type"
    frequency_value = "frequency_value"
    gen_ai_asset_type = "gen_ai_asset_type"
    gender = "gender"
    hourly_stats_aggregated_by_advertiser_time_zone = (
        "hourly_stats_aggregated_by_advertiser_time_zone"
    )
    hourly_stats_aggregated_by_audience_time_zone = "hourly_stats_aggregated_by_audience_time_zone"
    hsid = "hsid"
    image_asset = "image_asset"
    impression_device = "impression_device"
    impression_view_time_advertiser_hour_v2 = "impression_view_time_advertiser_hour_v2"
    is_auto_advance = "is_auto_advance"
    is_conversion_id_modeled = "is_conversion_id_modeled"
    is_rendered_as_delayed_skip_ad = "is_rendered_as_delayed_skip_ad"
    landing_destination = "landing_destination"
    link_url_asset = "link_url_asset"
    marketing_messages_btn_name = "marketing_messages_btn_name"
    mdsa_landing_destination = "mdsa_landing_destination"
    media_asset_url = "media_asset_url"
    media_creator = "media_creator"
    media_destination_url = "media_destination_url"
    media_format = "media_format"
    media_origin_url = "media_origin_url"
    media_text_content = "media_text_content"
    media_type = "media_type"
    mmm = "mmm"
    place_page_id = "place_page_id"
    platform_position = "platform_position"
    postback_sequence_index = "postback_sequence_index"
    product_id = "product_id"
    publisher_platform = "publisher_platform"
    redownload = "redownload"
    region = "region"
    signal_source_bucket = "signal_source_bucket"
    skan_campaign_id = "skan_campaign_id"
    skan_conversion_id = "skan_conversion_id"
    skan_version = "skan_version"
    sot_attribution_model_type = "sot_attribution_model_type"
    sot_attribution_window = "sot_attribution_window"
    sot_channel = "sot_channel"
    sot_event_type = "sot_event_type"
    sot_source = "sot_source"
    standard_event_content_type = "standard_event_content_type"
    title_asset = "title_asset"
    user_persona_id = "user_persona_id"
    user_persona_name = "user_persona_name"
    video_asset = "video_asset"


class adcampaigngroupinsights_date_preset_enum_param(str, Enum):
    """adcampaigngroupinsights_date_preset_enum_param enum values."""

    data_maximum = "data_maximum"
    last_14d = "last_14d"
    last_28d = "last_28d"
    last_30d = "last_30d"
    last_3d = "last_3d"
    last_7d = "last_7d"
    last_90d = "last_90d"
    last_month = "last_month"
    last_quarter = "last_quarter"
    last_week_mon_sun = "last_week_mon_sun"
    last_week_sun_sat = "last_week_sun_sat"
    last_year = "last_year"
    maximum = "maximum"
    this_month = "this_month"
    this_quarter = "this_quarter"
    this_week_mon_today = "this_week_mon_today"
    this_week_sun_today = "this_week_sun_today"
    this_year = "this_year"
    today = "today"
    yesterday = "yesterday"


class adcampaigngroupinsights_level_enum_param(str, Enum):
    """adcampaigngroupinsights_level_enum_param enum values."""

    account = "account"
    ad = "ad"
    adset = "adset"
    campaign = "campaign"


class adcampaigngroupinsights_summary_action_breakdowns_enum_param(str, Enum):
    """adcampaigngroupinsights_summary_action_breakdowns_enum_param enum values."""

    action_canvas_component_name = "action_canvas_component_name"
    action_carousel_card_id = "action_carousel_card_id"
    action_carousel_card_name = "action_carousel_card_name"
    action_destination = "action_destination"
    action_device = "action_device"
    action_reaction = "action_reaction"
    action_target_id = "action_target_id"
    action_type = "action_type"
    action_video_sound = "action_video_sound"
    action_video_type = "action_video_type"
    conversion_destination = "conversion_destination"
    matched_persona_id = "matched_persona_id"
    matched_persona_name = "matched_persona_name"
    signal_source_bucket = "signal_source_bucket"
    standard_event_content_type = "standard_event_content_type"


class adcampaigninsights_action_attribution_windows_enum_param(str, Enum):
    """adcampaigninsights_action_attribution_windows_enum_param enum values."""

    VALUE_1D_CLICK = "1d_click"
    VALUE_1D_EV = "1d_ev"
    VALUE_1D_VIEW = "1d_view"
    VALUE_28D_CLICK = "28d_click"
    VALUE_28D_VIEW = "28d_view"
    VALUE_28D_VIEW_ALL_CONVERSIONS = "28d_view_all_conversions"
    VALUE_28D_VIEW_FIRST_CONVERSION = "28d_view_first_conversion"
    VALUE_7D_CLICK = "7d_click"
    VALUE_7D_VIEW = "7d_view"
    VALUE_7D_VIEW_ALL_CONVERSIONS = "7d_view_all_conversions"
    VALUE_7D_VIEW_FIRST_CONVERSION = "7d_view_first_conversion"
    dda = "dda"
    default = "default"
    skan_click = "skan_click"
    skan_click_second_postback = "skan_click_second_postback"
    skan_click_third_postback = "skan_click_third_postback"
    skan_view = "skan_view"
    skan_view_second_postback = "skan_view_second_postback"
    skan_view_third_postback = "skan_view_third_postback"


class adcampaigninsights_action_breakdowns_enum_param(str, Enum):
    """adcampaigninsights_action_breakdowns_enum_param enum values."""

    action_canvas_component_name = "action_canvas_component_name"
    action_carousel_card_id = "action_carousel_card_id"
    action_carousel_card_name = "action_carousel_card_name"
    action_destination = "action_destination"
    action_device = "action_device"
    action_reaction = "action_reaction"
    action_target_id = "action_target_id"
    action_type = "action_type"
    action_video_sound = "action_video_sound"
    action_video_type = "action_video_type"
    conversion_destination = "conversion_destination"
    matched_persona_id = "matched_persona_id"
    matched_persona_name = "matched_persona_name"
    signal_source_bucket = "signal_source_bucket"
    standard_event_content_type = "standard_event_content_type"


class adcampaigninsights_action_report_time_enum_param(str, Enum):
    """adcampaigninsights_action_report_time_enum_param enum values."""

    conversion = "conversion"
    impression = "impression"
    lifetime = "lifetime"
    mixed = "mixed"


class adcampaigninsights_breakdowns_enum_param(str, Enum):
    """adcampaigninsights_breakdowns_enum_param enum values."""

    ad_extension_domain = "ad_extension_domain"
    ad_extension_url = "ad_extension_url"
    ad_format_asset = "ad_format_asset"
    age = "age"
    app_id = "app_id"
    body_asset = "body_asset"
    breakdown_ad_objective = "breakdown_ad_objective"
    breakdown_reporting_ad_id = "breakdown_reporting_ad_id"
    call_to_action_asset = "call_to_action_asset"
    coarse_conversion_value = "coarse_conversion_value"
    comscore_market = "comscore_market"
    comscore_market_code = "comscore_market_code"
    conversion_destination = "conversion_destination"
    country = "country"
    creative_relaxation_asset_type = "creative_relaxation_asset_type"
    description_asset = "description_asset"
    device_platform = "device_platform"
    dma = "dma"
    fidelity_type = "fidelity_type"
    flexible_format_asset_type = "flexible_format_asset_type"
    frequency_value = "frequency_value"
    gen_ai_asset_type = "gen_ai_asset_type"
    gender = "gender"
    hourly_stats_aggregated_by_advertiser_time_zone = (
        "hourly_stats_aggregated_by_advertiser_time_zone"
    )
    hourly_stats_aggregated_by_audience_time_zone = "hourly_stats_aggregated_by_audience_time_zone"
    hsid = "hsid"
    image_asset = "image_asset"
    impression_device = "impression_device"
    impression_view_time_advertiser_hour_v2 = "impression_view_time_advertiser_hour_v2"
    is_auto_advance = "is_auto_advance"
    is_conversion_id_modeled = "is_conversion_id_modeled"
    is_rendered_as_delayed_skip_ad = "is_rendered_as_delayed_skip_ad"
    landing_destination = "landing_destination"
    link_url_asset = "link_url_asset"
    marketing_messages_btn_name = "marketing_messages_btn_name"
    mdsa_landing_destination = "mdsa_landing_destination"
    media_asset_url = "media_asset_url"
    media_creator = "media_creator"
    media_destination_url = "media_destination_url"
    media_format = "media_format"
    media_origin_url = "media_origin_url"
    media_text_content = "media_text_content"
    media_type = "media_type"
    mmm = "mmm"
    place_page_id = "place_page_id"
    platform_position = "platform_position"
    postback_sequence_index = "postback_sequence_index"
    product_id = "product_id"
    publisher_platform = "publisher_platform"
    redownload = "redownload"
    region = "region"
    signal_source_bucket = "signal_source_bucket"
    skan_campaign_id = "skan_campaign_id"
    skan_conversion_id = "skan_conversion_id"
    skan_version = "skan_version"
    sot_attribution_model_type = "sot_attribution_model_type"
    sot_attribution_window = "sot_attribution_window"
    sot_channel = "sot_channel"
    sot_event_type = "sot_event_type"
    sot_source = "sot_source"
    standard_event_content_type = "standard_event_content_type"
    title_asset = "title_asset"
    user_persona_id = "user_persona_id"
    user_persona_name = "user_persona_name"
    video_asset = "video_asset"


class adcampaigninsights_date_preset_enum_param(str, Enum):
    """adcampaigninsights_date_preset_enum_param enum values."""

    data_maximum = "data_maximum"
    last_14d = "last_14d"
    last_28d = "last_28d"
    last_30d = "last_30d"
    last_3d = "last_3d"
    last_7d = "last_7d"
    last_90d = "last_90d"
    last_month = "last_month"
    last_quarter = "last_quarter"
    last_week_mon_sun = "last_week_mon_sun"
    last_week_sun_sat = "last_week_sun_sat"
    last_year = "last_year"
    maximum = "maximum"
    this_month = "this_month"
    this_quarter = "this_quarter"
    this_week_mon_today = "this_week_mon_today"
    this_week_sun_today = "this_week_sun_today"
    this_year = "this_year"
    today = "today"
    yesterday = "yesterday"


class adcampaigninsights_level_enum_param(str, Enum):
    """adcampaigninsights_level_enum_param enum values."""

    account = "account"
    ad = "ad"
    adset = "adset"
    campaign = "campaign"


class adcampaigninsights_summary_action_breakdowns_enum_param(str, Enum):
    """adcampaigninsights_summary_action_breakdowns_enum_param enum values."""

    action_canvas_component_name = "action_canvas_component_name"
    action_carousel_card_id = "action_carousel_card_id"
    action_carousel_card_name = "action_carousel_card_name"
    action_destination = "action_destination"
    action_device = "action_device"
    action_reaction = "action_reaction"
    action_target_id = "action_target_id"
    action_type = "action_type"
    action_video_sound = "action_video_sound"
    action_video_type = "action_video_type"
    conversion_destination = "conversion_destination"
    matched_persona_id = "matched_persona_id"
    matched_persona_name = "matched_persona_name"
    signal_source_bucket = "signal_source_bucket"
    standard_event_content_type = "standard_event_content_type"


class adcampaignmessage_delivery_estimate_optimization_goal_enum_param(str, Enum):
    """adcampaignmessage_delivery_estimate_optimization_goal_enum_param enum values."""

    ADVERTISER_SILOED_VALUE = "ADVERTISER_SILOED_VALUE"
    AD_RECALL_LIFT = "AD_RECALL_LIFT"
    APP_INSTALLS = "APP_INSTALLS"
    APP_INSTALLS_AND_OFFSITE_CONVERSIONS = "APP_INSTALLS_AND_OFFSITE_CONVERSIONS"
    CONVERSATIONS = "CONVERSATIONS"
    DERIVED_EVENTS = "DERIVED_EVENTS"
    ENGAGED_USERS = "ENGAGED_USERS"
    EVENT_RESPONSES = "EVENT_RESPONSES"
    IMPRESSIONS = "IMPRESSIONS"
    IN_APP_VALUE = "IN_APP_VALUE"
    LANDING_PAGE_VIEWS = "LANDING_PAGE_VIEWS"
    LEAD_GENERATION = "LEAD_GENERATION"
    LINK_CLICKS = "LINK_CLICKS"
    MEANINGFUL_CALL_ATTEMPT = "MEANINGFUL_CALL_ATTEMPT"
    MESSAGING_APPOINTMENT_CONVERSION = "MESSAGING_APPOINTMENT_CONVERSION"
    MESSAGING_PURCHASE_CONVERSION = "MESSAGING_PURCHASE_CONVERSION"
    NONE = "NONE"
    OFFSITE_CONVERSIONS = "OFFSITE_CONVERSIONS"
    PAGE_LIKES = "PAGE_LIKES"
    POST_ENGAGEMENT = "POST_ENGAGEMENT"
    PROFILE_AND_PAGE_ENGAGEMENT = "PROFILE_AND_PAGE_ENGAGEMENT"
    PROFILE_VISIT = "PROFILE_VISIT"
    QUALITY_CALL = "QUALITY_CALL"
    QUALITY_LEAD = "QUALITY_LEAD"
    REACH = "REACH"
    REMINDERS_SET = "REMINDERS_SET"
    SUBSCRIBERS = "SUBSCRIBERS"
    THRUPLAY = "THRUPLAY"
    VALUE = "VALUE"
    VISIT_INSTAGRAM_PROFILE = "VISIT_INSTAGRAM_PROFILE"


class adcampaignmessage_delivery_estimate_pacing_type_enum_param(str, Enum):
    """adcampaignmessage_delivery_estimate_pacing_type_enum_param enum values."""

    DAY_PARTING = "DAY_PARTING"
    DISABLED = "DISABLED"
    NO_PACING = "NO_PACING"
    PROBABILISTIC_PACING = "PROBABILISTIC_PACING"
    PROBABILISTIC_PACING_V2 = "PROBABILISTIC_PACING_V2"
    STANDARD = "STANDARD"


class adcreative_status(str, Enum):
    """adcreative_status enum values."""

    ACTIVE = "ACTIVE"
    DELETED = "DELETED"
    IN_PROCESS = "IN_PROCESS"
    WITH_ISSUES = "WITH_ISSUES"


class adcreativepreviews_ad_format_enum_param(str, Enum):
    """adcreativepreviews_ad_format_enum_param enum values."""

    AUDIENCE_NETWORK_INSTREAM_VIDEO = "AUDIENCE_NETWORK_INSTREAM_VIDEO"
    AUDIENCE_NETWORK_INSTREAM_VIDEO_MOBILE = "AUDIENCE_NETWORK_INSTREAM_VIDEO_MOBILE"
    AUDIENCE_NETWORK_OUTSTREAM_VIDEO = "AUDIENCE_NETWORK_OUTSTREAM_VIDEO"
    AUDIENCE_NETWORK_REWARDED_VIDEO = "AUDIENCE_NETWORK_REWARDED_VIDEO"
    BIZ_DISCO_FEED_MOBILE = "BIZ_DISCO_FEED_MOBILE"
    DESKTOP_FEED_STANDARD = "DESKTOP_FEED_STANDARD"
    FACEBOOK_PROFILE_FEED_DESKTOP = "FACEBOOK_PROFILE_FEED_DESKTOP"
    FACEBOOK_PROFILE_FEED_MOBILE = "FACEBOOK_PROFILE_FEED_MOBILE"
    FACEBOOK_PROFILE_REELS_MOBILE = "FACEBOOK_PROFILE_REELS_MOBILE"
    FACEBOOK_REELS_BANNER = "FACEBOOK_REELS_BANNER"
    FACEBOOK_REELS_BANNER_DESKTOP = "FACEBOOK_REELS_BANNER_DESKTOP"
    FACEBOOK_REELS_BANNER_FULLSCREEN_IOS = "FACEBOOK_REELS_BANNER_FULLSCREEN_IOS"
    FACEBOOK_REELS_BANNER_FULLSCREEN_MOBILE = "FACEBOOK_REELS_BANNER_FULLSCREEN_MOBILE"
    FACEBOOK_REELS_MOBILE = "FACEBOOK_REELS_MOBILE"
    FACEBOOK_REELS_POSTLOOP = "FACEBOOK_REELS_POSTLOOP"
    FACEBOOK_REELS_STICKER = "FACEBOOK_REELS_STICKER"
    FACEBOOK_STORY_MOBILE = "FACEBOOK_STORY_MOBILE"
    FACEBOOK_STORY_STICKER_MOBILE = "FACEBOOK_STORY_STICKER_MOBILE"
    INSTAGRAM_EXPLORE_CONTEXTUAL = "INSTAGRAM_EXPLORE_CONTEXTUAL"
    INSTAGRAM_EXPLORE_GRID_HOME = "INSTAGRAM_EXPLORE_GRID_HOME"
    INSTAGRAM_EXPLORE_IMMERSIVE = "INSTAGRAM_EXPLORE_IMMERSIVE"
    INSTAGRAM_FEED_WEB = "INSTAGRAM_FEED_WEB"
    INSTAGRAM_FEED_WEB_M_SITE = "INSTAGRAM_FEED_WEB_M_SITE"
    INSTAGRAM_LEAD_GEN_MULTI_SUBMIT_ADS = "INSTAGRAM_LEAD_GEN_MULTI_SUBMIT_ADS"
    INSTAGRAM_PROFILE_FEED = "INSTAGRAM_PROFILE_FEED"
    INSTAGRAM_PROFILE_REELS = "INSTAGRAM_PROFILE_REELS"
    INSTAGRAM_REELS = "INSTAGRAM_REELS"
    INSTAGRAM_REELS_OVERLAY = "INSTAGRAM_REELS_OVERLAY"
    INSTAGRAM_SEARCH_CHAIN = "INSTAGRAM_SEARCH_CHAIN"
    INSTAGRAM_SEARCH_GRID = "INSTAGRAM_SEARCH_GRID"
    INSTAGRAM_STANDARD = "INSTAGRAM_STANDARD"
    INSTAGRAM_STORY = "INSTAGRAM_STORY"
    INSTAGRAM_STORY_EFFECT_TRAY = "INSTAGRAM_STORY_EFFECT_TRAY"
    INSTAGRAM_STORY_WEB = "INSTAGRAM_STORY_WEB"
    INSTAGRAM_STORY_WEB_M_SITE = "INSTAGRAM_STORY_WEB_M_SITE"
    INSTANT_ARTICLE_RECIRCULATION_AD = "INSTANT_ARTICLE_RECIRCULATION_AD"
    INSTANT_ARTICLE_STANDARD = "INSTANT_ARTICLE_STANDARD"
    INSTREAM_BANNER_DESKTOP = "INSTREAM_BANNER_DESKTOP"
    INSTREAM_BANNER_FULLSCREEN_IOS = "INSTREAM_BANNER_FULLSCREEN_IOS"
    INSTREAM_BANNER_FULLSCREEN_MOBILE = "INSTREAM_BANNER_FULLSCREEN_MOBILE"
    INSTREAM_BANNER_IMMERSIVE_MOBILE = "INSTREAM_BANNER_IMMERSIVE_MOBILE"
    INSTREAM_BANNER_MOBILE = "INSTREAM_BANNER_MOBILE"
    INSTREAM_VIDEO_DESKTOP = "INSTREAM_VIDEO_DESKTOP"
    INSTREAM_VIDEO_FULLSCREEN_IOS = "INSTREAM_VIDEO_FULLSCREEN_IOS"
    INSTREAM_VIDEO_FULLSCREEN_MOBILE = "INSTREAM_VIDEO_FULLSCREEN_MOBILE"
    INSTREAM_VIDEO_IMAGE = "INSTREAM_VIDEO_IMAGE"
    INSTREAM_VIDEO_IMMERSIVE_MOBILE = "INSTREAM_VIDEO_IMMERSIVE_MOBILE"
    INSTREAM_VIDEO_MOBILE = "INSTREAM_VIDEO_MOBILE"
    JOB_BROWSER_DESKTOP = "JOB_BROWSER_DESKTOP"
    JOB_BROWSER_MOBILE = "JOB_BROWSER_MOBILE"
    MARKETPLACE_MOBILE = "MARKETPLACE_MOBILE"
    MESSENGER_MOBILE_INBOX_MEDIA = "MESSENGER_MOBILE_INBOX_MEDIA"
    MESSENGER_MOBILE_STORY_MEDIA = "MESSENGER_MOBILE_STORY_MEDIA"
    MOBILE_BANNER = "MOBILE_BANNER"
    MOBILE_FEED_BASIC = "MOBILE_FEED_BASIC"
    MOBILE_FEED_STANDARD = "MOBILE_FEED_STANDARD"
    MOBILE_FULLWIDTH = "MOBILE_FULLWIDTH"
    MOBILE_INTERSTITIAL = "MOBILE_INTERSTITIAL"
    MOBILE_MEDIUM_RECTANGLE = "MOBILE_MEDIUM_RECTANGLE"
    MOBILE_NATIVE = "MOBILE_NATIVE"
    RIGHT_COLUMN_STANDARD = "RIGHT_COLUMN_STANDARD"
    SUGGESTED_VIDEO_DESKTOP = "SUGGESTED_VIDEO_DESKTOP"
    SUGGESTED_VIDEO_FULLSCREEN_MOBILE = "SUGGESTED_VIDEO_FULLSCREEN_MOBILE"
    SUGGESTED_VIDEO_IMMERSIVE_MOBILE = "SUGGESTED_VIDEO_IMMERSIVE_MOBILE"
    SUGGESTED_VIDEO_MOBILE = "SUGGESTED_VIDEO_MOBILE"
    WATCH_FEED_HOME = "WATCH_FEED_HOME"
    WATCH_FEED_MOBILE = "WATCH_FEED_MOBILE"


class adcreativepreviews_creative_feature_enum_param(str, Enum):
    """adcreativepreviews_creative_feature_enum_param enum values."""

    product_metadata_automation = "product_metadata_automation"
    profile_card = "profile_card"
    standard_enhancements_catalog = "standard_enhancements_catalog"
    video_to_image = "video_to_image"


class adcreativepreviews_render_type_enum_param(str, Enum):
    """adcreativepreviews_render_type_enum_param enum values."""

    FALLBACK = "FALLBACK"


class adgroup_date_preset(str, Enum):
    """adgroup_date_preset enum values."""

    data_maximum = "data_maximum"
    last_14d = "last_14d"
    last_28d = "last_28d"
    last_30d = "last_30d"
    last_3d = "last_3d"
    last_7d = "last_7d"
    last_90d = "last_90d"
    last_month = "last_month"
    last_quarter = "last_quarter"
    last_week_mon_sun = "last_week_mon_sun"
    last_week_sun_sat = "last_week_sun_sat"
    last_year = "last_year"
    maximum = "maximum"
    this_month = "this_month"
    this_quarter = "this_quarter"
    this_week_mon_today = "this_week_mon_today"
    this_week_sun_today = "this_week_sun_today"
    this_year = "this_year"
    today = "today"
    yesterday = "yesterday"


class adgroup_execution_options(str, Enum):
    """adgroup_execution_options enum values."""

    include_recommendations = "include_recommendations"
    synchronous_ad_review = "synchronous_ad_review"
    validate_only = "validate_only"


class adgroup_status(str, Enum):
    """adgroup_status enum values."""

    ACTIVE = "ACTIVE"
    ARCHIVED = "ARCHIVED"
    DELETED = "DELETED"
    PAUSED = "PAUSED"


class adgroupadlabels_execution_options_enum_param(str, Enum):
    """adgroupadlabels_execution_options_enum_param enum values."""

    validate_only = "validate_only"


class adgroupcopies_date_preset_enum_param(str, Enum):
    """adgroupcopies_date_preset_enum_param enum values."""

    data_maximum = "data_maximum"
    last_14d = "last_14d"
    last_28d = "last_28d"
    last_30d = "last_30d"
    last_3d = "last_3d"
    last_7d = "last_7d"
    last_90d = "last_90d"
    last_month = "last_month"
    last_quarter = "last_quarter"
    last_week_mon_sun = "last_week_mon_sun"
    last_week_sun_sat = "last_week_sun_sat"
    last_year = "last_year"
    maximum = "maximum"
    this_month = "this_month"
    this_quarter = "this_quarter"
    this_week_mon_today = "this_week_mon_today"
    this_week_sun_today = "this_week_sun_today"
    this_year = "this_year"
    today = "today"
    yesterday = "yesterday"


class adgroupcopies_status_option_enum_param(str, Enum):
    """adgroupcopies_status_option_enum_param enum values."""

    ACTIVE = "ACTIVE"
    INHERITED_FROM_SOURCE = "INHERITED_FROM_SOURCE"
    PAUSED = "PAUSED"


class adgroupfacebookfeedbackcomments_order_enum_param(str, Enum):
    """adgroupfacebookfeedbackcomments_order_enum_param enum values."""

    chronological = "chronological"
    reverse_chronological = "reverse_chronological"


class adgroupinsights_action_attribution_windows_enum_param(str, Enum):
    """adgroupinsights_action_attribution_windows_enum_param enum values."""

    VALUE_1D_CLICK = "1d_click"
    VALUE_1D_EV = "1d_ev"
    VALUE_1D_VIEW = "1d_view"
    VALUE_28D_CLICK = "28d_click"
    VALUE_28D_VIEW = "28d_view"
    VALUE_28D_VIEW_ALL_CONVERSIONS = "28d_view_all_conversions"
    VALUE_28D_VIEW_FIRST_CONVERSION = "28d_view_first_conversion"
    VALUE_7D_CLICK = "7d_click"
    VALUE_7D_VIEW = "7d_view"
    VALUE_7D_VIEW_ALL_CONVERSIONS = "7d_view_all_conversions"
    VALUE_7D_VIEW_FIRST_CONVERSION = "7d_view_first_conversion"
    dda = "dda"
    default = "default"
    skan_click = "skan_click"
    skan_click_second_postback = "skan_click_second_postback"
    skan_click_third_postback = "skan_click_third_postback"
    skan_view = "skan_view"
    skan_view_second_postback = "skan_view_second_postback"
    skan_view_third_postback = "skan_view_third_postback"


class adgroupinsights_action_breakdowns_enum_param(str, Enum):
    """adgroupinsights_action_breakdowns_enum_param enum values."""

    action_canvas_component_name = "action_canvas_component_name"
    action_carousel_card_id = "action_carousel_card_id"
    action_carousel_card_name = "action_carousel_card_name"
    action_destination = "action_destination"
    action_device = "action_device"
    action_reaction = "action_reaction"
    action_target_id = "action_target_id"
    action_type = "action_type"
    action_video_sound = "action_video_sound"
    action_video_type = "action_video_type"
    conversion_destination = "conversion_destination"
    matched_persona_id = "matched_persona_id"
    matched_persona_name = "matched_persona_name"
    signal_source_bucket = "signal_source_bucket"
    standard_event_content_type = "standard_event_content_type"


class adgroupinsights_action_report_time_enum_param(str, Enum):
    """adgroupinsights_action_report_time_enum_param enum values."""

    conversion = "conversion"
    impression = "impression"
    lifetime = "lifetime"
    mixed = "mixed"


class adgroupinsights_breakdowns_enum_param(str, Enum):
    """adgroupinsights_breakdowns_enum_param enum values."""

    ad_extension_domain = "ad_extension_domain"
    ad_extension_url = "ad_extension_url"
    ad_format_asset = "ad_format_asset"
    age = "age"
    app_id = "app_id"
    body_asset = "body_asset"
    breakdown_ad_objective = "breakdown_ad_objective"
    breakdown_reporting_ad_id = "breakdown_reporting_ad_id"
    call_to_action_asset = "call_to_action_asset"
    coarse_conversion_value = "coarse_conversion_value"
    comscore_market = "comscore_market"
    comscore_market_code = "comscore_market_code"
    conversion_destination = "conversion_destination"
    country = "country"
    creative_relaxation_asset_type = "creative_relaxation_asset_type"
    description_asset = "description_asset"
    device_platform = "device_platform"
    dma = "dma"
    fidelity_type = "fidelity_type"
    flexible_format_asset_type = "flexible_format_asset_type"
    frequency_value = "frequency_value"
    gen_ai_asset_type = "gen_ai_asset_type"
    gender = "gender"
    hourly_stats_aggregated_by_advertiser_time_zone = (
        "hourly_stats_aggregated_by_advertiser_time_zone"
    )
    hourly_stats_aggregated_by_audience_time_zone = "hourly_stats_aggregated_by_audience_time_zone"
    hsid = "hsid"
    image_asset = "image_asset"
    impression_device = "impression_device"
    impression_view_time_advertiser_hour_v2 = "impression_view_time_advertiser_hour_v2"
    is_auto_advance = "is_auto_advance"
    is_conversion_id_modeled = "is_conversion_id_modeled"
    is_rendered_as_delayed_skip_ad = "is_rendered_as_delayed_skip_ad"
    landing_destination = "landing_destination"
    link_url_asset = "link_url_asset"
    marketing_messages_btn_name = "marketing_messages_btn_name"
    mdsa_landing_destination = "mdsa_landing_destination"
    media_asset_url = "media_asset_url"
    media_creator = "media_creator"
    media_destination_url = "media_destination_url"
    media_format = "media_format"
    media_origin_url = "media_origin_url"
    media_text_content = "media_text_content"
    media_type = "media_type"
    mmm = "mmm"
    place_page_id = "place_page_id"
    platform_position = "platform_position"
    postback_sequence_index = "postback_sequence_index"
    product_id = "product_id"
    publisher_platform = "publisher_platform"
    redownload = "redownload"
    region = "region"
    signal_source_bucket = "signal_source_bucket"
    skan_campaign_id = "skan_campaign_id"
    skan_conversion_id = "skan_conversion_id"
    skan_version = "skan_version"
    sot_attribution_model_type = "sot_attribution_model_type"
    sot_attribution_window = "sot_attribution_window"
    sot_channel = "sot_channel"
    sot_event_type = "sot_event_type"
    sot_source = "sot_source"
    standard_event_content_type = "standard_event_content_type"
    title_asset = "title_asset"
    user_persona_id = "user_persona_id"
    user_persona_name = "user_persona_name"
    video_asset = "video_asset"


class adgroupinsights_date_preset_enum_param(str, Enum):
    """adgroupinsights_date_preset_enum_param enum values."""

    data_maximum = "data_maximum"
    last_14d = "last_14d"
    last_28d = "last_28d"
    last_30d = "last_30d"
    last_3d = "last_3d"
    last_7d = "last_7d"
    last_90d = "last_90d"
    last_month = "last_month"
    last_quarter = "last_quarter"
    last_week_mon_sun = "last_week_mon_sun"
    last_week_sun_sat = "last_week_sun_sat"
    last_year = "last_year"
    maximum = "maximum"
    this_month = "this_month"
    this_quarter = "this_quarter"
    this_week_mon_today = "this_week_mon_today"
    this_week_sun_today = "this_week_sun_today"
    this_year = "this_year"
    today = "today"
    yesterday = "yesterday"


class adgroupinsights_level_enum_param(str, Enum):
    """adgroupinsights_level_enum_param enum values."""

    account = "account"
    ad = "ad"
    adset = "adset"
    campaign = "campaign"


class adgroupinsights_summary_action_breakdowns_enum_param(str, Enum):
    """adgroupinsights_summary_action_breakdowns_enum_param enum values."""

    action_canvas_component_name = "action_canvas_component_name"
    action_carousel_card_id = "action_carousel_card_id"
    action_carousel_card_name = "action_carousel_card_name"
    action_destination = "action_destination"
    action_device = "action_device"
    action_reaction = "action_reaction"
    action_target_id = "action_target_id"
    action_type = "action_type"
    action_video_sound = "action_video_sound"
    action_video_type = "action_video_type"
    conversion_destination = "conversion_destination"
    matched_persona_id = "matched_persona_id"
    matched_persona_name = "matched_persona_name"
    signal_source_bucket = "signal_source_bucket"
    standard_event_content_type = "standard_event_content_type"


class adgrouppreviews_ad_format_enum_param(str, Enum):
    """adgrouppreviews_ad_format_enum_param enum values."""

    AUDIENCE_NETWORK_INSTREAM_VIDEO = "AUDIENCE_NETWORK_INSTREAM_VIDEO"
    AUDIENCE_NETWORK_INSTREAM_VIDEO_MOBILE = "AUDIENCE_NETWORK_INSTREAM_VIDEO_MOBILE"
    AUDIENCE_NETWORK_OUTSTREAM_VIDEO = "AUDIENCE_NETWORK_OUTSTREAM_VIDEO"
    AUDIENCE_NETWORK_REWARDED_VIDEO = "AUDIENCE_NETWORK_REWARDED_VIDEO"
    BIZ_DISCO_FEED_MOBILE = "BIZ_DISCO_FEED_MOBILE"
    DESKTOP_FEED_STANDARD = "DESKTOP_FEED_STANDARD"
    FACEBOOK_PROFILE_FEED_DESKTOP = "FACEBOOK_PROFILE_FEED_DESKTOP"
    FACEBOOK_PROFILE_FEED_MOBILE = "FACEBOOK_PROFILE_FEED_MOBILE"
    FACEBOOK_PROFILE_REELS_MOBILE = "FACEBOOK_PROFILE_REELS_MOBILE"
    FACEBOOK_REELS_BANNER = "FACEBOOK_REELS_BANNER"
    FACEBOOK_REELS_BANNER_DESKTOP = "FACEBOOK_REELS_BANNER_DESKTOP"
    FACEBOOK_REELS_BANNER_FULLSCREEN_IOS = "FACEBOOK_REELS_BANNER_FULLSCREEN_IOS"
    FACEBOOK_REELS_BANNER_FULLSCREEN_MOBILE = "FACEBOOK_REELS_BANNER_FULLSCREEN_MOBILE"
    FACEBOOK_REELS_MOBILE = "FACEBOOK_REELS_MOBILE"
    FACEBOOK_REELS_POSTLOOP = "FACEBOOK_REELS_POSTLOOP"
    FACEBOOK_REELS_STICKER = "FACEBOOK_REELS_STICKER"
    FACEBOOK_STORY_MOBILE = "FACEBOOK_STORY_MOBILE"
    FACEBOOK_STORY_STICKER_MOBILE = "FACEBOOK_STORY_STICKER_MOBILE"
    INSTAGRAM_EXPLORE_CONTEXTUAL = "INSTAGRAM_EXPLORE_CONTEXTUAL"
    INSTAGRAM_EXPLORE_GRID_HOME = "INSTAGRAM_EXPLORE_GRID_HOME"
    INSTAGRAM_EXPLORE_IMMERSIVE = "INSTAGRAM_EXPLORE_IMMERSIVE"
    INSTAGRAM_FEED_WEB = "INSTAGRAM_FEED_WEB"
    INSTAGRAM_FEED_WEB_M_SITE = "INSTAGRAM_FEED_WEB_M_SITE"
    INSTAGRAM_LEAD_GEN_MULTI_SUBMIT_ADS = "INSTAGRAM_LEAD_GEN_MULTI_SUBMIT_ADS"
    INSTAGRAM_PROFILE_FEED = "INSTAGRAM_PROFILE_FEED"
    INSTAGRAM_PROFILE_REELS = "INSTAGRAM_PROFILE_REELS"
    INSTAGRAM_REELS = "INSTAGRAM_REELS"
    INSTAGRAM_REELS_OVERLAY = "INSTAGRAM_REELS_OVERLAY"
    INSTAGRAM_SEARCH_CHAIN = "INSTAGRAM_SEARCH_CHAIN"
    INSTAGRAM_SEARCH_GRID = "INSTAGRAM_SEARCH_GRID"
    INSTAGRAM_STANDARD = "INSTAGRAM_STANDARD"
    INSTAGRAM_STORY = "INSTAGRAM_STORY"
    INSTAGRAM_STORY_EFFECT_TRAY = "INSTAGRAM_STORY_EFFECT_TRAY"
    INSTAGRAM_STORY_WEB = "INSTAGRAM_STORY_WEB"
    INSTAGRAM_STORY_WEB_M_SITE = "INSTAGRAM_STORY_WEB_M_SITE"
    INSTANT_ARTICLE_RECIRCULATION_AD = "INSTANT_ARTICLE_RECIRCULATION_AD"
    INSTANT_ARTICLE_STANDARD = "INSTANT_ARTICLE_STANDARD"
    INSTREAM_BANNER_DESKTOP = "INSTREAM_BANNER_DESKTOP"
    INSTREAM_BANNER_FULLSCREEN_IOS = "INSTREAM_BANNER_FULLSCREEN_IOS"
    INSTREAM_BANNER_FULLSCREEN_MOBILE = "INSTREAM_BANNER_FULLSCREEN_MOBILE"
    INSTREAM_BANNER_IMMERSIVE_MOBILE = "INSTREAM_BANNER_IMMERSIVE_MOBILE"
    INSTREAM_BANNER_MOBILE = "INSTREAM_BANNER_MOBILE"
    INSTREAM_VIDEO_DESKTOP = "INSTREAM_VIDEO_DESKTOP"
    INSTREAM_VIDEO_FULLSCREEN_IOS = "INSTREAM_VIDEO_FULLSCREEN_IOS"
    INSTREAM_VIDEO_FULLSCREEN_MOBILE = "INSTREAM_VIDEO_FULLSCREEN_MOBILE"
    INSTREAM_VIDEO_IMAGE = "INSTREAM_VIDEO_IMAGE"
    INSTREAM_VIDEO_IMMERSIVE_MOBILE = "INSTREAM_VIDEO_IMMERSIVE_MOBILE"
    INSTREAM_VIDEO_MOBILE = "INSTREAM_VIDEO_MOBILE"
    JOB_BROWSER_DESKTOP = "JOB_BROWSER_DESKTOP"
    JOB_BROWSER_MOBILE = "JOB_BROWSER_MOBILE"
    MARKETPLACE_MOBILE = "MARKETPLACE_MOBILE"
    MESSENGER_MOBILE_INBOX_MEDIA = "MESSENGER_MOBILE_INBOX_MEDIA"
    MESSENGER_MOBILE_STORY_MEDIA = "MESSENGER_MOBILE_STORY_MEDIA"
    MOBILE_BANNER = "MOBILE_BANNER"
    MOBILE_FEED_BASIC = "MOBILE_FEED_BASIC"
    MOBILE_FEED_STANDARD = "MOBILE_FEED_STANDARD"
    MOBILE_FULLWIDTH = "MOBILE_FULLWIDTH"
    MOBILE_INTERSTITIAL = "MOBILE_INTERSTITIAL"
    MOBILE_MEDIUM_RECTANGLE = "MOBILE_MEDIUM_RECTANGLE"
    MOBILE_NATIVE = "MOBILE_NATIVE"
    RIGHT_COLUMN_STANDARD = "RIGHT_COLUMN_STANDARD"
    SUGGESTED_VIDEO_DESKTOP = "SUGGESTED_VIDEO_DESKTOP"
    SUGGESTED_VIDEO_FULLSCREEN_MOBILE = "SUGGESTED_VIDEO_FULLSCREEN_MOBILE"
    SUGGESTED_VIDEO_IMMERSIVE_MOBILE = "SUGGESTED_VIDEO_IMMERSIVE_MOBILE"
    SUGGESTED_VIDEO_MOBILE = "SUGGESTED_VIDEO_MOBILE"
    WATCH_FEED_HOME = "WATCH_FEED_HOME"
    WATCH_FEED_MOBILE = "WATCH_FEED_MOBILE"


class adgrouppreviews_creative_feature_enum_param(str, Enum):
    """adgrouppreviews_creative_feature_enum_param enum values."""

    product_metadata_automation = "product_metadata_automation"
    profile_card = "profile_card"
    standard_enhancements_catalog = "standard_enhancements_catalog"
    video_to_image = "video_to_image"


class adgrouppreviews_render_type_enum_param(str, Enum):
    """adgrouppreviews_render_type_enum_param enum values."""

    FALLBACK = "FALLBACK"


class admonetizationpropertyadnetworkanalytics_aggregation_period_enum_param(str, Enum):
    """admonetizationpropertyadnetworkanalytics_aggregation_period_enum_param enum values."""

    DAY = "DAY"
    TOTAL = "TOTAL"


class admonetizationpropertyadnetworkanalytics_breakdowns_enum_param(str, Enum):
    """admonetizationpropertyadnetworkanalytics_breakdowns_enum_param enum values."""

    AD_SERVER_CAMPAIGN_ID = "AD_SERVER_CAMPAIGN_ID"
    AD_SPACE = "AD_SPACE"
    AGE = "AGE"
    APP = "APP"
    CLICKED_VIEW_TAG = "CLICKED_VIEW_TAG"
    COUNTRY = "COUNTRY"
    DEAL = "DEAL"
    DEAL_AD = "DEAL_AD"
    DEAL_PAGE = "DEAL_PAGE"
    DELIVERY_METHOD = "DELIVERY_METHOD"
    DISPLAY_FORMAT = "DISPLAY_FORMAT"
    FAIL_REASON = "FAIL_REASON"
    GENDER = "GENDER"
    INSTANT_ARTICLE_ID = "INSTANT_ARTICLE_ID"
    INSTANT_ARTICLE_PAGE_ID = "INSTANT_ARTICLE_PAGE_ID"
    IS_DEAL_BACKFILL = "IS_DEAL_BACKFILL"
    PLACEMENT = "PLACEMENT"
    PLACEMENT_NAME = "PLACEMENT_NAME"
    PLATFORM = "PLATFORM"
    PROPERTY = "PROPERTY"
    SDK_VERSION = "SDK_VERSION"


class admonetizationpropertyadnetworkanalytics_metrics_enum_param(str, Enum):
    """admonetizationpropertyadnetworkanalytics_metrics_enum_param enum values."""

    FB_AD_NETWORK_BIDDING_BID_RATE = "FB_AD_NETWORK_BIDDING_BID_RATE"
    FB_AD_NETWORK_BIDDING_REQUEST = "FB_AD_NETWORK_BIDDING_REQUEST"
    FB_AD_NETWORK_BIDDING_RESPONSE = "FB_AD_NETWORK_BIDDING_RESPONSE"
    FB_AD_NETWORK_BIDDING_REVENUE = "FB_AD_NETWORK_BIDDING_REVENUE"
    FB_AD_NETWORK_BIDDING_WIN_RATE = "FB_AD_NETWORK_BIDDING_WIN_RATE"
    FB_AD_NETWORK_CLICK = "FB_AD_NETWORK_CLICK"
    FB_AD_NETWORK_CPM = "FB_AD_NETWORK_CPM"
    FB_AD_NETWORK_CTR = "FB_AD_NETWORK_CTR"
    FB_AD_NETWORK_FILLED_REQUEST = "FB_AD_NETWORK_FILLED_REQUEST"
    FB_AD_NETWORK_FILL_RATE = "FB_AD_NETWORK_FILL_RATE"
    FB_AD_NETWORK_IMP = "FB_AD_NETWORK_IMP"
    FB_AD_NETWORK_IMPRESSION_RATE = "FB_AD_NETWORK_IMPRESSION_RATE"
    FB_AD_NETWORK_REQUEST = "FB_AD_NETWORK_REQUEST"
    FB_AD_NETWORK_REVENUE = "FB_AD_NETWORK_REVENUE"
    FB_AD_NETWORK_SHOW_RATE = "FB_AD_NETWORK_SHOW_RATE"
    FB_AD_NETWORK_VIDEO_GUARANTEE_REVENUE = "FB_AD_NETWORK_VIDEO_GUARANTEE_REVENUE"
    FB_AD_NETWORK_VIDEO_MRC = "FB_AD_NETWORK_VIDEO_MRC"
    FB_AD_NETWORK_VIDEO_MRC_RATE = "FB_AD_NETWORK_VIDEO_MRC_RATE"
    FB_AD_NETWORK_VIDEO_VIEW = "FB_AD_NETWORK_VIDEO_VIEW"
    FB_AD_NETWORK_VIDEO_VIEW_RATE = "FB_AD_NETWORK_VIDEO_VIEW_RATE"


class admonetizationpropertyadnetworkanalytics_ordering_column_enum_param(str, Enum):
    """admonetizationpropertyadnetworkanalytics_ordering_column_enum_param enum values."""

    METRIC = "METRIC"
    TIME = "TIME"
    VALUE = "VALUE"


class admonetizationpropertyadnetworkanalytics_ordering_type_enum_param(str, Enum):
    """admonetizationpropertyadnetworkanalytics_ordering_type_enum_param enum values."""

    ASCENDING = "ASCENDING"
    DESCENDING = "DESCENDING"


class adrule_status(str, Enum):
    """adrule_status enum values."""

    DELETED = "DELETED"
    DISABLED = "DISABLED"
    ENABLED = "ENABLED"
    HAS_ISSUES = "HAS_ISSUES"


class adrulehistory_action_enum_param(str, Enum):
    """adrulehistory_action_enum_param enum values."""

    BUDGET_NOT_REDISTRIBUTED = "BUDGET_NOT_REDISTRIBUTED"
    CHANGED_BID = "CHANGED_BID"
    CHANGED_BUDGET = "CHANGED_BUDGET"
    CONSOLIDATE_ASC_FRAGMENTATION = "CONSOLIDATE_ASC_FRAGMENTATION"
    CONSOLIDATE_FRAGMENTATION = "CONSOLIDATE_FRAGMENTATION"
    CONVERT_ASC_CP_SINGLE_INSTANCE = "CONVERT_ASC_CP_SINGLE_INSTANCE"
    EMAIL = "EMAIL"
    ENABLE_ADVANTAGE_CAMPAIGN_BUDGET = "ENABLE_ADVANTAGE_CAMPAIGN_BUDGET"
    ENABLE_ADVANTAGE_PLUS_AUDIENCE = "ENABLE_ADVANTAGE_PLUS_AUDIENCE"
    ENABLE_ADVANTAGE_PLUS_CREATIVE = "ENABLE_ADVANTAGE_PLUS_CREATIVE"
    ENABLE_ADVANTAGE_PLUS_PLACEMENTS = "ENABLE_ADVANTAGE_PLUS_PLACEMENTS"
    ENABLE_AUTOFLOW = "ENABLE_AUTOFLOW"
    ENABLE_GEN_UNCROP = "ENABLE_GEN_UNCROP"
    ENABLE_LANDING_PAGE_VIEWS = "ENABLE_LANDING_PAGE_VIEWS"
    ENABLE_MUSIC = "ENABLE_MUSIC"
    ENABLE_REELS_PLACEMENTS = "ENABLE_REELS_PLACEMENTS"
    ENABLE_SEMANTIC_BASED_AUDIENCE_EXPANSION = "ENABLE_SEMANTIC_BASED_AUDIENCE_EXPANSION"
    ENABLE_SHOPS_ADS = "ENABLE_SHOPS_ADS"
    ENDPOINT_PINGED = "ENDPOINT_PINGED"
    ERROR = "ERROR"
    FACEBOOK_NOTIFICATION_SENT = "FACEBOOK_NOTIFICATION_SENT"
    MESSAGE_SENT = "MESSAGE_SENT"
    NOT_CHANGED = "NOT_CHANGED"
    PAUSED = "PAUSED"
    UNPAUSED = "UNPAUSED"


class adspixel_automatic_matching_fields(str, Enum):
    """adspixel_automatic_matching_fields enum values."""

    country = "country"
    ct = "ct"
    db = "db"
    em = "em"
    external_id = "external_id"
    fn = "fn"
    ge = "ge"
    ln = "ln"
    ph = "ph"
    st = "st"
    zp = "zp"


class adspixel_data_use_setting(str, Enum):
    """adspixel_data_use_setting enum values."""

    ADVERTISING_AND_ANALYTICS = "ADVERTISING_AND_ANALYTICS"
    ANALYTICS_ONLY = "ANALYTICS_ONLY"
    EMPTY = "EMPTY"


class adspixel_first_party_cookie_status(str, Enum):
    """adspixel_first_party_cookie_status enum values."""

    EMPTY = "EMPTY"
    FIRST_PARTY_COOKIE_DISABLED = "FIRST_PARTY_COOKIE_DISABLED"
    FIRST_PARTY_COOKIE_ENABLED = "FIRST_PARTY_COOKIE_ENABLED"


class adspixelagencies_permitted_tasks_enum_param(str, Enum):
    """adspixelagencies_permitted_tasks_enum_param enum values."""

    ADVERTISE = "ADVERTISE"
    ANALYZE = "ANALYZE"
    EDIT = "EDIT"
    UPLOAD = "UPLOAD"


class adspixelassigned_users_tasks_enum_param(str, Enum):
    """adspixelassigned_users_tasks_enum_param enum values."""

    AA_ANALYZE = "AA_ANALYZE"
    ADVERTISE = "ADVERTISE"
    ANALYZE = "ANALYZE"
    EDIT = "EDIT"
    UPLOAD = "UPLOAD"


class adspixelda_checks_connection_method_enum_param(str, Enum):
    """adspixelda_checks_connection_method_enum_param enum values."""

    ALL = "ALL"
    APP = "APP"
    BROWSER = "BROWSER"
    SERVER = "SERVER"


class adspixeloffline_event_uploads_order_enum_param(str, Enum):
    """adspixeloffline_event_uploads_order_enum_param enum values."""

    ASCENDING = "ASCENDING"
    DESCENDING = "DESCENDING"


class adspixeloffline_event_uploads_sort_by_enum_param(str, Enum):
    """adspixeloffline_event_uploads_sort_by_enum_param enum values."""

    API_CALLS = "API_CALLS"
    CREATION_TIME = "CREATION_TIME"
    EVENT_TIME_MAX = "EVENT_TIME_MAX"
    EVENT_TIME_MIN = "EVENT_TIME_MIN"
    FIRST_UPLOAD_TIME = "FIRST_UPLOAD_TIME"
    IS_EXCLUDED_FOR_LIFT = "IS_EXCLUDED_FOR_LIFT"
    LAST_UPLOAD_TIME = "LAST_UPLOAD_TIME"


class adspixelstats_aggregation_enum_param(str, Enum):
    """adspixelstats_aggregation_enum_param enum values."""

    browser_type = "browser_type"
    custom_data_field = "custom_data_field"
    device_os = "device_os"
    device_type = "device_type"
    event = "event"
    event_detection_method = "event_detection_method"
    event_processing_results = "event_processing_results"
    event_source = "event_source"
    event_total_counts = "event_total_counts"
    event_value_count = "event_value_count"
    had_pii = "had_pii"
    host = "host"
    match_keys = "match_keys"
    pixel_fire = "pixel_fire"
    url = "url"
    url_by_rule = "url_by_rule"


class adstudy_type(str, Enum):
    """adstudy_type enum values."""

    BACKEND_AB_TESTING = "BACKEND_AB_TESTING"
    CONTINUOUS_LIFT_CONFIG = "CONTINUOUS_LIFT_CONFIG"
    GEO_LIFT = "GEO_LIFT"
    LIFT = "LIFT"
    SPLIT_TEST = "SPLIT_TEST"


class adstudycell_creation_template(str, Enum):
    """adstudycell_creation_template enum values."""

    AUTOMATIC_PLACEMENTS = "AUTOMATIC_PLACEMENTS"
    BRAND_AWARENESS = "BRAND_AWARENESS"
    FACEBOOK = "FACEBOOK"
    FACEBOOK_AUDIENCE_NETWORK = "FACEBOOK_AUDIENCE_NETWORK"
    FACEBOOK_INSTAGRAM = "FACEBOOK_INSTAGRAM"
    FACEBOOK_NEWS_FEED = "FACEBOOK_NEWS_FEED"
    FACEBOOK_NEWS_FEED_IN_STREAM_VIDEO = "FACEBOOK_NEWS_FEED_IN_STREAM_VIDEO"
    HIGH_FREQUENCY = "HIGH_FREQUENCY"
    INSTAGRAM = "INSTAGRAM"
    IN_STREAM_VIDEO = "IN_STREAM_VIDEO"
    LOW_FREQUENCY = "LOW_FREQUENCY"
    MEDIUM_FREQUENCY = "MEDIUM_FREQUENCY"
    MOBILE_OPTIMIZED_VIDEO = "MOBILE_OPTIMIZED_VIDEO"
    PAGE_POST_ENGAGEMENT = "PAGE_POST_ENGAGEMENT"
    REACH = "REACH"
    TV_COMMERCIAL = "TV_COMMERCIAL"
    TV_FACEBOOK = "TV_FACEBOOK"
    VIDEO_VIEW_OPTIMIZATION = "VIDEO_VIEW_OPTIMIZATION"


class adstudyobjective_breakdowns(str, Enum):
    """adstudyobjective_breakdowns enum values."""

    age = "age"
    cell_id = "cell_id"
    country = "country"
    gender = "gender"


class adstudyobjective_type(str, Enum):
    """adstudyobjective_type enum values."""

    BRAND = "BRAND"
    BRANDLIFT = "BRANDLIFT"
    CONVERSIONS = "CONVERSIONS"
    FTL = "FTL"
    MAE = "MAE"
    MAI = "MAI"
    MPC_CONVERSION = "MPC_CONVERSION"
    NONSALES = "NONSALES"
    PARTNER = "PARTNER"
    SALES = "SALES"
    TELCO = "TELCO"


class albumcomments_comment_privacy_value_enum_param(str, Enum):
    """albumcomments_comment_privacy_value_enum_param enum values."""

    DECLINED_BY_ADMIN_ASSISTANT = "DECLINED_BY_ADMIN_ASSISTANT"
    DEFAULT_PRIVACY = "DEFAULT_PRIVACY"
    FRIENDS_AND_POST_OWNER = "FRIENDS_AND_POST_OWNER"
    FRIENDS_ONLY = "FRIENDS_ONLY"
    GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE = "GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE"
    OWNER_OR_COMMENTER = "OWNER_OR_COMMENTER"
    PENDING_APPROVAL = "PENDING_APPROVAL"
    REMOVED_BY_ADMIN_ASSISTANT = "REMOVED_BY_ADMIN_ASSISTANT"
    SIDE_CONVERSATION = "SIDE_CONVERSATION"
    SIDE_CONVERSATION_AND_POST_OWNER = "SIDE_CONVERSATION_AND_POST_OWNER"
    SPOTLIGHT_TAB = "SPOTLIGHT_TAB"


class albumcomments_filter_enum_param(str, Enum):
    """albumcomments_filter_enum_param enum values."""

    stream = "stream"
    toplevel = "toplevel"


class albumcomments_live_filter_enum_param(str, Enum):
    """albumcomments_live_filter_enum_param enum values."""

    filter_low_quality = "filter_low_quality"
    no_filter = "no_filter"


class albumcomments_order_enum_param(str, Enum):
    """albumcomments_order_enum_param enum values."""

    chronological = "chronological"
    reverse_chronological = "reverse_chronological"


class albumphotos_backdated_time_granularity_enum_param(str, Enum):
    """albumphotos_backdated_time_granularity_enum_param enum values."""

    day = "day"
    hour = "hour"
    min = "min"
    month = "month"
    none = "none"
    year = "year"


class albumphotos_unpublished_content_type_enum_param(str, Enum):
    """albumphotos_unpublished_content_type_enum_param enum values."""

    ADS_POST = "ADS_POST"
    DRAFT = "DRAFT"
    INLINE_CREATED = "INLINE_CREATED"
    PUBLISHED = "PUBLISHED"
    REVIEWABLE_BRANDED_CONTENT = "REVIEWABLE_BRANDED_CONTENT"
    SCHEDULED = "SCHEDULED"
    SCHEDULED_RECURRING = "SCHEDULED_RECURRING"


class albumpicture_type_enum_param(str, Enum):
    """albumpicture_type_enum_param enum values."""

    album = "album"
    small = "small"
    thumbnail = "thumbnail"


class application_an_platforms(str, Enum):
    """application_an_platforms enum values."""

    ANDROID = "ANDROID"
    DESKTOP = "DESKTOP"
    GALAXY = "GALAXY"
    INSTANT_ARTICLES = "INSTANT_ARTICLES"
    IOS = "IOS"
    MOBILE_WEB = "MOBILE_WEB"
    OCULUS = "OCULUS"
    UNKNOWN = "UNKNOWN"
    XIAOMI = "XIAOMI"


class applicationaccounts_type_enum_param(str, Enum):
    """applicationaccounts_type_enum_param enum values."""

    TEST_USERS = "test-users"


class applicationactivities_event_enum_param(str, Enum):
    """applicationactivities_event_enum_param enum values."""

    CUSTOM_APP_EVENTS = "CUSTOM_APP_EVENTS"
    DEFERRED_APP_LINK = "DEFERRED_APP_LINK"
    MOBILE_APP_INSTALL = "MOBILE_APP_INSTALL"


class applicationactivities_user_id_type_enum_param(str, Enum):
    """applicationactivities_user_id_type_enum_param enum values."""

    INSTANT_GAMES_PLAYER_ID = "INSTANT_GAMES_PLAYER_ID"


class applicationadnetworkanalytics_aggregation_period_enum_param(str, Enum):
    """applicationadnetworkanalytics_aggregation_period_enum_param enum values."""

    DAY = "DAY"
    TOTAL = "TOTAL"


class applicationadnetworkanalytics_breakdowns_enum_param(str, Enum):
    """applicationadnetworkanalytics_breakdowns_enum_param enum values."""

    AD_SERVER_CAMPAIGN_ID = "AD_SERVER_CAMPAIGN_ID"
    AD_SPACE = "AD_SPACE"
    AGE = "AGE"
    APP = "APP"
    CLICKED_VIEW_TAG = "CLICKED_VIEW_TAG"
    COUNTRY = "COUNTRY"
    DEAL = "DEAL"
    DEAL_AD = "DEAL_AD"
    DEAL_PAGE = "DEAL_PAGE"
    DELIVERY_METHOD = "DELIVERY_METHOD"
    DISPLAY_FORMAT = "DISPLAY_FORMAT"
    FAIL_REASON = "FAIL_REASON"
    GENDER = "GENDER"
    INSTANT_ARTICLE_ID = "INSTANT_ARTICLE_ID"
    INSTANT_ARTICLE_PAGE_ID = "INSTANT_ARTICLE_PAGE_ID"
    IS_DEAL_BACKFILL = "IS_DEAL_BACKFILL"
    PLACEMENT = "PLACEMENT"
    PLACEMENT_NAME = "PLACEMENT_NAME"
    PLATFORM = "PLATFORM"
    PROPERTY = "PROPERTY"
    SDK_VERSION = "SDK_VERSION"


class applicationadnetworkanalytics_metrics_enum_param(str, Enum):
    """applicationadnetworkanalytics_metrics_enum_param enum values."""

    FB_AD_NETWORK_BIDDING_BID_RATE = "FB_AD_NETWORK_BIDDING_BID_RATE"
    FB_AD_NETWORK_BIDDING_REQUEST = "FB_AD_NETWORK_BIDDING_REQUEST"
    FB_AD_NETWORK_BIDDING_RESPONSE = "FB_AD_NETWORK_BIDDING_RESPONSE"
    FB_AD_NETWORK_BIDDING_REVENUE = "FB_AD_NETWORK_BIDDING_REVENUE"
    FB_AD_NETWORK_BIDDING_WIN_RATE = "FB_AD_NETWORK_BIDDING_WIN_RATE"
    FB_AD_NETWORK_CLICK = "FB_AD_NETWORK_CLICK"
    FB_AD_NETWORK_CPM = "FB_AD_NETWORK_CPM"
    FB_AD_NETWORK_CTR = "FB_AD_NETWORK_CTR"
    FB_AD_NETWORK_FILLED_REQUEST = "FB_AD_NETWORK_FILLED_REQUEST"
    FB_AD_NETWORK_FILL_RATE = "FB_AD_NETWORK_FILL_RATE"
    FB_AD_NETWORK_IMP = "FB_AD_NETWORK_IMP"
    FB_AD_NETWORK_IMPRESSION_RATE = "FB_AD_NETWORK_IMPRESSION_RATE"
    FB_AD_NETWORK_REQUEST = "FB_AD_NETWORK_REQUEST"
    FB_AD_NETWORK_REVENUE = "FB_AD_NETWORK_REVENUE"
    FB_AD_NETWORK_SHOW_RATE = "FB_AD_NETWORK_SHOW_RATE"
    FB_AD_NETWORK_VIDEO_GUARANTEE_REVENUE = "FB_AD_NETWORK_VIDEO_GUARANTEE_REVENUE"
    FB_AD_NETWORK_VIDEO_MRC = "FB_AD_NETWORK_VIDEO_MRC"
    FB_AD_NETWORK_VIDEO_MRC_RATE = "FB_AD_NETWORK_VIDEO_MRC_RATE"
    FB_AD_NETWORK_VIDEO_VIEW = "FB_AD_NETWORK_VIDEO_VIEW"
    FB_AD_NETWORK_VIDEO_VIEW_RATE = "FB_AD_NETWORK_VIDEO_VIEW_RATE"


class applicationadnetworkanalytics_ordering_column_enum_param(str, Enum):
    """applicationadnetworkanalytics_ordering_column_enum_param enum values."""

    METRIC = "METRIC"
    TIME = "TIME"
    VALUE = "VALUE"


class applicationadnetworkanalytics_ordering_type_enum_param(str, Enum):
    """applicationadnetworkanalytics_ordering_type_enum_param enum values."""

    ASCENDING = "ASCENDING"
    DESCENDING = "DESCENDING"


class applicationapp_indexing_platform_enum_param(str, Enum):
    """applicationapp_indexing_platform_enum_param enum values."""

    ANDROID = "ANDROID"
    IOS = "IOS"


class applicationapp_indexing_request_type_enum_param(str, Enum):
    """applicationapp_indexing_request_type_enum_param enum values."""

    APP_INDEXING = "APP_INDEXING"
    BUTTON_SAMPLING = "BUTTON_SAMPLING"
    PLUGIN = "PLUGIN"


class applicationapp_push_device_token_platform_enum_param(str, Enum):
    """applicationapp_push_device_token_platform_enum_param enum values."""

    ANDROID = "ANDROID"
    IOS = "IOS"
    UNKNOWN = "UNKNOWN"


class applicationcodeless_event_mappings_mutation_method_enum_param(str, Enum):
    """applicationcodeless_event_mappings_mutation_method_enum_param enum values."""

    ADD = "ADD"
    DELETE = "DELETE"
    REPLACE = "REPLACE"


class applicationcodeless_event_mappings_platform_enum_param(str, Enum):
    """applicationcodeless_event_mappings_platform_enum_param enum values."""

    ANDROID = "ANDROID"
    IOS = "IOS"


class applicationcodeless_event_mappings_post_method_enum_param(str, Enum):
    """applicationcodeless_event_mappings_post_method_enum_param enum values."""

    CODELESS = "CODELESS"
    EYMT = "EYMT"


class applicationda_checks_connection_method_enum_param(str, Enum):
    """applicationda_checks_connection_method_enum_param enum values."""

    ALL = "ALL"
    APP = "APP"
    BROWSER = "BROWSER"
    SERVER = "SERVER"


class applicationmobile_sdk_gk_platform_enum_param(str, Enum):
    """applicationmobile_sdk_gk_platform_enum_param enum values."""

    ANDROID = "ANDROID"
    IOS = "IOS"


class applicationpermissions_status_enum_param(str, Enum):
    """applicationpermissions_status_enum_param enum values."""

    live = "live"
    unapproved = "unapproved"


class applicationuploads_session_type_enum_param(str, Enum):
    """applicationuploads_session_type_enum_param enum values."""

    attachment = "attachment"


class applicationwhatsapp_business_solution_owner_permissions_enum_param(str, Enum):
    """applicationwhatsapp_business_solution_owner_permissions_enum_param enum values."""

    DEVELOP = "DEVELOP"
    MANAGE = "MANAGE"
    MANAGE_EXTENSIONS = "MANAGE_EXTENSIONS"
    MANAGE_PHONE = "MANAGE_PHONE"
    MANAGE_PHONE_ASSETS = "MANAGE_PHONE_ASSETS"
    MANAGE_TEMPLATES = "MANAGE_TEMPLATES"
    MESSAGING = "MESSAGING"
    VIEW_COST = "VIEW_COST"
    VIEW_PHONE_ASSETS = "VIEW_PHONE_ASSETS"
    VIEW_TEMPLATES = "VIEW_TEMPLATES"


class applicationwhatsapp_business_solution_partner_permissions_enum_param(str, Enum):
    """applicationwhatsapp_business_solution_partner_permissions_enum_param enum values."""

    DEVELOP = "DEVELOP"
    MANAGE = "MANAGE"
    MANAGE_EXTENSIONS = "MANAGE_EXTENSIONS"
    MANAGE_PHONE = "MANAGE_PHONE"
    MANAGE_PHONE_ASSETS = "MANAGE_PHONE_ASSETS"
    MANAGE_TEMPLATES = "MANAGE_TEMPLATES"
    MESSAGING = "MESSAGING"
    VIEW_COST = "VIEW_COST"
    VIEW_PHONE_ASSETS = "VIEW_PHONE_ASSETS"
    VIEW_TEMPLATES = "VIEW_TEMPLATES"


class applicationwhatsapp_business_solutions_role_enum_param(str, Enum):
    """applicationwhatsapp_business_solutions_role_enum_param enum values."""

    OWNER = "OWNER"
    PARTNER = "PARTNER"


class automotivemodeloverride_details_type_enum_param(str, Enum):
    """automotivemodeloverride_details_type_enum_param enum values."""

    COUNTRY = "COUNTRY"
    LANGUAGE = "LANGUAGE"
    LANGUAGE_AND_COUNTRY = "LANGUAGE_AND_COUNTRY"


class business_two_factor_type(str, Enum):
    """business_two_factor_type enum values."""

    admin_required = "admin_required"
    all_required = "all_required"
    none = "none"


class business_vertical(str, Enum):
    """business_vertical enum values."""

    ADVERTISING = "ADVERTISING"
    AUTOMOTIVE = "AUTOMOTIVE"
    CONSUMER_PACKAGED_GOODS = "CONSUMER_PACKAGED_GOODS"
    ECOMMERCE = "ECOMMERCE"
    EDUCATION = "EDUCATION"
    ENERGY_AND_UTILITIES = "ENERGY_AND_UTILITIES"
    ENTERTAINMENT_AND_MEDIA = "ENTERTAINMENT_AND_MEDIA"
    FINANCIAL_SERVICES = "FINANCIAL_SERVICES"
    GAMING = "GAMING"
    GOVERNMENT_AND_POLITICS = "GOVERNMENT_AND_POLITICS"
    HEALTH = "HEALTH"
    LUXURY = "LUXURY"
    MARKETING = "MARKETING"
    NON_PROFIT = "NON_PROFIT"
    NOT_SET = "NOT_SET"
    ORGANIZATIONS_AND_ASSOCIATIONS = "ORGANIZATIONS_AND_ASSOCIATIONS"
    OTHER = "OTHER"
    PROFESSIONAL_SERVICES = "PROFESSIONAL_SERVICES"
    RESTAURANT = "RESTAURANT"
    RETAIL = "RETAIL"
    TECHNOLOGY = "TECHNOLOGY"
    TELECOM = "TELECOM"
    TRAVEL = "TRAVEL"


class businessad_studies_type_enum_param(str, Enum):
    """businessad_studies_type_enum_param enum values."""

    BACKEND_AB_TESTING = "BACKEND_AB_TESTING"
    CONTINUOUS_LIFT_CONFIG = "CONTINUOUS_LIFT_CONFIG"
    GEO_LIFT = "GEO_LIFT"
    LIFT = "LIFT"
    SPLIT_TEST = "SPLIT_TEST"


class businessadnetworkanalytics_aggregation_period_enum_param(str, Enum):
    """businessadnetworkanalytics_aggregation_period_enum_param enum values."""

    DAY = "DAY"
    TOTAL = "TOTAL"


class businessadnetworkanalytics_breakdowns_enum_param(str, Enum):
    """businessadnetworkanalytics_breakdowns_enum_param enum values."""

    AD_SERVER_CAMPAIGN_ID = "AD_SERVER_CAMPAIGN_ID"
    AD_SPACE = "AD_SPACE"
    AGE = "AGE"
    APP = "APP"
    CLICKED_VIEW_TAG = "CLICKED_VIEW_TAG"
    COUNTRY = "COUNTRY"
    DEAL = "DEAL"
    DEAL_AD = "DEAL_AD"
    DEAL_PAGE = "DEAL_PAGE"
    DELIVERY_METHOD = "DELIVERY_METHOD"
    DISPLAY_FORMAT = "DISPLAY_FORMAT"
    FAIL_REASON = "FAIL_REASON"
    GENDER = "GENDER"
    INSTANT_ARTICLE_ID = "INSTANT_ARTICLE_ID"
    INSTANT_ARTICLE_PAGE_ID = "INSTANT_ARTICLE_PAGE_ID"
    IS_DEAL_BACKFILL = "IS_DEAL_BACKFILL"
    PLACEMENT = "PLACEMENT"
    PLACEMENT_NAME = "PLACEMENT_NAME"
    PLATFORM = "PLATFORM"
    PROPERTY = "PROPERTY"
    SDK_VERSION = "SDK_VERSION"


class businessadnetworkanalytics_metrics_enum_param(str, Enum):
    """businessadnetworkanalytics_metrics_enum_param enum values."""

    FB_AD_NETWORK_BIDDING_BID_RATE = "FB_AD_NETWORK_BIDDING_BID_RATE"
    FB_AD_NETWORK_BIDDING_REQUEST = "FB_AD_NETWORK_BIDDING_REQUEST"
    FB_AD_NETWORK_BIDDING_RESPONSE = "FB_AD_NETWORK_BIDDING_RESPONSE"
    FB_AD_NETWORK_BIDDING_REVENUE = "FB_AD_NETWORK_BIDDING_REVENUE"
    FB_AD_NETWORK_BIDDING_WIN_RATE = "FB_AD_NETWORK_BIDDING_WIN_RATE"
    FB_AD_NETWORK_CLICK = "FB_AD_NETWORK_CLICK"
    FB_AD_NETWORK_CPM = "FB_AD_NETWORK_CPM"
    FB_AD_NETWORK_CTR = "FB_AD_NETWORK_CTR"
    FB_AD_NETWORK_FILLED_REQUEST = "FB_AD_NETWORK_FILLED_REQUEST"
    FB_AD_NETWORK_FILL_RATE = "FB_AD_NETWORK_FILL_RATE"
    FB_AD_NETWORK_IMP = "FB_AD_NETWORK_IMP"
    FB_AD_NETWORK_IMPRESSION_RATE = "FB_AD_NETWORK_IMPRESSION_RATE"
    FB_AD_NETWORK_REQUEST = "FB_AD_NETWORK_REQUEST"
    FB_AD_NETWORK_REVENUE = "FB_AD_NETWORK_REVENUE"
    FB_AD_NETWORK_SHOW_RATE = "FB_AD_NETWORK_SHOW_RATE"
    FB_AD_NETWORK_VIDEO_GUARANTEE_REVENUE = "FB_AD_NETWORK_VIDEO_GUARANTEE_REVENUE"
    FB_AD_NETWORK_VIDEO_MRC = "FB_AD_NETWORK_VIDEO_MRC"
    FB_AD_NETWORK_VIDEO_MRC_RATE = "FB_AD_NETWORK_VIDEO_MRC_RATE"
    FB_AD_NETWORK_VIDEO_VIEW = "FB_AD_NETWORK_VIDEO_VIEW"
    FB_AD_NETWORK_VIDEO_VIEW_RATE = "FB_AD_NETWORK_VIDEO_VIEW_RATE"


class businessadnetworkanalytics_ordering_column_enum_param(str, Enum):
    """businessadnetworkanalytics_ordering_column_enum_param enum values."""

    METRIC = "METRIC"
    TIME = "TIME"
    VALUE = "VALUE"


class businessadnetworkanalytics_ordering_type_enum_param(str, Enum):
    """businessadnetworkanalytics_ordering_type_enum_param enum values."""

    ASCENDING = "ASCENDING"
    DESCENDING = "DESCENDING"


class businessads_dataset_sort_by_enum_param(str, Enum):
    """businessads_dataset_sort_by_enum_param enum values."""

    LAST_FIRED_TIME = "LAST_FIRED_TIME"
    NAME = "NAME"


class businessadspixels_sort_by_enum_param(str, Enum):
    """businessadspixels_sort_by_enum_param enum values."""

    LAST_FIRED_TIME = "LAST_FIRED_TIME"
    NAME = "NAME"


class businessagreement_request_status(str, Enum):
    """businessagreement_request_status enum values."""

    APPROVE = "APPROVE"
    CANCELED = "CANCELED"
    DECLINE = "DECLINE"
    EXPIRED = "EXPIRED"
    IN_PROGRESS = "IN_PROGRESS"
    PENDING = "PENDING"
    PENDING_EMAIL_VERIFICATION = "PENDING_EMAIL_VERIFICATION"
    PENDING_INTEGRITY_REVIEW = "PENDING_INTEGRITY_REVIEW"


class businessassetgroupassigned_users_adaccount_tasks_enum_param(str, Enum):
    """businessassetgroupassigned_users_adaccount_tasks_enum_param enum values."""

    AA_ANALYZE = "AA_ANALYZE"
    ADVERTISE = "ADVERTISE"
    ANALYZE = "ANALYZE"
    DRAFT = "DRAFT"
    MANAGE = "MANAGE"


class businessassetgroupassigned_users_offline_conversion_data_set_tasks_enum_param(str, Enum):
    """businessassetgroupassigned_users_offline_conversion_data_set_tasks_enum_param enum values."""

    AA_ANALYZE = "AA_ANALYZE"
    ADVERTISE = "ADVERTISE"
    MANAGE = "MANAGE"
    UPLOAD = "UPLOAD"
    VIEW = "VIEW"


class businessassetgroupassigned_users_page_tasks_enum_param(str, Enum):
    """businessassetgroupassigned_users_page_tasks_enum_param enum values."""

    ADVERTISE = "ADVERTISE"
    ANALYZE = "ANALYZE"
    CASHIER_ROLE = "CASHIER_ROLE"
    CREATE_CONTENT = "CREATE_CONTENT"
    GLOBAL_STRUCTURE_MANAGEMENT = "GLOBAL_STRUCTURE_MANAGEMENT"
    MANAGE = "MANAGE"
    MANAGE_JOBS = "MANAGE_JOBS"
    MANAGE_LEADS = "MANAGE_LEADS"
    MESSAGING = "MESSAGING"
    MODERATE = "MODERATE"
    MODERATE_COMMUNITY = "MODERATE_COMMUNITY"
    PAGES_MESSAGING = "PAGES_MESSAGING"
    PAGES_MESSAGING_SUBSCRIPTIONS = "PAGES_MESSAGING_SUBSCRIPTIONS"
    PROFILE_PLUS_ADVERTISE = "PROFILE_PLUS_ADVERTISE"
    PROFILE_PLUS_ANALYZE = "PROFILE_PLUS_ANALYZE"
    PROFILE_PLUS_CREATE_CONTENT = "PROFILE_PLUS_CREATE_CONTENT"
    PROFILE_PLUS_FACEBOOK_ACCESS = "PROFILE_PLUS_FACEBOOK_ACCESS"
    PROFILE_PLUS_FULL_CONTROL = "PROFILE_PLUS_FULL_CONTROL"
    PROFILE_PLUS_MANAGE = "PROFILE_PLUS_MANAGE"
    PROFILE_PLUS_MANAGE_LEADS = "PROFILE_PLUS_MANAGE_LEADS"
    PROFILE_PLUS_MESSAGING = "PROFILE_PLUS_MESSAGING"
    PROFILE_PLUS_MODERATE = "PROFILE_PLUS_MODERATE"
    PROFILE_PLUS_MODERATE_DELEGATE_COMMUNITY = "PROFILE_PLUS_MODERATE_DELEGATE_COMMUNITY"
    PROFILE_PLUS_REVENUE = "PROFILE_PLUS_REVENUE"
    READ_PAGE_MAILBOXES = "READ_PAGE_MAILBOXES"
    VIEW_MONETIZATION_INSIGHTS = "VIEW_MONETIZATION_INSIGHTS"


class businessassetgroupassigned_users_pixel_tasks_enum_param(str, Enum):
    """businessassetgroupassigned_users_pixel_tasks_enum_param enum values."""

    AA_ANALYZE = "AA_ANALYZE"
    ADVERTISE = "ADVERTISE"
    ANALYZE = "ANALYZE"
    EDIT = "EDIT"
    UPLOAD = "UPLOAD"


class businessbusiness_invoices_type_enum_param(str, Enum):
    """businessbusiness_invoices_type_enum_param enum values."""

    CM = "CM"
    DM = "DM"
    INV = "INV"
    PRO_FORMA = "PRO_FORMA"


class businessbusiness_users_invited_user_type_enum_param(str, Enum):
    """businessbusiness_users_invited_user_type_enum_param enum values."""

    FB = "FB"
    MWA = "MWA"


class businessbusiness_users_role_enum_param(str, Enum):
    """businessbusiness_users_role_enum_param enum values."""

    ADMIN = "ADMIN"
    ADS_RIGHTS_REVIEWER = "ADS_RIGHTS_REVIEWER"
    DEFAULT = "DEFAULT"
    DEVELOPER = "DEVELOPER"
    EMPLOYEE = "EMPLOYEE"
    FINANCE_ANALYST = "FINANCE_ANALYST"
    FINANCE_EDIT = "FINANCE_EDIT"
    FINANCE_EDITOR = "FINANCE_EDITOR"
    FINANCE_VIEW = "FINANCE_VIEW"
    MANAGE = "MANAGE"
    PARTNER_CENTER_ADMIN = "PARTNER_CENTER_ADMIN"
    PARTNER_CENTER_ANALYST = "PARTNER_CENTER_ANALYST"
    PARTNER_CENTER_EDUCATION = "PARTNER_CENTER_EDUCATION"
    PARTNER_CENTER_MARKETING = "PARTNER_CENTER_MARKETING"
    PARTNER_CENTER_OPERATIONS = "PARTNER_CENTER_OPERATIONS"


class businessbusiness_users_tasks_enum_param(str, Enum):
    """businessbusiness_users_tasks_enum_param enum values."""

    ADMIN = "ADMIN"
    ADS_RIGHTS_REVIEWER = "ADS_RIGHTS_REVIEWER"
    DEFAULT = "DEFAULT"
    DEVELOPER = "DEVELOPER"
    EMPLOYEE = "EMPLOYEE"
    FINANCE_ANALYST = "FINANCE_ANALYST"
    FINANCE_EDIT = "FINANCE_EDIT"
    FINANCE_EDITOR = "FINANCE_EDITOR"
    FINANCE_VIEW = "FINANCE_VIEW"
    MANAGE = "MANAGE"
    PARTNER_CENTER_ADMIN = "PARTNER_CENTER_ADMIN"
    PARTNER_CENTER_ANALYST = "PARTNER_CENTER_ANALYST"
    PARTNER_CENTER_EDUCATION = "PARTNER_CENTER_EDUCATION"
    PARTNER_CENTER_MARKETING = "PARTNER_CENTER_MARKETING"
    PARTNER_CENTER_OPERATIONS = "PARTNER_CENTER_OPERATIONS"


class businessclient_pages_permitted_tasks_enum_param(str, Enum):
    """businessclient_pages_permitted_tasks_enum_param enum values."""

    ADVERTISE = "ADVERTISE"
    ANALYZE = "ANALYZE"
    CASHIER_ROLE = "CASHIER_ROLE"
    CREATE_CONTENT = "CREATE_CONTENT"
    GLOBAL_STRUCTURE_MANAGEMENT = "GLOBAL_STRUCTURE_MANAGEMENT"
    MANAGE = "MANAGE"
    MANAGE_JOBS = "MANAGE_JOBS"
    MANAGE_LEADS = "MANAGE_LEADS"
    MESSAGING = "MESSAGING"
    MODERATE = "MODERATE"
    MODERATE_COMMUNITY = "MODERATE_COMMUNITY"
    PAGES_MESSAGING = "PAGES_MESSAGING"
    PAGES_MESSAGING_SUBSCRIPTIONS = "PAGES_MESSAGING_SUBSCRIPTIONS"
    PROFILE_PLUS_ADVERTISE = "PROFILE_PLUS_ADVERTISE"
    PROFILE_PLUS_ANALYZE = "PROFILE_PLUS_ANALYZE"
    PROFILE_PLUS_CREATE_CONTENT = "PROFILE_PLUS_CREATE_CONTENT"
    PROFILE_PLUS_FACEBOOK_ACCESS = "PROFILE_PLUS_FACEBOOK_ACCESS"
    PROFILE_PLUS_FULL_CONTROL = "PROFILE_PLUS_FULL_CONTROL"
    PROFILE_PLUS_MANAGE = "PROFILE_PLUS_MANAGE"
    PROFILE_PLUS_MANAGE_LEADS = "PROFILE_PLUS_MANAGE_LEADS"
    PROFILE_PLUS_MESSAGING = "PROFILE_PLUS_MESSAGING"
    PROFILE_PLUS_MODERATE = "PROFILE_PLUS_MODERATE"
    PROFILE_PLUS_MODERATE_DELEGATE_COMMUNITY = "PROFILE_PLUS_MODERATE_DELEGATE_COMMUNITY"
    PROFILE_PLUS_REVENUE = "PROFILE_PLUS_REVENUE"
    READ_PAGE_MAILBOXES = "READ_PAGE_MAILBOXES"
    VIEW_MONETIZATION_INSIGHTS = "VIEW_MONETIZATION_INSIGHTS"


class businesscollaborative_ads_collaboration_requests_requester_agency_or_brand_enum_param(
    str, Enum
):
    """businesscollaborative_ads_collaboration_requests_requester_agency_or_brand_enum_param enum values."""

    AGENCY = "AGENCY"
    BRAND = "BRAND"
    MERCHANT = "MERCHANT"


class businesscustomconversions_action_source_type_enum_param(str, Enum):
    """businesscustomconversions_action_source_type_enum_param enum values."""

    app = "app"
    business_messaging = "business_messaging"
    chat = "chat"
    email = "email"
    other = "other"
    phone_call = "phone_call"
    physical_store = "physical_store"
    system_generated = "system_generated"
    website = "website"


class businesscustomconversions_custom_event_type_enum_param(str, Enum):
    """businesscustomconversions_custom_event_type_enum_param enum values."""

    ADD_PAYMENT_INFO = "ADD_PAYMENT_INFO"
    ADD_TO_CART = "ADD_TO_CART"
    ADD_TO_WISHLIST = "ADD_TO_WISHLIST"
    COMPLETE_REGISTRATION = "COMPLETE_REGISTRATION"
    CONTACT = "CONTACT"
    CONTENT_VIEW = "CONTENT_VIEW"
    CUSTOMIZE_PRODUCT = "CUSTOMIZE_PRODUCT"
    DONATE = "DONATE"
    FACEBOOK_SELECTED = "FACEBOOK_SELECTED"
    FIND_LOCATION = "FIND_LOCATION"
    INITIATED_CHECKOUT = "INITIATED_CHECKOUT"
    LEAD = "LEAD"
    LISTING_INTERACTION = "LISTING_INTERACTION"
    OTHER = "OTHER"
    PURCHASE = "PURCHASE"
    SCHEDULE = "SCHEDULE"
    SEARCH = "SEARCH"
    START_TRIAL = "START_TRIAL"
    SUBMIT_APPLICATION = "SUBMIT_APPLICATION"
    SUBSCRIBE = "SUBSCRIBE"


class businessimages_validation_ad_placements_enum_param(str, Enum):
    """businessimages_validation_ad_placements_enum_param enum values."""

    AUDIENCE_NETWORK_INSTREAM_VIDEO = "AUDIENCE_NETWORK_INSTREAM_VIDEO"
    AUDIENCE_NETWORK_INSTREAM_VIDEO_MOBILE = "AUDIENCE_NETWORK_INSTREAM_VIDEO_MOBILE"
    AUDIENCE_NETWORK_REWARDED_VIDEO = "AUDIENCE_NETWORK_REWARDED_VIDEO"
    DESKTOP_FEED_STANDARD = "DESKTOP_FEED_STANDARD"
    FACEBOOK_STORY_MOBILE = "FACEBOOK_STORY_MOBILE"
    FACEBOOK_STORY_STICKER_MOBILE = "FACEBOOK_STORY_STICKER_MOBILE"
    INSTAGRAM_STANDARD = "INSTAGRAM_STANDARD"
    INSTAGRAM_STORY = "INSTAGRAM_STORY"
    INSTANT_ARTICLE_STANDARD = "INSTANT_ARTICLE_STANDARD"
    INSTREAM_BANNER_DESKTOP = "INSTREAM_BANNER_DESKTOP"
    INSTREAM_BANNER_MOBILE = "INSTREAM_BANNER_MOBILE"
    INSTREAM_VIDEO_DESKTOP = "INSTREAM_VIDEO_DESKTOP"
    INSTREAM_VIDEO_IMAGE = "INSTREAM_VIDEO_IMAGE"
    INSTREAM_VIDEO_MOBILE = "INSTREAM_VIDEO_MOBILE"
    MESSENGER_MOBILE_INBOX_MEDIA = "MESSENGER_MOBILE_INBOX_MEDIA"
    MESSENGER_MOBILE_STORY_MEDIA = "MESSENGER_MOBILE_STORY_MEDIA"
    MOBILE_FEED_STANDARD = "MOBILE_FEED_STANDARD"
    MOBILE_FULLWIDTH = "MOBILE_FULLWIDTH"
    MOBILE_INTERSTITIAL = "MOBILE_INTERSTITIAL"
    MOBILE_MEDIUM_RECTANGLE = "MOBILE_MEDIUM_RECTANGLE"
    MOBILE_NATIVE = "MOBILE_NATIVE"
    RIGHT_COLUMN_STANDARD = "RIGHT_COLUMN_STANDARD"
    SUGGESTED_VIDEO_MOBILE = "SUGGESTED_VIDEO_MOBILE"


class businessinitiated_audience_sharing_requests_request_status_enum_param(str, Enum):
    """businessinitiated_audience_sharing_requests_request_status_enum_param enum values."""

    APPROVE = "APPROVE"
    CANCELED = "CANCELED"
    DECLINE = "DECLINE"
    EXPIRED = "EXPIRED"
    IN_PROGRESS = "IN_PROGRESS"
    PENDING = "PENDING"
    PENDING_EMAIL_VERIFICATION = "PENDING_EMAIL_VERIFICATION"
    PENDING_INTEGRITY_REVIEW = "PENDING_INTEGRITY_REVIEW"


class businessmanaged_businesses_survey_business_type_enum_param(str, Enum):
    """businessmanaged_businesses_survey_business_type_enum_param enum values."""

    ADVERTISER = "ADVERTISER"
    AGENCY = "AGENCY"
    APP_DEVELOPER = "APP_DEVELOPER"
    PUBLISHER = "PUBLISHER"


class businessmanaged_businesses_timezone_id_enum_param(str, Enum):
    """businessmanaged_businesses_timezone_id_enum_param enum values."""

    VALUE_0 = "0"
    VALUE_1 = "1"
    VALUE_2 = "2"
    VALUE_3 = "3"
    VALUE_4 = "4"
    VALUE_5 = "5"
    VALUE_6 = "6"
    VALUE_7 = "7"
    VALUE_8 = "8"
    VALUE_9 = "9"
    VALUE_10 = "10"
    VALUE_11 = "11"
    VALUE_12 = "12"
    VALUE_13 = "13"
    VALUE_14 = "14"
    VALUE_15 = "15"
    VALUE_16 = "16"
    VALUE_17 = "17"
    VALUE_18 = "18"
    VALUE_19 = "19"
    VALUE_20 = "20"
    VALUE_21 = "21"
    VALUE_22 = "22"
    VALUE_23 = "23"
    VALUE_24 = "24"
    VALUE_25 = "25"
    VALUE_26 = "26"
    VALUE_27 = "27"
    VALUE_28 = "28"
    VALUE_29 = "29"
    VALUE_30 = "30"
    VALUE_31 = "31"
    VALUE_32 = "32"
    VALUE_33 = "33"
    VALUE_34 = "34"
    VALUE_35 = "35"
    VALUE_36 = "36"
    VALUE_37 = "37"
    VALUE_38 = "38"
    VALUE_39 = "39"
    VALUE_40 = "40"
    VALUE_41 = "41"
    VALUE_42 = "42"
    VALUE_43 = "43"
    VALUE_44 = "44"
    VALUE_45 = "45"
    VALUE_46 = "46"
    VALUE_47 = "47"
    VALUE_48 = "48"
    VALUE_49 = "49"
    VALUE_50 = "50"
    VALUE_51 = "51"
    VALUE_52 = "52"
    VALUE_53 = "53"
    VALUE_54 = "54"
    VALUE_55 = "55"
    VALUE_56 = "56"
    VALUE_57 = "57"
    VALUE_58 = "58"
    VALUE_59 = "59"
    VALUE_60 = "60"
    VALUE_61 = "61"
    VALUE_62 = "62"
    VALUE_63 = "63"
    VALUE_64 = "64"
    VALUE_65 = "65"
    VALUE_66 = "66"
    VALUE_67 = "67"
    VALUE_68 = "68"
    VALUE_69 = "69"
    VALUE_70 = "70"
    VALUE_71 = "71"
    VALUE_72 = "72"
    VALUE_73 = "73"
    VALUE_74 = "74"
    VALUE_75 = "75"
    VALUE_76 = "76"
    VALUE_77 = "77"
    VALUE_78 = "78"
    VALUE_79 = "79"
    VALUE_80 = "80"
    VALUE_81 = "81"
    VALUE_82 = "82"
    VALUE_83 = "83"
    VALUE_84 = "84"
    VALUE_85 = "85"
    VALUE_86 = "86"
    VALUE_87 = "87"
    VALUE_88 = "88"
    VALUE_89 = "89"
    VALUE_90 = "90"
    VALUE_91 = "91"
    VALUE_92 = "92"
    VALUE_93 = "93"
    VALUE_94 = "94"
    VALUE_95 = "95"
    VALUE_96 = "96"
    VALUE_97 = "97"
    VALUE_98 = "98"
    VALUE_99 = "99"
    VALUE_100 = "100"
    VALUE_101 = "101"
    VALUE_102 = "102"
    VALUE_103 = "103"
    VALUE_104 = "104"
    VALUE_105 = "105"
    VALUE_106 = "106"
    VALUE_107 = "107"
    VALUE_108 = "108"
    VALUE_109 = "109"
    VALUE_110 = "110"
    VALUE_111 = "111"
    VALUE_112 = "112"
    VALUE_113 = "113"
    VALUE_114 = "114"
    VALUE_115 = "115"
    VALUE_116 = "116"
    VALUE_117 = "117"
    VALUE_118 = "118"
    VALUE_119 = "119"
    VALUE_120 = "120"
    VALUE_121 = "121"
    VALUE_122 = "122"
    VALUE_123 = "123"
    VALUE_124 = "124"
    VALUE_125 = "125"
    VALUE_126 = "126"
    VALUE_127 = "127"
    VALUE_128 = "128"
    VALUE_129 = "129"
    VALUE_130 = "130"
    VALUE_131 = "131"
    VALUE_132 = "132"
    VALUE_133 = "133"
    VALUE_134 = "134"
    VALUE_135 = "135"
    VALUE_136 = "136"
    VALUE_137 = "137"
    VALUE_138 = "138"
    VALUE_139 = "139"
    VALUE_140 = "140"
    VALUE_141 = "141"
    VALUE_142 = "142"
    VALUE_143 = "143"
    VALUE_144 = "144"
    VALUE_145 = "145"
    VALUE_146 = "146"
    VALUE_147 = "147"
    VALUE_148 = "148"
    VALUE_149 = "149"
    VALUE_150 = "150"
    VALUE_151 = "151"
    VALUE_152 = "152"
    VALUE_153 = "153"
    VALUE_154 = "154"
    VALUE_155 = "155"
    VALUE_156 = "156"
    VALUE_157 = "157"
    VALUE_158 = "158"
    VALUE_159 = "159"
    VALUE_160 = "160"
    VALUE_161 = "161"
    VALUE_162 = "162"
    VALUE_163 = "163"
    VALUE_164 = "164"
    VALUE_165 = "165"
    VALUE_166 = "166"
    VALUE_167 = "167"
    VALUE_168 = "168"
    VALUE_169 = "169"
    VALUE_170 = "170"
    VALUE_171 = "171"
    VALUE_172 = "172"
    VALUE_173 = "173"
    VALUE_174 = "174"
    VALUE_175 = "175"
    VALUE_176 = "176"
    VALUE_177 = "177"
    VALUE_178 = "178"
    VALUE_179 = "179"
    VALUE_180 = "180"
    VALUE_181 = "181"
    VALUE_182 = "182"
    VALUE_183 = "183"
    VALUE_184 = "184"
    VALUE_185 = "185"
    VALUE_186 = "186"
    VALUE_187 = "187"
    VALUE_188 = "188"
    VALUE_189 = "189"
    VALUE_190 = "190"
    VALUE_191 = "191"
    VALUE_192 = "192"
    VALUE_193 = "193"
    VALUE_194 = "194"
    VALUE_195 = "195"
    VALUE_196 = "196"
    VALUE_197 = "197"
    VALUE_198 = "198"
    VALUE_199 = "199"
    VALUE_200 = "200"
    VALUE_201 = "201"
    VALUE_202 = "202"
    VALUE_203 = "203"
    VALUE_204 = "204"
    VALUE_205 = "205"
    VALUE_206 = "206"
    VALUE_207 = "207"
    VALUE_208 = "208"
    VALUE_209 = "209"
    VALUE_210 = "210"
    VALUE_211 = "211"
    VALUE_212 = "212"
    VALUE_213 = "213"
    VALUE_214 = "214"
    VALUE_215 = "215"
    VALUE_216 = "216"
    VALUE_217 = "217"
    VALUE_218 = "218"
    VALUE_219 = "219"
    VALUE_220 = "220"
    VALUE_221 = "221"
    VALUE_222 = "222"
    VALUE_223 = "223"
    VALUE_224 = "224"
    VALUE_225 = "225"
    VALUE_226 = "226"
    VALUE_227 = "227"
    VALUE_228 = "228"
    VALUE_229 = "229"
    VALUE_230 = "230"
    VALUE_231 = "231"
    VALUE_232 = "232"
    VALUE_233 = "233"
    VALUE_234 = "234"
    VALUE_235 = "235"
    VALUE_236 = "236"
    VALUE_237 = "237"
    VALUE_238 = "238"
    VALUE_239 = "239"
    VALUE_240 = "240"
    VALUE_241 = "241"
    VALUE_242 = "242"
    VALUE_243 = "243"
    VALUE_244 = "244"
    VALUE_245 = "245"
    VALUE_246 = "246"
    VALUE_247 = "247"
    VALUE_248 = "248"
    VALUE_249 = "249"
    VALUE_250 = "250"
    VALUE_251 = "251"
    VALUE_252 = "252"
    VALUE_253 = "253"
    VALUE_254 = "254"
    VALUE_255 = "255"
    VALUE_256 = "256"
    VALUE_257 = "257"
    VALUE_258 = "258"
    VALUE_259 = "259"
    VALUE_260 = "260"
    VALUE_261 = "261"
    VALUE_262 = "262"
    VALUE_263 = "263"
    VALUE_264 = "264"
    VALUE_265 = "265"
    VALUE_266 = "266"
    VALUE_267 = "267"
    VALUE_268 = "268"
    VALUE_269 = "269"
    VALUE_270 = "270"
    VALUE_271 = "271"
    VALUE_272 = "272"
    VALUE_273 = "273"
    VALUE_274 = "274"
    VALUE_275 = "275"
    VALUE_276 = "276"
    VALUE_277 = "277"
    VALUE_278 = "278"
    VALUE_279 = "279"
    VALUE_280 = "280"
    VALUE_281 = "281"
    VALUE_282 = "282"
    VALUE_283 = "283"
    VALUE_284 = "284"
    VALUE_285 = "285"
    VALUE_286 = "286"
    VALUE_287 = "287"
    VALUE_288 = "288"
    VALUE_289 = "289"
    VALUE_290 = "290"
    VALUE_291 = "291"
    VALUE_292 = "292"
    VALUE_293 = "293"
    VALUE_294 = "294"
    VALUE_295 = "295"
    VALUE_296 = "296"
    VALUE_297 = "297"
    VALUE_298 = "298"
    VALUE_299 = "299"
    VALUE_300 = "300"
    VALUE_301 = "301"
    VALUE_302 = "302"
    VALUE_303 = "303"
    VALUE_304 = "304"
    VALUE_305 = "305"
    VALUE_306 = "306"
    VALUE_307 = "307"
    VALUE_308 = "308"
    VALUE_309 = "309"
    VALUE_310 = "310"
    VALUE_311 = "311"
    VALUE_312 = "312"
    VALUE_313 = "313"
    VALUE_314 = "314"
    VALUE_315 = "315"
    VALUE_316 = "316"
    VALUE_317 = "317"
    VALUE_318 = "318"
    VALUE_319 = "319"
    VALUE_320 = "320"
    VALUE_321 = "321"
    VALUE_322 = "322"
    VALUE_323 = "323"
    VALUE_324 = "324"
    VALUE_325 = "325"
    VALUE_326 = "326"
    VALUE_327 = "327"
    VALUE_328 = "328"
    VALUE_329 = "329"
    VALUE_330 = "330"
    VALUE_331 = "331"
    VALUE_332 = "332"
    VALUE_333 = "333"
    VALUE_334 = "334"
    VALUE_335 = "335"
    VALUE_336 = "336"
    VALUE_337 = "337"
    VALUE_338 = "338"
    VALUE_339 = "339"
    VALUE_340 = "340"
    VALUE_341 = "341"
    VALUE_342 = "342"
    VALUE_343 = "343"
    VALUE_344 = "344"
    VALUE_345 = "345"
    VALUE_346 = "346"
    VALUE_347 = "347"
    VALUE_348 = "348"
    VALUE_349 = "349"
    VALUE_350 = "350"
    VALUE_351 = "351"
    VALUE_352 = "352"
    VALUE_353 = "353"
    VALUE_354 = "354"
    VALUE_355 = "355"
    VALUE_356 = "356"
    VALUE_357 = "357"
    VALUE_358 = "358"
    VALUE_359 = "359"
    VALUE_360 = "360"
    VALUE_361 = "361"
    VALUE_362 = "362"
    VALUE_363 = "363"
    VALUE_364 = "364"
    VALUE_365 = "365"
    VALUE_366 = "366"
    VALUE_367 = "367"
    VALUE_368 = "368"
    VALUE_369 = "369"
    VALUE_370 = "370"
    VALUE_371 = "371"
    VALUE_372 = "372"
    VALUE_373 = "373"
    VALUE_374 = "374"
    VALUE_375 = "375"
    VALUE_376 = "376"
    VALUE_377 = "377"
    VALUE_378 = "378"
    VALUE_379 = "379"
    VALUE_380 = "380"
    VALUE_381 = "381"
    VALUE_382 = "382"
    VALUE_383 = "383"
    VALUE_384 = "384"
    VALUE_385 = "385"
    VALUE_386 = "386"
    VALUE_387 = "387"
    VALUE_388 = "388"
    VALUE_389 = "389"
    VALUE_390 = "390"
    VALUE_391 = "391"
    VALUE_392 = "392"
    VALUE_393 = "393"
    VALUE_394 = "394"
    VALUE_395 = "395"
    VALUE_396 = "396"
    VALUE_397 = "397"
    VALUE_398 = "398"
    VALUE_399 = "399"
    VALUE_400 = "400"
    VALUE_401 = "401"
    VALUE_402 = "402"
    VALUE_403 = "403"
    VALUE_404 = "404"
    VALUE_405 = "405"
    VALUE_406 = "406"
    VALUE_407 = "407"
    VALUE_408 = "408"
    VALUE_409 = "409"
    VALUE_410 = "410"
    VALUE_411 = "411"
    VALUE_412 = "412"
    VALUE_413 = "413"
    VALUE_414 = "414"
    VALUE_415 = "415"
    VALUE_416 = "416"
    VALUE_417 = "417"
    VALUE_418 = "418"
    VALUE_419 = "419"
    VALUE_420 = "420"
    VALUE_421 = "421"
    VALUE_422 = "422"
    VALUE_423 = "423"
    VALUE_424 = "424"
    VALUE_425 = "425"
    VALUE_426 = "426"
    VALUE_427 = "427"
    VALUE_428 = "428"
    VALUE_429 = "429"
    VALUE_430 = "430"
    VALUE_431 = "431"
    VALUE_432 = "432"
    VALUE_433 = "433"
    VALUE_434 = "434"
    VALUE_435 = "435"
    VALUE_436 = "436"
    VALUE_437 = "437"
    VALUE_438 = "438"
    VALUE_439 = "439"
    VALUE_440 = "440"
    VALUE_441 = "441"
    VALUE_442 = "442"
    VALUE_443 = "443"
    VALUE_444 = "444"
    VALUE_445 = "445"
    VALUE_446 = "446"
    VALUE_447 = "447"
    VALUE_448 = "448"
    VALUE_449 = "449"
    VALUE_450 = "450"
    VALUE_451 = "451"
    VALUE_452 = "452"
    VALUE_453 = "453"
    VALUE_454 = "454"
    VALUE_455 = "455"
    VALUE_456 = "456"
    VALUE_457 = "457"
    VALUE_458 = "458"
    VALUE_459 = "459"
    VALUE_460 = "460"
    VALUE_461 = "461"
    VALUE_462 = "462"
    VALUE_463 = "463"
    VALUE_464 = "464"
    VALUE_465 = "465"
    VALUE_466 = "466"
    VALUE_467 = "467"
    VALUE_468 = "468"
    VALUE_469 = "469"
    VALUE_470 = "470"
    VALUE_471 = "471"
    VALUE_472 = "472"
    VALUE_473 = "473"
    VALUE_474 = "474"
    VALUE_475 = "475"
    VALUE_476 = "476"
    VALUE_477 = "477"
    VALUE_478 = "478"
    VALUE_479 = "479"
    VALUE_480 = "480"


class businessmanaged_businesses_vertical_enum_param(str, Enum):
    """businessmanaged_businesses_vertical_enum_param enum values."""

    ADVERTISING = "ADVERTISING"
    AUTOMOTIVE = "AUTOMOTIVE"
    CONSUMER_PACKAGED_GOODS = "CONSUMER_PACKAGED_GOODS"
    ECOMMERCE = "ECOMMERCE"
    EDUCATION = "EDUCATION"
    ENERGY_AND_UTILITIES = "ENERGY_AND_UTILITIES"
    ENTERTAINMENT_AND_MEDIA = "ENTERTAINMENT_AND_MEDIA"
    FINANCIAL_SERVICES = "FINANCIAL_SERVICES"
    GAMING = "GAMING"
    GOVERNMENT_AND_POLITICS = "GOVERNMENT_AND_POLITICS"
    HEALTH = "HEALTH"
    LUXURY = "LUXURY"
    MARKETING = "MARKETING"
    NON_PROFIT = "NON_PROFIT"
    NOT_SET = "NOT_SET"
    ORGANIZATIONS_AND_ASSOCIATIONS = "ORGANIZATIONS_AND_ASSOCIATIONS"
    OTHER = "OTHER"
    PROFESSIONAL_SERVICES = "PROFESSIONAL_SERVICES"
    RESTAURANT = "RESTAURANT"
    RETAIL = "RETAIL"
    TECHNOLOGY = "TECHNOLOGY"
    TELECOM = "TELECOM"
    TRAVEL = "TRAVEL"


class businessmanaged_partner_businesses_partition_type_enum_param(str, Enum):
    """businessmanaged_partner_businesses_partition_type_enum_param enum values."""

    AUTH = "AUTH"
    FIXED = "FIXED"
    FIXED_WITHOUT_PARTITION = "FIXED_WITHOUT_PARTITION"


class businessmanaged_partner_businesses_survey_business_type_enum_param(str, Enum):
    """businessmanaged_partner_businesses_survey_business_type_enum_param enum values."""

    ADVERTISER = "ADVERTISER"
    AGENCY = "AGENCY"
    APP_DEVELOPER = "APP_DEVELOPER"
    PUBLISHER = "PUBLISHER"


class businessmanaged_partner_businesses_timezone_id_enum_param(str, Enum):
    """businessmanaged_partner_businesses_timezone_id_enum_param enum values."""

    VALUE_0 = "0"
    VALUE_1 = "1"
    VALUE_2 = "2"
    VALUE_3 = "3"
    VALUE_4 = "4"
    VALUE_5 = "5"
    VALUE_6 = "6"
    VALUE_7 = "7"
    VALUE_8 = "8"
    VALUE_9 = "9"
    VALUE_10 = "10"
    VALUE_11 = "11"
    VALUE_12 = "12"
    VALUE_13 = "13"
    VALUE_14 = "14"
    VALUE_15 = "15"
    VALUE_16 = "16"
    VALUE_17 = "17"
    VALUE_18 = "18"
    VALUE_19 = "19"
    VALUE_20 = "20"
    VALUE_21 = "21"
    VALUE_22 = "22"
    VALUE_23 = "23"
    VALUE_24 = "24"
    VALUE_25 = "25"
    VALUE_26 = "26"
    VALUE_27 = "27"
    VALUE_28 = "28"
    VALUE_29 = "29"
    VALUE_30 = "30"
    VALUE_31 = "31"
    VALUE_32 = "32"
    VALUE_33 = "33"
    VALUE_34 = "34"
    VALUE_35 = "35"
    VALUE_36 = "36"
    VALUE_37 = "37"
    VALUE_38 = "38"
    VALUE_39 = "39"
    VALUE_40 = "40"
    VALUE_41 = "41"
    VALUE_42 = "42"
    VALUE_43 = "43"
    VALUE_44 = "44"
    VALUE_45 = "45"
    VALUE_46 = "46"
    VALUE_47 = "47"
    VALUE_48 = "48"
    VALUE_49 = "49"
    VALUE_50 = "50"
    VALUE_51 = "51"
    VALUE_52 = "52"
    VALUE_53 = "53"
    VALUE_54 = "54"
    VALUE_55 = "55"
    VALUE_56 = "56"
    VALUE_57 = "57"
    VALUE_58 = "58"
    VALUE_59 = "59"
    VALUE_60 = "60"
    VALUE_61 = "61"
    VALUE_62 = "62"
    VALUE_63 = "63"
    VALUE_64 = "64"
    VALUE_65 = "65"
    VALUE_66 = "66"
    VALUE_67 = "67"
    VALUE_68 = "68"
    VALUE_69 = "69"
    VALUE_70 = "70"
    VALUE_71 = "71"
    VALUE_72 = "72"
    VALUE_73 = "73"
    VALUE_74 = "74"
    VALUE_75 = "75"
    VALUE_76 = "76"
    VALUE_77 = "77"
    VALUE_78 = "78"
    VALUE_79 = "79"
    VALUE_80 = "80"
    VALUE_81 = "81"
    VALUE_82 = "82"
    VALUE_83 = "83"
    VALUE_84 = "84"
    VALUE_85 = "85"
    VALUE_86 = "86"
    VALUE_87 = "87"
    VALUE_88 = "88"
    VALUE_89 = "89"
    VALUE_90 = "90"
    VALUE_91 = "91"
    VALUE_92 = "92"
    VALUE_93 = "93"
    VALUE_94 = "94"
    VALUE_95 = "95"
    VALUE_96 = "96"
    VALUE_97 = "97"
    VALUE_98 = "98"
    VALUE_99 = "99"
    VALUE_100 = "100"
    VALUE_101 = "101"
    VALUE_102 = "102"
    VALUE_103 = "103"
    VALUE_104 = "104"
    VALUE_105 = "105"
    VALUE_106 = "106"
    VALUE_107 = "107"
    VALUE_108 = "108"
    VALUE_109 = "109"
    VALUE_110 = "110"
    VALUE_111 = "111"
    VALUE_112 = "112"
    VALUE_113 = "113"
    VALUE_114 = "114"
    VALUE_115 = "115"
    VALUE_116 = "116"
    VALUE_117 = "117"
    VALUE_118 = "118"
    VALUE_119 = "119"
    VALUE_120 = "120"
    VALUE_121 = "121"
    VALUE_122 = "122"
    VALUE_123 = "123"
    VALUE_124 = "124"
    VALUE_125 = "125"
    VALUE_126 = "126"
    VALUE_127 = "127"
    VALUE_128 = "128"
    VALUE_129 = "129"
    VALUE_130 = "130"
    VALUE_131 = "131"
    VALUE_132 = "132"
    VALUE_133 = "133"
    VALUE_134 = "134"
    VALUE_135 = "135"
    VALUE_136 = "136"
    VALUE_137 = "137"
    VALUE_138 = "138"
    VALUE_139 = "139"
    VALUE_140 = "140"
    VALUE_141 = "141"
    VALUE_142 = "142"
    VALUE_143 = "143"
    VALUE_144 = "144"
    VALUE_145 = "145"
    VALUE_146 = "146"
    VALUE_147 = "147"
    VALUE_148 = "148"
    VALUE_149 = "149"
    VALUE_150 = "150"
    VALUE_151 = "151"
    VALUE_152 = "152"
    VALUE_153 = "153"
    VALUE_154 = "154"
    VALUE_155 = "155"
    VALUE_156 = "156"
    VALUE_157 = "157"
    VALUE_158 = "158"
    VALUE_159 = "159"
    VALUE_160 = "160"
    VALUE_161 = "161"
    VALUE_162 = "162"
    VALUE_163 = "163"
    VALUE_164 = "164"
    VALUE_165 = "165"
    VALUE_166 = "166"
    VALUE_167 = "167"
    VALUE_168 = "168"
    VALUE_169 = "169"
    VALUE_170 = "170"
    VALUE_171 = "171"
    VALUE_172 = "172"
    VALUE_173 = "173"
    VALUE_174 = "174"
    VALUE_175 = "175"
    VALUE_176 = "176"
    VALUE_177 = "177"
    VALUE_178 = "178"
    VALUE_179 = "179"
    VALUE_180 = "180"
    VALUE_181 = "181"
    VALUE_182 = "182"
    VALUE_183 = "183"
    VALUE_184 = "184"
    VALUE_185 = "185"
    VALUE_186 = "186"
    VALUE_187 = "187"
    VALUE_188 = "188"
    VALUE_189 = "189"
    VALUE_190 = "190"
    VALUE_191 = "191"
    VALUE_192 = "192"
    VALUE_193 = "193"
    VALUE_194 = "194"
    VALUE_195 = "195"
    VALUE_196 = "196"
    VALUE_197 = "197"
    VALUE_198 = "198"
    VALUE_199 = "199"
    VALUE_200 = "200"
    VALUE_201 = "201"
    VALUE_202 = "202"
    VALUE_203 = "203"
    VALUE_204 = "204"
    VALUE_205 = "205"
    VALUE_206 = "206"
    VALUE_207 = "207"
    VALUE_208 = "208"
    VALUE_209 = "209"
    VALUE_210 = "210"
    VALUE_211 = "211"
    VALUE_212 = "212"
    VALUE_213 = "213"
    VALUE_214 = "214"
    VALUE_215 = "215"
    VALUE_216 = "216"
    VALUE_217 = "217"
    VALUE_218 = "218"
    VALUE_219 = "219"
    VALUE_220 = "220"
    VALUE_221 = "221"
    VALUE_222 = "222"
    VALUE_223 = "223"
    VALUE_224 = "224"
    VALUE_225 = "225"
    VALUE_226 = "226"
    VALUE_227 = "227"
    VALUE_228 = "228"
    VALUE_229 = "229"
    VALUE_230 = "230"
    VALUE_231 = "231"
    VALUE_232 = "232"
    VALUE_233 = "233"
    VALUE_234 = "234"
    VALUE_235 = "235"
    VALUE_236 = "236"
    VALUE_237 = "237"
    VALUE_238 = "238"
    VALUE_239 = "239"
    VALUE_240 = "240"
    VALUE_241 = "241"
    VALUE_242 = "242"
    VALUE_243 = "243"
    VALUE_244 = "244"
    VALUE_245 = "245"
    VALUE_246 = "246"
    VALUE_247 = "247"
    VALUE_248 = "248"
    VALUE_249 = "249"
    VALUE_250 = "250"
    VALUE_251 = "251"
    VALUE_252 = "252"
    VALUE_253 = "253"
    VALUE_254 = "254"
    VALUE_255 = "255"
    VALUE_256 = "256"
    VALUE_257 = "257"
    VALUE_258 = "258"
    VALUE_259 = "259"
    VALUE_260 = "260"
    VALUE_261 = "261"
    VALUE_262 = "262"
    VALUE_263 = "263"
    VALUE_264 = "264"
    VALUE_265 = "265"
    VALUE_266 = "266"
    VALUE_267 = "267"
    VALUE_268 = "268"
    VALUE_269 = "269"
    VALUE_270 = "270"
    VALUE_271 = "271"
    VALUE_272 = "272"
    VALUE_273 = "273"
    VALUE_274 = "274"
    VALUE_275 = "275"
    VALUE_276 = "276"
    VALUE_277 = "277"
    VALUE_278 = "278"
    VALUE_279 = "279"
    VALUE_280 = "280"
    VALUE_281 = "281"
    VALUE_282 = "282"
    VALUE_283 = "283"
    VALUE_284 = "284"
    VALUE_285 = "285"
    VALUE_286 = "286"
    VALUE_287 = "287"
    VALUE_288 = "288"
    VALUE_289 = "289"
    VALUE_290 = "290"
    VALUE_291 = "291"
    VALUE_292 = "292"
    VALUE_293 = "293"
    VALUE_294 = "294"
    VALUE_295 = "295"
    VALUE_296 = "296"
    VALUE_297 = "297"
    VALUE_298 = "298"
    VALUE_299 = "299"
    VALUE_300 = "300"
    VALUE_301 = "301"
    VALUE_302 = "302"
    VALUE_303 = "303"
    VALUE_304 = "304"
    VALUE_305 = "305"
    VALUE_306 = "306"
    VALUE_307 = "307"
    VALUE_308 = "308"
    VALUE_309 = "309"
    VALUE_310 = "310"
    VALUE_311 = "311"
    VALUE_312 = "312"
    VALUE_313 = "313"
    VALUE_314 = "314"
    VALUE_315 = "315"
    VALUE_316 = "316"
    VALUE_317 = "317"
    VALUE_318 = "318"
    VALUE_319 = "319"
    VALUE_320 = "320"
    VALUE_321 = "321"
    VALUE_322 = "322"
    VALUE_323 = "323"
    VALUE_324 = "324"
    VALUE_325 = "325"
    VALUE_326 = "326"
    VALUE_327 = "327"
    VALUE_328 = "328"
    VALUE_329 = "329"
    VALUE_330 = "330"
    VALUE_331 = "331"
    VALUE_332 = "332"
    VALUE_333 = "333"
    VALUE_334 = "334"
    VALUE_335 = "335"
    VALUE_336 = "336"
    VALUE_337 = "337"
    VALUE_338 = "338"
    VALUE_339 = "339"
    VALUE_340 = "340"
    VALUE_341 = "341"
    VALUE_342 = "342"
    VALUE_343 = "343"
    VALUE_344 = "344"
    VALUE_345 = "345"
    VALUE_346 = "346"
    VALUE_347 = "347"
    VALUE_348 = "348"
    VALUE_349 = "349"
    VALUE_350 = "350"
    VALUE_351 = "351"
    VALUE_352 = "352"
    VALUE_353 = "353"
    VALUE_354 = "354"
    VALUE_355 = "355"
    VALUE_356 = "356"
    VALUE_357 = "357"
    VALUE_358 = "358"
    VALUE_359 = "359"
    VALUE_360 = "360"
    VALUE_361 = "361"
    VALUE_362 = "362"
    VALUE_363 = "363"
    VALUE_364 = "364"
    VALUE_365 = "365"
    VALUE_366 = "366"
    VALUE_367 = "367"
    VALUE_368 = "368"
    VALUE_369 = "369"
    VALUE_370 = "370"
    VALUE_371 = "371"
    VALUE_372 = "372"
    VALUE_373 = "373"
    VALUE_374 = "374"
    VALUE_375 = "375"
    VALUE_376 = "376"
    VALUE_377 = "377"
    VALUE_378 = "378"
    VALUE_379 = "379"
    VALUE_380 = "380"
    VALUE_381 = "381"
    VALUE_382 = "382"
    VALUE_383 = "383"
    VALUE_384 = "384"
    VALUE_385 = "385"
    VALUE_386 = "386"
    VALUE_387 = "387"
    VALUE_388 = "388"
    VALUE_389 = "389"
    VALUE_390 = "390"
    VALUE_391 = "391"
    VALUE_392 = "392"
    VALUE_393 = "393"
    VALUE_394 = "394"
    VALUE_395 = "395"
    VALUE_396 = "396"
    VALUE_397 = "397"
    VALUE_398 = "398"
    VALUE_399 = "399"
    VALUE_400 = "400"
    VALUE_401 = "401"
    VALUE_402 = "402"
    VALUE_403 = "403"
    VALUE_404 = "404"
    VALUE_405 = "405"
    VALUE_406 = "406"
    VALUE_407 = "407"
    VALUE_408 = "408"
    VALUE_409 = "409"
    VALUE_410 = "410"
    VALUE_411 = "411"
    VALUE_412 = "412"
    VALUE_413 = "413"
    VALUE_414 = "414"
    VALUE_415 = "415"
    VALUE_416 = "416"
    VALUE_417 = "417"
    VALUE_418 = "418"
    VALUE_419 = "419"
    VALUE_420 = "420"
    VALUE_421 = "421"
    VALUE_422 = "422"
    VALUE_423 = "423"
    VALUE_424 = "424"
    VALUE_425 = "425"
    VALUE_426 = "426"
    VALUE_427 = "427"
    VALUE_428 = "428"
    VALUE_429 = "429"
    VALUE_430 = "430"
    VALUE_431 = "431"
    VALUE_432 = "432"
    VALUE_433 = "433"
    VALUE_434 = "434"
    VALUE_435 = "435"
    VALUE_436 = "436"
    VALUE_437 = "437"
    VALUE_438 = "438"
    VALUE_439 = "439"
    VALUE_440 = "440"
    VALUE_441 = "441"
    VALUE_442 = "442"
    VALUE_443 = "443"
    VALUE_444 = "444"
    VALUE_445 = "445"
    VALUE_446 = "446"
    VALUE_447 = "447"
    VALUE_448 = "448"
    VALUE_449 = "449"
    VALUE_450 = "450"
    VALUE_451 = "451"
    VALUE_452 = "452"
    VALUE_453 = "453"
    VALUE_454 = "454"
    VALUE_455 = "455"
    VALUE_456 = "456"
    VALUE_457 = "457"
    VALUE_458 = "458"
    VALUE_459 = "459"
    VALUE_460 = "460"
    VALUE_461 = "461"
    VALUE_462 = "462"
    VALUE_463 = "463"
    VALUE_464 = "464"
    VALUE_465 = "465"
    VALUE_466 = "466"
    VALUE_467 = "467"
    VALUE_468 = "468"
    VALUE_469 = "469"
    VALUE_470 = "470"
    VALUE_471 = "471"
    VALUE_472 = "472"
    VALUE_473 = "473"
    VALUE_474 = "474"
    VALUE_475 = "475"
    VALUE_476 = "476"
    VALUE_477 = "477"
    VALUE_478 = "478"
    VALUE_479 = "479"
    VALUE_480 = "480"


class businessmanaged_partner_businesses_vertical_enum_param(str, Enum):
    """businessmanaged_partner_businesses_vertical_enum_param enum values."""

    ADVERTISING = "ADVERTISING"
    AUTOMOTIVE = "AUTOMOTIVE"
    CONSUMER_PACKAGED_GOODS = "CONSUMER_PACKAGED_GOODS"
    ECOMMERCE = "ECOMMERCE"
    EDUCATION = "EDUCATION"
    ENERGY_AND_UTILITIES = "ENERGY_AND_UTILITIES"
    ENTERTAINMENT_AND_MEDIA = "ENTERTAINMENT_AND_MEDIA"
    FINANCIAL_SERVICES = "FINANCIAL_SERVICES"
    GAMING = "GAMING"
    GOVERNMENT_AND_POLITICS = "GOVERNMENT_AND_POLITICS"
    HEALTH = "HEALTH"
    LUXURY = "LUXURY"
    MARKETING = "MARKETING"
    NON_PROFIT = "NON_PROFIT"
    NOT_SET = "NOT_SET"
    ORGANIZATIONS_AND_ASSOCIATIONS = "ORGANIZATIONS_AND_ASSOCIATIONS"
    OTHER = "OTHER"
    PROFESSIONAL_SERVICES = "PROFESSIONAL_SERVICES"
    RESTAURANT = "RESTAURANT"
    RETAIL = "RETAIL"
    TECHNOLOGY = "TECHNOLOGY"
    TELECOM = "TELECOM"
    TRAVEL = "TRAVEL"


class businessowned_businesses_page_permitted_tasks_enum_param(str, Enum):
    """businessowned_businesses_page_permitted_tasks_enum_param enum values."""

    ADVERTISE = "ADVERTISE"
    ANALYZE = "ANALYZE"
    CASHIER_ROLE = "CASHIER_ROLE"
    CREATE_CONTENT = "CREATE_CONTENT"
    GLOBAL_STRUCTURE_MANAGEMENT = "GLOBAL_STRUCTURE_MANAGEMENT"
    MANAGE = "MANAGE"
    MANAGE_JOBS = "MANAGE_JOBS"
    MANAGE_LEADS = "MANAGE_LEADS"
    MESSAGING = "MESSAGING"
    MODERATE = "MODERATE"
    MODERATE_COMMUNITY = "MODERATE_COMMUNITY"
    PAGES_MESSAGING = "PAGES_MESSAGING"
    PAGES_MESSAGING_SUBSCRIPTIONS = "PAGES_MESSAGING_SUBSCRIPTIONS"
    PROFILE_PLUS_ADVERTISE = "PROFILE_PLUS_ADVERTISE"
    PROFILE_PLUS_ANALYZE = "PROFILE_PLUS_ANALYZE"
    PROFILE_PLUS_CREATE_CONTENT = "PROFILE_PLUS_CREATE_CONTENT"
    PROFILE_PLUS_FACEBOOK_ACCESS = "PROFILE_PLUS_FACEBOOK_ACCESS"
    PROFILE_PLUS_FULL_CONTROL = "PROFILE_PLUS_FULL_CONTROL"
    PROFILE_PLUS_MANAGE = "PROFILE_PLUS_MANAGE"
    PROFILE_PLUS_MANAGE_LEADS = "PROFILE_PLUS_MANAGE_LEADS"
    PROFILE_PLUS_MESSAGING = "PROFILE_PLUS_MESSAGING"
    PROFILE_PLUS_MODERATE = "PROFILE_PLUS_MODERATE"
    PROFILE_PLUS_MODERATE_DELEGATE_COMMUNITY = "PROFILE_PLUS_MODERATE_DELEGATE_COMMUNITY"
    PROFILE_PLUS_REVENUE = "PROFILE_PLUS_REVENUE"
    READ_PAGE_MAILBOXES = "READ_PAGE_MAILBOXES"
    VIEW_MONETIZATION_INSIGHTS = "VIEW_MONETIZATION_INSIGHTS"


class businessowned_businesses_survey_business_type_enum_param(str, Enum):
    """businessowned_businesses_survey_business_type_enum_param enum values."""

    ADVERTISER = "ADVERTISER"
    AGENCY = "AGENCY"
    APP_DEVELOPER = "APP_DEVELOPER"
    PUBLISHER = "PUBLISHER"


class businessowned_businesses_timezone_id_enum_param(str, Enum):
    """businessowned_businesses_timezone_id_enum_param enum values."""

    VALUE_0 = "0"
    VALUE_1 = "1"
    VALUE_2 = "2"
    VALUE_3 = "3"
    VALUE_4 = "4"
    VALUE_5 = "5"
    VALUE_6 = "6"
    VALUE_7 = "7"
    VALUE_8 = "8"
    VALUE_9 = "9"
    VALUE_10 = "10"
    VALUE_11 = "11"
    VALUE_12 = "12"
    VALUE_13 = "13"
    VALUE_14 = "14"
    VALUE_15 = "15"
    VALUE_16 = "16"
    VALUE_17 = "17"
    VALUE_18 = "18"
    VALUE_19 = "19"
    VALUE_20 = "20"
    VALUE_21 = "21"
    VALUE_22 = "22"
    VALUE_23 = "23"
    VALUE_24 = "24"
    VALUE_25 = "25"
    VALUE_26 = "26"
    VALUE_27 = "27"
    VALUE_28 = "28"
    VALUE_29 = "29"
    VALUE_30 = "30"
    VALUE_31 = "31"
    VALUE_32 = "32"
    VALUE_33 = "33"
    VALUE_34 = "34"
    VALUE_35 = "35"
    VALUE_36 = "36"
    VALUE_37 = "37"
    VALUE_38 = "38"
    VALUE_39 = "39"
    VALUE_40 = "40"
    VALUE_41 = "41"
    VALUE_42 = "42"
    VALUE_43 = "43"
    VALUE_44 = "44"
    VALUE_45 = "45"
    VALUE_46 = "46"
    VALUE_47 = "47"
    VALUE_48 = "48"
    VALUE_49 = "49"
    VALUE_50 = "50"
    VALUE_51 = "51"
    VALUE_52 = "52"
    VALUE_53 = "53"
    VALUE_54 = "54"
    VALUE_55 = "55"
    VALUE_56 = "56"
    VALUE_57 = "57"
    VALUE_58 = "58"
    VALUE_59 = "59"
    VALUE_60 = "60"
    VALUE_61 = "61"
    VALUE_62 = "62"
    VALUE_63 = "63"
    VALUE_64 = "64"
    VALUE_65 = "65"
    VALUE_66 = "66"
    VALUE_67 = "67"
    VALUE_68 = "68"
    VALUE_69 = "69"
    VALUE_70 = "70"
    VALUE_71 = "71"
    VALUE_72 = "72"
    VALUE_73 = "73"
    VALUE_74 = "74"
    VALUE_75 = "75"
    VALUE_76 = "76"
    VALUE_77 = "77"
    VALUE_78 = "78"
    VALUE_79 = "79"
    VALUE_80 = "80"
    VALUE_81 = "81"
    VALUE_82 = "82"
    VALUE_83 = "83"
    VALUE_84 = "84"
    VALUE_85 = "85"
    VALUE_86 = "86"
    VALUE_87 = "87"
    VALUE_88 = "88"
    VALUE_89 = "89"
    VALUE_90 = "90"
    VALUE_91 = "91"
    VALUE_92 = "92"
    VALUE_93 = "93"
    VALUE_94 = "94"
    VALUE_95 = "95"
    VALUE_96 = "96"
    VALUE_97 = "97"
    VALUE_98 = "98"
    VALUE_99 = "99"
    VALUE_100 = "100"
    VALUE_101 = "101"
    VALUE_102 = "102"
    VALUE_103 = "103"
    VALUE_104 = "104"
    VALUE_105 = "105"
    VALUE_106 = "106"
    VALUE_107 = "107"
    VALUE_108 = "108"
    VALUE_109 = "109"
    VALUE_110 = "110"
    VALUE_111 = "111"
    VALUE_112 = "112"
    VALUE_113 = "113"
    VALUE_114 = "114"
    VALUE_115 = "115"
    VALUE_116 = "116"
    VALUE_117 = "117"
    VALUE_118 = "118"
    VALUE_119 = "119"
    VALUE_120 = "120"
    VALUE_121 = "121"
    VALUE_122 = "122"
    VALUE_123 = "123"
    VALUE_124 = "124"
    VALUE_125 = "125"
    VALUE_126 = "126"
    VALUE_127 = "127"
    VALUE_128 = "128"
    VALUE_129 = "129"
    VALUE_130 = "130"
    VALUE_131 = "131"
    VALUE_132 = "132"
    VALUE_133 = "133"
    VALUE_134 = "134"
    VALUE_135 = "135"
    VALUE_136 = "136"
    VALUE_137 = "137"
    VALUE_138 = "138"
    VALUE_139 = "139"
    VALUE_140 = "140"
    VALUE_141 = "141"
    VALUE_142 = "142"
    VALUE_143 = "143"
    VALUE_144 = "144"
    VALUE_145 = "145"
    VALUE_146 = "146"
    VALUE_147 = "147"
    VALUE_148 = "148"
    VALUE_149 = "149"
    VALUE_150 = "150"
    VALUE_151 = "151"
    VALUE_152 = "152"
    VALUE_153 = "153"
    VALUE_154 = "154"
    VALUE_155 = "155"
    VALUE_156 = "156"
    VALUE_157 = "157"
    VALUE_158 = "158"
    VALUE_159 = "159"
    VALUE_160 = "160"
    VALUE_161 = "161"
    VALUE_162 = "162"
    VALUE_163 = "163"
    VALUE_164 = "164"
    VALUE_165 = "165"
    VALUE_166 = "166"
    VALUE_167 = "167"
    VALUE_168 = "168"
    VALUE_169 = "169"
    VALUE_170 = "170"
    VALUE_171 = "171"
    VALUE_172 = "172"
    VALUE_173 = "173"
    VALUE_174 = "174"
    VALUE_175 = "175"
    VALUE_176 = "176"
    VALUE_177 = "177"
    VALUE_178 = "178"
    VALUE_179 = "179"
    VALUE_180 = "180"
    VALUE_181 = "181"
    VALUE_182 = "182"
    VALUE_183 = "183"
    VALUE_184 = "184"
    VALUE_185 = "185"
    VALUE_186 = "186"
    VALUE_187 = "187"
    VALUE_188 = "188"
    VALUE_189 = "189"
    VALUE_190 = "190"
    VALUE_191 = "191"
    VALUE_192 = "192"
    VALUE_193 = "193"
    VALUE_194 = "194"
    VALUE_195 = "195"
    VALUE_196 = "196"
    VALUE_197 = "197"
    VALUE_198 = "198"
    VALUE_199 = "199"
    VALUE_200 = "200"
    VALUE_201 = "201"
    VALUE_202 = "202"
    VALUE_203 = "203"
    VALUE_204 = "204"
    VALUE_205 = "205"
    VALUE_206 = "206"
    VALUE_207 = "207"
    VALUE_208 = "208"
    VALUE_209 = "209"
    VALUE_210 = "210"
    VALUE_211 = "211"
    VALUE_212 = "212"
    VALUE_213 = "213"
    VALUE_214 = "214"
    VALUE_215 = "215"
    VALUE_216 = "216"
    VALUE_217 = "217"
    VALUE_218 = "218"
    VALUE_219 = "219"
    VALUE_220 = "220"
    VALUE_221 = "221"
    VALUE_222 = "222"
    VALUE_223 = "223"
    VALUE_224 = "224"
    VALUE_225 = "225"
    VALUE_226 = "226"
    VALUE_227 = "227"
    VALUE_228 = "228"
    VALUE_229 = "229"
    VALUE_230 = "230"
    VALUE_231 = "231"
    VALUE_232 = "232"
    VALUE_233 = "233"
    VALUE_234 = "234"
    VALUE_235 = "235"
    VALUE_236 = "236"
    VALUE_237 = "237"
    VALUE_238 = "238"
    VALUE_239 = "239"
    VALUE_240 = "240"
    VALUE_241 = "241"
    VALUE_242 = "242"
    VALUE_243 = "243"
    VALUE_244 = "244"
    VALUE_245 = "245"
    VALUE_246 = "246"
    VALUE_247 = "247"
    VALUE_248 = "248"
    VALUE_249 = "249"
    VALUE_250 = "250"
    VALUE_251 = "251"
    VALUE_252 = "252"
    VALUE_253 = "253"
    VALUE_254 = "254"
    VALUE_255 = "255"
    VALUE_256 = "256"
    VALUE_257 = "257"
    VALUE_258 = "258"
    VALUE_259 = "259"
    VALUE_260 = "260"
    VALUE_261 = "261"
    VALUE_262 = "262"
    VALUE_263 = "263"
    VALUE_264 = "264"
    VALUE_265 = "265"
    VALUE_266 = "266"
    VALUE_267 = "267"
    VALUE_268 = "268"
    VALUE_269 = "269"
    VALUE_270 = "270"
    VALUE_271 = "271"
    VALUE_272 = "272"
    VALUE_273 = "273"
    VALUE_274 = "274"
    VALUE_275 = "275"
    VALUE_276 = "276"
    VALUE_277 = "277"
    VALUE_278 = "278"
    VALUE_279 = "279"
    VALUE_280 = "280"
    VALUE_281 = "281"
    VALUE_282 = "282"
    VALUE_283 = "283"
    VALUE_284 = "284"
    VALUE_285 = "285"
    VALUE_286 = "286"
    VALUE_287 = "287"
    VALUE_288 = "288"
    VALUE_289 = "289"
    VALUE_290 = "290"
    VALUE_291 = "291"
    VALUE_292 = "292"
    VALUE_293 = "293"
    VALUE_294 = "294"
    VALUE_295 = "295"
    VALUE_296 = "296"
    VALUE_297 = "297"
    VALUE_298 = "298"
    VALUE_299 = "299"
    VALUE_300 = "300"
    VALUE_301 = "301"
    VALUE_302 = "302"
    VALUE_303 = "303"
    VALUE_304 = "304"
    VALUE_305 = "305"
    VALUE_306 = "306"
    VALUE_307 = "307"
    VALUE_308 = "308"
    VALUE_309 = "309"
    VALUE_310 = "310"
    VALUE_311 = "311"
    VALUE_312 = "312"
    VALUE_313 = "313"
    VALUE_314 = "314"
    VALUE_315 = "315"
    VALUE_316 = "316"
    VALUE_317 = "317"
    VALUE_318 = "318"
    VALUE_319 = "319"
    VALUE_320 = "320"
    VALUE_321 = "321"
    VALUE_322 = "322"
    VALUE_323 = "323"
    VALUE_324 = "324"
    VALUE_325 = "325"
    VALUE_326 = "326"
    VALUE_327 = "327"
    VALUE_328 = "328"
    VALUE_329 = "329"
    VALUE_330 = "330"
    VALUE_331 = "331"
    VALUE_332 = "332"
    VALUE_333 = "333"
    VALUE_334 = "334"
    VALUE_335 = "335"
    VALUE_336 = "336"
    VALUE_337 = "337"
    VALUE_338 = "338"
    VALUE_339 = "339"
    VALUE_340 = "340"
    VALUE_341 = "341"
    VALUE_342 = "342"
    VALUE_343 = "343"
    VALUE_344 = "344"
    VALUE_345 = "345"
    VALUE_346 = "346"
    VALUE_347 = "347"
    VALUE_348 = "348"
    VALUE_349 = "349"
    VALUE_350 = "350"
    VALUE_351 = "351"
    VALUE_352 = "352"
    VALUE_353 = "353"
    VALUE_354 = "354"
    VALUE_355 = "355"
    VALUE_356 = "356"
    VALUE_357 = "357"
    VALUE_358 = "358"
    VALUE_359 = "359"
    VALUE_360 = "360"
    VALUE_361 = "361"
    VALUE_362 = "362"
    VALUE_363 = "363"
    VALUE_364 = "364"
    VALUE_365 = "365"
    VALUE_366 = "366"
    VALUE_367 = "367"
    VALUE_368 = "368"
    VALUE_369 = "369"
    VALUE_370 = "370"
    VALUE_371 = "371"
    VALUE_372 = "372"
    VALUE_373 = "373"
    VALUE_374 = "374"
    VALUE_375 = "375"
    VALUE_376 = "376"
    VALUE_377 = "377"
    VALUE_378 = "378"
    VALUE_379 = "379"
    VALUE_380 = "380"
    VALUE_381 = "381"
    VALUE_382 = "382"
    VALUE_383 = "383"
    VALUE_384 = "384"
    VALUE_385 = "385"
    VALUE_386 = "386"
    VALUE_387 = "387"
    VALUE_388 = "388"
    VALUE_389 = "389"
    VALUE_390 = "390"
    VALUE_391 = "391"
    VALUE_392 = "392"
    VALUE_393 = "393"
    VALUE_394 = "394"
    VALUE_395 = "395"
    VALUE_396 = "396"
    VALUE_397 = "397"
    VALUE_398 = "398"
    VALUE_399 = "399"
    VALUE_400 = "400"
    VALUE_401 = "401"
    VALUE_402 = "402"
    VALUE_403 = "403"
    VALUE_404 = "404"
    VALUE_405 = "405"
    VALUE_406 = "406"
    VALUE_407 = "407"
    VALUE_408 = "408"
    VALUE_409 = "409"
    VALUE_410 = "410"
    VALUE_411 = "411"
    VALUE_412 = "412"
    VALUE_413 = "413"
    VALUE_414 = "414"
    VALUE_415 = "415"
    VALUE_416 = "416"
    VALUE_417 = "417"
    VALUE_418 = "418"
    VALUE_419 = "419"
    VALUE_420 = "420"
    VALUE_421 = "421"
    VALUE_422 = "422"
    VALUE_423 = "423"
    VALUE_424 = "424"
    VALUE_425 = "425"
    VALUE_426 = "426"
    VALUE_427 = "427"
    VALUE_428 = "428"
    VALUE_429 = "429"
    VALUE_430 = "430"
    VALUE_431 = "431"
    VALUE_432 = "432"
    VALUE_433 = "433"
    VALUE_434 = "434"
    VALUE_435 = "435"
    VALUE_436 = "436"
    VALUE_437 = "437"
    VALUE_438 = "438"
    VALUE_439 = "439"
    VALUE_440 = "440"
    VALUE_441 = "441"
    VALUE_442 = "442"
    VALUE_443 = "443"
    VALUE_444 = "444"
    VALUE_445 = "445"
    VALUE_446 = "446"
    VALUE_447 = "447"
    VALUE_448 = "448"
    VALUE_449 = "449"
    VALUE_450 = "450"
    VALUE_451 = "451"
    VALUE_452 = "452"
    VALUE_453 = "453"
    VALUE_454 = "454"
    VALUE_455 = "455"
    VALUE_456 = "456"
    VALUE_457 = "457"
    VALUE_458 = "458"
    VALUE_459 = "459"
    VALUE_460 = "460"
    VALUE_461 = "461"
    VALUE_462 = "462"
    VALUE_463 = "463"
    VALUE_464 = "464"
    VALUE_465 = "465"
    VALUE_466 = "466"
    VALUE_467 = "467"
    VALUE_468 = "468"
    VALUE_469 = "469"
    VALUE_470 = "470"
    VALUE_471 = "471"
    VALUE_472 = "472"
    VALUE_473 = "473"
    VALUE_474 = "474"
    VALUE_475 = "475"
    VALUE_476 = "476"
    VALUE_477 = "477"
    VALUE_478 = "478"
    VALUE_479 = "479"
    VALUE_480 = "480"


class businessowned_businesses_vertical_enum_param(str, Enum):
    """businessowned_businesses_vertical_enum_param enum values."""

    ADVERTISING = "ADVERTISING"
    AUTOMOTIVE = "AUTOMOTIVE"
    CONSUMER_PACKAGED_GOODS = "CONSUMER_PACKAGED_GOODS"
    ECOMMERCE = "ECOMMERCE"
    EDUCATION = "EDUCATION"
    ENERGY_AND_UTILITIES = "ENERGY_AND_UTILITIES"
    ENTERTAINMENT_AND_MEDIA = "ENTERTAINMENT_AND_MEDIA"
    FINANCIAL_SERVICES = "FINANCIAL_SERVICES"
    GAMING = "GAMING"
    GOVERNMENT_AND_POLITICS = "GOVERNMENT_AND_POLITICS"
    HEALTH = "HEALTH"
    LUXURY = "LUXURY"
    MARKETING = "MARKETING"
    NON_PROFIT = "NON_PROFIT"
    NOT_SET = "NOT_SET"
    ORGANIZATIONS_AND_ASSOCIATIONS = "ORGANIZATIONS_AND_ASSOCIATIONS"
    OTHER = "OTHER"
    PROFESSIONAL_SERVICES = "PROFESSIONAL_SERVICES"
    RESTAURANT = "RESTAURANT"
    RETAIL = "RETAIL"
    TECHNOLOGY = "TECHNOLOGY"
    TELECOM = "TELECOM"
    TRAVEL = "TRAVEL"


class businessowned_product_catalogs_additional_vertical_option_enum_param(str, Enum):
    """businessowned_product_catalogs_additional_vertical_option_enum_param enum values."""

    LOCAL_DA_CATALOG = "LOCAL_DA_CATALOG"
    LOCAL_PRODUCTS = "LOCAL_PRODUCTS"


class businessowned_product_catalogs_vertical_enum_param(str, Enum):
    """businessowned_product_catalogs_vertical_enum_param enum values."""

    adoptable_pets = "adoptable_pets"
    commerce = "commerce"
    destinations = "destinations"
    flights = "flights"
    generic = "generic"
    home_listings = "home_listings"
    hotels = "hotels"
    local_service_businesses = "local_service_businesses"
    offer_items = "offer_items"
    offline_commerce = "offline_commerce"
    transactable_items = "transactable_items"
    vehicles = "vehicles"


class businesspicture_type_enum_param(str, Enum):
    """businesspicture_type_enum_param enum values."""

    album = "album"
    large = "large"
    normal = "normal"
    small = "small"
    square = "square"


class businesspreverified_numbers_code_verification_status_enum_param(str, Enum):
    """businesspreverified_numbers_code_verification_status_enum_param enum values."""

    EXPIRED = "EXPIRED"
    NOT_VERIFIED = "NOT_VERIFIED"
    VERIFIED = "VERIFIED"


class businessreceived_audience_sharing_requests_request_status_enum_param(str, Enum):
    """businessreceived_audience_sharing_requests_request_status_enum_param enum values."""

    APPROVE = "APPROVE"
    CANCELED = "CANCELED"
    DECLINE = "DECLINE"
    EXPIRED = "EXPIRED"
    IN_PROGRESS = "IN_PROGRESS"
    PENDING = "PENDING"
    PENDING_EMAIL_VERIFICATION = "PENDING_EMAIL_VERIFICATION"
    PENDING_INTEGRITY_REVIEW = "PENDING_INTEGRITY_REVIEW"


class businessrolerequest_role(str, Enum):
    """businessrolerequest_role enum values."""

    ADMIN = "ADMIN"
    ADS_RIGHTS_REVIEWER = "ADS_RIGHTS_REVIEWER"
    DEFAULT = "DEFAULT"
    DEVELOPER = "DEVELOPER"
    EMPLOYEE = "EMPLOYEE"
    FINANCE_ANALYST = "FINANCE_ANALYST"
    FINANCE_EDIT = "FINANCE_EDIT"
    FINANCE_EDITOR = "FINANCE_EDITOR"
    FINANCE_VIEW = "FINANCE_VIEW"
    MANAGE = "MANAGE"
    PARTNER_CENTER_ADMIN = "PARTNER_CENTER_ADMIN"
    PARTNER_CENTER_ANALYST = "PARTNER_CENTER_ANALYST"
    PARTNER_CENTER_EDUCATION = "PARTNER_CENTER_EDUCATION"
    PARTNER_CENTER_MARKETING = "PARTNER_CENTER_MARKETING"
    PARTNER_CENTER_OPERATIONS = "PARTNER_CENTER_OPERATIONS"


class businessrolerequest_tasks(str, Enum):
    """businessrolerequest_tasks enum values."""

    ADMIN = "ADMIN"
    ADS_RIGHTS_REVIEWER = "ADS_RIGHTS_REVIEWER"
    DEFAULT = "DEFAULT"
    DEVELOPER = "DEVELOPER"
    EMPLOYEE = "EMPLOYEE"
    FINANCE_ANALYST = "FINANCE_ANALYST"
    FINANCE_EDIT = "FINANCE_EDIT"
    FINANCE_EDITOR = "FINANCE_EDITOR"
    FINANCE_VIEW = "FINANCE_VIEW"
    MANAGE = "MANAGE"
    PARTNER_CENTER_ADMIN = "PARTNER_CENTER_ADMIN"
    PARTNER_CENTER_ANALYST = "PARTNER_CENTER_ANALYST"
    PARTNER_CENTER_EDUCATION = "PARTNER_CENTER_EDUCATION"
    PARTNER_CENTER_MARKETING = "PARTNER_CENTER_MARKETING"
    PARTNER_CENTER_OPERATIONS = "PARTNER_CENTER_OPERATIONS"


class businessself_certify_whatsapp_business_business_vertical_enum_param(str, Enum):
    """businessself_certify_whatsapp_business_business_vertical_enum_param enum values."""

    ADULT_PRODUCTS_AND_SERVICES = "ADULT_PRODUCTS_AND_SERVICES"
    ALCOHOL_AND_TOBACCO = "ALCOHOL_AND_TOBACCO"
    AUTOMOTIVE_DEALERS = "AUTOMOTIVE_DEALERS"
    BODY_PARTS_FLUIDS = "BODY_PARTS_FLUIDS"
    BUSINESS_AND_UTILITY = "BUSINESS_AND_UTILITY"
    CONTENT_AND_APPS = "CONTENT_AND_APPS"
    CREATORS_AND_CELEBRITIES = "CREATORS_AND_CELEBRITIES"
    DATING = "DATING"
    DRUGS = "DRUGS"
    ENDANGERED_SPECIES = "ENDANGERED_SPECIES"
    FIREARMS = "FIREARMS"
    FRAUDULENT_MISLEADING_OFFENSIVE = "FRAUDULENT_MISLEADING_OFFENSIVE"
    GAMBLING = "GAMBLING"
    GROCERY_AND_CONVENIENCE_STORE = "GROCERY_AND_CONVENIENCE_STORE"
    HAZARDOUS_GOODS_AND_MATERIALS = "HAZARDOUS_GOODS_AND_MATERIALS"
    HOME = "HOME"
    HOME_AND_AUTO_MANUFACTURING = "HOME_AND_AUTO_MANUFACTURING"
    LIFESTYLE = "LIFESTYLE"
    LIVE_NON_ENDANGERED_SPECIES = "LIVE_NON_ENDANGERED_SPECIES"
    LOANS_DEBT_COLLECTION_BAIL_BONDS = "LOANS_DEBT_COLLECTION_BAIL_BONDS"
    LOCAL_EVENTS = "LOCAL_EVENTS"
    MEDICAL_HEALTHCARE = "MEDICAL_HEALTHCARE"
    MULTILEVEL_MARKETING = "MULTILEVEL_MARKETING"
    NON_PROFIT_AND_RELIGIOUS_ORGS = "NON_PROFIT_AND_RELIGIOUS_ORGS"
    PROFESSIONAL = "PROFESSIONAL"
    REAL_VIRTUAL_FAKE_CURRENCY = "REAL_VIRTUAL_FAKE_CURRENCY"
    RESTAURANTS = "RESTAURANTS"
    RETAIL = "RETAIL"
    TRANSPORTATION_AND_ACCOMMODATION = "TRANSPORTATION_AND_ACCOMMODATION"


class businesssetup_managed_partner_adaccounts_subvertical_v2_enum_param(str, Enum):
    """businesssetup_managed_partner_adaccounts_subvertical_v2_enum_param enum values."""

    ACCOUNTING_AND_TAX = "ACCOUNTING_AND_TAX"
    ACTIVITIES_AND_LEISURE = "ACTIVITIES_AND_LEISURE"
    AIR = "AIR"
    APPAREL_AND_ACCESSORIES = "APPAREL_AND_ACCESSORIES"
    ARTS_AND_HERITAGE_AND_EDUCATION = "ARTS_AND_HERITAGE_AND_EDUCATION"
    AR_OR_VR_GAMING = "AR_OR_VR_GAMING"
    AUDIO_STREAMING = "AUDIO_STREAMING"
    AUTO = "AUTO"
    AUTO_INSURANCE = "AUTO_INSURANCE"
    AUTO_RENTAL = "AUTO_RENTAL"
    BABY = "BABY"
    BALLOT_INITIATIVE_OR_REFERENDUM = "BALLOT_INITIATIVE_OR_REFERENDUM"
    BEAUTY = "BEAUTY"
    BEAUTY_AND_FASHION = "BEAUTY_AND_FASHION"
    BEER_AND_WINE_AND_LIQUOR_AND_MALT_BEVERAGES = "BEER_AND_WINE_AND_LIQUOR_AND_MALT_BEVERAGES"
    BOOKSTORES = "BOOKSTORES"
    BROADCAST_TELEVISION = "BROADCAST_TELEVISION"
    BUSINESS_CONSULTANTS = "BUSINESS_CONSULTANTS"
    BUYING_AGENCY = "BUYING_AGENCY"
    CABLE_AND_SATELLITE = "CABLE_AND_SATELLITE"
    CABLE_TELEVISION = "CABLE_TELEVISION"
    CALL_CENTER_AND_MESSAGING_SERVICES = "CALL_CENTER_AND_MESSAGING_SERVICES"
    CANDIDATE_OR_POLITICIAN = "CANDIDATE_OR_POLITICIAN"
    CAREER = "CAREER"
    CAREER_AND_TECH = "CAREER_AND_TECH"
    CASUAL_DINING = "CASUAL_DINING"
    CHRONIC_CONDITIONS_AND_MEDICAL_CAUSES = "CHRONIC_CONDITIONS_AND_MEDICAL_CAUSES"
    CIVIC_INFLUENCERS = "CIVIC_INFLUENCERS"
    CLINICAL_TRIALS = "CLINICAL_TRIALS"
    COFFEE = "COFFEE"
    COMPUTER_AND_SOFTWARE_AND_HARDWARE = "COMPUTER_AND_SOFTWARE_AND_HARDWARE"
    CONSOLE_AND_CROSS_PLATFORM_GAMING = "CONSOLE_AND_CROSS_PLATFORM_GAMING"
    CONSULTING = "CONSULTING"
    CONSUMER_ELECTRONICS = "CONSUMER_ELECTRONICS"
    COUNSELING_AND_PSYCHOTHERAPY = "COUNSELING_AND_PSYCHOTHERAPY"
    CREATIVE_AGENCY = "CREATIVE_AGENCY"
    CREDIT_AND_FINANCING_AND_MORTAGES = "CREDIT_AND_FINANCING_AND_MORTAGES"
    CRUISES_AND_MARINE = "CRUISES_AND_MARINE"
    CULTURE_AND_LIFESTYLE = "CULTURE_AND_LIFESTYLE"
    DATA_ANALYTICS_AND_DATA_MANAGEMENT = "DATA_ANALYTICS_AND_DATA_MANAGEMENT"
    DATING_AND_TECHNOLOGY_APPS = "DATING_AND_TECHNOLOGY_APPS"
    DEPARTMENT_STORE = "DEPARTMENT_STORE"
    DESKTOP_SOFTWARE = "DESKTOP_SOFTWARE"
    DIETING_AND_FITNESS_PROGRAMS = "DIETING_AND_FITNESS_PROGRAMS"
    DIGITAL_NATIVE_EDUCATION_OR_TRAINING = "DIGITAL_NATIVE_EDUCATION_OR_TRAINING"
    DRINKING_PLACES = "DRINKING_PLACES"
    EDUCATION_RESOURCES = "EDUCATION_RESOURCES"
    ED_TECH = "ED_TECH"
    ELEARNING_AND_MASSIVE_ONLINE_OPEN_COURSES = "ELEARNING_AND_MASSIVE_ONLINE_OPEN_COURSES"
    ELECTION_COMMISSION = "ELECTION_COMMISSION"
    ELECTRONICS_AND_APPLIANCES = "ELECTRONICS_AND_APPLIANCES"
    ENGINEERING_AND_DESIGN = "ENGINEERING_AND_DESIGN"
    ENVIRONMENT_AND_ANIMAL_WELFARE = "ENVIRONMENT_AND_ANIMAL_WELFARE"
    ESPORTS = "ESPORTS"
    EVENTS = "EVENTS"
    FARMING_AND_RANCHING = "FARMING_AND_RANCHING"
    FILE_STORAGE_AND_CLOUD_AND_DATA_SERVICES = "FILE_STORAGE_AND_CLOUD_AND_DATA_SERVICES"
    FINANCE = "FINANCE"
    FIN_TECH = "FIN_TECH"
    FISHING_AND_HUNTING_AND_FORESTRY_AND_LOGGING = "FISHING_AND_HUNTING_AND_FORESTRY_AND_LOGGING"
    FITNESS = "FITNESS"
    FOOD = "FOOD"
    FOOTWEAR = "FOOTWEAR"
    FOR_PROFIT_COLLEGES_AND_UNIVERSITIES = "FOR_PROFIT_COLLEGES_AND_UNIVERSITIES"
    FULL_SERVICE_AGENCY = "FULL_SERVICE_AGENCY"
    GOVERNMENT_CONTROLLED_ENTITY = "GOVERNMENT_CONTROLLED_ENTITY"
    GOVERNMENT_DEPARTMENT_OR_AGENCY = "GOVERNMENT_DEPARTMENT_OR_AGENCY"
    GOVERNMENT_OFFICIAL = "GOVERNMENT_OFFICIAL"
    GOVERNMENT_OWNED_MEDIA = "GOVERNMENT_OWNED_MEDIA"
    GROCERY_AND_DRUG_AND_CONVENIENCE = "GROCERY_AND_DRUG_AND_CONVENIENCE"
    HEAD_OF_STATE = "HEAD_OF_STATE"
    HEALTH_INSURANCE = "HEALTH_INSURANCE"
    HEALTH_SYSTEMS_AND_PRACTITIONERS = "HEALTH_SYSTEMS_AND_PRACTITIONERS"
    HEALTH_TECH = "HEALTH_TECH"
    HOME_AND_FURNITURE_AND_OFFICE = "HOME_AND_FURNITURE_AND_OFFICE"
    HOME_IMPROVEMENT = "HOME_IMPROVEMENT"
    HOME_INSURANCE = "HOME_INSURANCE"
    HOME_TECH = "HOME_TECH"
    HOTEL_AND_ACCOMODATION = "HOTEL_AND_ACCOMODATION"
    HOUSEHOLD_GOODS_DURABLE = "HOUSEHOLD_GOODS_DURABLE"
    HOUSEHOLD_GOODS_NON_DURABLE = "HOUSEHOLD_GOODS_NON_DURABLE"
    HR_AND_FINANCIAL_MANAGEMENT = "HR_AND_FINANCIAL_MANAGEMENT"
    HUMANITARIAN_OR_DISASTER_RELIEF = "HUMANITARIAN_OR_DISASTER_RELIEF"
    INDEPENDENT_EXPENDITURE_GROUP = "INDEPENDENT_EXPENDITURE_GROUP"
    INSURANCE_TECH = "INSURANCE_TECH"
    INTERNATIONAL_ORGANIZATON = "INTERNATIONAL_ORGANIZATON"
    INVESTMENT_BANK_AND_BROKERAGE = "INVESTMENT_BANK_AND_BROKERAGE"
    ISSUE_ADVOCACY = "ISSUE_ADVOCACY"
    LEGAL = "LEGAL"
    LIFE_INSURANCE = "LIFE_INSURANCE"
    LOGISTICS_AND_TRANSPORTATION_AND_FLEET_MANAGEMENT = (
        "LOGISTICS_AND_TRANSPORTATION_AND_FLEET_MANAGEMENT"
    )
    MANUFACTURING = "MANUFACTURING"
    MEDICAL_DEVICES_AND_SUPPLIES_AND_EQUIPMENT = "MEDICAL_DEVICES_AND_SUPPLIES_AND_EQUIPMENT"
    MEDSPA_AND_ELECTIVE_SURGERIES_AND_ALTERNATIVE_MEDICINE = (
        "MEDSPA_AND_ELECTIVE_SURGERIES_AND_ALTERNATIVE_MEDICINE"
    )
    MINING_AND_QUARRYING = "MINING_AND_QUARRYING"
    MOBILE_GAMING = "MOBILE_GAMING"
    MOVIES = "MOVIES"
    MUSEUMS_AND_PARKS_AND_LIBRARIES = "MUSEUMS_AND_PARKS_AND_LIBRARIES"
    MUSIC = "MUSIC"
    NETWORK_SECURITY_PRODUCTS = "NETWORK_SECURITY_PRODUCTS"
    NEWS_AND_CURRENT_EVENTS = "NEWS_AND_CURRENT_EVENTS"
    NON_PRESCRIPTION = "NON_PRESCRIPTION"
    NOT_FOR_PROFIT_COLLEGES_AND_UNIVERSITIES = "NOT_FOR_PROFIT_COLLEGES_AND_UNIVERSITIES"
    OFFICE = "OFFICE"
    OFFICE_OR_BUSINESS_SUPPLIES = "OFFICE_OR_BUSINESS_SUPPLIES"
    OIL_AND_GAS_AND_CONSUMABLE_FUEL = "OIL_AND_GAS_AND_CONSUMABLE_FUEL"
    ONLINE_ONLY_PUBLICATIONS = "ONLINE_ONLY_PUBLICATIONS"
    PACKAGE_OR_FREIGHT_DELIVERY = "PACKAGE_OR_FREIGHT_DELIVERY"
    PARTY_INDEPENDENT_EXPENDITURE_GROUP_US = "PARTY_INDEPENDENT_EXPENDITURE_GROUP_US"
    PAYMENT_PROCESSING_AND_GATEWAY_SOLUTIONS = "PAYMENT_PROCESSING_AND_GATEWAY_SOLUTIONS"
    PC_GAMING = "PC_GAMING"
    PEOPLE = "PEOPLE"
    PERSONAL_CARE = "PERSONAL_CARE"
    PET = "PET"
    PHOTOGRAPHY_AND_FILMING_SERVICES = "PHOTOGRAPHY_AND_FILMING_SERVICES"
    PIZZA = "PIZZA"
    PLANNING_AGENCY = "PLANNING_AGENCY"
    POLITICAL_PARTY_OR_COMMITTEE = "POLITICAL_PARTY_OR_COMMITTEE"
    PRESCRIPTION = "PRESCRIPTION"
    PROFESSIONAL_ASSOCIATIONS = "PROFESSIONAL_ASSOCIATIONS"
    PROPERTY_AND_CASUALTY = "PROPERTY_AND_CASUALTY"
    QUICK_SERVICE = "QUICK_SERVICE"
    RADIO = "RADIO"
    RAILROADS = "RAILROADS"
    REAL_ESTATE = "REAL_ESTATE"
    REAL_MONEY_GAMING = "REAL_MONEY_GAMING"
    RECREATIONAL = "RECREATIONAL"
    RELIGIOUS = "RELIGIOUS"
    RESELLER = "RESELLER"
    RESIDENTIAL_AND_LONG_TERM_CARE_FACILITIES_AND_OUTPATIENT_CARE_CENTERS = (
        "RESIDENTIAL_AND_LONG_TERM_CARE_FACILITIES_AND_OUTPATIENT_CARE_CENTERS"
    )
    RETAIL_AND_CREDIT_UNION_AND_COMMERCIAL_BANK = "RETAIL_AND_CREDIT_UNION_AND_COMMERCIAL_BANK"
    RIDE_SHARING_OR_TAXI_SERVICES = "RIDE_SHARING_OR_TAXI_SERVICES"
    SAFETY_SERVICES = "SAFETY_SERVICES"
    SCHOLARLY = "SCHOLARLY"
    SCHOOL_AND_EARLY_CHILDREN_EDCATION = "SCHOOL_AND_EARLY_CHILDREN_EDCATION"
    SOCIAL_MEDIA = "SOCIAL_MEDIA"
    SOFTWARE_AS_A_SERVICE = "SOFTWARE_AS_A_SERVICE"
    SPORTING = "SPORTING"
    SPORTING_AND_OUTDOOR = "SPORTING_AND_OUTDOOR"
    SPORTS = "SPORTS"
    SUPERSTORES = "SUPERSTORES"
    T1_AUTOMOTIVE_MANUFACTURER = "T1_AUTOMOTIVE_MANUFACTURER"
    T1_MOTORCYCLE = "T1_MOTORCYCLE"
    T2_DEALER_ASSOCIATIONS = "T2_DEALER_ASSOCIATIONS"
    T3_AUTO_AGENCY = "T3_AUTO_AGENCY"
    T3_AUTO_RESELLERS = "T3_AUTO_RESELLERS"
    T3_DEALER_GROUPS = "T3_DEALER_GROUPS"
    T3_FRANCHISE_DEALER = "T3_FRANCHISE_DEALER"
    T3_INDEPENDENT_DEALER = "T3_INDEPENDENT_DEALER"
    T3_PARTS_AND_SERVICES = "T3_PARTS_AND_SERVICES"
    T3_PORTALS = "T3_PORTALS"
    TELECOMMUNICATIONS_EQUIPMENT_AND_ACCESSORIES = "TELECOMMUNICATIONS_EQUIPMENT_AND_ACCESSORIES"
    TELEPHONE_SERVICE_PROVIDERS_AND_CARRIERS = "TELEPHONE_SERVICE_PROVIDERS_AND_CARRIERS"
    TICKETING = "TICKETING"
    TOBACCO = "TOBACCO"
    TOURISM_AND_TRAVEL_SERVICES = "TOURISM_AND_TRAVEL_SERVICES"
    TOURISM_BOARD = "TOURISM_BOARD"
    TOY_AND_HOBBY = "TOY_AND_HOBBY"
    TRADE_SCHOOL = "TRADE_SCHOOL"
    TRAVEL_AGENCIES_AND_GUIDES_AND_OTAS = "TRAVEL_AGENCIES_AND_GUIDES_AND_OTAS"
    UTILITIES_AND_ENERGY_EQUIPMENT_AND_SERVICES = "UTILITIES_AND_ENERGY_EQUIPMENT_AND_SERVICES"
    VETERINARY_CLINICS_AND_SERVICES = "VETERINARY_CLINICS_AND_SERVICES"
    VIDEO_STREAMING = "VIDEO_STREAMING"
    VIRTUAL_SERVICES = "VIRTUAL_SERVICES"
    VITAMINS_OR_WELLNESS = "VITAMINS_OR_WELLNESS"
    WAREHOUSING_AND_STORAGE = "WAREHOUSING_AND_STORAGE"
    WATER_AND_SOFT_DRINK_AND_BAVERAGE = "WATER_AND_SOFT_DRINK_AND_BAVERAGE"
    WEBSITE_DESIGNERS_OR_GRAPHIC_DESIGNERS = "WEBSITE_DESIGNERS_OR_GRAPHIC_DESIGNERS"
    WHOLESALE = "WHOLESALE"
    WIRELESS_SERVICES = "WIRELESS_SERVICES"


class businesssetup_managed_partner_adaccounts_vertical_v2_enum_param(str, Enum):
    """businesssetup_managed_partner_adaccounts_vertical_v2_enum_param enum values."""

    ADVERTISING_AND_MARKETING = "ADVERTISING_AND_MARKETING"
    AGRICULTURE = "AGRICULTURE"
    AUTOMOTIVE = "AUTOMOTIVE"
    BANKING_AND_CREDIT_CARDS = "BANKING_AND_CREDIT_CARDS"
    BUSINESS_TO_BUSINESS = "BUSINESS_TO_BUSINESS"
    CONSUMER_PACKAGED_GOODS = "CONSUMER_PACKAGED_GOODS"
    ECOMMERCE = "ECOMMERCE"
    EDUCATION = "EDUCATION"
    ENERGY_AND_NATURAL_RESOURCES_AND_UTILITIES = "ENERGY_AND_NATURAL_RESOURCES_AND_UTILITIES"
    ENTERTAINMENT_AND_MEDIA = "ENTERTAINMENT_AND_MEDIA"
    GAMING = "GAMING"
    GOVERNMENT = "GOVERNMENT"
    HEALTHCARE_AND_PHARMACEUTICALS_AND_BIOTECH = "HEALTHCARE_AND_PHARMACEUTICALS_AND_BIOTECH"
    INSURANCE = "INSURANCE"
    NON_PROFIT = "NON_PROFIT"
    ORGANIZATIONS_AND_ASSOCIATIONS = "ORGANIZATIONS_AND_ASSOCIATIONS"
    POLITICS = "POLITICS"
    PROFESSIONAL_SERVICES = "PROFESSIONAL_SERVICES"
    PUBLISHING = "PUBLISHING"
    RESTAURANTS = "RESTAURANTS"
    RETAIL = "RETAIL"
    TECHNOLOGY = "TECHNOLOGY"
    TELECOM = "TELECOM"
    TRAVEL = "TRAVEL"


class businesssystem_users_role_enum_param(str, Enum):
    """businesssystem_users_role_enum_param enum values."""

    ADMIN = "ADMIN"
    ADS_RIGHTS_REVIEWER = "ADS_RIGHTS_REVIEWER"
    DEFAULT = "DEFAULT"
    DEVELOPER = "DEVELOPER"
    EMPLOYEE = "EMPLOYEE"
    FINANCE_ANALYST = "FINANCE_ANALYST"
    FINANCE_EDIT = "FINANCE_EDIT"
    FINANCE_EDITOR = "FINANCE_EDITOR"
    FINANCE_VIEW = "FINANCE_VIEW"
    MANAGE = "MANAGE"
    PARTNER_CENTER_ADMIN = "PARTNER_CENTER_ADMIN"
    PARTNER_CENTER_ANALYST = "PARTNER_CENTER_ANALYST"
    PARTNER_CENTER_EDUCATION = "PARTNER_CENTER_EDUCATION"
    PARTNER_CENTER_MARKETING = "PARTNER_CENTER_MARKETING"
    PARTNER_CENTER_OPERATIONS = "PARTNER_CENTER_OPERATIONS"


class businessuser_role(str, Enum):
    """businessuser_role enum values."""

    ADMIN = "ADMIN"
    ADS_RIGHTS_REVIEWER = "ADS_RIGHTS_REVIEWER"
    DEFAULT = "DEFAULT"
    DEVELOPER = "DEVELOPER"
    EMPLOYEE = "EMPLOYEE"
    FINANCE_ANALYST = "FINANCE_ANALYST"
    FINANCE_EDIT = "FINANCE_EDIT"
    FINANCE_EDITOR = "FINANCE_EDITOR"
    FINANCE_VIEW = "FINANCE_VIEW"
    MANAGE = "MANAGE"
    PARTNER_CENTER_ADMIN = "PARTNER_CENTER_ADMIN"
    PARTNER_CENTER_ANALYST = "PARTNER_CENTER_ANALYST"
    PARTNER_CENTER_EDUCATION = "PARTNER_CENTER_EDUCATION"
    PARTNER_CENTER_MARKETING = "PARTNER_CENTER_MARKETING"
    PARTNER_CENTER_OPERATIONS = "PARTNER_CENTER_OPERATIONS"


class businessuser_tasks(str, Enum):
    """businessuser_tasks enum values."""

    ADMIN = "ADMIN"
    ADS_RIGHTS_REVIEWER = "ADS_RIGHTS_REVIEWER"
    DEFAULT = "DEFAULT"
    DEVELOPER = "DEVELOPER"
    EMPLOYEE = "EMPLOYEE"
    FINANCE_ANALYST = "FINANCE_ANALYST"
    FINANCE_EDIT = "FINANCE_EDIT"
    FINANCE_EDITOR = "FINANCE_EDITOR"
    FINANCE_VIEW = "FINANCE_VIEW"
    MANAGE = "MANAGE"
    PARTNER_CENTER_ADMIN = "PARTNER_CENTER_ADMIN"
    PARTNER_CENTER_ANALYST = "PARTNER_CENTER_ANALYST"
    PARTNER_CENTER_EDUCATION = "PARTNER_CENTER_EDUCATION"
    PARTNER_CENTER_MARKETING = "PARTNER_CENTER_MARKETING"
    PARTNER_CENTER_OPERATIONS = "PARTNER_CENTER_OPERATIONS"


class businessvideos_container_type_enum_param(str, Enum):
    """businessvideos_container_type_enum_param enum values."""

    ACO_VIDEO_VARIATION = "ACO_VIDEO_VARIATION"
    ADS_AI_GENERATED = "ADS_AI_GENERATED"
    AD_BREAK_PREVIEW = "AD_BREAK_PREVIEW"
    AD_DERIVATIVE = "AD_DERIVATIVE"
    AD_LIBRARY_WATERMARK = "AD_LIBRARY_WATERMARK"
    ALBUM_MULTIMEDIA_POST = "ALBUM_MULTIMEDIA_POST"
    ALOHA_SUPERFRAME = "ALOHA_SUPERFRAME"
    APP_REREVIEW_SCREENCAST = "APP_REREVIEW_SCREENCAST"
    APP_REVIEW_SCREENCAST = "APP_REVIEW_SCREENCAST"
    ASSET_MANAGER = "ASSET_MANAGER"
    ATLAS_VIDEO = "ATLAS_VIDEO"
    AUDIO_BROADCAST = "AUDIO_BROADCAST"
    AUDIO_COMMENT = "AUDIO_COMMENT"
    BROADCAST = "BROADCAST"
    CANVAS = "CANVAS"
    CMS_MEDIA_MANAGER = "CMS_MEDIA_MANAGER"
    CONTAINED_POST_ATTACHMENT = "CONTAINED_POST_ATTACHMENT"
    CONTAINED_POST_AUDIO_BROADCAST = "CONTAINED_POST_AUDIO_BROADCAST"
    CONTAINED_POST_COPYRIGHT_REFERENCE_BROADCAST = "CONTAINED_POST_COPYRIGHT_REFERENCE_BROADCAST"
    COPYRIGHT_REFERENCE_BROADCAST = "COPYRIGHT_REFERENCE_BROADCAST"
    COPYRIGHT_REFERENCE_IG_XPOST_VIDEO = "COPYRIGHT_REFERENCE_IG_XPOST_VIDEO"
    COPYRIGHT_REFERENCE_VIDEO = "COPYRIGHT_REFERENCE_VIDEO"
    CREATION_ML_PRECREATION = "CREATION_ML_PRECREATION"
    CREATOR_FAN_CHALLENGE = "CREATOR_FAN_CHALLENGE"
    CREATOR_STOREFRONT_PERSONALIZED_VIDEO = "CREATOR_STOREFRONT_PERSONALIZED_VIDEO"
    DATAGENIX_VIDEO = "DATAGENIX_VIDEO"
    DCO_AD_ASSET_FEED = "DCO_AD_ASSET_FEED"
    DCO_AUTOGEN_VIDEO = "DCO_AUTOGEN_VIDEO"
    DCO_TRIMMED_VIDEO = "DCO_TRIMMED_VIDEO"
    DIM_SUM = "DIM_SUM"
    DIRECTED_POST_ATTACHMENT = "DIRECTED_POST_ATTACHMENT"
    DIRECT_INBOX = "DIRECT_INBOX"
    DROPS_SHOPPING_EVENT_PAGE = "DROPS_SHOPPING_EVENT_PAGE"
    DYNAMIC_ITEM_VIDEO = "DYNAMIC_ITEM_VIDEO"
    DYNAMIC_TEMPLATE_VIDEO = "DYNAMIC_TEMPLATE_VIDEO"
    EVENT_COVER_VIDEO = "EVENT_COVER_VIDEO"
    EVENT_TOUR = "EVENT_TOUR"
    FACECAST_DVR = "FACECAST_DVR"
    FB_AVATAR_ANIMATED_SATP = "FB_AVATAR_ANIMATED_SATP"
    FB_COLLECTIBLE_VIDEO = "FB_COLLECTIBLE_VIDEO"
    FB_SHORTS = "FB_SHORTS"
    FB_SHORTS_CONTENT_REMIXABLE = "FB_SHORTS_CONTENT_REMIXABLE"
    FB_SHORTS_GROUP_POST = "FB_SHORTS_GROUP_POST"
    FB_SHORTS_LINKED_PRODUCT = "FB_SHORTS_LINKED_PRODUCT"
    FB_SHORTS_PMV_POST = "FB_SHORTS_PMV_POST"
    FB_SHORTS_POST = "FB_SHORTS_POST"
    FB_SHORTS_REMIX_POST = "FB_SHORTS_REMIX_POST"
    FUNDRAISER_COVER_VIDEO = "FUNDRAISER_COVER_VIDEO"
    GAME_CLIP = "GAME_CLIP"
    GIF_TO_VIDEO = "GIF_TO_VIDEO"
    GOODWILL_ANNIVERSARY_DEPRECATED = "GOODWILL_ANNIVERSARY_DEPRECATED"
    GOODWILL_ANNIVERSARY_PROMOTION_DEPRECATED = "GOODWILL_ANNIVERSARY_PROMOTION_DEPRECATED"
    GOODWILL_VIDEO_CONTAINED_SHARE = "GOODWILL_VIDEO_CONTAINED_SHARE"
    GOODWILL_VIDEO_PROMOTION = "GOODWILL_VIDEO_PROMOTION"
    GOODWILL_VIDEO_SHARE = "GOODWILL_VIDEO_SHARE"
    GOODWILL_VIDEO_TOKEN_REQUIRED = "GOODWILL_VIDEO_TOKEN_REQUIRED"
    GROUP_POST = "GROUP_POST"
    HEURISTIC_CLUSTER_VIDEO = "HEURISTIC_CLUSTER_VIDEO"
    HIGHLIGHT_CLIP_VIDEO = "HIGHLIGHT_CLIP_VIDEO"
    HORIZON_WORLDS_TV = "HORIZON_WORLDS_TV"
    HUDDLE_BROADCAST = "HUDDLE_BROADCAST"
    IG_REELS_XPV = "IG_REELS_XPV"
    IG_STORIES_READER = "IG_STORIES_READER"
    INJECTABLE = "INJECTABLE"
    INSPIRATION_VIDEO = "INSPIRATION_VIDEO"
    INSTAGRAM_VIDEO_COPY = "INSTAGRAM_VIDEO_COPY"
    INSTANT_APPLICATION_PREVIEW = "INSTANT_APPLICATION_PREVIEW"
    INSTANT_ARTICLE = "INSTANT_ARTICLE"
    ISSUE_MODULE = "ISSUE_MODULE"
    LEARN = "LEARN"
    LEGACY = "LEGACY"
    LEGACY_CONTAINED_POST_BROADCAST = "LEGACY_CONTAINED_POST_BROADCAST"
    LIVE_AUDIO_ROOM_BROADCAST = "LIVE_AUDIO_ROOM_BROADCAST"
    LIVE_CLIP_PREVIEW = "LIVE_CLIP_PREVIEW"
    LIVE_CLIP_WORKCHAT = "LIVE_CLIP_WORKCHAT"
    LIVE_CREATIVE_KIT_VIDEO = "LIVE_CREATIVE_KIT_VIDEO"
    LIVE_PHOTO = "LIVE_PHOTO"
    LOOK_NOW_DEPRECATED = "LOOK_NOW_DEPRECATED"
    MARKETPLACE_LISTING_VIDEO = "MARKETPLACE_LISTING_VIDEO"
    MARKETPLACE_PRE_RECORDED_VIDEO = "MARKETPLACE_PRE_RECORDED_VIDEO"
    MOMENTS_VIDEO = "MOMENTS_VIDEO"
    MUSIC_CLIP = "MUSIC_CLIP"
    MUSIC_CLIP_IN_COMMENT = "MUSIC_CLIP_IN_COMMENT"
    MUSIC_CLIP_IN_LIGHTWEIGHT_STATUS = "MUSIC_CLIP_IN_LIGHTWEIGHT_STATUS"
    MUSIC_CLIP_IN_MSGR_NOTE = "MUSIC_CLIP_IN_MSGR_NOTE"
    MUSIC_CLIP_IN_POLL_OPTION = "MUSIC_CLIP_IN_POLL_OPTION"
    MUSIC_CLIP_ON_DATING_PROFILE = "MUSIC_CLIP_ON_DATING_PROFILE"
    NEO_ASYNC_GAME_VIDEO = "NEO_ASYNC_GAME_VIDEO"
    NEW_CONTAINED_POST_BROADCAST = "NEW_CONTAINED_POST_BROADCAST"
    NO_STORY = "NO_STORY"
    OCULUS_CREATOR_PORTAL = "OCULUS_CREATOR_PORTAL"
    OCULUS_VENUES_BROADCAST = "OCULUS_VENUES_BROADCAST"
    ORIGINALITY_SELF_ADVOCACY = "ORIGINALITY_SELF_ADVOCACY"
    PAGES_COVER_VIDEO = "PAGES_COVER_VIDEO"
    PAGE_REVIEW_SCREENCAST = "PAGE_REVIEW_SCREENCAST"
    PAGE_SLIDESHOW_VIDEO = "PAGE_SLIDESHOW_VIDEO"
    PAID_CONTENT_PREVIEW = "PAID_CONTENT_PREVIEW"
    PAID_CONTENT_VIDEO = "PAID_CONTENT_VIDEO"
    PAID_CONTENT_VIDEO__POST = "PAID_CONTENT_VIDEO__POST"
    PIXELCLOUD = "PIXELCLOUD"
    PODCAST_HIGHLIGHT = "PODCAST_HIGHLIGHT"
    PODCAST_ML_PREVIEW = "PODCAST_ML_PREVIEW"
    PODCAST_ML_PREVIEW_NO_NEWSFEED_STORY = "PODCAST_ML_PREVIEW_NO_NEWSFEED_STORY"
    PODCAST_RSS = "PODCAST_RSS"
    PODCAST_RSS_EPHEMERAL = "PODCAST_RSS_EPHEMERAL"
    PODCAST_RSS_NO_NEWSFEED_STORY = "PODCAST_RSS_NO_NEWSFEED_STORY"
    PODCAST_VOICES = "PODCAST_VOICES"
    PODCAST_VOICES_NO_NEWSFEED_STORY = "PODCAST_VOICES_NO_NEWSFEED_STORY"
    PREMIERE_SOURCE = "PREMIERE_SOURCE"
    PREMIUM_MUSIC_VIDEO_CLIP = "PREMIUM_MUSIC_VIDEO_CLIP"
    PREMIUM_MUSIC_VIDEO_CROPPED_CLIP = "PREMIUM_MUSIC_VIDEO_CROPPED_CLIP"
    PREMIUM_MUSIC_VIDEO_NO_NEWSFEED_STORY = "PREMIUM_MUSIC_VIDEO_NO_NEWSFEED_STORY"
    PREMIUM_MUSIC_VIDEO_WITH_NEWSFEED_STORY = "PREMIUM_MUSIC_VIDEO_WITH_NEWSFEED_STORY"
    PRIVATE_GALLERY_VIDEO = "PRIVATE_GALLERY_VIDEO"
    PRODUCT_VIDEO = "PRODUCT_VIDEO"
    PROFILE_COVER_VIDEO = "PROFILE_COVER_VIDEO"
    PROFILE_INTRO_CARD = "PROFILE_INTRO_CARD"
    PROFILE_VIDEO = "PROFILE_VIDEO"
    PROTON = "PROTON"
    QUICK_CLIP_WORKPLACE_POST = "QUICK_CLIP_WORKPLACE_POST"
    QUICK_PROMOTION = "QUICK_PROMOTION"
    REPLACE_VIDEO = "REPLACE_VIDEO"
    SALES_CLIENT_INTERACTION = "SALES_CLIENT_INTERACTION"
    SHOWREEL_NATIVE_DUMMY_VIDEO = "SHOWREEL_NATIVE_DUMMY_VIDEO"
    SLIDESHOW_ANIMOTO = "SLIDESHOW_ANIMOTO"
    SLIDESHOW_SHAKR = "SLIDESHOW_SHAKR"
    SLIDESHOW_VARIATION_VIDEO = "SLIDESHOW_VARIATION_VIDEO"
    SOUND_PLATFORM_STREAM = "SOUND_PLATFORM_STREAM"
    SRT_ATTACHMENT = "SRT_ATTACHMENT"
    STORIES_VIDEO = "STORIES_VIDEO"
    STORYLINE = "STORYLINE"
    STORYLINE_WITH_EXTERNAL_MUSIC = "STORYLINE_WITH_EXTERNAL_MUSIC"
    STORY_ARCHIVE_VIDEO = "STORY_ARCHIVE_VIDEO"
    STORY_CARD_TEMPLATE = "STORY_CARD_TEMPLATE"
    STREAM_HIGHLIGHTS_VIDEO = "STREAM_HIGHLIGHTS_VIDEO"
    TAROT_DIGEST = "TAROT_DIGEST"
    TEMPORARY_UNLISTED = "TEMPORARY_UNLISTED"
    TEMP_VIDEO_COPYRIGHT_SCAN = "TEMP_VIDEO_COPYRIGHT_SCAN"
    UNLISTED = "UNLISTED"
    UNLISTED_OCULUS = "UNLISTED_OCULUS"
    VIDEO_COMMENT = "VIDEO_COMMENT"
    VIDEO_COMPOSITION_VARIATION = "VIDEO_COMPOSITION_VARIATION"
    VIDEO_CREATIVE_EDITOR_AUTOGEN_AD_VIDEO = "VIDEO_CREATIVE_EDITOR_AUTOGEN_AD_VIDEO"
    VIDEO_SUPERRES = "VIDEO_SUPERRES"
    VOICES_ARTICLE_VIDEO = "VOICES_ARTICLE_VIDEO"
    VU_GENERATED_VIDEO = "VU_GENERATED_VIDEO"
    WOODHENGE = "WOODHENGE"
    WORK_KNOWLEDGE_VIDEO = "WORK_KNOWLEDGE_VIDEO"
    YOUR_DAY = "YOUR_DAY"


class businessvideos_content_category_enum_param(str, Enum):
    """businessvideos_content_category_enum_param enum values."""

    BEAUTY_FASHION = "BEAUTY_FASHION"
    BUSINESS = "BUSINESS"
    CARS_TRUCKS = "CARS_TRUCKS"
    COMEDY = "COMEDY"
    CUTE_ANIMALS = "CUTE_ANIMALS"
    ENTERTAINMENT = "ENTERTAINMENT"
    FAMILY = "FAMILY"
    FOOD_HEALTH = "FOOD_HEALTH"
    HOME = "HOME"
    LIFESTYLE = "LIFESTYLE"
    MUSIC = "MUSIC"
    NEWS = "NEWS"
    OTHER = "OTHER"
    POLITICS = "POLITICS"
    SCIENCE = "SCIENCE"
    SPORTS = "SPORTS"
    TECHNOLOGY = "TECHNOLOGY"
    VIDEO_GAMING = "VIDEO_GAMING"


class businessvideos_formatting_enum_param(str, Enum):
    """businessvideos_formatting_enum_param enum values."""

    MARKDOWN = "MARKDOWN"
    PLAINTEXT = "PLAINTEXT"


class businessvideos_original_projection_type_enum_param(str, Enum):
    """businessvideos_original_projection_type_enum_param enum values."""

    cubemap = "cubemap"
    equirectangular = "equirectangular"
    half_equirectangular = "half_equirectangular"


class businessvideos_swap_mode_enum_param(str, Enum):
    """businessvideos_swap_mode_enum_param enum values."""

    replace = "replace"


class businessvideos_unpublished_content_type_enum_param(str, Enum):
    """businessvideos_unpublished_content_type_enum_param enum values."""

    ADS_POST = "ADS_POST"
    DRAFT = "DRAFT"
    INLINE_CREATED = "INLINE_CREATED"
    PUBLISHED = "PUBLISHED"
    REVIEWABLE_BRANDED_CONTENT = "REVIEWABLE_BRANDED_CONTENT"
    SCHEDULED = "SCHEDULED"
    SCHEDULED_RECURRING = "SCHEDULED_RECURRING"


class businessvideos_upload_phase_enum_param(str, Enum):
    """businessvideos_upload_phase_enum_param enum values."""

    cancel = "cancel"
    finish = "finish"
    start = "start"
    transfer = "transfer"


class businessvideos_validation_ad_placements_enum_param(str, Enum):
    """businessvideos_validation_ad_placements_enum_param enum values."""

    AUDIENCE_NETWORK_INSTREAM_VIDEO = "AUDIENCE_NETWORK_INSTREAM_VIDEO"
    AUDIENCE_NETWORK_INSTREAM_VIDEO_MOBILE = "AUDIENCE_NETWORK_INSTREAM_VIDEO_MOBILE"
    AUDIENCE_NETWORK_REWARDED_VIDEO = "AUDIENCE_NETWORK_REWARDED_VIDEO"
    DESKTOP_FEED_STANDARD = "DESKTOP_FEED_STANDARD"
    FACEBOOK_STORY_MOBILE = "FACEBOOK_STORY_MOBILE"
    FACEBOOK_STORY_STICKER_MOBILE = "FACEBOOK_STORY_STICKER_MOBILE"
    INSTAGRAM_STANDARD = "INSTAGRAM_STANDARD"
    INSTAGRAM_STORY = "INSTAGRAM_STORY"
    INSTANT_ARTICLE_STANDARD = "INSTANT_ARTICLE_STANDARD"
    INSTREAM_BANNER_DESKTOP = "INSTREAM_BANNER_DESKTOP"
    INSTREAM_BANNER_MOBILE = "INSTREAM_BANNER_MOBILE"
    INSTREAM_VIDEO_DESKTOP = "INSTREAM_VIDEO_DESKTOP"
    INSTREAM_VIDEO_IMAGE = "INSTREAM_VIDEO_IMAGE"
    INSTREAM_VIDEO_MOBILE = "INSTREAM_VIDEO_MOBILE"
    MESSENGER_MOBILE_INBOX_MEDIA = "MESSENGER_MOBILE_INBOX_MEDIA"
    MESSENGER_MOBILE_STORY_MEDIA = "MESSENGER_MOBILE_STORY_MEDIA"
    MOBILE_FEED_STANDARD = "MOBILE_FEED_STANDARD"
    MOBILE_FULLWIDTH = "MOBILE_FULLWIDTH"
    MOBILE_INTERSTITIAL = "MOBILE_INTERSTITIAL"
    MOBILE_MEDIUM_RECTANGLE = "MOBILE_MEDIUM_RECTANGLE"
    MOBILE_NATIVE = "MOBILE_NATIVE"
    RIGHT_COLUMN_STANDARD = "RIGHT_COLUMN_STANDARD"
    SUGGESTED_VIDEO_MOBILE = "SUGGESTED_VIDEO_MOBILE"


class commentcomments_comment_privacy_value_enum_param(str, Enum):
    """commentcomments_comment_privacy_value_enum_param enum values."""

    DECLINED_BY_ADMIN_ASSISTANT = "DECLINED_BY_ADMIN_ASSISTANT"
    DEFAULT_PRIVACY = "DEFAULT_PRIVACY"
    FRIENDS_AND_POST_OWNER = "FRIENDS_AND_POST_OWNER"
    FRIENDS_ONLY = "FRIENDS_ONLY"
    GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE = "GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE"
    OWNER_OR_COMMENTER = "OWNER_OR_COMMENTER"
    PENDING_APPROVAL = "PENDING_APPROVAL"
    REMOVED_BY_ADMIN_ASSISTANT = "REMOVED_BY_ADMIN_ASSISTANT"
    SIDE_CONVERSATION = "SIDE_CONVERSATION"
    SIDE_CONVERSATION_AND_POST_OWNER = "SIDE_CONVERSATION_AND_POST_OWNER"
    SPOTLIGHT_TAB = "SPOTLIGHT_TAB"


class commentcomments_filter_enum_param(str, Enum):
    """commentcomments_filter_enum_param enum values."""

    stream = "stream"
    toplevel = "toplevel"


class commentcomments_live_filter_enum_param(str, Enum):
    """commentcomments_live_filter_enum_param enum values."""

    filter_low_quality = "filter_low_quality"
    no_filter = "no_filter"


class commentcomments_order_enum_param(str, Enum):
    """commentcomments_order_enum_param enum values."""

    chronological = "chronological"
    reverse_chronological = "reverse_chronological"


class commentreactions_type_enum_param(str, Enum):
    """commentreactions_type_enum_param enum values."""

    ANGRY = "ANGRY"
    CARE = "CARE"
    FIRE = "FIRE"
    HAHA = "HAHA"
    HUNDRED = "HUNDRED"
    LIKE = "LIKE"
    LOVE = "LOVE"
    NONE = "NONE"
    PRIDE = "PRIDE"
    SAD = "SAD"
    THANKFUL = "THANKFUL"
    WOW = "WOW"


class commercemerchantsettingscommerce_orders_filters_enum_param(str, Enum):
    """commercemerchantsettingscommerce_orders_filters_enum_param enum values."""

    HAS_CANCELLATIONS = "HAS_CANCELLATIONS"
    HAS_FULFILLMENTS = "HAS_FULFILLMENTS"
    HAS_REFUNDS = "HAS_REFUNDS"
    NO_CANCELLATIONS = "NO_CANCELLATIONS"
    NO_REFUNDS = "NO_REFUNDS"
    NO_SHIPMENTS = "NO_SHIPMENTS"


class commercemerchantsettingscommerce_orders_state_enum_param(str, Enum):
    """commercemerchantsettingscommerce_orders_state_enum_param enum values."""

    COMPLETED = "COMPLETED"
    CREATED = "CREATED"
    FB_PROCESSING = "FB_PROCESSING"
    IN_PROGRESS = "IN_PROGRESS"


class commercemerchantsettingsreturns_statuses_enum_param(str, Enum):
    """commercemerchantsettingsreturns_statuses_enum_param enum values."""

    APPROVED = "APPROVED"
    DISAPPROVED = "DISAPPROVED"
    MERCHANT_MARKED_COMPLETED = "MERCHANT_MARKED_COMPLETED"
    REFUNDED = "REFUNDED"
    REQUESTED = "REQUESTED"


class commerceorderrefunds_reason_code_enum_param(str, Enum):
    """commerceorderrefunds_reason_code_enum_param enum values."""

    BUYERS_REMORSE = "BUYERS_REMORSE"
    DAMAGED_GOODS = "DAMAGED_GOODS"
    FACEBOOK_INITIATED = "FACEBOOK_INITIATED"
    NOT_AS_DESCRIBED = "NOT_AS_DESCRIBED"
    QUALITY_ISSUE = "QUALITY_ISSUE"
    REFUND_COMPROMISED = "REFUND_COMPROMISED"
    REFUND_FOR_RETURN = "REFUND_FOR_RETURN"
    REFUND_REASON_OTHER = "REFUND_REASON_OTHER"
    REFUND_SFI_FAKE = "REFUND_SFI_FAKE"
    REFUND_SFI_REAL = "REFUND_SFI_REAL"
    WRONG_ITEM = "WRONG_ITEM"


class commerceorderreturns_statuses_enum_param(str, Enum):
    """commerceorderreturns_statuses_enum_param enum values."""

    APPROVED = "APPROVED"
    DISAPPROVED = "DISAPPROVED"
    MERCHANT_MARKED_COMPLETED = "MERCHANT_MARKED_COMPLETED"
    REFUNDED = "REFUNDED"
    REQUESTED = "REQUESTED"


class customaudience_claim_objective(str, Enum):
    """customaudience_claim_objective enum values."""

    AUTOMOTIVE_MODEL = "AUTOMOTIVE_MODEL"
    COLLABORATIVE_ADS = "COLLABORATIVE_ADS"
    HOME_LISTING = "HOME_LISTING"
    MEDIA_TITLE = "MEDIA_TITLE"
    PRODUCT = "PRODUCT"
    TRAVEL = "TRAVEL"
    VEHICLE = "VEHICLE"
    VEHICLE_OFFER = "VEHICLE_OFFER"


class customaudience_content_type(str, Enum):
    """customaudience_content_type enum values."""

    AUTOMOTIVE_MODEL = "AUTOMOTIVE_MODEL"
    DESTINATION = "DESTINATION"
    FLIGHT = "FLIGHT"
    GENERIC = "GENERIC"
    HOME_LISTING = "HOME_LISTING"
    HOTEL = "HOTEL"
    LOCAL_SERVICE_BUSINESS = "LOCAL_SERVICE_BUSINESS"
    MEDIA_TITLE = "MEDIA_TITLE"
    OFFLINE_PRODUCT = "OFFLINE_PRODUCT"
    PRODUCT = "PRODUCT"
    VEHICLE = "VEHICLE"
    VEHICLE_OFFER = "VEHICLE_OFFER"


class customaudience_customer_file_source(str, Enum):
    """customaudience_customer_file_source enum values."""

    BOTH_USER_AND_PARTNER_PROVIDED = "BOTH_USER_AND_PARTNER_PROVIDED"
    PARTNER_PROVIDED_ONLY = "PARTNER_PROVIDED_ONLY"
    USER_PROVIDED_ONLY = "USER_PROVIDED_ONLY"


class customconversionstats_aggregation_enum_param(str, Enum):
    """customconversionstats_aggregation_enum_param enum values."""

    count = "count"
    device_type = "device_type"
    host = "host"
    pixel_fire = "pixel_fire"
    unmatched_count = "unmatched_count"
    unmatched_usd_amount = "unmatched_usd_amount"
    url = "url"
    usd_amount = "usd_amount"


class destinationoverride_details_type_enum_param(str, Enum):
    """destinationoverride_details_type_enum_param enum values."""

    COUNTRY = "COUNTRY"
    LANGUAGE = "LANGUAGE"
    LANGUAGE_AND_COUNTRY = "LANGUAGE_AND_COUNTRY"


class eventlive_videos_projection_enum_param(str, Enum):
    """eventlive_videos_projection_enum_param enum values."""

    CUBEMAP = "CUBEMAP"
    EQUIRECTANGULAR = "EQUIRECTANGULAR"
    HALF_EQUIRECTANGULAR = "HALF_EQUIRECTANGULAR"


class eventlive_videos_spatial_audio_format_enum_param(str, Enum):
    """eventlive_videos_spatial_audio_format_enum_param enum values."""

    ambiX_4 = "ambiX_4"


class eventlive_videos_status_enum_param(str, Enum):
    """eventlive_videos_status_enum_param enum values."""

    LIVE_NOW = "LIVE_NOW"
    SCHEDULED_CANCELED = "SCHEDULED_CANCELED"
    SCHEDULED_LIVE = "SCHEDULED_LIVE"
    SCHEDULED_UNPUBLISHED = "SCHEDULED_UNPUBLISHED"
    UNPUBLISHED = "UNPUBLISHED"


class eventlive_videos_stereoscopic_mode_enum_param(str, Enum):
    """eventlive_videos_stereoscopic_mode_enum_param enum values."""

    LEFT_RIGHT = "LEFT_RIGHT"
    MONO = "MONO"
    TOP_BOTTOM = "TOP_BOTTOM"


class eventlive_videos_stream_type_enum_param(str, Enum):
    """eventlive_videos_stream_type_enum_param enum values."""

    AMBIENT = "AMBIENT"
    REGULAR = "REGULAR"


class extendedcreditowning_credit_allocation_configs_liability_type_enum_param(str, Enum):
    """extendedcreditowning_credit_allocation_configs_liability_type_enum_param enum values."""

    VALUE_EMPTY = ""
    MSA = "MSA"
    Normal = "Normal"
    Sequential = "Sequential"


class extendedcreditowning_credit_allocation_configs_partition_type_enum_param(str, Enum):
    """extendedcreditowning_credit_allocation_configs_partition_type_enum_param enum values."""

    AUTH = "AUTH"
    FIXED = "FIXED"
    FIXED_WITHOUT_PARTITION = "FIXED_WITHOUT_PARTITION"


class extendedcreditowning_credit_allocation_configs_send_bill_to_enum_param(str, Enum):
    """extendedcreditowning_credit_allocation_configs_send_bill_to_enum_param enum values."""

    VALUE_EMPTY = ""
    Advertiser = "Advertiser"
    Agency = "Agency"


class flightoverride_details_type_enum_param(str, Enum):
    """flightoverride_details_type_enum_param enum values."""

    COUNTRY = "COUNTRY"
    LANGUAGE = "LANGUAGE"
    LANGUAGE_AND_COUNTRY = "LANGUAGE_AND_COUNTRY"


class group_icon_size(str, Enum):
    """group_icon_size enum values."""

    VALUE_16 = "16"
    VALUE_34 = "34"
    VALUE_50 = "50"
    VALUE_68 = "68"


class group_join_setting(str, Enum):
    """group_join_setting enum values."""

    ADMIN_ONLY = "ADMIN_ONLY"
    ANYONE = "ANYONE"
    NONE = "NONE"


class group_post_permissions(str, Enum):
    """group_post_permissions enum values."""

    ADMIN_ONLY = "ADMIN_ONLY"
    ANYONE = "ANYONE"
    NONE = "NONE"


class group_purpose(str, Enum):
    """group_purpose enum values."""

    CASUAL = "CASUAL"
    COWORKERS = "COWORKERS"
    CUSTOM = "CUSTOM"
    FOR_SALE = "FOR_SALE"
    FOR_WORK = "FOR_WORK"
    GAME = "GAME"
    HEALTH_SUPPORT = "HEALTH_SUPPORT"
    JOBS = "JOBS"
    LEARNING = "LEARNING"
    NONE = "NONE"
    PARENTING = "PARENTING"
    STREAMER = "STREAMER"
    WORK_ANNOUNCEMENT = "WORK_ANNOUNCEMENT"
    WORK_DEMO_GROUP = "WORK_DEMO_GROUP"
    WORK_DISCUSSION = "WORK_DISCUSSION"
    WORK_EPHEMERAL = "WORK_EPHEMERAL"
    WORK_FEEDBACK = "WORK_FEEDBACK"
    WORK_FOR_SALE = "WORK_FOR_SALE"
    WORK_GARDEN = "WORK_GARDEN"
    WORK_INTEGRITY = "WORK_INTEGRITY"
    WORK_LEARNING = "WORK_LEARNING"
    WORK_MENTORSHIP = "WORK_MENTORSHIP"
    WORK_MULTI_COMPANY = "WORK_MULTI_COMPANY"
    WORK_RECRUITING = "WORK_RECRUITING"
    WORK_SOCIAL = "WORK_SOCIAL"
    WORK_STAGES = "WORK_STAGES"
    WORK_TEAM = "WORK_TEAM"
    WORK_TEAMWORK = "WORK_TEAMWORK"


class groupfeed_backdated_time_granularity_enum_param(str, Enum):
    """groupfeed_backdated_time_granularity_enum_param enum values."""

    day = "day"
    hour = "hour"
    min = "min"
    month = "month"
    none = "none"
    year = "year"


class groupfeed_formatting_enum_param(str, Enum):
    """groupfeed_formatting_enum_param enum values."""

    MARKDOWN = "MARKDOWN"
    PLAINTEXT = "PLAINTEXT"


class groupfeed_place_attachment_setting_enum_param(str, Enum):
    """groupfeed_place_attachment_setting_enum_param enum values."""

    VALUE_1 = "1"
    VALUE_2 = "2"


class groupfeed_post_surfaces_blacklist_enum_param(str, Enum):
    """groupfeed_post_surfaces_blacklist_enum_param enum values."""

    VALUE_1 = "1"
    VALUE_2 = "2"
    VALUE_3 = "3"
    VALUE_4 = "4"
    VALUE_5 = "5"


class groupfeed_posting_to_redspace_enum_param(str, Enum):
    """groupfeed_posting_to_redspace_enum_param enum values."""

    disabled = "disabled"
    enabled = "enabled"


class groupfeed_target_surface_enum_param(str, Enum):
    """groupfeed_target_surface_enum_param enum values."""

    STORY = "STORY"
    TIMELINE = "TIMELINE"


class groupfeed_unpublished_content_type_enum_param(str, Enum):
    """groupfeed_unpublished_content_type_enum_param enum values."""

    ADS_POST = "ADS_POST"
    DRAFT = "DRAFT"
    INLINE_CREATED = "INLINE_CREATED"
    PUBLISHED = "PUBLISHED"
    REVIEWABLE_BRANDED_CONTENT = "REVIEWABLE_BRANDED_CONTENT"
    SCHEDULED = "SCHEDULED"
    SCHEDULED_RECURRING = "SCHEDULED_RECURRING"


class groupgroups_group_type_enum_param(str, Enum):
    """groupgroups_group_type_enum_param enum values."""

    CASUAL = "CASUAL"
    COWORKERS = "COWORKERS"
    CUSTOM = "CUSTOM"
    FOR_SALE = "FOR_SALE"
    FOR_WORK = "FOR_WORK"
    GAME = "GAME"
    HEALTH_SUPPORT = "HEALTH_SUPPORT"
    JOBS = "JOBS"
    LEARNING = "LEARNING"
    NONE = "NONE"
    PARENTING = "PARENTING"
    STREAMER = "STREAMER"
    WORK_ANNOUNCEMENT = "WORK_ANNOUNCEMENT"
    WORK_DEMO_GROUP = "WORK_DEMO_GROUP"
    WORK_DISCUSSION = "WORK_DISCUSSION"
    WORK_EPHEMERAL = "WORK_EPHEMERAL"
    WORK_FEEDBACK = "WORK_FEEDBACK"
    WORK_FOR_SALE = "WORK_FOR_SALE"
    WORK_GARDEN = "WORK_GARDEN"
    WORK_INTEGRITY = "WORK_INTEGRITY"
    WORK_LEARNING = "WORK_LEARNING"
    WORK_MENTORSHIP = "WORK_MENTORSHIP"
    WORK_MULTI_COMPANY = "WORK_MULTI_COMPANY"
    WORK_RECRUITING = "WORK_RECRUITING"
    WORK_SOCIAL = "WORK_SOCIAL"
    WORK_STAGES = "WORK_STAGES"
    WORK_TEAM = "WORK_TEAM"
    WORK_TEAMWORK = "WORK_TEAMWORK"


class groupgroups_join_setting_enum_param(str, Enum):
    """groupgroups_join_setting_enum_param enum values."""

    ADMIN_ONLY = "ADMIN_ONLY"
    ANYONE = "ANYONE"
    NONE = "NONE"


class groupgroups_post_permissions_enum_param(str, Enum):
    """groupgroups_post_permissions_enum_param enum values."""

    ADMIN_ONLY = "ADMIN_ONLY"
    ANYONE = "ANYONE"
    NONE = "NONE"


class grouplive_videos_broadcast_status_enum_param(str, Enum):
    """grouplive_videos_broadcast_status_enum_param enum values."""

    LIVE = "LIVE"
    LIVE_STOPPED = "LIVE_STOPPED"
    PROCESSING = "PROCESSING"
    SCHEDULED_CANCELED = "SCHEDULED_CANCELED"
    SCHEDULED_EXPIRED = "SCHEDULED_EXPIRED"
    SCHEDULED_LIVE = "SCHEDULED_LIVE"
    SCHEDULED_UNPUBLISHED = "SCHEDULED_UNPUBLISHED"
    UNPUBLISHED = "UNPUBLISHED"
    VOD = "VOD"


class grouplive_videos_projection_enum_param(str, Enum):
    """grouplive_videos_projection_enum_param enum values."""

    CUBEMAP = "CUBEMAP"
    EQUIRECTANGULAR = "EQUIRECTANGULAR"
    HALF_EQUIRECTANGULAR = "HALF_EQUIRECTANGULAR"


class grouplive_videos_source_enum_param(str, Enum):
    """grouplive_videos_source_enum_param enum values."""

    owner = "owner"
    target = "target"


class grouplive_videos_spatial_audio_format_enum_param(str, Enum):
    """grouplive_videos_spatial_audio_format_enum_param enum values."""

    ambiX_4 = "ambiX_4"


class grouplive_videos_status_enum_param(str, Enum):
    """grouplive_videos_status_enum_param enum values."""

    LIVE_NOW = "LIVE_NOW"
    SCHEDULED_CANCELED = "SCHEDULED_CANCELED"
    SCHEDULED_LIVE = "SCHEDULED_LIVE"
    SCHEDULED_UNPUBLISHED = "SCHEDULED_UNPUBLISHED"
    UNPUBLISHED = "UNPUBLISHED"


class grouplive_videos_stereoscopic_mode_enum_param(str, Enum):
    """grouplive_videos_stereoscopic_mode_enum_param enum values."""

    LEFT_RIGHT = "LEFT_RIGHT"
    MONO = "MONO"
    TOP_BOTTOM = "TOP_BOTTOM"


class grouplive_videos_stream_type_enum_param(str, Enum):
    """grouplive_videos_stream_type_enum_param enum values."""

    AMBIENT = "AMBIENT"
    REGULAR = "REGULAR"


class groupphotos_backdated_time_granularity_enum_param(str, Enum):
    """groupphotos_backdated_time_granularity_enum_param enum values."""

    day = "day"
    hour = "hour"
    min = "min"
    month = "month"
    none = "none"
    year = "year"


class groupphotos_unpublished_content_type_enum_param(str, Enum):
    """groupphotos_unpublished_content_type_enum_param enum values."""

    ADS_POST = "ADS_POST"
    DRAFT = "DRAFT"
    INLINE_CREATED = "INLINE_CREATED"
    PUBLISHED = "PUBLISHED"
    REVIEWABLE_BRANDED_CONTENT = "REVIEWABLE_BRANDED_CONTENT"
    SCHEDULED = "SCHEDULED"
    SCHEDULED_RECURRING = "SCHEDULED_RECURRING"


class grouppicture_type_enum_param(str, Enum):
    """grouppicture_type_enum_param enum values."""

    album = "album"
    large = "large"
    normal = "normal"
    small = "small"
    square = "square"


class groupvideos_container_type_enum_param(str, Enum):
    """groupvideos_container_type_enum_param enum values."""

    ACO_VIDEO_VARIATION = "ACO_VIDEO_VARIATION"
    ADS_AI_GENERATED = "ADS_AI_GENERATED"
    AD_BREAK_PREVIEW = "AD_BREAK_PREVIEW"
    AD_DERIVATIVE = "AD_DERIVATIVE"
    AD_LIBRARY_WATERMARK = "AD_LIBRARY_WATERMARK"
    ALBUM_MULTIMEDIA_POST = "ALBUM_MULTIMEDIA_POST"
    ALOHA_SUPERFRAME = "ALOHA_SUPERFRAME"
    APP_REREVIEW_SCREENCAST = "APP_REREVIEW_SCREENCAST"
    APP_REVIEW_SCREENCAST = "APP_REVIEW_SCREENCAST"
    ASSET_MANAGER = "ASSET_MANAGER"
    ATLAS_VIDEO = "ATLAS_VIDEO"
    AUDIO_BROADCAST = "AUDIO_BROADCAST"
    AUDIO_COMMENT = "AUDIO_COMMENT"
    BROADCAST = "BROADCAST"
    CANVAS = "CANVAS"
    CMS_MEDIA_MANAGER = "CMS_MEDIA_MANAGER"
    CONTAINED_POST_ATTACHMENT = "CONTAINED_POST_ATTACHMENT"
    CONTAINED_POST_AUDIO_BROADCAST = "CONTAINED_POST_AUDIO_BROADCAST"
    CONTAINED_POST_COPYRIGHT_REFERENCE_BROADCAST = "CONTAINED_POST_COPYRIGHT_REFERENCE_BROADCAST"
    COPYRIGHT_REFERENCE_BROADCAST = "COPYRIGHT_REFERENCE_BROADCAST"
    COPYRIGHT_REFERENCE_IG_XPOST_VIDEO = "COPYRIGHT_REFERENCE_IG_XPOST_VIDEO"
    COPYRIGHT_REFERENCE_VIDEO = "COPYRIGHT_REFERENCE_VIDEO"
    CREATION_ML_PRECREATION = "CREATION_ML_PRECREATION"
    CREATOR_FAN_CHALLENGE = "CREATOR_FAN_CHALLENGE"
    CREATOR_STOREFRONT_PERSONALIZED_VIDEO = "CREATOR_STOREFRONT_PERSONALIZED_VIDEO"
    DATAGENIX_VIDEO = "DATAGENIX_VIDEO"
    DCO_AD_ASSET_FEED = "DCO_AD_ASSET_FEED"
    DCO_AUTOGEN_VIDEO = "DCO_AUTOGEN_VIDEO"
    DCO_TRIMMED_VIDEO = "DCO_TRIMMED_VIDEO"
    DIM_SUM = "DIM_SUM"
    DIRECTED_POST_ATTACHMENT = "DIRECTED_POST_ATTACHMENT"
    DIRECT_INBOX = "DIRECT_INBOX"
    DROPS_SHOPPING_EVENT_PAGE = "DROPS_SHOPPING_EVENT_PAGE"
    DYNAMIC_ITEM_VIDEO = "DYNAMIC_ITEM_VIDEO"
    DYNAMIC_TEMPLATE_VIDEO = "DYNAMIC_TEMPLATE_VIDEO"
    EVENT_COVER_VIDEO = "EVENT_COVER_VIDEO"
    EVENT_TOUR = "EVENT_TOUR"
    FACECAST_DVR = "FACECAST_DVR"
    FB_AVATAR_ANIMATED_SATP = "FB_AVATAR_ANIMATED_SATP"
    FB_COLLECTIBLE_VIDEO = "FB_COLLECTIBLE_VIDEO"
    FB_SHORTS = "FB_SHORTS"
    FB_SHORTS_CONTENT_REMIXABLE = "FB_SHORTS_CONTENT_REMIXABLE"
    FB_SHORTS_GROUP_POST = "FB_SHORTS_GROUP_POST"
    FB_SHORTS_LINKED_PRODUCT = "FB_SHORTS_LINKED_PRODUCT"
    FB_SHORTS_PMV_POST = "FB_SHORTS_PMV_POST"
    FB_SHORTS_POST = "FB_SHORTS_POST"
    FB_SHORTS_REMIX_POST = "FB_SHORTS_REMIX_POST"
    FUNDRAISER_COVER_VIDEO = "FUNDRAISER_COVER_VIDEO"
    GAME_CLIP = "GAME_CLIP"
    GIF_TO_VIDEO = "GIF_TO_VIDEO"
    GOODWILL_ANNIVERSARY_DEPRECATED = "GOODWILL_ANNIVERSARY_DEPRECATED"
    GOODWILL_ANNIVERSARY_PROMOTION_DEPRECATED = "GOODWILL_ANNIVERSARY_PROMOTION_DEPRECATED"
    GOODWILL_VIDEO_CONTAINED_SHARE = "GOODWILL_VIDEO_CONTAINED_SHARE"
    GOODWILL_VIDEO_PROMOTION = "GOODWILL_VIDEO_PROMOTION"
    GOODWILL_VIDEO_SHARE = "GOODWILL_VIDEO_SHARE"
    GOODWILL_VIDEO_TOKEN_REQUIRED = "GOODWILL_VIDEO_TOKEN_REQUIRED"
    GROUP_POST = "GROUP_POST"
    HEURISTIC_CLUSTER_VIDEO = "HEURISTIC_CLUSTER_VIDEO"
    HIGHLIGHT_CLIP_VIDEO = "HIGHLIGHT_CLIP_VIDEO"
    HORIZON_WORLDS_TV = "HORIZON_WORLDS_TV"
    HUDDLE_BROADCAST = "HUDDLE_BROADCAST"
    IG_REELS_XPV = "IG_REELS_XPV"
    IG_STORIES_READER = "IG_STORIES_READER"
    INJECTABLE = "INJECTABLE"
    INSPIRATION_VIDEO = "INSPIRATION_VIDEO"
    INSTAGRAM_VIDEO_COPY = "INSTAGRAM_VIDEO_COPY"
    INSTANT_APPLICATION_PREVIEW = "INSTANT_APPLICATION_PREVIEW"
    INSTANT_ARTICLE = "INSTANT_ARTICLE"
    ISSUE_MODULE = "ISSUE_MODULE"
    LEARN = "LEARN"
    LEGACY = "LEGACY"
    LEGACY_CONTAINED_POST_BROADCAST = "LEGACY_CONTAINED_POST_BROADCAST"
    LIVE_AUDIO_ROOM_BROADCAST = "LIVE_AUDIO_ROOM_BROADCAST"
    LIVE_CLIP_PREVIEW = "LIVE_CLIP_PREVIEW"
    LIVE_CLIP_WORKCHAT = "LIVE_CLIP_WORKCHAT"
    LIVE_CREATIVE_KIT_VIDEO = "LIVE_CREATIVE_KIT_VIDEO"
    LIVE_PHOTO = "LIVE_PHOTO"
    LOOK_NOW_DEPRECATED = "LOOK_NOW_DEPRECATED"
    MARKETPLACE_LISTING_VIDEO = "MARKETPLACE_LISTING_VIDEO"
    MARKETPLACE_PRE_RECORDED_VIDEO = "MARKETPLACE_PRE_RECORDED_VIDEO"
    MOMENTS_VIDEO = "MOMENTS_VIDEO"
    MUSIC_CLIP = "MUSIC_CLIP"
    MUSIC_CLIP_IN_COMMENT = "MUSIC_CLIP_IN_COMMENT"
    MUSIC_CLIP_IN_LIGHTWEIGHT_STATUS = "MUSIC_CLIP_IN_LIGHTWEIGHT_STATUS"
    MUSIC_CLIP_IN_MSGR_NOTE = "MUSIC_CLIP_IN_MSGR_NOTE"
    MUSIC_CLIP_IN_POLL_OPTION = "MUSIC_CLIP_IN_POLL_OPTION"
    MUSIC_CLIP_ON_DATING_PROFILE = "MUSIC_CLIP_ON_DATING_PROFILE"
    NEO_ASYNC_GAME_VIDEO = "NEO_ASYNC_GAME_VIDEO"
    NEW_CONTAINED_POST_BROADCAST = "NEW_CONTAINED_POST_BROADCAST"
    NO_STORY = "NO_STORY"
    OCULUS_CREATOR_PORTAL = "OCULUS_CREATOR_PORTAL"
    OCULUS_VENUES_BROADCAST = "OCULUS_VENUES_BROADCAST"
    ORIGINALITY_SELF_ADVOCACY = "ORIGINALITY_SELF_ADVOCACY"
    PAGES_COVER_VIDEO = "PAGES_COVER_VIDEO"
    PAGE_REVIEW_SCREENCAST = "PAGE_REVIEW_SCREENCAST"
    PAGE_SLIDESHOW_VIDEO = "PAGE_SLIDESHOW_VIDEO"
    PAID_CONTENT_PREVIEW = "PAID_CONTENT_PREVIEW"
    PAID_CONTENT_VIDEO = "PAID_CONTENT_VIDEO"
    PAID_CONTENT_VIDEO__POST = "PAID_CONTENT_VIDEO__POST"
    PIXELCLOUD = "PIXELCLOUD"
    PODCAST_HIGHLIGHT = "PODCAST_HIGHLIGHT"
    PODCAST_ML_PREVIEW = "PODCAST_ML_PREVIEW"
    PODCAST_ML_PREVIEW_NO_NEWSFEED_STORY = "PODCAST_ML_PREVIEW_NO_NEWSFEED_STORY"
    PODCAST_RSS = "PODCAST_RSS"
    PODCAST_RSS_EPHEMERAL = "PODCAST_RSS_EPHEMERAL"
    PODCAST_RSS_NO_NEWSFEED_STORY = "PODCAST_RSS_NO_NEWSFEED_STORY"
    PODCAST_VOICES = "PODCAST_VOICES"
    PODCAST_VOICES_NO_NEWSFEED_STORY = "PODCAST_VOICES_NO_NEWSFEED_STORY"
    PREMIERE_SOURCE = "PREMIERE_SOURCE"
    PREMIUM_MUSIC_VIDEO_CLIP = "PREMIUM_MUSIC_VIDEO_CLIP"
    PREMIUM_MUSIC_VIDEO_CROPPED_CLIP = "PREMIUM_MUSIC_VIDEO_CROPPED_CLIP"
    PREMIUM_MUSIC_VIDEO_NO_NEWSFEED_STORY = "PREMIUM_MUSIC_VIDEO_NO_NEWSFEED_STORY"
    PREMIUM_MUSIC_VIDEO_WITH_NEWSFEED_STORY = "PREMIUM_MUSIC_VIDEO_WITH_NEWSFEED_STORY"
    PRIVATE_GALLERY_VIDEO = "PRIVATE_GALLERY_VIDEO"
    PRODUCT_VIDEO = "PRODUCT_VIDEO"
    PROFILE_COVER_VIDEO = "PROFILE_COVER_VIDEO"
    PROFILE_INTRO_CARD = "PROFILE_INTRO_CARD"
    PROFILE_VIDEO = "PROFILE_VIDEO"
    PROTON = "PROTON"
    QUICK_CLIP_WORKPLACE_POST = "QUICK_CLIP_WORKPLACE_POST"
    QUICK_PROMOTION = "QUICK_PROMOTION"
    REPLACE_VIDEO = "REPLACE_VIDEO"
    SALES_CLIENT_INTERACTION = "SALES_CLIENT_INTERACTION"
    SHOWREEL_NATIVE_DUMMY_VIDEO = "SHOWREEL_NATIVE_DUMMY_VIDEO"
    SLIDESHOW_ANIMOTO = "SLIDESHOW_ANIMOTO"
    SLIDESHOW_SHAKR = "SLIDESHOW_SHAKR"
    SLIDESHOW_VARIATION_VIDEO = "SLIDESHOW_VARIATION_VIDEO"
    SOUND_PLATFORM_STREAM = "SOUND_PLATFORM_STREAM"
    SRT_ATTACHMENT = "SRT_ATTACHMENT"
    STORIES_VIDEO = "STORIES_VIDEO"
    STORYLINE = "STORYLINE"
    STORYLINE_WITH_EXTERNAL_MUSIC = "STORYLINE_WITH_EXTERNAL_MUSIC"
    STORY_ARCHIVE_VIDEO = "STORY_ARCHIVE_VIDEO"
    STORY_CARD_TEMPLATE = "STORY_CARD_TEMPLATE"
    STREAM_HIGHLIGHTS_VIDEO = "STREAM_HIGHLIGHTS_VIDEO"
    TAROT_DIGEST = "TAROT_DIGEST"
    TEMPORARY_UNLISTED = "TEMPORARY_UNLISTED"
    TEMP_VIDEO_COPYRIGHT_SCAN = "TEMP_VIDEO_COPYRIGHT_SCAN"
    UNLISTED = "UNLISTED"
    UNLISTED_OCULUS = "UNLISTED_OCULUS"
    VIDEO_COMMENT = "VIDEO_COMMENT"
    VIDEO_COMPOSITION_VARIATION = "VIDEO_COMPOSITION_VARIATION"
    VIDEO_CREATIVE_EDITOR_AUTOGEN_AD_VIDEO = "VIDEO_CREATIVE_EDITOR_AUTOGEN_AD_VIDEO"
    VIDEO_SUPERRES = "VIDEO_SUPERRES"
    VOICES_ARTICLE_VIDEO = "VOICES_ARTICLE_VIDEO"
    VU_GENERATED_VIDEO = "VU_GENERATED_VIDEO"
    WOODHENGE = "WOODHENGE"
    WORK_KNOWLEDGE_VIDEO = "WORK_KNOWLEDGE_VIDEO"
    YOUR_DAY = "YOUR_DAY"


class groupvideos_content_category_enum_param(str, Enum):
    """groupvideos_content_category_enum_param enum values."""

    BEAUTY_FASHION = "BEAUTY_FASHION"
    BUSINESS = "BUSINESS"
    CARS_TRUCKS = "CARS_TRUCKS"
    COMEDY = "COMEDY"
    CUTE_ANIMALS = "CUTE_ANIMALS"
    ENTERTAINMENT = "ENTERTAINMENT"
    FAMILY = "FAMILY"
    FOOD_HEALTH = "FOOD_HEALTH"
    HOME = "HOME"
    LIFESTYLE = "LIFESTYLE"
    MUSIC = "MUSIC"
    NEWS = "NEWS"
    OTHER = "OTHER"
    POLITICS = "POLITICS"
    SCIENCE = "SCIENCE"
    SPORTS = "SPORTS"
    TECHNOLOGY = "TECHNOLOGY"
    VIDEO_GAMING = "VIDEO_GAMING"


class groupvideos_formatting_enum_param(str, Enum):
    """groupvideos_formatting_enum_param enum values."""

    MARKDOWN = "MARKDOWN"
    PLAINTEXT = "PLAINTEXT"


class groupvideos_original_projection_type_enum_param(str, Enum):
    """groupvideos_original_projection_type_enum_param enum values."""

    cubemap = "cubemap"
    equirectangular = "equirectangular"
    half_equirectangular = "half_equirectangular"


class groupvideos_swap_mode_enum_param(str, Enum):
    """groupvideos_swap_mode_enum_param enum values."""

    replace = "replace"


class groupvideos_type_enum_param(str, Enum):
    """groupvideos_type_enum_param enum values."""

    tagged = "tagged"
    uploaded = "uploaded"


class groupvideos_unpublished_content_type_enum_param(str, Enum):
    """groupvideos_unpublished_content_type_enum_param enum values."""

    ADS_POST = "ADS_POST"
    DRAFT = "DRAFT"
    INLINE_CREATED = "INLINE_CREATED"
    PUBLISHED = "PUBLISHED"
    REVIEWABLE_BRANDED_CONTENT = "REVIEWABLE_BRANDED_CONTENT"
    SCHEDULED = "SCHEDULED"
    SCHEDULED_RECURRING = "SCHEDULED_RECURRING"


class groupvideos_upload_phase_enum_param(str, Enum):
    """groupvideos_upload_phase_enum_param enum values."""

    cancel = "cancel"
    finish = "finish"
    start = "start"
    transfer = "transfer"


class highdemandperiod_budget_value_type(str, Enum):
    """highdemandperiod_budget_value_type enum values."""

    ABSOLUTE = "ABSOLUTE"
    MULTIPLIER = "MULTIPLIER"


class homelistingoverride_details_type_enum_param(str, Enum):
    """homelistingoverride_details_type_enum_param enum values."""

    COUNTRY = "COUNTRY"
    LANGUAGE = "LANGUAGE"
    LANGUAGE_AND_COUNTRY = "LANGUAGE_AND_COUNTRY"


class hoteloverride_details_type_enum_param(str, Enum):
    """hoteloverride_details_type_enum_param enum values."""

    COUNTRY = "COUNTRY"
    LANGUAGE = "LANGUAGE"
    LANGUAGE_AND_COUNTRY = "LANGUAGE_AND_COUNTRY"


class iggraphusermessages_messaging_type_enum_param(str, Enum):
    """iggraphusermessages_messaging_type_enum_param enum values."""

    MESSAGE_TAG = "MESSAGE_TAG"
    RESPONSE = "RESPONSE"
    UPDATE = "UPDATE"
    UTILITY = "UTILITY"


class iggraphusermessages_sender_action_enum_param(str, Enum):
    """iggraphusermessages_sender_action_enum_param enum values."""

    MARK_SEEN = "MARK_SEEN"
    REACT = "REACT"
    TYPING_OFF = "TYPING_OFF"
    TYPING_ON = "TYPING_ON"
    UNREACT = "UNREACT"


class iggraphusermessenger_profile_fields_enum_param(str, Enum):
    """iggraphusermessenger_profile_fields_enum_param enum values."""

    ACCOUNT_LINKING_URL = "ACCOUNT_LINKING_URL"
    COMMANDS = "COMMANDS"
    DESCRIPTION = "DESCRIPTION"
    GET_STARTED = "GET_STARTED"
    GREETING = "GREETING"
    HOME_URL = "HOME_URL"
    ICE_BREAKERS = "ICE_BREAKERS"
    PERSISTENT_MENU = "PERSISTENT_MENU"
    PLATFORM = "PLATFORM"
    SUBJECT_TO_NEW_EU_PRIVACY_RULES = "SUBJECT_TO_NEW_EU_PRIVACY_RULES"
    TITLE = "TITLE"
    WHITELISTED_DOMAINS = "WHITELISTED_DOMAINS"


class iggraphusersubscribed_apps_subscribed_fields_enum_param(str, Enum):
    """iggraphusersubscribed_apps_subscribed_fields_enum_param enum values."""

    comment_poll_response = "comment_poll_response"
    comments = "comments"
    creator_marketplace_invited_creator_onboarding = (
        "creator_marketplace_invited_creator_onboarding"
    )
    creator_marketplace_projects = "creator_marketplace_projects"
    delta = "delta"
    follow = "follow"
    live_comments = "live_comments"
    mentions = "mentions"
    message_reactions = "message_reactions"
    messages = "messages"
    messaging_handover = "messaging_handover"
    messaging_optins = "messaging_optins"
    messaging_postbacks = "messaging_postbacks"
    messaging_referral = "messaging_referral"
    messaging_seen = "messaging_seen"
    onboarding_welcome_message_series = "onboarding_welcome_message_series"
    standby = "standby"
    story_insights = "story_insights"
    story_poll_response = "story_poll_response"
    story_reactions = "story_reactions"
    story_share = "story_share"


class iggraphuserwelcome_message_flows_eligible_platforms_enum_param(str, Enum):
    """iggraphuserwelcome_message_flows_eligible_platforms_enum_param enum values."""

    INSTAGRAM = "INSTAGRAM"
    MESSENGER = "MESSENGER"
    WHATSAPP = "WHATSAPP"


class igupcomingevent_notification_subtypes(str, Enum):
    """igupcomingevent_notification_subtypes enum values."""

    AFTER_EVENT_1DAY = "AFTER_EVENT_1DAY"
    AFTER_EVENT_2DAY = "AFTER_EVENT_2DAY"
    AFTER_EVENT_3DAY = "AFTER_EVENT_3DAY"
    AFTER_EVENT_4DAY = "AFTER_EVENT_4DAY"
    AFTER_EVENT_5DAY = "AFTER_EVENT_5DAY"
    AFTER_EVENT_6DAY = "AFTER_EVENT_6DAY"
    AFTER_EVENT_7DAY = "AFTER_EVENT_7DAY"
    BEFORE_EVENT_15MIN = "BEFORE_EVENT_15MIN"
    BEFORE_EVENT_1DAY = "BEFORE_EVENT_1DAY"
    BEFORE_EVENT_1HOUR = "BEFORE_EVENT_1HOUR"
    BEFORE_EVENT_2DAY = "BEFORE_EVENT_2DAY"
    EVENT_START = "EVENT_START"
    RESCHEDULED = "RESCHEDULED"


class igupcomingevent_notification_target_time(str, Enum):
    """igupcomingevent_notification_target_time enum values."""

    EVENT_END = "EVENT_END"
    EVENT_START = "EVENT_START"


class iguserexportforcaminsights_breakdown_enum_param(str, Enum):
    """iguserexportforcaminsights_breakdown_enum_param enum values."""

    AGE = "AGE"
    FOLLOW_TYPE = "FOLLOW_TYPE"
    GENDER = "GENDER"
    MEDIA_TYPE = "MEDIA_TYPE"
    TOP_CITIES = "TOP_CITIES"
    TOP_COUNTRIES = "TOP_COUNTRIES"


class iguserexportforcaminsights_metrics_enum_param(str, Enum):
    """iguserexportforcaminsights_metrics_enum_param enum values."""

    CREATOR_ENGAGED_ACCOUNTS = "CREATOR_ENGAGED_ACCOUNTS"
    CREATOR_REACH = "CREATOR_REACH"
    REELS_HOOK_RATE = "REELS_HOOK_RATE"
    REELS_INTERACTION_RATE = "REELS_INTERACTION_RATE"
    TOTAL_FOLLOWERS = "TOTAL_FOLLOWERS"


class iguserexportforcaminsights_period_enum_param(str, Enum):
    """iguserexportforcaminsights_period_enum_param enum values."""

    DAY = "DAY"
    OVERALL = "OVERALL"


class iguserexportforcaminsights_time_range_enum_param(str, Enum):
    """iguserexportforcaminsights_time_range_enum_param enum values."""

    LAST_14_DAYS = "LAST_14_DAYS"
    LAST_90_DAYS = "LAST_90_DAYS"
    LIFETIME = "LIFETIME"
    THIS_MONTH = "THIS_MONTH"
    THIS_WEEK = "THIS_WEEK"


class imagecopyright_geo_ownership(str, Enum):
    """imagecopyright_geo_ownership enum values."""

    AD = "AD"
    AE = "AE"
    AF = "AF"
    AG = "AG"
    AI = "AI"
    AL = "AL"
    AM = "AM"
    AN = "AN"
    AO = "AO"
    AQ = "AQ"
    AR = "AR"
    AS = "AS"
    AT = "AT"
    AU = "AU"
    AW = "AW"
    AX = "AX"
    AZ = "AZ"
    BA = "BA"
    BB = "BB"
    BD = "BD"
    BE = "BE"
    BF = "BF"
    BG = "BG"
    BH = "BH"
    BI = "BI"
    BJ = "BJ"
    BL = "BL"
    BM = "BM"
    BN = "BN"
    BO = "BO"
    BQ = "BQ"
    BR = "BR"
    BS = "BS"
    BT = "BT"
    BV = "BV"
    BW = "BW"
    BY = "BY"
    BZ = "BZ"
    CA = "CA"
    CC = "CC"
    CD = "CD"
    CF = "CF"
    CG = "CG"
    CH = "CH"
    CI = "CI"
    CK = "CK"
    CL = "CL"
    CM = "CM"
    CN = "CN"
    CO = "CO"
    CR = "CR"
    CU = "CU"
    CV = "CV"
    CW = "CW"
    CX = "CX"
    CY = "CY"
    CZ = "CZ"
    DE = "DE"
    DJ = "DJ"
    DK = "DK"
    DM = "DM"
    DO = "DO"
    DZ = "DZ"
    EC = "EC"
    EE = "EE"
    EG = "EG"
    EH = "EH"
    ER = "ER"
    ES = "ES"
    ET = "ET"
    FI = "FI"
    FJ = "FJ"
    FK = "FK"
    FM = "FM"
    FO = "FO"
    FR = "FR"
    GA = "GA"
    GB = "GB"
    GD = "GD"
    GE = "GE"
    GF = "GF"
    GG = "GG"
    GH = "GH"
    GI = "GI"
    GL = "GL"
    GM = "GM"
    GN = "GN"
    GP = "GP"
    GQ = "GQ"
    GR = "GR"
    GS = "GS"
    GT = "GT"
    GU = "GU"
    GW = "GW"
    GY = "GY"
    HK = "HK"
    HM = "HM"
    HN = "HN"
    HR = "HR"
    HT = "HT"
    HU = "HU"
    ID = "ID"
    IE = "IE"
    IL = "IL"
    IM = "IM"
    IN = "IN"
    IO = "IO"
    IQ = "IQ"
    IR = "IR"
    IS = "IS"
    IT = "IT"
    JE = "JE"
    JM = "JM"
    JO = "JO"
    JP = "JP"
    KE = "KE"
    KG = "KG"
    KH = "KH"
    KI = "KI"
    KM = "KM"
    KN = "KN"
    KP = "KP"
    KR = "KR"
    KW = "KW"
    KY = "KY"
    KZ = "KZ"
    LA = "LA"
    LB = "LB"
    LC = "LC"
    LI = "LI"
    LK = "LK"
    LR = "LR"
    LS = "LS"
    LT = "LT"
    LU = "LU"
    LV = "LV"
    LY = "LY"
    MA = "MA"
    MC = "MC"
    MD = "MD"
    ME = "ME"
    MF = "MF"
    MG = "MG"
    MH = "MH"
    MK = "MK"
    ML = "ML"
    MM = "MM"
    MN = "MN"
    MO = "MO"
    MP = "MP"
    MQ = "MQ"
    MR = "MR"
    MS = "MS"
    MT = "MT"
    MU = "MU"
    MV = "MV"
    MW = "MW"
    MX = "MX"
    MY = "MY"
    MZ = "MZ"
    NA = "NA"
    NC = "NC"
    NE = "NE"
    NF = "NF"
    NG = "NG"
    NI = "NI"
    NL = "NL"
    NO = "NO"
    NP = "NP"
    NR = "NR"
    NU = "NU"
    NZ = "NZ"
    OM = "OM"
    PA = "PA"
    PE = "PE"
    PF = "PF"
    PG = "PG"
    PH = "PH"
    PK = "PK"
    PL = "PL"
    PM = "PM"
    PN = "PN"
    PR = "PR"
    PS = "PS"
    PT = "PT"
    PW = "PW"
    PY = "PY"
    QA = "QA"
    RE = "RE"
    RO = "RO"
    RS = "RS"
    RU = "RU"
    RW = "RW"
    SA = "SA"
    SB = "SB"
    SC = "SC"
    SD = "SD"
    SE = "SE"
    SG = "SG"
    SH = "SH"
    SI = "SI"
    SJ = "SJ"
    SK = "SK"
    SL = "SL"
    SM = "SM"
    SN = "SN"
    SO = "SO"
    SR = "SR"
    SS = "SS"
    ST = "ST"
    SV = "SV"
    SX = "SX"
    SY = "SY"
    SZ = "SZ"
    TC = "TC"
    TD = "TD"
    TF = "TF"
    TG = "TG"
    TH = "TH"
    TJ = "TJ"
    TK = "TK"
    TL = "TL"
    TM = "TM"
    TN = "TN"
    TO = "TO"
    TP = "TP"
    TR = "TR"
    TT = "TT"
    TV = "TV"
    TW = "TW"
    TZ = "TZ"
    UA = "UA"
    UG = "UG"
    UM = "UM"
    US = "US"
    UY = "UY"
    UZ = "UZ"
    VA = "VA"
    VC = "VC"
    VE = "VE"
    VG = "VG"
    VI = "VI"
    VN = "VN"
    VU = "VU"
    WF = "WF"
    WS = "WS"
    XK = "XK"
    YE = "YE"
    YT = "YT"
    ZA = "ZA"
    ZM = "ZM"
    ZW = "ZW"


class leadgendata_status(str, Enum):
    """leadgendata_status enum values."""

    ACTIVE = "ACTIVE"
    ARCHIVED = "ARCHIVED"
    DELETED = "DELETED"
    DRAFT = "DRAFT"


class linkcomments_comment_privacy_value_enum_param(str, Enum):
    """linkcomments_comment_privacy_value_enum_param enum values."""

    DECLINED_BY_ADMIN_ASSISTANT = "DECLINED_BY_ADMIN_ASSISTANT"
    DEFAULT_PRIVACY = "DEFAULT_PRIVACY"
    FRIENDS_AND_POST_OWNER = "FRIENDS_AND_POST_OWNER"
    FRIENDS_ONLY = "FRIENDS_ONLY"
    GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE = "GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE"
    OWNER_OR_COMMENTER = "OWNER_OR_COMMENTER"
    PENDING_APPROVAL = "PENDING_APPROVAL"
    REMOVED_BY_ADMIN_ASSISTANT = "REMOVED_BY_ADMIN_ASSISTANT"
    SIDE_CONVERSATION = "SIDE_CONVERSATION"
    SIDE_CONVERSATION_AND_POST_OWNER = "SIDE_CONVERSATION_AND_POST_OWNER"
    SPOTLIGHT_TAB = "SPOTLIGHT_TAB"


class livevideo_live_comment_moderation_setting(str, Enum):
    """livevideo_live_comment_moderation_setting enum values."""

    DEFAULT = "DEFAULT"
    DISCUSSION = "DISCUSSION"
    FOLLOWED = "FOLLOWED"
    FOLLOWER = "FOLLOWER"
    NO_HYPERLINK = "NO_HYPERLINK"
    PROTECTED_MODE = "PROTECTED_MODE"
    RESTRICTED = "RESTRICTED"
    SLOW = "SLOW"
    SUPPORTER = "SUPPORTER"
    TAGGED = "TAGGED"


class livevideo_persistent_stream_key_status(str, Enum):
    """livevideo_persistent_stream_key_status enum values."""

    DISABLE = "DISABLE"
    ENABLE = "ENABLE"
    REGENERATE = "REGENERATE"


class livevideo_status(str, Enum):
    """livevideo_status enum values."""

    LIVE_NOW = "LIVE_NOW"
    SCHEDULED_CANCELED = "SCHEDULED_CANCELED"
    SCHEDULED_LIVE = "SCHEDULED_LIVE"
    SCHEDULED_UNPUBLISHED = "SCHEDULED_UNPUBLISHED"
    UNPUBLISHED = "UNPUBLISHED"


class livevideo_stream_type(str, Enum):
    """livevideo_stream_type enum values."""

    AMBIENT = "AMBIENT"
    REGULAR = "REGULAR"


class livevideocomments_filter_enum_param(str, Enum):
    """livevideocomments_filter_enum_param enum values."""

    stream = "stream"
    toplevel = "toplevel"


class livevideocomments_live_filter_enum_param(str, Enum):
    """livevideocomments_live_filter_enum_param enum values."""

    filter_low_quality = "filter_low_quality"
    no_filter = "no_filter"


class livevideocomments_order_enum_param(str, Enum):
    """livevideocomments_order_enum_param enum values."""

    chronological = "chronological"
    reverse_chronological = "reverse_chronological"


class livevideoreactions_type_enum_param(str, Enum):
    """livevideoreactions_type_enum_param enum values."""

    ANGRY = "ANGRY"
    CARE = "CARE"
    FIRE = "FIRE"
    HAHA = "HAHA"
    HUNDRED = "HUNDRED"
    LIKE = "LIKE"
    LOVE = "LOVE"
    NONE = "NONE"
    PRIDE = "PRIDE"
    SAD = "SAD"
    THANKFUL = "THANKFUL"
    WOW = "WOW"


class localservicebusinessoverride_details_type_enum_param(str, Enum):
    """localservicebusinessoverride_details_type_enum_param enum values."""

    COUNTRY = "COUNTRY"
    LANGUAGE = "LANGUAGE"
    LANGUAGE_AND_COUNTRY = "LANGUAGE_AND_COUNTRY"


class mediainsights_breakdown_enum_param(str, Enum):
    """mediainsights_breakdown_enum_param enum values."""

    action_type = "action_type"
    follow_type = "follow_type"
    story_navigation_action_type = "story_navigation_action_type"
    surface_type = "surface_type"


class mediainsights_metric_enum_param(str, Enum):
    """mediainsights_metric_enum_param enum values."""

    clips_replays_count = "clips_replays_count"
    comments = "comments"
    content_views = "content_views"
    follows = "follows"
    ig_reels_aggregated_all_plays_count = "ig_reels_aggregated_all_plays_count"
    ig_reels_avg_watch_time = "ig_reels_avg_watch_time"
    ig_reels_video_view_total_time = "ig_reels_video_view_total_time"
    impressions = "impressions"
    likes = "likes"
    navigation = "navigation"
    plays = "plays"
    profile_activity = "profile_activity"
    profile_visits = "profile_visits"
    quotes = "quotes"
    reach = "reach"
    replies = "replies"
    reposts = "reposts"
    saved = "saved"
    shares = "shares"
    thread_replies = "thread_replies"
    thread_shares = "thread_shares"
    threads_media_clicks = "threads_media_clicks"
    threads_views = "threads_views"
    total_interactions = "total_interactions"
    views = "views"


class mediainsights_period_enum_param(str, Enum):
    """mediainsights_period_enum_param enum values."""

    day = "day"
    days_28 = "days_28"
    lifetime = "lifetime"
    month = "month"
    total_over_range = "total_over_range"
    week = "week"


class mediatitle_content_category(str, Enum):
    """mediatitle_content_category enum values."""

    MOVIE = "MOVIE"
    MUSIC = "MUSIC"
    TV_SHOW = "TV_SHOW"


class mediatitleoverride_details_type_enum_param(str, Enum):
    """mediatitleoverride_details_type_enum_param enum values."""

    COUNTRY = "COUNTRY"
    LANGUAGE = "LANGUAGE"
    LANGUAGE_AND_COUNTRY = "LANGUAGE_AND_COUNTRY"


class offlineconversiondatasetaudiences_action_source_enum_param(str, Enum):
    """offlineconversiondatasetaudiences_action_source_enum_param enum values."""

    PHYSICAL_STORE = "PHYSICAL_STORE"
    WEBSITE = "WEBSITE"


class offlineconversiondatasetshared_accounts_action_source_enum_param(str, Enum):
    """offlineconversiondatasetshared_accounts_action_source_enum_param enum values."""

    PHYSICAL_STORE = "PHYSICAL_STORE"
    WEBSITE = "WEBSITE"


class offlineconversiondatasetshared_agencies_action_source_enum_param(str, Enum):
    """offlineconversiondatasetshared_agencies_action_source_enum_param enum values."""

    PHYSICAL_STORE = "PHYSICAL_STORE"
    WEBSITE = "WEBSITE"


class offlineconversiondatasetstats_aggr_time_enum_param(str, Enum):
    """offlineconversiondatasetstats_aggr_time_enum_param enum values."""

    event_time = "event_time"
    upload_time = "upload_time"


class offlineconversiondatasetstats_granularity_enum_param(str, Enum):
    """offlineconversiondatasetstats_granularity_enum_param enum values."""

    daily = "daily"
    hourly = "hourly"
    six_hourly = "six_hourly"


class offlineconversiondatasetuploads_order_enum_param(str, Enum):
    """offlineconversiondatasetuploads_order_enum_param enum values."""

    ASCENDING = "ASCENDING"
    DESCENDING = "DESCENDING"


class offlineconversiondatasetuploads_sort_by_enum_param(str, Enum):
    """offlineconversiondatasetuploads_sort_by_enum_param enum values."""

    API_CALLS = "API_CALLS"
    CREATION_TIME = "CREATION_TIME"
    EVENT_TIME_MAX = "EVENT_TIME_MAX"
    EVENT_TIME_MIN = "EVENT_TIME_MIN"
    FIRST_UPLOAD_TIME = "FIRST_UPLOAD_TIME"
    IS_EXCLUDED_FOR_LIFT = "IS_EXCLUDED_FOR_LIFT"
    LAST_UPLOAD_TIME = "LAST_UPLOAD_TIME"


class offlineproductitemoverride_details_type_enum_param(str, Enum):
    """offlineproductitemoverride_details_type_enum_param enum values."""

    COUNTRY = "COUNTRY"
    LANGUAGE = "LANGUAGE"
    LANGUAGE_AND_COUNTRY = "LANGUAGE_AND_COUNTRY"


class page_attire(str, Enum):
    """page_attire enum values."""

    Casual = "Casual"
    Dressy = "Dressy"
    Unspecified = "Unspecified"


class page_food_styles(str, Enum):
    """page_food_styles enum values."""

    Afghani = "Afghani"
    AMERICAN_NEW = "American (New)"
    AMERICAN_TRADITIONAL = "American (Traditional)"
    ASIAN_FUSION = "Asian Fusion"
    Barbeque = "Barbeque"
    Brazilian = "Brazilian"
    Breakfast = "Breakfast"
    British = "British"
    Branch = "Branch"
    Buffets = "Buffets"
    Burgers = "Burgers"
    Burmese = "Burmese"
    CAJUN_CREOLE = "Cajun/Creole"
    Caribbean = "Caribbean"
    Chinese = "Chinese"
    Creperies = "Creperies"
    Cuban = "Cuban"
    Delis = "Delis"
    Diners = "Diners"
    Ethiopian = "Ethiopian"
    FAST_FOOD = "Fast Food"
    Filipino = "Filipino"
    Fondue = "Fondue"
    FOOD_STANDS = "Food Stands"
    French = "French"
    German = "German"
    GREEK_AND_MEDITERRANEAN = "Greek and Mediterranean"
    Hawaiian = "Hawaiian"
    HIMALAYAN_NEPALESE = "Himalayan/Nepalese"
    HOT_DOGS = "Hot Dogs"
    INDIAN_PAKISTANI = "Indian/Pakistani"
    Irish = "Irish"
    Italian = "Italian"
    Japanese = "Japanese"
    Korean = "Korean"
    LATIN_AMERICAN = "Latin American"
    Mexican = "Mexican"
    MIDDLE_EASTERN = "Middle Eastern"
    Moroccan = "Moroccan"
    Pizza = "Pizza"
    Russian = "Russian"
    Sandwiches = "Sandwiches"
    Seafood = "Seafood"
    Singaporean = "Singaporean"
    SOUL_FOOD = "Soul Food"
    Southern = "Southern"
    SPANISH_BASQUE = "Spanish/Basque"
    Steakhouses = "Steakhouses"
    SUSHI_BARS = "Sushi Bars"
    Taiwanese = "Taiwanese"
    TAPAS_BARS = "Tapas Bars"
    TEX_MEX = "Tex-Mex"
    Thai = "Thai"
    Turkish = "Turkish"
    Vegan = "Vegan"
    Vegetarian = "Vegetarian"
    Vietnamese = "Vietnamese"


class page_gen_ai_provenance_type(str, Enum):
    """page_gen_ai_provenance_type enum values."""

    C2PA = "C2PA"
    C2PA_METADATA_EDITED = "C2PA_METADATA_EDITED"
    EXPLICIT = "EXPLICIT"
    EXPLICIT_IMAGINE = "EXPLICIT_IMAGINE"
    EXPLICIT_IMAGINE_ME = "EXPLICIT_IMAGINE_ME"
    EXPLICIT_RESTYLE = "EXPLICIT_RESTYLE"
    INVISIBLE_WATERMARK = "INVISIBLE_WATERMARK"
    IPTC = "IPTC"
    IPTC_METADATA_EDITED = "IPTC_METADATA_EDITED"


class page_pickup_options(str, Enum):
    """page_pickup_options enum values."""

    CURBSIDE = "CURBSIDE"
    IN_STORE = "IN_STORE"
    OTHER = "OTHER"


class page_temporary_status(str, Enum):
    """page_temporary_status enum values."""

    DIFFERENTLY_OPEN = "DIFFERENTLY_OPEN"
    NO_DATA = "NO_DATA"
    OPERATING_AS_USUAL = "OPERATING_AS_USUAL"
    TEMPORARILY_CLOSED = "TEMPORARILY_CLOSED"


class pageab_tests_optimization_goal_enum_param(str, Enum):
    """pageab_tests_optimization_goal_enum_param enum values."""

    AUTO_RESOLVE_TO_CONTROL = "AUTO_RESOLVE_TO_CONTROL"
    AVG_TIME_WATCHED = "AVG_TIME_WATCHED"
    COMMENTS = "COMMENTS"
    IMPRESSIONS = "IMPRESSIONS"
    IMPRESSIONS_UNIQUE = "IMPRESSIONS_UNIQUE"
    LINK_CLICKS = "LINK_CLICKS"
    OTHER = "OTHER"
    REACTIONS = "REACTIONS"
    REELS_PLAYS = "REELS_PLAYS"
    SHARES = "SHARES"
    VIDEO_VIEWS_60S = "VIDEO_VIEWS_60S"


class pageagencies_permitted_tasks_enum_param(str, Enum):
    """pageagencies_permitted_tasks_enum_param enum values."""

    ADVERTISE = "ADVERTISE"
    ANALYZE = "ANALYZE"
    CASHIER_ROLE = "CASHIER_ROLE"
    CREATE_CONTENT = "CREATE_CONTENT"
    GLOBAL_STRUCTURE_MANAGEMENT = "GLOBAL_STRUCTURE_MANAGEMENT"
    MANAGE = "MANAGE"
    MANAGE_JOBS = "MANAGE_JOBS"
    MANAGE_LEADS = "MANAGE_LEADS"
    MESSAGING = "MESSAGING"
    MODERATE = "MODERATE"
    MODERATE_COMMUNITY = "MODERATE_COMMUNITY"
    PAGES_MESSAGING = "PAGES_MESSAGING"
    PAGES_MESSAGING_SUBSCRIPTIONS = "PAGES_MESSAGING_SUBSCRIPTIONS"
    PROFILE_PLUS_ADVERTISE = "PROFILE_PLUS_ADVERTISE"
    PROFILE_PLUS_ANALYZE = "PROFILE_PLUS_ANALYZE"
    PROFILE_PLUS_CREATE_CONTENT = "PROFILE_PLUS_CREATE_CONTENT"
    PROFILE_PLUS_FACEBOOK_ACCESS = "PROFILE_PLUS_FACEBOOK_ACCESS"
    PROFILE_PLUS_FULL_CONTROL = "PROFILE_PLUS_FULL_CONTROL"
    PROFILE_PLUS_MANAGE = "PROFILE_PLUS_MANAGE"
    PROFILE_PLUS_MANAGE_LEADS = "PROFILE_PLUS_MANAGE_LEADS"
    PROFILE_PLUS_MESSAGING = "PROFILE_PLUS_MESSAGING"
    PROFILE_PLUS_MODERATE = "PROFILE_PLUS_MODERATE"
    PROFILE_PLUS_MODERATE_DELEGATE_COMMUNITY = "PROFILE_PLUS_MODERATE_DELEGATE_COMMUNITY"
    PROFILE_PLUS_REVENUE = "PROFILE_PLUS_REVENUE"
    READ_PAGE_MAILBOXES = "READ_PAGE_MAILBOXES"
    VIEW_MONETIZATION_INSIGHTS = "VIEW_MONETIZATION_INSIGHTS"


class pageassigned_users_tasks_enum_param(str, Enum):
    """pageassigned_users_tasks_enum_param enum values."""

    ADVERTISE = "ADVERTISE"
    ANALYZE = "ANALYZE"
    CASHIER_ROLE = "CASHIER_ROLE"
    CREATE_CONTENT = "CREATE_CONTENT"
    GLOBAL_STRUCTURE_MANAGEMENT = "GLOBAL_STRUCTURE_MANAGEMENT"
    MANAGE = "MANAGE"
    MANAGE_JOBS = "MANAGE_JOBS"
    MANAGE_LEADS = "MANAGE_LEADS"
    MESSAGING = "MESSAGING"
    MODERATE = "MODERATE"
    MODERATE_COMMUNITY = "MODERATE_COMMUNITY"
    PAGES_MESSAGING = "PAGES_MESSAGING"
    PAGES_MESSAGING_SUBSCRIPTIONS = "PAGES_MESSAGING_SUBSCRIPTIONS"
    PROFILE_PLUS_ADVERTISE = "PROFILE_PLUS_ADVERTISE"
    PROFILE_PLUS_ANALYZE = "PROFILE_PLUS_ANALYZE"
    PROFILE_PLUS_CREATE_CONTENT = "PROFILE_PLUS_CREATE_CONTENT"
    PROFILE_PLUS_FACEBOOK_ACCESS = "PROFILE_PLUS_FACEBOOK_ACCESS"
    PROFILE_PLUS_FULL_CONTROL = "PROFILE_PLUS_FULL_CONTROL"
    PROFILE_PLUS_MANAGE = "PROFILE_PLUS_MANAGE"
    PROFILE_PLUS_MANAGE_LEADS = "PROFILE_PLUS_MANAGE_LEADS"
    PROFILE_PLUS_MESSAGING = "PROFILE_PLUS_MESSAGING"
    PROFILE_PLUS_MODERATE = "PROFILE_PLUS_MODERATE"
    PROFILE_PLUS_MODERATE_DELEGATE_COMMUNITY = "PROFILE_PLUS_MODERATE_DELEGATE_COMMUNITY"
    PROFILE_PLUS_REVENUE = "PROFILE_PLUS_REVENUE"
    READ_PAGE_MAILBOXES = "READ_PAGE_MAILBOXES"
    VIEW_MONETIZATION_INSIGHTS = "VIEW_MONETIZATION_INSIGHTS"


class pagecalls_action_enum_param(str, Enum):
    """pagecalls_action_enum_param enum values."""

    ACCEPT = "ACCEPT"
    CONNECT = "CONNECT"
    MEDIA_UPDATE = "MEDIA_UPDATE"
    REJECT = "REJECT"
    TERMINATE = "TERMINATE"


class pagecalls_platform_enum_param(str, Enum):
    """pagecalls_platform_enum_param enum values."""

    INSTAGRAM = "INSTAGRAM"
    MESSENGER = "MESSENGER"


class pagecalltoaction_android_destination_type(str, Enum):
    """pagecalltoaction_android_destination_type enum values."""

    APP_DEEPLINK = "APP_DEEPLINK"
    BECOME_A_VOLUNTEER = "BECOME_A_VOLUNTEER"
    EMAIL = "EMAIL"
    FACEBOOK_APP = "FACEBOOK_APP"
    FOLLOW = "FOLLOW"
    MARKETPLACE_INVENTORY_PAGE = "MARKETPLACE_INVENTORY_PAGE"
    MENU_ON_FACEBOOK = "MENU_ON_FACEBOOK"
    MESSENGER = "MESSENGER"
    MINI_SHOP = "MINI_SHOP"
    MOBILE_CENTER = "MOBILE_CENTER"
    NONE = "NONE"
    PHONE_CALL = "PHONE_CALL"
    SHOP_ON_FACEBOOK = "SHOP_ON_FACEBOOK"
    WEBSITE = "WEBSITE"


class pagecalltoaction_iphone_destination_type(str, Enum):
    """pagecalltoaction_iphone_destination_type enum values."""

    APP_DEEPLINK = "APP_DEEPLINK"
    BECOME_A_VOLUNTEER = "BECOME_A_VOLUNTEER"
    EMAIL = "EMAIL"
    FACEBOOK_APP = "FACEBOOK_APP"
    FOLLOW = "FOLLOW"
    MARKETPLACE_INVENTORY_PAGE = "MARKETPLACE_INVENTORY_PAGE"
    MENU_ON_FACEBOOK = "MENU_ON_FACEBOOK"
    MESSENGER = "MESSENGER"
    MINI_SHOP = "MINI_SHOP"
    NONE = "NONE"
    PHONE_CALL = "PHONE_CALL"
    SHOP_ON_FACEBOOK = "SHOP_ON_FACEBOOK"
    WEBSITE = "WEBSITE"


class pagecalltoaction_type(str, Enum):
    """pagecalltoaction_type enum values."""

    BECOME_A_VOLUNTEER = "BECOME_A_VOLUNTEER"
    BOOK_APPOINTMENT = "BOOK_APPOINTMENT"
    BOOK_NOW = "BOOK_NOW"
    BUY_TICKETS = "BUY_TICKETS"
    CALL_NOW = "CALL_NOW"
    CHARITY_DONATE = "CHARITY_DONATE"
    CHECK_IN = "CHECK_IN"
    CONTACT_US = "CONTACT_US"
    CREATOR_STOREFRONT = "CREATOR_STOREFRONT"
    DONATE_NOW = "DONATE_NOW"
    EMAIL = "EMAIL"
    FOLLOW_PAGE = "FOLLOW_PAGE"
    GET_DIRECTIONS = "GET_DIRECTIONS"
    GET_OFFER = "GET_OFFER"
    GET_OFFER_VIEW = "GET_OFFER_VIEW"
    INTERESTED = "INTERESTED"
    LEARN_MORE = "LEARN_MORE"
    LISTEN = "LISTEN"
    LOCAL_DEV_PLATFORM = "LOCAL_DEV_PLATFORM"
    MESSAGE = "MESSAGE"
    MOBILE_CENTER = "MOBILE_CENTER"
    OPEN_APP = "OPEN_APP"
    ORDER_FOOD = "ORDER_FOOD"
    PLAY_MUSIC = "PLAY_MUSIC"
    PLAY_NOW = "PLAY_NOW"
    PURCHASE_GIFT_CARDS = "PURCHASE_GIFT_CARDS"
    REQUEST_APPOINTMENT = "REQUEST_APPOINTMENT"
    REQUEST_QUOTE = "REQUEST_QUOTE"
    SHOP_NOW = "SHOP_NOW"
    SHOP_ON_FACEBOOK = "SHOP_ON_FACEBOOK"
    SIGN_UP = "SIGN_UP"
    VIEW_INVENTORY = "VIEW_INVENTORY"
    VIEW_MENU = "VIEW_MENU"
    VIEW_SHOP = "VIEW_SHOP"
    VISIT_GROUP = "VISIT_GROUP"
    WATCH_NOW = "WATCH_NOW"
    WOODHENGE_SUPPORT = "WOODHENGE_SUPPORT"


class pagecalltoaction_web_destination_type(str, Enum):
    """pagecalltoaction_web_destination_type enum values."""

    BECOME_A_VOLUNTEER = "BECOME_A_VOLUNTEER"
    BECOME_SUPPORTER = "BECOME_SUPPORTER"
    EMAIL = "EMAIL"
    FOLLOW = "FOLLOW"
    MESSENGER = "MESSENGER"
    MOBILE_CENTER = "MOBILE_CENTER"
    NONE = "NONE"
    SHOP_ON_FACEBOOK = "SHOP_ON_FACEBOOK"
    WEBSITE = "WEBSITE"


class pagecommerce_orders_filters_enum_param(str, Enum):
    """pagecommerce_orders_filters_enum_param enum values."""

    HAS_CANCELLATIONS = "HAS_CANCELLATIONS"
    HAS_FULFILLMENTS = "HAS_FULFILLMENTS"
    HAS_REFUNDS = "HAS_REFUNDS"
    NO_CANCELLATIONS = "NO_CANCELLATIONS"
    NO_REFUNDS = "NO_REFUNDS"
    NO_SHIPMENTS = "NO_SHIPMENTS"


class pagecommerce_orders_state_enum_param(str, Enum):
    """pagecommerce_orders_state_enum_param enum values."""

    COMPLETED = "COMPLETED"
    CREATED = "CREATED"
    FB_PROCESSING = "FB_PROCESSING"
    IN_PROGRESS = "IN_PROGRESS"


class pageconversations_platform_enum_param(str, Enum):
    """pageconversations_platform_enum_param enum values."""

    INSTAGRAM = "INSTAGRAM"
    MESSENGER = "MESSENGER"


class pagecopyright_manual_claims_action_enum_param(str, Enum):
    """pagecopyright_manual_claims_action_enum_param enum values."""

    BLOCK = "BLOCK"
    CLAIM_AD_EARNINGS = "CLAIM_AD_EARNINGS"
    MANUAL_REVIEW = "MANUAL_REVIEW"
    MONITOR = "MONITOR"
    REQUEST_TAKEDOWN = "REQUEST_TAKEDOWN"


class pagecopyright_manual_claims_action_reason_enum_param(str, Enum):
    """pagecopyright_manual_claims_action_reason_enum_param enum values."""

    ARTICLE_17_PREFLAGGING = "ARTICLE_17_PREFLAGGING"
    ARTIST_OBJECTION = "ARTIST_OBJECTION"
    OBJECTIONABLE_CONTENT = "OBJECTIONABLE_CONTENT"
    PREMIUM_MUSIC_VIDEO = "PREMIUM_MUSIC_VIDEO"
    PRERELEASE_CONTENT = "PRERELEASE_CONTENT"
    PRODUCT_PARAMETERS = "PRODUCT_PARAMETERS"
    RESTRICTED_CONTENT = "RESTRICTED_CONTENT"
    UNAUTHORIZED_COMMERCIAL_USE = "UNAUTHORIZED_COMMERCIAL_USE"


class pagecopyright_manual_claims_match_content_type_enum_param(str, Enum):
    """pagecopyright_manual_claims_match_content_type_enum_param enum values."""

    AUDIO_ONLY = "AUDIO_ONLY"
    VIDEO_AND_AUDIO = "VIDEO_AND_AUDIO"
    VIDEO_ONLY = "VIDEO_ONLY"


class pagecustom_user_settings_params_enum_param(str, Enum):
    """pagecustom_user_settings_params_enum_param enum values."""

    PERSISTENT_MENU = "PERSISTENT_MENU"


class pageevents_event_state_filter_enum_param(str, Enum):
    """pageevents_event_state_filter_enum_param enum values."""

    canceled = "canceled"
    draft = "draft"
    published = "published"
    scheduled_draft_for_publication = "scheduled_draft_for_publication"


class pageevents_time_filter_enum_param(str, Enum):
    """pageevents_time_filter_enum_param enum values."""

    past = "past"
    upcoming = "upcoming"


class pageevents_type_enum_param(str, Enum):
    """pageevents_type_enum_param enum values."""

    attending = "attending"
    created = "created"
    declined = "declined"
    maybe = "maybe"
    not_replied = "not_replied"


class pagefeed_backdated_time_granularity_enum_param(str, Enum):
    """pagefeed_backdated_time_granularity_enum_param enum values."""

    day = "day"
    hour = "hour"
    min = "min"
    month = "month"
    none = "none"
    year = "year"


class pagefeed_formatting_enum_param(str, Enum):
    """pagefeed_formatting_enum_param enum values."""

    MARKDOWN = "MARKDOWN"
    PLAINTEXT = "PLAINTEXT"


class pagefeed_place_attachment_setting_enum_param(str, Enum):
    """pagefeed_place_attachment_setting_enum_param enum values."""

    VALUE_1 = "1"
    VALUE_2 = "2"


class pagefeed_post_surfaces_blacklist_enum_param(str, Enum):
    """pagefeed_post_surfaces_blacklist_enum_param enum values."""

    VALUE_1 = "1"
    VALUE_2 = "2"
    VALUE_3 = "3"
    VALUE_4 = "4"
    VALUE_5 = "5"


class pagefeed_posting_to_redspace_enum_param(str, Enum):
    """pagefeed_posting_to_redspace_enum_param enum values."""

    disabled = "disabled"
    enabled = "enabled"


class pagefeed_target_surface_enum_param(str, Enum):
    """pagefeed_target_surface_enum_param enum values."""

    STORY = "STORY"
    TIMELINE = "TIMELINE"


class pagefeed_unpublished_content_type_enum_param(str, Enum):
    """pagefeed_unpublished_content_type_enum_param enum values."""

    ADS_POST = "ADS_POST"
    DRAFT = "DRAFT"
    INLINE_CREATED = "INLINE_CREATED"
    PUBLISHED = "PUBLISHED"
    REVIEWABLE_BRANDED_CONTENT = "REVIEWABLE_BRANDED_CONTENT"
    SCHEDULED = "SCHEDULED"
    SCHEDULED_RECURRING = "SCHEDULED_RECURRING"


class pagefeed_with_enum_param(str, Enum):
    """pagefeed_with_enum_param enum values."""

    LOCATION = "LOCATION"


class pageimage_copyrights_geo_ownership_enum_param(str, Enum):
    """pageimage_copyrights_geo_ownership_enum_param enum values."""

    AD = "AD"
    AE = "AE"
    AF = "AF"
    AG = "AG"
    AI = "AI"
    AL = "AL"
    AM = "AM"
    AN = "AN"
    AO = "AO"
    AQ = "AQ"
    AR = "AR"
    AS = "AS"
    AT = "AT"
    AU = "AU"
    AW = "AW"
    AX = "AX"
    AZ = "AZ"
    BA = "BA"
    BB = "BB"
    BD = "BD"
    BE = "BE"
    BF = "BF"
    BG = "BG"
    BH = "BH"
    BI = "BI"
    BJ = "BJ"
    BL = "BL"
    BM = "BM"
    BN = "BN"
    BO = "BO"
    BQ = "BQ"
    BR = "BR"
    BS = "BS"
    BT = "BT"
    BV = "BV"
    BW = "BW"
    BY = "BY"
    BZ = "BZ"
    CA = "CA"
    CC = "CC"
    CD = "CD"
    CF = "CF"
    CG = "CG"
    CH = "CH"
    CI = "CI"
    CK = "CK"
    CL = "CL"
    CM = "CM"
    CN = "CN"
    CO = "CO"
    CR = "CR"
    CU = "CU"
    CV = "CV"
    CW = "CW"
    CX = "CX"
    CY = "CY"
    CZ = "CZ"
    DE = "DE"
    DJ = "DJ"
    DK = "DK"
    DM = "DM"
    DO = "DO"
    DZ = "DZ"
    EC = "EC"
    EE = "EE"
    EG = "EG"
    EH = "EH"
    ER = "ER"
    ES = "ES"
    ET = "ET"
    FI = "FI"
    FJ = "FJ"
    FK = "FK"
    FM = "FM"
    FO = "FO"
    FR = "FR"
    GA = "GA"
    GB = "GB"
    GD = "GD"
    GE = "GE"
    GF = "GF"
    GG = "GG"
    GH = "GH"
    GI = "GI"
    GL = "GL"
    GM = "GM"
    GN = "GN"
    GP = "GP"
    GQ = "GQ"
    GR = "GR"
    GS = "GS"
    GT = "GT"
    GU = "GU"
    GW = "GW"
    GY = "GY"
    HK = "HK"
    HM = "HM"
    HN = "HN"
    HR = "HR"
    HT = "HT"
    HU = "HU"
    ID = "ID"
    IE = "IE"
    IL = "IL"
    IM = "IM"
    IN = "IN"
    IO = "IO"
    IQ = "IQ"
    IR = "IR"
    IS = "IS"
    IT = "IT"
    JE = "JE"
    JM = "JM"
    JO = "JO"
    JP = "JP"
    KE = "KE"
    KG = "KG"
    KH = "KH"
    KI = "KI"
    KM = "KM"
    KN = "KN"
    KP = "KP"
    KR = "KR"
    KW = "KW"
    KY = "KY"
    KZ = "KZ"
    LA = "LA"
    LB = "LB"
    LC = "LC"
    LI = "LI"
    LK = "LK"
    LR = "LR"
    LS = "LS"
    LT = "LT"
    LU = "LU"
    LV = "LV"
    LY = "LY"
    MA = "MA"
    MC = "MC"
    MD = "MD"
    ME = "ME"
    MF = "MF"
    MG = "MG"
    MH = "MH"
    MK = "MK"
    ML = "ML"
    MM = "MM"
    MN = "MN"
    MO = "MO"
    MP = "MP"
    MQ = "MQ"
    MR = "MR"
    MS = "MS"
    MT = "MT"
    MU = "MU"
    MV = "MV"
    MW = "MW"
    MX = "MX"
    MY = "MY"
    MZ = "MZ"
    NA = "NA"
    NC = "NC"
    NE = "NE"
    NF = "NF"
    NG = "NG"
    NI = "NI"
    NL = "NL"
    NO = "NO"
    NP = "NP"
    NR = "NR"
    NU = "NU"
    NZ = "NZ"
    OM = "OM"
    PA = "PA"
    PE = "PE"
    PF = "PF"
    PG = "PG"
    PH = "PH"
    PK = "PK"
    PL = "PL"
    PM = "PM"
    PN = "PN"
    PR = "PR"
    PS = "PS"
    PT = "PT"
    PW = "PW"
    PY = "PY"
    QA = "QA"
    RE = "RE"
    RO = "RO"
    RS = "RS"
    RU = "RU"
    RW = "RW"
    SA = "SA"
    SB = "SB"
    SC = "SC"
    SD = "SD"
    SE = "SE"
    SG = "SG"
    SH = "SH"
    SI = "SI"
    SJ = "SJ"
    SK = "SK"
    SL = "SL"
    SM = "SM"
    SN = "SN"
    SO = "SO"
    SR = "SR"
    SS = "SS"
    ST = "ST"
    SV = "SV"
    SX = "SX"
    SY = "SY"
    SZ = "SZ"
    TC = "TC"
    TD = "TD"
    TF = "TF"
    TG = "TG"
    TH = "TH"
    TJ = "TJ"
    TK = "TK"
    TL = "TL"
    TM = "TM"
    TN = "TN"
    TO = "TO"
    TP = "TP"
    TR = "TR"
    TT = "TT"
    TV = "TV"
    TW = "TW"
    TZ = "TZ"
    UA = "UA"
    UG = "UG"
    UM = "UM"
    US = "US"
    UY = "UY"
    UZ = "UZ"
    VA = "VA"
    VC = "VC"
    VE = "VE"
    VG = "VG"
    VI = "VI"
    VN = "VN"
    VU = "VU"
    WF = "WF"
    WS = "WS"
    XK = "XK"
    YE = "YE"
    YT = "YT"
    ZA = "ZA"
    ZM = "ZM"
    ZW = "ZW"


class pageinsights_date_preset_enum_param(str, Enum):
    """pageinsights_date_preset_enum_param enum values."""

    data_maximum = "data_maximum"
    last_14d = "last_14d"
    last_28d = "last_28d"
    last_30d = "last_30d"
    last_3d = "last_3d"
    last_7d = "last_7d"
    last_90d = "last_90d"
    last_month = "last_month"
    last_quarter = "last_quarter"
    last_week_mon_sun = "last_week_mon_sun"
    last_week_sun_sat = "last_week_sun_sat"
    last_year = "last_year"
    maximum = "maximum"
    this_month = "this_month"
    this_quarter = "this_quarter"
    this_week_mon_today = "this_week_mon_today"
    this_week_sun_today = "this_week_sun_today"
    this_year = "this_year"
    today = "today"
    yesterday = "yesterday"


class pageinsights_period_enum_param(str, Enum):
    """pageinsights_period_enum_param enum values."""

    day = "day"
    days_28 = "days_28"
    lifetime = "lifetime"
    month = "month"
    total_over_range = "total_over_range"
    week = "week"


class pageleadgen_forms_locale_enum_param(str, Enum):
    """pageleadgen_forms_locale_enum_param enum values."""

    AR_AR = "AR_AR"
    CS_CZ = "CS_CZ"
    DA_DK = "DA_DK"
    DE_DE = "DE_DE"
    EL_GR = "EL_GR"
    EN_GB = "EN_GB"
    EN_US = "EN_US"
    ES_ES = "ES_ES"
    ES_LA = "ES_LA"
    FI_FI = "FI_FI"
    FR_FR = "FR_FR"
    HE_IL = "HE_IL"
    HI_IN = "HI_IN"
    HU_HU = "HU_HU"
    ID_ID = "ID_ID"
    IT_IT = "IT_IT"
    JA_JP = "JA_JP"
    KO_KR = "KO_KR"
    NB_NO = "NB_NO"
    NL_NL = "NL_NL"
    PL_PL = "PL_PL"
    PT_BR = "PT_BR"
    PT_PT = "PT_PT"
    RO_RO = "RO_RO"
    RU_RU = "RU_RU"
    SV_SE = "SV_SE"
    TH_TH = "TH_TH"
    TR_TR = "TR_TR"
    VI_VN = "VI_VN"
    ZH_CN = "ZH_CN"
    ZH_HK = "ZH_HK"
    ZH_TW = "ZH_TW"


class pagelive_videos_broadcast_status_enum_param(str, Enum):
    """pagelive_videos_broadcast_status_enum_param enum values."""

    LIVE = "LIVE"
    LIVE_STOPPED = "LIVE_STOPPED"
    PROCESSING = "PROCESSING"
    SCHEDULED_CANCELED = "SCHEDULED_CANCELED"
    SCHEDULED_EXPIRED = "SCHEDULED_EXPIRED"
    SCHEDULED_LIVE = "SCHEDULED_LIVE"
    SCHEDULED_UNPUBLISHED = "SCHEDULED_UNPUBLISHED"
    UNPUBLISHED = "UNPUBLISHED"
    VOD = "VOD"


class pagelive_videos_projection_enum_param(str, Enum):
    """pagelive_videos_projection_enum_param enum values."""

    CUBEMAP = "CUBEMAP"
    EQUIRECTANGULAR = "EQUIRECTANGULAR"
    HALF_EQUIRECTANGULAR = "HALF_EQUIRECTANGULAR"


class pagelive_videos_source_enum_param(str, Enum):
    """pagelive_videos_source_enum_param enum values."""

    owner = "owner"
    target = "target"


class pagelive_videos_spatial_audio_format_enum_param(str, Enum):
    """pagelive_videos_spatial_audio_format_enum_param enum values."""

    ambiX_4 = "ambiX_4"


class pagelive_videos_status_enum_param(str, Enum):
    """pagelive_videos_status_enum_param enum values."""

    LIVE_NOW = "LIVE_NOW"
    SCHEDULED_CANCELED = "SCHEDULED_CANCELED"
    SCHEDULED_LIVE = "SCHEDULED_LIVE"
    SCHEDULED_UNPUBLISHED = "SCHEDULED_UNPUBLISHED"
    UNPUBLISHED = "UNPUBLISHED"


class pagelive_videos_stereoscopic_mode_enum_param(str, Enum):
    """pagelive_videos_stereoscopic_mode_enum_param enum values."""

    LEFT_RIGHT = "LEFT_RIGHT"
    MONO = "MONO"
    TOP_BOTTOM = "TOP_BOTTOM"


class pagelive_videos_stream_type_enum_param(str, Enum):
    """pagelive_videos_stream_type_enum_param enum values."""

    AMBIENT = "AMBIENT"
    REGULAR = "REGULAR"


class pagelocations_pickup_options_enum_param(str, Enum):
    """pagelocations_pickup_options_enum_param enum values."""

    CURBSIDE = "CURBSIDE"
    IN_STORE = "IN_STORE"
    OTHER = "OTHER"


class pagelocations_temporary_status_enum_param(str, Enum):
    """pagelocations_temporary_status_enum_param enum values."""

    DIFFERENTLY_OPEN = "DIFFERENTLY_OPEN"
    NO_DATA = "NO_DATA"
    OPERATING_AS_USUAL = "OPERATING_AS_USUAL"
    TEMPORARILY_CLOSED = "TEMPORARILY_CLOSED"


class pagemedia_fingerprints_fingerprint_content_type_enum_param(str, Enum):
    """pagemedia_fingerprints_fingerprint_content_type_enum_param enum values."""

    AM_SONGTRACK = "AM_SONGTRACK"
    EPISODE = "EPISODE"
    MOVIE = "MOVIE"
    OTHER = "OTHER"
    SONGTRACK = "SONGTRACK"


class pagemessage_attachments_platform_enum_param(str, Enum):
    """pagemessage_attachments_platform_enum_param enum values."""

    INSTAGRAM = "INSTAGRAM"
    MESSENGER = "MESSENGER"


class pagemessage_templates_category_enum_param(str, Enum):
    """pagemessage_templates_category_enum_param enum values."""

    UTILITY = "UTILITY"


class pagemessage_templates_status_enum_param(str, Enum):
    """pagemessage_templates_status_enum_param enum values."""

    APPROVED = "APPROVED"
    ARCHIVED = "ARCHIVED"
    DELETED = "DELETED"
    DISABLED = "DISABLED"
    IN_APPEAL = "IN_APPEAL"
    LIMIT_EXCEEDED = "LIMIT_EXCEEDED"
    PAUSED = "PAUSED"
    PENDING = "PENDING"
    PENDING_DELETION = "PENDING_DELETION"
    REJECTED = "REJECTED"


class pagemessages_messaging_type_enum_param(str, Enum):
    """pagemessages_messaging_type_enum_param enum values."""

    MESSAGE_TAG = "MESSAGE_TAG"
    RESPONSE = "RESPONSE"
    UPDATE = "UPDATE"
    UTILITY = "UTILITY"


class pagemessages_notification_type_enum_param(str, Enum):
    """pagemessages_notification_type_enum_param enum values."""

    NO_PUSH = "NO_PUSH"
    REGULAR = "REGULAR"
    SILENT_PUSH = "SILENT_PUSH"


class pagemessages_sender_action_enum_param(str, Enum):
    """pagemessages_sender_action_enum_param enum values."""

    MARK_SEEN = "MARK_SEEN"
    REACT = "REACT"
    TYPING_OFF = "TYPING_OFF"
    TYPING_ON = "TYPING_ON"
    UNREACT = "UNREACT"


class pagemessages_suggestion_action_enum_param(str, Enum):
    """pagemessages_suggestion_action_enum_param enum values."""

    ACCEPT = "ACCEPT"
    DISMISS = "DISMISS"
    IMPRESSION = "IMPRESSION"


class pagemessenger_profile_fields_enum_param(str, Enum):
    """pagemessenger_profile_fields_enum_param enum values."""

    ACCOUNT_LINKING_URL = "ACCOUNT_LINKING_URL"
    COMMANDS = "COMMANDS"
    DESCRIPTION = "DESCRIPTION"
    GET_STARTED = "GET_STARTED"
    GREETING = "GREETING"
    HOME_URL = "HOME_URL"
    ICE_BREAKERS = "ICE_BREAKERS"
    PERSISTENT_MENU = "PERSISTENT_MENU"
    PLATFORM = "PLATFORM"
    SUBJECT_TO_NEW_EU_PRIVACY_RULES = "SUBJECT_TO_NEW_EU_PRIVACY_RULES"
    TITLE = "TITLE"
    WHITELISTED_DOMAINS = "WHITELISTED_DOMAINS"


class pagemessenger_profile_platform_enum_param(str, Enum):
    """pagemessenger_profile_platform_enum_param enum values."""

    INSTAGRAM = "INSTAGRAM"
    MESSENGER = "MESSENGER"


class pagemoderate_conversations_actions_enum_param(str, Enum):
    """pagemoderate_conversations_actions_enum_param enum values."""

    BAN_USER = "BAN_USER"
    BLOCK_USER = "BLOCK_USER"
    MOVE_TO_SPAM = "MOVE_TO_SPAM"
    UNBAN_USER = "UNBAN_USER"
    UNBLOCK_USER = "UNBLOCK_USER"


class pagenlp_configs_model_enum_param(str, Enum):
    """pagenlp_configs_model_enum_param enum values."""

    ARABIC = "ARABIC"
    CHINESE = "CHINESE"
    CROATIAN = "CROATIAN"
    CUSTOM = "CUSTOM"
    DANISH = "DANISH"
    DUTCH = "DUTCH"
    ENGLISH = "ENGLISH"
    FRENCH_STANDARD = "FRENCH_STANDARD"
    GEORGIAN = "GEORGIAN"
    GERMAN_STANDARD = "GERMAN_STANDARD"
    GREEK = "GREEK"
    HEBREW = "HEBREW"
    HUNGARIAN = "HUNGARIAN"
    IRISH = "IRISH"
    ITALIAN_STANDARD = "ITALIAN_STANDARD"
    KOREAN = "KOREAN"
    NORWEGIAN_BOKMAL = "NORWEGIAN_BOKMAL"
    POLISH = "POLISH"
    PORTUGUESE = "PORTUGUESE"
    ROMANIAN = "ROMANIAN"
    SPANISH = "SPANISH"
    SWEDISH = "SWEDISH"
    VIETNAMESE = "VIETNAMESE"


class pagenotification_messages_dev_support_developer_action_enum_param(str, Enum):
    """pagenotification_messages_dev_support_developer_action_enum_param enum values."""

    ENABLE_FOLLOWUP_MESSAGE = "ENABLE_FOLLOWUP_MESSAGE"


class pagephotos_backdated_time_granularity_enum_param(str, Enum):
    """pagephotos_backdated_time_granularity_enum_param enum values."""

    day = "day"
    hour = "hour"
    min = "min"
    month = "month"
    none = "none"
    year = "year"


class pagephotos_type_enum_param(str, Enum):
    """pagephotos_type_enum_param enum values."""

    profile = "profile"
    tagged = "tagged"
    uploaded = "uploaded"


class pagephotos_unpublished_content_type_enum_param(str, Enum):
    """pagephotos_unpublished_content_type_enum_param enum values."""

    ADS_POST = "ADS_POST"
    DRAFT = "DRAFT"
    INLINE_CREATED = "INLINE_CREATED"
    PUBLISHED = "PUBLISHED"
    REVIEWABLE_BRANDED_CONTENT = "REVIEWABLE_BRANDED_CONTENT"
    SCHEDULED = "SCHEDULED"
    SCHEDULED_RECURRING = "SCHEDULED_RECURRING"


class pagepicture_type_enum_param(str, Enum):
    """pagepicture_type_enum_param enum values."""

    album = "album"
    large = "large"
    normal = "normal"
    small = "small"
    square = "square"


class pagepost_backdated_time_granularity(str, Enum):
    """pagepost_backdated_time_granularity enum values."""

    day = "day"
    hour = "hour"
    min = "min"
    month = "month"
    none = "none"
    year = "year"


class pagepost_feed_story_visibility(str, Enum):
    """pagepost_feed_story_visibility enum values."""

    hidden = "hidden"
    visible = "visible"


class pagepost_timeline_visibility(str, Enum):
    """pagepost_timeline_visibility enum values."""

    forced_allow = "forced_allow"
    hidden = "hidden"
    normal = "normal"


class pagepostcomments_comment_privacy_value_enum_param(str, Enum):
    """pagepostcomments_comment_privacy_value_enum_param enum values."""

    DECLINED_BY_ADMIN_ASSISTANT = "DECLINED_BY_ADMIN_ASSISTANT"
    DEFAULT_PRIVACY = "DEFAULT_PRIVACY"
    FRIENDS_AND_POST_OWNER = "FRIENDS_AND_POST_OWNER"
    FRIENDS_ONLY = "FRIENDS_ONLY"
    GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE = "GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE"
    OWNER_OR_COMMENTER = "OWNER_OR_COMMENTER"
    PENDING_APPROVAL = "PENDING_APPROVAL"
    REMOVED_BY_ADMIN_ASSISTANT = "REMOVED_BY_ADMIN_ASSISTANT"
    SIDE_CONVERSATION = "SIDE_CONVERSATION"
    SIDE_CONVERSATION_AND_POST_OWNER = "SIDE_CONVERSATION_AND_POST_OWNER"
    SPOTLIGHT_TAB = "SPOTLIGHT_TAB"


class pagepostcomments_filter_enum_param(str, Enum):
    """pagepostcomments_filter_enum_param enum values."""

    stream = "stream"
    toplevel = "toplevel"


class pagepostcomments_live_filter_enum_param(str, Enum):
    """pagepostcomments_live_filter_enum_param enum values."""

    filter_low_quality = "filter_low_quality"
    no_filter = "no_filter"


class pagepostcomments_order_enum_param(str, Enum):
    """pagepostcomments_order_enum_param enum values."""

    chronological = "chronological"
    reverse_chronological = "reverse_chronological"


class pagepostinsights_date_preset_enum_param(str, Enum):
    """pagepostinsights_date_preset_enum_param enum values."""

    data_maximum = "data_maximum"
    last_14d = "last_14d"
    last_28d = "last_28d"
    last_30d = "last_30d"
    last_3d = "last_3d"
    last_7d = "last_7d"
    last_90d = "last_90d"
    last_month = "last_month"
    last_quarter = "last_quarter"
    last_week_mon_sun = "last_week_mon_sun"
    last_week_sun_sat = "last_week_sun_sat"
    last_year = "last_year"
    maximum = "maximum"
    this_month = "this_month"
    this_quarter = "this_quarter"
    this_week_mon_today = "this_week_mon_today"
    this_week_sun_today = "this_week_sun_today"
    this_year = "this_year"
    today = "today"
    yesterday = "yesterday"


class pagepostinsights_period_enum_param(str, Enum):
    """pagepostinsights_period_enum_param enum values."""

    day = "day"
    days_28 = "days_28"
    lifetime = "lifetime"
    month = "month"
    total_over_range = "total_over_range"
    week = "week"


class pagepostreactions_type_enum_param(str, Enum):
    """pagepostreactions_type_enum_param enum values."""

    ANGRY = "ANGRY"
    CARE = "CARE"
    FIRE = "FIRE"
    HAHA = "HAHA"
    HUNDRED = "HUNDRED"
    LIKE = "LIKE"
    LOVE = "LOVE"
    NONE = "NONE"
    PRIDE = "PRIDE"
    SAD = "SAD"
    THANKFUL = "THANKFUL"
    WOW = "WOW"


class pageposts_with_enum_param(str, Enum):
    """pageposts_with_enum_param enum values."""

    LOCATION = "LOCATION"


class pagepublished_posts_with_enum_param(str, Enum):
    """pagepublished_posts_with_enum_param enum values."""

    LOCATION = "LOCATION"


class pagesecondary_receivers_platform_enum_param(str, Enum):
    """pagesecondary_receivers_platform_enum_param enum values."""

    INSTAGRAM = "INSTAGRAM"
    MESSENGER = "MESSENGER"


class pagestories_status_enum_param(str, Enum):
    """pagestories_status_enum_param enum values."""

    ARCHIVED = "ARCHIVED"
    PUBLISHED = "PUBLISHED"


class pagesubscribed_apps_subscribed_fields_enum_param(str, Enum):
    """pagesubscribed_apps_subscribed_fields_enum_param enum values."""

    affiliation = "affiliation"
    attire = "attire"
    awards = "awards"
    bio = "bio"
    birthday = "birthday"
    call_permission_reply = "call_permission_reply"
    calls = "calls"
    category = "category"
    checkins = "checkins"
    company_overview = "company_overview"
    conversations = "conversations"
    culinary_team = "culinary_team"
    current_location = "current_location"
    description = "description"
    email = "email"
    feature_access_list = "feature_access_list"
    feed = "feed"
    founded = "founded"
    general_info = "general_info"
    general_manager = "general_manager"
    group_feed = "group_feed"
    hometown = "hometown"
    hours = "hours"
    inbox_labels = "inbox_labels"
    invalid_topic_placeholder = "invalid_topic_placeholder"
    invoice_access_bank_slip_events = "invoice_access_bank_slip_events"
    invoice_access_invoice_change = "invoice_access_invoice_change"
    invoice_access_invoice_draft_change = "invoice_access_invoice_draft_change"
    invoice_access_onboarding_status_active = "invoice_access_onboarding_status_active"
    leadgen = "leadgen"
    leadgen_fat = "leadgen_fat"
    live_videos = "live_videos"
    local_delivery = "local_delivery"
    location = "location"
    marketing_message_delivery_failed = "marketing_message_delivery_failed"
    mcom_invoice_change = "mcom_invoice_change"
    members = "members"
    mention = "mention"
    merchant_review = "merchant_review"
    message_context = "message_context"
    message_deliveries = "message_deliveries"
    message_echoes = "message_echoes"
    message_edits = "message_edits"
    message_mention = "message_mention"
    message_reactions = "message_reactions"
    message_reads = "message_reads"
    message_template_status_update = "message_template_status_update"
    messages = "messages"
    messaging_account_linking = "messaging_account_linking"
    messaging_appointments = "messaging_appointments"
    messaging_checkout_updates = "messaging_checkout_updates"
    messaging_customer_information = "messaging_customer_information"
    messaging_direct_sends = "messaging_direct_sends"
    messaging_fblogin_account_linking = "messaging_fblogin_account_linking"
    messaging_feedback = "messaging_feedback"
    messaging_game_plays = "messaging_game_plays"
    messaging_handovers = "messaging_handovers"
    messaging_in_thread_lead_form_submit = "messaging_in_thread_lead_form_submit"
    messaging_integrity = "messaging_integrity"
    messaging_optins = "messaging_optins"
    messaging_optouts = "messaging_optouts"
    messaging_payments = "messaging_payments"
    messaging_policy_enforcement = "messaging_policy_enforcement"
    messaging_postbacks = "messaging_postbacks"
    messaging_pre_checkouts = "messaging_pre_checkouts"
    messaging_referrals = "messaging_referrals"
    mission = "mission"
    name = "name"
    page_about_story = "page_about_story"
    page_change_proposal = "page_change_proposal"
    page_upcoming_change = "page_upcoming_change"
    parking = "parking"
    payment_options = "payment_options"
    payment_request_update = "payment_request_update"
    personal_info = "personal_info"
    personal_interests = "personal_interests"
    phone = "phone"
    picture = "picture"
    price_range = "price_range"
    product_review = "product_review"
    products = "products"
    public_transit = "public_transit"
    publisher_subscriptions = "publisher_subscriptions"
    ratings = "ratings"
    registration = "registration"
    response_feedback = "response_feedback"
    send_cart = "send_cart"
    standby = "standby"
    user_action = "user_action"
    video_text_question_responses = "video_text_question_responses"
    videos = "videos"
    website = "website"


class pagethreads_platform_enum_param(str, Enum):
    """pagethreads_platform_enum_param enum values."""

    INSTAGRAM = "INSTAGRAM"
    MESSENGER = "MESSENGER"


class pagevideo_copyright_rules_source_enum_param(str, Enum):
    """pagevideo_copyright_rules_source_enum_param enum values."""

    MATCH_SETTINGS_DIALOG = "MATCH_SETTINGS_DIALOG"
    RULES_SELECTOR = "RULES_SELECTOR"
    RULES_TAB = "RULES_TAB"


class pagevideo_copyrights_content_category_enum_param(str, Enum):
    """pagevideo_copyrights_content_category_enum_param enum values."""

    episode = "episode"
    movie = "movie"
    web = "web"


class pagevideo_copyrights_monitoring_type_enum_param(str, Enum):
    """pagevideo_copyrights_monitoring_type_enum_param enum values."""

    AUDIO_ONLY = "AUDIO_ONLY"
    VIDEO_AND_AUDIO = "VIDEO_AND_AUDIO"
    VIDEO_ONLY = "VIDEO_ONLY"


class pagevideo_reels_upload_phase_enum_param(str, Enum):
    """pagevideo_reels_upload_phase_enum_param enum values."""

    FINISH = "FINISH"
    START = "START"


class pagevideo_reels_video_state_enum_param(str, Enum):
    """pagevideo_reels_video_state_enum_param enum values."""

    DRAFT = "DRAFT"
    PUBLISHED = "PUBLISHED"
    SCHEDULED = "SCHEDULED"


class pagevideo_stories_upload_phase_enum_param(str, Enum):
    """pagevideo_stories_upload_phase_enum_param enum values."""

    FINISH = "FINISH"
    START = "START"


class pagevideo_stories_video_state_enum_param(str, Enum):
    """pagevideo_stories_video_state_enum_param enum values."""

    DRAFT = "DRAFT"
    PUBLISHED = "PUBLISHED"
    SCHEDULED = "SCHEDULED"


class pagevideos_container_type_enum_param(str, Enum):
    """pagevideos_container_type_enum_param enum values."""

    ACO_VIDEO_VARIATION = "ACO_VIDEO_VARIATION"
    ADS_AI_GENERATED = "ADS_AI_GENERATED"
    AD_BREAK_PREVIEW = "AD_BREAK_PREVIEW"
    AD_DERIVATIVE = "AD_DERIVATIVE"
    AD_LIBRARY_WATERMARK = "AD_LIBRARY_WATERMARK"
    ALBUM_MULTIMEDIA_POST = "ALBUM_MULTIMEDIA_POST"
    ALOHA_SUPERFRAME = "ALOHA_SUPERFRAME"
    APP_REREVIEW_SCREENCAST = "APP_REREVIEW_SCREENCAST"
    APP_REVIEW_SCREENCAST = "APP_REVIEW_SCREENCAST"
    ASSET_MANAGER = "ASSET_MANAGER"
    ATLAS_VIDEO = "ATLAS_VIDEO"
    AUDIO_BROADCAST = "AUDIO_BROADCAST"
    AUDIO_COMMENT = "AUDIO_COMMENT"
    BROADCAST = "BROADCAST"
    CANVAS = "CANVAS"
    CMS_MEDIA_MANAGER = "CMS_MEDIA_MANAGER"
    CONTAINED_POST_ATTACHMENT = "CONTAINED_POST_ATTACHMENT"
    CONTAINED_POST_AUDIO_BROADCAST = "CONTAINED_POST_AUDIO_BROADCAST"
    CONTAINED_POST_COPYRIGHT_REFERENCE_BROADCAST = "CONTAINED_POST_COPYRIGHT_REFERENCE_BROADCAST"
    COPYRIGHT_REFERENCE_BROADCAST = "COPYRIGHT_REFERENCE_BROADCAST"
    COPYRIGHT_REFERENCE_IG_XPOST_VIDEO = "COPYRIGHT_REFERENCE_IG_XPOST_VIDEO"
    COPYRIGHT_REFERENCE_VIDEO = "COPYRIGHT_REFERENCE_VIDEO"
    CREATION_ML_PRECREATION = "CREATION_ML_PRECREATION"
    CREATOR_FAN_CHALLENGE = "CREATOR_FAN_CHALLENGE"
    CREATOR_STOREFRONT_PERSONALIZED_VIDEO = "CREATOR_STOREFRONT_PERSONALIZED_VIDEO"
    DATAGENIX_VIDEO = "DATAGENIX_VIDEO"
    DCO_AD_ASSET_FEED = "DCO_AD_ASSET_FEED"
    DCO_AUTOGEN_VIDEO = "DCO_AUTOGEN_VIDEO"
    DCO_TRIMMED_VIDEO = "DCO_TRIMMED_VIDEO"
    DIM_SUM = "DIM_SUM"
    DIRECTED_POST_ATTACHMENT = "DIRECTED_POST_ATTACHMENT"
    DIRECT_INBOX = "DIRECT_INBOX"
    DROPS_SHOPPING_EVENT_PAGE = "DROPS_SHOPPING_EVENT_PAGE"
    DYNAMIC_ITEM_VIDEO = "DYNAMIC_ITEM_VIDEO"
    DYNAMIC_TEMPLATE_VIDEO = "DYNAMIC_TEMPLATE_VIDEO"
    EVENT_COVER_VIDEO = "EVENT_COVER_VIDEO"
    EVENT_TOUR = "EVENT_TOUR"
    FACECAST_DVR = "FACECAST_DVR"
    FB_AVATAR_ANIMATED_SATP = "FB_AVATAR_ANIMATED_SATP"
    FB_COLLECTIBLE_VIDEO = "FB_COLLECTIBLE_VIDEO"
    FB_SHORTS = "FB_SHORTS"
    FB_SHORTS_CONTENT_REMIXABLE = "FB_SHORTS_CONTENT_REMIXABLE"
    FB_SHORTS_GROUP_POST = "FB_SHORTS_GROUP_POST"
    FB_SHORTS_LINKED_PRODUCT = "FB_SHORTS_LINKED_PRODUCT"
    FB_SHORTS_PMV_POST = "FB_SHORTS_PMV_POST"
    FB_SHORTS_POST = "FB_SHORTS_POST"
    FB_SHORTS_REMIX_POST = "FB_SHORTS_REMIX_POST"
    FUNDRAISER_COVER_VIDEO = "FUNDRAISER_COVER_VIDEO"
    GAME_CLIP = "GAME_CLIP"
    GIF_TO_VIDEO = "GIF_TO_VIDEO"
    GOODWILL_ANNIVERSARY_DEPRECATED = "GOODWILL_ANNIVERSARY_DEPRECATED"
    GOODWILL_ANNIVERSARY_PROMOTION_DEPRECATED = "GOODWILL_ANNIVERSARY_PROMOTION_DEPRECATED"
    GOODWILL_VIDEO_CONTAINED_SHARE = "GOODWILL_VIDEO_CONTAINED_SHARE"
    GOODWILL_VIDEO_PROMOTION = "GOODWILL_VIDEO_PROMOTION"
    GOODWILL_VIDEO_SHARE = "GOODWILL_VIDEO_SHARE"
    GOODWILL_VIDEO_TOKEN_REQUIRED = "GOODWILL_VIDEO_TOKEN_REQUIRED"
    GROUP_POST = "GROUP_POST"
    HEURISTIC_CLUSTER_VIDEO = "HEURISTIC_CLUSTER_VIDEO"
    HIGHLIGHT_CLIP_VIDEO = "HIGHLIGHT_CLIP_VIDEO"
    HORIZON_WORLDS_TV = "HORIZON_WORLDS_TV"
    HUDDLE_BROADCAST = "HUDDLE_BROADCAST"
    IG_REELS_XPV = "IG_REELS_XPV"
    IG_STORIES_READER = "IG_STORIES_READER"
    INJECTABLE = "INJECTABLE"
    INSPIRATION_VIDEO = "INSPIRATION_VIDEO"
    INSTAGRAM_VIDEO_COPY = "INSTAGRAM_VIDEO_COPY"
    INSTANT_APPLICATION_PREVIEW = "INSTANT_APPLICATION_PREVIEW"
    INSTANT_ARTICLE = "INSTANT_ARTICLE"
    ISSUE_MODULE = "ISSUE_MODULE"
    LEARN = "LEARN"
    LEGACY = "LEGACY"
    LEGACY_CONTAINED_POST_BROADCAST = "LEGACY_CONTAINED_POST_BROADCAST"
    LIVE_AUDIO_ROOM_BROADCAST = "LIVE_AUDIO_ROOM_BROADCAST"
    LIVE_CLIP_PREVIEW = "LIVE_CLIP_PREVIEW"
    LIVE_CLIP_WORKCHAT = "LIVE_CLIP_WORKCHAT"
    LIVE_CREATIVE_KIT_VIDEO = "LIVE_CREATIVE_KIT_VIDEO"
    LIVE_PHOTO = "LIVE_PHOTO"
    LOOK_NOW_DEPRECATED = "LOOK_NOW_DEPRECATED"
    MARKETPLACE_LISTING_VIDEO = "MARKETPLACE_LISTING_VIDEO"
    MARKETPLACE_PRE_RECORDED_VIDEO = "MARKETPLACE_PRE_RECORDED_VIDEO"
    MOMENTS_VIDEO = "MOMENTS_VIDEO"
    MUSIC_CLIP = "MUSIC_CLIP"
    MUSIC_CLIP_IN_COMMENT = "MUSIC_CLIP_IN_COMMENT"
    MUSIC_CLIP_IN_LIGHTWEIGHT_STATUS = "MUSIC_CLIP_IN_LIGHTWEIGHT_STATUS"
    MUSIC_CLIP_IN_MSGR_NOTE = "MUSIC_CLIP_IN_MSGR_NOTE"
    MUSIC_CLIP_IN_POLL_OPTION = "MUSIC_CLIP_IN_POLL_OPTION"
    MUSIC_CLIP_ON_DATING_PROFILE = "MUSIC_CLIP_ON_DATING_PROFILE"
    NEO_ASYNC_GAME_VIDEO = "NEO_ASYNC_GAME_VIDEO"
    NEW_CONTAINED_POST_BROADCAST = "NEW_CONTAINED_POST_BROADCAST"
    NO_STORY = "NO_STORY"
    OCULUS_CREATOR_PORTAL = "OCULUS_CREATOR_PORTAL"
    OCULUS_VENUES_BROADCAST = "OCULUS_VENUES_BROADCAST"
    ORIGINALITY_SELF_ADVOCACY = "ORIGINALITY_SELF_ADVOCACY"
    PAGES_COVER_VIDEO = "PAGES_COVER_VIDEO"
    PAGE_REVIEW_SCREENCAST = "PAGE_REVIEW_SCREENCAST"
    PAGE_SLIDESHOW_VIDEO = "PAGE_SLIDESHOW_VIDEO"
    PAID_CONTENT_PREVIEW = "PAID_CONTENT_PREVIEW"
    PAID_CONTENT_VIDEO = "PAID_CONTENT_VIDEO"
    PAID_CONTENT_VIDEO__POST = "PAID_CONTENT_VIDEO__POST"
    PIXELCLOUD = "PIXELCLOUD"
    PODCAST_HIGHLIGHT = "PODCAST_HIGHLIGHT"
    PODCAST_ML_PREVIEW = "PODCAST_ML_PREVIEW"
    PODCAST_ML_PREVIEW_NO_NEWSFEED_STORY = "PODCAST_ML_PREVIEW_NO_NEWSFEED_STORY"
    PODCAST_RSS = "PODCAST_RSS"
    PODCAST_RSS_EPHEMERAL = "PODCAST_RSS_EPHEMERAL"
    PODCAST_RSS_NO_NEWSFEED_STORY = "PODCAST_RSS_NO_NEWSFEED_STORY"
    PODCAST_VOICES = "PODCAST_VOICES"
    PODCAST_VOICES_NO_NEWSFEED_STORY = "PODCAST_VOICES_NO_NEWSFEED_STORY"
    PREMIERE_SOURCE = "PREMIERE_SOURCE"
    PREMIUM_MUSIC_VIDEO_CLIP = "PREMIUM_MUSIC_VIDEO_CLIP"
    PREMIUM_MUSIC_VIDEO_CROPPED_CLIP = "PREMIUM_MUSIC_VIDEO_CROPPED_CLIP"
    PREMIUM_MUSIC_VIDEO_NO_NEWSFEED_STORY = "PREMIUM_MUSIC_VIDEO_NO_NEWSFEED_STORY"
    PREMIUM_MUSIC_VIDEO_WITH_NEWSFEED_STORY = "PREMIUM_MUSIC_VIDEO_WITH_NEWSFEED_STORY"
    PRIVATE_GALLERY_VIDEO = "PRIVATE_GALLERY_VIDEO"
    PRODUCT_VIDEO = "PRODUCT_VIDEO"
    PROFILE_COVER_VIDEO = "PROFILE_COVER_VIDEO"
    PROFILE_INTRO_CARD = "PROFILE_INTRO_CARD"
    PROFILE_VIDEO = "PROFILE_VIDEO"
    PROTON = "PROTON"
    QUICK_CLIP_WORKPLACE_POST = "QUICK_CLIP_WORKPLACE_POST"
    QUICK_PROMOTION = "QUICK_PROMOTION"
    REPLACE_VIDEO = "REPLACE_VIDEO"
    SALES_CLIENT_INTERACTION = "SALES_CLIENT_INTERACTION"
    SHOWREEL_NATIVE_DUMMY_VIDEO = "SHOWREEL_NATIVE_DUMMY_VIDEO"
    SLIDESHOW_ANIMOTO = "SLIDESHOW_ANIMOTO"
    SLIDESHOW_SHAKR = "SLIDESHOW_SHAKR"
    SLIDESHOW_VARIATION_VIDEO = "SLIDESHOW_VARIATION_VIDEO"
    SOUND_PLATFORM_STREAM = "SOUND_PLATFORM_STREAM"
    SRT_ATTACHMENT = "SRT_ATTACHMENT"
    STORIES_VIDEO = "STORIES_VIDEO"
    STORYLINE = "STORYLINE"
    STORYLINE_WITH_EXTERNAL_MUSIC = "STORYLINE_WITH_EXTERNAL_MUSIC"
    STORY_ARCHIVE_VIDEO = "STORY_ARCHIVE_VIDEO"
    STORY_CARD_TEMPLATE = "STORY_CARD_TEMPLATE"
    STREAM_HIGHLIGHTS_VIDEO = "STREAM_HIGHLIGHTS_VIDEO"
    TAROT_DIGEST = "TAROT_DIGEST"
    TEMPORARY_UNLISTED = "TEMPORARY_UNLISTED"
    TEMP_VIDEO_COPYRIGHT_SCAN = "TEMP_VIDEO_COPYRIGHT_SCAN"
    UNLISTED = "UNLISTED"
    UNLISTED_OCULUS = "UNLISTED_OCULUS"
    VIDEO_COMMENT = "VIDEO_COMMENT"
    VIDEO_COMPOSITION_VARIATION = "VIDEO_COMPOSITION_VARIATION"
    VIDEO_CREATIVE_EDITOR_AUTOGEN_AD_VIDEO = "VIDEO_CREATIVE_EDITOR_AUTOGEN_AD_VIDEO"
    VIDEO_SUPERRES = "VIDEO_SUPERRES"
    VOICES_ARTICLE_VIDEO = "VOICES_ARTICLE_VIDEO"
    VU_GENERATED_VIDEO = "VU_GENERATED_VIDEO"
    WOODHENGE = "WOODHENGE"
    WORK_KNOWLEDGE_VIDEO = "WORK_KNOWLEDGE_VIDEO"
    YOUR_DAY = "YOUR_DAY"


class pagevideos_content_category_enum_param(str, Enum):
    """pagevideos_content_category_enum_param enum values."""

    BEAUTY_FASHION = "BEAUTY_FASHION"
    BUSINESS = "BUSINESS"
    CARS_TRUCKS = "CARS_TRUCKS"
    COMEDY = "COMEDY"
    CUTE_ANIMALS = "CUTE_ANIMALS"
    ENTERTAINMENT = "ENTERTAINMENT"
    FAMILY = "FAMILY"
    FOOD_HEALTH = "FOOD_HEALTH"
    HOME = "HOME"
    LIFESTYLE = "LIFESTYLE"
    MUSIC = "MUSIC"
    NEWS = "NEWS"
    OTHER = "OTHER"
    POLITICS = "POLITICS"
    SCIENCE = "SCIENCE"
    SPORTS = "SPORTS"
    TECHNOLOGY = "TECHNOLOGY"
    VIDEO_GAMING = "VIDEO_GAMING"


class pagevideos_formatting_enum_param(str, Enum):
    """pagevideos_formatting_enum_param enum values."""

    MARKDOWN = "MARKDOWN"
    PLAINTEXT = "PLAINTEXT"


class pagevideos_original_projection_type_enum_param(str, Enum):
    """pagevideos_original_projection_type_enum_param enum values."""

    cubemap = "cubemap"
    equirectangular = "equirectangular"
    half_equirectangular = "half_equirectangular"


class pagevideos_swap_mode_enum_param(str, Enum):
    """pagevideos_swap_mode_enum_param enum values."""

    replace = "replace"


class pagevideos_type_enum_param(str, Enum):
    """pagevideos_type_enum_param enum values."""

    TAGGED = "TAGGED"
    UPLOADED = "UPLOADED"


class pagevideos_unpublished_content_type_enum_param(str, Enum):
    """pagevideos_unpublished_content_type_enum_param enum values."""

    ADS_POST = "ADS_POST"
    DRAFT = "DRAFT"
    INLINE_CREATED = "INLINE_CREATED"
    PUBLISHED = "PUBLISHED"
    REVIEWABLE_BRANDED_CONTENT = "REVIEWABLE_BRANDED_CONTENT"
    SCHEDULED = "SCHEDULED"
    SCHEDULED_RECURRING = "SCHEDULED_RECURRING"


class pagevideos_upload_phase_enum_param(str, Enum):
    """pagevideos_upload_phase_enum_param enum values."""

    cancel = "cancel"
    finish = "finish"
    start = "start"
    transfer = "transfer"


class pagevisitor_posts_with_enum_param(str, Enum):
    """pagevisitor_posts_with_enum_param enum values."""

    LOCATION = "LOCATION"


class pagewelcome_message_flows_eligible_platforms_enum_param(str, Enum):
    """pagewelcome_message_flows_eligible_platforms_enum_param enum values."""

    INSTAGRAM = "INSTAGRAM"
    MESSENGER = "MESSENGER"
    WHATSAPP = "WHATSAPP"


class paymentenginepaymentdispute_reason_enum_param(str, Enum):
    """paymentenginepaymentdispute_reason_enum_param enum values."""

    BANNED_USER = "BANNED_USER"
    DENIED_REFUND = "DENIED_REFUND"
    GRANTED_REPLACEMENT_ITEM = "GRANTED_REPLACEMENT_ITEM"


class paymentenginepaymentrefunds_reason_enum_param(str, Enum):
    """paymentenginepaymentrefunds_reason_enum_param enum values."""

    CUSTOMER_SERVICE = "CUSTOMER_SERVICE"
    FRIENDLY_FRAUD = "FRIENDLY_FRAUD"
    MALICIOUS_FRAUD = "MALICIOUS_FRAUD"


class photocomments_comment_privacy_value_enum_param(str, Enum):
    """photocomments_comment_privacy_value_enum_param enum values."""

    DECLINED_BY_ADMIN_ASSISTANT = "DECLINED_BY_ADMIN_ASSISTANT"
    DEFAULT_PRIVACY = "DEFAULT_PRIVACY"
    FRIENDS_AND_POST_OWNER = "FRIENDS_AND_POST_OWNER"
    FRIENDS_ONLY = "FRIENDS_ONLY"
    GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE = "GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE"
    OWNER_OR_COMMENTER = "OWNER_OR_COMMENTER"
    PENDING_APPROVAL = "PENDING_APPROVAL"
    REMOVED_BY_ADMIN_ASSISTANT = "REMOVED_BY_ADMIN_ASSISTANT"
    SIDE_CONVERSATION = "SIDE_CONVERSATION"
    SIDE_CONVERSATION_AND_POST_OWNER = "SIDE_CONVERSATION_AND_POST_OWNER"
    SPOTLIGHT_TAB = "SPOTLIGHT_TAB"


class photocomments_filter_enum_param(str, Enum):
    """photocomments_filter_enum_param enum values."""

    stream = "stream"
    toplevel = "toplevel"


class photocomments_live_filter_enum_param(str, Enum):
    """photocomments_live_filter_enum_param enum values."""

    filter_low_quality = "filter_low_quality"
    no_filter = "no_filter"


class photocomments_order_enum_param(str, Enum):
    """photocomments_order_enum_param enum values."""

    chronological = "chronological"
    reverse_chronological = "reverse_chronological"


class photoinsights_date_preset_enum_param(str, Enum):
    """photoinsights_date_preset_enum_param enum values."""

    data_maximum = "data_maximum"
    last_14d = "last_14d"
    last_28d = "last_28d"
    last_30d = "last_30d"
    last_3d = "last_3d"
    last_7d = "last_7d"
    last_90d = "last_90d"
    last_month = "last_month"
    last_quarter = "last_quarter"
    last_week_mon_sun = "last_week_mon_sun"
    last_week_sun_sat = "last_week_sun_sat"
    last_year = "last_year"
    maximum = "maximum"
    this_month = "this_month"
    this_quarter = "this_quarter"
    this_week_mon_today = "this_week_mon_today"
    this_week_sun_today = "this_week_sun_today"
    this_year = "this_year"
    today = "today"
    yesterday = "yesterday"


class photoinsights_period_enum_param(str, Enum):
    """photoinsights_period_enum_param enum values."""

    day = "day"
    days_28 = "days_28"
    lifetime = "lifetime"
    month = "month"
    total_over_range = "total_over_range"
    week = "week"


class placetopic_icon_size(str, Enum):
    """placetopic_icon_size enum values."""

    VALUE_24 = "24"
    VALUE_36 = "36"
    VALUE_48 = "48"
    VALUE_72 = "72"


class post_backdated_time_granularity(str, Enum):
    """post_backdated_time_granularity enum values."""

    day = "day"
    hour = "hour"
    min = "min"
    month = "month"
    none = "none"
    year = "year"


class post_feed_story_visibility(str, Enum):
    """post_feed_story_visibility enum values."""

    hidden = "hidden"
    visible = "visible"


class post_timeline_visibility(str, Enum):
    """post_timeline_visibility enum values."""

    forced_allow = "forced_allow"
    hidden = "hidden"
    normal = "normal"


class postcomments_comment_privacy_value_enum_param(str, Enum):
    """postcomments_comment_privacy_value_enum_param enum values."""

    DECLINED_BY_ADMIN_ASSISTANT = "DECLINED_BY_ADMIN_ASSISTANT"
    DEFAULT_PRIVACY = "DEFAULT_PRIVACY"
    FRIENDS_AND_POST_OWNER = "FRIENDS_AND_POST_OWNER"
    FRIENDS_ONLY = "FRIENDS_ONLY"
    GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE = "GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE"
    OWNER_OR_COMMENTER = "OWNER_OR_COMMENTER"
    PENDING_APPROVAL = "PENDING_APPROVAL"
    REMOVED_BY_ADMIN_ASSISTANT = "REMOVED_BY_ADMIN_ASSISTANT"
    SIDE_CONVERSATION = "SIDE_CONVERSATION"
    SIDE_CONVERSATION_AND_POST_OWNER = "SIDE_CONVERSATION_AND_POST_OWNER"
    SPOTLIGHT_TAB = "SPOTLIGHT_TAB"


class postcomments_filter_enum_param(str, Enum):
    """postcomments_filter_enum_param enum values."""

    stream = "stream"
    toplevel = "toplevel"


class postcomments_live_filter_enum_param(str, Enum):
    """postcomments_live_filter_enum_param enum values."""

    filter_low_quality = "filter_low_quality"
    no_filter = "no_filter"


class postcomments_order_enum_param(str, Enum):
    """postcomments_order_enum_param enum values."""

    chronological = "chronological"
    reverse_chronological = "reverse_chronological"


class postinsights_date_preset_enum_param(str, Enum):
    """postinsights_date_preset_enum_param enum values."""

    data_maximum = "data_maximum"
    last_14d = "last_14d"
    last_28d = "last_28d"
    last_30d = "last_30d"
    last_3d = "last_3d"
    last_7d = "last_7d"
    last_90d = "last_90d"
    last_month = "last_month"
    last_quarter = "last_quarter"
    last_week_mon_sun = "last_week_mon_sun"
    last_week_sun_sat = "last_week_sun_sat"
    last_year = "last_year"
    maximum = "maximum"
    this_month = "this_month"
    this_quarter = "this_quarter"
    this_week_mon_today = "this_week_mon_today"
    this_week_sun_today = "this_week_sun_today"
    this_year = "this_year"
    today = "today"
    yesterday = "yesterday"


class postinsights_period_enum_param(str, Enum):
    """postinsights_period_enum_param enum values."""

    day = "day"
    days_28 = "days_28"
    lifetime = "lifetime"
    month = "month"
    total_over_range = "total_over_range"
    week = "week"


class postreactions_type_enum_param(str, Enum):
    """postreactions_type_enum_param enum values."""

    ANGRY = "ANGRY"
    CARE = "CARE"
    FIRE = "FIRE"
    HAHA = "HAHA"
    HUNDRED = "HUNDRED"
    LIKE = "LIKE"
    LOVE = "LOVE"
    NONE = "NONE"
    PRIDE = "PRIDE"
    SAD = "SAD"
    THANKFUL = "THANKFUL"
    WOW = "WOW"


class privateliftstudyinstance_operation(str, Enum):
    """privateliftstudyinstance_operation enum values."""

    AGGREGATE = "AGGREGATE"
    CANCEL = "CANCEL"
    COMPUTE = "COMPUTE"
    ID_MATCH = "ID_MATCH"
    NEXT = "NEXT"
    NONE = "NONE"


class productcatalog_additional_vertical_option(str, Enum):
    """productcatalog_additional_vertical_option enum values."""

    LOCAL_DA_CATALOG = "LOCAL_DA_CATALOG"
    LOCAL_PRODUCTS = "LOCAL_PRODUCTS"


class productcatalog_segment_use_cases(str, Enum):
    """productcatalog_segment_use_cases enum values."""

    AFFILIATE_SELLER_STOREFRONT = "AFFILIATE_SELLER_STOREFRONT"
    AFFILIATE_TAGGED_ONLY_DEPRECATED = "AFFILIATE_TAGGED_ONLY_DEPRECATED"
    COLLAB_ADS = "COLLAB_ADS"
    COLLAB_ADS_FOR_MARKETPLACE_PARTNER = "COLLAB_ADS_FOR_MARKETPLACE_PARTNER"
    COLLAB_ADS_SEGMENT_WITHOUT_SEGMENT_SYNCING = "COLLAB_ADS_SEGMENT_WITHOUT_SEGMENT_SYNCING"
    DIGITAL_CIRCULARS = "DIGITAL_CIRCULARS"
    FB_LIVE_SHOPPING = "FB_LIVE_SHOPPING"
    IG_SHOPPING = "IG_SHOPPING"
    IG_SHOPPING_SUGGESTED_PRODUCTS = "IG_SHOPPING_SUGGESTED_PRODUCTS"
    MARKETPLACE_SHOPS = "MARKETPLACE_SHOPS"
    TEST = "TEST"


class productcatalogagencies_permitted_roles_enum_param(str, Enum):
    """productcatalogagencies_permitted_roles_enum_param enum values."""

    ADMIN = "ADMIN"
    ADVERTISER = "ADVERTISER"


class productcatalogagencies_permitted_tasks_enum_param(str, Enum):
    """productcatalogagencies_permitted_tasks_enum_param enum values."""

    AA_ANALYZE = "AA_ANALYZE"
    ADVERTISE = "ADVERTISE"
    MANAGE = "MANAGE"
    MANAGE_AR = "MANAGE_AR"


class productcatalogassigned_users_tasks_enum_param(str, Enum):
    """productcatalogassigned_users_tasks_enum_param enum values."""

    AA_ANALYZE = "AA_ANALYZE"
    ADVERTISE = "ADVERTISE"
    MANAGE = "MANAGE"
    MANAGE_AR = "MANAGE_AR"


class productcatalogcategories_categorization_criteria_enum_param(str, Enum):
    """productcatalogcategories_categorization_criteria_enum_param enum values."""

    BRAND = "BRAND"
    CATEGORY = "CATEGORY"
    PRODUCT_TYPE = "PRODUCT_TYPE"


class productcatalogcheck_batch_request_status_error_priority_enum_param(str, Enum):
    """productcatalogcheck_batch_request_status_error_priority_enum_param enum values."""

    HIGH = "HIGH"
    LOW = "LOW"
    MEDIUM = "MEDIUM"


class productcatalogcreator_asset_creatives_moderation_status_enum_param(str, Enum):
    """productcatalogcreator_asset_creatives_moderation_status_enum_param enum values."""

    ARCHIVED = "ARCHIVED"
    ELIGIBLE = "ELIGIBLE"
    EXPIRED = "EXPIRED"
    INELIGIBLE = "INELIGIBLE"
    IN_REVIEW = "IN_REVIEW"
    PAUSED = "PAUSED"
    UNKNOWN = "UNKNOWN"


class productcatalogdata_sources_ingestion_source_type_enum_param(str, Enum):
    """productcatalogdata_sources_ingestion_source_type_enum_param enum values."""

    ALL = "ALL"
    PRIMARY = "PRIMARY"
    SUPPLEMENTARY = "SUPPLEMENTARY"


class productcatalogdiagnostics_affected_channels_enum_param(str, Enum):
    """productcatalogdiagnostics_affected_channels_enum_param enum values."""

    b2c_marketplace = "b2c_marketplace"
    c2c_marketplace = "c2c_marketplace"
    da = "da"
    daily_deals = "daily_deals"
    daily_deals_legacy = "daily_deals_legacy"
    ig_product_tagging = "ig_product_tagging"
    marketplace = "marketplace"
    marketplace_ads_deprecated = "marketplace_ads_deprecated"
    marketplace_shops = "marketplace_shops"
    mini_shops = "mini_shops"
    offline_conversions = "offline_conversions"
    shops = "shops"
    universal_checkout = "universal_checkout"
    whatsapp = "whatsapp"


class productcatalogdiagnostics_affected_entities_enum_param(str, Enum):
    """productcatalogdiagnostics_affected_entities_enum_param enum values."""

    product_catalog = "product_catalog"
    product_event = "product_event"
    product_item = "product_item"
    product_set = "product_set"


class productcatalogdiagnostics_affected_features_enum_param(str, Enum):
    """productcatalogdiagnostics_affected_features_enum_param enum values."""

    augmented_reality = "augmented_reality"
    checkout = "checkout"


class productcatalogdiagnostics_severities_enum_param(str, Enum):
    """productcatalogdiagnostics_severities_enum_param enum values."""

    MUST_FIX = "MUST_FIX"
    OPPORTUNITY = "OPPORTUNITY"


class productcatalogdiagnostics_types_enum_param(str, Enum):
    """productcatalogdiagnostics_types_enum_param enum values."""

    AR_VISIBILITY_ISSUES = "AR_VISIBILITY_ISSUES"
    ATTRIBUTES_INVALID = "ATTRIBUTES_INVALID"
    ATTRIBUTES_MISSING = "ATTRIBUTES_MISSING"
    CATEGORY = "CATEGORY"
    CHECKOUT = "CHECKOUT"
    DA_VISIBILITY_ISSUES = "DA_VISIBILITY_ISSUES"
    EVENT_SOURCE_ISSUES = "EVENT_SOURCE_ISSUES"
    IMAGE_QUALITY = "IMAGE_QUALITY"
    LOW_QUALITY_TITLE_AND_DESCRIPTION = "LOW_QUALITY_TITLE_AND_DESCRIPTION"
    POLICY_VIOLATION = "POLICY_VIOLATION"
    SHOPS_VISIBILITY_ISSUES = "SHOPS_VISIBILITY_ISSUES"


class productcatalogevent_stats_breakdowns_enum_param(str, Enum):
    """productcatalogevent_stats_breakdowns_enum_param enum values."""

    DEVICE_TYPE = "DEVICE_TYPE"


class productcataloghotel_rooms_batch_standard_enum_param(str, Enum):
    """productcataloghotel_rooms_batch_standard_enum_param enum values."""

    google = "google"


class productcatalogitems_batch_item_sub_type_enum_param(str, Enum):
    """productcatalogitems_batch_item_sub_type_enum_param enum values."""

    APPLIANCES = "APPLIANCES"
    BABY_FEEDING = "BABY_FEEDING"
    BABY_TRANSPORT = "BABY_TRANSPORT"
    BEAUTY = "BEAUTY"
    BEDDING = "BEDDING"
    CAMERAS = "CAMERAS"
    CELL_PHONES_AND_SMART_WATCHES = "CELL_PHONES_AND_SMART_WATCHES"
    CLEANING_SUPPLIES = "CLEANING_SUPPLIES"
    CLOTHING = "CLOTHING"
    CLOTHING_ACCESSORIES = "CLOTHING_ACCESSORIES"
    COMPUTERS_AND_TABLETS = "COMPUTERS_AND_TABLETS"
    DIAPERING_AND_POTTY_TRAINING = "DIAPERING_AND_POTTY_TRAINING"
    ELECTRONICS_ACCESSORIES = "ELECTRONICS_ACCESSORIES"
    FURNITURE = "FURNITURE"
    HEALTH = "HEALTH"
    HOME_GOODS = "HOME_GOODS"
    JEWELRY = "JEWELRY"
    NURSERY = "NURSERY"
    PRINTERS_AND_SCANNERS = "PRINTERS_AND_SCANNERS"
    PROJECTORS = "PROJECTORS"
    SHOES_AND_FOOTWEAR = "SHOES_AND_FOOTWEAR"
    SOFTWARE = "SOFTWARE"
    TOYS = "TOYS"
    TVS_AND_MONITORS = "TVS_AND_MONITORS"
    VIDEO_GAME_CONSOLES_AND_VIDEO_GAMES = "VIDEO_GAME_CONSOLES_AND_VIDEO_GAMES"
    WATCHES = "WATCHES"


class productcatalogmarketplace_partner_signals_event_name_enum_param(str, Enum):
    """productcatalogmarketplace_partner_signals_event_name_enum_param enum values."""

    ADD_TO_CART = "ADD_TO_CART"
    PURCHASE = "PURCHASE"
    TEST = "TEST"
    VIEW_ITEM = "VIEW_ITEM"


class productcatalogpricing_variables_batch_standard_enum_param(str, Enum):
    """productcatalogpricing_variables_batch_standard_enum_param enum values."""

    google = "google"


class productcatalogproduct_feeds_delimiter_enum_param(str, Enum):
    """productcatalogproduct_feeds_delimiter_enum_param enum values."""

    AUTODETECT = "AUTODETECT"
    BAR = "BAR"
    COMMA = "COMMA"
    SEMICOLON = "SEMICOLON"
    TAB = "TAB"
    TILDE = "TILDE"


class productcatalogproduct_feeds_encoding_enum_param(str, Enum):
    """productcatalogproduct_feeds_encoding_enum_param enum values."""

    AUTODETECT = "AUTODETECT"
    LATIN1 = "LATIN1"
    UTF16BE = "UTF16BE"
    UTF16LE = "UTF16LE"
    UTF32BE = "UTF32BE"
    UTF32LE = "UTF32LE"
    UTF8 = "UTF8"


class productcatalogproduct_feeds_feed_type_enum_param(str, Enum):
    """productcatalogproduct_feeds_feed_type_enum_param enum values."""

    AUTOMOTIVE_MODEL = "AUTOMOTIVE_MODEL"
    COLLECTION = "COLLECTION"
    DESTINATION = "DESTINATION"
    FLIGHT = "FLIGHT"
    HOME_LISTING = "HOME_LISTING"
    HOTEL = "HOTEL"
    HOTEL_ROOM = "HOTEL_ROOM"
    LOCAL_INVENTORY = "LOCAL_INVENTORY"
    MEDIA_TITLE = "MEDIA_TITLE"
    OFFER = "OFFER"
    PRODUCTS = "PRODUCTS"
    PRODUCT_RATINGS_AND_REVIEWS = "PRODUCT_RATINGS_AND_REVIEWS"
    TRANSACTABLE_ITEMS = "TRANSACTABLE_ITEMS"
    VEHICLES = "VEHICLES"
    VEHICLE_OFFER = "VEHICLE_OFFER"


class productcatalogproduct_feeds_ingestion_source_type_enum_param(str, Enum):
    """productcatalogproduct_feeds_ingestion_source_type_enum_param enum values."""

    PRIMARY_FEED = "PRIMARY_FEED"
    SUPPLEMENTARY_FEED = "SUPPLEMENTARY_FEED"


class productcatalogproduct_feeds_item_sub_type_enum_param(str, Enum):
    """productcatalogproduct_feeds_item_sub_type_enum_param enum values."""

    APPLIANCES = "APPLIANCES"
    BABY_FEEDING = "BABY_FEEDING"
    BABY_TRANSPORT = "BABY_TRANSPORT"
    BEAUTY = "BEAUTY"
    BEDDING = "BEDDING"
    CAMERAS = "CAMERAS"
    CELL_PHONES_AND_SMART_WATCHES = "CELL_PHONES_AND_SMART_WATCHES"
    CLEANING_SUPPLIES = "CLEANING_SUPPLIES"
    CLOTHING = "CLOTHING"
    CLOTHING_ACCESSORIES = "CLOTHING_ACCESSORIES"
    COMPUTERS_AND_TABLETS = "COMPUTERS_AND_TABLETS"
    DIAPERING_AND_POTTY_TRAINING = "DIAPERING_AND_POTTY_TRAINING"
    ELECTRONICS_ACCESSORIES = "ELECTRONICS_ACCESSORIES"
    FURNITURE = "FURNITURE"
    HEALTH = "HEALTH"
    HOME_GOODS = "HOME_GOODS"
    JEWELRY = "JEWELRY"
    NURSERY = "NURSERY"
    PRINTERS_AND_SCANNERS = "PRINTERS_AND_SCANNERS"
    PROJECTORS = "PROJECTORS"
    SHOES_AND_FOOTWEAR = "SHOES_AND_FOOTWEAR"
    SOFTWARE = "SOFTWARE"
    TOYS = "TOYS"
    TVS_AND_MONITORS = "TVS_AND_MONITORS"
    VIDEO_GAME_CONSOLES_AND_VIDEO_GAMES = "VIDEO_GAME_CONSOLES_AND_VIDEO_GAMES"
    WATCHES = "WATCHES"


class productcatalogproduct_feeds_override_type_enum_param(str, Enum):
    """productcatalogproduct_feeds_override_type_enum_param enum values."""

    BATCH_API_LANGUAGE_OR_COUNTRY = "BATCH_API_LANGUAGE_OR_COUNTRY"
    CATALOG_SEGMENT_CUSTOMIZE_DEFAULT = "CATALOG_SEGMENT_CUSTOMIZE_DEFAULT"
    COUNTRY = "COUNTRY"
    LANGUAGE = "LANGUAGE"
    LANGUAGE_AND_COUNTRY = "LANGUAGE_AND_COUNTRY"
    LOCAL = "LOCAL"
    SMART_PIXEL_LANGUAGE_OR_COUNTRY = "SMART_PIXEL_LANGUAGE_OR_COUNTRY"
    VERSION = "VERSION"


class productcatalogproduct_feeds_quoted_fields_mode_enum_param(str, Enum):
    """productcatalogproduct_feeds_quoted_fields_mode_enum_param enum values."""

    autodetect = "autodetect"
    off = "off"
    on = "on"


class productcatalogproducts_age_group_enum_param(str, Enum):
    """productcatalogproducts_age_group_enum_param enum values."""

    adult = "adult"
    ALL_AGES = "all ages"
    infant = "infant"
    kids = "kids"
    newborn = "newborn"
    teen = "teen"
    toddler = "toddler"


class productcatalogproducts_availability_enum_param(str, Enum):
    """productcatalogproducts_availability_enum_param enum values."""

    AVAILABLE_FOR_ORDER = "available for order"
    discontinued = "discontinued"
    IN_STOCK = "in stock"
    mark_as_sold = "mark_as_sold"
    OUT_OF_STOCK = "out of stock"
    pending = "pending"
    preorder = "preorder"


class productcatalogproducts_commerce_tax_category_enum_param(str, Enum):
    """productcatalogproducts_commerce_tax_category_enum_param enum values."""

    FB_ANIMAL = "FB_ANIMAL"
    FB_ANIMAL_SUPP = "FB_ANIMAL_SUPP"
    FB_APRL = "FB_APRL"
    FB_APRL_ACCESSORIES = "FB_APRL_ACCESSORIES"
    FB_APRL_ATHL_UNIF = "FB_APRL_ATHL_UNIF"
    FB_APRL_CASES = "FB_APRL_CASES"
    FB_APRL_CLOTHING = "FB_APRL_CLOTHING"
    FB_APRL_COSTUME = "FB_APRL_COSTUME"
    FB_APRL_CSTM = "FB_APRL_CSTM"
    FB_APRL_FORMAL = "FB_APRL_FORMAL"
    FB_APRL_HANDBAG = "FB_APRL_HANDBAG"
    FB_APRL_JEWELRY = "FB_APRL_JEWELRY"
    FB_APRL_SHOE = "FB_APRL_SHOE"
    FB_APRL_SHOE_ACC = "FB_APRL_SHOE_ACC"
    FB_APRL_SWIM = "FB_APRL_SWIM"
    FB_APRL_SWIM_CHIL = "FB_APRL_SWIM_CHIL"
    FB_APRL_SWIM_CVR = "FB_APRL_SWIM_CVR"
    FB_ARTS = "FB_ARTS"
    FB_ARTS_HOBBY = "FB_ARTS_HOBBY"
    FB_ARTS_PARTY = "FB_ARTS_PARTY"
    FB_ARTS_PARTY_GIFT_CARD = "FB_ARTS_PARTY_GIFT_CARD"
    FB_ARTS_TICKET = "FB_ARTS_TICKET"
    FB_BABY = "FB_BABY"
    FB_BABY_BATH = "FB_BABY_BATH"
    FB_BABY_BLANKET = "FB_BABY_BLANKET"
    FB_BABY_DIAPER = "FB_BABY_DIAPER"
    FB_BABY_GIFT_SET = "FB_BABY_GIFT_SET"
    FB_BABY_HEALTH = "FB_BABY_HEALTH"
    FB_BABY_NURSING = "FB_BABY_NURSING"
    FB_BABY_POTTY_TRN = "FB_BABY_POTTY_TRN"
    FB_BABY_SAFE = "FB_BABY_SAFE"
    FB_BABY_TOYS = "FB_BABY_TOYS"
    FB_BABY_TRANSPORT = "FB_BABY_TRANSPORT"
    FB_BABY_TRANSPORT_ACC = "FB_BABY_TRANSPORT_ACC"
    FB_BAGS = "FB_BAGS"
    FB_BAGS_BKPK = "FB_BAGS_BKPK"
    FB_BAGS_BOXES = "FB_BAGS_BOXES"
    FB_BAGS_BRFCS = "FB_BAGS_BRFCS"
    FB_BAGS_CSMT_BAG = "FB_BAGS_CSMT_BAG"
    FB_BAGS_DFFL = "FB_BAGS_DFFL"
    FB_BAGS_DIPR = "FB_BAGS_DIPR"
    FB_BAGS_FNNY = "FB_BAGS_FNNY"
    FB_BAGS_GRMT = "FB_BAGS_GRMT"
    FB_BAGS_LUGG = "FB_BAGS_LUGG"
    FB_BAGS_LUG_ACC = "FB_BAGS_LUG_ACC"
    FB_BAGS_MSGR = "FB_BAGS_MSGR"
    FB_BAGS_TOTE = "FB_BAGS_TOTE"
    FB_BAGS_TRN_CAS = "FB_BAGS_TRN_CAS"
    FB_BLDG = "FB_BLDG"
    FB_BLDG_ACC = "FB_BLDG_ACC"
    FB_BLDG_CNSMB = "FB_BLDG_CNSMB"
    FB_BLDG_FENCE = "FB_BLDG_FENCE"
    FB_BLDG_FUEL_TNK = "FB_BLDG_FUEL_TNK"
    FB_BLDG_HT_VNT = "FB_BLDG_HT_VNT"
    FB_BLDG_LOCK = "FB_BLDG_LOCK"
    FB_BLDG_MATRL = "FB_BLDG_MATRL"
    FB_BLDG_PLMB = "FB_BLDG_PLMB"
    FB_BLDG_PUMP = "FB_BLDG_PUMP"
    FB_BLDG_PWRS = "FB_BLDG_PWRS"
    FB_BLDG_STR_TANK = "FB_BLDG_STR_TANK"
    FB_BLDG_S_ENG = "FB_BLDG_S_ENG"
    FB_BLDG_TL_ACC = "FB_BLDG_TL_ACC"
    FB_BLDG_TOOL = "FB_BLDG_TOOL"
    FB_BUSIND = "FB_BUSIND"
    FB_BUSIND_ADVERTISING = "FB_BUSIND_ADVERTISING"
    FB_BUSIND_AGRICULTURE = "FB_BUSIND_AGRICULTURE"
    FB_BUSIND_AUTOMATION = "FB_BUSIND_AUTOMATION"
    FB_BUSIND_HEAVY_MACH = "FB_BUSIND_HEAVY_MACH"
    FB_BUSIND_LAB = "FB_BUSIND_LAB"
    FB_BUSIND_MEDICAL = "FB_BUSIND_MEDICAL"
    FB_BUSIND_RETAIL = "FB_BUSIND_RETAIL"
    FB_BUSIND_SANITARY_CT = "FB_BUSIND_SANITARY_CT"
    FB_BUSIND_SIGN = "FB_BUSIND_SIGN"
    FB_BUSIND_STORAGE = "FB_BUSIND_STORAGE"
    FB_BUSIND_STORAGE_ACC = "FB_BUSIND_STORAGE_ACC"
    FB_BUSIND_WORK_GEAR = "FB_BUSIND_WORK_GEAR"
    FB_CAMERA_ACC = "FB_CAMERA_ACC"
    FB_CAMERA_CAMERA = "FB_CAMERA_CAMERA"
    FB_CAMERA_OPTIC = "FB_CAMERA_OPTIC"
    FB_CAMERA_OPTICS = "FB_CAMERA_OPTICS"
    FB_CAMERA_PHOTO = "FB_CAMERA_PHOTO"
    FB_ELEC = "FB_ELEC"
    FB_ELEC_ACC = "FB_ELEC_ACC"
    FB_ELEC_ARCDADE = "FB_ELEC_ARCDADE"
    FB_ELEC_AUDIO = "FB_ELEC_AUDIO"
    FB_ELEC_CIRCUIT = "FB_ELEC_CIRCUIT"
    FB_ELEC_COMM = "FB_ELEC_COMM"
    FB_ELEC_COMPUTER = "FB_ELEC_COMPUTER"
    FB_ELEC_GPS_ACC = "FB_ELEC_GPS_ACC"
    FB_ELEC_GPS_NAV = "FB_ELEC_GPS_NAV"
    FB_ELEC_GPS_TRK = "FB_ELEC_GPS_TRK"
    FB_ELEC_MARINE = "FB_ELEC_MARINE"
    FB_ELEC_NETWORK = "FB_ELEC_NETWORK"
    FB_ELEC_PART = "FB_ELEC_PART"
    FB_ELEC_PRINT = "FB_ELEC_PRINT"
    FB_ELEC_RADAR = "FB_ELEC_RADAR"
    FB_ELEC_SFTWR = "FB_ELEC_SFTWR"
    FB_ELEC_SPEED_RDR = "FB_ELEC_SPEED_RDR"
    FB_ELEC_TELEVISION = "FB_ELEC_TELEVISION"
    FB_ELEC_TOLL = "FB_ELEC_TOLL"
    FB_ELEC_VIDEO = "FB_ELEC_VIDEO"
    FB_ELEC_VID_GM_ACC = "FB_ELEC_VID_GM_ACC"
    FB_ELEC_VID_GM_CNSL = "FB_ELEC_VID_GM_CNSL"
    FB_FOOD = "FB_FOOD"
    FB_FURN = "FB_FURN"
    FB_FURN_BABY = "FB_FURN_BABY"
    FB_FURN_BENCH = "FB_FURN_BENCH"
    FB_FURN_CART = "FB_FURN_CART"
    FB_FURN_CHAIR = "FB_FURN_CHAIR"
    FB_FURN_CHAIR_ACC = "FB_FURN_CHAIR_ACC"
    FB_FURN_DIVIDE = "FB_FURN_DIVIDE"
    FB_FURN_DIVIDE_ACC = "FB_FURN_DIVIDE_ACC"
    FB_FURN_ENT_CTR = "FB_FURN_ENT_CTR"
    FB_FURN_FUTN = "FB_FURN_FUTN"
    FB_FURN_FUTN_PAD = "FB_FURN_FUTN_PAD"
    FB_FURN_OFFICE = "FB_FURN_OFFICE"
    FB_FURN_OFFICE_ACC = "FB_FURN_OFFICE_ACC"
    FB_FURN_OTTO = "FB_FURN_OTTO"
    FB_FURN_OUTDOOR = "FB_FURN_OUTDOOR"
    FB_FURN_OUTDOOR_ACC = "FB_FURN_OUTDOOR_ACC"
    FB_FURN_SETS = "FB_FURN_SETS"
    FB_FURN_SHELVE_ACC = "FB_FURN_SHELVE_ACC"
    FB_FURN_SHLF = "FB_FURN_SHLF"
    FB_FURN_SOFA = "FB_FURN_SOFA"
    FB_FURN_SOFA_ACC = "FB_FURN_SOFA_ACC"
    FB_FURN_STORAGE = "FB_FURN_STORAGE"
    FB_FURN_TABL = "FB_FURN_TABL"
    FB_FURN_TABL_ACC = "FB_FURN_TABL_ACC"
    FB_GENERIC_TAXABLE = "FB_GENERIC_TAXABLE"
    FB_HLTH = "FB_HLTH"
    FB_HLTH_HLTH = "FB_HLTH_HLTH"
    FB_HLTH_JWL_CR = "FB_HLTH_JWL_CR"
    FB_HLTH_LILP_BLM = "FB_HLTH_LILP_BLM"
    FB_HLTH_LTN_SPF = "FB_HLTH_LTN_SPF"
    FB_HLTH_PRSL_CR = "FB_HLTH_PRSL_CR"
    FB_HLTH_SKN_CR = "FB_HLTH_SKN_CR"
    FB_HMGN = "FB_HMGN"
    FB_HMGN_BATH = "FB_HMGN_BATH"
    FB_HMGN_DCOR = "FB_HMGN_DCOR"
    FB_HMGN_EMGY = "FB_HMGN_EMGY"
    FB_HMGN_FPLC = "FB_HMGN_FPLC"
    FB_HMGN_FPLC_ACC = "FB_HMGN_FPLC_ACC"
    FB_HMGN_GS_SFT = "FB_HMGN_GS_SFT"
    FB_HMGN_HS_ACC = "FB_HMGN_HS_ACC"
    FB_HMGN_HS_APP = "FB_HMGN_HS_APP"
    FB_HMGN_HS_SPL = "FB_HMGN_HS_SPL"
    FB_HMGN_KTCN = "FB_HMGN_KTCN"
    FB_HMGN_LAWN = "FB_HMGN_LAWN"
    FB_HMGN_LGHT = "FB_HMGN_LGHT"
    FB_HMGN_LINN = "FB_HMGN_LINN"
    FB_HMGN_LT_ACC = "FB_HMGN_LT_ACC"
    FB_HMGN_OTDR = "FB_HMGN_OTDR"
    FB_HMGN_POOL = "FB_HMGN_POOL"
    FB_HMGN_SCTY = "FB_HMGN_SCTY"
    FB_HMGN_SMK_ACC = "FB_HMGN_SMK_ACC"
    FB_HMGN_UMBR = "FB_HMGN_UMBR"
    FB_HMGN_UMBR_ACC = "FB_HMGN_UMBR_ACC"
    FB_MDIA = "FB_MDIA"
    FB_MDIA_BOOK = "FB_MDIA_BOOK"
    FB_MDIA_DVDS = "FB_MDIA_DVDS"
    FB_MDIA_MAG = "FB_MDIA_MAG"
    FB_MDIA_MANL = "FB_MDIA_MANL"
    FB_MDIA_MUSC = "FB_MDIA_MUSC"
    FB_MDIA_PRJ_PLN = "FB_MDIA_PRJ_PLN"
    FB_MDIA_SHT_MUS = "FB_MDIA_SHT_MUS"
    FB_OFFC = "FB_OFFC"
    FB_OFFC_BKAC = "FB_OFFC_BKAC"
    FB_OFFC_CRTS = "FB_OFFC_CRTS"
    FB_OFFC_DSKP = "FB_OFFC_DSKP"
    FB_OFFC_EQIP = "FB_OFFC_EQIP"
    FB_OFFC_FLNG = "FB_OFFC_FLNG"
    FB_OFFC_GNRL = "FB_OFFC_GNRL"
    FB_OFFC_INSTM = "FB_OFFC_INSTM"
    FB_OFFC_LP_DSK = "FB_OFFC_LP_DSK"
    FB_OFFC_MATS = "FB_OFFC_MATS"
    FB_OFFC_NM_PLT = "FB_OFFC_NM_PLT"
    FB_OFFC_PPR_HNDL = "FB_OFFC_PPR_HNDL"
    FB_OFFC_PRSNT_SPL = "FB_OFFC_PRSNT_SPL"
    FB_OFFC_SEALR = "FB_OFFC_SEALR"
    FB_OFFC_SHIP_SPL = "FB_OFFC_SHIP_SPL"
    FB_RLGN = "FB_RLGN"
    FB_RLGN_CMNY = "FB_RLGN_CMNY"
    FB_RLGN_ITEM = "FB_RLGN_ITEM"
    FB_RLGN_WEDD = "FB_RLGN_WEDD"
    FB_SFTWR = "FB_SFTWR"
    FB_SFWR_CMPTR = "FB_SFWR_CMPTR"
    FB_SFWR_DGTL_GD = "FB_SFWR_DGTL_GD"
    FB_SFWR_GAME = "FB_SFWR_GAME"
    FB_SHIPPING = "FB_SHIPPING"
    FB_SPOR = "FB_SPOR"
    FB_SPORT_ATHL = "FB_SPORT_ATHL"
    FB_SPORT_ATHL_CLTH = "FB_SPORT_ATHL_CLTH"
    FB_SPORT_ATHL_SHOE = "FB_SPORT_ATHL_SHOE"
    FB_SPORT_ATHL_SPRT = "FB_SPORT_ATHL_SPRT"
    FB_SPORT_EXRCS = "FB_SPORT_EXRCS"
    FB_SPORT_INDR_GM = "FB_SPORT_INDR_GM"
    FB_SPORT_OTDR_GM = "FB_SPORT_OTDR_GM"
    FB_TOYS = "FB_TOYS"
    FB_TOYS_EQIP = "FB_TOYS_EQIP"
    FB_TOYS_GAME = "FB_TOYS_GAME"
    FB_TOYS_PZZL = "FB_TOYS_PZZL"
    FB_TOYS_TMRS = "FB_TOYS_TMRS"
    FB_TOYS_TOYS = "FB_TOYS_TOYS"
    FB_VEHI = "FB_VEHI"
    FB_VEHI_PART = "FB_VEHI_PART"


class productcatalogproducts_condition_enum_param(str, Enum):
    """productcatalogproducts_condition_enum_param enum values."""

    cpo = "cpo"
    new = "new"
    open_box_new = "open_box_new"
    refurbished = "refurbished"
    used = "used"
    used_fair = "used_fair"
    used_good = "used_good"
    used_like_new = "used_like_new"


class productcatalogproducts_error_priority_enum_param(str, Enum):
    """productcatalogproducts_error_priority_enum_param enum values."""

    HIGH = "HIGH"
    LOW = "LOW"
    MEDIUM = "MEDIUM"


class productcatalogproducts_error_type_enum_param(str, Enum):
    """productcatalogproducts_error_type_enum_param enum values."""

    ADDRESS_BLOCKLISTED_IN_MARKET = "ADDRESS_BLOCKLISTED_IN_MARKET"
    AGGREGATED_LOCALIZATION_ISSUES = "AGGREGATED_LOCALIZATION_ISSUES"
    APP_HAS_NO_AEM_SETUP = "APP_HAS_NO_AEM_SETUP"
    AR_DELETED_DUE_TO_UPDATE = "AR_DELETED_DUE_TO_UPDATE"
    AR_POLICY_VIOLATED = "AR_POLICY_VIOLATED"
    AVAILABLE = "AVAILABLE"
    BAD_QUALITY_IMAGE = "BAD_QUALITY_IMAGE"
    BIG_CATALOG_WITH_ALL_ITEMS_IN_STOCK = "BIG_CATALOG_WITH_ALL_ITEMS_IN_STOCK"
    BIZ_MSG_AI_AGENT_DISABLED_BY_USER = "BIZ_MSG_AI_AGENT_DISABLED_BY_USER"
    BIZ_MSG_GEN_AI_POLICY_VIOLATED = "BIZ_MSG_GEN_AI_POLICY_VIOLATED"
    CANNOT_EDIT_SUBSCRIPTION_PRODUCTS = "CANNOT_EDIT_SUBSCRIPTION_PRODUCTS"
    CATALOG_NOT_CONNECTED_TO_EVENT_SOURCE = "CATALOG_NOT_CONNECTED_TO_EVENT_SOURCE"
    CHECKOUT_DISABLED_BY_USER = "CHECKOUT_DISABLED_BY_USER"
    COMMERCE_ACCOUNT_LEGAL_ADDRESS_INVALID = "COMMERCE_ACCOUNT_LEGAL_ADDRESS_INVALID"
    COMMERCE_ACCOUNT_NOT_LEGALLY_COMPLIANT = "COMMERCE_ACCOUNT_NOT_LEGALLY_COMPLIANT"
    CRAWLED_AVAILABILITY_MISMATCH = "CRAWLED_AVAILABILITY_MISMATCH"
    DA_DISABLED_BY_USER = "DA_DISABLED_BY_USER"
    DA_POLICY_UNFIT_FOR_AUDIENCE = "DA_POLICY_UNFIT_FOR_AUDIENCE"
    DA_POLICY_VIOLATION = "DA_POLICY_VIOLATION"
    DELETED_ITEM = "DELETED_ITEM"
    DIGITAL_GOODS_NOT_AVAILABLE_FOR_CHECKOUT = "DIGITAL_GOODS_NOT_AVAILABLE_FOR_CHECKOUT"
    DUPLICATE_IMAGES = "DUPLICATE_IMAGES"
    DUPLICATE_TITLE_AND_DESCRIPTION = "DUPLICATE_TITLE_AND_DESCRIPTION"
    EMPTY_AVAILABILITY = "EMPTY_AVAILABILITY"
    EMPTY_CONDITION = "EMPTY_CONDITION"
    EMPTY_DESCRIPTION = "EMPTY_DESCRIPTION"
    EMPTY_IMAGE_URL = "EMPTY_IMAGE_URL"
    EMPTY_PRICE = "EMPTY_PRICE"
    EMPTY_PRODUCT_URL = "EMPTY_PRODUCT_URL"
    EMPTY_SELLER_DESCRIPTION = "EMPTY_SELLER_DESCRIPTION"
    EMPTY_TITLE = "EMPTY_TITLE"
    EXTERNAL_MERCHANT_ID_MISMATCH = "EXTERNAL_MERCHANT_ID_MISMATCH"
    GENERIC_INVALID_FIELD = "GENERIC_INVALID_FIELD"
    GROUPS_DISABLED_BY_USER = "GROUPS_DISABLED_BY_USER"
    HIDDEN_UNTIL_PRODUCT_LAUNCH = "HIDDEN_UNTIL_PRODUCT_LAUNCH"
    ILLEGAL_PRODUCT_CATEGORY = "ILLEGAL_PRODUCT_CATEGORY"
    IMAGE_FETCH_FAILED = "IMAGE_FETCH_FAILED"
    IMAGE_FETCH_FAILED_BAD_GATEWAY = "IMAGE_FETCH_FAILED_BAD_GATEWAY"
    IMAGE_FETCH_FAILED_FILE_SIZE_EXCEEDED = "IMAGE_FETCH_FAILED_FILE_SIZE_EXCEEDED"
    IMAGE_FETCH_FAILED_FORBIDDEN = "IMAGE_FETCH_FAILED_FORBIDDEN"
    IMAGE_FETCH_FAILED_LINK_BROKEN = "IMAGE_FETCH_FAILED_LINK_BROKEN"
    IMAGE_FETCH_FAILED_TIMED_OUT = "IMAGE_FETCH_FAILED_TIMED_OUT"
    IMAGE_RESOLUTION_LOW = "IMAGE_RESOLUTION_LOW"
    INACTIVE_SHOPIFY_PRODUCT = "INACTIVE_SHOPIFY_PRODUCT"
    INVALID_COMMERCE_TAX_CATEGORY = "INVALID_COMMERCE_TAX_CATEGORY"
    INVALID_CONSOLIDATED_LOCALITY_INFORMATION = "INVALID_CONSOLIDATED_LOCALITY_INFORMATION"
    INVALID_CONTENT_ID = "INVALID_CONTENT_ID"
    INVALID_DEALER_COMMUNICATION_PARAMETERS = "INVALID_DEALER_COMMUNICATION_PARAMETERS"
    INVALID_DMA_CODES = "INVALID_DMA_CODES"
    INVALID_FB_PAGE_ID = "INVALID_FB_PAGE_ID"
    INVALID_IMAGES = "INVALID_IMAGES"
    INVALID_MONETIZER_RETURN_POLICY = "INVALID_MONETIZER_RETURN_POLICY"
    INVALID_OFFER_DISCLAIMER_URL = "INVALID_OFFER_DISCLAIMER_URL"
    INVALID_OFFER_END_DATE = "INVALID_OFFER_END_DATE"
    INVALID_PRE_ORDER_PARAMS = "INVALID_PRE_ORDER_PARAMS"
    INVALID_RANGE_FOR_AREA_SIZE = "INVALID_RANGE_FOR_AREA_SIZE"
    INVALID_RANGE_FOR_BUILT_UP_AREA_SIZE = "INVALID_RANGE_FOR_BUILT_UP_AREA_SIZE"
    INVALID_RANGE_FOR_NUM_OF_BATHS = "INVALID_RANGE_FOR_NUM_OF_BATHS"
    INVALID_RANGE_FOR_NUM_OF_BEDS = "INVALID_RANGE_FOR_NUM_OF_BEDS"
    INVALID_RANGE_FOR_NUM_OF_ROOMS = "INVALID_RANGE_FOR_NUM_OF_ROOMS"
    INVALID_RANGE_FOR_PARKING_SPACES = "INVALID_RANGE_FOR_PARKING_SPACES"
    INVALID_SHELTER_PAGE_ID = "INVALID_SHELTER_PAGE_ID"
    INVALID_SHIPPING_PROFILE_PARAMS = "INVALID_SHIPPING_PROFILE_PARAMS"
    INVALID_SUBSCRIPTION_DISABLE_PARAMS = "INVALID_SUBSCRIPTION_DISABLE_PARAMS"
    INVALID_SUBSCRIPTION_ENABLE_PARAMS = "INVALID_SUBSCRIPTION_ENABLE_PARAMS"
    INVALID_SUBSCRIPTION_PARAMS = "INVALID_SUBSCRIPTION_PARAMS"
    INVALID_TAX_EXTENSION_STATE = "INVALID_TAX_EXTENSION_STATE"
    INVALID_VEHICLE_STATE = "INVALID_VEHICLE_STATE"
    INVALID_VIRTUAL_TOUR_URL_DOMAIN = "INVALID_VIRTUAL_TOUR_URL_DOMAIN"
    INVENTORY_ZERO_AVAILABILITY_IN_STOCK = "INVENTORY_ZERO_AVAILABILITY_IN_STOCK"
    IN_ANOTHER_PRODUCT_LAUNCH = "IN_ANOTHER_PRODUCT_LAUNCH"
    ITEM_GROUP_NOT_SPECIFIED = "ITEM_GROUP_NOT_SPECIFIED"
    ITEM_NOT_SHIPPABLE_FOR_SCA_SHOP = "ITEM_NOT_SHIPPABLE_FOR_SCA_SHOP"
    ITEM_OVERRIDE_EMPTY_AVAILABILITY = "ITEM_OVERRIDE_EMPTY_AVAILABILITY"
    ITEM_OVERRIDE_EMPTY_PRICE = "ITEM_OVERRIDE_EMPTY_PRICE"
    ITEM_OVERRIDE_NOT_VISIBLE = "ITEM_OVERRIDE_NOT_VISIBLE"
    ITEM_PRICE_NOT_POSITIVE = "ITEM_PRICE_NOT_POSITIVE"
    ITEM_STALE_OUT_OF_STOCK = "ITEM_STALE_OUT_OF_STOCK"
    MARKETPLACE_DISABLED_BY_USER = "MARKETPLACE_DISABLED_BY_USER"
    MARKETPLACE_PARTNER_AUCTION_NO_BID_CLOSE_TIME = "MARKETPLACE_PARTNER_AUCTION_NO_BID_CLOSE_TIME"
    MARKETPLACE_PARTNER_CURRENCY_NOT_VALID = "MARKETPLACE_PARTNER_CURRENCY_NOT_VALID"
    MARKETPLACE_PARTNER_LISTING_COUNTRY_NOT_MATCH_CATALOG = (
        "MARKETPLACE_PARTNER_LISTING_COUNTRY_NOT_MATCH_CATALOG"
    )
    MARKETPLACE_PARTNER_LISTING_LIMIT_EXCEEDED = "MARKETPLACE_PARTNER_LISTING_LIMIT_EXCEEDED"
    MARKETPLACE_PARTNER_MISSING_LATLONG = "MARKETPLACE_PARTNER_MISSING_LATLONG"
    MARKETPLACE_PARTNER_MISSING_SHIPPING_COST = "MARKETPLACE_PARTNER_MISSING_SHIPPING_COST"
    MARKETPLACE_PARTNER_NOT_LOCAL_ITEM = "MARKETPLACE_PARTNER_NOT_LOCAL_ITEM"
    MARKETPLACE_PARTNER_NOT_SHIPPED_ITEM = "MARKETPLACE_PARTNER_NOT_SHIPPED_ITEM"
    MARKETPLACE_PARTNER_POLICY_VIOLATION = "MARKETPLACE_PARTNER_POLICY_VIOLATION"
    MARKETPLACE_PARTNER_RULE_LISTING_LIMIT_EXCEEDED = (
        "MARKETPLACE_PARTNER_RULE_LISTING_LIMIT_EXCEEDED"
    )
    MARKETPLACE_PARTNER_SELLER_BANNED = "MARKETPLACE_PARTNER_SELLER_BANNED"
    MARKETPLACE_PARTNER_SELLER_NOT_VALID = "MARKETPLACE_PARTNER_SELLER_NOT_VALID"
    MINI_SHOPS_DISABLED_BY_USER = "MINI_SHOPS_DISABLED_BY_USER"
    MISSING_CHECKOUT = "MISSING_CHECKOUT"
    MISSING_CHECKOUT_CURRENCY = "MISSING_CHECKOUT_CURRENCY"
    MISSING_COLOR = "MISSING_COLOR"
    MISSING_COUNTRY_OVERRIDE_IN_SHIPPING_PROFILE = "MISSING_COUNTRY_OVERRIDE_IN_SHIPPING_PROFILE"
    MISSING_EVENT = "MISSING_EVENT"
    MISSING_INDIA_COMPLIANCE_FIELDS = "MISSING_INDIA_COMPLIANCE_FIELDS"
    MISSING_SHIPPING_PROFILE = "MISSING_SHIPPING_PROFILE"
    MISSING_SIZE = "MISSING_SIZE"
    MISSING_TAX_CATEGORY = "MISSING_TAX_CATEGORY"
    NEGATIVE_COMMUNITY_FEEDBACK = "NEGATIVE_COMMUNITY_FEEDBACK"
    NEGATIVE_PRICE = "NEGATIVE_PRICE"
    NOT_ENOUGH_IMAGES = "NOT_ENOUGH_IMAGES"
    NOT_ENOUGH_UNIQUE_PRODUCTS = "NOT_ENOUGH_UNIQUE_PRODUCTS"
    NO_CONTENT_ID = "NO_CONTENT_ID"
    OVERLAY_DISCLAIMER_EXCEEDED_MAX_LENGTH = "OVERLAY_DISCLAIMER_EXCEEDED_MAX_LENGTH"
    PART_OF_PRODUCT_LAUNCH = "PART_OF_PRODUCT_LAUNCH"
    PASSING_MULTIPLE_CONTENT_IDS = "PASSING_MULTIPLE_CONTENT_IDS"
    PRODUCT_DOMINANT_CURRENCY_MISMATCH = "PRODUCT_DOMINANT_CURRENCY_MISMATCH"
    PRODUCT_EXPIRED = "PRODUCT_EXPIRED"
    PRODUCT_ITEM_HIDDEN_FROM_ALL_SHOPS = "PRODUCT_ITEM_HIDDEN_FROM_ALL_SHOPS"
    PRODUCT_ITEM_INVALID_PARTNER_TOKENS = "PRODUCT_ITEM_INVALID_PARTNER_TOKENS"
    PRODUCT_ITEM_NOT_INCLUDED_IN_ANY_SHOP = "PRODUCT_ITEM_NOT_INCLUDED_IN_ANY_SHOP"
    PRODUCT_ITEM_NOT_VISIBLE = "PRODUCT_ITEM_NOT_VISIBLE"
    PRODUCT_NOT_APPROVED = "PRODUCT_NOT_APPROVED"
    PRODUCT_NOT_DOMINANT_CURRENCY = "PRODUCT_NOT_DOMINANT_CURRENCY"
    PRODUCT_OUT_OF_STOCK = "PRODUCT_OUT_OF_STOCK"
    PRODUCT_URL_EQUALS_DOMAIN = "PRODUCT_URL_EQUALS_DOMAIN"
    PROPERTY_PRICE_CURRENCY_NOT_SUPPORTED = "PROPERTY_PRICE_CURRENCY_NOT_SUPPORTED"
    PROPERTY_PRICE_TOO_HIGH = "PROPERTY_PRICE_TOO_HIGH"
    PROPERTY_PRICE_TOO_LOW = "PROPERTY_PRICE_TOO_LOW"
    PROPERTY_UNIT_PRICE_CURRENCY_MISMATCH_ITEM_PRICE_CURRENCY = (
        "PROPERTY_UNIT_PRICE_CURRENCY_MISMATCH_ITEM_PRICE_CURRENCY"
    )
    PROPERTY_VALUE_CONTAINS_HTML_TAGS = "PROPERTY_VALUE_CONTAINS_HTML_TAGS"
    PROPERTY_VALUE_DESCRIPTION_CONTAINS_OFF_PLATFORM_LINK = (
        "PROPERTY_VALUE_DESCRIPTION_CONTAINS_OFF_PLATFORM_LINK"
    )
    PROPERTY_VALUE_FORMAT = "PROPERTY_VALUE_FORMAT"
    PROPERTY_VALUE_MISSING = "PROPERTY_VALUE_MISSING"
    PROPERTY_VALUE_MISSING_WARNING = "PROPERTY_VALUE_MISSING_WARNING"
    PROPERTY_VALUE_NON_POSITIVE = "PROPERTY_VALUE_NON_POSITIVE"
    PROPERTY_VALUE_STRING_EXCEEDS_LENGTH = "PROPERTY_VALUE_STRING_EXCEEDS_LENGTH"
    PROPERTY_VALUE_STRING_TOO_SHORT = "PROPERTY_VALUE_STRING_TOO_SHORT"
    PROPERTY_VALUE_UPPERCASE = "PROPERTY_VALUE_UPPERCASE"
    PROPERTY_VALUE_UPPERCASE_WARNING = "PROPERTY_VALUE_UPPERCASE_WARNING"
    PURCHASE_RATE_BELOW_ADDTOCART = "PURCHASE_RATE_BELOW_ADDTOCART"
    PURCHASE_RATE_BELOW_VIEWCONTENT = "PURCHASE_RATE_BELOW_VIEWCONTENT"
    QUALITY_DUPLICATED_DESCRIPTION = "QUALITY_DUPLICATED_DESCRIPTION"
    QUALITY_ITEM_LINK_BROKEN = "QUALITY_ITEM_LINK_BROKEN"
    QUALITY_ITEM_LINK_REDIRECTING = "QUALITY_ITEM_LINK_REDIRECTING"
    RETAILER_ID_NOT_PROVIDED = "RETAILER_ID_NOT_PROVIDED"
    SHOPIFY_INVALID_RETAILER_ID = "SHOPIFY_INVALID_RETAILER_ID"
    SHOPIFY_ITEM_MISSING_SHIPPING_PROFILE = "SHOPIFY_ITEM_MISSING_SHIPPING_PROFILE"
    SHOPS_POLICY_VIOLATION = "SHOPS_POLICY_VIOLATION"
    SUBSCRIPTION_INFO_NOT_ENABLED_FOR_FEED = "SUBSCRIPTION_INFO_NOT_ENABLED_FOR_FEED"
    TAX_CATEGORY_NOT_SUPPORTED_IN_UK = "TAX_CATEGORY_NOT_SUPPORTED_IN_UK"
    UNIQUE_PRODUCT_IDENTIFIER_MISSING = "UNIQUE_PRODUCT_IDENTIFIER_MISSING"
    UNMATCHED_EVENTS = "UNMATCHED_EVENTS"
    UNSUPPORTED_PRODUCT_CATEGORY = "UNSUPPORTED_PRODUCT_CATEGORY"
    VARIANT_ATTRIBUTE_ISSUE = "VARIANT_ATTRIBUTE_ISSUE"
    VIDEO_FETCH_FAILED = "VIDEO_FETCH_FAILED"
    VIDEO_FETCH_FAILED_BAD_GATEWAY = "VIDEO_FETCH_FAILED_BAD_GATEWAY"
    VIDEO_FETCH_FAILED_FILE_SIZE_EXCEEDED = "VIDEO_FETCH_FAILED_FILE_SIZE_EXCEEDED"
    VIDEO_FETCH_FAILED_FORBIDDEN = "VIDEO_FETCH_FAILED_FORBIDDEN"
    VIDEO_FETCH_FAILED_LINK_BROKEN = "VIDEO_FETCH_FAILED_LINK_BROKEN"
    VIDEO_FETCH_FAILED_TIMED_OUT = "VIDEO_FETCH_FAILED_TIMED_OUT"
    VIDEO_NOT_DOWNLOADABLE = "VIDEO_NOT_DOWNLOADABLE"
    WHATSAPP_DISABLED_BY_USER = "WHATSAPP_DISABLED_BY_USER"
    WHATSAPP_MARKETING_MESSAGE_DISABLED_BY_USER = "WHATSAPP_MARKETING_MESSAGE_DISABLED_BY_USER"
    WHATSAPP_MARKETING_MESSAGE_POLICY_VIOLATION = "WHATSAPP_MARKETING_MESSAGE_POLICY_VIOLATION"
    WHATSAPP_POLICY_VIOLATION = "WHATSAPP_POLICY_VIOLATION"


class productcatalogproducts_gender_enum_param(str, Enum):
    """productcatalogproducts_gender_enum_param enum values."""

    female = "female"
    male = "male"
    unisex = "unisex"


class productcatalogproducts_marked_for_product_launch_enum_param(str, Enum):
    """productcatalogproducts_marked_for_product_launch_enum_param enum values."""

    default = "default"
    marked = "marked"
    not_marked = "not_marked"


class productcatalogproducts_origin_country_enum_param(str, Enum):
    """productcatalogproducts_origin_country_enum_param enum values."""

    AD = "AD"
    AE = "AE"
    AF = "AF"
    AG = "AG"
    AI = "AI"
    AL = "AL"
    AM = "AM"
    AN = "AN"
    AO = "AO"
    AQ = "AQ"
    AR = "AR"
    AS = "AS"
    AT = "AT"
    AU = "AU"
    AW = "AW"
    AX = "AX"
    AZ = "AZ"
    BA = "BA"
    BB = "BB"
    BD = "BD"
    BE = "BE"
    BF = "BF"
    BG = "BG"
    BH = "BH"
    BI = "BI"
    BJ = "BJ"
    BL = "BL"
    BM = "BM"
    BN = "BN"
    BO = "BO"
    BQ = "BQ"
    BR = "BR"
    BS = "BS"
    BT = "BT"
    BV = "BV"
    BW = "BW"
    BY = "BY"
    BZ = "BZ"
    CA = "CA"
    CC = "CC"
    CD = "CD"
    CF = "CF"
    CG = "CG"
    CH = "CH"
    CI = "CI"
    CK = "CK"
    CL = "CL"
    CM = "CM"
    CN = "CN"
    CO = "CO"
    CR = "CR"
    CU = "CU"
    CV = "CV"
    CW = "CW"
    CX = "CX"
    CY = "CY"
    CZ = "CZ"
    DE = "DE"
    DJ = "DJ"
    DK = "DK"
    DM = "DM"
    DO = "DO"
    DZ = "DZ"
    EC = "EC"
    EE = "EE"
    EG = "EG"
    EH = "EH"
    ER = "ER"
    ES = "ES"
    ET = "ET"
    FI = "FI"
    FJ = "FJ"
    FK = "FK"
    FM = "FM"
    FO = "FO"
    FR = "FR"
    GA = "GA"
    GB = "GB"
    GD = "GD"
    GE = "GE"
    GF = "GF"
    GG = "GG"
    GH = "GH"
    GI = "GI"
    GL = "GL"
    GM = "GM"
    GN = "GN"
    GP = "GP"
    GQ = "GQ"
    GR = "GR"
    GS = "GS"
    GT = "GT"
    GU = "GU"
    GW = "GW"
    GY = "GY"
    HK = "HK"
    HM = "HM"
    HN = "HN"
    HR = "HR"
    HT = "HT"
    HU = "HU"
    ID = "ID"
    IE = "IE"
    IL = "IL"
    IM = "IM"
    IN = "IN"
    IO = "IO"
    IQ = "IQ"
    IR = "IR"
    IS = "IS"
    IT = "IT"
    JE = "JE"
    JM = "JM"
    JO = "JO"
    JP = "JP"
    KE = "KE"
    KG = "KG"
    KH = "KH"
    KI = "KI"
    KM = "KM"
    KN = "KN"
    KP = "KP"
    KR = "KR"
    KW = "KW"
    KY = "KY"
    KZ = "KZ"
    LA = "LA"
    LB = "LB"
    LC = "LC"
    LI = "LI"
    LK = "LK"
    LR = "LR"
    LS = "LS"
    LT = "LT"
    LU = "LU"
    LV = "LV"
    LY = "LY"
    MA = "MA"
    MC = "MC"
    MD = "MD"
    ME = "ME"
    MF = "MF"
    MG = "MG"
    MH = "MH"
    MK = "MK"
    ML = "ML"
    MM = "MM"
    MN = "MN"
    MO = "MO"
    MP = "MP"
    MQ = "MQ"
    MR = "MR"
    MS = "MS"
    MT = "MT"
    MU = "MU"
    MV = "MV"
    MW = "MW"
    MX = "MX"
    MY = "MY"
    MZ = "MZ"
    NA = "NA"
    NC = "NC"
    NE = "NE"
    NF = "NF"
    NG = "NG"
    NI = "NI"
    NL = "NL"
    NO = "NO"
    NP = "NP"
    NR = "NR"
    NU = "NU"
    NZ = "NZ"
    OM = "OM"
    PA = "PA"
    PE = "PE"
    PF = "PF"
    PG = "PG"
    PH = "PH"
    PK = "PK"
    PL = "PL"
    PM = "PM"
    PN = "PN"
    PR = "PR"
    PS = "PS"
    PT = "PT"
    PW = "PW"
    PY = "PY"
    QA = "QA"
    RE = "RE"
    RO = "RO"
    RS = "RS"
    RU = "RU"
    RW = "RW"
    SA = "SA"
    SB = "SB"
    SC = "SC"
    SD = "SD"
    SE = "SE"
    SG = "SG"
    SH = "SH"
    SI = "SI"
    SJ = "SJ"
    SK = "SK"
    SL = "SL"
    SM = "SM"
    SN = "SN"
    SO = "SO"
    SR = "SR"
    SS = "SS"
    ST = "ST"
    SV = "SV"
    SX = "SX"
    SY = "SY"
    SZ = "SZ"
    TC = "TC"
    TD = "TD"
    TF = "TF"
    TG = "TG"
    TH = "TH"
    TJ = "TJ"
    TK = "TK"
    TL = "TL"
    TM = "TM"
    TN = "TN"
    TO = "TO"
    TR = "TR"
    TT = "TT"
    TV = "TV"
    TW = "TW"
    TZ = "TZ"
    UA = "UA"
    UG = "UG"
    UM = "UM"
    US = "US"
    UY = "UY"
    UZ = "UZ"
    VA = "VA"
    VC = "VC"
    VE = "VE"
    VG = "VG"
    VI = "VI"
    VN = "VN"
    VU = "VU"
    WF = "WF"
    WS = "WS"
    XK = "XK"
    YE = "YE"
    YT = "YT"
    ZA = "ZA"
    ZM = "ZM"
    ZW = "ZW"


class productcatalogproducts_visibility_enum_param(str, Enum):
    """productcatalogproducts_visibility_enum_param enum values."""

    published = "published"
    staging = "staging"


class productcatalogproducts_wa_compliance_category_enum_param(str, Enum):
    """productcatalogproducts_wa_compliance_category_enum_param enum values."""

    COUNTRY_ORIGIN_EXEMPT = "COUNTRY_ORIGIN_EXEMPT"
    DEFAULT = "DEFAULT"


class productcatalogvehicles_availability_enum_param(str, Enum):
    """productcatalogvehicles_availability_enum_param enum values."""

    AVAILABLE = "AVAILABLE"
    NOT_AVAILABLE = "NOT_AVAILABLE"
    PENDING = "PENDING"
    UNKNOWN = "UNKNOWN"


class productcatalogvehicles_body_style_enum_param(str, Enum):
    """productcatalogvehicles_body_style_enum_param enum values."""

    CONVERTIBLE = "CONVERTIBLE"
    COUPE = "COUPE"
    CROSSOVER = "CROSSOVER"
    ESTATE = "ESTATE"
    GRANDTOURER = "GRANDTOURER"
    HATCHBACK = "HATCHBACK"
    MINIBUS = "MINIBUS"
    MINIVAN = "MINIVAN"
    MPV = "MPV"
    NONE = "NONE"
    OTHER = "OTHER"
    PICKUP = "PICKUP"
    ROADSTER = "ROADSTER"
    SALOON = "SALOON"
    SEDAN = "SEDAN"
    SMALL_CAR = "SMALL_CAR"
    SPORTSCAR = "SPORTSCAR"
    SUPERCAR = "SUPERCAR"
    SUPERMINI = "SUPERMINI"
    SUV = "SUV"
    TRUCK = "TRUCK"
    VAN = "VAN"
    WAGON = "WAGON"


class productcatalogvehicles_condition_enum_param(str, Enum):
    """productcatalogvehicles_condition_enum_param enum values."""

    EXCELLENT = "EXCELLENT"
    FAIR = "FAIR"
    GOOD = "GOOD"
    NONE = "NONE"
    OTHER = "OTHER"
    POOR = "POOR"
    VERY_GOOD = "VERY_GOOD"


class productcatalogvehicles_drivetrain_enum_param(str, Enum):
    """productcatalogvehicles_drivetrain_enum_param enum values."""

    AWD = "AWD"
    FOUR_WD = "FOUR_WD"
    FWD = "FWD"
    NONE = "NONE"
    OTHER = "OTHER"
    RWD = "RWD"
    TWO_WD = "TWO_WD"


class productcatalogvehicles_fuel_type_enum_param(str, Enum):
    """productcatalogvehicles_fuel_type_enum_param enum values."""

    DIESEL = "DIESEL"
    ELECTRIC = "ELECTRIC"
    FLEX = "FLEX"
    GASOLINE = "GASOLINE"
    HYBRID = "HYBRID"
    NONE = "NONE"
    OTHER = "OTHER"
    PETROL = "PETROL"
    PLUGIN_HYBRID = "PLUGIN_HYBRID"


class productcatalogvehicles_state_of_vehicle_enum_param(str, Enum):
    """productcatalogvehicles_state_of_vehicle_enum_param enum values."""

    CPO = "CPO"
    NEW = "NEW"
    USED = "USED"


class productcatalogvehicles_transmission_enum_param(str, Enum):
    """productcatalogvehicles_transmission_enum_param enum values."""

    AUTOMATIC = "AUTOMATIC"
    MANUAL = "MANUAL"
    NONE = "NONE"
    OTHER = "OTHER"


class productcatalogvehicles_vehicle_type_enum_param(str, Enum):
    """productcatalogvehicles_vehicle_type_enum_param enum values."""

    BOAT = "BOAT"
    CAR_TRUCK = "CAR_TRUCK"
    COMMERCIAL = "COMMERCIAL"
    MOTORCYCLE = "MOTORCYCLE"
    OTHER = "OTHER"
    POWERSPORT = "POWERSPORT"
    RV_CAMPER = "RV_CAMPER"
    TRAILER = "TRAILER"


class productfeed_delimiter(str, Enum):
    """productfeed_delimiter enum values."""

    AUTODETECT = "AUTODETECT"
    BAR = "BAR"
    COMMA = "COMMA"
    SEMICOLON = "SEMICOLON"
    TAB = "TAB"
    TILDE = "TILDE"


class productfeed_encoding(str, Enum):
    """productfeed_encoding enum values."""

    AUTODETECT = "AUTODETECT"
    LATIN1 = "LATIN1"
    UTF16BE = "UTF16BE"
    UTF16LE = "UTF16LE"
    UTF32BE = "UTF32BE"
    UTF32LE = "UTF32LE"
    UTF8 = "UTF8"


class productfeed_quoted_fields_mode(str, Enum):
    """productfeed_quoted_fields_mode enum values."""

    autodetect = "autodetect"
    off = "off"
    on = "on"


class productfeedproducts_error_priority_enum_param(str, Enum):
    """productfeedproducts_error_priority_enum_param enum values."""

    HIGH = "HIGH"
    LOW = "LOW"
    MEDIUM = "MEDIUM"


class productfeedproducts_error_type_enum_param(str, Enum):
    """productfeedproducts_error_type_enum_param enum values."""

    ADDRESS_BLOCKLISTED_IN_MARKET = "ADDRESS_BLOCKLISTED_IN_MARKET"
    AGGREGATED_LOCALIZATION_ISSUES = "AGGREGATED_LOCALIZATION_ISSUES"
    APP_HAS_NO_AEM_SETUP = "APP_HAS_NO_AEM_SETUP"
    AR_DELETED_DUE_TO_UPDATE = "AR_DELETED_DUE_TO_UPDATE"
    AR_POLICY_VIOLATED = "AR_POLICY_VIOLATED"
    AVAILABLE = "AVAILABLE"
    BAD_QUALITY_IMAGE = "BAD_QUALITY_IMAGE"
    BIG_CATALOG_WITH_ALL_ITEMS_IN_STOCK = "BIG_CATALOG_WITH_ALL_ITEMS_IN_STOCK"
    BIZ_MSG_AI_AGENT_DISABLED_BY_USER = "BIZ_MSG_AI_AGENT_DISABLED_BY_USER"
    BIZ_MSG_GEN_AI_POLICY_VIOLATED = "BIZ_MSG_GEN_AI_POLICY_VIOLATED"
    CANNOT_EDIT_SUBSCRIPTION_PRODUCTS = "CANNOT_EDIT_SUBSCRIPTION_PRODUCTS"
    CATALOG_NOT_CONNECTED_TO_EVENT_SOURCE = "CATALOG_NOT_CONNECTED_TO_EVENT_SOURCE"
    CHECKOUT_DISABLED_BY_USER = "CHECKOUT_DISABLED_BY_USER"
    COMMERCE_ACCOUNT_LEGAL_ADDRESS_INVALID = "COMMERCE_ACCOUNT_LEGAL_ADDRESS_INVALID"
    COMMERCE_ACCOUNT_NOT_LEGALLY_COMPLIANT = "COMMERCE_ACCOUNT_NOT_LEGALLY_COMPLIANT"
    CRAWLED_AVAILABILITY_MISMATCH = "CRAWLED_AVAILABILITY_MISMATCH"
    DA_DISABLED_BY_USER = "DA_DISABLED_BY_USER"
    DA_POLICY_UNFIT_FOR_AUDIENCE = "DA_POLICY_UNFIT_FOR_AUDIENCE"
    DA_POLICY_VIOLATION = "DA_POLICY_VIOLATION"
    DELETED_ITEM = "DELETED_ITEM"
    DIGITAL_GOODS_NOT_AVAILABLE_FOR_CHECKOUT = "DIGITAL_GOODS_NOT_AVAILABLE_FOR_CHECKOUT"
    DUPLICATE_IMAGES = "DUPLICATE_IMAGES"
    DUPLICATE_TITLE_AND_DESCRIPTION = "DUPLICATE_TITLE_AND_DESCRIPTION"
    EMPTY_AVAILABILITY = "EMPTY_AVAILABILITY"
    EMPTY_CONDITION = "EMPTY_CONDITION"
    EMPTY_DESCRIPTION = "EMPTY_DESCRIPTION"
    EMPTY_IMAGE_URL = "EMPTY_IMAGE_URL"
    EMPTY_PRICE = "EMPTY_PRICE"
    EMPTY_PRODUCT_URL = "EMPTY_PRODUCT_URL"
    EMPTY_SELLER_DESCRIPTION = "EMPTY_SELLER_DESCRIPTION"
    EMPTY_TITLE = "EMPTY_TITLE"
    EXTERNAL_MERCHANT_ID_MISMATCH = "EXTERNAL_MERCHANT_ID_MISMATCH"
    GENERIC_INVALID_FIELD = "GENERIC_INVALID_FIELD"
    GROUPS_DISABLED_BY_USER = "GROUPS_DISABLED_BY_USER"
    HIDDEN_UNTIL_PRODUCT_LAUNCH = "HIDDEN_UNTIL_PRODUCT_LAUNCH"
    ILLEGAL_PRODUCT_CATEGORY = "ILLEGAL_PRODUCT_CATEGORY"
    IMAGE_FETCH_FAILED = "IMAGE_FETCH_FAILED"
    IMAGE_FETCH_FAILED_BAD_GATEWAY = "IMAGE_FETCH_FAILED_BAD_GATEWAY"
    IMAGE_FETCH_FAILED_FILE_SIZE_EXCEEDED = "IMAGE_FETCH_FAILED_FILE_SIZE_EXCEEDED"
    IMAGE_FETCH_FAILED_FORBIDDEN = "IMAGE_FETCH_FAILED_FORBIDDEN"
    IMAGE_FETCH_FAILED_LINK_BROKEN = "IMAGE_FETCH_FAILED_LINK_BROKEN"
    IMAGE_FETCH_FAILED_TIMED_OUT = "IMAGE_FETCH_FAILED_TIMED_OUT"
    IMAGE_RESOLUTION_LOW = "IMAGE_RESOLUTION_LOW"
    INACTIVE_SHOPIFY_PRODUCT = "INACTIVE_SHOPIFY_PRODUCT"
    INVALID_COMMERCE_TAX_CATEGORY = "INVALID_COMMERCE_TAX_CATEGORY"
    INVALID_CONSOLIDATED_LOCALITY_INFORMATION = "INVALID_CONSOLIDATED_LOCALITY_INFORMATION"
    INVALID_CONTENT_ID = "INVALID_CONTENT_ID"
    INVALID_DEALER_COMMUNICATION_PARAMETERS = "INVALID_DEALER_COMMUNICATION_PARAMETERS"
    INVALID_DMA_CODES = "INVALID_DMA_CODES"
    INVALID_FB_PAGE_ID = "INVALID_FB_PAGE_ID"
    INVALID_IMAGES = "INVALID_IMAGES"
    INVALID_MONETIZER_RETURN_POLICY = "INVALID_MONETIZER_RETURN_POLICY"
    INVALID_OFFER_DISCLAIMER_URL = "INVALID_OFFER_DISCLAIMER_URL"
    INVALID_OFFER_END_DATE = "INVALID_OFFER_END_DATE"
    INVALID_PRE_ORDER_PARAMS = "INVALID_PRE_ORDER_PARAMS"
    INVALID_RANGE_FOR_AREA_SIZE = "INVALID_RANGE_FOR_AREA_SIZE"
    INVALID_RANGE_FOR_BUILT_UP_AREA_SIZE = "INVALID_RANGE_FOR_BUILT_UP_AREA_SIZE"
    INVALID_RANGE_FOR_NUM_OF_BATHS = "INVALID_RANGE_FOR_NUM_OF_BATHS"
    INVALID_RANGE_FOR_NUM_OF_BEDS = "INVALID_RANGE_FOR_NUM_OF_BEDS"
    INVALID_RANGE_FOR_NUM_OF_ROOMS = "INVALID_RANGE_FOR_NUM_OF_ROOMS"
    INVALID_RANGE_FOR_PARKING_SPACES = "INVALID_RANGE_FOR_PARKING_SPACES"
    INVALID_SHELTER_PAGE_ID = "INVALID_SHELTER_PAGE_ID"
    INVALID_SHIPPING_PROFILE_PARAMS = "INVALID_SHIPPING_PROFILE_PARAMS"
    INVALID_SUBSCRIPTION_DISABLE_PARAMS = "INVALID_SUBSCRIPTION_DISABLE_PARAMS"
    INVALID_SUBSCRIPTION_ENABLE_PARAMS = "INVALID_SUBSCRIPTION_ENABLE_PARAMS"
    INVALID_SUBSCRIPTION_PARAMS = "INVALID_SUBSCRIPTION_PARAMS"
    INVALID_TAX_EXTENSION_STATE = "INVALID_TAX_EXTENSION_STATE"
    INVALID_VEHICLE_STATE = "INVALID_VEHICLE_STATE"
    INVALID_VIRTUAL_TOUR_URL_DOMAIN = "INVALID_VIRTUAL_TOUR_URL_DOMAIN"
    INVENTORY_ZERO_AVAILABILITY_IN_STOCK = "INVENTORY_ZERO_AVAILABILITY_IN_STOCK"
    IN_ANOTHER_PRODUCT_LAUNCH = "IN_ANOTHER_PRODUCT_LAUNCH"
    ITEM_GROUP_NOT_SPECIFIED = "ITEM_GROUP_NOT_SPECIFIED"
    ITEM_NOT_SHIPPABLE_FOR_SCA_SHOP = "ITEM_NOT_SHIPPABLE_FOR_SCA_SHOP"
    ITEM_OVERRIDE_EMPTY_AVAILABILITY = "ITEM_OVERRIDE_EMPTY_AVAILABILITY"
    ITEM_OVERRIDE_EMPTY_PRICE = "ITEM_OVERRIDE_EMPTY_PRICE"
    ITEM_OVERRIDE_NOT_VISIBLE = "ITEM_OVERRIDE_NOT_VISIBLE"
    ITEM_PRICE_NOT_POSITIVE = "ITEM_PRICE_NOT_POSITIVE"
    ITEM_STALE_OUT_OF_STOCK = "ITEM_STALE_OUT_OF_STOCK"
    MARKETPLACE_DISABLED_BY_USER = "MARKETPLACE_DISABLED_BY_USER"
    MARKETPLACE_PARTNER_AUCTION_NO_BID_CLOSE_TIME = "MARKETPLACE_PARTNER_AUCTION_NO_BID_CLOSE_TIME"
    MARKETPLACE_PARTNER_CURRENCY_NOT_VALID = "MARKETPLACE_PARTNER_CURRENCY_NOT_VALID"
    MARKETPLACE_PARTNER_LISTING_COUNTRY_NOT_MATCH_CATALOG = (
        "MARKETPLACE_PARTNER_LISTING_COUNTRY_NOT_MATCH_CATALOG"
    )
    MARKETPLACE_PARTNER_LISTING_LIMIT_EXCEEDED = "MARKETPLACE_PARTNER_LISTING_LIMIT_EXCEEDED"
    MARKETPLACE_PARTNER_MISSING_LATLONG = "MARKETPLACE_PARTNER_MISSING_LATLONG"
    MARKETPLACE_PARTNER_MISSING_SHIPPING_COST = "MARKETPLACE_PARTNER_MISSING_SHIPPING_COST"
    MARKETPLACE_PARTNER_NOT_LOCAL_ITEM = "MARKETPLACE_PARTNER_NOT_LOCAL_ITEM"
    MARKETPLACE_PARTNER_NOT_SHIPPED_ITEM = "MARKETPLACE_PARTNER_NOT_SHIPPED_ITEM"
    MARKETPLACE_PARTNER_POLICY_VIOLATION = "MARKETPLACE_PARTNER_POLICY_VIOLATION"
    MARKETPLACE_PARTNER_RULE_LISTING_LIMIT_EXCEEDED = (
        "MARKETPLACE_PARTNER_RULE_LISTING_LIMIT_EXCEEDED"
    )
    MARKETPLACE_PARTNER_SELLER_BANNED = "MARKETPLACE_PARTNER_SELLER_BANNED"
    MARKETPLACE_PARTNER_SELLER_NOT_VALID = "MARKETPLACE_PARTNER_SELLER_NOT_VALID"
    MINI_SHOPS_DISABLED_BY_USER = "MINI_SHOPS_DISABLED_BY_USER"
    MISSING_CHECKOUT = "MISSING_CHECKOUT"
    MISSING_CHECKOUT_CURRENCY = "MISSING_CHECKOUT_CURRENCY"
    MISSING_COLOR = "MISSING_COLOR"
    MISSING_COUNTRY_OVERRIDE_IN_SHIPPING_PROFILE = "MISSING_COUNTRY_OVERRIDE_IN_SHIPPING_PROFILE"
    MISSING_EVENT = "MISSING_EVENT"
    MISSING_INDIA_COMPLIANCE_FIELDS = "MISSING_INDIA_COMPLIANCE_FIELDS"
    MISSING_SHIPPING_PROFILE = "MISSING_SHIPPING_PROFILE"
    MISSING_SIZE = "MISSING_SIZE"
    MISSING_TAX_CATEGORY = "MISSING_TAX_CATEGORY"
    NEGATIVE_COMMUNITY_FEEDBACK = "NEGATIVE_COMMUNITY_FEEDBACK"
    NEGATIVE_PRICE = "NEGATIVE_PRICE"
    NOT_ENOUGH_IMAGES = "NOT_ENOUGH_IMAGES"
    NOT_ENOUGH_UNIQUE_PRODUCTS = "NOT_ENOUGH_UNIQUE_PRODUCTS"
    NO_CONTENT_ID = "NO_CONTENT_ID"
    OVERLAY_DISCLAIMER_EXCEEDED_MAX_LENGTH = "OVERLAY_DISCLAIMER_EXCEEDED_MAX_LENGTH"
    PART_OF_PRODUCT_LAUNCH = "PART_OF_PRODUCT_LAUNCH"
    PASSING_MULTIPLE_CONTENT_IDS = "PASSING_MULTIPLE_CONTENT_IDS"
    PRODUCT_DOMINANT_CURRENCY_MISMATCH = "PRODUCT_DOMINANT_CURRENCY_MISMATCH"
    PRODUCT_EXPIRED = "PRODUCT_EXPIRED"
    PRODUCT_ITEM_HIDDEN_FROM_ALL_SHOPS = "PRODUCT_ITEM_HIDDEN_FROM_ALL_SHOPS"
    PRODUCT_ITEM_INVALID_PARTNER_TOKENS = "PRODUCT_ITEM_INVALID_PARTNER_TOKENS"
    PRODUCT_ITEM_NOT_INCLUDED_IN_ANY_SHOP = "PRODUCT_ITEM_NOT_INCLUDED_IN_ANY_SHOP"
    PRODUCT_ITEM_NOT_VISIBLE = "PRODUCT_ITEM_NOT_VISIBLE"
    PRODUCT_NOT_APPROVED = "PRODUCT_NOT_APPROVED"
    PRODUCT_NOT_DOMINANT_CURRENCY = "PRODUCT_NOT_DOMINANT_CURRENCY"
    PRODUCT_OUT_OF_STOCK = "PRODUCT_OUT_OF_STOCK"
    PRODUCT_URL_EQUALS_DOMAIN = "PRODUCT_URL_EQUALS_DOMAIN"
    PROPERTY_PRICE_CURRENCY_NOT_SUPPORTED = "PROPERTY_PRICE_CURRENCY_NOT_SUPPORTED"
    PROPERTY_PRICE_TOO_HIGH = "PROPERTY_PRICE_TOO_HIGH"
    PROPERTY_PRICE_TOO_LOW = "PROPERTY_PRICE_TOO_LOW"
    PROPERTY_UNIT_PRICE_CURRENCY_MISMATCH_ITEM_PRICE_CURRENCY = (
        "PROPERTY_UNIT_PRICE_CURRENCY_MISMATCH_ITEM_PRICE_CURRENCY"
    )
    PROPERTY_VALUE_CONTAINS_HTML_TAGS = "PROPERTY_VALUE_CONTAINS_HTML_TAGS"
    PROPERTY_VALUE_DESCRIPTION_CONTAINS_OFF_PLATFORM_LINK = (
        "PROPERTY_VALUE_DESCRIPTION_CONTAINS_OFF_PLATFORM_LINK"
    )
    PROPERTY_VALUE_FORMAT = "PROPERTY_VALUE_FORMAT"
    PROPERTY_VALUE_MISSING = "PROPERTY_VALUE_MISSING"
    PROPERTY_VALUE_MISSING_WARNING = "PROPERTY_VALUE_MISSING_WARNING"
    PROPERTY_VALUE_NON_POSITIVE = "PROPERTY_VALUE_NON_POSITIVE"
    PROPERTY_VALUE_STRING_EXCEEDS_LENGTH = "PROPERTY_VALUE_STRING_EXCEEDS_LENGTH"
    PROPERTY_VALUE_STRING_TOO_SHORT = "PROPERTY_VALUE_STRING_TOO_SHORT"
    PROPERTY_VALUE_UPPERCASE = "PROPERTY_VALUE_UPPERCASE"
    PROPERTY_VALUE_UPPERCASE_WARNING = "PROPERTY_VALUE_UPPERCASE_WARNING"
    PURCHASE_RATE_BELOW_ADDTOCART = "PURCHASE_RATE_BELOW_ADDTOCART"
    PURCHASE_RATE_BELOW_VIEWCONTENT = "PURCHASE_RATE_BELOW_VIEWCONTENT"
    QUALITY_DUPLICATED_DESCRIPTION = "QUALITY_DUPLICATED_DESCRIPTION"
    QUALITY_ITEM_LINK_BROKEN = "QUALITY_ITEM_LINK_BROKEN"
    QUALITY_ITEM_LINK_REDIRECTING = "QUALITY_ITEM_LINK_REDIRECTING"
    RETAILER_ID_NOT_PROVIDED = "RETAILER_ID_NOT_PROVIDED"
    SHOPIFY_INVALID_RETAILER_ID = "SHOPIFY_INVALID_RETAILER_ID"
    SHOPIFY_ITEM_MISSING_SHIPPING_PROFILE = "SHOPIFY_ITEM_MISSING_SHIPPING_PROFILE"
    SHOPS_POLICY_VIOLATION = "SHOPS_POLICY_VIOLATION"
    SUBSCRIPTION_INFO_NOT_ENABLED_FOR_FEED = "SUBSCRIPTION_INFO_NOT_ENABLED_FOR_FEED"
    TAX_CATEGORY_NOT_SUPPORTED_IN_UK = "TAX_CATEGORY_NOT_SUPPORTED_IN_UK"
    UNIQUE_PRODUCT_IDENTIFIER_MISSING = "UNIQUE_PRODUCT_IDENTIFIER_MISSING"
    UNMATCHED_EVENTS = "UNMATCHED_EVENTS"
    UNSUPPORTED_PRODUCT_CATEGORY = "UNSUPPORTED_PRODUCT_CATEGORY"
    VARIANT_ATTRIBUTE_ISSUE = "VARIANT_ATTRIBUTE_ISSUE"
    VIDEO_FETCH_FAILED = "VIDEO_FETCH_FAILED"
    VIDEO_FETCH_FAILED_BAD_GATEWAY = "VIDEO_FETCH_FAILED_BAD_GATEWAY"
    VIDEO_FETCH_FAILED_FILE_SIZE_EXCEEDED = "VIDEO_FETCH_FAILED_FILE_SIZE_EXCEEDED"
    VIDEO_FETCH_FAILED_FORBIDDEN = "VIDEO_FETCH_FAILED_FORBIDDEN"
    VIDEO_FETCH_FAILED_LINK_BROKEN = "VIDEO_FETCH_FAILED_LINK_BROKEN"
    VIDEO_FETCH_FAILED_TIMED_OUT = "VIDEO_FETCH_FAILED_TIMED_OUT"
    VIDEO_NOT_DOWNLOADABLE = "VIDEO_NOT_DOWNLOADABLE"
    WHATSAPP_DISABLED_BY_USER = "WHATSAPP_DISABLED_BY_USER"
    WHATSAPP_MARKETING_MESSAGE_DISABLED_BY_USER = "WHATSAPP_MARKETING_MESSAGE_DISABLED_BY_USER"
    WHATSAPP_MARKETING_MESSAGE_POLICY_VIOLATION = "WHATSAPP_MARKETING_MESSAGE_POLICY_VIOLATION"
    WHATSAPP_POLICY_VIOLATION = "WHATSAPP_POLICY_VIOLATION"


class productfeedrules_rule_type_enum_param(str, Enum):
    """productfeedrules_rule_type_enum_param enum values."""

    fallback_rule = "fallback_rule"
    letter_case_rule = "letter_case_rule"
    mapping_rule = "mapping_rule"
    regex_replace_rule = "regex_replace_rule"
    value_mapping_rule = "value_mapping_rule"


class productfeeduploaderrors_error_priority_enum_param(str, Enum):
    """productfeeduploaderrors_error_priority_enum_param enum values."""

    HIGH = "HIGH"
    LOW = "LOW"
    MEDIUM = "MEDIUM"


class productgroup_deletion_method(str, Enum):
    """productgroup_deletion_method enum values."""

    DELETE_ITEMS = "DELETE_ITEMS"
    ONLY_IF_EMPTY = "ONLY_IF_EMPTY"


class productgroupproducts_age_group_enum_param(str, Enum):
    """productgroupproducts_age_group_enum_param enum values."""

    adult = "adult"
    ALL_AGES = "all ages"
    infant = "infant"
    kids = "kids"
    newborn = "newborn"
    teen = "teen"
    toddler = "toddler"


class productgroupproducts_availability_enum_param(str, Enum):
    """productgroupproducts_availability_enum_param enum values."""

    AVAILABLE_FOR_ORDER = "available for order"
    discontinued = "discontinued"
    IN_STOCK = "in stock"
    mark_as_sold = "mark_as_sold"
    OUT_OF_STOCK = "out of stock"
    pending = "pending"
    preorder = "preorder"


class productgroupproducts_commerce_tax_category_enum_param(str, Enum):
    """productgroupproducts_commerce_tax_category_enum_param enum values."""

    FB_ANIMAL = "FB_ANIMAL"
    FB_ANIMAL_SUPP = "FB_ANIMAL_SUPP"
    FB_APRL = "FB_APRL"
    FB_APRL_ACCESSORIES = "FB_APRL_ACCESSORIES"
    FB_APRL_ATHL_UNIF = "FB_APRL_ATHL_UNIF"
    FB_APRL_CASES = "FB_APRL_CASES"
    FB_APRL_CLOTHING = "FB_APRL_CLOTHING"
    FB_APRL_COSTUME = "FB_APRL_COSTUME"
    FB_APRL_CSTM = "FB_APRL_CSTM"
    FB_APRL_FORMAL = "FB_APRL_FORMAL"
    FB_APRL_HANDBAG = "FB_APRL_HANDBAG"
    FB_APRL_JEWELRY = "FB_APRL_JEWELRY"
    FB_APRL_SHOE = "FB_APRL_SHOE"
    FB_APRL_SHOE_ACC = "FB_APRL_SHOE_ACC"
    FB_APRL_SWIM = "FB_APRL_SWIM"
    FB_APRL_SWIM_CHIL = "FB_APRL_SWIM_CHIL"
    FB_APRL_SWIM_CVR = "FB_APRL_SWIM_CVR"
    FB_ARTS = "FB_ARTS"
    FB_ARTS_HOBBY = "FB_ARTS_HOBBY"
    FB_ARTS_PARTY = "FB_ARTS_PARTY"
    FB_ARTS_PARTY_GIFT_CARD = "FB_ARTS_PARTY_GIFT_CARD"
    FB_ARTS_TICKET = "FB_ARTS_TICKET"
    FB_BABY = "FB_BABY"
    FB_BABY_BATH = "FB_BABY_BATH"
    FB_BABY_BLANKET = "FB_BABY_BLANKET"
    FB_BABY_DIAPER = "FB_BABY_DIAPER"
    FB_BABY_GIFT_SET = "FB_BABY_GIFT_SET"
    FB_BABY_HEALTH = "FB_BABY_HEALTH"
    FB_BABY_NURSING = "FB_BABY_NURSING"
    FB_BABY_POTTY_TRN = "FB_BABY_POTTY_TRN"
    FB_BABY_SAFE = "FB_BABY_SAFE"
    FB_BABY_TOYS = "FB_BABY_TOYS"
    FB_BABY_TRANSPORT = "FB_BABY_TRANSPORT"
    FB_BABY_TRANSPORT_ACC = "FB_BABY_TRANSPORT_ACC"
    FB_BAGS = "FB_BAGS"
    FB_BAGS_BKPK = "FB_BAGS_BKPK"
    FB_BAGS_BOXES = "FB_BAGS_BOXES"
    FB_BAGS_BRFCS = "FB_BAGS_BRFCS"
    FB_BAGS_CSMT_BAG = "FB_BAGS_CSMT_BAG"
    FB_BAGS_DFFL = "FB_BAGS_DFFL"
    FB_BAGS_DIPR = "FB_BAGS_DIPR"
    FB_BAGS_FNNY = "FB_BAGS_FNNY"
    FB_BAGS_GRMT = "FB_BAGS_GRMT"
    FB_BAGS_LUGG = "FB_BAGS_LUGG"
    FB_BAGS_LUG_ACC = "FB_BAGS_LUG_ACC"
    FB_BAGS_MSGR = "FB_BAGS_MSGR"
    FB_BAGS_TOTE = "FB_BAGS_TOTE"
    FB_BAGS_TRN_CAS = "FB_BAGS_TRN_CAS"
    FB_BLDG = "FB_BLDG"
    FB_BLDG_ACC = "FB_BLDG_ACC"
    FB_BLDG_CNSMB = "FB_BLDG_CNSMB"
    FB_BLDG_FENCE = "FB_BLDG_FENCE"
    FB_BLDG_FUEL_TNK = "FB_BLDG_FUEL_TNK"
    FB_BLDG_HT_VNT = "FB_BLDG_HT_VNT"
    FB_BLDG_LOCK = "FB_BLDG_LOCK"
    FB_BLDG_MATRL = "FB_BLDG_MATRL"
    FB_BLDG_PLMB = "FB_BLDG_PLMB"
    FB_BLDG_PUMP = "FB_BLDG_PUMP"
    FB_BLDG_PWRS = "FB_BLDG_PWRS"
    FB_BLDG_STR_TANK = "FB_BLDG_STR_TANK"
    FB_BLDG_S_ENG = "FB_BLDG_S_ENG"
    FB_BLDG_TL_ACC = "FB_BLDG_TL_ACC"
    FB_BLDG_TOOL = "FB_BLDG_TOOL"
    FB_BUSIND = "FB_BUSIND"
    FB_BUSIND_ADVERTISING = "FB_BUSIND_ADVERTISING"
    FB_BUSIND_AGRICULTURE = "FB_BUSIND_AGRICULTURE"
    FB_BUSIND_AUTOMATION = "FB_BUSIND_AUTOMATION"
    FB_BUSIND_HEAVY_MACH = "FB_BUSIND_HEAVY_MACH"
    FB_BUSIND_LAB = "FB_BUSIND_LAB"
    FB_BUSIND_MEDICAL = "FB_BUSIND_MEDICAL"
    FB_BUSIND_RETAIL = "FB_BUSIND_RETAIL"
    FB_BUSIND_SANITARY_CT = "FB_BUSIND_SANITARY_CT"
    FB_BUSIND_SIGN = "FB_BUSIND_SIGN"
    FB_BUSIND_STORAGE = "FB_BUSIND_STORAGE"
    FB_BUSIND_STORAGE_ACC = "FB_BUSIND_STORAGE_ACC"
    FB_BUSIND_WORK_GEAR = "FB_BUSIND_WORK_GEAR"
    FB_CAMERA_ACC = "FB_CAMERA_ACC"
    FB_CAMERA_CAMERA = "FB_CAMERA_CAMERA"
    FB_CAMERA_OPTIC = "FB_CAMERA_OPTIC"
    FB_CAMERA_OPTICS = "FB_CAMERA_OPTICS"
    FB_CAMERA_PHOTO = "FB_CAMERA_PHOTO"
    FB_ELEC = "FB_ELEC"
    FB_ELEC_ACC = "FB_ELEC_ACC"
    FB_ELEC_ARCDADE = "FB_ELEC_ARCDADE"
    FB_ELEC_AUDIO = "FB_ELEC_AUDIO"
    FB_ELEC_CIRCUIT = "FB_ELEC_CIRCUIT"
    FB_ELEC_COMM = "FB_ELEC_COMM"
    FB_ELEC_COMPUTER = "FB_ELEC_COMPUTER"
    FB_ELEC_GPS_ACC = "FB_ELEC_GPS_ACC"
    FB_ELEC_GPS_NAV = "FB_ELEC_GPS_NAV"
    FB_ELEC_GPS_TRK = "FB_ELEC_GPS_TRK"
    FB_ELEC_MARINE = "FB_ELEC_MARINE"
    FB_ELEC_NETWORK = "FB_ELEC_NETWORK"
    FB_ELEC_PART = "FB_ELEC_PART"
    FB_ELEC_PRINT = "FB_ELEC_PRINT"
    FB_ELEC_RADAR = "FB_ELEC_RADAR"
    FB_ELEC_SFTWR = "FB_ELEC_SFTWR"
    FB_ELEC_SPEED_RDR = "FB_ELEC_SPEED_RDR"
    FB_ELEC_TELEVISION = "FB_ELEC_TELEVISION"
    FB_ELEC_TOLL = "FB_ELEC_TOLL"
    FB_ELEC_VIDEO = "FB_ELEC_VIDEO"
    FB_ELEC_VID_GM_ACC = "FB_ELEC_VID_GM_ACC"
    FB_ELEC_VID_GM_CNSL = "FB_ELEC_VID_GM_CNSL"
    FB_FOOD = "FB_FOOD"
    FB_FURN = "FB_FURN"
    FB_FURN_BABY = "FB_FURN_BABY"
    FB_FURN_BENCH = "FB_FURN_BENCH"
    FB_FURN_CART = "FB_FURN_CART"
    FB_FURN_CHAIR = "FB_FURN_CHAIR"
    FB_FURN_CHAIR_ACC = "FB_FURN_CHAIR_ACC"
    FB_FURN_DIVIDE = "FB_FURN_DIVIDE"
    FB_FURN_DIVIDE_ACC = "FB_FURN_DIVIDE_ACC"
    FB_FURN_ENT_CTR = "FB_FURN_ENT_CTR"
    FB_FURN_FUTN = "FB_FURN_FUTN"
    FB_FURN_FUTN_PAD = "FB_FURN_FUTN_PAD"
    FB_FURN_OFFICE = "FB_FURN_OFFICE"
    FB_FURN_OFFICE_ACC = "FB_FURN_OFFICE_ACC"
    FB_FURN_OTTO = "FB_FURN_OTTO"
    FB_FURN_OUTDOOR = "FB_FURN_OUTDOOR"
    FB_FURN_OUTDOOR_ACC = "FB_FURN_OUTDOOR_ACC"
    FB_FURN_SETS = "FB_FURN_SETS"
    FB_FURN_SHELVE_ACC = "FB_FURN_SHELVE_ACC"
    FB_FURN_SHLF = "FB_FURN_SHLF"
    FB_FURN_SOFA = "FB_FURN_SOFA"
    FB_FURN_SOFA_ACC = "FB_FURN_SOFA_ACC"
    FB_FURN_STORAGE = "FB_FURN_STORAGE"
    FB_FURN_TABL = "FB_FURN_TABL"
    FB_FURN_TABL_ACC = "FB_FURN_TABL_ACC"
    FB_GENERIC_TAXABLE = "FB_GENERIC_TAXABLE"
    FB_HLTH = "FB_HLTH"
    FB_HLTH_HLTH = "FB_HLTH_HLTH"
    FB_HLTH_JWL_CR = "FB_HLTH_JWL_CR"
    FB_HLTH_LILP_BLM = "FB_HLTH_LILP_BLM"
    FB_HLTH_LTN_SPF = "FB_HLTH_LTN_SPF"
    FB_HLTH_PRSL_CR = "FB_HLTH_PRSL_CR"
    FB_HLTH_SKN_CR = "FB_HLTH_SKN_CR"
    FB_HMGN = "FB_HMGN"
    FB_HMGN_BATH = "FB_HMGN_BATH"
    FB_HMGN_DCOR = "FB_HMGN_DCOR"
    FB_HMGN_EMGY = "FB_HMGN_EMGY"
    FB_HMGN_FPLC = "FB_HMGN_FPLC"
    FB_HMGN_FPLC_ACC = "FB_HMGN_FPLC_ACC"
    FB_HMGN_GS_SFT = "FB_HMGN_GS_SFT"
    FB_HMGN_HS_ACC = "FB_HMGN_HS_ACC"
    FB_HMGN_HS_APP = "FB_HMGN_HS_APP"
    FB_HMGN_HS_SPL = "FB_HMGN_HS_SPL"
    FB_HMGN_KTCN = "FB_HMGN_KTCN"
    FB_HMGN_LAWN = "FB_HMGN_LAWN"
    FB_HMGN_LGHT = "FB_HMGN_LGHT"
    FB_HMGN_LINN = "FB_HMGN_LINN"
    FB_HMGN_LT_ACC = "FB_HMGN_LT_ACC"
    FB_HMGN_OTDR = "FB_HMGN_OTDR"
    FB_HMGN_POOL = "FB_HMGN_POOL"
    FB_HMGN_SCTY = "FB_HMGN_SCTY"
    FB_HMGN_SMK_ACC = "FB_HMGN_SMK_ACC"
    FB_HMGN_UMBR = "FB_HMGN_UMBR"
    FB_HMGN_UMBR_ACC = "FB_HMGN_UMBR_ACC"
    FB_MDIA = "FB_MDIA"
    FB_MDIA_BOOK = "FB_MDIA_BOOK"
    FB_MDIA_DVDS = "FB_MDIA_DVDS"
    FB_MDIA_MAG = "FB_MDIA_MAG"
    FB_MDIA_MANL = "FB_MDIA_MANL"
    FB_MDIA_MUSC = "FB_MDIA_MUSC"
    FB_MDIA_PRJ_PLN = "FB_MDIA_PRJ_PLN"
    FB_MDIA_SHT_MUS = "FB_MDIA_SHT_MUS"
    FB_OFFC = "FB_OFFC"
    FB_OFFC_BKAC = "FB_OFFC_BKAC"
    FB_OFFC_CRTS = "FB_OFFC_CRTS"
    FB_OFFC_DSKP = "FB_OFFC_DSKP"
    FB_OFFC_EQIP = "FB_OFFC_EQIP"
    FB_OFFC_FLNG = "FB_OFFC_FLNG"
    FB_OFFC_GNRL = "FB_OFFC_GNRL"
    FB_OFFC_INSTM = "FB_OFFC_INSTM"
    FB_OFFC_LP_DSK = "FB_OFFC_LP_DSK"
    FB_OFFC_MATS = "FB_OFFC_MATS"
    FB_OFFC_NM_PLT = "FB_OFFC_NM_PLT"
    FB_OFFC_PPR_HNDL = "FB_OFFC_PPR_HNDL"
    FB_OFFC_PRSNT_SPL = "FB_OFFC_PRSNT_SPL"
    FB_OFFC_SEALR = "FB_OFFC_SEALR"
    FB_OFFC_SHIP_SPL = "FB_OFFC_SHIP_SPL"
    FB_RLGN = "FB_RLGN"
    FB_RLGN_CMNY = "FB_RLGN_CMNY"
    FB_RLGN_ITEM = "FB_RLGN_ITEM"
    FB_RLGN_WEDD = "FB_RLGN_WEDD"
    FB_SFTWR = "FB_SFTWR"
    FB_SFWR_CMPTR = "FB_SFWR_CMPTR"
    FB_SFWR_DGTL_GD = "FB_SFWR_DGTL_GD"
    FB_SFWR_GAME = "FB_SFWR_GAME"
    FB_SHIPPING = "FB_SHIPPING"
    FB_SPOR = "FB_SPOR"
    FB_SPORT_ATHL = "FB_SPORT_ATHL"
    FB_SPORT_ATHL_CLTH = "FB_SPORT_ATHL_CLTH"
    FB_SPORT_ATHL_SHOE = "FB_SPORT_ATHL_SHOE"
    FB_SPORT_ATHL_SPRT = "FB_SPORT_ATHL_SPRT"
    FB_SPORT_EXRCS = "FB_SPORT_EXRCS"
    FB_SPORT_INDR_GM = "FB_SPORT_INDR_GM"
    FB_SPORT_OTDR_GM = "FB_SPORT_OTDR_GM"
    FB_TOYS = "FB_TOYS"
    FB_TOYS_EQIP = "FB_TOYS_EQIP"
    FB_TOYS_GAME = "FB_TOYS_GAME"
    FB_TOYS_PZZL = "FB_TOYS_PZZL"
    FB_TOYS_TMRS = "FB_TOYS_TMRS"
    FB_TOYS_TOYS = "FB_TOYS_TOYS"
    FB_VEHI = "FB_VEHI"
    FB_VEHI_PART = "FB_VEHI_PART"


class productgroupproducts_condition_enum_param(str, Enum):
    """productgroupproducts_condition_enum_param enum values."""

    cpo = "cpo"
    new = "new"
    open_box_new = "open_box_new"
    refurbished = "refurbished"
    used = "used"
    used_fair = "used_fair"
    used_good = "used_good"
    used_like_new = "used_like_new"


class productgroupproducts_gender_enum_param(str, Enum):
    """productgroupproducts_gender_enum_param enum values."""

    female = "female"
    male = "male"
    unisex = "unisex"


class productgroupproducts_marked_for_product_launch_enum_param(str, Enum):
    """productgroupproducts_marked_for_product_launch_enum_param enum values."""

    default = "default"
    marked = "marked"
    not_marked = "not_marked"


class productgroupproducts_visibility_enum_param(str, Enum):
    """productgroupproducts_visibility_enum_param enum values."""

    published = "published"
    staging = "staging"


class productitem_age_group(str, Enum):
    """productitem_age_group enum values."""

    adult = "adult"
    ALL_AGES = "all ages"
    infant = "infant"
    kids = "kids"
    newborn = "newborn"
    teen = "teen"
    toddler = "toddler"


class productitem_availability(str, Enum):
    """productitem_availability enum values."""

    AVAILABLE_FOR_ORDER = "available for order"
    discontinued = "discontinued"
    IN_STOCK = "in stock"
    mark_as_sold = "mark_as_sold"
    OUT_OF_STOCK = "out of stock"
    pending = "pending"
    preorder = "preorder"


class productitem_commerce_tax_category(str, Enum):
    """productitem_commerce_tax_category enum values."""

    FB_ANIMAL = "FB_ANIMAL"
    FB_ANIMAL_SUPP = "FB_ANIMAL_SUPP"
    FB_APRL = "FB_APRL"
    FB_APRL_ACCESSORIES = "FB_APRL_ACCESSORIES"
    FB_APRL_ATHL_UNIF = "FB_APRL_ATHL_UNIF"
    FB_APRL_CASES = "FB_APRL_CASES"
    FB_APRL_CLOTHING = "FB_APRL_CLOTHING"
    FB_APRL_COSTUME = "FB_APRL_COSTUME"
    FB_APRL_CSTM = "FB_APRL_CSTM"
    FB_APRL_FORMAL = "FB_APRL_FORMAL"
    FB_APRL_HANDBAG = "FB_APRL_HANDBAG"
    FB_APRL_JEWELRY = "FB_APRL_JEWELRY"
    FB_APRL_SHOE = "FB_APRL_SHOE"
    FB_APRL_SHOE_ACC = "FB_APRL_SHOE_ACC"
    FB_APRL_SWIM = "FB_APRL_SWIM"
    FB_APRL_SWIM_CHIL = "FB_APRL_SWIM_CHIL"
    FB_APRL_SWIM_CVR = "FB_APRL_SWIM_CVR"
    FB_ARTS = "FB_ARTS"
    FB_ARTS_HOBBY = "FB_ARTS_HOBBY"
    FB_ARTS_PARTY = "FB_ARTS_PARTY"
    FB_ARTS_PARTY_GIFT_CARD = "FB_ARTS_PARTY_GIFT_CARD"
    FB_ARTS_TICKET = "FB_ARTS_TICKET"
    FB_BABY = "FB_BABY"
    FB_BABY_BATH = "FB_BABY_BATH"
    FB_BABY_BLANKET = "FB_BABY_BLANKET"
    FB_BABY_DIAPER = "FB_BABY_DIAPER"
    FB_BABY_GIFT_SET = "FB_BABY_GIFT_SET"
    FB_BABY_HEALTH = "FB_BABY_HEALTH"
    FB_BABY_NURSING = "FB_BABY_NURSING"
    FB_BABY_POTTY_TRN = "FB_BABY_POTTY_TRN"
    FB_BABY_SAFE = "FB_BABY_SAFE"
    FB_BABY_TOYS = "FB_BABY_TOYS"
    FB_BABY_TRANSPORT = "FB_BABY_TRANSPORT"
    FB_BABY_TRANSPORT_ACC = "FB_BABY_TRANSPORT_ACC"
    FB_BAGS = "FB_BAGS"
    FB_BAGS_BKPK = "FB_BAGS_BKPK"
    FB_BAGS_BOXES = "FB_BAGS_BOXES"
    FB_BAGS_BRFCS = "FB_BAGS_BRFCS"
    FB_BAGS_CSMT_BAG = "FB_BAGS_CSMT_BAG"
    FB_BAGS_DFFL = "FB_BAGS_DFFL"
    FB_BAGS_DIPR = "FB_BAGS_DIPR"
    FB_BAGS_FNNY = "FB_BAGS_FNNY"
    FB_BAGS_GRMT = "FB_BAGS_GRMT"
    FB_BAGS_LUGG = "FB_BAGS_LUGG"
    FB_BAGS_LUG_ACC = "FB_BAGS_LUG_ACC"
    FB_BAGS_MSGR = "FB_BAGS_MSGR"
    FB_BAGS_TOTE = "FB_BAGS_TOTE"
    FB_BAGS_TRN_CAS = "FB_BAGS_TRN_CAS"
    FB_BLDG = "FB_BLDG"
    FB_BLDG_ACC = "FB_BLDG_ACC"
    FB_BLDG_CNSMB = "FB_BLDG_CNSMB"
    FB_BLDG_FENCE = "FB_BLDG_FENCE"
    FB_BLDG_FUEL_TNK = "FB_BLDG_FUEL_TNK"
    FB_BLDG_HT_VNT = "FB_BLDG_HT_VNT"
    FB_BLDG_LOCK = "FB_BLDG_LOCK"
    FB_BLDG_MATRL = "FB_BLDG_MATRL"
    FB_BLDG_PLMB = "FB_BLDG_PLMB"
    FB_BLDG_PUMP = "FB_BLDG_PUMP"
    FB_BLDG_PWRS = "FB_BLDG_PWRS"
    FB_BLDG_STR_TANK = "FB_BLDG_STR_TANK"
    FB_BLDG_S_ENG = "FB_BLDG_S_ENG"
    FB_BLDG_TL_ACC = "FB_BLDG_TL_ACC"
    FB_BLDG_TOOL = "FB_BLDG_TOOL"
    FB_BUSIND = "FB_BUSIND"
    FB_BUSIND_ADVERTISING = "FB_BUSIND_ADVERTISING"
    FB_BUSIND_AGRICULTURE = "FB_BUSIND_AGRICULTURE"
    FB_BUSIND_AUTOMATION = "FB_BUSIND_AUTOMATION"
    FB_BUSIND_HEAVY_MACH = "FB_BUSIND_HEAVY_MACH"
    FB_BUSIND_LAB = "FB_BUSIND_LAB"
    FB_BUSIND_MEDICAL = "FB_BUSIND_MEDICAL"
    FB_BUSIND_RETAIL = "FB_BUSIND_RETAIL"
    FB_BUSIND_SANITARY_CT = "FB_BUSIND_SANITARY_CT"
    FB_BUSIND_SIGN = "FB_BUSIND_SIGN"
    FB_BUSIND_STORAGE = "FB_BUSIND_STORAGE"
    FB_BUSIND_STORAGE_ACC = "FB_BUSIND_STORAGE_ACC"
    FB_BUSIND_WORK_GEAR = "FB_BUSIND_WORK_GEAR"
    FB_CAMERA_ACC = "FB_CAMERA_ACC"
    FB_CAMERA_CAMERA = "FB_CAMERA_CAMERA"
    FB_CAMERA_OPTIC = "FB_CAMERA_OPTIC"
    FB_CAMERA_OPTICS = "FB_CAMERA_OPTICS"
    FB_CAMERA_PHOTO = "FB_CAMERA_PHOTO"
    FB_ELEC = "FB_ELEC"
    FB_ELEC_ACC = "FB_ELEC_ACC"
    FB_ELEC_ARCDADE = "FB_ELEC_ARCDADE"
    FB_ELEC_AUDIO = "FB_ELEC_AUDIO"
    FB_ELEC_CIRCUIT = "FB_ELEC_CIRCUIT"
    FB_ELEC_COMM = "FB_ELEC_COMM"
    FB_ELEC_COMPUTER = "FB_ELEC_COMPUTER"
    FB_ELEC_GPS_ACC = "FB_ELEC_GPS_ACC"
    FB_ELEC_GPS_NAV = "FB_ELEC_GPS_NAV"
    FB_ELEC_GPS_TRK = "FB_ELEC_GPS_TRK"
    FB_ELEC_MARINE = "FB_ELEC_MARINE"
    FB_ELEC_NETWORK = "FB_ELEC_NETWORK"
    FB_ELEC_PART = "FB_ELEC_PART"
    FB_ELEC_PRINT = "FB_ELEC_PRINT"
    FB_ELEC_RADAR = "FB_ELEC_RADAR"
    FB_ELEC_SFTWR = "FB_ELEC_SFTWR"
    FB_ELEC_SPEED_RDR = "FB_ELEC_SPEED_RDR"
    FB_ELEC_TELEVISION = "FB_ELEC_TELEVISION"
    FB_ELEC_TOLL = "FB_ELEC_TOLL"
    FB_ELEC_VIDEO = "FB_ELEC_VIDEO"
    FB_ELEC_VID_GM_ACC = "FB_ELEC_VID_GM_ACC"
    FB_ELEC_VID_GM_CNSL = "FB_ELEC_VID_GM_CNSL"
    FB_FOOD = "FB_FOOD"
    FB_FURN = "FB_FURN"
    FB_FURN_BABY = "FB_FURN_BABY"
    FB_FURN_BENCH = "FB_FURN_BENCH"
    FB_FURN_CART = "FB_FURN_CART"
    FB_FURN_CHAIR = "FB_FURN_CHAIR"
    FB_FURN_CHAIR_ACC = "FB_FURN_CHAIR_ACC"
    FB_FURN_DIVIDE = "FB_FURN_DIVIDE"
    FB_FURN_DIVIDE_ACC = "FB_FURN_DIVIDE_ACC"
    FB_FURN_ENT_CTR = "FB_FURN_ENT_CTR"
    FB_FURN_FUTN = "FB_FURN_FUTN"
    FB_FURN_FUTN_PAD = "FB_FURN_FUTN_PAD"
    FB_FURN_OFFICE = "FB_FURN_OFFICE"
    FB_FURN_OFFICE_ACC = "FB_FURN_OFFICE_ACC"
    FB_FURN_OTTO = "FB_FURN_OTTO"
    FB_FURN_OUTDOOR = "FB_FURN_OUTDOOR"
    FB_FURN_OUTDOOR_ACC = "FB_FURN_OUTDOOR_ACC"
    FB_FURN_SETS = "FB_FURN_SETS"
    FB_FURN_SHELVE_ACC = "FB_FURN_SHELVE_ACC"
    FB_FURN_SHLF = "FB_FURN_SHLF"
    FB_FURN_SOFA = "FB_FURN_SOFA"
    FB_FURN_SOFA_ACC = "FB_FURN_SOFA_ACC"
    FB_FURN_STORAGE = "FB_FURN_STORAGE"
    FB_FURN_TABL = "FB_FURN_TABL"
    FB_FURN_TABL_ACC = "FB_FURN_TABL_ACC"
    FB_GENERIC_TAXABLE = "FB_GENERIC_TAXABLE"
    FB_HLTH = "FB_HLTH"
    FB_HLTH_HLTH = "FB_HLTH_HLTH"
    FB_HLTH_JWL_CR = "FB_HLTH_JWL_CR"
    FB_HLTH_LILP_BLM = "FB_HLTH_LILP_BLM"
    FB_HLTH_LTN_SPF = "FB_HLTH_LTN_SPF"
    FB_HLTH_PRSL_CR = "FB_HLTH_PRSL_CR"
    FB_HLTH_SKN_CR = "FB_HLTH_SKN_CR"
    FB_HMGN = "FB_HMGN"
    FB_HMGN_BATH = "FB_HMGN_BATH"
    FB_HMGN_DCOR = "FB_HMGN_DCOR"
    FB_HMGN_EMGY = "FB_HMGN_EMGY"
    FB_HMGN_FPLC = "FB_HMGN_FPLC"
    FB_HMGN_FPLC_ACC = "FB_HMGN_FPLC_ACC"
    FB_HMGN_GS_SFT = "FB_HMGN_GS_SFT"
    FB_HMGN_HS_ACC = "FB_HMGN_HS_ACC"
    FB_HMGN_HS_APP = "FB_HMGN_HS_APP"
    FB_HMGN_HS_SPL = "FB_HMGN_HS_SPL"
    FB_HMGN_KTCN = "FB_HMGN_KTCN"
    FB_HMGN_LAWN = "FB_HMGN_LAWN"
    FB_HMGN_LGHT = "FB_HMGN_LGHT"
    FB_HMGN_LINN = "FB_HMGN_LINN"
    FB_HMGN_LT_ACC = "FB_HMGN_LT_ACC"
    FB_HMGN_OTDR = "FB_HMGN_OTDR"
    FB_HMGN_POOL = "FB_HMGN_POOL"
    FB_HMGN_SCTY = "FB_HMGN_SCTY"
    FB_HMGN_SMK_ACC = "FB_HMGN_SMK_ACC"
    FB_HMGN_UMBR = "FB_HMGN_UMBR"
    FB_HMGN_UMBR_ACC = "FB_HMGN_UMBR_ACC"
    FB_MDIA = "FB_MDIA"
    FB_MDIA_BOOK = "FB_MDIA_BOOK"
    FB_MDIA_DVDS = "FB_MDIA_DVDS"
    FB_MDIA_MAG = "FB_MDIA_MAG"
    FB_MDIA_MANL = "FB_MDIA_MANL"
    FB_MDIA_MUSC = "FB_MDIA_MUSC"
    FB_MDIA_PRJ_PLN = "FB_MDIA_PRJ_PLN"
    FB_MDIA_SHT_MUS = "FB_MDIA_SHT_MUS"
    FB_OFFC = "FB_OFFC"
    FB_OFFC_BKAC = "FB_OFFC_BKAC"
    FB_OFFC_CRTS = "FB_OFFC_CRTS"
    FB_OFFC_DSKP = "FB_OFFC_DSKP"
    FB_OFFC_EQIP = "FB_OFFC_EQIP"
    FB_OFFC_FLNG = "FB_OFFC_FLNG"
    FB_OFFC_GNRL = "FB_OFFC_GNRL"
    FB_OFFC_INSTM = "FB_OFFC_INSTM"
    FB_OFFC_LP_DSK = "FB_OFFC_LP_DSK"
    FB_OFFC_MATS = "FB_OFFC_MATS"
    FB_OFFC_NM_PLT = "FB_OFFC_NM_PLT"
    FB_OFFC_PPR_HNDL = "FB_OFFC_PPR_HNDL"
    FB_OFFC_PRSNT_SPL = "FB_OFFC_PRSNT_SPL"
    FB_OFFC_SEALR = "FB_OFFC_SEALR"
    FB_OFFC_SHIP_SPL = "FB_OFFC_SHIP_SPL"
    FB_RLGN = "FB_RLGN"
    FB_RLGN_CMNY = "FB_RLGN_CMNY"
    FB_RLGN_ITEM = "FB_RLGN_ITEM"
    FB_RLGN_WEDD = "FB_RLGN_WEDD"
    FB_SFTWR = "FB_SFTWR"
    FB_SFWR_CMPTR = "FB_SFWR_CMPTR"
    FB_SFWR_DGTL_GD = "FB_SFWR_DGTL_GD"
    FB_SFWR_GAME = "FB_SFWR_GAME"
    FB_SHIPPING = "FB_SHIPPING"
    FB_SPOR = "FB_SPOR"
    FB_SPORT_ATHL = "FB_SPORT_ATHL"
    FB_SPORT_ATHL_CLTH = "FB_SPORT_ATHL_CLTH"
    FB_SPORT_ATHL_SHOE = "FB_SPORT_ATHL_SHOE"
    FB_SPORT_ATHL_SPRT = "FB_SPORT_ATHL_SPRT"
    FB_SPORT_EXRCS = "FB_SPORT_EXRCS"
    FB_SPORT_INDR_GM = "FB_SPORT_INDR_GM"
    FB_SPORT_OTDR_GM = "FB_SPORT_OTDR_GM"
    FB_TOYS = "FB_TOYS"
    FB_TOYS_EQIP = "FB_TOYS_EQIP"
    FB_TOYS_GAME = "FB_TOYS_GAME"
    FB_TOYS_PZZL = "FB_TOYS_PZZL"
    FB_TOYS_TMRS = "FB_TOYS_TMRS"
    FB_TOYS_TOYS = "FB_TOYS_TOYS"
    FB_VEHI = "FB_VEHI"
    FB_VEHI_PART = "FB_VEHI_PART"


class productitem_condition(str, Enum):
    """productitem_condition enum values."""

    cpo = "cpo"
    new = "new"
    open_box_new = "open_box_new"
    refurbished = "refurbished"
    used = "used"
    used_fair = "used_fair"
    used_good = "used_good"
    used_like_new = "used_like_new"


class productitem_gender(str, Enum):
    """productitem_gender enum values."""

    female = "female"
    male = "male"
    unisex = "unisex"


class productitem_marked_for_product_launch(str, Enum):
    """productitem_marked_for_product_launch enum values."""

    default = "default"
    marked = "marked"
    not_marked = "not_marked"


class productitem_origin_country(str, Enum):
    """productitem_origin_country enum values."""

    AD = "AD"
    AE = "AE"
    AF = "AF"
    AG = "AG"
    AI = "AI"
    AL = "AL"
    AM = "AM"
    AN = "AN"
    AO = "AO"
    AQ = "AQ"
    AR = "AR"
    AS = "AS"
    AT = "AT"
    AU = "AU"
    AW = "AW"
    AX = "AX"
    AZ = "AZ"
    BA = "BA"
    BB = "BB"
    BD = "BD"
    BE = "BE"
    BF = "BF"
    BG = "BG"
    BH = "BH"
    BI = "BI"
    BJ = "BJ"
    BL = "BL"
    BM = "BM"
    BN = "BN"
    BO = "BO"
    BQ = "BQ"
    BR = "BR"
    BS = "BS"
    BT = "BT"
    BV = "BV"
    BW = "BW"
    BY = "BY"
    BZ = "BZ"
    CA = "CA"
    CC = "CC"
    CD = "CD"
    CF = "CF"
    CG = "CG"
    CH = "CH"
    CI = "CI"
    CK = "CK"
    CL = "CL"
    CM = "CM"
    CN = "CN"
    CO = "CO"
    CR = "CR"
    CU = "CU"
    CV = "CV"
    CW = "CW"
    CX = "CX"
    CY = "CY"
    CZ = "CZ"
    DE = "DE"
    DJ = "DJ"
    DK = "DK"
    DM = "DM"
    DO = "DO"
    DZ = "DZ"
    EC = "EC"
    EE = "EE"
    EG = "EG"
    EH = "EH"
    ER = "ER"
    ES = "ES"
    ET = "ET"
    FI = "FI"
    FJ = "FJ"
    FK = "FK"
    FM = "FM"
    FO = "FO"
    FR = "FR"
    GA = "GA"
    GB = "GB"
    GD = "GD"
    GE = "GE"
    GF = "GF"
    GG = "GG"
    GH = "GH"
    GI = "GI"
    GL = "GL"
    GM = "GM"
    GN = "GN"
    GP = "GP"
    GQ = "GQ"
    GR = "GR"
    GS = "GS"
    GT = "GT"
    GU = "GU"
    GW = "GW"
    GY = "GY"
    HK = "HK"
    HM = "HM"
    HN = "HN"
    HR = "HR"
    HT = "HT"
    HU = "HU"
    ID = "ID"
    IE = "IE"
    IL = "IL"
    IM = "IM"
    IN = "IN"
    IO = "IO"
    IQ = "IQ"
    IR = "IR"
    IS = "IS"
    IT = "IT"
    JE = "JE"
    JM = "JM"
    JO = "JO"
    JP = "JP"
    KE = "KE"
    KG = "KG"
    KH = "KH"
    KI = "KI"
    KM = "KM"
    KN = "KN"
    KP = "KP"
    KR = "KR"
    KW = "KW"
    KY = "KY"
    KZ = "KZ"
    LA = "LA"
    LB = "LB"
    LC = "LC"
    LI = "LI"
    LK = "LK"
    LR = "LR"
    LS = "LS"
    LT = "LT"
    LU = "LU"
    LV = "LV"
    LY = "LY"
    MA = "MA"
    MC = "MC"
    MD = "MD"
    ME = "ME"
    MF = "MF"
    MG = "MG"
    MH = "MH"
    MK = "MK"
    ML = "ML"
    MM = "MM"
    MN = "MN"
    MO = "MO"
    MP = "MP"
    MQ = "MQ"
    MR = "MR"
    MS = "MS"
    MT = "MT"
    MU = "MU"
    MV = "MV"
    MW = "MW"
    MX = "MX"
    MY = "MY"
    MZ = "MZ"
    NA = "NA"
    NC = "NC"
    NE = "NE"
    NF = "NF"
    NG = "NG"
    NI = "NI"
    NL = "NL"
    NO = "NO"
    NP = "NP"
    NR = "NR"
    NU = "NU"
    NZ = "NZ"
    OM = "OM"
    PA = "PA"
    PE = "PE"
    PF = "PF"
    PG = "PG"
    PH = "PH"
    PK = "PK"
    PL = "PL"
    PM = "PM"
    PN = "PN"
    PR = "PR"
    PS = "PS"
    PT = "PT"
    PW = "PW"
    PY = "PY"
    QA = "QA"
    RE = "RE"
    RO = "RO"
    RS = "RS"
    RU = "RU"
    RW = "RW"
    SA = "SA"
    SB = "SB"
    SC = "SC"
    SD = "SD"
    SE = "SE"
    SG = "SG"
    SH = "SH"
    SI = "SI"
    SJ = "SJ"
    SK = "SK"
    SL = "SL"
    SM = "SM"
    SN = "SN"
    SO = "SO"
    SR = "SR"
    SS = "SS"
    ST = "ST"
    SV = "SV"
    SX = "SX"
    SY = "SY"
    SZ = "SZ"
    TC = "TC"
    TD = "TD"
    TF = "TF"
    TG = "TG"
    TH = "TH"
    TJ = "TJ"
    TK = "TK"
    TL = "TL"
    TM = "TM"
    TN = "TN"
    TO = "TO"
    TR = "TR"
    TT = "TT"
    TV = "TV"
    TW = "TW"
    TZ = "TZ"
    UA = "UA"
    UG = "UG"
    UM = "UM"
    US = "US"
    UY = "UY"
    UZ = "UZ"
    VA = "VA"
    VC = "VC"
    VE = "VE"
    VG = "VG"
    VI = "VI"
    VN = "VN"
    VU = "VU"
    WF = "WF"
    WS = "WS"
    XK = "XK"
    YE = "YE"
    YT = "YT"
    ZA = "ZA"
    ZM = "ZM"
    ZW = "ZW"


class productitem_visibility(str, Enum):
    """productitem_visibility enum values."""

    published = "published"
    staging = "staging"


class productitem_wa_compliance_category(str, Enum):
    """productitem_wa_compliance_category enum values."""

    COUNTRY_ORIGIN_EXEMPT = "COUNTRY_ORIGIN_EXEMPT"
    DEFAULT = "DEFAULT"


class productitemoverride_details_type_enum_param(str, Enum):
    """productitemoverride_details_type_enum_param enum values."""

    COUNTRY = "COUNTRY"
    LANGUAGE = "LANGUAGE"
    LANGUAGE_AND_COUNTRY = "LANGUAGE_AND_COUNTRY"


class productsetproducts_error_priority_enum_param(str, Enum):
    """productsetproducts_error_priority_enum_param enum values."""

    HIGH = "HIGH"
    LOW = "LOW"
    MEDIUM = "MEDIUM"


class productsetproducts_error_type_enum_param(str, Enum):
    """productsetproducts_error_type_enum_param enum values."""

    ADDRESS_BLOCKLISTED_IN_MARKET = "ADDRESS_BLOCKLISTED_IN_MARKET"
    AGGREGATED_LOCALIZATION_ISSUES = "AGGREGATED_LOCALIZATION_ISSUES"
    APP_HAS_NO_AEM_SETUP = "APP_HAS_NO_AEM_SETUP"
    AR_DELETED_DUE_TO_UPDATE = "AR_DELETED_DUE_TO_UPDATE"
    AR_POLICY_VIOLATED = "AR_POLICY_VIOLATED"
    AVAILABLE = "AVAILABLE"
    BAD_QUALITY_IMAGE = "BAD_QUALITY_IMAGE"
    BIG_CATALOG_WITH_ALL_ITEMS_IN_STOCK = "BIG_CATALOG_WITH_ALL_ITEMS_IN_STOCK"
    BIZ_MSG_AI_AGENT_DISABLED_BY_USER = "BIZ_MSG_AI_AGENT_DISABLED_BY_USER"
    BIZ_MSG_GEN_AI_POLICY_VIOLATED = "BIZ_MSG_GEN_AI_POLICY_VIOLATED"
    CANNOT_EDIT_SUBSCRIPTION_PRODUCTS = "CANNOT_EDIT_SUBSCRIPTION_PRODUCTS"
    CATALOG_NOT_CONNECTED_TO_EVENT_SOURCE = "CATALOG_NOT_CONNECTED_TO_EVENT_SOURCE"
    CHECKOUT_DISABLED_BY_USER = "CHECKOUT_DISABLED_BY_USER"
    COMMERCE_ACCOUNT_LEGAL_ADDRESS_INVALID = "COMMERCE_ACCOUNT_LEGAL_ADDRESS_INVALID"
    COMMERCE_ACCOUNT_NOT_LEGALLY_COMPLIANT = "COMMERCE_ACCOUNT_NOT_LEGALLY_COMPLIANT"
    CRAWLED_AVAILABILITY_MISMATCH = "CRAWLED_AVAILABILITY_MISMATCH"
    DA_DISABLED_BY_USER = "DA_DISABLED_BY_USER"
    DA_POLICY_UNFIT_FOR_AUDIENCE = "DA_POLICY_UNFIT_FOR_AUDIENCE"
    DA_POLICY_VIOLATION = "DA_POLICY_VIOLATION"
    DELETED_ITEM = "DELETED_ITEM"
    DIGITAL_GOODS_NOT_AVAILABLE_FOR_CHECKOUT = "DIGITAL_GOODS_NOT_AVAILABLE_FOR_CHECKOUT"
    DUPLICATE_IMAGES = "DUPLICATE_IMAGES"
    DUPLICATE_TITLE_AND_DESCRIPTION = "DUPLICATE_TITLE_AND_DESCRIPTION"
    EMPTY_AVAILABILITY = "EMPTY_AVAILABILITY"
    EMPTY_CONDITION = "EMPTY_CONDITION"
    EMPTY_DESCRIPTION = "EMPTY_DESCRIPTION"
    EMPTY_IMAGE_URL = "EMPTY_IMAGE_URL"
    EMPTY_PRICE = "EMPTY_PRICE"
    EMPTY_PRODUCT_URL = "EMPTY_PRODUCT_URL"
    EMPTY_SELLER_DESCRIPTION = "EMPTY_SELLER_DESCRIPTION"
    EMPTY_TITLE = "EMPTY_TITLE"
    EXTERNAL_MERCHANT_ID_MISMATCH = "EXTERNAL_MERCHANT_ID_MISMATCH"
    GENERIC_INVALID_FIELD = "GENERIC_INVALID_FIELD"
    GROUPS_DISABLED_BY_USER = "GROUPS_DISABLED_BY_USER"
    HIDDEN_UNTIL_PRODUCT_LAUNCH = "HIDDEN_UNTIL_PRODUCT_LAUNCH"
    ILLEGAL_PRODUCT_CATEGORY = "ILLEGAL_PRODUCT_CATEGORY"
    IMAGE_FETCH_FAILED = "IMAGE_FETCH_FAILED"
    IMAGE_FETCH_FAILED_BAD_GATEWAY = "IMAGE_FETCH_FAILED_BAD_GATEWAY"
    IMAGE_FETCH_FAILED_FILE_SIZE_EXCEEDED = "IMAGE_FETCH_FAILED_FILE_SIZE_EXCEEDED"
    IMAGE_FETCH_FAILED_FORBIDDEN = "IMAGE_FETCH_FAILED_FORBIDDEN"
    IMAGE_FETCH_FAILED_LINK_BROKEN = "IMAGE_FETCH_FAILED_LINK_BROKEN"
    IMAGE_FETCH_FAILED_TIMED_OUT = "IMAGE_FETCH_FAILED_TIMED_OUT"
    IMAGE_RESOLUTION_LOW = "IMAGE_RESOLUTION_LOW"
    INACTIVE_SHOPIFY_PRODUCT = "INACTIVE_SHOPIFY_PRODUCT"
    INVALID_COMMERCE_TAX_CATEGORY = "INVALID_COMMERCE_TAX_CATEGORY"
    INVALID_CONSOLIDATED_LOCALITY_INFORMATION = "INVALID_CONSOLIDATED_LOCALITY_INFORMATION"
    INVALID_CONTENT_ID = "INVALID_CONTENT_ID"
    INVALID_DEALER_COMMUNICATION_PARAMETERS = "INVALID_DEALER_COMMUNICATION_PARAMETERS"
    INVALID_DMA_CODES = "INVALID_DMA_CODES"
    INVALID_FB_PAGE_ID = "INVALID_FB_PAGE_ID"
    INVALID_IMAGES = "INVALID_IMAGES"
    INVALID_MONETIZER_RETURN_POLICY = "INVALID_MONETIZER_RETURN_POLICY"
    INVALID_OFFER_DISCLAIMER_URL = "INVALID_OFFER_DISCLAIMER_URL"
    INVALID_OFFER_END_DATE = "INVALID_OFFER_END_DATE"
    INVALID_PRE_ORDER_PARAMS = "INVALID_PRE_ORDER_PARAMS"
    INVALID_RANGE_FOR_AREA_SIZE = "INVALID_RANGE_FOR_AREA_SIZE"
    INVALID_RANGE_FOR_BUILT_UP_AREA_SIZE = "INVALID_RANGE_FOR_BUILT_UP_AREA_SIZE"
    INVALID_RANGE_FOR_NUM_OF_BATHS = "INVALID_RANGE_FOR_NUM_OF_BATHS"
    INVALID_RANGE_FOR_NUM_OF_BEDS = "INVALID_RANGE_FOR_NUM_OF_BEDS"
    INVALID_RANGE_FOR_NUM_OF_ROOMS = "INVALID_RANGE_FOR_NUM_OF_ROOMS"
    INVALID_RANGE_FOR_PARKING_SPACES = "INVALID_RANGE_FOR_PARKING_SPACES"
    INVALID_SHELTER_PAGE_ID = "INVALID_SHELTER_PAGE_ID"
    INVALID_SHIPPING_PROFILE_PARAMS = "INVALID_SHIPPING_PROFILE_PARAMS"
    INVALID_SUBSCRIPTION_DISABLE_PARAMS = "INVALID_SUBSCRIPTION_DISABLE_PARAMS"
    INVALID_SUBSCRIPTION_ENABLE_PARAMS = "INVALID_SUBSCRIPTION_ENABLE_PARAMS"
    INVALID_SUBSCRIPTION_PARAMS = "INVALID_SUBSCRIPTION_PARAMS"
    INVALID_TAX_EXTENSION_STATE = "INVALID_TAX_EXTENSION_STATE"
    INVALID_VEHICLE_STATE = "INVALID_VEHICLE_STATE"
    INVALID_VIRTUAL_TOUR_URL_DOMAIN = "INVALID_VIRTUAL_TOUR_URL_DOMAIN"
    INVENTORY_ZERO_AVAILABILITY_IN_STOCK = "INVENTORY_ZERO_AVAILABILITY_IN_STOCK"
    IN_ANOTHER_PRODUCT_LAUNCH = "IN_ANOTHER_PRODUCT_LAUNCH"
    ITEM_GROUP_NOT_SPECIFIED = "ITEM_GROUP_NOT_SPECIFIED"
    ITEM_NOT_SHIPPABLE_FOR_SCA_SHOP = "ITEM_NOT_SHIPPABLE_FOR_SCA_SHOP"
    ITEM_OVERRIDE_EMPTY_AVAILABILITY = "ITEM_OVERRIDE_EMPTY_AVAILABILITY"
    ITEM_OVERRIDE_EMPTY_PRICE = "ITEM_OVERRIDE_EMPTY_PRICE"
    ITEM_OVERRIDE_NOT_VISIBLE = "ITEM_OVERRIDE_NOT_VISIBLE"
    ITEM_PRICE_NOT_POSITIVE = "ITEM_PRICE_NOT_POSITIVE"
    ITEM_STALE_OUT_OF_STOCK = "ITEM_STALE_OUT_OF_STOCK"
    MARKETPLACE_DISABLED_BY_USER = "MARKETPLACE_DISABLED_BY_USER"
    MARKETPLACE_PARTNER_AUCTION_NO_BID_CLOSE_TIME = "MARKETPLACE_PARTNER_AUCTION_NO_BID_CLOSE_TIME"
    MARKETPLACE_PARTNER_CURRENCY_NOT_VALID = "MARKETPLACE_PARTNER_CURRENCY_NOT_VALID"
    MARKETPLACE_PARTNER_LISTING_COUNTRY_NOT_MATCH_CATALOG = (
        "MARKETPLACE_PARTNER_LISTING_COUNTRY_NOT_MATCH_CATALOG"
    )
    MARKETPLACE_PARTNER_LISTING_LIMIT_EXCEEDED = "MARKETPLACE_PARTNER_LISTING_LIMIT_EXCEEDED"
    MARKETPLACE_PARTNER_MISSING_LATLONG = "MARKETPLACE_PARTNER_MISSING_LATLONG"
    MARKETPLACE_PARTNER_MISSING_SHIPPING_COST = "MARKETPLACE_PARTNER_MISSING_SHIPPING_COST"
    MARKETPLACE_PARTNER_NOT_LOCAL_ITEM = "MARKETPLACE_PARTNER_NOT_LOCAL_ITEM"
    MARKETPLACE_PARTNER_NOT_SHIPPED_ITEM = "MARKETPLACE_PARTNER_NOT_SHIPPED_ITEM"
    MARKETPLACE_PARTNER_POLICY_VIOLATION = "MARKETPLACE_PARTNER_POLICY_VIOLATION"
    MARKETPLACE_PARTNER_RULE_LISTING_LIMIT_EXCEEDED = (
        "MARKETPLACE_PARTNER_RULE_LISTING_LIMIT_EXCEEDED"
    )
    MARKETPLACE_PARTNER_SELLER_BANNED = "MARKETPLACE_PARTNER_SELLER_BANNED"
    MARKETPLACE_PARTNER_SELLER_NOT_VALID = "MARKETPLACE_PARTNER_SELLER_NOT_VALID"
    MINI_SHOPS_DISABLED_BY_USER = "MINI_SHOPS_DISABLED_BY_USER"
    MISSING_CHECKOUT = "MISSING_CHECKOUT"
    MISSING_CHECKOUT_CURRENCY = "MISSING_CHECKOUT_CURRENCY"
    MISSING_COLOR = "MISSING_COLOR"
    MISSING_COUNTRY_OVERRIDE_IN_SHIPPING_PROFILE = "MISSING_COUNTRY_OVERRIDE_IN_SHIPPING_PROFILE"
    MISSING_EVENT = "MISSING_EVENT"
    MISSING_INDIA_COMPLIANCE_FIELDS = "MISSING_INDIA_COMPLIANCE_FIELDS"
    MISSING_SHIPPING_PROFILE = "MISSING_SHIPPING_PROFILE"
    MISSING_SIZE = "MISSING_SIZE"
    MISSING_TAX_CATEGORY = "MISSING_TAX_CATEGORY"
    NEGATIVE_COMMUNITY_FEEDBACK = "NEGATIVE_COMMUNITY_FEEDBACK"
    NEGATIVE_PRICE = "NEGATIVE_PRICE"
    NOT_ENOUGH_IMAGES = "NOT_ENOUGH_IMAGES"
    NOT_ENOUGH_UNIQUE_PRODUCTS = "NOT_ENOUGH_UNIQUE_PRODUCTS"
    NO_CONTENT_ID = "NO_CONTENT_ID"
    OVERLAY_DISCLAIMER_EXCEEDED_MAX_LENGTH = "OVERLAY_DISCLAIMER_EXCEEDED_MAX_LENGTH"
    PART_OF_PRODUCT_LAUNCH = "PART_OF_PRODUCT_LAUNCH"
    PASSING_MULTIPLE_CONTENT_IDS = "PASSING_MULTIPLE_CONTENT_IDS"
    PRODUCT_DOMINANT_CURRENCY_MISMATCH = "PRODUCT_DOMINANT_CURRENCY_MISMATCH"
    PRODUCT_EXPIRED = "PRODUCT_EXPIRED"
    PRODUCT_ITEM_HIDDEN_FROM_ALL_SHOPS = "PRODUCT_ITEM_HIDDEN_FROM_ALL_SHOPS"
    PRODUCT_ITEM_INVALID_PARTNER_TOKENS = "PRODUCT_ITEM_INVALID_PARTNER_TOKENS"
    PRODUCT_ITEM_NOT_INCLUDED_IN_ANY_SHOP = "PRODUCT_ITEM_NOT_INCLUDED_IN_ANY_SHOP"
    PRODUCT_ITEM_NOT_VISIBLE = "PRODUCT_ITEM_NOT_VISIBLE"
    PRODUCT_NOT_APPROVED = "PRODUCT_NOT_APPROVED"
    PRODUCT_NOT_DOMINANT_CURRENCY = "PRODUCT_NOT_DOMINANT_CURRENCY"
    PRODUCT_OUT_OF_STOCK = "PRODUCT_OUT_OF_STOCK"
    PRODUCT_URL_EQUALS_DOMAIN = "PRODUCT_URL_EQUALS_DOMAIN"
    PROPERTY_PRICE_CURRENCY_NOT_SUPPORTED = "PROPERTY_PRICE_CURRENCY_NOT_SUPPORTED"
    PROPERTY_PRICE_TOO_HIGH = "PROPERTY_PRICE_TOO_HIGH"
    PROPERTY_PRICE_TOO_LOW = "PROPERTY_PRICE_TOO_LOW"
    PROPERTY_UNIT_PRICE_CURRENCY_MISMATCH_ITEM_PRICE_CURRENCY = (
        "PROPERTY_UNIT_PRICE_CURRENCY_MISMATCH_ITEM_PRICE_CURRENCY"
    )
    PROPERTY_VALUE_CONTAINS_HTML_TAGS = "PROPERTY_VALUE_CONTAINS_HTML_TAGS"
    PROPERTY_VALUE_DESCRIPTION_CONTAINS_OFF_PLATFORM_LINK = (
        "PROPERTY_VALUE_DESCRIPTION_CONTAINS_OFF_PLATFORM_LINK"
    )
    PROPERTY_VALUE_FORMAT = "PROPERTY_VALUE_FORMAT"
    PROPERTY_VALUE_MISSING = "PROPERTY_VALUE_MISSING"
    PROPERTY_VALUE_MISSING_WARNING = "PROPERTY_VALUE_MISSING_WARNING"
    PROPERTY_VALUE_NON_POSITIVE = "PROPERTY_VALUE_NON_POSITIVE"
    PROPERTY_VALUE_STRING_EXCEEDS_LENGTH = "PROPERTY_VALUE_STRING_EXCEEDS_LENGTH"
    PROPERTY_VALUE_STRING_TOO_SHORT = "PROPERTY_VALUE_STRING_TOO_SHORT"
    PROPERTY_VALUE_UPPERCASE = "PROPERTY_VALUE_UPPERCASE"
    PROPERTY_VALUE_UPPERCASE_WARNING = "PROPERTY_VALUE_UPPERCASE_WARNING"
    PURCHASE_RATE_BELOW_ADDTOCART = "PURCHASE_RATE_BELOW_ADDTOCART"
    PURCHASE_RATE_BELOW_VIEWCONTENT = "PURCHASE_RATE_BELOW_VIEWCONTENT"
    QUALITY_DUPLICATED_DESCRIPTION = "QUALITY_DUPLICATED_DESCRIPTION"
    QUALITY_ITEM_LINK_BROKEN = "QUALITY_ITEM_LINK_BROKEN"
    QUALITY_ITEM_LINK_REDIRECTING = "QUALITY_ITEM_LINK_REDIRECTING"
    RETAILER_ID_NOT_PROVIDED = "RETAILER_ID_NOT_PROVIDED"
    SHOPIFY_INVALID_RETAILER_ID = "SHOPIFY_INVALID_RETAILER_ID"
    SHOPIFY_ITEM_MISSING_SHIPPING_PROFILE = "SHOPIFY_ITEM_MISSING_SHIPPING_PROFILE"
    SHOPS_POLICY_VIOLATION = "SHOPS_POLICY_VIOLATION"
    SUBSCRIPTION_INFO_NOT_ENABLED_FOR_FEED = "SUBSCRIPTION_INFO_NOT_ENABLED_FOR_FEED"
    TAX_CATEGORY_NOT_SUPPORTED_IN_UK = "TAX_CATEGORY_NOT_SUPPORTED_IN_UK"
    UNIQUE_PRODUCT_IDENTIFIER_MISSING = "UNIQUE_PRODUCT_IDENTIFIER_MISSING"
    UNMATCHED_EVENTS = "UNMATCHED_EVENTS"
    UNSUPPORTED_PRODUCT_CATEGORY = "UNSUPPORTED_PRODUCT_CATEGORY"
    VARIANT_ATTRIBUTE_ISSUE = "VARIANT_ATTRIBUTE_ISSUE"
    VIDEO_FETCH_FAILED = "VIDEO_FETCH_FAILED"
    VIDEO_FETCH_FAILED_BAD_GATEWAY = "VIDEO_FETCH_FAILED_BAD_GATEWAY"
    VIDEO_FETCH_FAILED_FILE_SIZE_EXCEEDED = "VIDEO_FETCH_FAILED_FILE_SIZE_EXCEEDED"
    VIDEO_FETCH_FAILED_FORBIDDEN = "VIDEO_FETCH_FAILED_FORBIDDEN"
    VIDEO_FETCH_FAILED_LINK_BROKEN = "VIDEO_FETCH_FAILED_LINK_BROKEN"
    VIDEO_FETCH_FAILED_TIMED_OUT = "VIDEO_FETCH_FAILED_TIMED_OUT"
    VIDEO_NOT_DOWNLOADABLE = "VIDEO_NOT_DOWNLOADABLE"
    WHATSAPP_DISABLED_BY_USER = "WHATSAPP_DISABLED_BY_USER"
    WHATSAPP_MARKETING_MESSAGE_DISABLED_BY_USER = "WHATSAPP_MARKETING_MESSAGE_DISABLED_BY_USER"
    WHATSAPP_MARKETING_MESSAGE_POLICY_VIOLATION = "WHATSAPP_MARKETING_MESSAGE_POLICY_VIOLATION"
    WHATSAPP_POLICY_VIOLATION = "WHATSAPP_POLICY_VIOLATION"


class profilepicture_type_enum_param(str, Enum):
    """profilepicture_type_enum_param enum values."""

    album = "album"
    large = "large"
    normal = "normal"
    small = "small"
    square = "square"


class rtbdynamicpostcomments_filter_enum_param(str, Enum):
    """rtbdynamicpostcomments_filter_enum_param enum values."""

    stream = "stream"
    toplevel = "toplevel"


class rtbdynamicpostcomments_live_filter_enum_param(str, Enum):
    """rtbdynamicpostcomments_live_filter_enum_param enum values."""

    filter_low_quality = "filter_low_quality"
    no_filter = "no_filter"


class rtbdynamicpostcomments_order_enum_param(str, Enum):
    """rtbdynamicpostcomments_order_enum_param enum values."""

    chronological = "chronological"
    reverse_chronological = "reverse_chronological"


class shadowigmedia_boostable_media_callsite(str, Enum):
    """shadowigmedia_boostable_media_callsite enum values."""

    ADS_MANAGER_L1_EDITOR_DYNAMIC_ADS_WITH_EXISTING_POST = (
        "ADS_MANAGER_L1_EDITOR_DYNAMIC_ADS_WITH_EXISTING_POST"
    )


class shadowigmediainsights_breakdown_enum_param(str, Enum):
    """shadowigmediainsights_breakdown_enum_param enum values."""

    action_type = "action_type"
    follow_type = "follow_type"
    story_navigation_action_type = "story_navigation_action_type"
    surface_type = "surface_type"


class shadowigmediainsights_metric_enum_param(str, Enum):
    """shadowigmediainsights_metric_enum_param enum values."""

    clips_replays_count = "clips_replays_count"
    comments = "comments"
    follows = "follows"
    ig_reels_aggregated_all_plays_count = "ig_reels_aggregated_all_plays_count"
    ig_reels_avg_watch_time = "ig_reels_avg_watch_time"
    ig_reels_video_view_total_time = "ig_reels_video_view_total_time"
    impressions = "impressions"
    likes = "likes"
    navigation = "navigation"
    plays = "plays"
    profile_activity = "profile_activity"
    profile_visits = "profile_visits"
    reach = "reach"
    replies = "replies"
    saved = "saved"
    shares = "shares"
    total_interactions = "total_interactions"
    video_views = "video_views"
    views = "views"


class shadowigmediainsights_period_enum_param(str, Enum):
    """shadowigmediainsights_period_enum_param enum values."""

    day = "day"
    days_28 = "days_28"
    lifetime = "lifetime"
    month = "month"
    total_over_range = "total_over_range"
    week = "week"


class shadowiguserinsights_breakdown_enum_param(str, Enum):
    """shadowiguserinsights_breakdown_enum_param enum values."""

    age = "age"
    city = "city"
    contact_button_type = "contact_button_type"
    country = "country"
    follow_type = "follow_type"
    gender = "gender"
    media_product_type = "media_product_type"


class shadowiguserinsights_metric_enum_param(str, Enum):
    """shadowiguserinsights_metric_enum_param enum values."""

    accounts_engaged = "accounts_engaged"
    comments = "comments"
    content_views = "content_views"
    engaged_audience_demographics = "engaged_audience_demographics"
    follower_count = "follower_count"
    follower_demographics = "follower_demographics"
    follows_and_unfollows = "follows_and_unfollows"
    impressions = "impressions"
    likes = "likes"
    online_followers = "online_followers"
    profile_links_taps = "profile_links_taps"
    profile_views = "profile_views"
    quotes = "quotes"
    reach = "reach"
    reached_audience_demographics = "reached_audience_demographics"
    replies = "replies"
    reposts = "reposts"
    saves = "saves"
    shares = "shares"
    threads_follower_demographics = "threads_follower_demographics"
    threads_followers = "threads_followers"
    threads_likes = "threads_likes"
    threads_replies = "threads_replies"
    threads_views = "threads_views"
    total_interactions = "total_interactions"
    views = "views"
    website_clicks = "website_clicks"


class shadowiguserinsights_metric_type_enum_param(str, Enum):
    """shadowiguserinsights_metric_type_enum_param enum values."""

    default = "default"
    time_series = "time_series"
    total_value = "total_value"


class shadowiguserinsights_period_enum_param(str, Enum):
    """shadowiguserinsights_period_enum_param enum values."""

    day = "day"
    days_28 = "days_28"
    lifetime = "lifetime"
    month = "month"
    total_over_range = "total_over_range"
    week = "week"


class shadowiguserinsights_timeframe_enum_param(str, Enum):
    """shadowiguserinsights_timeframe_enum_param enum values."""

    last_14_days = "last_14_days"
    last_30_days = "last_30_days"
    last_90_days = "last_90_days"
    prev_month = "prev_month"
    this_month = "this_month"
    this_week = "this_week"


class shadowiguserupcoming_events_notification_subtypes_enum_param(str, Enum):
    """shadowiguserupcoming_events_notification_subtypes_enum_param enum values."""

    AFTER_EVENT_1DAY = "AFTER_EVENT_1DAY"
    AFTER_EVENT_2DAY = "AFTER_EVENT_2DAY"
    AFTER_EVENT_3DAY = "AFTER_EVENT_3DAY"
    AFTER_EVENT_4DAY = "AFTER_EVENT_4DAY"
    AFTER_EVENT_5DAY = "AFTER_EVENT_5DAY"
    AFTER_EVENT_6DAY = "AFTER_EVENT_6DAY"
    AFTER_EVENT_7DAY = "AFTER_EVENT_7DAY"
    BEFORE_EVENT_15MIN = "BEFORE_EVENT_15MIN"
    BEFORE_EVENT_1DAY = "BEFORE_EVENT_1DAY"
    BEFORE_EVENT_1HOUR = "BEFORE_EVENT_1HOUR"
    BEFORE_EVENT_2DAY = "BEFORE_EVENT_2DAY"
    EVENT_START = "EVENT_START"
    RESCHEDULED = "RESCHEDULED"


class storiesinsights_metric_enum_param(str, Enum):
    """storiesinsights_metric_enum_param enum values."""

    PAGES_FB_STORY_REPLIES = "PAGES_FB_STORY_REPLIES"
    PAGES_FB_STORY_SHARES = "PAGES_FB_STORY_SHARES"
    PAGES_FB_STORY_STICKER_INTERACTIONS = "PAGES_FB_STORY_STICKER_INTERACTIONS"
    PAGES_FB_STORY_THREAD_LIGHTWEIGHT_REACTIONS = "PAGES_FB_STORY_THREAD_LIGHTWEIGHT_REACTIONS"
    PAGE_STORY_IMPRESSIONS_BY_STORY_ID = "PAGE_STORY_IMPRESSIONS_BY_STORY_ID"
    PAGE_STORY_IMPRESSIONS_BY_STORY_ID_UNIQUE = "PAGE_STORY_IMPRESSIONS_BY_STORY_ID_UNIQUE"
    STORY_INTERACTION = "STORY_INTERACTION"


class transactableitemoverride_details_type_enum_param(str, Enum):
    """transactableitemoverride_details_type_enum_param enum values."""

    COUNTRY = "COUNTRY"
    LANGUAGE = "LANGUAGE"
    LANGUAGE_AND_COUNTRY = "LANGUAGE_AND_COUNTRY"


class unifiedthreadmessages_source_enum_param(str, Enum):
    """unifiedthreadmessages_source_enum_param enum values."""

    ALL = "ALL"
    PARTICIPANTS = "PARTICIPANTS"


class url_scopes(str, Enum):
    """url_scopes enum values."""

    NEWS_TAB = "NEWS_TAB"
    NEWS_TAB_DEV_ENV = "NEWS_TAB_DEV_ENV"


class user_local_news_megaphone_dismiss_status(str, Enum):
    """user_local_news_megaphone_dismiss_status enum values."""

    NO = "NO"
    YES = "YES"


class user_local_news_subscription_status(str, Enum):
    """user_local_news_subscription_status enum values."""

    STATUS_OFF = "STATUS_OFF"
    STATUS_ON = "STATUS_ON"


class userad_studies_type_enum_param(str, Enum):
    """userad_studies_type_enum_param enum values."""

    BACKEND_AB_TESTING = "BACKEND_AB_TESTING"
    CONTINUOUS_LIFT_CONFIG = "CONTINUOUS_LIFT_CONFIG"
    GEO_LIFT = "GEO_LIFT"
    LIFT = "LIFT"
    SPLIT_TEST = "SPLIT_TEST"


class userbusinesses_survey_business_type_enum_param(str, Enum):
    """userbusinesses_survey_business_type_enum_param enum values."""

    ADVERTISER = "ADVERTISER"
    AGENCY = "AGENCY"
    APP_DEVELOPER = "APP_DEVELOPER"
    PUBLISHER = "PUBLISHER"


class userbusinesses_timezone_id_enum_param(str, Enum):
    """userbusinesses_timezone_id_enum_param enum values."""

    VALUE_0 = "0"
    VALUE_1 = "1"
    VALUE_2 = "2"
    VALUE_3 = "3"
    VALUE_4 = "4"
    VALUE_5 = "5"
    VALUE_6 = "6"
    VALUE_7 = "7"
    VALUE_8 = "8"
    VALUE_9 = "9"
    VALUE_10 = "10"
    VALUE_11 = "11"
    VALUE_12 = "12"
    VALUE_13 = "13"
    VALUE_14 = "14"
    VALUE_15 = "15"
    VALUE_16 = "16"
    VALUE_17 = "17"
    VALUE_18 = "18"
    VALUE_19 = "19"
    VALUE_20 = "20"
    VALUE_21 = "21"
    VALUE_22 = "22"
    VALUE_23 = "23"
    VALUE_24 = "24"
    VALUE_25 = "25"
    VALUE_26 = "26"
    VALUE_27 = "27"
    VALUE_28 = "28"
    VALUE_29 = "29"
    VALUE_30 = "30"
    VALUE_31 = "31"
    VALUE_32 = "32"
    VALUE_33 = "33"
    VALUE_34 = "34"
    VALUE_35 = "35"
    VALUE_36 = "36"
    VALUE_37 = "37"
    VALUE_38 = "38"
    VALUE_39 = "39"
    VALUE_40 = "40"
    VALUE_41 = "41"
    VALUE_42 = "42"
    VALUE_43 = "43"
    VALUE_44 = "44"
    VALUE_45 = "45"
    VALUE_46 = "46"
    VALUE_47 = "47"
    VALUE_48 = "48"
    VALUE_49 = "49"
    VALUE_50 = "50"
    VALUE_51 = "51"
    VALUE_52 = "52"
    VALUE_53 = "53"
    VALUE_54 = "54"
    VALUE_55 = "55"
    VALUE_56 = "56"
    VALUE_57 = "57"
    VALUE_58 = "58"
    VALUE_59 = "59"
    VALUE_60 = "60"
    VALUE_61 = "61"
    VALUE_62 = "62"
    VALUE_63 = "63"
    VALUE_64 = "64"
    VALUE_65 = "65"
    VALUE_66 = "66"
    VALUE_67 = "67"
    VALUE_68 = "68"
    VALUE_69 = "69"
    VALUE_70 = "70"
    VALUE_71 = "71"
    VALUE_72 = "72"
    VALUE_73 = "73"
    VALUE_74 = "74"
    VALUE_75 = "75"
    VALUE_76 = "76"
    VALUE_77 = "77"
    VALUE_78 = "78"
    VALUE_79 = "79"
    VALUE_80 = "80"
    VALUE_81 = "81"
    VALUE_82 = "82"
    VALUE_83 = "83"
    VALUE_84 = "84"
    VALUE_85 = "85"
    VALUE_86 = "86"
    VALUE_87 = "87"
    VALUE_88 = "88"
    VALUE_89 = "89"
    VALUE_90 = "90"
    VALUE_91 = "91"
    VALUE_92 = "92"
    VALUE_93 = "93"
    VALUE_94 = "94"
    VALUE_95 = "95"
    VALUE_96 = "96"
    VALUE_97 = "97"
    VALUE_98 = "98"
    VALUE_99 = "99"
    VALUE_100 = "100"
    VALUE_101 = "101"
    VALUE_102 = "102"
    VALUE_103 = "103"
    VALUE_104 = "104"
    VALUE_105 = "105"
    VALUE_106 = "106"
    VALUE_107 = "107"
    VALUE_108 = "108"
    VALUE_109 = "109"
    VALUE_110 = "110"
    VALUE_111 = "111"
    VALUE_112 = "112"
    VALUE_113 = "113"
    VALUE_114 = "114"
    VALUE_115 = "115"
    VALUE_116 = "116"
    VALUE_117 = "117"
    VALUE_118 = "118"
    VALUE_119 = "119"
    VALUE_120 = "120"
    VALUE_121 = "121"
    VALUE_122 = "122"
    VALUE_123 = "123"
    VALUE_124 = "124"
    VALUE_125 = "125"
    VALUE_126 = "126"
    VALUE_127 = "127"
    VALUE_128 = "128"
    VALUE_129 = "129"
    VALUE_130 = "130"
    VALUE_131 = "131"
    VALUE_132 = "132"
    VALUE_133 = "133"
    VALUE_134 = "134"
    VALUE_135 = "135"
    VALUE_136 = "136"
    VALUE_137 = "137"
    VALUE_138 = "138"
    VALUE_139 = "139"
    VALUE_140 = "140"
    VALUE_141 = "141"
    VALUE_142 = "142"
    VALUE_143 = "143"
    VALUE_144 = "144"
    VALUE_145 = "145"
    VALUE_146 = "146"
    VALUE_147 = "147"
    VALUE_148 = "148"
    VALUE_149 = "149"
    VALUE_150 = "150"
    VALUE_151 = "151"
    VALUE_152 = "152"
    VALUE_153 = "153"
    VALUE_154 = "154"
    VALUE_155 = "155"
    VALUE_156 = "156"
    VALUE_157 = "157"
    VALUE_158 = "158"
    VALUE_159 = "159"
    VALUE_160 = "160"
    VALUE_161 = "161"
    VALUE_162 = "162"
    VALUE_163 = "163"
    VALUE_164 = "164"
    VALUE_165 = "165"
    VALUE_166 = "166"
    VALUE_167 = "167"
    VALUE_168 = "168"
    VALUE_169 = "169"
    VALUE_170 = "170"
    VALUE_171 = "171"
    VALUE_172 = "172"
    VALUE_173 = "173"
    VALUE_174 = "174"
    VALUE_175 = "175"
    VALUE_176 = "176"
    VALUE_177 = "177"
    VALUE_178 = "178"
    VALUE_179 = "179"
    VALUE_180 = "180"
    VALUE_181 = "181"
    VALUE_182 = "182"
    VALUE_183 = "183"
    VALUE_184 = "184"
    VALUE_185 = "185"
    VALUE_186 = "186"
    VALUE_187 = "187"
    VALUE_188 = "188"
    VALUE_189 = "189"
    VALUE_190 = "190"
    VALUE_191 = "191"
    VALUE_192 = "192"
    VALUE_193 = "193"
    VALUE_194 = "194"
    VALUE_195 = "195"
    VALUE_196 = "196"
    VALUE_197 = "197"
    VALUE_198 = "198"
    VALUE_199 = "199"
    VALUE_200 = "200"
    VALUE_201 = "201"
    VALUE_202 = "202"
    VALUE_203 = "203"
    VALUE_204 = "204"
    VALUE_205 = "205"
    VALUE_206 = "206"
    VALUE_207 = "207"
    VALUE_208 = "208"
    VALUE_209 = "209"
    VALUE_210 = "210"
    VALUE_211 = "211"
    VALUE_212 = "212"
    VALUE_213 = "213"
    VALUE_214 = "214"
    VALUE_215 = "215"
    VALUE_216 = "216"
    VALUE_217 = "217"
    VALUE_218 = "218"
    VALUE_219 = "219"
    VALUE_220 = "220"
    VALUE_221 = "221"
    VALUE_222 = "222"
    VALUE_223 = "223"
    VALUE_224 = "224"
    VALUE_225 = "225"
    VALUE_226 = "226"
    VALUE_227 = "227"
    VALUE_228 = "228"
    VALUE_229 = "229"
    VALUE_230 = "230"
    VALUE_231 = "231"
    VALUE_232 = "232"
    VALUE_233 = "233"
    VALUE_234 = "234"
    VALUE_235 = "235"
    VALUE_236 = "236"
    VALUE_237 = "237"
    VALUE_238 = "238"
    VALUE_239 = "239"
    VALUE_240 = "240"
    VALUE_241 = "241"
    VALUE_242 = "242"
    VALUE_243 = "243"
    VALUE_244 = "244"
    VALUE_245 = "245"
    VALUE_246 = "246"
    VALUE_247 = "247"
    VALUE_248 = "248"
    VALUE_249 = "249"
    VALUE_250 = "250"
    VALUE_251 = "251"
    VALUE_252 = "252"
    VALUE_253 = "253"
    VALUE_254 = "254"
    VALUE_255 = "255"
    VALUE_256 = "256"
    VALUE_257 = "257"
    VALUE_258 = "258"
    VALUE_259 = "259"
    VALUE_260 = "260"
    VALUE_261 = "261"
    VALUE_262 = "262"
    VALUE_263 = "263"
    VALUE_264 = "264"
    VALUE_265 = "265"
    VALUE_266 = "266"
    VALUE_267 = "267"
    VALUE_268 = "268"
    VALUE_269 = "269"
    VALUE_270 = "270"
    VALUE_271 = "271"
    VALUE_272 = "272"
    VALUE_273 = "273"
    VALUE_274 = "274"
    VALUE_275 = "275"
    VALUE_276 = "276"
    VALUE_277 = "277"
    VALUE_278 = "278"
    VALUE_279 = "279"
    VALUE_280 = "280"
    VALUE_281 = "281"
    VALUE_282 = "282"
    VALUE_283 = "283"
    VALUE_284 = "284"
    VALUE_285 = "285"
    VALUE_286 = "286"
    VALUE_287 = "287"
    VALUE_288 = "288"
    VALUE_289 = "289"
    VALUE_290 = "290"
    VALUE_291 = "291"
    VALUE_292 = "292"
    VALUE_293 = "293"
    VALUE_294 = "294"
    VALUE_295 = "295"
    VALUE_296 = "296"
    VALUE_297 = "297"
    VALUE_298 = "298"
    VALUE_299 = "299"
    VALUE_300 = "300"
    VALUE_301 = "301"
    VALUE_302 = "302"
    VALUE_303 = "303"
    VALUE_304 = "304"
    VALUE_305 = "305"
    VALUE_306 = "306"
    VALUE_307 = "307"
    VALUE_308 = "308"
    VALUE_309 = "309"
    VALUE_310 = "310"
    VALUE_311 = "311"
    VALUE_312 = "312"
    VALUE_313 = "313"
    VALUE_314 = "314"
    VALUE_315 = "315"
    VALUE_316 = "316"
    VALUE_317 = "317"
    VALUE_318 = "318"
    VALUE_319 = "319"
    VALUE_320 = "320"
    VALUE_321 = "321"
    VALUE_322 = "322"
    VALUE_323 = "323"
    VALUE_324 = "324"
    VALUE_325 = "325"
    VALUE_326 = "326"
    VALUE_327 = "327"
    VALUE_328 = "328"
    VALUE_329 = "329"
    VALUE_330 = "330"
    VALUE_331 = "331"
    VALUE_332 = "332"
    VALUE_333 = "333"
    VALUE_334 = "334"
    VALUE_335 = "335"
    VALUE_336 = "336"
    VALUE_337 = "337"
    VALUE_338 = "338"
    VALUE_339 = "339"
    VALUE_340 = "340"
    VALUE_341 = "341"
    VALUE_342 = "342"
    VALUE_343 = "343"
    VALUE_344 = "344"
    VALUE_345 = "345"
    VALUE_346 = "346"
    VALUE_347 = "347"
    VALUE_348 = "348"
    VALUE_349 = "349"
    VALUE_350 = "350"
    VALUE_351 = "351"
    VALUE_352 = "352"
    VALUE_353 = "353"
    VALUE_354 = "354"
    VALUE_355 = "355"
    VALUE_356 = "356"
    VALUE_357 = "357"
    VALUE_358 = "358"
    VALUE_359 = "359"
    VALUE_360 = "360"
    VALUE_361 = "361"
    VALUE_362 = "362"
    VALUE_363 = "363"
    VALUE_364 = "364"
    VALUE_365 = "365"
    VALUE_366 = "366"
    VALUE_367 = "367"
    VALUE_368 = "368"
    VALUE_369 = "369"
    VALUE_370 = "370"
    VALUE_371 = "371"
    VALUE_372 = "372"
    VALUE_373 = "373"
    VALUE_374 = "374"
    VALUE_375 = "375"
    VALUE_376 = "376"
    VALUE_377 = "377"
    VALUE_378 = "378"
    VALUE_379 = "379"
    VALUE_380 = "380"
    VALUE_381 = "381"
    VALUE_382 = "382"
    VALUE_383 = "383"
    VALUE_384 = "384"
    VALUE_385 = "385"
    VALUE_386 = "386"
    VALUE_387 = "387"
    VALUE_388 = "388"
    VALUE_389 = "389"
    VALUE_390 = "390"
    VALUE_391 = "391"
    VALUE_392 = "392"
    VALUE_393 = "393"
    VALUE_394 = "394"
    VALUE_395 = "395"
    VALUE_396 = "396"
    VALUE_397 = "397"
    VALUE_398 = "398"
    VALUE_399 = "399"
    VALUE_400 = "400"
    VALUE_401 = "401"
    VALUE_402 = "402"
    VALUE_403 = "403"
    VALUE_404 = "404"
    VALUE_405 = "405"
    VALUE_406 = "406"
    VALUE_407 = "407"
    VALUE_408 = "408"
    VALUE_409 = "409"
    VALUE_410 = "410"
    VALUE_411 = "411"
    VALUE_412 = "412"
    VALUE_413 = "413"
    VALUE_414 = "414"
    VALUE_415 = "415"
    VALUE_416 = "416"
    VALUE_417 = "417"
    VALUE_418 = "418"
    VALUE_419 = "419"
    VALUE_420 = "420"
    VALUE_421 = "421"
    VALUE_422 = "422"
    VALUE_423 = "423"
    VALUE_424 = "424"
    VALUE_425 = "425"
    VALUE_426 = "426"
    VALUE_427 = "427"
    VALUE_428 = "428"
    VALUE_429 = "429"
    VALUE_430 = "430"
    VALUE_431 = "431"
    VALUE_432 = "432"
    VALUE_433 = "433"
    VALUE_434 = "434"
    VALUE_435 = "435"
    VALUE_436 = "436"
    VALUE_437 = "437"
    VALUE_438 = "438"
    VALUE_439 = "439"
    VALUE_440 = "440"
    VALUE_441 = "441"
    VALUE_442 = "442"
    VALUE_443 = "443"
    VALUE_444 = "444"
    VALUE_445 = "445"
    VALUE_446 = "446"
    VALUE_447 = "447"
    VALUE_448 = "448"
    VALUE_449 = "449"
    VALUE_450 = "450"
    VALUE_451 = "451"
    VALUE_452 = "452"
    VALUE_453 = "453"
    VALUE_454 = "454"
    VALUE_455 = "455"
    VALUE_456 = "456"
    VALUE_457 = "457"
    VALUE_458 = "458"
    VALUE_459 = "459"
    VALUE_460 = "460"
    VALUE_461 = "461"
    VALUE_462 = "462"
    VALUE_463 = "463"
    VALUE_464 = "464"
    VALUE_465 = "465"
    VALUE_466 = "466"
    VALUE_467 = "467"
    VALUE_468 = "468"
    VALUE_469 = "469"
    VALUE_470 = "470"
    VALUE_471 = "471"
    VALUE_472 = "472"
    VALUE_473 = "473"
    VALUE_474 = "474"
    VALUE_475 = "475"
    VALUE_476 = "476"
    VALUE_477 = "477"
    VALUE_478 = "478"
    VALUE_479 = "479"
    VALUE_480 = "480"


class userbusinesses_vertical_enum_param(str, Enum):
    """userbusinesses_vertical_enum_param enum values."""

    ADVERTISING = "ADVERTISING"
    AUTOMOTIVE = "AUTOMOTIVE"
    CONSUMER_PACKAGED_GOODS = "CONSUMER_PACKAGED_GOODS"
    ECOMMERCE = "ECOMMERCE"
    EDUCATION = "EDUCATION"
    ENERGY_AND_UTILITIES = "ENERGY_AND_UTILITIES"
    ENTERTAINMENT_AND_MEDIA = "ENTERTAINMENT_AND_MEDIA"
    FINANCIAL_SERVICES = "FINANCIAL_SERVICES"
    GAMING = "GAMING"
    GOVERNMENT_AND_POLITICS = "GOVERNMENT_AND_POLITICS"
    HEALTH = "HEALTH"
    LUXURY = "LUXURY"
    MARKETING = "MARKETING"
    NON_PROFIT = "NON_PROFIT"
    NOT_SET = "NOT_SET"
    ORGANIZATIONS_AND_ASSOCIATIONS = "ORGANIZATIONS_AND_ASSOCIATIONS"
    OTHER = "OTHER"
    PROFESSIONAL_SERVICES = "PROFESSIONAL_SERVICES"
    RESTAURANT = "RESTAURANT"
    RETAIL = "RETAIL"
    TECHNOLOGY = "TECHNOLOGY"
    TELECOM = "TELECOM"
    TRAVEL = "TRAVEL"


class userconversations_platform_enum_param(str, Enum):
    """userconversations_platform_enum_param enum values."""

    INSTAGRAM = "INSTAGRAM"
    MESSENGER = "MESSENGER"


class userevents_type_enum_param(str, Enum):
    """userevents_type_enum_param enum values."""

    attending = "attending"
    created = "created"
    declined = "declined"
    maybe = "maybe"
    not_replied = "not_replied"


class userfeed_backdated_time_granularity_enum_param(str, Enum):
    """userfeed_backdated_time_granularity_enum_param enum values."""

    day = "day"
    hour = "hour"
    min = "min"
    month = "month"
    none = "none"
    year = "year"


class userfeed_formatting_enum_param(str, Enum):
    """userfeed_formatting_enum_param enum values."""

    MARKDOWN = "MARKDOWN"
    PLAINTEXT = "PLAINTEXT"


class userfeed_place_attachment_setting_enum_param(str, Enum):
    """userfeed_place_attachment_setting_enum_param enum values."""

    VALUE_1 = "1"
    VALUE_2 = "2"


class userfeed_post_surfaces_blacklist_enum_param(str, Enum):
    """userfeed_post_surfaces_blacklist_enum_param enum values."""

    VALUE_1 = "1"
    VALUE_2 = "2"
    VALUE_3 = "3"
    VALUE_4 = "4"
    VALUE_5 = "5"


class userfeed_posting_to_redspace_enum_param(str, Enum):
    """userfeed_posting_to_redspace_enum_param enum values."""

    disabled = "disabled"
    enabled = "enabled"


class userfeed_target_surface_enum_param(str, Enum):
    """userfeed_target_surface_enum_param enum values."""

    STORY = "STORY"
    TIMELINE = "TIMELINE"


class userfeed_unpublished_content_type_enum_param(str, Enum):
    """userfeed_unpublished_content_type_enum_param enum values."""

    ADS_POST = "ADS_POST"
    DRAFT = "DRAFT"
    INLINE_CREATED = "INLINE_CREATED"
    PUBLISHED = "PUBLISHED"
    REVIEWABLE_BRANDED_CONTENT = "REVIEWABLE_BRANDED_CONTENT"
    SCHEDULED = "SCHEDULED"
    SCHEDULED_RECURRING = "SCHEDULED_RECURRING"


class userfundraisers_fundraiser_type_enum_param(str, Enum):
    """userfundraisers_fundraiser_type_enum_param enum values."""

    person_for_charity = "person_for_charity"


class userinsights_breakdown_enum_param(str, Enum):
    """userinsights_breakdown_enum_param enum values."""

    age = "age"
    city = "city"
    contact_button_type = "contact_button_type"
    country = "country"
    follow_type = "follow_type"
    gender = "gender"
    media_product_type = "media_product_type"


class userinsights_metric_enum_param(str, Enum):
    """userinsights_metric_enum_param enum values."""

    accounts_engaged = "accounts_engaged"
    comments = "comments"
    content_views = "content_views"
    engaged_audience_demographics = "engaged_audience_demographics"
    follower_count = "follower_count"
    follower_demographics = "follower_demographics"
    follows_and_unfollows = "follows_and_unfollows"
    impressions = "impressions"
    likes = "likes"
    online_followers = "online_followers"
    profile_links_taps = "profile_links_taps"
    profile_views = "profile_views"
    quotes = "quotes"
    reach = "reach"
    reached_audience_demographics = "reached_audience_demographics"
    replies = "replies"
    reposts = "reposts"
    saves = "saves"
    shares = "shares"
    threads_follower_demographics = "threads_follower_demographics"
    threads_followers = "threads_followers"
    threads_likes = "threads_likes"
    threads_replies = "threads_replies"
    threads_views = "threads_views"
    total_interactions = "total_interactions"
    views = "views"
    website_clicks = "website_clicks"


class userinsights_metric_type_enum_param(str, Enum):
    """userinsights_metric_type_enum_param enum values."""

    default = "default"
    time_series = "time_series"
    total_value = "total_value"


class userinsights_period_enum_param(str, Enum):
    """userinsights_period_enum_param enum values."""

    day = "day"
    days_28 = "days_28"
    lifetime = "lifetime"
    month = "month"
    total_over_range = "total_over_range"
    week = "week"


class userinsights_timeframe_enum_param(str, Enum):
    """userinsights_timeframe_enum_param enum values."""

    last_14_days = "last_14_days"
    last_30_days = "last_30_days"
    last_90_days = "last_90_days"
    prev_month = "prev_month"
    this_month = "this_month"
    this_week = "this_week"


class userlive_videos_broadcast_status_enum_param(str, Enum):
    """userlive_videos_broadcast_status_enum_param enum values."""

    LIVE = "LIVE"
    LIVE_STOPPED = "LIVE_STOPPED"
    PROCESSING = "PROCESSING"
    SCHEDULED_CANCELED = "SCHEDULED_CANCELED"
    SCHEDULED_EXPIRED = "SCHEDULED_EXPIRED"
    SCHEDULED_LIVE = "SCHEDULED_LIVE"
    SCHEDULED_UNPUBLISHED = "SCHEDULED_UNPUBLISHED"
    UNPUBLISHED = "UNPUBLISHED"
    VOD = "VOD"


class userlive_videos_projection_enum_param(str, Enum):
    """userlive_videos_projection_enum_param enum values."""

    CUBEMAP = "CUBEMAP"
    EQUIRECTANGULAR = "EQUIRECTANGULAR"
    HALF_EQUIRECTANGULAR = "HALF_EQUIRECTANGULAR"


class userlive_videos_source_enum_param(str, Enum):
    """userlive_videos_source_enum_param enum values."""

    owner = "owner"
    target = "target"


class userlive_videos_spatial_audio_format_enum_param(str, Enum):
    """userlive_videos_spatial_audio_format_enum_param enum values."""

    ambiX_4 = "ambiX_4"


class userlive_videos_status_enum_param(str, Enum):
    """userlive_videos_status_enum_param enum values."""

    LIVE_NOW = "LIVE_NOW"
    SCHEDULED_CANCELED = "SCHEDULED_CANCELED"
    SCHEDULED_LIVE = "SCHEDULED_LIVE"
    SCHEDULED_UNPUBLISHED = "SCHEDULED_UNPUBLISHED"
    UNPUBLISHED = "UNPUBLISHED"


class userlive_videos_stereoscopic_mode_enum_param(str, Enum):
    """userlive_videos_stereoscopic_mode_enum_param enum values."""

    LEFT_RIGHT = "LEFT_RIGHT"
    MONO = "MONO"
    TOP_BOTTOM = "TOP_BOTTOM"


class userlive_videos_stream_type_enum_param(str, Enum):
    """userlive_videos_stream_type_enum_param enum values."""

    AMBIENT = "AMBIENT"
    REGULAR = "REGULAR"


class usernotifications_filtering_enum_param(str, Enum):
    """usernotifications_filtering_enum_param enum values."""

    ema = "ema"
    groups = "groups"
    groups_social = "groups_social"


class usernotifications_type_enum_param(str, Enum):
    """usernotifications_type_enum_param enum values."""

    content_update = "content_update"
    generic = "generic"


class userpermissions_status_enum_param(str, Enum):
    """userpermissions_status_enum_param enum values."""

    declined = "declined"
    expired = "expired"
    granted = "granted"


class userphotos_backdated_time_granularity_enum_param(str, Enum):
    """userphotos_backdated_time_granularity_enum_param enum values."""

    day = "day"
    hour = "hour"
    min = "min"
    month = "month"
    none = "none"
    year = "year"


class userphotos_type_enum_param(str, Enum):
    """userphotos_type_enum_param enum values."""

    tagged = "tagged"
    uploaded = "uploaded"


class userphotos_unpublished_content_type_enum_param(str, Enum):
    """userphotos_unpublished_content_type_enum_param enum values."""

    ADS_POST = "ADS_POST"
    DRAFT = "DRAFT"
    INLINE_CREATED = "INLINE_CREATED"
    PUBLISHED = "PUBLISHED"
    REVIEWABLE_BRANDED_CONTENT = "REVIEWABLE_BRANDED_CONTENT"
    SCHEDULED = "SCHEDULED"
    SCHEDULED_RECURRING = "SCHEDULED_RECURRING"


class userpicture_type_enum_param(str, Enum):
    """userpicture_type_enum_param enum values."""

    album = "album"
    large = "large"
    normal = "normal"
    small = "small"
    square = "square"


class uservideos_container_type_enum_param(str, Enum):
    """uservideos_container_type_enum_param enum values."""

    ACO_VIDEO_VARIATION = "ACO_VIDEO_VARIATION"
    ADS_AI_GENERATED = "ADS_AI_GENERATED"
    AD_BREAK_PREVIEW = "AD_BREAK_PREVIEW"
    AD_DERIVATIVE = "AD_DERIVATIVE"
    AD_LIBRARY_WATERMARK = "AD_LIBRARY_WATERMARK"
    ALBUM_MULTIMEDIA_POST = "ALBUM_MULTIMEDIA_POST"
    ALOHA_SUPERFRAME = "ALOHA_SUPERFRAME"
    APP_REREVIEW_SCREENCAST = "APP_REREVIEW_SCREENCAST"
    APP_REVIEW_SCREENCAST = "APP_REVIEW_SCREENCAST"
    ASSET_MANAGER = "ASSET_MANAGER"
    ATLAS_VIDEO = "ATLAS_VIDEO"
    AUDIO_BROADCAST = "AUDIO_BROADCAST"
    AUDIO_COMMENT = "AUDIO_COMMENT"
    BROADCAST = "BROADCAST"
    CANVAS = "CANVAS"
    CMS_MEDIA_MANAGER = "CMS_MEDIA_MANAGER"
    CONTAINED_POST_ATTACHMENT = "CONTAINED_POST_ATTACHMENT"
    CONTAINED_POST_AUDIO_BROADCAST = "CONTAINED_POST_AUDIO_BROADCAST"
    CONTAINED_POST_COPYRIGHT_REFERENCE_BROADCAST = "CONTAINED_POST_COPYRIGHT_REFERENCE_BROADCAST"
    COPYRIGHT_REFERENCE_BROADCAST = "COPYRIGHT_REFERENCE_BROADCAST"
    COPYRIGHT_REFERENCE_IG_XPOST_VIDEO = "COPYRIGHT_REFERENCE_IG_XPOST_VIDEO"
    COPYRIGHT_REFERENCE_VIDEO = "COPYRIGHT_REFERENCE_VIDEO"
    CREATION_ML_PRECREATION = "CREATION_ML_PRECREATION"
    CREATOR_FAN_CHALLENGE = "CREATOR_FAN_CHALLENGE"
    CREATOR_STOREFRONT_PERSONALIZED_VIDEO = "CREATOR_STOREFRONT_PERSONALIZED_VIDEO"
    DATAGENIX_VIDEO = "DATAGENIX_VIDEO"
    DCO_AD_ASSET_FEED = "DCO_AD_ASSET_FEED"
    DCO_AUTOGEN_VIDEO = "DCO_AUTOGEN_VIDEO"
    DCO_TRIMMED_VIDEO = "DCO_TRIMMED_VIDEO"
    DIM_SUM = "DIM_SUM"
    DIRECTED_POST_ATTACHMENT = "DIRECTED_POST_ATTACHMENT"
    DIRECT_INBOX = "DIRECT_INBOX"
    DROPS_SHOPPING_EVENT_PAGE = "DROPS_SHOPPING_EVENT_PAGE"
    DYNAMIC_ITEM_VIDEO = "DYNAMIC_ITEM_VIDEO"
    DYNAMIC_TEMPLATE_VIDEO = "DYNAMIC_TEMPLATE_VIDEO"
    EVENT_COVER_VIDEO = "EVENT_COVER_VIDEO"
    EVENT_TOUR = "EVENT_TOUR"
    FACECAST_DVR = "FACECAST_DVR"
    FB_AVATAR_ANIMATED_SATP = "FB_AVATAR_ANIMATED_SATP"
    FB_COLLECTIBLE_VIDEO = "FB_COLLECTIBLE_VIDEO"
    FB_SHORTS = "FB_SHORTS"
    FB_SHORTS_CONTENT_REMIXABLE = "FB_SHORTS_CONTENT_REMIXABLE"
    FB_SHORTS_GROUP_POST = "FB_SHORTS_GROUP_POST"
    FB_SHORTS_LINKED_PRODUCT = "FB_SHORTS_LINKED_PRODUCT"
    FB_SHORTS_PMV_POST = "FB_SHORTS_PMV_POST"
    FB_SHORTS_POST = "FB_SHORTS_POST"
    FB_SHORTS_REMIX_POST = "FB_SHORTS_REMIX_POST"
    FUNDRAISER_COVER_VIDEO = "FUNDRAISER_COVER_VIDEO"
    GAME_CLIP = "GAME_CLIP"
    GIF_TO_VIDEO = "GIF_TO_VIDEO"
    GOODWILL_ANNIVERSARY_DEPRECATED = "GOODWILL_ANNIVERSARY_DEPRECATED"
    GOODWILL_ANNIVERSARY_PROMOTION_DEPRECATED = "GOODWILL_ANNIVERSARY_PROMOTION_DEPRECATED"
    GOODWILL_VIDEO_CONTAINED_SHARE = "GOODWILL_VIDEO_CONTAINED_SHARE"
    GOODWILL_VIDEO_PROMOTION = "GOODWILL_VIDEO_PROMOTION"
    GOODWILL_VIDEO_SHARE = "GOODWILL_VIDEO_SHARE"
    GOODWILL_VIDEO_TOKEN_REQUIRED = "GOODWILL_VIDEO_TOKEN_REQUIRED"
    GROUP_POST = "GROUP_POST"
    HEURISTIC_CLUSTER_VIDEO = "HEURISTIC_CLUSTER_VIDEO"
    HIGHLIGHT_CLIP_VIDEO = "HIGHLIGHT_CLIP_VIDEO"
    HORIZON_WORLDS_TV = "HORIZON_WORLDS_TV"
    HUDDLE_BROADCAST = "HUDDLE_BROADCAST"
    IG_REELS_XPV = "IG_REELS_XPV"
    IG_STORIES_READER = "IG_STORIES_READER"
    INJECTABLE = "INJECTABLE"
    INSPIRATION_VIDEO = "INSPIRATION_VIDEO"
    INSTAGRAM_VIDEO_COPY = "INSTAGRAM_VIDEO_COPY"
    INSTANT_APPLICATION_PREVIEW = "INSTANT_APPLICATION_PREVIEW"
    INSTANT_ARTICLE = "INSTANT_ARTICLE"
    ISSUE_MODULE = "ISSUE_MODULE"
    LEARN = "LEARN"
    LEGACY = "LEGACY"
    LEGACY_CONTAINED_POST_BROADCAST = "LEGACY_CONTAINED_POST_BROADCAST"
    LIVE_AUDIO_ROOM_BROADCAST = "LIVE_AUDIO_ROOM_BROADCAST"
    LIVE_CLIP_PREVIEW = "LIVE_CLIP_PREVIEW"
    LIVE_CLIP_WORKCHAT = "LIVE_CLIP_WORKCHAT"
    LIVE_CREATIVE_KIT_VIDEO = "LIVE_CREATIVE_KIT_VIDEO"
    LIVE_PHOTO = "LIVE_PHOTO"
    LOOK_NOW_DEPRECATED = "LOOK_NOW_DEPRECATED"
    MARKETPLACE_LISTING_VIDEO = "MARKETPLACE_LISTING_VIDEO"
    MARKETPLACE_PRE_RECORDED_VIDEO = "MARKETPLACE_PRE_RECORDED_VIDEO"
    MOMENTS_VIDEO = "MOMENTS_VIDEO"
    MUSIC_CLIP = "MUSIC_CLIP"
    MUSIC_CLIP_IN_COMMENT = "MUSIC_CLIP_IN_COMMENT"
    MUSIC_CLIP_IN_LIGHTWEIGHT_STATUS = "MUSIC_CLIP_IN_LIGHTWEIGHT_STATUS"
    MUSIC_CLIP_IN_MSGR_NOTE = "MUSIC_CLIP_IN_MSGR_NOTE"
    MUSIC_CLIP_IN_POLL_OPTION = "MUSIC_CLIP_IN_POLL_OPTION"
    MUSIC_CLIP_ON_DATING_PROFILE = "MUSIC_CLIP_ON_DATING_PROFILE"
    NEO_ASYNC_GAME_VIDEO = "NEO_ASYNC_GAME_VIDEO"
    NEW_CONTAINED_POST_BROADCAST = "NEW_CONTAINED_POST_BROADCAST"
    NO_STORY = "NO_STORY"
    OCULUS_CREATOR_PORTAL = "OCULUS_CREATOR_PORTAL"
    OCULUS_VENUES_BROADCAST = "OCULUS_VENUES_BROADCAST"
    ORIGINALITY_SELF_ADVOCACY = "ORIGINALITY_SELF_ADVOCACY"
    PAGES_COVER_VIDEO = "PAGES_COVER_VIDEO"
    PAGE_REVIEW_SCREENCAST = "PAGE_REVIEW_SCREENCAST"
    PAGE_SLIDESHOW_VIDEO = "PAGE_SLIDESHOW_VIDEO"
    PAID_CONTENT_PREVIEW = "PAID_CONTENT_PREVIEW"
    PAID_CONTENT_VIDEO = "PAID_CONTENT_VIDEO"
    PAID_CONTENT_VIDEO__POST = "PAID_CONTENT_VIDEO__POST"
    PIXELCLOUD = "PIXELCLOUD"
    PODCAST_HIGHLIGHT = "PODCAST_HIGHLIGHT"
    PODCAST_ML_PREVIEW = "PODCAST_ML_PREVIEW"
    PODCAST_ML_PREVIEW_NO_NEWSFEED_STORY = "PODCAST_ML_PREVIEW_NO_NEWSFEED_STORY"
    PODCAST_RSS = "PODCAST_RSS"
    PODCAST_RSS_EPHEMERAL = "PODCAST_RSS_EPHEMERAL"
    PODCAST_RSS_NO_NEWSFEED_STORY = "PODCAST_RSS_NO_NEWSFEED_STORY"
    PODCAST_VOICES = "PODCAST_VOICES"
    PODCAST_VOICES_NO_NEWSFEED_STORY = "PODCAST_VOICES_NO_NEWSFEED_STORY"
    PREMIERE_SOURCE = "PREMIERE_SOURCE"
    PREMIUM_MUSIC_VIDEO_CLIP = "PREMIUM_MUSIC_VIDEO_CLIP"
    PREMIUM_MUSIC_VIDEO_CROPPED_CLIP = "PREMIUM_MUSIC_VIDEO_CROPPED_CLIP"
    PREMIUM_MUSIC_VIDEO_NO_NEWSFEED_STORY = "PREMIUM_MUSIC_VIDEO_NO_NEWSFEED_STORY"
    PREMIUM_MUSIC_VIDEO_WITH_NEWSFEED_STORY = "PREMIUM_MUSIC_VIDEO_WITH_NEWSFEED_STORY"
    PRIVATE_GALLERY_VIDEO = "PRIVATE_GALLERY_VIDEO"
    PRODUCT_VIDEO = "PRODUCT_VIDEO"
    PROFILE_COVER_VIDEO = "PROFILE_COVER_VIDEO"
    PROFILE_INTRO_CARD = "PROFILE_INTRO_CARD"
    PROFILE_VIDEO = "PROFILE_VIDEO"
    PROTON = "PROTON"
    QUICK_CLIP_WORKPLACE_POST = "QUICK_CLIP_WORKPLACE_POST"
    QUICK_PROMOTION = "QUICK_PROMOTION"
    REPLACE_VIDEO = "REPLACE_VIDEO"
    SALES_CLIENT_INTERACTION = "SALES_CLIENT_INTERACTION"
    SHOWREEL_NATIVE_DUMMY_VIDEO = "SHOWREEL_NATIVE_DUMMY_VIDEO"
    SLIDESHOW_ANIMOTO = "SLIDESHOW_ANIMOTO"
    SLIDESHOW_SHAKR = "SLIDESHOW_SHAKR"
    SLIDESHOW_VARIATION_VIDEO = "SLIDESHOW_VARIATION_VIDEO"
    SOUND_PLATFORM_STREAM = "SOUND_PLATFORM_STREAM"
    SRT_ATTACHMENT = "SRT_ATTACHMENT"
    STORIES_VIDEO = "STORIES_VIDEO"
    STORYLINE = "STORYLINE"
    STORYLINE_WITH_EXTERNAL_MUSIC = "STORYLINE_WITH_EXTERNAL_MUSIC"
    STORY_ARCHIVE_VIDEO = "STORY_ARCHIVE_VIDEO"
    STORY_CARD_TEMPLATE = "STORY_CARD_TEMPLATE"
    STREAM_HIGHLIGHTS_VIDEO = "STREAM_HIGHLIGHTS_VIDEO"
    TAROT_DIGEST = "TAROT_DIGEST"
    TEMPORARY_UNLISTED = "TEMPORARY_UNLISTED"
    TEMP_VIDEO_COPYRIGHT_SCAN = "TEMP_VIDEO_COPYRIGHT_SCAN"
    UNLISTED = "UNLISTED"
    UNLISTED_OCULUS = "UNLISTED_OCULUS"
    VIDEO_COMMENT = "VIDEO_COMMENT"
    VIDEO_COMPOSITION_VARIATION = "VIDEO_COMPOSITION_VARIATION"
    VIDEO_CREATIVE_EDITOR_AUTOGEN_AD_VIDEO = "VIDEO_CREATIVE_EDITOR_AUTOGEN_AD_VIDEO"
    VIDEO_SUPERRES = "VIDEO_SUPERRES"
    VOICES_ARTICLE_VIDEO = "VOICES_ARTICLE_VIDEO"
    VU_GENERATED_VIDEO = "VU_GENERATED_VIDEO"
    WOODHENGE = "WOODHENGE"
    WORK_KNOWLEDGE_VIDEO = "WORK_KNOWLEDGE_VIDEO"
    YOUR_DAY = "YOUR_DAY"


class uservideos_content_category_enum_param(str, Enum):
    """uservideos_content_category_enum_param enum values."""

    BEAUTY_FASHION = "BEAUTY_FASHION"
    BUSINESS = "BUSINESS"
    CARS_TRUCKS = "CARS_TRUCKS"
    COMEDY = "COMEDY"
    CUTE_ANIMALS = "CUTE_ANIMALS"
    ENTERTAINMENT = "ENTERTAINMENT"
    FAMILY = "FAMILY"
    FOOD_HEALTH = "FOOD_HEALTH"
    HOME = "HOME"
    LIFESTYLE = "LIFESTYLE"
    MUSIC = "MUSIC"
    NEWS = "NEWS"
    OTHER = "OTHER"
    POLITICS = "POLITICS"
    SCIENCE = "SCIENCE"
    SPORTS = "SPORTS"
    TECHNOLOGY = "TECHNOLOGY"
    VIDEO_GAMING = "VIDEO_GAMING"


class uservideos_formatting_enum_param(str, Enum):
    """uservideos_formatting_enum_param enum values."""

    MARKDOWN = "MARKDOWN"
    PLAINTEXT = "PLAINTEXT"


class uservideos_original_projection_type_enum_param(str, Enum):
    """uservideos_original_projection_type_enum_param enum values."""

    cubemap = "cubemap"
    equirectangular = "equirectangular"
    half_equirectangular = "half_equirectangular"


class uservideos_swap_mode_enum_param(str, Enum):
    """uservideos_swap_mode_enum_param enum values."""

    replace = "replace"


class uservideos_type_enum_param(str, Enum):
    """uservideos_type_enum_param enum values."""

    TAGGED = "TAGGED"
    UPLOADED = "UPLOADED"


class uservideos_unpublished_content_type_enum_param(str, Enum):
    """uservideos_unpublished_content_type_enum_param enum values."""

    ADS_POST = "ADS_POST"
    DRAFT = "DRAFT"
    INLINE_CREATED = "INLINE_CREATED"
    PUBLISHED = "PUBLISHED"
    REVIEWABLE_BRANDED_CONTENT = "REVIEWABLE_BRANDED_CONTENT"
    SCHEDULED = "SCHEDULED"
    SCHEDULED_RECURRING = "SCHEDULED_RECURRING"


class uservideos_upload_phase_enum_param(str, Enum):
    """uservideos_upload_phase_enum_param enum values."""

    cancel = "cancel"
    finish = "finish"
    start = "start"
    transfer = "transfer"


class vehicle_availability(str, Enum):
    """vehicle_availability enum values."""

    AVAILABLE = "AVAILABLE"
    NOT_AVAILABLE = "NOT_AVAILABLE"
    PENDING = "PENDING"
    UNKNOWN = "UNKNOWN"


class vehicle_body_style(str, Enum):
    """vehicle_body_style enum values."""

    CONVERTIBLE = "CONVERTIBLE"
    COUPE = "COUPE"
    CROSSOVER = "CROSSOVER"
    ESTATE = "ESTATE"
    GRANDTOURER = "GRANDTOURER"
    HATCHBACK = "HATCHBACK"
    MINIBUS = "MINIBUS"
    MINIVAN = "MINIVAN"
    MPV = "MPV"
    NONE = "NONE"
    OTHER = "OTHER"
    PICKUP = "PICKUP"
    ROADSTER = "ROADSTER"
    SALOON = "SALOON"
    SEDAN = "SEDAN"
    SMALL_CAR = "SMALL_CAR"
    SPORTSCAR = "SPORTSCAR"
    SUPERCAR = "SUPERCAR"
    SUPERMINI = "SUPERMINI"
    SUV = "SUV"
    TRUCK = "TRUCK"
    VAN = "VAN"
    WAGON = "WAGON"


class vehicle_condition(str, Enum):
    """vehicle_condition enum values."""

    EXCELLENT = "EXCELLENT"
    FAIR = "FAIR"
    GOOD = "GOOD"
    NONE = "NONE"
    OTHER = "OTHER"
    POOR = "POOR"
    VERY_GOOD = "VERY_GOOD"


class vehicle_drivetrain(str, Enum):
    """vehicle_drivetrain enum values."""

    AWD = "AWD"
    FOUR_WD = "FOUR_WD"
    FWD = "FWD"
    NONE = "NONE"
    OTHER = "OTHER"
    RWD = "RWD"
    TWO_WD = "TWO_WD"


class vehicle_fuel_type(str, Enum):
    """vehicle_fuel_type enum values."""

    DIESEL = "DIESEL"
    ELECTRIC = "ELECTRIC"
    FLEX = "FLEX"
    GASOLINE = "GASOLINE"
    HYBRID = "HYBRID"
    NONE = "NONE"
    OTHER = "OTHER"
    PETROL = "PETROL"
    PLUGIN_HYBRID = "PLUGIN_HYBRID"


class vehicle_state_of_vehicle(str, Enum):
    """vehicle_state_of_vehicle enum values."""

    CPO = "CPO"
    NEW = "NEW"
    USED = "USED"


class vehicle_transmission(str, Enum):
    """vehicle_transmission enum values."""

    AUTOMATIC = "AUTOMATIC"
    MANUAL = "MANUAL"
    NONE = "NONE"
    OTHER = "OTHER"


class vehicle_vehicle_type(str, Enum):
    """vehicle_vehicle_type enum values."""

    BOAT = "BOAT"
    CAR_TRUCK = "CAR_TRUCK"
    COMMERCIAL = "COMMERCIAL"
    MOTORCYCLE = "MOTORCYCLE"
    OTHER = "OTHER"
    POWERSPORT = "POWERSPORT"
    RV_CAMPER = "RV_CAMPER"
    TRAILER = "TRAILER"


class vehicleofferoverride_details_type_enum_param(str, Enum):
    """vehicleofferoverride_details_type_enum_param enum values."""

    COUNTRY = "COUNTRY"
    LANGUAGE = "LANGUAGE"
    LANGUAGE_AND_COUNTRY = "LANGUAGE_AND_COUNTRY"


class vehicleoverride_details_type_enum_param(str, Enum):
    """vehicleoverride_details_type_enum_param enum values."""

    COUNTRY = "COUNTRY"
    LANGUAGE = "LANGUAGE"
    LANGUAGE_AND_COUNTRY = "LANGUAGE_AND_COUNTRY"


class video_backdated_time_granularity(str, Enum):
    """video_backdated_time_granularity enum values."""

    day = "day"
    hour = "hour"
    min = "min"
    month = "month"
    none = "none"
    year = "year"


class video_content_category(str, Enum):
    """video_content_category enum values."""

    BEAUTY_FASHION = "BEAUTY_FASHION"
    BUSINESS = "BUSINESS"
    CARS_TRUCKS = "CARS_TRUCKS"
    COMEDY = "COMEDY"
    CUTE_ANIMALS = "CUTE_ANIMALS"
    ENTERTAINMENT = "ENTERTAINMENT"
    FAMILY = "FAMILY"
    FOOD_HEALTH = "FOOD_HEALTH"
    HOME = "HOME"
    LIFESTYLE = "LIFESTYLE"
    MUSIC = "MUSIC"
    NEWS = "NEWS"
    OTHER = "OTHER"
    POLITICS = "POLITICS"
    SCIENCE = "SCIENCE"
    SPORTS = "SPORTS"
    TECHNOLOGY = "TECHNOLOGY"
    VIDEO_GAMING = "VIDEO_GAMING"


class videocomments_comment_privacy_value_enum_param(str, Enum):
    """videocomments_comment_privacy_value_enum_param enum values."""

    DECLINED_BY_ADMIN_ASSISTANT = "DECLINED_BY_ADMIN_ASSISTANT"
    DEFAULT_PRIVACY = "DEFAULT_PRIVACY"
    FRIENDS_AND_POST_OWNER = "FRIENDS_AND_POST_OWNER"
    FRIENDS_ONLY = "FRIENDS_ONLY"
    GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE = "GRAPHQL_MULTIPLE_VALUE_HACK_DO_NOT_USE"
    OWNER_OR_COMMENTER = "OWNER_OR_COMMENTER"
    PENDING_APPROVAL = "PENDING_APPROVAL"
    REMOVED_BY_ADMIN_ASSISTANT = "REMOVED_BY_ADMIN_ASSISTANT"
    SIDE_CONVERSATION = "SIDE_CONVERSATION"
    SIDE_CONVERSATION_AND_POST_OWNER = "SIDE_CONVERSATION_AND_POST_OWNER"
    SPOTLIGHT_TAB = "SPOTLIGHT_TAB"


class videocomments_filter_enum_param(str, Enum):
    """videocomments_filter_enum_param enum values."""

    stream = "stream"
    toplevel = "toplevel"


class videocomments_live_filter_enum_param(str, Enum):
    """videocomments_live_filter_enum_param enum values."""

    filter_low_quality = "filter_low_quality"
    no_filter = "no_filter"


class videocomments_order_enum_param(str, Enum):
    """videocomments_order_enum_param enum values."""

    chronological = "chronological"
    reverse_chronological = "reverse_chronological"


class videocopyright_content_category(str, Enum):
    """videocopyright_content_category enum values."""

    episode = "episode"
    movie = "movie"
    web = "web"


class videocopyright_monitoring_type(str, Enum):
    """videocopyright_monitoring_type enum values."""

    AUDIO_ONLY = "AUDIO_ONLY"
    VIDEO_AND_AUDIO = "VIDEO_AND_AUDIO"
    VIDEO_ONLY = "VIDEO_ONLY"


class videopoll_action(str, Enum):
    """videopoll_action enum values."""

    ATTACH_TO_VIDEO = "ATTACH_TO_VIDEO"
    CLOSE = "CLOSE"
    DELETE_POLL = "DELETE_POLL"
    SHOW_RESULTS = "SHOW_RESULTS"
    SHOW_VOTING = "SHOW_VOTING"


class videovideo_insights_period_enum_param(str, Enum):
    """videovideo_insights_period_enum_param enum values."""

    day = "day"
    days_28 = "days_28"
    lifetime = "lifetime"
    month = "month"
    total_over_range = "total_over_range"
    week = "week"


class whatsappbusinessaccountassigned_users_tasks_enum_param(str, Enum):
    """whatsappbusinessaccountassigned_users_tasks_enum_param enum values."""

    DEVELOP = "DEVELOP"
    MANAGE = "MANAGE"
    MANAGE_EXTENSIONS = "MANAGE_EXTENSIONS"
    MANAGE_PHONE = "MANAGE_PHONE"
    MANAGE_PHONE_ASSETS = "MANAGE_PHONE_ASSETS"
    MANAGE_TEMPLATES = "MANAGE_TEMPLATES"
    MESSAGING = "MESSAGING"
    VIEW_COST = "VIEW_COST"
    VIEW_PHONE_ASSETS = "VIEW_PHONE_ASSETS"
    VIEW_TEMPLATES = "VIEW_TEMPLATES"


class whatsappbusinessaccountcall_analytics_dimensions_enum_param(str, Enum):
    """whatsappbusinessaccountcall_analytics_dimensions_enum_param enum values."""

    COUNTRY = "COUNTRY"
    DIRECTION = "DIRECTION"
    PHONE = "PHONE"
    TIER = "TIER"
    UNKNOWN = "UNKNOWN"


class whatsappbusinessaccountcall_analytics_directions_enum_param(str, Enum):
    """whatsappbusinessaccountcall_analytics_directions_enum_param enum values."""

    BUSINESS_INITIATED = "BUSINESS_INITIATED"
    UNKNOWN = "UNKNOWN"
    USER_INITIATED = "USER_INITIATED"


class whatsappbusinessaccountcall_analytics_granularity_enum_param(str, Enum):
    """whatsappbusinessaccountcall_analytics_granularity_enum_param enum values."""

    DAILY = "DAILY"
    HALF_HOUR = "HALF_HOUR"
    MONTHLY = "MONTHLY"


class whatsappbusinessaccountcall_analytics_metric_types_enum_param(str, Enum):
    """whatsappbusinessaccountcall_analytics_metric_types_enum_param enum values."""

    AVERAGE_DURATION = "AVERAGE_DURATION"
    COST = "COST"
    COUNT = "COUNT"
    UNKNOWN = "UNKNOWN"


class whatsappbusinessaccountconversation_analytics_conversation_categories_enum_param(str, Enum):
    """whatsappbusinessaccountconversation_analytics_conversation_categories_enum_param enum values."""

    AUTHENTICATION = "AUTHENTICATION"
    AUTHENTICATION_INTERNATIONAL = "AUTHENTICATION_INTERNATIONAL"
    MARKETING = "MARKETING"
    MARKETING_LITE = "MARKETING_LITE"
    SERVICE = "SERVICE"
    UTILITY = "UTILITY"


class whatsappbusinessaccountconversation_analytics_conversation_directions_enum_param(str, Enum):
    """whatsappbusinessaccountconversation_analytics_conversation_directions_enum_param enum values."""

    BUSINESS_INITIATED = "BUSINESS_INITIATED"
    UNKNOWN = "UNKNOWN"
    USER_INITIATED = "USER_INITIATED"


class whatsappbusinessaccountconversation_analytics_conversation_types_enum_param(str, Enum):
    """whatsappbusinessaccountconversation_analytics_conversation_types_enum_param enum values."""

    FREE_ENTRY_POINT = "FREE_ENTRY_POINT"
    FREE_TIER = "FREE_TIER"
    REGULAR = "REGULAR"
    UNKNOWN = "UNKNOWN"


class whatsappbusinessaccountconversation_analytics_dimensions_enum_param(str, Enum):
    """whatsappbusinessaccountconversation_analytics_dimensions_enum_param enum values."""

    CONVERSATION_CATEGORY = "CONVERSATION_CATEGORY"
    CONVERSATION_DIRECTION = "CONVERSATION_DIRECTION"
    CONVERSATION_TYPE = "CONVERSATION_TYPE"
    COUNTRY = "COUNTRY"
    PHONE = "PHONE"
    UNKNOWN = "UNKNOWN"


class whatsappbusinessaccountconversation_analytics_granularity_enum_param(str, Enum):
    """whatsappbusinessaccountconversation_analytics_granularity_enum_param enum values."""

    DAILY = "DAILY"
    HALF_HOUR = "HALF_HOUR"
    MONTHLY = "MONTHLY"


class whatsappbusinessaccountconversation_analytics_metric_types_enum_param(str, Enum):
    """whatsappbusinessaccountconversation_analytics_metric_types_enum_param enum values."""

    CONVERSATION = "CONVERSATION"
    COST = "COST"
    UNKNOWN = "UNKNOWN"


class whatsappbusinessaccountflows_categories_enum_param(str, Enum):
    """whatsappbusinessaccountflows_categories_enum_param enum values."""

    APPOINTMENT_BOOKING = "APPOINTMENT_BOOKING"
    CONTACT_US = "CONTACT_US"
    CUSTOMER_SUPPORT = "CUSTOMER_SUPPORT"
    LEAD_GENERATION = "LEAD_GENERATION"
    OTHER = "OTHER"
    SHOPPING = "SHOPPING"
    SIGN_IN = "SIGN_IN"
    SIGN_UP = "SIGN_UP"
    SURVEY = "SURVEY"


class whatsappbusinessaccountmessage_template_previews_button_types_enum_param(str, Enum):
    """whatsappbusinessaccountmessage_template_previews_button_types_enum_param enum values."""

    OTP = "OTP"


class whatsappbusinessaccountmessage_template_previews_category_enum_param(str, Enum):
    """whatsappbusinessaccountmessage_template_previews_category_enum_param enum values."""

    AUTHENTICATION = "AUTHENTICATION"


class whatsappbusinessaccountmessage_templates_category_enum_param(str, Enum):
    """whatsappbusinessaccountmessage_templates_category_enum_param enum values."""

    AUTHENTICATION = "AUTHENTICATION"
    MARKETING = "MARKETING"
    UTILITY = "UTILITY"


class whatsappbusinessaccountmessage_templates_display_format_enum_param(str, Enum):
    """whatsappbusinessaccountmessage_templates_display_format_enum_param enum values."""

    ORDER_DETAILS = "ORDER_DETAILS"


class whatsappbusinessaccountmessage_templates_parameter_format_enum_param(str, Enum):
    """whatsappbusinessaccountmessage_templates_parameter_format_enum_param enum values."""

    NAMED = "NAMED"
    POSITIONAL = "POSITIONAL"


class whatsappbusinessaccountmessage_templates_quality_score_enum_param(str, Enum):
    """whatsappbusinessaccountmessage_templates_quality_score_enum_param enum values."""

    GREEN = "GREEN"
    RED = "RED"
    UNKNOWN = "UNKNOWN"
    YELLOW = "YELLOW"


class whatsappbusinessaccountmessage_templates_status_enum_param(str, Enum):
    """whatsappbusinessaccountmessage_templates_status_enum_param enum values."""

    APPROVED = "APPROVED"
    ARCHIVED = "ARCHIVED"
    DELETED = "DELETED"
    DISABLED = "DISABLED"
    IN_APPEAL = "IN_APPEAL"
    LIMIT_EXCEEDED = "LIMIT_EXCEEDED"
    PAUSED = "PAUSED"
    PENDING = "PENDING"
    PENDING_DELETION = "PENDING_DELETION"
    REJECTED = "REJECTED"


class whatsappbusinessaccountmessage_templates_sub_category_enum_param(str, Enum):
    """whatsappbusinessaccountmessage_templates_sub_category_enum_param enum values."""

    ORDER_DETAILS = "ORDER_DETAILS"
    ORDER_STATUS = "ORDER_STATUS"


class whatsappbusinessaccountpayment_configuration_provider_name_enum_param(str, Enum):
    """whatsappbusinessaccountpayment_configuration_provider_name_enum_param enum values."""

    BILLDESK = "BILLDESK"
    PAYU = "PAYU"
    RAZORPAY = "RAZORPAY"
    UPI_VPA = "UPI_VPA"
    ZAAKPAY = "ZAAKPAY"


class whatsappbusinessaccountpricing_analytics_dimensions_enum_param(str, Enum):
    """whatsappbusinessaccountpricing_analytics_dimensions_enum_param enum values."""

    COUNTRY = "COUNTRY"
    PHONE = "PHONE"
    PRICING_CATEGORY = "PRICING_CATEGORY"
    PRICING_TYPE = "PRICING_TYPE"
    TIER = "TIER"


class whatsappbusinessaccountpricing_analytics_granularity_enum_param(str, Enum):
    """whatsappbusinessaccountpricing_analytics_granularity_enum_param enum values."""

    DAILY = "DAILY"
    HALF_HOUR = "HALF_HOUR"
    MONTHLY = "MONTHLY"


class whatsappbusinessaccountpricing_analytics_metric_types_enum_param(str, Enum):
    """whatsappbusinessaccountpricing_analytics_metric_types_enum_param enum values."""

    COST = "COST"
    VOLUME = "VOLUME"


class whatsappbusinessaccountpricing_analytics_pricing_categories_enum_param(str, Enum):
    """whatsappbusinessaccountpricing_analytics_pricing_categories_enum_param enum values."""

    AUTHENTICATION = "AUTHENTICATION"
    AUTHENTICATION_INTERNATIONAL = "AUTHENTICATION_INTERNATIONAL"
    GROUP_MARKETING = "GROUP_MARKETING"
    GROUP_SERVICE = "GROUP_SERVICE"
    GROUP_UTILITY = "GROUP_UTILITY"
    MARKETING = "MARKETING"
    MARKETING_LITE = "MARKETING_LITE"
    SERVICE = "SERVICE"
    UTILITY = "UTILITY"


class whatsappbusinessaccountpricing_analytics_pricing_types_enum_param(str, Enum):
    """whatsappbusinessaccountpricing_analytics_pricing_types_enum_param enum values."""

    FREE_CUSTOMER_SERVICE = "FREE_CUSTOMER_SERVICE"
    FREE_ENTRY_POINT = "FREE_ENTRY_POINT"
    REGULAR = "REGULAR"


class whatsappbusinessaccounttemplate_analytics_granularity_enum_param(str, Enum):
    """whatsappbusinessaccounttemplate_analytics_granularity_enum_param enum values."""

    DAILY = "DAILY"


class whatsappbusinessaccounttemplate_analytics_metric_types_enum_param(str, Enum):
    """whatsappbusinessaccounttemplate_analytics_metric_types_enum_param enum values."""

    CLICKED = "CLICKED"
    COST = "COST"
    DELIVERED = "DELIVERED"
    READ = "READ"
    REPLIED = "REPLIED"
    SENT = "SENT"


class whatsappbusinessaccounttemplate_analytics_product_type_enum_param(str, Enum):
    """whatsappbusinessaccounttemplate_analytics_product_type_enum_param enum values."""

    CLOUD_API = "CLOUD_API"
    MARKETING_MESSAGES_LITE_API = "MARKETING_MESSAGES_LITE_API"


class whatsappbusinessaccounttemplate_group_analytics_granularity_enum_param(str, Enum):
    """whatsappbusinessaccounttemplate_group_analytics_granularity_enum_param enum values."""

    DAILY = "DAILY"


class whatsappbusinessaccounttemplate_group_analytics_metric_types_enum_param(str, Enum):
    """whatsappbusinessaccounttemplate_group_analytics_metric_types_enum_param enum values."""

    CLICKED = "CLICKED"
    COST = "COST"
    DELIVERED = "DELIVERED"
    READ = "READ"
    REPLIED = "REPLIED"
    SENT = "SENT"


class whatsappbusinessaccountupsert_message_templates_category_enum_param(str, Enum):
    """whatsappbusinessaccountupsert_message_templates_category_enum_param enum values."""

    AUTHENTICATION = "AUTHENTICATION"


class whatsappbusinesspreverifiedphonenumberrequest_code_code_method_enum_param(str, Enum):
    """whatsappbusinesspreverifiedphonenumberrequest_code_code_method_enum_param enum values."""

    SMS = "SMS"
    VOICE = "VOICE"


# ============================================================================
# FIELD LITERALS
# ============================================================================


WhatsAppBusinessHealthStatusField = Literal[
    "additional_info", "can_send_message", "entity_type", "errors", "id"
]


AdVolumeField = Literal[
    "ad_volume_break_down",
    "ads_running_or_in_review_count",
    "future_limit_activation_date",
    "future_limit_on_ads_running_or_in_review",
    "individual_accounts_ad_volume",
    "is_gpa_page",
    "limit_on_ads_running_or_in_review",
    "owning_business_ad_volume",
    "partner_business_ad_volume",
    "user_role",
]


DynamicPostChildAttachmentField = Literal[
    "description", "image_url", "link", "place_id", "product_id", "title"
]


AdAssetFeedSpecField = Literal[
    "ad_formats",
    "additional_data",
    "app_product_page_id",
    "asset_customization_rules",
    "audios",
    "autotranslate",
    "bodies",
    "call_ads_configuration",
    "call_to_action_types",
    "call_to_actions",
    "captions",
    "carousels",
    "ctwa_consent_data",
    "descriptions",
    "events",
    "groups",
    "images",
    "link_urls",
    "message_extensions",
    "onsite_destinations",
    "optimization_type",
    "promotional_metadata",
    "reasons_to_shop",
    "shops_bundle",
    "titles",
    "translations",
    "upcoming_events",
    "videos",
]


OfflineProductItemField = Literal[
    "applinks",
    "brand",
    "category",
    "category_specific_fields",
    "currency",
    "description",
    "id",
    "image_fetch_status",
    "image_url",
    "images",
    "name",
    "offline_product_item_id",
    "price",
    "sanitized_images",
    "url",
    "visibility",
]


AdCreativeLinkDataCallToActionValueField = Literal[
    "app_destination",
    "app_link",
    "application",
    "event_id",
    "lead_gen_form_id",
    "link",
    "link_caption",
    "link_format",
    "object_store_urls",
    "page",
    "product_link",
    "whatsapp_number",
]


BusinessFranchiseConfigField = Literal[
    "active_partner_count",
    "agency_business",
    "agency_business_asset_group",
    "brand_name",
    "business",
    "business_vertical",
    "id",
    "partner_count",
    "pending_agency_business",
    "program_count",
    "shared_business_asset_group",
    "shared_creative_folder_count",
    "shared_custom_audience_count",
]


TransactionField = Literal[
    "account_id",
    "app_amount",
    "billing_end_time",
    "billing_reason",
    "billing_start_time",
    "card_charge_mode",
    "charge_type",
    "checkout_campaign_group_id",
    "credential_id",
    "fatura_id",
    "id",
    "is_business_ec_charge",
    "is_funding_event",
    "payment_option",
    "product_type",
    "provider_amount",
    "status",
    "time",
    "tracking_id",
    "transaction_type",
    "tx_type",
    "vat_invoice_id",
]


IGMediaField = Literal[
    "alt_text",
    "boost_eligibility_info",
    "caption",
    "comments_count",
    "copyright_check_information",
    "id",
    "ig_id",
    "is_comment_enabled",
    "is_shared_to_feed",
    "legacy_instagram_media_id",
    "like_count",
    "media_product_type",
    "media_type",
    "media_url",
    "owner",
    "permalink",
    "shortcode",
    "thumbnail_url",
    "timestamp",
    "username",
    "view_count",
]


IGBCAdsPermissionField = Literal["id", "permission_type", "status"]


AdPlacePageSetField = Literal[
    "account_id", "id", "location_types", "name", "pages_count", "parent_page"
]


RightsManagerInsightsField = Literal[
    "error", "error_message", "metadata", "totals", "x_axis_breakdown"
]


AdsTextSuggestionsField = Literal[
    "ad_account_id", "bodies", "descriptions", "inactive_session_tally", "long", "short", "titles"
]


AdCampaignGroupStructureTreeField = Literal["children", "id", "name", "time_updated"]


TargetingGeoLocationRegionField = Literal["country", "key", "name"]


CanvasTemplateField = Literal[
    "channels",
    "description",
    "document",
    "id",
    "is_multi_tab_supportable",
    "is_new",
    "name",
    "objectives",
    "owner_id",
    "required_capabilities",
    "snapshot_photo",
    "status",
    "sub_verticals",
    "verticals",
]


TargetingSentenceLineField = Literal["id", "params", "targetingsentencelines"]


AdRuleScheduleSpecField = Literal["schedule", "schedule_type"]


CustomAudiencesTOSField = Literal["content", "id", "type"]


CampaignField = Literal[
    "account_id",
    "adlabels",
    "advantage_state_info",
    "bid_strategy",
    "boosted_object_id",
    "brand_lift_studies",
    "budget_rebalance_flag",
    "budget_remaining",
    "buying_type",
    "campaign_group_active_time",
    "can_create_brand_lift_study",
    "can_use_spend_cap",
    "configured_status",
    "created_time",
    "daily_budget",
    "effective_status",
    "has_secondary_skadnetwork_reporting",
    "id",
    "is_budget_schedule_enabled",
    "is_skadnetwork_attribution",
    "issues_info",
    "last_budget_toggling_time",
    "lifetime_budget",
    "name",
    "objective",
    "pacing_type",
    "primary_attribution",
    "promoted_object",
    "recommendations",
    "smart_promotion_type",
    "source_campaign",
    "source_campaign_id",
    "source_recommendation_type",
    "special_ad_categories",
    "special_ad_category",
    "special_ad_category_country",
    "spend_cap",
    "start_time",
    "status",
    "stop_time",
    "topline_id",
    "updated_time",
]


EventTicketTierField = Literal[
    "currency",
    "description",
    "end_sales_time",
    "end_show_time",
    "fee_settings",
    "id",
    "maximum_quantity",
    "metadata",
    "minimum_quantity",
    "name",
    "price",
    "priority",
    "retailer_id",
    "seating_map_image_url",
    "start_sales_time",
    "start_show_time",
    "status",
    "total_quantity",
]


DynamicContentSetField = Literal["business_id", "id", "name"]


MusicVideoCopyrightField = Literal[
    "creation_time",
    "displayed_matches_count",
    "id",
    "in_conflict",
    "isrc",
    "match_rule",
    "ownership_countries",
    "reference_file_status",
    "ridge_monitoring_status",
    "tags",
    "update_time",
    "video_asset",
    "whitelisted_fb_users",
    "whitelisted_ig_users",
]


SmartPixelInsightsField = Literal["source", "stats"]


CustomAudiencesharedAccountInfoField = Literal[
    "account_id", "account_name", "business_id", "business_name", "sharing_status"
]


AdAssetFeedSpecAssetCustomizationRuleField = Literal[
    "body_label",
    "call_to_action_label",
    "call_to_action_type_label",
    "caption_label",
    "carousel_label",
    "customization_spec",
    "description_label",
    "image_label",
    "is_default",
    "link_url_label",
    "priority",
    "title_label",
    "video_label",
]


AdsPixelRealTimeEventLogResultField = Literal[
    "data_json",
    "dedup_data",
    "device_type",
    "domain_control_rule_rejection",
    "event",
    "event_detection_method",
    "in_iframe",
    "matched_rule_conditions",
    "resolved_link",
    "source_rule_condition",
    "timestamp",
    "trace_id",
    "url",
]


AdvAInstanceField = Literal["id", "instance_type", "name", "owner_business"]


KeyValueField = Literal["key", "value"]


DirectDebitField = Literal[
    "bank_account_last_4",
    "bank_code_last_4",
    "bank_name",
    "default_receiving_method_products",
    "display_string",
    "id",
    "last_four_digits",
    "onboarding_url",
    "owner_name",
    "status",
]


PageUpcomingChangeField = Literal[
    "change_type", "effective_time", "id", "page", "proposal", "timer_status"
]


ReachFrequencyEstimatesPlacementBreakdownField = Literal[
    "android",
    "audience_network",
    "desktop",
    "facebook_search",
    "fb_reels",
    "fb_reels_overlay",
    "ig_android",
    "ig_ios",
    "ig_other",
    "ig_reels",
    "ig_story",
    "instant_articles",
    "instream_videos",
    "ios",
    "msite",
    "suggested_videos",
]


AnalyticsSegmentField = Literal[
    "custom_audience_ineligiblity_reasons",
    "description",
    "estimated_custom_audience_size",
    "event_info_rules",
    "event_rules",
    "filter_set",
    "has_demographic_rules",
    "id",
    "is_all_user",
    "is_eligible_for_push_campaign",
    "is_internal",
    "name",
    "percentile_rules",
    "time_last_seen",
    "time_last_updated",
    "user_property_rules",
    "web_param_rules",
]


ContactsMessengerSyncConfigField = Literal["enabled"]


ChildEventField = Literal["end_time", "id", "start_time", "ticket_uri"]


TargetingGeoLocationElectoralDistrictField = Literal[
    "country", "deprecation_code", "electoral_district", "key", "name"
]


AdAssetFeedSpecEventsField = Literal["id"]


AudienceFunnelField = Literal[
    "audience_type_param_name", "audience_type_param_tags", "custom_audience_groups_info"
]


AdsSegmentsField = Literal[
    "daily_audience_size",
    "daily_impressions",
    "description",
    "id",
    "name",
    "path",
    "popularity",
    "projected_cpm",
    "projected_daily_revenue",
]


AdExportPresetField = Literal["created_time", "fields", "id", "name", "owner", "updated_time"]


ImageReferenceMatchField = Literal[
    "conflicting_countries",
    "country_resolution_history",
    "creation_time",
    "current_conflict_resolved_countries",
    "displayed_match_state",
    "dispute_form_data_entries_with_translations",
    "expiration_time",
    "id",
    "match_state",
    "matched_reference_copyright",
    "matched_reference_owner",
    "modification_history",
    "reference_copyright",
    "reference_owner",
    "rejection_form_data_entries_with_translations",
    "resolution_reason",
    "update_time",
]


LeadGenQuestionOptionField = Literal["key", "value"]


CollaborativeAdsShareSettingsField = Literal[
    "agency_business", "id", "product_catalog_proxy_id", "utm_campaign", "utm_medium", "utm_source"
]


LiveVideoTargetingField = Literal["age_max", "age_min", "excluded_countries", "geo_locations"]


AdCreativeTextDataField = Literal["message"]


AnalyticsEntityUserConfigField = Literal["dismissed_notices"]


IGMediaForIGOnlyAPIField = Literal[
    "alt_text",
    "caption",
    "comments_count",
    "id",
    "is_comment_enabled",
    "is_shared_to_feed",
    "like_count",
    "media_product_type",
    "media_type",
    "media_url",
    "owner",
    "permalink",
    "shortcode",
    "thumbnail_url",
    "timestamp",
    "username",
]


AdCampaignOptimizationEventField = Literal["custom_conversion_id", "event_sequence", "event_type"]


PrivacyField = Literal["allow", "deny", "description", "friends", "networks", "value"]


BlindPigField = Literal["id", "name"]


AttributionSpecField = Literal["event_type", "window_days"]


AdsOptimalDeliveryGrowthOpportunityField = Literal[
    "child_metadata", "metadata", "optimization_type"
]


ALMGuidanceField = Literal[
    "ad_account_id",
    "guidances",
    "opportunity_score",
    "parent_advertiser_id",
    "parent_advertiser_name",
]


UserIDForPageField = Literal["id", "page"]


AdAccountField = Literal[
    "account_id",
    "account_status",
    "ad_account_promotable_objects",
    "age",
    "agency_client_declaration",
    "all_capabilities",
    "amount_spent",
    "attribution_spec",
    "balance",
    "brand_safety_content_filter_levels",
    "business",
    "business_city",
    "business_country_code",
    "business_name",
    "business_state",
    "business_street",
    "business_street2",
    "business_zip",
    "can_create_brand_lift_study",
    "capabilities",
    "created_time",
    "currency",
    "custom_audience_info",
    "default_dsa_beneficiary",
    "default_dsa_payor",
    "disable_reason",
    "end_advertiser",
    "end_advertiser_name",
    "existing_customers",
    "expired_funding_source_details",
    "extended_credit_invoice_group",
    "failed_delivery_checks",
    "fb_entity",
    "funding_source",
    "funding_source_details",
    "has_migrated_permissions",
    "has_page_authorized_adaccount",
    "id",
    "io_number",
    "is_attribution_spec_system_default",
    "is_ba_skip_delayed_eligible",
    "is_direct_deals_enabled",
    "is_in_3ds_authorization_enabled_market",
    "is_notifications_enabled",
    "is_personal",
    "is_prepay_account",
    "is_tax_id_required",
    "liable_address",
    "line_numbers",
    "media_agency",
    "min_campaign_group_spend_cap",
    "min_daily_budget",
    "name",
    "offsite_pixels_tos_accepted",
    "owner",
    "owner_business",
    "partner",
    "rf_spec",
    "send_bill_to_address",
    "show_checkout_experience",
    "sold_to_address",
    "spend_cap",
    "tax_id",
    "tax_id_status",
    "tax_id_type",
    "timezone_id",
    "timezone_name",
    "timezone_offset_hours_utc",
    "tos_accepted",
    "user_access_expire_time",
    "user_tasks",
    "user_tos_accepted",
    "viewable_business",
]


LeadGenDirectCRMIntegrationConfigField = Literal[
    "auth_id",
    "creation_time",
    "id",
    "lead_gen_data",
    "matched_fields",
    "matched_fields_labels",
    "resources",
    "third_party_app_id",
]


SignalsIWLExtractorField = Literal["domain_uri", "event_type", "extractor_type", "id"]


SingleOwnerAdditionalProfileField = Literal["id", "name", "user_name"]


DynamicARMetadataField = Literal[
    "anchor_point",
    "container_effect_enum",
    "effect_icon_url",
    "effect_id",
    "id",
    "platforms",
    "scale_factor",
    "shadow_texture_url",
    "source_url",
    "state",
    "tags",
    "variant_picker_url",
]


ProductItemLandingPageDataField = Literal["availability"]


BusinessAdAccountRequestField = Literal["ad_account", "id"]


FlightField = Literal[
    "applinks",
    "category_specific_fields",
    "currency",
    "custom_label_0",
    "custom_label_1",
    "custom_label_2",
    "custom_label_3",
    "custom_label_4",
    "custom_number_0",
    "custom_number_1",
    "custom_number_2",
    "custom_number_3",
    "custom_number_4",
    "description",
    "destination_airport",
    "destination_city",
    "flight_id",
    "id",
    "image_fetch_status",
    "images",
    "oneway_currency",
    "oneway_price",
    "origin_airport",
    "origin_city",
    "price",
    "product_priority_0",
    "product_priority_1",
    "product_priority_2",
    "product_priority_3",
    "product_priority_4",
    "sanitized_images",
    "tags",
    "unit_price",
    "url",
    "visibility",
]


CustomConversionActivitiesField = Literal["app_id", "data", "event_type", "timestamp"]


AdField = Literal[
    "account_id",
    "ad_active_time",
    "ad_review_feedback",
    "ad_schedule_end_time",
    "ad_schedule_start_time",
    "adlabels",
    "adset",
    "adset_id",
    "bid_amount",
    "bid_info",
    "bid_type",
    "campaign",
    "campaign_id",
    "configured_status",
    "conversion_domain",
    "conversion_specs",
    "created_time",
    "creative",
    "creative_asset_groups_spec",
    "demolink_hash",
    "display_sequence",
    "effective_status",
    "engagement_audience",
    "failed_delivery_checks",
    "id",
    "issues_info",
    "last_updated_by_app_id",
    "name",
    "placement",
    "preview_shareable_link",
    "priority",
    "recommendations",
    "source_ad",
    "source_ad_id",
    "status",
    "targeting",
    "tracking_and_conversion_with_defaults",
    "tracking_specs",
    "updated_time",
]


HotelRoomField = Literal[
    "applinks",
    "base_price",
    "currency",
    "description",
    "id",
    "images",
    "margin_level",
    "name",
    "room_id",
    "sale_price",
    "url",
]


AdCreativeOmnichannelLinkSpecField = Literal["app", "web"]


LiveVideoAdBreakConfigField = Literal[
    "default_ad_break_duration",
    "failure_reason_polling_interval",
    "first_break_eligible_secs",
    "guide_url",
    "is_eligible_to_onboard",
    "is_enabled",
    "onboarding_url",
    "preparing_duration",
    "time_between_ad_breaks_secs",
    "viewer_count_threshold",
]


SplitTestWinnerField = Literal["ad_object_level", "confidences", "winner_ad_object_id"]


CampaignActionsDataField = Literal[""]  # No fields defined


IDNameField = Literal["id", "name"]


AdsPixelRawFiresResultField = Literal[
    "data_json",
    "device_type",
    "event",
    "event_detection_method",
    "event_src",
    "placed_url",
    "timestamp",
    "user_pii_keys",
]


RecommendedPagePostField = Literal["intent_score", "is_ig_media", "post_id"]


CopyrightReferenceContainerField = Literal[
    "content_type",
    "copyright_creation_time",
    "download_hd_url",
    "duration_in_sec",
    "id",
    "iswc",
    "metadata",
    "playable_video_uri",
    "published_time",
    "thumbnail_url",
    "title",
    "universal_content_id",
    "writer_names",
]


BusinessCreativeFolderField = Literal[
    "business",
    "creation_time",
    "creative_insight_permissions",
    "description",
    "id",
    "media_library_url",
    "name",
    "owner_business",
]


UserIDForAppField = Literal["app", "id"]


AMOneshopSettingsField = Literal[""]  # No fields defined


AdCampaignDeliveryStatsUnsupportedReasonsField = Literal["reason_data", "reason_type"]


AdRecommendationField = Literal[
    "blame_field",
    "code",
    "confidence",
    "importance",
    "message",
    "recommendation_data",
    "title",
    "value",
]


PageAppWithLeadsAccessField = Literal["can_access_leads", "type"]


AdAssetFeedSpecGroupRuleField = Literal[
    "body_label",
    "caption_label",
    "description_label",
    "image_label",
    "link_url_label",
    "title_label",
    "video_label",
]


PageCrmsWithLeadsAccessField = Literal["can_access_leads", "id", "integration_type", "name"]


BusinessObjectTransferOwnershipAgreementField = Literal[
    "id", "receiving_business", "requesting_business", "status"
]


LiveVideoRecommendedEncoderSettingsField = Literal[
    "audio_codec_settings", "streaming_protocol", "video_codec_settings"
]


PageCallToActionField = Literal[
    "android_app",
    "android_deeplink",
    "android_destination_type",
    "android_package_name",
    "android_url",
    "created_time",
    "email_address",
    "from",
    "id",
    "intl_number_with_plus",
    "iphone_app",
    "iphone_deeplink",
    "iphone_destination_type",
    "iphone_url",
    "status",
    "type",
    "updated_time",
    "web_destination_type",
    "web_url",
]


AdCampaignGroupStatsField = Literal[
    "actions",
    "campaign_group_id",
    "clicks",
    "end_time",
    "impressions",
    "inline_actions",
    "social_clicks",
    "social_impressions",
    "social_spent",
    "social_unique_clicks",
    "social_unique_impressions",
    "spent",
    "start_time",
    "unique_clicks",
    "unique_impressions",
]


BusinessRoleRequestField = Literal[
    "created_by",
    "created_time",
    "email",
    "expiration_time",
    "expiry_time",
    "finance_role",
    "id",
    "invite_link",
    "invited_user_type",
    "ip_role",
    "owner",
    "role",
    "status",
    "tasks",
    "updated_by",
    "updated_time",
]


OfflineTermsOfServiceField = Literal["accept_time", "id", "signed_by_user"]


AdAccountAdLimitsInsightsField = Literal["date_start", "date_stop"]


AdCreativeRecommenderSettingsField = Literal["preferred_events", "product_sales_channel"]


ExtendedCreditApplicationField = Literal[
    "billing_country",
    "city",
    "cnpj",
    "country",
    "display_currency",
    "duns_number",
    "id",
    "invoice_email_address",
    "is_umi",
    "legal_entity_name",
    "original_online_limit",
    "phone_number",
    "postal_code",
    "product_types",
    "proposed_credit_limit",
    "registration_number",
    "run_id",
    "state",
    "status",
    "street1",
    "street2",
    "submitter",
    "tax_exempt_status",
    "tax_id",
    "terms",
]


AdCreativeFormatTransformationSpecField = Literal["data_source", "format"]


ProductVisualVariantField = Literal["items", "unique_key"]


AudiencePermissionForActionsField = Literal[
    "can_edit",
    "can_see_insight",
    "can_share",
    "subtype_supports_lookalike",
    "supports_recipient_lookalike",
]


AdsCreationSavedStateField = Literal[
    "ad_account", "id", "serialized_store_data", "time_updated", "user"
]


EducationExperienceField = Literal[
    "classes", "concentration", "degree", "id", "school", "type", "with", "year"
]


MessengerAdsPartialAutomatedStepListField = Literal[
    "fblead_form",
    "first_step_id",
    "id",
    "page",
    "privacy_url",
    "reminder_text",
    "stop_question_message",
]


TabField = Literal[
    "application",
    "custom_image_url",
    "custom_name",
    "id",
    "image_url",
    "is_non_connection_landing_tab",
    "is_permanent",
    "link",
    "name",
    "position",
]


AudioCopyrightField = Literal[
    "creation_time",
    "displayed_matches_count",
    "id",
    "in_conflict",
    "isrc",
    "match_rule",
    "ownership_countries",
    "ownership_details",
    "reference_file_status",
    "ridge_monitoring_status",
    "tags",
    "update_time",
    "whitelisted_fb_users",
    "whitelisted_ig_users",
]


BrandedContentAdErrorField = Literal[
    "blame_field_spec",
    "error_code",
    "error_description",
    "error_message",
    "error_placement",
    "error_severity",
    "help_center_id",
]


WithAsset3DField = Literal["id"]


AdCreativeDestinationSpecField = Literal["destination_type"]


WoodhengePurchasedPAYGReceiptField = Literal[
    "id", "number_of_subscriptions_purchased", "purchase_time", "user"
]


ProductSetTaxonCategoryField = Literal["category_id", "category_name", "image_url"]


CanvasField = Literal[
    "background_color",
    "body_elements",
    "business_id",
    "canvas_link",
    "collection_hero_image",
    "collection_hero_video",
    "collection_thumbnails",
    "dynamic_setting",
    "element_payload",
    "elements",
    "fb_body_elements",
    "id",
    "is_hidden",
    "is_published",
    "last_editor",
    "linked_documents",
    "name",
    "owner",
    "property_list",
    "source_template",
    "store_url",
    "style_list",
    "tags",
    "ui_property_list",
    "unused_body_elements",
    "update_time",
    "use_retailer_item_ids",
]


AdConversionValuesField = Literal["adgroup_id", "campaign_id", "values"]


CatalogContentVersionConfigField = Literal["id", "name", "version"]


CustomConversionStatsResultField = Literal["aggregation", "data", "timestamp"]


ShadowIGUserCatalogProductSearchField = Literal[
    "image_url",
    "is_checkout_flow",
    "merchant_id",
    "product_id",
    "product_name",
    "product_variants",
    "retailer_id",
    "review_status",
]


AdCreativeHouseShopsAdsSellerContentField = Literal[""]  # No fields defined


ProductVariantField = Literal["label", "options", "product_field"]


McomInvoiceStatusField = Literal[
    "bank_account_number",
    "bank_code",
    "invoice_id",
    "invoice_status",
    "page_id",
    "payment_method",
    "payment_type",
    "payout_amount",
    "slip_verification_error",
    "slip_verification_status",
    "transaction_fee",
    "transfer_slip",
]


DeliveryInfoField = Literal[
    "active_accelerated_campaign_count",
    "active_day_parted_campaign_count",
    "ad_penalty_map",
    "are_all_daily_budgets_spent",
    "credit_needed_ads_count",
    "eligible_for_delivery_insights",
    "end_time",
    "has_account_hit_spend_limit",
    "has_campaign_group_hit_spend_limit",
    "has_no_active_ads",
    "has_no_ads",
    "inactive_ads_count",
    "inactive_campaign_count",
    "is_account_closed",
    "is_account_disabled",
    "is_ad_uneconomical",
    "is_adfarm_penalized",
    "is_adgroup_partially_rejected",
    "is_campaign_accelerated",
    "is_campaign_completed",
    "is_campaign_day_parted",
    "is_campaign_disabled",
    "is_campaign_group_disabled",
    "is_clickbait_penalized",
    "is_daily_budget_spent",
    "is_engagement_bait_penalized",
    "is_lqwe_penalized",
    "is_reach_and_frequency_misconfigured",
    "is_sensationalism_penalized",
    "is_split_test_active",
    "is_split_test_valid",
    "lift_study_time_period",
    "needs_credit",
    "needs_tax_number",
    "non_deleted_ads_count",
    "not_delivering_campaign_count",
    "pending_ads_count",
    "reach_frequency_campaign_underdelivery_reason",
    "rejected_ads_count",
    "start_time",
    "status",
    "text_penalty_level",
]


EventSourceGroupField = Literal["business", "event_sources", "id", "name", "owner_business"]


AnalyticsPlatformMetricsConfigField = Literal[
    "has_a2u",
    "has_api_calls",
    "has_app_invites",
    "has_fb_login",
    "has_game_requests",
    "has_payments",
    "has_referrals",
    "has_stories",
    "has_structured_requests",
]


AdStudyObjectiveOffsiteDatasetsField = Literal["event_names", "id"]


BrandSafetyCampaignConfigField = Literal["comment_moderation_filter"]


PlatformImageSourceField = Literal["height", "source", "width"]


PageMessageResponsivenessMetricsField = Literal[
    "is_very_responsive", "response_rate", "response_time"
]


PageCTXMessagingFeatureLimitField = Literal[
    "messaging_feature_limit_duration", "messaging_feature_limit_type", "messaging_violation_type"
]


PersonalAdsPersonaField = Literal["email", "first_name", "id", "last_name", "pending_email"]


AdAccountTargetingUnifiedField = Literal[
    "audience_size_lower_bound",
    "audience_size_upper_bound",
    "conversion_lift",
    "description",
    "id",
    "img",
    "info",
    "info_title",
    "is_recommendation",
    "key",
    "link",
    "name",
    "parent",
    "partner",
    "path",
    "performance_rating",
    "raw_name",
    "recommendation_model",
    "search_interest_id",
    "source",
    "spend",
    "type",
    "valid",
]


DeliveryCheckField = Literal["check_name", "description", "extra_info", "summary"]


SlicedEventSourceGroupField = Literal["event_source_group", "filter", "id", "name"]


CustomAudienceSessionField = Literal[
    "end_time",
    "num_invalid_entries",
    "num_matched",
    "num_received",
    "progress",
    "session_id",
    "stage",
    "start_time",
]


CanvasPreviewField = Literal["body"]


DACheckField = Literal["action_uri", "description", "key", "result", "title", "user_message"]


AudienceSharingAccountValidField = Literal[
    "account_id",
    "account_type",
    "business_id",
    "business_name",
    "can_ad_account_use_lookalike_container",
    "sharing_agreement_status",
]


AdsPixelSignalsIWLFeedbackNuxField = Literal["should_ask_to_rate"]


EventExternalTicketInfoField = Literal["id", "max_sales_price", "min_sales_price", "sales_status"]


ResearchPollStudyField = Literal["account", "id", "name"]


UserContextField = Literal["id"]


ALMEndAdvertiserInfoField = Literal[
    "estimated_ad_budget", "id", "parent_advertiser_id", "parent_advertiser_name", "tag"
]


PremiumMusicVideoField = Literal[
    "creation_time",
    "cross_post_videos",
    "eligible_cross_post_pages",
    "id",
    "preferred_video_thumbnail_image_uri",
    "premium_music_video_metadata",
    "scheduled_publish_time",
    "title",
]


PersonaField = Literal["id", "name", "profile_picture_url"]


CreditPartitionActionOptionsField = Literal["liability_type", "partition_type", "send_bill_to"]


CanvasBodyElementField = Literal["element"]


AdAccountSubsidyAmountDetailsField = Literal["entered_amount", "fee_amount", "total_amount"]


AdCampaignDeliveryStatsField = Literal[
    "bid_recommendation",
    "current_average_cost",
    "last_significant_edit_ts",
    "learning_stage_exit_info",
    "learning_stage_info",
    "unsupported_features",
]


InstagramInsightsValueField = Literal["end_time", "value"]


FantasyGameField = Literal["id", "name"]


IGVideoCopyrightCheckStatusField = Literal["matches_found", "status"]


McomPayoutsField = Literal[
    "number_of_orders",
    "order_ids",
    "payout_amount",
    "payout_provider_reference_id",
    "payout_status",
    "payout_time",
    "provider",
]


CustomAudienceField = Literal[
    "account_id",
    "approximate_count_lower_bound",
    "approximate_count_upper_bound",
    "customer_file_source",
    "data_source",
    "data_source_types",
    "datafile_custom_audience_uploading_status",
    "delete_time",
    "delivery_status",
    "description",
    "excluded_custom_audiences",
    "external_event_source",
    "household_audience",
    "id",
    "included_custom_audiences",
    "is_eligible_for_sac_campaigns",
    "is_household",
    "is_snapshot",
    "is_value_based",
    "lookalike_audience_ids",
    "lookalike_spec",
    "name",
    "operation_status",
    "opt_out_link",
    "owner_business",
    "page_deletion_marked_delete_time",
    "permission_for_actions",
    "pixel_id",
    "regulated_audience_spec",
    "retention_days",
    "rev_share_policy_id",
    "rule",
    "rule_aggregation",
    "rule_v2",
    "seed_audience",
    "sharing_status",
    "subtype",
    "time_content_updated",
    "time_created",
    "time_updated",
]


AdAccountReachEstimateField = Literal["estimate_ready", "users_lower_bound", "users_upper_bound"]


AdgroupMetadataField = Literal[
    "ad_standard_enhancements_edit_source",
    "adgroup_creation_source",
    "adgroup_edit_source",
    "carousel_style",
    "carousel_with_static_card_style",
]


PrivacyOptionField = Literal[
    "description", "icon_src", "id", "is_currently_selected", "type", "user_id"
]


FranchiseProgramField = Literal[
    "business_asset_group",
    "creator_business",
    "description",
    "end_date",
    "id",
    "name",
    "program_access_type",
    "program_approval_type",
    "program_image_link",
    "program_url",
    "shared_custom_audience",
    "start_date",
]


AdsReportBuilderSavedReportField = Literal[
    "action_report_time",
    "ad_account_id",
    "attribution_windows",
    "comparison_date_interval",
    "creation_source",
    "creation_time",
    "currency",
    "date_interval",
    "date_preset",
    "default_attribution_windows",
    "dimension_groups",
    "dimensions",
    "filtering",
    "formatting",
    "id",
    "last_access_by",
    "last_access_time",
    "last_report_snapshot_id",
    "last_report_snapshot_time",
    "last_shared_report_expiration",
    "limit",
    "locked_dimensions",
    "metrics",
    "report_name",
    "report_snapshot_async_percent_completion",
    "report_snapshot_async_status",
    "schedule_frequency",
    "scope",
    "show_deprecate_aw_banner",
    "sorting",
    "start_date",
    "status",
    "subscribers",
    "update_by",
    "update_time",
    "user",
    "user_dimensions",
    "user_metrics",
    "view_type",
]


AnalyticsFunnelQueryResultField = Literal["query_id", "status"]


ProductCatalogUserActionsField = Literal["actions"]


AdgroupIssuesInfoField = Literal[
    "error_code", "error_message", "error_summary", "error_type", "level", "mid"
]


ProductCatalogImageSettingsOperationField = Literal["transformation_type"]


IGUserExportForCAMField = Literal[
    "age_bucket",
    "biography",
    "country",
    "email",
    "gender",
    "id",
    "is_account_verified",
    "is_paid_partnership_messages_enabled",
    "messaging_id",
    "onboarded_status",
    "portfolio_url",
    "username",
]


AudioAssetField = Literal[
    "all_ddex_featured_artists",
    "all_ddex_main_artists",
    "audio_cluster_id",
    "cover_image_source",
    "display_artist",
    "download_hd_url",
    "download_sd_url",
    "duration_in_ms",
    "freeform_genre",
    "grid",
    "id",
    "is_test",
    "original_release_date",
    "owner",
    "parental_warning_type",
    "subtitle",
    "title",
    "title_with_featured_artists",
    "upc",
]


AdAccountTrackingDataField = Literal["tracking_specs"]


ReachFrequencyAdFormatField = Literal["details", "type"]


WhatsAppBusinessAccountField = Literal[
    "account_review_status",
    "analytics",
    "auth_international_rate_eligibility",
    "business_verification_status",
    "country",
    "creation_time",
    "currency",
    "health_status",
    "id",
    "is_enabled_for_insights",
    "is_shared_with_partners",
    "linked_commerce_account",
    "marketing_messages_lite_api_status",
    "message_template_namespace",
    "name",
    "on_behalf_of_business_info",
    "owner_business",
    "owner_business_info",
    "ownership_type",
    "primary_business_location",
    "primary_funding_id",
    "purchase_order_number",
    "status",
    "timezone_id",
]


ExtendedCreditEmailField = Literal["email", "id"]


AdMonetizationPropertyField = Literal["owner_business"]


BrandedContentShadowIGMediaIDField = Literal[
    "eligibility_errors",
    "has_permission_for_partnership_ad",
    "id",
    "owner_id",
    "permalink",
    "recommended_campaign_objectives",
]


ReachFrequencyEstimatesCurveField = Literal[
    "budget",
    "conversion",
    "impression",
    "interpolated_reach",
    "num_points",
    "raw_impression",
    "raw_reach",
    "reach",
]


VehicleField = Literal[
    "address",
    "applinks",
    "availability",
    "availability_circle_radius",
    "availability_circle_radius_unit",
    "body_style",
    "category_specific_fields",
    "condition",
    "currency",
    "custom_label_0",
    "custom_label_1",
    "custom_label_2",
    "custom_label_3",
    "custom_label_4",
    "custom_number_0",
    "custom_number_1",
    "custom_number_2",
    "custom_number_3",
    "custom_number_4",
    "date_first_on_lot",
    "dealer_communication_channel",
    "dealer_email",
    "dealer_id",
    "dealer_name",
    "dealer_phone",
    "dealer_privacy_policy_url",
    "description",
    "drivetrain",
    "exterior_color",
    "fb_page_id",
    "features",
    "fuel_type",
    "id",
    "image_fetch_status",
    "images",
    "interior_color",
    "legal_disclosure_impressum_url",
    "make",
    "mileage",
    "model",
    "previous_currency",
    "previous_price",
    "price",
    "product_priority_0",
    "product_priority_1",
    "product_priority_2",
    "product_priority_3",
    "product_priority_4",
    "sale_currency",
    "sale_price",
    "sanitized_images",
    "state_of_vehicle",
    "tags",
    "title",
    "transmission",
    "trim",
    "unit_price",
    "url",
    "vehicle_id",
    "vehicle_registration_plate",
    "vehicle_specifications",
    "vehicle_type",
    "vin",
    "visibility",
    "year",
]


WhatsAppPaymentCapabilitiesField = Literal["is_enabled", "payment_capability_details"]


AdPromotedObjectField = Literal[
    "application_id",
    "boosted_product_set_id",
    "conversion_goal_id",
    "custom_conversion_id",
    "custom_event_str",
    "custom_event_type",
    "event_id",
    "fundraiser_campaign_id",
    "lead_ads_custom_event_str",
    "lead_ads_custom_event_type",
    "lead_ads_form_event_source_type",
    "lead_ads_offsite_conversion_type",
    "mcme_conversion_id",
    "object_store_url",
    "offer_id",
    "offline_conversion_data_set_id",
    "offsite_conversion_event_id",
    "omnichannel_object",
    "page_id",
    "pixel_aggregation_rule",
    "pixel_id",
    "pixel_rule",
    "place_page_set",
    "place_page_set_id",
    "product_catalog_id",
    "product_item_id",
    "product_set",
    "product_set_id",
    "product_set_optimization",
    "retention_days",
    "value_semantic_type",
    "variation",
    "whats_app_business_phone_number_id",
    "whatsapp_phone_number",
]


OfflineConversionDataSetPermissionsField = Literal[
    "can_edit", "can_edit_or_upload", "can_upload", "should_block_vanilla_business_employee_access"
]


PaymentEnginePaymentField = Literal[
    "actions",
    "application",
    "country",
    "created_time",
    "disputes",
    "fraud_status",
    "fulfillment_status",
    "id",
    "is_from_ad",
    "is_from_page_post",
    "items",
    "payout_foreign_exchange_rate",
    "phone_support_eligible",
    "platform",
    "refundable_amount",
    "request_id",
    "tax",
    "tax_country",
    "test",
    "user",
]


LeadGenAppointmentSlotsByDayField = Literal["appointment_slots", "day"]


AdRuleExecutionSpecField = Literal["execution_options", "execution_type", "is_once_off"]


CatalogItemValidationErrorListField = Literal["errors"]


TargetingGeoLocationLocationClusterField = Literal["key"]


AnalyticsQueryResultField = Literal["query_id", "status"]


IGAccessTokenForIGOnlyAPIField = Literal["access_token", "expires_in", "token_type"]


VideoStatusProcessingPhaseField = Literal["errors", "status"]


ProductItemCommerceInsightsField = Literal[
    "message_sends", "organic_impressions", "paid_impressions"
]


AdAccountAAACompatibleAdObjectsField = Literal["adgroup_ids", "campaign_group_ids", "campaign_ids"]


ProductItemInsightsField = Literal[
    "ad_click_count",
    "ad_impression_count",
    "add_to_cart_count",
    "purchase_count",
    "view_content_count",
]


AdsPixelStatsField = Literal["count", "diagnostics_hourly_last_timestamp", "event", "value"]


AdAssetDescriptionField = Literal["id", "text", "url_tags"]


AdCreativeShopSpecField = Literal["collection_id", "landing_view", "shop_id"]


ReachFrequencyDayPartField = Literal["days", "end_minute", "start_minute"]


BusinessOwnedObjectOnBehalfOfRequestField = Literal[
    "business_owned_object", "id", "receiving_business", "requesting_business", "status"
]


ProductCatalogField = Literal[
    "ad_account_to_collaborative_ads_share_settings",
    "agency_collaborative_ads_share_settings",
    "business",
    "catalog_store",
    "commerce_merchant_settings",
    "creator_user",
    "da_display_settings",
    "default_image_url",
    "fallback_image_url",
    "feed_count",
    "id",
    "is_catalog_segment",
    "is_local_catalog",
    "name",
    "owner_business",
    "product_count",
    "store_catalog_settings",
    "user_access_expire_time",
    "vertical",
]


ProductItemSubscriptionInfoField = Literal[
    "is_subscribable", "subscription_billing_period", "subscription_billing_type"
]


VideoPollField = Literal[
    "close_after_voting",
    "default_open",
    "id",
    "question",
    "show_gradient",
    "show_results",
    "status",
]


AdEntityTargetSpendField = Literal[
    "amount", "has_error", "is_accurate", "is_prorated", "is_updating"
]


CampaignGroupBrandConfigurationField = Literal["brand_product_name", "locale", "vertical"]


PlayableContentField = Literal["id", "name", "owner"]


ShadowIGMediaProductTagsField = Literal[
    "image_url",
    "is_checkout",
    "merchant_id",
    "name",
    "price_string",
    "product_id",
    "review_status",
    "stripped_price_string",
    "stripped_sale_price_string",
    "x",
    "y",
]


BusinessAssetGroupField = Literal["id", "name", "owner_business"]


PageAboutStoryComposedBlockEntityRangesField = Literal["key", "length", "offset"]


BusinessObjectField = Literal["asset", "asset_type", "id", "name", "picture"]


AdCreativePromotionMetadataSpecField = Literal[
    "end_date",
    "id",
    "promotion_source",
    "promotion_type",
    "promotion_value",
    "required_code",
    "start_date",
]


TargetingSubscriberUniverseField = Literal[
    "messenger_subscriber_source", "whatsapp_subscriber_pool", "whatsapp_subscriber_source"
]


TextWithEntitiesField = Literal["text"]


IGCommentField = Literal[
    "from",
    "hidden",
    "id",
    "legacy_instagram_comment_id",
    "like_count",
    "media",
    "parent_id",
    "text",
    "timestamp",
    "user",
    "username",
]


ShadowIGUserPartnershipAdsMediaErrorsField = Literal[
    "ad_code", "error_codes", "errors", "permalink"
]


UserPageOneTimeOptInTokenSettingsField = Literal[
    "creation_timestamp",
    "next_eligible_time",
    "notification_messages_frequency",
    "notification_messages_reoptin",
    "notification_messages_timezone",
    "notification_messages_token",
    "recipient_id",
    "token_expiry_timestamp",
    "topic_title",
    "user_token_status",
]


AdLimitSettingField = Literal["limit_allocation_by_page_advertisers"]


ReportingAudienceField = Literal[
    "custom_audiences", "custom_audiences_url_param_name", "custom_audiences_url_param_type"
]


PartnershipAdContentSearchMediaField = Literal[
    "ig_ad_code_sponsor_count",
    "ig_ad_code_sponsors",
    "ig_media",
    "ig_media_has_product_tags",
    "is_ad_code_eligible_for_boosting_by_two_sponsors",
    "is_ad_code_entry",
]


AdAccountSpendCapChangeHistoryField = Literal["action", "spend_cap", "time_start", "time_stop"]


ReachFrequencyCurveLowerConfidenceRangeField = Literal[
    "impression_lower",
    "num_points",
    "reach",
    "reach_lower",
    "uniq_video_views_2s_lower",
    "video_views_2s_lower",
]


AdCreativeLinkDataImageLayerSpecField = Literal[
    "blending_mode",
    "content",
    "frame_auto_show_enroll_status",
    "frame_image_hash",
    "frame_source",
    "image_source",
    "layer_type",
    "opacity",
    "overlay_position",
    "overlay_shape",
    "scale",
    "shape_color",
    "text_color",
    "text_font",
]


TargetingGeoLocationGeoEntitiesField = Literal["country", "key", "name", "region", "region_id"]


OfflineConversionDataSetUsageField = Literal["num_lift_studies"]


VideoThumbnailField = Literal["height", "id", "is_preferred", "name", "scale", "uri", "width"]


ExternalEventSourceCPASEventsDebuggingField = Literal[
    "actual_event_time",
    "app_version",
    "content_url",
    "device_os",
    "diagnostic",
    "event_name",
    "event_time",
    "missing_ids",
    "severity",
]


AdAssetFeedSpecCaptionField = Literal["adlabels", "text", "url_tags"]


HasLeadAccessField = Literal[
    "app_has_leads_permission",
    "can_access_lead",
    "enabled_lead_access_manager",
    "failure_reason",
    "failure_resolution",
    "is_page_admin",
    "page_id",
    "user_has_leads_permission",
    "user_id",
]


CollaborativeAdsPartnerBusinessesField = Literal[
    "collaborative_ads_partner_businesses_info", "dedicated_partner_business_info"
]


BusinessField = Literal[
    "block_offline_analytics",
    "collaborative_ads_managed_partner_business_info",
    "collaborative_ads_managed_partner_eligibility",
    "collaborative_ads_partner_premium_options",
    "created_by",
    "created_time",
    "extended_updated_time",
    "id",
    "is_hidden",
    "link",
    "name",
    "payment_account_id",
    "primary_page",
    "profile_picture_uri",
    "timezone_id",
    "two_factor_type",
    "updated_by",
    "updated_time",
    "user_access_expire_time",
    "verification_status",
    "vertical",
    "vertical_id",
]


SocialWifiSiteField = Literal["id"]


IGUserMessengerProfileField = Literal["ice_breakers", "persistent_menu"]


AdCreativeLinkDataImageOverlaySpecField = Literal[
    "custom_text_type",
    "float_with_margin",
    "overlay_template",
    "position",
    "text_font",
    "text_template_tags",
    "text_type",
    "theme_color",
]


SalesRightsInventoryManagementField = Literal[
    "available_impressions",
    "booked_impressions",
    "overbooked_impressions",
    "supported_countries",
    "total_impressions",
    "unavailable_impressions",
    "warning_messages",
]


AdCreativeObjectStorySpecField = Literal[
    "instagram_user_id",
    "link_data",
    "page_id",
    "photo_data",
    "product_data",
    "template_data",
    "text_data",
    "video_data",
]


AdAsyncRequestSetField = Literal[
    "canceled_count",
    "created_time",
    "error_count",
    "id",
    "in_progress_count",
    "initial_count",
    "is_completed",
    "name",
    "notification_mode",
    "notification_result",
    "notification_status",
    "notification_uri",
    "owner_id",
    "success_count",
    "total_count",
    "updated_time",
]


AssignedUserField = Literal["business", "id", "name", "user_type"]


AdKpiShiftField = Literal[
    "ad_set",
    "cost_per_result_shift",
    "enough_effective_days",
    "result_indicator",
    "result_shift",
    "spend_shift",
]


LeadGenPostSubmissionCheckResultField = Literal[
    "api_call_result", "api_error_message", "shown_thank_you_page"
]


CustomAudienceHealthField = Literal["health"]


ReachFrequencyActivityField = Literal[
    "account_id",
    "campaign_active",
    "campaign_started",
    "creative_uploaded",
    "io_approved",
    "sf_link",
]


BusinessUserField = Literal[
    "business",
    "business_role_request",
    "email",
    "finance_permission",
    "first_name",
    "id",
    "ip_permission",
    "last_name",
    "marked_for_removal",
    "name",
    "pending_email",
    "role",
    "tasks",
    "title",
    "two_fac_status",
]


AdCreativeTemplateURLSpecField = Literal[
    "android", "config", "ios", "ipad", "iphone", "web", "windows_phone"
]


CustomAudienceSharingStatusField = Literal["sharing_relationship_id", "status"]


ProductFeedRulePreviewSampleField = Literal["properties_after", "properties_before"]


FBLiteToNTTransitionsField = Literal["transition"]


BusinessVideoField = Literal["business", "id", "media_library_url", "name", "video"]


TargetingField = Literal[
    "adgroup_id",
    "age_max",
    "age_min",
    "age_range",
    "alternate_auto_targeting_option",
    "app_install_state",
    "audience_network_positions",
    "behaviors",
    "brand_safety_content_filter_levels",
    "catalog_based_targeting",
    "cities",
    "college_years",
    "connections",
    "contextual_targeting_categories",
    "countries",
    "country",
    "country_groups",
    "custom_audiences",
    "device_platforms",
    "direct_install_devices",
    "dynamic_audience_ids",
    "education_majors",
    "education_schools",
    "education_statuses",
    "effective_audience_network_positions",
    "effective_device_platforms",
    "effective_facebook_positions",
    "effective_instagram_positions",
    "effective_messenger_positions",
    "effective_publisher_platforms",
    "effective_threads_positions",
    "engagement_specs",
    "ethnic_affinity",
    "exclude_reached_since",
    "excluded_brand_safety_content_types",
    "excluded_connections",
    "excluded_custom_audiences",
    "excluded_dynamic_audience_ids",
    "excluded_engagement_specs",
    "excluded_geo_locations",
    "excluded_mobile_device_model",
    "excluded_product_audience_specs",
    "excluded_publisher_categories",
    "excluded_publisher_list_ids",
    "excluded_user_device",
    "exclusions",
    "facebook_positions",
    "family_statuses",
    "fb_deal_id",
    "flexible_spec",
    "friends_of_connections",
    "genders",
    "generation",
    "geo_locations",
    "home_ownership",
    "home_type",
    "home_value",
    "household_composition",
    "income",
    "industries",
    "instagram_positions",
    "instream_video_skippable_excluded",
    "interested_in",
    "interests",
    "is_whatsapp_destination_ad",
    "keywords",
    "life_events",
    "locales",
    "messenger_positions",
    "moms",
    "net_worth",
    "office_type",
    "place_page_set_ids",
    "political_views",
    "politics",
    "product_audience_specs",
    "prospecting_audience",
    "publisher_platforms",
    "radius",
    "regions",
    "relationship_statuses",
    "site_category",
    "targeting_automation",
    "targeting_optimization",
    "targeting_relaxation_types",
    "threads_positions",
    "user_adclusters",
    "user_device",
    "user_event",
    "user_os",
    "wireless_carrier",
    "work_employers",
    "work_positions",
    "zips",
]


AdsPixelEventPredictionField = Literal["dismissed", "event_type", "rule"]


DeliveryCheckExtraInfoField = Literal["adgroup_ids", "campaign_ids", "countries"]


TargetingGeoLocationField = Literal[
    "cities",
    "countries",
    "country_groups",
    "custom_locations",
    "electoral_districts",
    "geo_markets",
    "large_geo_areas",
    "location_cluster_ids",
    "location_types",
    "medium_geo_areas",
    "metro_areas",
    "neighborhoods",
    "places",
    "political_districts",
    "regions",
    "small_geo_areas",
    "subcities",
    "subneighborhoods",
    "zips",
]


CustomAudienceAdAccountField = Literal["id"]


ColumnSuggestionsField = Literal["explanations", "format", "objective", "optimization_goals"]


ArAdsDataContainerField = Literal[
    "camera_facing_override",
    "creation_time",
    "effect",
    "id",
    "is_published",
    "last_modified_time",
    "name",
]


WindowsAppLinkField = Literal["app_id", "app_name", "package_family_name", "url"]


ProductSetField = Literal[
    "auto_creation_url",
    "filter",
    "id",
    "latest_metadata",
    "live_metadata",
    "name",
    "ordering_info",
    "product_catalog",
    "product_count",
    "retailer_id",
]


AdAccountURLForAssetExtractionField = Literal["source_type", "source_url"]


EngagementField = Literal[
    "count",
    "count_string",
    "count_string_with_like",
    "count_string_without_like",
    "social_sentence",
    "social_sentence_with_like",
    "social_sentence_without_like",
]


ContentDeliveryReportField = Literal[
    "content_id",
    "content_name",
    "content_url",
    "creator_id",
    "creator_name",
    "creator_url",
    "estimated_impressions",
]


VideoStatusPublishingPhaseField = Literal["errors", "publish_status", "publish_time", "status"]


BrandedContentEligibleSponsorIDsField = Literal["fb_page", "ig_account_v2", "ig_approval_needed"]


IGShoppingReviewStatusReasonWithHelpMessageField = Literal["code", "help_url", "message"]


AdSavedReportField = Literal[
    "app_owner",
    "breakdowns",
    "builtin_column_set",
    "creation_source",
    "date_interval",
    "date_preset",
    "format_version",
    "id",
    "insights_section",
    "is_shared_unread",
    "level",
    "name",
    "normalized_filter",
    "sort",
    "user_attribution_windows",
    "user_columns",
    "user_filter",
    "user_owner",
]


AdAccountPaymentDetailsField = Literal[
    "amount", "create_date", "id", "last_action_status", "metadata", "payment_details_id"
]


AdRuleHistoryResultField = Literal["actions", "object_id", "object_type"]


LeadGenConditionalQuestionsGroupQuestionsField = Literal["field_key", "input_type", "name"]


AsyncSessionField = Literal[
    "app",
    "complete_time",
    "error_code",
    "exception",
    "id",
    "method",
    "name",
    "page",
    "percent_completed",
    "platform_version",
    "result",
    "start_time",
    "status",
    "uri",
    "user",
]


AdAccountCreationRequestField = Literal[
    "ad_accounts_currency",
    "ad_accounts_info",
    "additional_comment",
    "address_in_chinese",
    "address_in_english",
    "address_in_local_language",
    "advertiser_business",
    "appeal_reason",
    "business",
    "business_registration_id",
    "chinese_legal_entity_name",
    "contact",
    "creator",
    "credit_card_id",
    "disapproval_reasons",
    "english_legal_entity_name",
    "extended_credit_id",
    "id",
    "is_smb",
    "is_test",
    "legal_entity_name_in_local_language",
    "oe_request_id",
    "official_website_url",
    "planning_agency_business",
    "planning_agency_business_id",
    "promotable_app_ids",
    "promotable_page_ids",
    "promotable_urls",
    "request_change_reasons",
    "status",
    "subvertical",
    "subvertical_v2",
    "time_created",
    "vertical",
    "vertical_v2",
]


PageUserPermissionsField = Literal[
    "business",
    "business_persona",
    "created_by",
    "created_time",
    "email",
    "status",
    "tasks",
    "updated_by",
    "updated_time",
    "user",
]


PlatformSessionKeyField = Literal["id"]


LocationField = Literal[
    "city",
    "city_id",
    "country",
    "country_code",
    "latitude",
    "located_in",
    "longitude",
    "name",
    "region",
    "region_id",
    "state",
    "street",
    "zip",
]


AdAssetCustomizationRuleCustomizationSpecField = Literal[
    "age_max",
    "age_min",
    "audience_network_positions",
    "device_platforms",
    "facebook_positions",
    "geo_locations",
    "instagram_positions",
    "locales",
    "messenger_positions",
    "publisher_platforms",
]


CustomAudienceSharedAccountCampaignInfoField = Literal[
    "account_id",
    "account_name",
    "adset_excluding_count",
    "adset_including_count",
    "campaign_delivery_status",
    "campaign_objective",
    "campaign_pages",
    "campaign_schedule",
]


ManagementSiteLinkField = Literal[
    "ad_account_id",
    "id",
    "link_domain",
    "link_hash",
    "link_image_hash",
    "link_image_url",
    "link_title",
    "link_type",
    "link_url",
]


DeliveryWindowField = Literal[
    "ad",
    "ae",
    "af",
    "ag",
    "ai",
    "al",
    "all",
    "am",
    "an",
    "ao",
    "aq",
    "ar",
    "as",
    "at",
    "au",
    "aw",
    "ax",
    "az",
    "ba",
    "bb",
    "bd",
    "be",
    "bf",
    "bg",
    "bh",
    "bi",
    "bj",
    "bl",
    "bm",
    "bn",
    "bo",
    "bq",
    "br",
    "bs",
    "bt",
    "bv",
    "bw",
    "by",
    "bz",
    "ca",
    "cc",
    "cd",
    "cf",
    "cg",
    "ch",
    "ci",
    "ck",
    "cl",
    "cm",
    "cn",
    "co",
    "cr",
    "cu",
    "cv",
    "cw",
    "cx",
    "cy",
    "cz",
    "de",
    "dj",
    "dk",
    "dm",
    "do",
    "dz",
    "ec",
    "ee",
    "eg",
    "eh",
    "er",
    "es",
    "et",
    "fi",
    "fj",
    "fk",
    "fm",
    "fo",
    "fr",
    "ga",
    "gb",
    "gd",
    "ge",
    "gf",
    "gg",
    "gh",
    "gi",
    "gl",
    "gm",
    "gn",
    "gp",
    "gq",
    "gr",
    "gs",
    "gt",
    "gu",
    "gw",
    "gy",
    "hk",
    "hm",
    "hn",
    "hr",
    "ht",
    "hu",
    "id",
    "ie",
    "il",
    "im",
    "in",
    "io",
    "iq",
    "ir",
    "is",
    "it",
    "je",
    "jm",
    "jo",
    "jp",
    "ke",
    "kg",
    "kh",
    "ki",
    "km",
    "kn",
    "kp",
    "kr",
    "kw",
    "ky",
    "kz",
    "la",
    "lb",
    "lc",
    "li",
    "lk",
    "lr",
    "ls",
    "lt",
    "lu",
    "lv",
    "ly",
    "ma",
    "mc",
    "md",
    "me",
    "mf",
    "mg",
    "mh",
    "mk",
    "ml",
    "mm",
    "mn",
    "mo",
    "mp",
    "mq",
    "mr",
    "ms",
    "mt",
    "mu",
    "mv",
    "mw",
    "mx",
    "my",
    "mz",
    "na",
    "nc",
    "ne",
    "nf",
    "ng",
    "ni",
    "nl",
    "no",
    "np",
    "nr",
    "nu",
    "nz",
    "om",
    "pa",
    "pe",
    "pf",
    "pg",
    "ph",
    "pk",
    "pl",
    "pm",
    "pn",
    "pr",
    "ps",
    "pt",
    "pw",
    "py",
    "qa",
    "re",
    "ro",
    "rs",
    "ru",
    "rw",
    "sa",
    "sb",
    "sc",
    "sd",
    "se",
    "sg",
    "sh",
    "si",
    "sj",
    "sk",
    "sl",
    "sm",
    "sn",
    "so",
    "sr",
    "ss",
    "st",
    "sv",
    "sx",
    "sy",
    "sz",
    "tc",
    "td",
    "tf",
    "tg",
    "th",
    "tj",
    "tk",
    "tl",
    "tm",
    "tn",
    "to",
    "tr",
    "tt",
    "tv",
    "tw",
    "tz",
    "ua",
    "ug",
    "um",
    "us",
    "uy",
    "uz",
    "va",
    "vc",
    "ve",
    "vg",
    "vi",
    "vn",
    "vu",
    "wf",
    "ws",
    "xk",
    "ye",
    "yt",
    "za",
    "zm",
    "zw",
]


BidScheduleField = Literal[
    "ad_object_id",
    "bid_recurrence_type",
    "bid_timezone",
    "bid_value",
    "id",
    "status",
    "time_end",
    "time_start",
]


AdCreativeWhatsAppChannelSpecField = Literal["channel_id", "channel_url"]


AdgroupReviewFeedbackField = Literal["global", "placement_specific"]


AdjacentContentDeliveryReportField = Literal["ad_id", "content", "impression_id"]


CurrencyAmountField = Literal["amount", "amount_in_hundredths", "currency", "offsetted_amount"]


PageRestaurantServicesField = Literal[
    "catering",
    "delivery",
    "groups",
    "kids",
    "outdoor",
    "pickup",
    "reserve",
    "takeout",
    "waiter",
    "walkins",
]


AdCampaignBidConstraintField = Literal["roas_average_floor"]


TargetingGeoLocationPlaceField = Literal[
    "country",
    "distance_unit",
    "key",
    "latitude",
    "longitude",
    "name",
    "primary_city_id",
    "radius",
    "region_id",
]


ChinaBusinessOnboardingVettingRequestField = Literal[
    "ad_account_creation_request_status",
    "ad_account_limit",
    "ad_account_number",
    "ad_accounts_info",
    "advertiser_business_id",
    "advertiser_business_name",
    "business_manager_id",
    "business_registration",
    "business_registration_id",
    "business_verification_status",
    "chinese_address",
    "chinese_legal_entity_name",
    "city",
    "contact",
    "coupon_code",
    "disapprove_reason",
    "english_business_name",
    "id",
    "official_website_url",
    "org_ad_account_count",
    "payment_type",
    "planning_agency_id",
    "planning_agency_name",
    "promotable_app_ids",
    "promotable_page_ids",
    "promotable_pages",
    "promotable_urls",
    "request_changes_reason",
    "reviewed_user",
    "spend_limit",
    "status",
    "subvertical",
    "subvertical_v2",
    "supporting_document",
    "time_changes_requested",
    "time_created",
    "time_updated",
    "time_zone",
    "used_reseller_link",
    "user_id",
    "user_name",
    "vertical",
    "vertical_v2",
    "viewed_by_reseller",
    "zip_code",
]


AdAccountAAASimilarCampaignsField = Literal[
    "similar_campaign_limit", "similar_campaigns_info", "used_campaign_slots"
]


AdReportRunField = Literal[
    "account_id",
    "async_percent_completion",
    "async_report_url",
    "async_status",
    "date_start",
    "date_stop",
    "emails",
    "error_code",
    "friendly_name",
    "id",
    "is_async_export",
    "is_bookmarked",
    "is_running",
    "schedule_id",
    "time_completed",
    "time_ref",
]


PaymentPricepointsField = Literal["mobile"]


RecommendedIGMediaField = Literal["intent_score"]


TargetingProspectingAudienceField = Literal["sources"]


ProductCatalogDiagnosticGroupField = Literal[
    "affected_channels",
    "affected_entity",
    "affected_features",
    "diagnostics",
    "error_code",
    "number_of_affected_entities",
    "number_of_affected_items",
    "severity",
    "subtitle",
    "title",
    "type",
]


AdStudyObjectiveField = Literal[
    "id", "is_primary", "last_updated_results", "name", "results", "type"
]


AdsSignalDiagnosticIssueField = Literal[
    "data_source_id",
    "data_source_type",
    "diagnostic_type",
    "event_name",
    "traffic_anomaly_drop_percentage",
    "traffic_anomaly_drop_timestamp",
]


CPASAdvertiserPartnershipRecommendationField = Literal[
    "advertiser_business_id",
    "brand_business_id",
    "brands",
    "countries",
    "id",
    "merchant_business_id",
    "merchant_categories",
    "status",
    "status_reason",
]


ProductFeedField = Literal[
    "country",
    "created_time",
    "default_currency",
    "deletion_enabled",
    "delimiter",
    "encoding",
    "file_name",
    "id",
    "ingestion_source_type",
    "item_sub_type",
    "latest_upload",
    "migrated_from_feed_id",
    "name",
    "override_type",
    "primary_feeds",
    "product_count",
    "quoted_fields_mode",
    "schedule",
    "supplementary_feeds",
    "update_schedule",
]


AuthLinkField = Literal["link"]


BusinessPageRequestField = Literal["id", "page"]


BAPIDomainField = Literal["domain", "in_cool_down_until", "is_eligible_for_vo", "is_in_cool_down"]


ReachFrequencyPredictionField = Literal[
    "account_id",
    "activity_status",
    "ad_formats",
    "auction_entry_option_index",
    "audience_size_lower_bound",
    "audience_size_upper_bound",
    "business_id",
    "buying_type",
    "campaign_group_id",
    "campaign_id",
    "campaign_time_start",
    "campaign_time_stop",
    "currency",
    "curve_budget_reach",
    "curve_reach",
    "daily_grp_curve",
    "daily_impression_curve",
    "daily_impression_curve_map",
    "day_parting_schedule",
    "destination_id",
    "end_time",
    "expiration_time",
    "external_budget",
    "external_impression",
    "external_maximum_budget",
    "external_maximum_impression",
    "external_maximum_reach",
    "external_minimum_budget",
    "external_minimum_impression",
    "external_minimum_reach",
    "external_reach",
    "feed_ratio_0000",
    "frequency_cap",
    "frequency_distribution_map",
    "frequency_distribution_map_agg",
    "grp_audience_size",
    "grp_avg_probability_map",
    "grp_country_audience_size",
    "grp_curve",
    "grp_dmas_audience_size",
    "grp_filtering_threshold_00",
    "grp_points",
    "grp_ratio",
    "grp_reach_ratio",
    "grp_status",
    "holdout_percentage",
    "id",
    "impression_curve",
    "instagram_destination_id",
    "instream_packages",
    "interval_frequency_cap",
    "interval_frequency_cap_reset_period",
    "is_balanced_frequency",
    "is_bonus_media",
    "is_conversion_goal",
    "is_higher_average_frequency",
    "is_io",
    "is_reserved_buying",
    "is_trp",
    "name",
    "objective",
    "objective_name",
    "odax_objective",
    "odax_objective_name",
    "optimization_goal",
    "optimization_goal_name",
    "pause_periods",
    "percent_reach_at_target_frequency",
    "placement_breakdown",
    "placement_breakdown_map",
    "plan_name",
    "plan_type",
    "prediction_mode",
    "prediction_progress",
    "reference_id",
    "reservation_status",
    "start_time",
    "status",
    "story_event_type",
    "target_cpm",
    "target_frequency",
    "target_frequency_reset_period",
    "target_spec",
    "time_created",
    "time_updated",
    "timezone_id",
    "timezone_name",
    "topline_id",
    "video_view_length_constraint",
    "viewtag",
]


AdCreativeAdDisclaimerField = Literal["text", "title", "url"]


AdsReportBuilderExportCoreField = Literal[
    "async_percent_completion",
    "async_report_url",
    "async_status",
    "client_creation_value",
    "expiry_time",
    "export_download_time",
    "export_format",
    "export_name",
    "export_type",
    "has_seen",
    "id",
    "is_sharing",
    "link_sharing_expiration_time",
    "link_sharing_uri",
    "time_completed",
    "time_start",
]


AdCreativeStaticFallbackSpecField = Literal[
    "call_to_action", "description", "image_hash", "link", "message", "name"
]


CommerceSettingsField = Literal["inventory", "total_inventory"]


ManagedPartnerExtendedCreditField = Literal[
    "id", "max_balance", "receiving_credit_allocation_config"
]


BusinessAdvertisableApplicationsResultField = Literal[
    "are_app_events_unavailable", "business", "has_insight_permission", "id", "name", "photo_url"
]


LifeEventField = Literal[
    "description", "end_time", "from", "id", "is_hidden", "start_time", "title", "updated_time"
]


ProductItemVideoDataField = Literal["tags", "url"]


AdAccountRelatedIcoStudyField = Literal[""]  # No fields defined


AdsDatasetField = Literal[
    "can_proxy",
    "collection_rate",
    "config",
    "creation_time",
    "creator",
    "dataset_id",
    "description",
    "duplicate_entries",
    "enable_auto_assign_to_accounts",
    "enable_automatic_events",
    "enable_automatic_matching",
    "enable_real_time_event_log",
    "event_stats",
    "event_time_max",
    "event_time_min",
    "first_party_cookie_status",
    "has_bapi_domains",
    "has_catalog_microdata_activity",
    "has_ofa_redacted_keys",
    "has_sent_pii",
    "id",
    "is_consolidated_container",
    "is_created_by_business",
    "is_crm",
    "is_eligible_for_sharing_to_ad_account",
    "is_eligible_for_sharing_to_business",
    "is_eligible_for_value_optimization",
    "is_mta_use",
    "is_restricted_use",
    "is_unavailable",
    "last_fired_time",
    "last_upload_app",
    "last_upload_app_changed_time",
    "last_upload_time",
    "late_upload_reminder_eligibility",
    "match_rate_approx",
    "matched_entries",
    "name",
    "no_ads_tracked_for_weekly_uploaded_events_reminder_eligibility",
    "num_active_ad_set_tracked",
    "num_recent_offline_conversions_uploaded",
    "num_uploads",
    "owner_ad_account",
    "owner_business",
    "percentage_of_late_uploads_in_external_suboptimal_window",
    "permissions",
    "server_last_fired_time",
    "show_automatic_events",
    "upload_rate",
    "upload_reminder_eligibility",
    "usage",
    "valid_entries",
]


PageSettingsField = Literal["setting", "value"]


BusinessRequestField = Literal[
    "accessor",
    "creation_time",
    "id",
    "object_id",
    "object_type",
    "permitted_tasks",
    "request_status",
    "request_type",
    "requester",
]


AdNetworkAnalyticsSyncQueryResultField = Literal["omitted_results", "query_id", "results"]


InstagramRelatedProductTagsField = Literal[
    "checkout_setting", "id", "image_uri", "name", "price_label", "sale_price_label"
]


ConnectionsTargetingField = Literal["id", "name"]


ExtendedCreditField = Literal[
    "allocated_amount",
    "balance",
    "credit_available",
    "credit_type",
    "id",
    "is_access_revoked",
    "is_automated_experience",
    "legal_entity_name",
    "liable_address",
    "liable_biz_name",
    "max_balance",
    "online_max_balance",
    "owner_business",
    "owner_business_name",
    "partition_from",
    "receiving_credit_allocation_config",
    "send_bill_to_address",
    "send_bill_to_biz_name",
    "sold_to_address",
]


CommercePayoutField = Literal[
    "amount", "payout_date", "payout_reference_id", "status", "transfer_id"
]


IGUpcomingEventField = Literal[
    "end_time", "id", "notification_subtypes", "notification_target_time", "start_time", "title"
]


AdRuleScheduleField = Literal["days", "end_minute", "start_minute"]


AdLightCampaignField = Literal["campaign_id", "id"]


ResellerGuidanceField = Literal[
    "ad_account_first_spend_date",
    "ad_account_id",
    "adopted_guidance_l7d",
    "advertiser_name",
    "attributed_to_reseller_l7d",
    "available_guidance",
    "guidance_adoption_rate_l7d",
    "nurtured_by_reseller_l7d",
    "planning_agency_name",
    "recommendation_time",
    "reporting_ds",
    "reseller",
    "revenue_l30d",
    "ultimate_advertiser_name",
]


CurrencyField = Literal["currency_offset", "usd_exchange", "usd_exchange_inverse", "user_currency"]


ProductItemOfferField = Literal["availability_area", "availability_radius", "id"]


WorkUserFrontlineField = Literal["has_access", "is_frontline"]


PermissionField = Literal["permission", "status"]


AdAssetBodyField = Literal["id", "text", "url_tags"]


ReachFrequencyCurveUpperConfidenceRangeField = Literal[
    "impression_upper",
    "num_points",
    "reach",
    "reach_upper",
    "uniq_video_views_2s_upper",
    "video_views_2s_upper",
]


WebsiteCreativeAssetSuggestionsField = Literal[
    "ad_account_id", "extraction_status", "id", "link_url"
]


CheckBatchRequestStatusField = Literal[
    "errors",
    "errors_total_count",
    "handle",
    "ids_of_invalid_requests",
    "status",
    "warnings",
    "warnings_total_count",
]


UserPaymentMobilePricepointsField = Literal[
    "mobile_country", "phone_number_last4", "pricepoints", "user_currency"
]


WhatsAppBusinessProfileField = Literal["id", "name_verification", "whatsapp_business_api_data"]


LoomConfigField = Literal["id"]


AdCreativeBrandedContentAdsField = Literal[
    "ad_format",
    "content_search_input",
    "creator_ad_permission_type",
    "facebook_boost_post_access_token",
    "instagram_boost_post_access_token",
    "is_mca_internal",
    "parent_source_facebook_post_id",
    "parent_source_instagram_media_id",
    "partners",
    "product_set_partner_selection_status",
    "promoted_page_id",
    "testimonial",
    "testimonial_locale",
    "ui_version",
]


AdCreativeMediaSourcingSpecField = Literal[""]  # No fields defined


BrandRequestField = Literal[
    "ad_countries",
    "additional_contacts",
    "approval_level",
    "cells",
    "countries",
    "deny_reason",
    "end_time",
    "estimated_reach",
    "id",
    "is_multicell",
    "locale",
    "max_age",
    "min_age",
    "questions",
    "region",
    "request_status",
    "review_date",
    "start_time",
    "status",
    "submit_date",
    "total_budget",
]


BusinessManagedPartnerEligibilityField = Literal["is_eligible", "reason_code", "reason_description"]


LeadGenAppointmentBookingInfoField = Literal[
    "advertiser_timezone_offset", "appointment_durations", "appointment_slots_by_day"
]


WearableDevicePublicKeyField = Literal[
    "base64_encoded_public_key",
    "creation_time_on_device",
    "device_uuid",
    "id",
    "key_type",
    "owner_id",
    "product_use_case",
    "version",
]


AdRuleTriggerField = Literal["field", "operator", "type", "value"]


AdCreativePlatformCustomizationField = Literal["instagram"]


AdRuleExecutionOptionsField = Literal["field", "operator", "value"]


AdAccountAdRulesCountByTypeField = Literal["count", "evaluation_type"]


AudioReleaseField = Literal[
    "album_title",
    "asset_availability_status",
    "audio_availability_status",
    "audio_release_image_uri",
    "created_time",
    "displayed_artist",
    "ean",
    "genre",
    "grid",
    "id",
    "isrc",
    "label_name",
    "original_release_date",
    "parental_warning_type",
    "proprietary_id",
    "upc",
]


UnifiedThreadField = Literal[
    "can_reply",
    "folder",
    "former_participants",
    "id",
    "is_subscribed",
    "link",
    "linked_group",
    "message_count",
    "name",
    "participants",
    "scoped_thread_key",
    "senders",
    "snippet",
    "subject",
    "unread_count",
    "updated_time",
    "wallpaper",
]


BrandedContentShadowIGUserIDField = Literal["id"]


CustomAudienceGroupField = Literal[
    "audience_type_param_name", "existing_customer_tag", "new_customer_tag"
]


AdAccountLiveVideoAdvertiserField = Literal[
    "is_lva_toggle_on",
    "lva_default_budget",
    "should_default_current_live",
    "should_default_scheduled_live",
    "should_show_lva_toggle",
]


UniqueAdCreativeField = Literal["sample_creative", "visual_hash"]


AdAsyncRequestSetNotificationResultField = Literal["response", "status"]


CampaignGroupCollaborativeAdsPartnerInfoField = Literal[""]  # No fields defined


CatalogBasedTargetingField = Literal["geo_targeting_type"]


IPObjectField = Literal["ip_permission", "user"]


AdsInsightsField = Literal[
    "account_currency",
    "account_id",
    "account_name",
    "action_values",
    "actions",
    "ad_click_actions",
    "ad_id",
    "ad_impression_actions",
    "ad_name",
    "adset_end",
    "adset_id",
    "adset_name",
    "adset_start",
    "age_targeting",
    "attribution_setting",
    "auction_bid",
    "auction_competitiveness",
    "auction_max_competitor_bid",
    "average_purchases_conversion_value",
    "buying_type",
    "campaign_id",
    "campaign_name",
    "canvas_avg_view_percent",
    "canvas_avg_view_time",
    "catalog_segment_actions",
    "catalog_segment_value",
    "catalog_segment_value_mobile_purchase_roas",
    "catalog_segment_value_omni_purchase_roas",
    "catalog_segment_value_website_purchase_roas",
    "clicks",
    "conversion_lead_rate",
    "conversion_leads",
    "conversion_rate_ranking",
    "conversion_values",
    "conversions",
    "converted_product_app_custom_event_fb_mobile_purchase",
    "converted_product_app_custom_event_fb_mobile_purchase_value",
    "converted_product_offline_purchase",
    "converted_product_offline_purchase_value",
    "converted_product_omni_purchase",
    "converted_product_omni_purchase_values",
    "converted_product_quantity",
    "converted_product_value",
    "converted_product_website_pixel_purchase",
    "converted_product_website_pixel_purchase_value",
    "converted_promoted_product_app_custom_event_fb_mobile_purchase",
    "converted_promoted_product_app_custom_event_fb_mobile_purchase_value",
    "converted_promoted_product_offline_purchase",
    "converted_promoted_product_offline_purchase_value",
    "converted_promoted_product_omni_purchase",
    "converted_promoted_product_omni_purchase_values",
    "converted_promoted_product_quantity",
    "converted_promoted_product_value",
    "converted_promoted_product_website_pixel_purchase",
    "converted_promoted_product_website_pixel_purchase_value",
    "cost_per_15_sec_video_view",
    "cost_per_2_sec_continuous_video_view",
    "cost_per_action_type",
    "cost_per_ad_click",
    "cost_per_conversion",
    "cost_per_conversion_lead",
    "cost_per_dda_countby_convs",
    "cost_per_estimated_ad_recallers",
    "cost_per_inline_link_click",
    "cost_per_inline_post_engagement",
    "cost_per_objective_result",
    "cost_per_one_thousand_ad_impression",
    "cost_per_outbound_click",
    "cost_per_result",
    "cost_per_thruplay",
    "cost_per_unique_action_type",
    "cost_per_unique_click",
    "cost_per_unique_conversion",
    "cost_per_unique_inline_link_click",
    "cost_per_unique_outbound_click",
    "cpc",
    "cpm",
    "cpp",
    "created_time",
    "creative_media_type",
    "ctr",
    "date_start",
    "date_stop",
    "dda_countby_convs",
    "dda_results",
    "engagement_rate_ranking",
    "estimated_ad_recall_rate",
    "estimated_ad_recall_rate_lower_bound",
    "estimated_ad_recall_rate_upper_bound",
    "estimated_ad_recallers",
    "estimated_ad_recallers_lower_bound",
    "estimated_ad_recallers_upper_bound",
    "frequency",
    "full_view_impressions",
    "full_view_reach",
    "gender_targeting",
    "impressions",
    "inline_link_click_ctr",
    "inline_link_clicks",
    "inline_post_engagement",
    "instagram_upcoming_event_reminders_set",
    "instant_experience_clicks_to_open",
    "instant_experience_clicks_to_start",
    "instant_experience_outbound_clicks",
    "interactive_component_tap",
    "labels",
    "landing_page_view_actions_per_link_click",
    "landing_page_view_per_link_click",
    "landing_page_view_per_purchase_rate",
    "location",
    "marketing_messages_click_rate_benchmark",
    "marketing_messages_cost_per_delivered",
    "marketing_messages_cost_per_link_btn_click",
    "marketing_messages_delivered",
    "marketing_messages_delivery_rate",
    "marketing_messages_link_btn_click",
    "marketing_messages_link_btn_click_rate",
    "marketing_messages_media_view_rate",
    "marketing_messages_phone_call_btn_click_rate",
    "marketing_messages_quick_reply_btn_click",
    "marketing_messages_quick_reply_btn_click_rate",
    "marketing_messages_read",
    "marketing_messages_read_rate",
    "marketing_messages_read_rate_benchmark",
    "marketing_messages_sent",
    "marketing_messages_spend",
    "marketing_messages_spend_currency",
    "marketing_messages_website_add_to_cart",
    "marketing_messages_website_initiate_checkout",
    "marketing_messages_website_purchase",
    "marketing_messages_website_purchase_values",
    "mobile_app_purchase_roas",
    "objective",
    "objective_result_rate",
    "objective_results",
    "onsite_conversion_messaging_detected_purchase_deduped",
    "optimization_goal",
    "outbound_clicks",
    "outbound_clicks_ctr",
    "place_page_name",
    "product_brand",
    "product_category",
    "product_content_id",
    "product_custom_label_0",
    "product_custom_label_1",
    "product_custom_label_2",
    "product_custom_label_3",
    "product_custom_label_4",
    "product_group_content_id",
    "product_group_retailer_id",
    "product_name",
    "product_retailer_id",
    "purchase_per_landing_page_view",
    "purchase_roas",
    "purchases_per_link_click",
    "qualifying_question_qualify_answer_rate",
    "quality_ranking",
    "reach",
    "result_rate",
    "result_values_performance_indicator",
    "results",
    "shops_assisted_purchases",
    "social_spend",
    "spend",
    "total_postbacks",
    "total_postbacks_detailed",
    "total_postbacks_detailed_v4",
    "unique_actions",
    "unique_clicks",
    "unique_conversions",
    "unique_ctr",
    "unique_inline_link_click_ctr",
    "unique_inline_link_clicks",
    "unique_link_clicks_ctr",
    "unique_outbound_clicks",
    "unique_outbound_clicks_ctr",
    "unique_video_continuous_2_sec_watched_actions",
    "unique_video_view_15_sec",
    "updated_time",
    "video_15_sec_watched_actions",
    "video_30_sec_watched_actions",
    "video_avg_time_watched_actions",
    "video_continuous_2_sec_watched_actions",
    "video_p100_watched_actions",
    "video_p25_watched_actions",
    "video_p50_watched_actions",
    "video_p75_watched_actions",
    "video_p95_watched_actions",
    "video_play_actions",
    "video_play_curve_actions",
    "video_play_retention_0_to_15s_actions",
    "video_play_retention_20_to_60s_actions",
    "video_play_retention_graph_actions",
    "video_thruplay_watched_actions",
    "video_time_watched_actions",
    "video_view_per_impression",
    "website_ctr",
    "website_purchase_roas",
    "wish_bid",
]


ProductCatalogLocalizationSettingsField = Literal["default_country", "default_language", "id"]


MessageDeliveryEstimateField = Literal[
    "estimate_cost",
    "estimate_cost_lower_bound",
    "estimate_cost_upper_bound",
    "estimate_coverage_lower_bound",
    "estimate_coverage_upper_bound",
    "estimate_delivery",
    "estimate_delivery_lower_bound",
    "estimate_delivery_upper_bound",
    "estimate_status",
]


AdAsyncRequestField = Literal[
    "async_request_set",
    "created_time",
    "id",
    "input",
    "result",
    "scope_object_id",
    "status",
    "type",
    "updated_time",
]


CommentField = Literal[
    "admin_creator",
    "application",
    "attachment",
    "can_comment",
    "can_hide",
    "can_like",
    "can_remove",
    "can_reply_privately",
    "comment_count",
    "created_time",
    "from",
    "id",
    "is_hidden",
    "is_private",
    "like_count",
    "live_broadcast_timestamp",
    "message",
    "message_tags",
    "object",
    "parent",
    "permalink_url",
    "private_reply_conversation",
    "user_likes",
]


AdCreativePhotoDataField = Literal[
    "branded_content_shared_to_sponsor_status",
    "branded_content_sponsor_page_id",
    "caption",
    "image_hash",
    "page_welcome_message",
    "url",
]


PagePostExperimentField = Literal[
    "auto_resolve_settings",
    "control_video_id",
    "creation_time",
    "creator",
    "declared_winning_time",
    "declared_winning_video_id",
    "description",
    "experiment_video_ids",
    "id",
    "insight_snapshots",
    "name",
    "optimization_goal",
    "publish_status",
    "publish_time",
    "scheduled_experiment_timestamp",
    "updated_time",
]


AutomotiveModelField = Literal[
    "applinks",
    "automotive_model_id",
    "availability",
    "body_style",
    "category_specific_fields",
    "currency",
    "custom_label_0",
    "custom_label_1",
    "custom_label_2",
    "custom_label_3",
    "custom_label_4",
    "custom_number_0",
    "custom_number_1",
    "custom_number_2",
    "custom_number_3",
    "custom_number_4",
    "description",
    "drivetrain",
    "exterior_color",
    "finance_description",
    "finance_type",
    "fuel_type",
    "generation",
    "id",
    "image_fetch_status",
    "images",
    "interior_color",
    "interior_upholstery",
    "make",
    "model",
    "price",
    "sanitized_images",
    "title",
    "transmission",
    "trim",
    "unit_price",
    "url",
    "visibility",
    "year",
]


CPASSetupField = Literal[""]  # No fields defined


CatalogSubVerticalListField = Literal[
    "appliances",
    "baby_feeding",
    "baby_transport",
    "beauty",
    "bedding",
    "cameras",
    "cameras_and_photos",
    "cell_phones_and_smart_watches",
    "cleaning_supplies",
    "clo_offer",
    "clothing",
    "clothing_accessories",
    "computer_components",
    "computers_and_tablets",
    "computers_laptops_and_tablets",
    "diapering_and_potty_training",
    "electronic_accessories_and_cables",
    "electronics_accessories",
    "furniture",
    "health",
    "home",
    "home_goods",
    "household_and_cleaning_supplies",
    "jewelry",
    "large_appliances",
    "local_service_business_item",
    "local_service_business_restaurant",
    "loyalty_offer",
    "nursery",
    "printers_and_scanners",
    "printers_scanners_and_fax_machines",
    "product_discount",
    "projectors",
    "shoes",
    "shoes_and_footwear",
    "software",
    "televisions_and_monitors",
    "test_child_sub_vertical",
    "test_grand_child_sub_vertical",
    "test_sub_vertical",
    "test_sub_vertical_alias",
    "test_sub_vertical_data_object",
    "third_party_electronics",
    "third_party_toys_and_games",
    "toys",
    "toys_and_games",
    "tvs_and_monitors",
    "vehicle_manufacturer",
    "video_game_consoles_and_video_games",
    "video_games_and_consoles",
    "video_projectors",
    "watches",
]


MerchantComplianceField = Literal[
    "active_campaigns",
    "compliance_status",
    "count_down_start_time",
    "purchase",
    "purchase_conversion_value",
]


AnalyticsUserConfigField = Literal["demo_app_nux_config", "flags", "id"]


AdCreativeRewardInfoField = Literal["reward_offer_id", "reward_program_id"]


AdAccountPromotionProgressBarField = Literal[
    "adaccount_permission",
    "coupon_currency",
    "coupon_value",
    "expiration_time",
    "progress_completed",
    "promotion_type",
    "spend_requirement_in_cent",
    "spend_since_enrollment",
]


IGProductTaggingInvalidationErrorField = Literal["description", "taggability_state", "title"]


AdCreativeLinkDataMomentField = Literal["id", "type"]


AdToplineDetailField = Literal[
    "active_status",
    "ad_account_id",
    "flight_end_date",
    "flight_start_date",
    "id",
    "io_number",
    "line_number",
    "price",
    "quantity",
    "sf_detail_line_id",
    "subline_id",
    "targets",
    "time_created",
    "time_updated",
]


VideoListField = Literal[
    "creation_time",
    "description",
    "id",
    "last_modified",
    "owner",
    "season_number",
    "thumbnail",
    "title",
    "videos_count",
]


LeadGenThankYouPageField = Literal[
    "body",
    "business_phone_number",
    "button_text",
    "button_type",
    "country_code",
    "enable_messenger",
    "gated_file",
    "id",
    "lead_gen_use_case",
    "status",
    "title",
    "website_url",
]


AdPreviewField = Literal["body", "transformation_spec"]


AdRuleHistoryField = Literal[
    "evaluation_spec",
    "exception_code",
    "exception_message",
    "execution_spec",
    "is_manual",
    "results",
    "schedule_spec",
    "timestamp",
]


AdAccountAppSetupRequirementsField = Literal[""]  # No fields defined


ProductCatalogUserTasksField = Literal["business", "tasks"]


AdsConversionGoalField = Literal[
    "ad_account_id",
    "conversion_event_value_source",
    "description",
    "goal_creation_method",
    "id",
    "name",
    "performance_goal",
    "update_status",
]


ChatPluginField = Literal[
    "alignment",
    "desktop_bottom_spacing",
    "desktop_side_spacing",
    "entry_point_icon",
    "entry_point_label",
    "greeting_dialog_display",
    "guest_chat_mode",
    "mobile_bottom_spacing",
    "mobile_chat_display",
    "mobile_side_spacing",
    "theme_color",
    "welcome_screen_greeting",
]


BrandSafetyDownloadableField = Literal[
    "account_context_id",
    "async_job_percent_complete",
    "async_job_status",
    "file_name",
    "id",
    "request_surface",
    "url",
]


PageCTXDefaultGreetingTextField = Literal["ctd", "ctm", "ctwa"]


AdAssetFeedSpecLinkURLField = Literal[
    "adlabels",
    "carousel_see_more_url",
    "deeplink_url",
    "display_url",
    "object_store_urls",
    "url_tags",
    "website_url",
]


LeadGenConditionalQuestionsGroupChoicesField = Literal[
    "customized_token", "next_question_choices", "value"
]


BizInboxOffsiteEmailAccountField = Literal["email_address", "id"]


AdAssetFeedSpecBodyField = Literal["adlabels", "text", "url_tags"]


AdAccountUserField = Literal["id", "name", "tasks"]


PlacementField = Literal[
    "audience_network_positions",
    "device_platforms",
    "effective_audience_network_positions",
    "effective_device_platforms",
    "effective_facebook_positions",
    "effective_instagram_positions",
    "effective_messenger_positions",
    "effective_oculus_positions",
    "effective_publisher_platforms",
    "effective_threads_positions",
    "effective_whatsapp_positions",
    "facebook_positions",
    "instagram_positions",
    "messenger_positions",
    "oculus_positions",
    "publisher_platforms",
    "threads_positions",
    "whatsapp_positions",
]


FundingSourceDetailsCouponTieringField = Literal[
    "coupon_tiering_new", "coupon_tiering_reactivation"
]


AdLightCampaignGroupField = Literal["id"]


AdAccountCampaignAttributionOptionInfoField = Literal["is_eligible", "value"]


AdDraftField = Literal[
    "account_id",
    "api_version",
    "async_request_set",
    "author_id",
    "created_by",
    "draft_version",
    "id",
    "is_active",
    "name",
    "ownership_type",
    "publish_status",
    "state",
    "summary",
    "time_created",
    "time_updated",
]


AdAccountDsaRecommendationsField = Literal["recommendations"]


BusinessImageField = Literal[
    "business",
    "creation_time",
    "hash",
    "height",
    "id",
    "media_library_url",
    "name",
    "url",
    "url_128",
    "width",
]


AsyncRequestField = Literal["id", "result", "status", "type"]


WebsiteCreativeInfoField = Literal["id", "image_urls", "link_url"]


ExtendedCreditInvoiceGroupField = Literal[
    "auto_enroll",
    "bill_to_address",
    "customer_po_number",
    "email",
    "emails",
    "id",
    "liable_address",
    "name",
    "sold_to_address",
]


TargetingGeoLocationCityField = Literal[
    "country", "distance_unit", "key", "name", "radius", "region", "region_id"
]


IGShoppingReviewStatusField = Literal["onsite_eligibility", "reasons", "status"]


DynamicItemDisplayBundleFolderField = Literal[
    "categorization_criteria", "id", "name", "product_catalog", "product_set", "valid_labels"
]


PageChangeProposalField = Literal["acceptance_status", "category", "id", "upcoming_change_info"]


RTBDynamicPostField = Literal[
    "child_attachments",
    "created",
    "description",
    "id",
    "image_url",
    "link",
    "message",
    "owner_id",
    "place_id",
    "product_id",
    "title",
]


AdAccountMaxBidField = Literal["max_bid"]


VideoStatusErrorField = Literal["code", "message"]


EventRegistrationSettingField = Literal["id", "questions", "target_type", "ticket_tier_ids"]


LiveVideoField = Literal[
    "ad_break_config",
    "ad_break_failure_reason",
    "broadcast_start_time",
    "copyright",
    "creation_time",
    "dash_ingest_url",
    "dash_preview_url",
    "description",
    "embed_html",
    "from",
    "id",
    "ingest_streams",
    "is_manual_mode",
    "is_reference_only",
    "live_views",
    "overlay_url",
    "permalink_url",
    "planned_start_time",
    "recommended_encoder_settings",
    "seconds_left",
    "secure_stream_url",
    "status",
    "stream_url",
    "targeting",
    "title",
    "total_views",
    "video",
]


AdConversionsField = Literal["account_id", "adgroup_id", "campaign_id", "values"]


BusinessProductCatalogTOSField = Literal["accepted", "content"]


BusinessAssetSharingAgreementField = Literal[
    "id", "initiator", "recipient", "relationship_type", "request_status", "request_type"
]


AdCreationPackageConfigField = Literal[
    "api_version", "id", "is_eligible_for_default_opt_in", "objective", "package_id", "status"
]


ContentPublishingLimitResponseField = Literal["config", "quota_usage"]


EndStudyCriteriaField = Literal[""]  # No fields defined


CollaborativeAdsPartnerInfoListItemField = Literal[""]  # No fields defined


CopyrightMediaMisuseField = Literal[
    "audio_segments",
    "creation_time",
    "disabled_audio_segments",
    "disabled_video_segments",
    "entire_file_issue",
    "entire_file_issue_reasons",
    "expiration_time",
    "id",
    "media_asset_id",
    "reasons",
    "requested_audio_segments",
    "requested_video_segments",
    "resolution_type",
    "status",
    "update_time",
    "video_copyright",
    "video_segments",
]


AdCreativeLinkDataCallToActionField = Literal["type", "value"]


VideoStatusUploadingPhaseField = Literal[
    "bytes_transferred", "errors", "source_file_size", "status"
]


AdCreativeBrandedContentAdsPartnersField = Literal[
    "fb_page_id", "has_create_ads_access", "identity_type", "ig_asset_id", "ig_user_id"
]


StoriesField = Literal["creation_time", "media_id", "media_type", "post_id", "status", "url"]


InstagramInsightsResultField = Literal[
    "description", "id", "name", "period", "title", "total_value", "values"
]


AdsPixelSignalsIWLNuxField = Literal[
    "background_color", "content", "content_color", "content_size", "img_url"
]


ProductFeedRuleSuggestionField = Literal["attribute", "params", "type"]


MediaCopyrightAttributionField = Literal[
    "attribution_ig_target_id",
    "attribution_target_email_address",
    "attribution_target_id",
    "attribution_target_name",
    "attribution_type",
    "attribution_uri",
    "copyright_count",
    "creation_time",
    "creator",
    "id",
    "is_enabled",
    "link_title",
    "match_count",
    "owner",
    "status",
    "title",
]


BusinessProjectField = Literal["business", "created_time", "creator", "id", "name"]


AdStudyField = Literal[
    "business",
    "canceled_time",
    "client_business",
    "cooldown_start_time",
    "created_by",
    "created_time",
    "description",
    "end_time",
    "id",
    "measurement_contact",
    "name",
    "observation_end_time",
    "results_first_available_date",
    "sales_contact",
    "start_time",
    "type",
    "updated_by",
    "updated_time",
]


AdgroupPlacementSpecificReviewFeedbackField = Literal[
    "account_admin",
    "ad",
    "ads_conversion_experiences",
    "b2c",
    "b2c_commerce_unified",
    "bsg",
    "city_community",
    "commerce",
    "compromise",
    "daily_deals",
    "daily_deals_legacy",
    "dpa",
    "dri_copyright",
    "dri_counterfeit",
    "facebook",
    "facebook_pages_live_shopping",
    "independent_work",
    "instagram",
    "instagram_shop",
    "job_search",
    "lead_gen_honeypot",
    "marketplace",
    "marketplace_home_rentals",
    "marketplace_home_sales",
    "marketplace_motors",
    "marketplace_shops",
    "max_review_placements",
    "neighborhoods",
    "page_admin",
    "product",
    "product_service",
    "profile",
    "seller",
    "shops",
    "traffic_quality",
    "unified_commerce_content",
    "whatsapp",
]


CTXPartnerAppWelcomeMessageFlowField = Literal[
    "compatible_platforms",
    "eligible_platforms",
    "id",
    "is_ig_only_flow",
    "is_used_in_ad",
    "last_update_time",
    "name",
    "welcome_message_flow",
    "welcome_message_sequence",
]


TransactableItemField = Literal[
    "action_title",
    "applinks",
    "category_specific_fields",
    "currency",
    "description",
    "duration_time",
    "duration_type",
    "id",
    "image_fetch_status",
    "images",
    "order_index",
    "price",
    "price_type",
    "sanitized_images",
    "session_type",
    "time_padding_after_end",
    "title",
    "transactable_item_id",
    "url",
    "visibility",
]


AdToplineField = Literal[
    "account_id",
    "client_approval_date",
    "created_by",
    "created_date",
    "description",
    "flight_end_date",
    "flight_start_date",
    "func_cap_amount",
    "func_cap_amount_with_offset",
    "func_line_amount",
    "func_line_amount_with_offset",
    "func_price",
    "func_price_with_offset",
    "gender",
    "id",
    "impressions",
    "io_number",
    "is_bonus_line",
    "keywords",
    "last_updated_by",
    "last_updated_date",
    "line_number",
    "line_position",
    "line_type",
    "location",
    "max_age",
    "max_budget",
    "min_age",
    "price_per_trp",
    "product_type",
    "rev_assurance_approval_date",
    "targets",
    "trp_updated_time",
    "trp_value",
    "uom",
]


AdCreativeLinkDataCustomOverlaySpecField = Literal[
    "background_color",
    "float_with_margin",
    "font",
    "option",
    "position",
    "render_with_icon",
    "template",
    "text_color",
]


OfflineConversionDataSetField = Literal[
    "automatic_matching_fields",
    "business",
    "can_proxy",
    "config",
    "creation_time",
    "creator",
    "data_use_setting",
    "description",
    "duplicate_entries",
    "enable_auto_assign_to_accounts",
    "enable_automatic_matching",
    "event_stats",
    "event_time_max",
    "event_time_min",
    "first_party_cookie_status",
    "id",
    "is_consolidated_container",
    "is_created_by_business",
    "is_crm",
    "is_mta_use",
    "is_restricted_use",
    "is_unavailable",
    "last_fired_time",
    "last_upload_app",
    "last_upload_app_changed_time",
    "match_rate_approx",
    "matched_entries",
    "name",
    "owner_ad_account",
    "owner_business",
    "usage",
    "valid_entries",
]


AdsPixelDeliveryRecommendationsField = Literal["custom_event_type", "optimization_goal"]


AdCreativeFeaturesSpecField = Literal[
    "adapt_to_placement",
    "add_text_overlay",
    "ads_with_benefits",
    "advantage_plus_creative",
    "app_highlights",
    "audio",
    "biz_ai",
    "carousel_to_video",
    "catalog_feed_tag",
    "customize_product_recommendation",
    "cv_transformation",
    "description_automation",
    "dha_optimization",
    "dynamic_partner_content",
    "enhance_cta",
    "fb_feed_tag",
    "fb_reels_tag",
    "fb_story_tag",
    "feed_caption_optimization",
    "hide_price",
    "ig_feed_tag",
    "ig_glados_feed",
    "ig_reels_tag",
    "ig_stream_tag",
    "image_animation",
    "image_auto_crop",
    "image_background_gen",
    "image_brightness_and_contrast",
    "image_enhancement",
    "image_templates",
    "image_touchups",
    "image_uncrop",
    "inline_comment",
    "local_store_extension",
    "media_liquidity_animated_image",
    "media_order",
    "media_type_automation",
    "multi_photo_to_video",
    "music_generation",
    "pac_relaxation",
    "product_extensions",
    "product_metadata_automation",
    "product_tags",
    "profile_card",
    "profile_extension",
    "show_summary",
    "site_extensions",
    "standard_enhancements",
    "standard_enhancements_catalog",
    "text_generation",
    "text_optimizations",
    "text_translation",
    "video_auto_crop",
    "video_filtering",
    "video_highlight",
    "video_to_image",
    "video_uncrop",
]


ProductFeedUploadErrorSampleField = Literal["id", "retailer_id", "row_number"]


WITUserField = Literal["access_token", "id", "name"]


HighDemandPeriodTimeSuggestionWeeklySegmentField = Literal[
    "days", "end_minute", "start_minute", "timezone_type"
]


AdNetworkAnalyticsAsyncQueryResultField = Literal[
    "data", "omitted_results", "query_id", "results", "status"
]


AdCampaignGroupMetricsMetadataField = Literal["budget_optimization", "duplication_flow_tips"]


AdCreativeMarketingMessageStructuredSpecField = Literal[
    "buttons",
    "footer",
    "greeting",
    "is_optimized_text",
    "language",
    "referenced_adgroup_id",
    "whats_app_business_phone_number_id",
]


AdAccountAmountSpentHistoryField = Literal["amount_spent", "spend_cap", "time_start", "time_stop"]


TargetingProductAudienceSpecField = Literal["exclusions", "inclusions", "product_set_id"]


BlockedUserInfoField = Literal["block_time", "block_type", "fbid", "name", "username"]


AudienceOverlapField = Literal["estimated_reach", "id", "name", "overlap"]


CommerceOrderField = Literal[
    "buyer_details",
    "channel",
    "contains_bopis_items",
    "created",
    "estimated_payment_details",
    "id",
    "is_group_buy",
    "is_test_order",
    "last_updated",
    "merchant_order_id",
    "order_status",
    "pre_order_details",
    "selected_shipping_option",
    "ship_by_date",
    "shipping_address",
]


ProductSetUsageField = Literal["id", "product_set", "usage_type"]


AdAccountAllPaymentMethodsField = Literal[""]  # No fields defined


CTXOptimizationEligibilityField = Literal["ctm"]


EventField = Literal[
    "attending_count",
    "can_guests_invite",
    "category",
    "cover",
    "created_time",
    "declined_count",
    "description",
    "discount_code_enabled",
    "end_time",
    "event_times",
    "guest_list_enabled",
    "id",
    "interested_count",
    "is_canceled",
    "is_draft",
    "is_online",
    "is_page_owned",
    "maybe_count",
    "name",
    "noreply_count",
    "online_event_format",
    "online_event_third_party_url",
    "owner",
    "parent_group",
    "place",
    "registration_setting",
    "scheduled_publish_time",
    "start_time",
    "sub_categories",
    "ticket_selling_status",
    "ticket_setting",
    "ticket_uri",
    "ticket_uri_start_sales_time",
    "ticketing_privacy_uri",
    "ticketing_terms_uri",
    "timezone",
    "type",
    "updated_time",
]


VideoTextQuestionField = Literal["id", "question_target_id", "question_text", "status"]


ExperienceField = Literal["description", "from", "id", "name", "with"]


AudioSubLabelField = Literal[
    "expiration_timestamp",
    "flagged_timestamp",
    "id",
    "label_name",
    "last_update_timestamp",
    "num_audio_tracks",
    "state",
]


LeadGenPrivacyPolicyField = Literal["link_text", "url"]


AdColumnSizesField = Literal[
    "admarket_account", "app_id", "columns", "id", "owner", "page", "report", "tab", "view"
]


VideoCopyrightField = Literal[
    "content_category",
    "copyright_content_id",
    "creator",
    "excluded_ownership_segments",
    "id",
    "in_conflict",
    "monitoring_status",
    "monitoring_type",
    "ownership_countries",
    "reference_file",
    "reference_file_disabled",
    "reference_file_disabled_by_ops",
    "reference_owner_id",
    "rule_ids",
    "tags",
    "whitelisted_ids",
]


ImageCopyrightDisputeField = Literal[
    "appeal_form_data",
    "dispute_form_data",
    "expiration_time",
    "id",
    "match_id",
    "status",
    "time_appealed",
    "time_created",
    "time_updated",
]


ProductFeedUploadField = Literal[
    "end_time",
    "error_count",
    "error_report",
    "filename",
    "id",
    "input_method",
    "num_deleted_items",
    "num_detected_items",
    "num_invalid_items",
    "num_persisted_items",
    "start_time",
    "url",
    "warning_count",
]


VideoCopyrightConditionGroupField = Literal["action", "conditions", "validity_status"]


CPASAdCreationTemplateField = Literal[
    "description",
    "id",
    "is_unused_template",
    "name",
    "optimization_goal",
    "targeting_type",
    "template_type",
]


LeadGenURLEntityAtRangesField = Literal["length", "offset", "url"]


ExternalEventSourceField = Literal["id", "name", "source_type"]


ALMGuidanceMetricsField = Literal[
    "ad_account_id",
    "adopted_objects",
    "guidance_name",
    "guidance_type",
    "l28_adoption",
    "l28_available",
    "l28_click",
    "l28_conversion",
    "l28_has_click",
    "l28_has_impression",
    "l28_impression",
    "l28_is_actioned",
    "l28_is_adopted",
    "l28_is_available",
    "l28_is_pitched",
    "l28_pitch",
    "l28d_adopted_revenue",
    "last_actioned_ds",
    "last_adopted_ds",
    "last_pitch_ds",
    "parent_advertiser_id",
    "report_ds",
]


UserLeadGenDisclaimerResponseField = Literal["checkbox_key", "is_checked"]


DeliveryStatusField = Literal["status", "substatuses"]


AdCreativeInsightsField = Literal["aesthetics"]


AdsPixelEventLastFiredTimeField = Literal["event", "last_fired_time"]


AdNetworkAnalyticsAsyncQueryExportField = Literal["export_link", "query_id", "status"]


AdCreativeRegionalRegulationDisclaimerField = Literal[
    "australia_finserv",
    "india_finserv",
    "singapore_universal",
    "taiwan_finserv",
    "taiwan_universal",
]


AdsValueAdjustmentRuleCollectionField = Literal[
    "id", "is_default_setting", "name", "product_type", "status"
]


IGUserField = Literal[
    "biography",
    "business_discovery",
    "followers_count",
    "follows_count",
    "has_profile_pic",
    "id",
    "ig_id",
    "is_published",
    "legacy_instagram_user_id",
    "media_count",
    "mentioned_comment",
    "mentioned_media",
    "name",
    "owner_business",
    "profile_picture_url",
    "shopping_product_tag_eligibility",
    "shopping_review_status",
    "username",
    "website",
]


CPASParentCatalogSettingsField = Literal[
    "attribution_windows", "default_currency", "disable_use_as_parent_catalog", "id"
]


AgencyClientDeclarationField = Literal[
    "agency_representing_client",
    "client_based_in_france",
    "client_city",
    "client_country_code",
    "client_email_address",
    "client_name",
    "client_postal_code",
    "client_province",
    "client_street",
    "client_street2",
    "has_written_mandate_from_advertiser",
    "is_client_paying_invoices",
]


RegionalRegulationIdentitiesField = Literal[
    "australia_finserv_beneficiary",
    "australia_finserv_payer",
    "india_finserv_beneficiary",
    "india_finserv_payer",
    "singapore_universal_beneficiary",
    "singapore_universal_payer",
    "taiwan_finserv_beneficiary",
    "taiwan_finserv_payer",
    "taiwan_universal_beneficiary",
    "taiwan_universal_payer",
]


CanvasAdSettingsField = Literal[
    "is_canvas_collection_eligible",
    "lead_form_created_time",
    "lead_form_name",
    "lead_gen_form_id",
    "leads_count",
    "product_set_id",
    "use_retailer_item_ids",
]


AppLinksField = Literal[
    "android", "id", "ios", "ipad", "iphone", "web", "windows", "windows_phone", "windows_universal"
]


AdSavedLocationField = Literal[
    "cities",
    "countries",
    "country_groups",
    "custom_locations",
    "geo_markets",
    "id",
    "location_sentences",
    "name",
    "regions",
    "zips",
]


ThirdPartyMeasurementReportDatasetField = Literal["category", "id", "partner", "product", "schema"]


HomeListingField = Literal[
    "ac_type",
    "additional_fees_description",
    "address",
    "agent_company",
    "agent_email",
    "agent_fb_page_id",
    "agent_name",
    "agent_phone",
    "applinks",
    "area_size",
    "area_unit",
    "availability",
    "category_specific_fields",
    "co_2_emission_rating_eu",
    "currency",
    "custom_label_0",
    "custom_label_1",
    "custom_label_2",
    "custom_label_3",
    "custom_label_4",
    "custom_number_0",
    "custom_number_1",
    "custom_number_2",
    "custom_number_3",
    "custom_number_4",
    "days_on_market",
    "description",
    "energy_rating_eu",
    "furnish_type",
    "group_id",
    "heating_type",
    "home_listing_id",
    "id",
    "image_fetch_status",
    "images",
    "laundry_type",
    "listing_type",
    "max_currency",
    "max_price",
    "min_currency",
    "min_price",
    "name",
    "num_baths",
    "num_beds",
    "num_rooms",
    "num_units",
    "parking_type",
    "partner_verification",
    "pet_policy",
    "price",
    "property_type",
    "sanitized_images",
    "securitydeposit_currency",
    "securitydeposit_price",
    "tags",
    "unit_price",
    "url",
    "visibility",
    "year_built",
]


GeoGatingPolicyField = Literal[
    "after_schedule",
    "exclude_country",
    "id",
    "include_country",
    "name",
    "valid_from",
    "valid_until",
]


AdPlacePageSetMetadataField = Literal["audience", "custom", "extra_data", "fixed_radius"]


McomOnboardingStatusField = Literal["onboarding_status", "page_id"]


AdCreativeLinkDataAppLinkSpecField = Literal["android", "ios", "ipad", "iphone"]


AdDynamicCreativeField = Literal["preview_url"]


AdAccountDefaultDestinationField = Literal["destination_id", "destination_url"]


ManagedPartnerBusinessField = Literal[
    "ad_account",
    "catalog_segment",
    "extended_credit",
    "page",
    "seller_business_info",
    "seller_business_status",
    "template",
]


CommerceMerchantSettingsField = Literal[
    "checkout_config",
    "checkout_message",
    "contact_email",
    "cta",
    "display_name",
    "facebook_channel",
    "id",
    "instagram_channel",
    "korea_ftc_listing",
    "merchant_page",
    "merchant_status",
    "onsite_commerce_merchant",
    "payment_provider",
    "privacy_policy_localized",
    "return_policy_localized",
    "review_rejection_messages",
    "review_rejection_reasons",
    "terms",
]


AdCreativePlaceDataField = Literal[
    "address_string", "label", "latitude", "location_source_id", "longitude", "type"
]


ExtendedCreditInfoField = Literal["credit_left", "credit_revoked", "credit_used", "using_biz_ec"]


PlaceTagField = Literal["created_time", "id", "place"]


AdsMcmeConversionField = Literal[
    "creation_time",
    "description",
    "id",
    "is_archived",
    "mcme_conversion_type",
    "name",
    "omnichannel_object_id",
]


ShopField = Literal[
    "commerce_merchant_settings",
    "fb_sales_channel",
    "id",
    "ig_sales_channel",
    "is_onsite_enabled",
    "shop_status",
    "workspace",
]


ProductItemShippingField = Literal[
    "shipping_country",
    "shipping_price_currency",
    "shipping_price_value",
    "shipping_region",
    "shipping_service",
]


AdsReportBuilderMMMReportSchedulerField = Literal[
    "ad_account_ids", "filtering", "id", "report_name", "schedule_frequency"
]


ReachFrequencySpecField = Literal[
    "countries",
    "default_creation_data",
    "global_io_max_campaign_duration",
    "max_campaign_duration",
    "max_days_to_finish",
    "max_pause_without_prediction_rerun",
    "min_campaign_duration",
    "min_reach_limits",
]


CreativeMulticellTestConfigField = Literal[
    "budget_percentage",
    "configured_cell_count",
    "daily_budget",
    "entry_source",
    "lifetime_budget",
    "use_existing_daily_budget",
]


UserPaymentModulesOptionsField = Literal[
    "account_id", "available_payment_options", "country", "currency"
]


ContentBlockListField = Literal["business", "id", "name"]


AdCreativeGenerativeAssetSpecField = Literal[""]  # No fields defined


AdCreativePhotoDataMediaElementsField = Literal["element_id", "element_type", "x", "y"]


PhotoMetadataField = Literal[
    "camera_make",
    "camera_model",
    "datetime_modified",
    "datetime_taken",
    "exposure",
    "focal_length",
    "fstop",
    "iso_speed",
    "offline_id",
    "orientation",
    "original_height",
    "original_width",
]


CopyrightAudioAssetField = Literal[
    "audio_availability_status",
    "audio_library_policy",
    "creation_time",
    "id",
    "reference_files",
    "title",
    "update_time",
]


AdsAnomalyDetectionField = Literal["anomaly_data", "day"]


AdStudyCellField = Literal[
    "ad_entities_count", "control_percentage", "id", "name", "treatment_percentage"
]


AdAssetFeedSpecCallToActionField = Literal["adlabels", "type", "value"]


ValueBasedEligibleSourceField = Literal["id", "title", "type"]


AdAssetFeedSpecCarouselField = Literal[
    "adlabels", "child_attachments", "multi_share_end_card", "multi_share_optimized"
]


BusinessApplicationRequestField = Literal["application", "id"]


P2MInvoicePaymentsField = Literal["page_id", "payments"]


CustomAudienceIntegrityFlagsAndAppealStatusField = Literal[
    "closeout_time",
    "flagged_fields",
    "latest_appeal_requestor",
    "latest_appeal_time",
    "restriction_status",
]


MediaTitleField = Literal[
    "applinks",
    "category_specific_fields",
    "content_category",
    "currency",
    "description",
    "fb_page_alias",
    "fb_page_id",
    "genres",
    "id",
    "image_fetch_status",
    "images",
    "kg_fb_id",
    "media_title_id",
    "price",
    "sanitized_images",
    "title",
    "title_display_name",
    "unit_price",
    "url",
    "visibility",
    "wiki_data_item",
]


OverrideDetailsField = Literal["key", "type", "values"]


AdPlacementField = Literal[
    "bundle_id",
    "display_format",
    "external_placement_id",
    "google_display_format",
    "id",
    "name",
    "placement_group",
    "platform",
    "status",
]


AndroidAppLinkField = Literal["app_name", "class", "package", "url"]


AdsActionStatsField = Literal[
    "1d_click",
    "1d_click_all_conversions",
    "1d_click_first_conversion",
    "1d_ev",
    "1d_ev_all_conversions",
    "1d_ev_first_conversion",
    "1d_view",
    "1d_view_all_conversions",
    "1d_view_first_conversion",
    "28d_click",
    "28d_click_all_conversions",
    "28d_click_first_conversion",
    "28d_view",
    "28d_view_all_conversions",
    "28d_view_first_conversion",
    "7d_click",
    "7d_click_all_conversions",
    "7d_click_first_conversion",
    "7d_view",
    "7d_view_all_conversions",
    "7d_view_first_conversion",
    "action_brand",
    "action_canvas_component_id",
    "action_canvas_component_name",
    "action_carousel_card_id",
    "action_carousel_card_name",
    "action_category",
    "action_converted_product_id",
    "action_destination",
    "action_device",
    "action_event_channel",
    "action_link_click_destination",
    "action_location_code",
    "action_reaction",
    "action_target_id",
    "action_type",
    "action_video_asset_id",
    "action_video_sound",
    "action_video_type",
    "dda",
    "incrementality",
    "incrementality_all_conversions",
    "incrementality_first_conversion",
    "inline",
    "interactive_component_sticker_id",
    "interactive_component_sticker_response",
    "skan_click",
    "skan_click_second_postback",
    "skan_click_third_postback",
    "skan_view",
    "skan_view_second_postback",
    "skan_view_third_postback",
    "value",
]


CreatorAssetCreativeField = Literal[
    "id",
    "image_url",
    "moderation_status",
    "product_item_retailer_id",
    "product_url",
    "retailer_id",
    "video_url",
]


TargetingAutomationField = Literal[
    "advantage_audience", "individual_setting", "shared_audiences", "value_expression"
]


AdAccountAdRulesHistoryField = Literal[
    "evaluation_spec",
    "exception_code",
    "exception_message",
    "execution_spec",
    "is_manual",
    "results",
    "rule_id",
    "schedule_spec",
    "timestamp",
]


AdContractField = Literal[
    "account_id",
    "account_mgr_fbid",
    "account_mgr_name",
    "adops_person_name",
    "advertiser_address_fbid",
    "advertiser_fbid",
    "advertiser_name",
    "agency_discount",
    "agency_name",
    "bill_to_address_fbid",
    "bill_to_fbid",
    "campaign_name",
    "created_by",
    "created_date",
    "customer_io",
    "io_number",
    "io_terms",
    "io_type",
    "last_updated_by",
    "last_updated_date",
    "max_end_date",
    "mdc_fbid",
    "media_plan_number",
    "min_start_date",
    "msa_contract",
    "payment_terms",
    "rev_hold_flag",
    "rev_hold_released_by",
    "rev_hold_released_on",
    "salesrep_fbid",
    "salesrep_name",
    "sold_to_address_fbid",
    "sold_to_fbid",
    "status",
    "subvertical",
    "thirdparty_billed",
    "thirdparty_uid",
    "thirdparty_url",
    "vat_country",
    "version",
    "vertical",
]


MediaCopyrightUpdateRecordField = Literal[
    "action_types",
    "actor",
    "actor_type",
    "creation_time",
    "id",
    "ownership_countries",
    "whitelisted_accounts",
]


PageCTSTopicField = Literal["app_id", "frequency", "image_hash", "image_url", "subscriber", "title"]


IGCommentFromUserField = Literal["id", "self_ig_scoped_id", "username"]


LeadField = Literal[
    "ad_id",
    "ad_name",
    "adset_id",
    "adset_name",
    "campaign_id",
    "campaign_name",
    "created_time",
    "custom_disclaimer_responses",
    "field_data",
    "form_id",
    "home_listing",
    "id",
    "is_organic",
    "partner_name",
    "platform",
    "post",
    "post_submission_check_result",
    "retailer_item_id",
    "vehicle",
]


AdCreativeFeatureCustomizationsField = Literal[
    "background_color",
    "catalog_feed_tag_name",
    "font_name",
    "image_crop_style",
    "pe_carousel",
    "showcase_card_display",
    "text_extraction",
    "text_style",
]


AdAccountIosFourteenCampaignLimitsField = Literal[
    "campaign_group_limit", "campaign_group_limits_details", "campaign_limit"
]


BusinessImageTBusinessFolderPathItemField = Literal["id", "parent_folder_id", "type"]


CTXDefaultOptimizationConfigField = Literal["destination_type", "objective", "optimization_goal"]


AdsPaymentCycleField = Literal[
    "account_id",
    "created_time",
    "multiplier",
    "requested_threshold_amount",
    "threshold_amount",
    "updated_time",
]


RichMediaElementField = Literal["element", "element_type", "name"]


LookalikeSpecField = Literal[
    "country",
    "is_financial_service",
    "origin",
    "origin_event_name",
    "origin_event_source_name",
    "origin_event_source_type",
    "product_set_name",
    "ratio",
    "starting_ratio",
    "target_countries",
    "target_country_names",
    "type",
]


AdCampaignGroupAdvantageStateField = Literal[
    "advantage_audience_state",
    "advantage_budget_state",
    "advantage_placement_state",
    "advantage_state",
]


AdsPixelCAPIIntegrationQualityField = Literal[
    "acr",
    "data_freshness",
    "dedupe_key_feedback",
    "event_coverage",
    "event_match_quality",
    "event_name",
    "event_potential_aly_acr_increase",
]


ProductCatalogImageSettingsField = Literal["carousel_ad", "single_ad"]


RevSharePolicyField = Literal["policy_id", "policy_name"]


CanvasCollectionThumbnailField = Literal["element_child_index", "element_id", "photo"]


AdCreativeSiteLinksSpecField = Literal[
    "is_site_link_sticky",
    "site_link_hash",
    "site_link_id",
    "site_link_image_hash",
    "site_link_image_url",
    "site_link_recommendation_type",
    "site_link_title",
    "site_link_url",
]


DestinationField = Literal[
    "address",
    "applinks",
    "category_specific_fields",
    "currency",
    "custom_label_0",
    "custom_label_1",
    "custom_label_2",
    "custom_label_3",
    "custom_label_4",
    "custom_number_0",
    "custom_number_1",
    "custom_number_2",
    "custom_number_3",
    "custom_number_4",
    "description",
    "destination_id",
    "id",
    "image_fetch_status",
    "images",
    "name",
    "price",
    "price_change",
    "sanitized_images",
    "tags",
    "types",
    "unit_price",
    "url",
    "visibility",
]


AdSetField = Literal[
    "account_id",
    "adlabels",
    "adset_schedule",
    "asset_feed_id",
    "attribution_spec",
    "bid_adjustments",
    "bid_amount",
    "bid_constraints",
    "bid_info",
    "bid_strategy",
    "billing_event",
    "brand_safety_config",
    "budget_remaining",
    "campaign",
    "campaign_active_time",
    "campaign_attribution",
    "campaign_id",
    "configured_status",
    "created_time",
    "creative_sequence",
    "creative_sequence_repetition_pattern",
    "daily_budget",
    "daily_min_spend_target",
    "daily_spend_cap",
    "destination_type",
    "dsa_beneficiary",
    "dsa_payor",
    "effective_status",
    "end_time",
    "existing_customer_budget_percentage",
    "frequency_control_specs",
    "full_funnel_exploration_mode",
    "id",
    "instagram_user_id",
    "is_ba_skip_delayed_eligible",
    "is_budget_schedule_enabled",
    "is_dynamic_creative",
    "is_incremental_attribution_enabled",
    "issues_info",
    "learning_stage_info",
    "lifetime_budget",
    "lifetime_imps",
    "lifetime_min_spend_target",
    "lifetime_spend_cap",
    "max_budget_spend_percentage",
    "min_budget_spend_percentage",
    "multi_optimization_goal_weight",
    "name",
    "optimization_goal",
    "optimization_sub_event",
    "pacing_type",
    "promoted_object",
    "recommendations",
    "recurring_budget_semantics",
    "regional_regulated_categories",
    "regional_regulation_identities",
    "review_feedback",
    "rf_prediction_id",
    "source_adset",
    "source_adset_id",
    "start_time",
    "status",
    "targeting",
    "targeting_optimization_types",
    "time_based_ad_rotation_id_blocks",
    "time_based_ad_rotation_intervals",
    "updated_time",
    "use_new_app_click",
]


AdCampaignMultiAdsField = Literal["enroll_status", "source_type"]


InsightsValueField = Literal[
    "campaign_id",
    "earning_source",
    "end_time",
    "engagement_source",
    "message_type",
    "messaging_channel",
    "monetization_tool",
    "recurring_notifications_entry_point",
    "recurring_notifications_frequency",
    "recurring_notifications_topic",
    "start_time",
    "value",
]


CanvasDynamicSettingField = Literal["child_documents", "product_set_id"]


AdsQuickViewsField = Literal[
    "attribution_windows",
    "breakdowns",
    "column_fields",
    "description",
    "id",
    "name",
    "owner",
    "permission",
    "quick_view_type",
    "sort",
]


PlaceTopicField = Literal[
    "count",
    "has_children",
    "icon_url",
    "id",
    "name",
    "parent_ids",
    "plural_name",
    "top_subtopic_names",
]


AdKeywordsField = Literal["brands", "product_categories", "product_names", "search_terms"]


AdsPixelEventSuggestionRuleField = Literal[
    "7d_volume", "dismissed", "end_time", "event_type", "rank", "rule", "sample_urls", "start_time"
]


OfflineConversionDataSetActivitiesField = Literal[
    "actor_id",
    "actor_name",
    "adaccount_id",
    "adaccount_name",
    "event_time",
    "event_type",
    "extra_data",
    "object_id",
    "object_name",
]


AdImageField = Literal[
    "account_id",
    "created_time",
    "creatives",
    "hash",
    "height",
    "id",
    "is_associated_creatives_in_adgroups",
    "name",
    "original_height",
    "original_width",
    "owner_business",
    "permalink_url",
    "status",
    "updated_time",
    "url",
    "url_128",
    "width",
]


AdAssetVideoField = Literal[
    "caption_ids",
    "id",
    "source_image_url",
    "tag",
    "thumbnail_hash",
    "thumbnail_source",
    "thumbnail_url",
    "url",
    "url_tags",
    "video_id",
    "video_name",
]


IGUserSubscribedAppsDataField = Literal["app_id", "subscribed_fields"]


CatalogItemRejectionReasonsField = Literal["capability", "rejection_information"]


ProductCatalogCategoryField = Literal[
    "criteria_value", "description", "destination_uri", "image_url", "name", "num_items", "tokens"
]


TargetingGeoLocationPoliticalDistrictField = Literal["country", "key", "name", "political_district"]


AdsCustomPivotsPreviewField = Literal[
    "account_id",
    "account_name",
    "ad_id",
    "ad_name",
    "adset_id",
    "adset_name",
    "campaign_id",
    "campaign_name",
    "custom_breakdown",
]


ShadowIGHashtagField = Literal["id", "name"]


AdCampaignFrequencyControlSpecsField = Literal["event", "interval_days", "max_frequency"]


AppPublisherField = Literal[
    "content_id", "icon_url", "id", "name", "platform", "store_name", "store_url"
]


HoursField = Literal["id", "permanent_status"]


AdAccountBusinessConstraintsField = Literal[
    "audience_controls", "campaigns_with_error", "placement_controls", "status"
]


InstagramThreadField = Literal["folder", "id", "participants", "updated_time"]


TimeSuggestionField = Literal["high_demand_periods", "is_enabled"]


ANBlockedBICategoryField = Literal["key"]


AdAssetTargetRuleTargetingField = Literal[
    "age_max",
    "age_min",
    "audience_network_positions",
    "device_platforms",
    "facebook_positions",
    "geo_locations",
    "instagram_positions",
    "publisher_platforms",
    "threads_positions",
]


StoreLocationField = Literal[
    "full_address",
    "hours",
    "id",
    "phone_number",
    "pickup_options",
    "price_range",
    "store_code",
    "zip_code",
]


AdAccountYouthAdsAdvertiserField = Literal["is_youth_ads_advertiser"]


AdCreativeImageDataMediaElementsField = Literal["element_id", "element_type", "x", "y"]


PublisherBlockListField = Literal[
    "app_publishers",
    "business_owner_id",
    "id",
    "is_auto_blocking_on",
    "is_eligible_at_campaign_level",
    "last_update_time",
    "last_update_user",
    "name",
    "owner_ad_account_id",
    "web_publishers",
]


AppRequestField = Literal[
    "action_type", "application", "created_time", "data", "from", "id", "message", "object", "to"
]


StreamFilterField = Literal["filter_key", "name", "type"]


ScimCompanyUserPhoneNumberField = Literal["number", "primary", "type"]


AdCreativeVideoDataField = Literal[
    "additional_image_index",
    "branded_content_shared_to_sponsor_status",
    "branded_content_sponsor_page_id",
    "call_to_action",
    "collection_thumbnails",
    "customization_rules_spec",
    "image_hash",
    "image_url",
    "link_description",
    "message",
    "offer_id",
    "page_welcome_message",
    "post_click_configuration",
    "retailer_item_ids",
    "targeting",
    "title",
    "video_id",
]


MessagingFeatureStatusField = Literal["hop_v2", "ig_multi_app", "msgr_multi_app"]


FBImageCopyrightMatchField = Literal[
    "added_to_dashboard_time",
    "applied_actions",
    "audit_log",
    "available_ui_actions",
    "expiration_days",
    "generic_match_data",
    "id",
    "is_business_page_match",
    "last_modified_time",
    "match_data",
    "match_status",
    "ownership_countries",
    "reference_owner",
    "time_to_appeal",
]


BusinessAdsReportingReportSpecsField = Literal[
    "action_report_time",
    "ad_account_id",
    "ad_account_ids",
    "ad_accounts",
    "attribution_windows",
    "business",
    "business_asset_group",
    "comparison_date_interval",
    "creation_source",
    "creation_time",
    "currency",
    "date_preset",
    "default_attribution_windows",
    "filtering",
    "formatting",
    "id",
    "last_access_by",
    "last_access_time",
    "last_report_snapshot_id",
    "last_report_snapshot_time",
    "last_shared_report_expiration",
    "limit",
    "locked_dimensions",
    "report_name",
    "report_snapshot_async_percent_completion",
    "report_snapshot_async_status",
    "schedule_frequency",
    "scope",
    "show_deprecate_aw_banner",
    "sorting",
    "start_date",
    "status",
    "subscribers",
    "update_by",
    "update_time",
    "user",
    "user_dimensions",
    "user_metrics",
    "view_type",
]


AdActivityField = Literal[
    "actor_id",
    "actor_name",
    "application_id",
    "application_name",
    "date_time_in_timezone",
    "event_time",
    "event_type",
    "extra_data",
    "object_id",
    "object_name",
    "object_type",
    "translated_event_type",
]


AdCreativeCollectionThumbnailInfoField = Literal[
    "element_child_index", "element_crops", "element_id"
]


AdAssetFeedSpecAssetLabelField = Literal["id", "name"]


RobotField = Literal[
    "bringup_vars",
    "configurations",
    "data_center",
    "id",
    "init_pos",
    "last_pos",
    "meetup_link_hash",
    "suite",
    "target_map_image_uri",
    "target_os_image_uri",
    "target_sw_image_uri",
    "user",
]


AdsHistogramStatsField = Literal[
    "1d_click",
    "1d_click_all_conversions",
    "1d_click_first_conversion",
    "1d_ev",
    "1d_ev_all_conversions",
    "1d_ev_first_conversion",
    "1d_view",
    "1d_view_all_conversions",
    "1d_view_first_conversion",
    "28d_click",
    "28d_click_all_conversions",
    "28d_click_first_conversion",
    "28d_view",
    "28d_view_all_conversions",
    "28d_view_first_conversion",
    "7d_click",
    "7d_click_all_conversions",
    "7d_click_first_conversion",
    "7d_view",
    "7d_view_all_conversions",
    "7d_view_first_conversion",
    "action_brand",
    "action_canvas_component_id",
    "action_canvas_component_name",
    "action_carousel_card_id",
    "action_carousel_card_name",
    "action_category",
    "action_converted_product_id",
    "action_destination",
    "action_device",
    "action_event_channel",
    "action_link_click_destination",
    "action_location_code",
    "action_reaction",
    "action_target_id",
    "action_type",
    "action_video_asset_id",
    "action_video_sound",
    "action_video_type",
    "dda",
    "incrementality",
    "incrementality_all_conversions",
    "incrementality_first_conversion",
    "inline",
    "interactive_component_sticker_id",
    "interactive_component_sticker_response",
    "skan_click",
    "skan_click_second_postback",
    "skan_click_third_postback",
    "skan_view",
    "skan_view_second_postback",
    "skan_view_third_postback",
    "value",
]


ProductGroupField = Literal["id", "product_catalog", "retailer_id", "variants"]


OffsitePixelField = Literal["creator", "id", "js_pixel", "last_firing_time", "name", "tag"]


AdAssetTitleField = Literal["id", "text", "url_tags"]


HighDemandPeriodField = Literal[
    "ad_object_id",
    "budget_value",
    "budget_value_type",
    "id",
    "recurrence_type",
    "time_end",
    "time_start",
    "weekly_schedule",
]


UserField = Literal[
    "about",
    "age_range",
    "avatar_2d_profile_picture",
    "birthday",
    "client_business_id",
    "community",
    "cover",
    "currency",
    "education",
    "email",
    "favorite_athletes",
    "favorite_teams",
    "first_name",
    "gender",
    "hometown",
    "id",
    "id_for_avatars",
    "inspirational_people",
    "install_type",
    "installed",
    "is_guest_user",
    "is_work_account",
    "languages",
    "last_name",
    "link",
    "local_news_megaphone_dismiss_status",
    "local_news_subscription_status",
    "locale",
    "location",
    "meeting_for",
    "middle_name",
    "name",
    "name_format",
    "payment_pricepoints",
    "political",
    "profile_pic",
    "quotes",
    "relationship_status",
    "religion",
    "shared_login_upgrade_required_by",
    "short_name",
    "significant_other",
    "sports",
    "supports_donate_button_in_live_video",
    "third_party_id",
    "timezone",
    "token_for_business",
    "updated_time",
    "verified",
    "video_upload_limits",
    "website",
]


CatalogAdvertiserInsightField = Literal["category", "country"]


ProfilePictureSourceField = Literal[
    "bottom", "cache_key", "height", "is_silhouette", "left", "right", "top", "url", "width"
]


UserPaymentMethodsInfoField = Literal[
    "account_id",
    "available_card_types",
    "available_payment_methods",
    "available_payment_methods_details",
    "country",
    "currency",
    "existing_payment_methods",
]


ProductFeedScheduleField = Literal[
    "day_of_month",
    "day_of_week",
    "hour",
    "id",
    "interval",
    "interval_count",
    "minute",
    "timezone",
    "url",
    "username",
]


AdKeywordStatsField = Literal[
    "actions",
    "clicks",
    "cost_per_total_action",
    "cost_per_unique_click",
    "cpc",
    "cpm",
    "cpp",
    "ctr",
    "frequency",
    "id",
    "impressions",
    "name",
    "reach",
    "spend",
    "total_actions",
    "total_unique_actions",
    "unique_actions",
    "unique_clicks",
    "unique_ctr",
    "unique_impressions",
]


BusinessCreativeField = Literal[
    "creation_time",
    "duration",
    "hash",
    "height",
    "id",
    "name",
    "thumbnail",
    "type",
    "url",
    "video_id",
    "width",
]


CustomUserSettingsField = Literal["page_level_persistent_menu", "user_level_persistent_menu"]


McomInvoiceListsField = Literal["invoice_details", "invoice_ids", "page_id"]


LeadGenContextCardField = Literal["button_text", "content", "cover_photo", "id", "style", "title"]


ImageCopyrightField = Literal[
    "artist",
    "copyright_monitoring_status",
    "creation_time",
    "creator",
    "custom_id",
    "description",
    "filename",
    "id",
    "image",
    "matches_count",
    "original_content_creation_date",
    "ownership_countries",
    "tags",
    "title",
    "update_time",
]


ApacMonSellerStatusAPIContainerField = Literal[""]  # No fields defined


AdCampaignIssuesInfoField = Literal[
    "error_code", "error_message", "error_summary", "error_type", "level", "mid"
]


AdAccountAdVolumeField = Literal[
    "actor_id",
    "actor_name",
    "ad_limit_scope_business",
    "ad_limit_scope_business_manager_id",
    "ad_limit_set_by_page_admin",
    "ads_running_or_in_review_count",
    "ads_running_or_in_review_count_subject_to_limit_set_by_page",
    "current_account_ads_running_or_in_review_count",
    "future_limit_activation_date",
    "future_limit_on_ads_running_or_in_review",
    "limit_on_ads_running_or_in_review",
    "recommendations",
]


PreapprovalReviewField = Literal[
    "comp_type", "crow_component_id", "is_human_reviewed", "is_reviewed", "policy_info"
]


URLField = Literal["engagement", "id", "og_object", "ownership_permissions", "scopes"]


AdAssetFeedAdditionalDataField = Literal[
    "automated_product_tags",
    "brand_page_id",
    "is_click_to_message",
    "multi_share_end_card",
    "page_welcome_message",
    "partner_app_welcome_message_flow_id",
]


AdAccountUserSettingsField = Literal[
    "acf_should_opt_out_video_adjustments",
    "aco_sticky_settings",
    "actions_quick_view_created",
    "active_ads_quick_view_created",
    "ad_account",
    "ad_object_export_format",
    "ads_manager_footer_row_toast_impressions",
    "auto_review_video_caption",
    "campaign_overview_columns",
    "column_suggestion_status",
    "conditional_formatting_rules",
    "default_account_overview_agegender_metrics",
    "default_account_overview_location_metrics",
    "default_account_overview_metrics",
    "default_account_overview_time_metrics",
    "default_builtin_column_preset",
    "default_nam_time_range",
    "draft_mode_enabled",
    "export_deleted_items_with_delivery",
    "export_summary_row",
    "had_delivery_quick_view_created",
    "has_seen_groups_column_flexing_experience",
    "has_seen_instagram_column_flexing_experience",
    "has_seen_leads_column_flexing_experience",
    "has_seen_shops_ads_metrics_onboarding_tour",
    "has_seen_shops_column_flexing_experience",
    "hidden_optimization_tips",
    "high_performing_quick_view_created",
    "id",
    "is_3p_auth_setting_set",
    "is_ads_manager_footer_row_preference_set",
    "is_ads_manager_footer_row_shown",
    "is_text_variation_nux_close",
    "last_used_columns",
    "last_used_pe_filters",
    "last_used_website_urls",
    "outlier_preferences",
    "pinned_ad_object_ids",
    "rb_export_format",
    "rb_export_raw_data",
    "rb_export_summary_row",
    "saip_advertiser_setup_optimisation_guidance_overall_state",
    "saip_advertiser_setup_optimisation_guidance_state",
    "shops_ads_metrics_onboarding_tour_close_count",
    "shops_ads_metrics_onboarding_tour_last_action_time",
    "should_default_image_auto_crop",
    "should_default_image_auto_crop_for_tail",
    "should_default_image_auto_crop_optimization",
    "should_default_image_dof_toggle",
    "should_default_image_lpp_ads_to_square",
    "should_default_instagram_profile_card_optimization",
    "should_default_text_swapping_optimization",
    "should_logout_of_3p_sourcing",
    "should_show_shops_ads_metrics_onboarding_tour",
    "show_archived_data",
    "show_text_variation_nux_tooltip",
    "syd_campaign_trends_activemetric",
    "syd_campaign_trends_attribution",
    "syd_campaign_trends_metrics",
    "syd_campaign_trends_objective",
    "syd_campaign_trends_time_range",
    "syd_landing_page_opt_in_status",
    "text_gen_persona_opt_in_type",
    "text_variations_opt_in_out_ts",
    "text_variations_opt_in_type",
    "user",
]


LocalServiceBusinessField = Literal[
    "address",
    "applinks",
    "availability",
    "brand",
    "category",
    "category_specific_fields",
    "condition",
    "cuisine_type",
    "currency",
    "custom_label_0",
    "custom_label_1",
    "custom_label_2",
    "custom_label_3",
    "custom_label_4",
    "custom_number_0",
    "custom_number_1",
    "custom_number_2",
    "custom_number_3",
    "custom_number_4",
    "description",
    "expiration_date",
    "gtin",
    "id",
    "image_fetch_status",
    "images",
    "local_info",
    "local_service_business_id",
    "main_local_info",
    "phone",
    "price",
    "price_range",
    "retailer_category",
    "sanitized_images",
    "size",
    "tags",
    "title",
    "unit_price",
    "url",
    "vendor_id",
    "visibility",
]


MessengerDestinationPageWelcomeMessageField = Literal[
    "id",
    "page_welcome_message_body",
    "page_welcome_message_type",
    "template_name",
    "time_created",
    "time_last_used",
]


AudioIsrcField = Literal[
    "all_kg_featured_artists",
    "all_kg_main_artists",
    "artist_profile_picture_url",
    "id",
    "isrc",
    "publishing_rights_data",
    "top_searchable_artist_id",
    "top_searchable_artist_name",
    "top_searchable_artist_profile_pic_url",
]


WhitehatFBDLRunField = Literal[
    "creation_time", "id", "is_pinned", "note", "result", "run_code", "status", "user_type"
]


CustomAudienceStatusField = Literal["code", "description"]


AdCustomizationRuleSpecField = Literal[
    "caption",
    "customization_spec",
    "description",
    "image_hash",
    "link",
    "message",
    "name",
    "priority",
    "template_url_spec",
    "video_id",
]


AdProposalField = Literal[
    "ad_proposal_type_name",
    "adaccount",
    "creation_time",
    "creator",
    "delivery_interface",
    "expiration_time",
    "has_conflict",
    "id",
    "kpi_metric",
    "message",
    "name",
    "proposal_dts_template",
    "proposal_template_name",
    "recommendation",
    "review_time",
    "reviewed_by",
    "send_time",
    "status",
    "use_testing",
]


PageInsightsAsyncExportRunField = Literal[
    "data_level",
    "filters",
    "format",
    "gen_report_date",
    "id",
    "report_end_date",
    "report_start_date",
    "sorters",
    "status",
]


VideoGroupField = Literal[
    "created_time",
    "description",
    "disable_reason",
    "id",
    "ig_profile_ids",
    "is_disabled",
    "is_fb_video_group",
    "last_used_time",
    "length",
    "name",
    "page_id",
    "page_ids",
    "picture",
    "placements",
    "video_group_types",
    "videos",
    "views",
]


AdRuleEvaluationSpecField = Literal["evaluation_type", "filters", "trigger"]


AppOptimizedCustomEventsField = Literal["app_id", "app_name", "event_names"]


CTWAWhatsAppNumbersInfoField = Literal[
    "can_manage_wa_flows",
    "formatted_whatsapp_number",
    "is_business_number",
    "is_calling_enabled",
    "number_country_prefix",
    "page_whatsapp_number_id",
    "waba_id",
    "whatsapp_number",
    "whatsapp_smb_device",
]


OfflineConversionDataSetOptimizationStatusField = Literal[
    "event", "last_changed_time", "last_detected_time", "status"
]


AdAccountDefaultObjectiveField = Literal["default_objective_for_user", "objective_for_level"]


AdAccountAdsRecommendedAudiosField = Literal["audio_assets"]


BrandSafetyBlockListUsageField = Literal[
    "current_usage", "new_usage", "platform", "position", "threshold"
]


PageRestaurantSpecialtiesField = Literal["breakfast", "coffee", "dinner", "drinks", "lunch"]


InstagramUserField = Literal[
    "follow_count",
    "followed_by_count",
    "has_profile_picture",
    "id",
    "ig_user_id",
    "is_private",
    "is_published",
    "media_count",
    "mini_shop_storefront",
    "owner_business",
    "profile_pic",
    "username",
]


FBPageAndInstagramAccountField = Literal[
    "ad_permissions", "bc_permission_status", "bc_permissions", "is_managed", "matched_by"
]


SecuritySettingsField = Literal[""]  # No fields defined


AdCustomDerivedMetricsField = Literal[
    "ad_account_id",
    "business",
    "creation_time",
    "creator",
    "custom_derived_metric_type",
    "deletion_time",
    "deletor",
    "description",
    "format_type",
    "formula",
    "has_attribution_windows",
    "has_inline_attribution_window",
    "id",
    "name",
    "permission",
    "saved_report_id",
    "scope",
]


AdsPixelRecentEventsResultField = Literal["count", "event"]


BusinessTrafficAnalysisReportField = Literal[
    "audience_location", "event_category", "traffic_analysis_impressions"
]


LeadGenCustomDisclaimerBodyField = Literal["text", "url_entities"]


AdCampaignDeliveryEstimateField = Literal[
    "daily_outcomes_curve",
    "estimate_dau",
    "estimate_mau_lower_bound",
    "estimate_mau_upper_bound",
    "estimate_ready",
    "targeting_optimization_types",
]


IGMediaBoostEligibilityInfoField = Literal["boost_ineligible_reason", "eligible_to_boost"]


ShadowIGUserCTXPartnerAppWelcomeMessageFlowField = Literal[
    "compatible_platforms",
    "eligible_platforms",
    "id",
    "is_ig_only_flow",
    "is_used_in_ad",
    "last_update_time",
    "name",
    "welcome_message_flow",
]


EventTicketSettingField = Literal["id", "ticket_delivery_type"]


TargetingGeoLocationZipField = Literal["country", "key", "name", "primary_city_id", "region_id"]


AdAccountRecommendationsField = Literal["recommendations"]


IGResumableVideoUploadStatusField = Literal["processing_phase", "uploading_phase"]


ThirdPartyPartnerPanelRequestField = Literal[
    "adentities_ids",
    "country",
    "created_time",
    "description",
    "id",
    "modified_time",
    "owner_instance_id",
    "owner_panel_id",
    "owner_panel_name",
    "status",
    "study_end_time",
    "study_start_time",
    "study_type",
]


CreditCardField = Literal[
    "billing_address",
    "card_cobadging",
    "card_holder_name",
    "card_type",
    "credential_id",
    "default_receiving_method_products",
    "expiry_month",
    "expiry_year",
    "id",
    "is_cvv_tricky_bin",
    "is_enabled",
    "is_last_used",
    "is_network_tokenized_in_india",
    "is_soft_disabled",
    "is_user_verified",
    "is_zip_verified",
    "last4",
    "readable_card_type",
    "time_created",
    "time_created_ts",
    "type",
]


EntityAtTextRangeField = Literal["id", "length", "name", "object", "offset", "type"]


AdRecommendationDataField = Literal["link"]


AdCreativeInstagramBrandedContentField = Literal["sponsor_id"]


UserCoverPhotoField = Literal["offset_x", "offset_y", "source"]


MessagingFeatureReviewField = Literal["feature", "status"]


OrderIDAttributionsField = Literal[
    "app_id",
    "attribution_type",
    "attributions",
    "conversion_device",
    "dataset_id",
    "holdout_status",
    "order_id",
    "order_timestamp",
    "pixel_id",
]


ProductItemErrorField = Literal["description", "error_priority", "error_type", "title"]


TargetingGeoLocationMarketField = Literal["country", "key", "market_type", "name"]


LiveVideoInputStreamField = Literal[
    "dash_ingest_url",
    "dash_preview_url",
    "id",
    "is_master",
    "secure_stream_url",
    "stream_health",
    "stream_id",
    "stream_url",
]


AdAccountAgencyFeeConfigField = Literal[
    "can_add_agency_fee_to_invoice",
    "default_agency_fee_pct",
    "id",
    "is_agency_fee_disabled",
    "status",
]


SavedMessageResponseField = Literal["id", "image", "is_enabled", "message", "title"]


AdCreativeLinkDataTemplateVideoSpecField = Literal[
    "categorization_criteria", "customization", "template_id"
]


AdRuleHistoryResultActionField = Literal["action", "field", "new_value", "old_value"]


MessengerBusinessTemplateField = Literal[
    "category",
    "components",
    "creation_time",
    "id",
    "language",
    "language_count",
    "last_updated_time",
    "library_template_name",
    "name",
    "rejected_reason",
    "rejection_reasons",
    "specific_rejection_reasons",
    "status",
]


MailingAddressField = Literal[
    "city", "city_page", "country", "id", "postal_code", "region", "street1", "street2"
]


OffsiteSignalContainerBusinessObjectField = Literal[
    "business",
    "id",
    "is_eligible_for_sharing_to_ad_account",
    "is_eligible_for_sharing_to_business",
    "is_unavailable",
    "name",
    "primary_container_id",
]


CustomAudienceDataSourceField = Literal["creation_params", "sub_type", "type"]


AdAccountSpendLimitField = Literal[
    "amount_spent", "group_id", "limit_id", "limit_value", "time_created", "time_start", "time_stop"
]


LeadGenCustomDisclaimerField = Literal["body", "checkboxes", "title"]


ProductCatalogCheckMarketplacePartnerSellersStatusField = Literal[
    "sample_errors", "session_id", "status"
]


AdAssetFeedSpecCarouselChildAttachmentField = Literal[
    "body_label",
    "call_to_action_type_label",
    "caption_label",
    "description_label",
    "image_label",
    "link_url_label",
    "phone_data_ids_label",
    "static_card",
    "title_label",
    "video_label",
]


ProductSetMetadataField = Literal[
    "cover_image_url", "description", "external_url", "integrity_review_status"
]


AdsTabularField = Literal["rows"]


BusinessTagField = Literal["id", "name"]


AdsImageCropsField = Literal[
    "100x100", "100x72", "191x100", "400x150", "400x500", "600x360", "90x160"
]


DynamicItemDisplayBundleField = Literal[
    "additional_urls", "description", "id", "name", "product_set", "text_tokens", "url"
]


ProductCatalogImageSettingsInternalField = Literal["carousel_ad", "shops_pdp", "single_ad"]


BusinessPartnerPremiumOptionsField = Literal[
    "enable_basket_insight",
    "enable_extended_audience_retargeting",
    "retailer_custom_audience_config",
]


FranchiseProgramMemberField = Literal[
    "business",
    "end_date",
    "id",
    "join_date",
    "member_ad_account",
    "member_user",
    "membership_status",
    "page",
]


AdStudyObjectiveIDField = Literal["event_names", "id", "type"]


OutcomePredictionPointField = Literal["actions", "impressions", "reach", "spend"]


LeadGenThankYouPageGatedFileField = Literal["file_cdn_url", "file_name", "file_size_bytes", "id"]


EventTourField = Literal[
    "description",
    "dominant_color",
    "end_time",
    "id",
    "is_past",
    "last_event_timestamp",
    "name",
    "num_events",
    "photo",
    "scheduled_publish_timestamp",
    "start_time",
    "ticketing_uri",
    "video",
]


PageAboutStoryComposedBlockField = Literal[
    "depth", "entity_ranges", "inline_style_ranges", "text", "type"
]


AdsPixelDomainLastFiredTimeField = Literal["domain_name", "last_fired_time"]


AdAssetFeedSpecDescriptionField = Literal["adlabels", "text", "url_tags"]


AdCreativePortraitCustomizationsField = Literal["carousel_delivery_mode", "specifications"]


LeadGenAppointmentTimeSlotField = Literal["end_time", "start_time"]


AdCreativeFeatureDetailsField = Literal["customizations", "enroll_status"]


CreativeAssetTagField = Literal["name"]


LeadGenDraftQuestionField = Literal[
    "conditional_questions_choices",
    "conditional_questions_group_id",
    "dependent_conditional_questions",
    "inline_context",
    "key",
    "label",
    "options",
    "type",
]


SavedAudienceField = Literal[
    "account",
    "approximate_count_lower_bound",
    "approximate_count_upper_bound",
    "delete_time",
    "description",
    "id",
    "name",
    "operation_status",
    "owner_business",
    "page_deletion_marked_delete_time",
    "permission_for_actions",
    "run_status",
    "sentence_lines",
    "targeting",
    "time_created",
    "time_updated",
]


AdRuleField = Literal[
    "account_id",
    "created_by",
    "created_time",
    "disable_error_code",
    "evaluation_spec",
    "execution_spec",
    "id",
    "name",
    "schedule_spec",
    "status",
    "updated_time",
]


LeadGenFormPreviewDetailsField = Literal[
    "call_business_text",
    "call_to_action_title",
    "chat_on_messenger_text",
    "chat_on_whatsapp_text",
    "contact_information_text",
    "creatives_overview_default_text",
    "custom_disclaimer_editor_state",
    "custom_disclaimer_title",
    "data_privacy_policy_setting_description",
    "default_appointment_scheduling_inline_context",
    "default_disqualified_end_component",
    "default_thank_you_page",
    "disqualified_thank_you_card_transparency_info_text",
    "edit_text",
    "email_inline_context_text",
    "email_messenger_push_opt_in_disclaimer",
    "email_messenger_push_opt_in_transparency_text",
    "form_clarity_description_content",
    "form_clarity_description_title",
    "form_clarity_headline",
    "gated_content_locked_description",
    "gated_content_locked_headline",
    "gated_content_unlocked_description",
    "gated_content_unlocked_headline",
    "how_it_works_section_headers",
    "next_button_text",
    "optional_question_text",
    "personal_info_text",
    "phone_number_inline_context_text",
    "privacy_policy_link_text",
    "privacy_policy_link_text_for_optional_privacy_policy",
    "privacy_policy_title_section_title_text",
    "privacy_setting_description",
    "products_section_headers",
    "qualified_thank_you_card_transparency_info_text",
    "redeem_promo_code_text",
    "return_to_facebook_text",
    "review_your_info_text",
    "secure_sharing_text",
    "secure_sharing_text_for_optional_privacy_policy",
    "slide_to_submit_text",
    "social_proof_section_headers",
    "submit_button_text",
    "view_file_text",
    "whats_app_opt_in_body",
    "whats_app_opt_in_title",
]


LeadgenFormField = Literal[
    "allow_organic_lead",
    "block_display_for_non_targeted_viewer",
    "context_card",
    "created_time",
    "creator",
    "expired_leads_count",
    "follow_up_action_text",
    "follow_up_action_url",
    "id",
    "is_optimized_for_quality",
    "leads_count",
    "legal_content",
    "locale",
    "name",
    "organic_leads_count",
    "page",
    "page_id",
    "privacy_policy_url",
    "question_page_custom_headline",
    "questions",
    "status",
    "thank_you_page",
    "tracking_parameters",
]


PageThreadOwnerField = Literal["thread_owner"]


ProductFeedUploadErrorField = Literal[
    "affected_surfaces", "description", "error_type", "id", "severity", "summary", "total_count"
]


AdLabelField = Literal["account", "created_time", "id", "name", "updated_time"]


CalibratorExistingRuleField = Literal[
    "7d_volume",
    "creation_source",
    "creation_time",
    "creator",
    "event_type",
    "id",
    "rule",
    "rule_type",
    "sample_urls",
    "status",
    "transforms",
]


VideoCopyrightMatchField = Literal[
    "created_date",
    "id",
    "last_modified_user",
    "match_data",
    "match_status",
    "notes",
    "permalink",
    "ugc_content_format",
]


ProductItemUnitPriceField = Literal[""]  # No fields defined


StoreCatalogSettingsField = Literal["id", "page"]


PartnerAccountLinkingField = Literal[
    "adaccount",
    "app",
    "business",
    "externalidentifier",
    "externalidentifieruri",
    "id",
    "partnername",
    "pixel",
]


CommerceOrderTransactionDetailField = Literal[
    "merchant_order_id",
    "net_payment_amount",
    "order_created",
    "order_details",
    "order_id",
    "payout_reference_id",
    "postal_code",
    "processing_fee",
    "state",
    "tax_rate",
    "transaction_date",
    "transaction_type",
    "transfer_id",
]


WebsiteCreativeAssetSourceField = Literal["id", "source_url"]


MinimumBudgetField = Literal[
    "currency",
    "min_daily_budget_high_freq",
    "min_daily_budget_imp",
    "min_daily_budget_low_freq",
    "min_daily_budget_video_views",
]


LeadGenThankYouPageGatedPromoField = Literal["id", "online_offer_url", "online_promo_code"]


PlaceField = Literal["id", "location", "name", "overall_rating"]


AdCreativeInteractiveComponentsSpecField = Literal["child_attachments", "components"]


WoodhengeSupporterField = Literal[
    "creation_time",
    "id",
    "is_gifted_subscription",
    "most_recent_subscription_time",
    "number_of_months_subscribed",
    "user",
]


BusinessMediaAdPlacementValidationResultField = Literal[
    "ad_placement", "ad_placement_label", "error_messages", "is_valid"
]


FundraiserPersonToCharityField = Literal[
    "amount_raised",
    "charity_id",
    "currency",
    "description",
    "donations_count",
    "donors_count",
    "end_time",
    "external_amount_raised",
    "external_donations_count",
    "external_donors_count",
    "external_event_name",
    "external_event_start_time",
    "external_event_uri",
    "external_fundraiser_uri",
    "external_id",
    "goal_amount",
    "id",
    "internal_amount_raised",
    "internal_donations_count",
    "internal_donors_count",
    "name",
    "uri",
]


ShadowIGUserCatalogProductVariantField = Literal["product_id", "variant_name"]


IGBoostMediaAdField = Literal["ad_id", "ad_status"]


OrganizationField = Literal["id", "legal_entity_name", "owner_business"]


AdAccountBankInfoListField = Literal["banks"]


CPASCollaborationRequestField = Literal[
    "brands",
    "contact_email",
    "contact_first_name",
    "contact_last_name",
    "id",
    "phone_number",
    "receiver_business",
    "requester_agency_or_brand",
    "sender_client_business",
    "status",
]


BroadTargetingCategoriesField = Literal[
    "category_description",
    "id",
    "name",
    "parent_category",
    "path",
    "size_lower_bound",
    "size_upper_bound",
    "source",
    "type",
    "type_name",
    "untranslated_name",
    "untranslated_parent_name",
]


VideoStatsField = Literal[
    "aggregate", "error", "metadata", "time_series", "totals", "x_axis_breakdown"
]


ConversionHealthKPIField = Literal[
    "health_indicator",
    "impacted_browsers_match_rate",
    "impacted_browsers_match_rate_mom_trend",
    "impacted_browsers_traffic_share",
    "impacted_browsers_traffic_share_mom_trend",
    "match_rate",
    "match_rate_mom_trend",
    "match_rate_vertical_benchmark",
    "match_rate_vs_benchmark_mom_trend",
]


PagePostField = Literal[
    "actions",
    "admin_creator",
    "allowed_advertising_objectives",
    "application",
    "backdated_time",
    "call_to_action",
    "can_reply_privately",
    "child_attachments",
    "comments_mirroring_domain",
    "coordinates",
    "created_time",
    "event",
    "expanded_height",
    "expanded_width",
    "feed_targeting",
    "from",
    "full_picture",
    "height",
    "icon",
    "id",
    "instagram_eligibility",
    "is_app_share",
    "is_eligible_for_promotion",
    "is_expired",
    "is_hidden",
    "is_inline_created",
    "is_instagram_eligible",
    "is_popular",
    "is_published",
    "is_spherical",
    "message",
    "message_tags",
    "multi_share_end_card",
    "multi_share_optimized",
    "parent_id",
    "permalink_url",
    "picture",
    "place",
    "privacy",
    "promotable_id",
    "promotion_status",
    "properties",
    "scheduled_publish_time",
    "shares",
    "status_type",
    "story",
    "story_tags",
    "subscribed",
    "target",
    "targeting",
    "timeline_visibility",
    "updated_time",
    "via",
    "video_buying_eligibility",
    "width",
]


AnalyticsConfigField = Literal[
    "analytics_access_for_authorized_ad_account",
    "breakdowns_config",
    "builtin_fields_config",
    "deprecated_events_config",
    "events_config",
    "ios_purchase_validation_secret",
    "is_any_role_able_to_see_restricted_insights",
    "is_implicit_purchase_logging_on_android_supported",
    "is_implicit_purchase_logging_on_ios_supported",
    "is_track_ios_app_uninstall_supported",
    "journey_backfill_status",
    "journey_conversion_events",
    "journey_enabled",
    "journey_impacting_change_time",
    "journey_timeout",
    "latest_sdk_versions",
    "log_android_implicit_purchase_events",
    "log_automatic_analytics_events",
    "log_implicit_purchase_events",
    "prev_journey_conversion_events",
    "query_approximation_accuracy_level",
    "query_currency",
    "query_timezone",
    "recent_events_update_time",
    "session_timeout_interval",
    "track_ios_app_uninstall",
]


WindowsPhoneAppLinkField = Literal["app_id", "app_name", "url"]


AdCampaignPacedBidInfoField = Literal["bidding_status"]


UserAvailableCatalogsField = Literal["catalog_id", "catalog_name", "product_count", "shop_name"]


TimezoneOffsetField = Literal["abbr", "isdst", "offset", "time", "ts"]


JobOpeningField = Literal[
    "address",
    "application_callback_url",
    "created_time",
    "description",
    "errors",
    "external_company_facebook_url",
    "external_company_full_address",
    "external_company_id",
    "external_company_name",
    "external_id",
    "id",
    "job_status",
    "latitude",
    "longitude",
    "offsite_application_url",
    "page",
    "photo",
    "platform_review_status",
    "post",
    "remote_type",
    "review_rejection_reasons",
    "title",
    "type",
]


VoipInfoField = Literal[
    "has_mobile_app",
    "has_permission",
    "is_callable",
    "is_callable_webrtc",
    "is_pushable",
    "reason_code",
    "reason_description",
]


ExtendedCreditAllocationConfigField = Literal[
    "currency_amount",
    "id",
    "liability_type",
    "owning_business",
    "owning_credential",
    "partition_type",
    "receiving_business",
    "receiving_credential",
    "request_status",
    "send_bill_to",
]


AdCreativeFacebookBrandedContentField = Literal[
    "shared_to_sponsor_status", "sponsor_page_id", "sponsor_relationship"
]


AdsUserSettingsField = Literal[
    "a_plus_c_survey_seen",
    "add_overlays_opt_in_status",
    "adgroup_name_template",
    "ads_cs_catalog_opt_out_timestamp",
    "ads_tool_visits",
    "aplusc_carousel_cda_opt_in_status",
    "aplusc_carousel_inline_comment_opt_in_status",
    "aplusc_enhance_cta_opt_in_status",
    "aplusc_epa_opt_in_status",
    "aplusc_local_store_extension_opt_in_status",
    "aplusc_opt_out_friction",
    "aplusc_videofilter_opt_in_status",
    "aplusc_videouncrop_opt_in_status",
    "autoflow_lite_opt_in_status",
    "autoflow_lite_should_opt_in",
    "blended_ads_creation_defaulting_opt_in_status",
    "blended_ads_creation_defaulting_opt_out_campaign_group_ids",
    "bookmarked_pages",
    "campaign_group_name_template",
    "campaign_name_template",
    "carousel_to_video_opt_in_status",
    "connected_sources_catalog_opt_in_status",
    "da_add_overlays_opt_in_status",
    "da_hide_price_opt_in_status",
    "default_creation_mode",
    "dynamic_partnership_ads_opt_in_status",
    "enhance_cta_text_extraction_opt_in_status",
    "export_format_default",
    "focus_mode_default",
    "gen_ai_alpha_test_status",
    "id",
    "image_background_generation_opt_in_status",
    "image_brightness_and_contrast_opt_in_status",
    "image_expansion_opt_in_status",
    "is_ads_ai_consented",
    "is_cbo_default_on",
    "is_se_removal_guidance_dismissed",
    "last_used_post_format",
    "last_visited_time",
    "metadata_brand_kit_opt_in_status",
    "music_on_reels_opt_in",
    "muted_cbo_midflight_education_messages",
    "onsite_destination_optimization_opt_in",
    "open_tabs",
    "pac_relaxation_opt_in_status",
    "placement_group_square_opt_in_status",
    "placement_group_vertical_opt_in_status",
    "previously_seen_recommendations",
    "product_extensions_opt_in",
    "sa_off_conv_loc_seen",
    "saoff_published_l2_conv_loc_seen",
    "saon_migr_l1_seen_status",
    "selected_ad_account",
    "selected_comparison_timerange",
    "selected_metric_cic",
    "selected_metrics_cic",
    "selected_page",
    "selected_page_section",
    "selected_power_editor_pane",
    "selected_stat_range",
    "should_export_filter_empty_cols",
    "should_export_rows_without_unsupported_feature",
    "should_not_auto_expand_tree_table",
    "should_not_show_cbo_campaign_toggle_off_confirmation_message",
    "should_not_show_publish_message_on_editor_close",
    "show_original_videos_opt_in",
    "static_ad_product_extensions_opt_in",
    "sticky_setting_after_default_on",
    "syd_campaign_trends_metric",
    "text_optimizations_text_extraction_opt_in_status",
    "text_translation_opt_in_status",
    "text_variations_sticky_opt_in_status",
    "total_coupon_syd_dismissals",
    "total_coupon_upsell_dismissals",
    "url_prefill_removal_timestamp",
    "use_pe_create_flow",
    "use_stepper_primary_entry",
    "user",
]


HotelField = Literal[
    "address",
    "applinks",
    "brand",
    "category",
    "category_specific_fields",
    "currency",
    "custom_label_0",
    "custom_label_1",
    "custom_label_2",
    "custom_label_3",
    "custom_label_4",
    "custom_number_0",
    "custom_number_1",
    "custom_number_2",
    "custom_number_3",
    "custom_number_4",
    "description",
    "guest_ratings",
    "hotel_id",
    "id",
    "image_fetch_status",
    "images",
    "lowest_base_price",
    "loyalty_program",
    "margin_level",
    "name",
    "phone",
    "product_priority_0",
    "product_priority_1",
    "product_priority_2",
    "product_priority_3",
    "product_priority_4",
    "sale_price",
    "sanitized_images",
    "star_rating",
    "tags",
    "unit_price",
    "url",
    "visibility",
]


EntWithSponsorField = Literal[
    "id", "owner_linked_instagram_user_v1_id", "owner_picture", "post_id", "post_info"
]


AdsTargetingInsightsField = Literal[
    "audience_size",
    "clicks",
    "conversion_cost",
    "conversions",
    "description",
    "id",
    "impressions",
    "name",
    "revenue",
    "spend",
    "type",
]


BusinessVideoTBusinessFolderPathItemField = Literal["id", "parent_folder_id", "type"]


CreativeHistoryField = Literal["creative_fingerprint", "time_ranges"]


McomInvoiceDetailsField = Literal[
    "additional_amounts",
    "buyer_notes",
    "currency_amount",
    "external_invoice_id",
    "features",
    "invoice_created",
    "invoice_id",
    "invoice_instructions",
    "invoice_instructions_image_url",
    "invoice_updated",
    "outstanding_amount",
    "paid_amount",
    "payments",
    "platform_logo_url",
    "platform_name",
    "product_items",
    "shipping_address",
    "status",
    "tracking_info",
]


WhatsAppBusinessPreVerifiedPhoneNumberField = Literal[
    "code_verification_status",
    "code_verification_time",
    "id",
    "owner_business",
    "phone_number",
    "verification_expiry_time",
]


AdCreativeLinkDataField = Literal[
    "ad_context",
    "additional_image_index",
    "app_link_spec",
    "attachment_style",
    "automated_product_tags",
    "boosted_product_set_id",
    "branded_content_shared_to_sponsor_status",
    "branded_content_sponsor_page_id",
    "call_to_action",
    "caption",
    "child_attachments",
    "collection_thumbnails",
    "customization_rules_spec",
    "description",
    "event_id",
    "force_single_link",
    "format_option",
    "image_crops",
    "image_hash",
    "image_layer_specs",
    "image_overlay_spec",
    "link",
    "message",
    "multi_share_end_card",
    "multi_share_optimized",
    "name",
    "offer_id",
    "page_welcome_message",
    "picture",
    "post_click_configuration",
    "preferred_image_tags",
    "preferred_video_tags",
    "retailer_item_ids",
    "show_multiple_images",
    "static_fallback_spec",
    "use_flexible_image_aspect_ratio",
]


WifiInformationField = Literal["id", "name", "network_access_type"]


AdAccountPrepayDetailsField = Literal[
    "default_funding_amount",
    "max_acceptable_amount",
    "min_acceptable_amount",
    "should_collect_business_details",
]


AdBidAdjustmentsField = Literal["age_range", "page_types", "user_groups"]


AvatarField = Literal["id"]


AudienceSharingRecipientAccountsField = Literal[
    "account_id",
    "account_name",
    "account_type",
    "business_id",
    "business_name",
    "can_ad_account_use_lookalike_container",
    "sharing_agreement_status",
]


MessengerProfileField = Literal[
    "account_linking_url",
    "commands",
    "get_started",
    "greeting",
    "ice_breakers",
    "persistent_menu",
    "subject_to_new_eu_privacy_rules",
    "whitelisted_domains",
]


AdsReportBuilderField = Literal["headers", "rows", "skan_readiness_status"]


VideoStatusField = Literal[
    "copyright_check_status",
    "processing_phase",
    "processing_progress",
    "publishing_phase",
    "uploading_phase",
    "video_status",
]


ProductImageField = Literal["height", "id", "image_url", "width"]


ProductItemField = Literal[
    "additional_image_cdn_urls",
    "additional_image_urls",
    "additional_variant_attributes",
    "age_group",
    "applinks",
    "availability",
    "brand",
    "bundle_items",
    "bundle_retailer_ids",
    "capability_to_review_status",
    "category",
    "category_specific_fields",
    "color",
    "commerce_insights",
    "condition",
    "currency",
    "custom_data",
    "custom_label_0",
    "custom_label_1",
    "custom_label_2",
    "custom_label_3",
    "custom_label_4",
    "custom_number_0",
    "custom_number_1",
    "custom_number_2",
    "custom_number_3",
    "custom_number_4",
    "description",
    "errors",
    "expiration_date",
    "fb_product_category",
    "gender",
    "generated_background_images",
    "generated_background_images_ad_usage",
    "gtin",
    "id",
    "image_cdn_urls",
    "image_fetch_status",
    "image_url",
    "images",
    "importer_address",
    "importer_name",
    "invalidation_errors",
    "inventory",
    "is_bundle_hero",
    "manufacturer_info",
    "manufacturer_part_number",
    "marked_for_product_launch",
    "material",
    "mobile_link",
    "name",
    "ordering_index",
    "origin_country",
    "parent_product_id",
    "pattern",
    "post_conversion_signal_based_enforcement_appeal_eligibility",
    "price",
    "product_catalog",
    "product_feed",
    "product_group",
    "product_local_info",
    "product_relationship",
    "product_type",
    "quantity_to_sell_on_facebook",
    "retailer_id",
    "retailer_product_group_id",
    "review_rejection_reasons",
    "review_status",
    "sale_price",
    "sale_price_end_date",
    "sale_price_start_date",
    "shipping_weight_unit",
    "shipping_weight_value",
    "short_description",
    "size",
    "start_date",
    "tags",
    "url",
    "vendor_id",
    "video_fetch_status",
    "videos",
    "visibility",
    "wa_compliance_category",
]


PartnerCategoryField = Literal[
    "approximate_count",
    "country",
    "description",
    "details",
    "id",
    "is_private",
    "name",
    "parent_category",
    "source",
    "status",
    "targeting_type",
]


PageLeadsAccessConfigField = Literal["id", "page"]


ProductDeliveryPreferenceField = Literal[
    "ad_object_id", "id", "product_priority", "product_priority_category"
]


TrackingAndConversionWithDefaultsField = Literal[
    "custom_conversion", "custom_tracking", "default_conversion", "default_tracking"
]


AdAccountDeliveryEstimateField = Literal[
    "daily_outcomes_curve",
    "estimate_dau",
    "estimate_mau_lower_bound",
    "estimate_mau_upper_bound",
    "estimate_ready",
    "targeting_optimization_types",
]


ProductCatalogProductSetsBatchField = Literal["errors", "errors_total_count", "handle", "status"]


ProductItemLocalInfoField = Literal[
    "availability_circle_origin",
    "availability_circle_radius",
    "availability_circle_radius_unit",
    "availability_polygon_coordinates",
    "availability_postal_codes",
    "availability_source",
    "id",
    "inferred_circle_origin",
    "inferred_circle_radius",
]


AdCreativeFeatureActionMetadataField = Literal["type"]


AdRuleFiltersField = Literal["field", "operator", "value"]


TaggableSubjectField = Literal["id", "name"]


AdAccountMatchedSearchApplicationsEdgeDataField = Literal[
    "app_id",
    "are_app_events_unavailable",
    "icon_url",
    "name",
    "search_source_store",
    "store",
    "unique_id",
    "url",
]


CatalogWebsiteOnboardingSettingsField = Literal["id", "quality_band", "status"]


CloudbridgeDatasetStatusField = Literal[
    "app_redacted_event",
    "app_sensitive_params",
    "app_unverified_event",
    "has_app_associated",
    "is_app_prohibited",
    "is_dataset",
]


PageGetStartedNullstateField = Literal["cta_title", "processed_greeting", "responsiveness"]


MediaFingerprintField = Literal[
    "duration_in_sec",
    "fingerprint_content_type",
    "fingerprint_type",
    "id",
    "metadata",
    "title",
    "universal_content_id",
]


AdLimitsEnforcementDataField = Literal[
    "ad_limit_on_page",
    "ad_limit_on_scope",
    "ad_volume_on_page",
    "ad_volume_on_scope",
    "is_admin",
    "page_name",
]


AdAssetFeedSpecImageField = Literal["adlabels", "hash", "image_crops", "url", "url_tags"]


LeadGenLegalContentField = Literal["custom_disclaimer", "id", "privacy_policy"]


InstagramBusinessAssetField = Literal["id", "ig_user_id", "ig_username"]


LeadGenLegalContentCheckboxField = Literal[
    "id", "is_checked_by_default", "is_required", "key", "text"
]


OpenGraphContextField = Literal["id"]


UserNotificationSeenStateDataField = Literal["id", "seen_state"]


UserMobileConfigField = Literal["section_name", "value"]


CoverPhotoField = Literal["cover_id", "id", "offset_x", "offset_y", "source"]


CatalogItemOverrideField = Literal["id", "local_info", "override_type", "override_value"]


AdsPixelStatsResultField = Literal["aggregation", "data", "start_time"]


CPASBusinessSetupConfigField = Literal[
    "accepted_collab_ads_tos",
    "business",
    "business_capabilities_status",
    "capabilities_compliance_status",
    "id",
]


FundingSourceDetailsCouponField = Literal[
    "amount",
    "campaign_ids",
    "child_ad_account_id",
    "child_bm_id",
    "coupon_id",
    "coupon_tiering",
    "currency",
    "display_amount",
    "expiration",
    "original_amount",
    "original_display_amount",
    "start_date",
    "vendor_id",
]


AdsNamingTemplateField = Literal[
    "api_fields",
    "api_version",
    "field_order",
    "id",
    "level",
    "separator",
    "template_version",
    "user_defined_fields",
    "value_separator",
]


ThirdPartyPartnerLiftRequestField = Literal[
    "ad_entities",
    "country",
    "created_time",
    "description",
    "holdout_size",
    "id",
    "legacy_ads_data_partner_id",
    "legacy_ads_data_partner_name",
    "modified_time",
    "owner_instance_id",
    "partner_household_graph_dataset_id",
    "region",
    "status",
    "study_cells",
    "study_end_time",
    "study_start_time",
]


AdsEligibilityField = Literal["live_shopping"]


UserLeadGenFieldDataField = Literal["name", "values"]


AlbumField = Literal[
    "backdated_time",
    "backdated_time_granularity",
    "can_backdate",
    "can_upload",
    "count",
    "cover_photo",
    "created_time",
    "description",
    "edit_link",
    "event",
    "from",
    "id",
    "is_user_facing",
    "link",
    "location",
    "modified_major",
    "name",
    "photo_count",
    "place",
    "privacy",
    "type",
    "updated_time",
    "video_count",
]


VideoUploadLimitsField = Literal["length", "size"]


MessagingAppsInfoField = Literal[
    "ctd_support_only_for_ig_app",
    "has_instagram_messaging_permission",
    "has_messenger_messaging_permission",
    "id",
    "name",
]


FavoriteCatalogField = Literal["catalog", "id"]


LiveVideoErrorField = Literal["creation_time", "error_code", "error_message", "error_type"]


ProductItemImporterAddressField = Literal[
    "city", "country", "postal_code", "region", "street1", "street2"
]


VideoCopyrightSegmentField = Literal["duration_in_sec", "media_type", "start_time_in_sec"]


BusinessCreativeInsightsField = Literal[
    "actions",
    "age",
    "country",
    "date_end",
    "date_start",
    "device_platform",
    "gender",
    "impressions",
    "inline_link_clicks",
    "objective",
    "optimization_goal",
    "platform_position",
    "publisher_platform",
    "quality_ranking",
    "video_play_actions",
    "video_thruplay_watched_actions",
]


DynamicPriceConfigByDateField = Literal["checkin_date", "prices", "prices_pretty"]


AdgroupFacebookFeedbackField = Literal["id", "preview"]


EmailImportField = Literal["lists", "total"]


AdAssetOnsiteDestinationsField = Literal[
    "auto_optimization",
    "details_page_product_id",
    "shop_collection_product_set_id",
    "source",
    "storefront_shop_id",
]


TargetingRelaxationField = Literal["custom_audience", "lookalike"]


ProductDaEventSamplesBatchField = Literal["samples", "time_start", "time_stop"]


PagePaymentOptionsField = Literal["amex", "cash_only", "discover", "mastercard", "visa"]


AdVideoField = Literal[
    "ad_breaks",
    "admin_creator",
    "audio_isrc",
    "backdated_time",
    "backdated_time_granularity",
    "boost_eligibility_info",
    "content_category",
    "content_tags",
    "copyright",
    "copyright_check_information",
    "copyright_monitoring_status",
    "created_time",
    "custom_labels",
    "description",
    "embed_html",
    "embeddable",
    "event",
    "expiration",
    "format",
    "from",
    "icon",
    "id",
    "is_crosspost_video",
    "is_crossposting_eligible",
    "is_episode",
    "is_instagram_eligible",
    "is_reference_only",
    "length",
    "live_audience_count",
    "live_status",
    "music_video_copyright",
    "permalink_url",
    "picture",
    "place",
    "post_id",
    "post_views",
    "premiere_living_room_status",
    "privacy",
    "published",
    "scheduled_publish_time",
    "source",
    "spherical",
    "status",
    "title",
    "universal_video_id",
    "updated_time",
    "views",
]


MeasurementReportField = Literal["download_urls", "id", "metadata", "report_type", "status"]


PageUserWithLeadsAccessField = Literal[
    "active_on_business", "business_role", "can_access_leads", "page_role"
]


AdAssetImageField = Literal["hash", "id", "image_crops", "name", "tag", "url", "url_tags"]


AdCreativeField = Literal[
    "account_id",
    "actor_id",
    "ad_disclaimer_spec",
    "adlabels",
    "applink_treatment",
    "asset_feed_spec",
    "authorization_category",
    "auto_update",
    "body",
    "branded_content",
    "branded_content_sponsor_page_id",
    "bundle_folder_id",
    "call_to_action",
    "call_to_action_type",
    "categorization_criteria",
    "category_media_source",
    "collaborative_ads_lsb_image_bank_id",
    "contextual_multi_ads",
    "creative_sourcing_spec",
    "degrees_of_freedom_spec",
    "destination_set_id",
    "dynamic_ad_voice",
    "effective_authorization_category",
    "effective_instagram_media_id",
    "effective_object_story_id",
    "enable_direct_install",
    "enable_launch_instant_app",
    "facebook_branded_content",
    "id",
    "image_crops",
    "image_hash",
    "image_url",
    "instagram_branded_content",
    "instagram_permalink_url",
    "instagram_user_id",
    "interactive_components_spec",
    "link_deep_link_url",
    "link_destination_display_url",
    "link_og_id",
    "link_url",
    "messenger_sponsored_message",
    "name",
    "object_id",
    "object_store_url",
    "object_story_id",
    "object_story_spec",
    "object_type",
    "object_url",
    "omnichannel_link_spec",
    "page_welcome_message",
    "photo_album_source_object_story_id",
    "place_page_set_id",
    "platform_customizations",
    "playable_asset_id",
    "portrait_customizations",
    "product_data",
    "product_set_id",
    "recommender_settings",
    "regional_regulation_disclaimer_spec",
    "source_facebook_post_id",
    "source_instagram_media_id",
    "status",
    "template_url",
    "template_url_spec",
    "thumbnail_id",
    "thumbnail_url",
    "title",
    "url_tags",
    "use_page_actor_override",
    "video_id",
]


AdAccountOptimizationGoalsAEMv2EligibilityField = Literal["is_disabled", "optimization_goal"]


PageAboutStoryComposedBlockInlineStyleField = Literal["length", "offset", "style"]


AdCampaignGroupAgencyFeeConfigForApiField = Literal[
    "agency_fee_pct", "is_agency_fee_disabled", "is_default_agency_fee"
]


BusinessAgreementField = Literal["id", "request_status"]


InsightsResultField = Literal[
    "description", "description_from_api_doc", "id", "name", "period", "title", "values"
]


AdSavedKeywordsField = Literal[
    "account", "id", "keywords", "name", "run_status", "time_created", "time_updated"
]


RecommendationField = Literal[
    "created_time",
    "has_rating",
    "has_review",
    "open_graph_story",
    "rating",
    "recommendation_type",
    "review_text",
    "reviewer",
]


CatalogSmartPixelSettingsField = Literal[
    "allowed_domains",
    "available_property_filters",
    "catalog",
    "cbb_custom_override_filters",
    "cbb_default_filter",
    "defaults",
    "filters",
    "id",
    "is_cbb_enabled",
    "is_create_enabled",
    "is_delete_enabled",
    "is_update_enabled",
    "microdata_format_precedence",
    "pixel",
    "property_filter",
    "trusted_domains",
]


VideoCopyrightCheckStatusField = Literal["matches_found", "status"]


AdCreativeDegreesOfFreedomSpecField = Literal[
    "ad_handle_type",
    "creative_features_spec",
    "degrees_of_freedom_type",
    "image_transformation_types",
    "multi_media_transformation_type",
    "stories_transformation_types",
    "text_transformation_types",
    "video_transformation_types",
]


AdsPixelField = Literal[
    "automatic_matching_fields",
    "can_proxy",
    "code",
    "config",
    "creation_time",
    "creator",
    "data_use_setting",
    "description",
    "duplicate_entries",
    "enable_auto_assign_to_accounts",
    "enable_automatic_matching",
    "event_stats",
    "event_time_max",
    "event_time_min",
    "first_party_cookie_status",
    "has_1p_pixel_event",
    "id",
    "is_consolidated_container",
    "is_created_by_business",
    "is_crm",
    "is_mta_use",
    "is_restricted_use",
    "is_unavailable",
    "last_fired_time",
    "last_upload_app",
    "last_upload_app_changed_time",
    "match_rate_approx",
    "matched_entries",
    "name",
    "owner_ad_account",
    "owner_business",
    "usage",
    "user_access_expire_time",
    "valid_entries",
]


OpenBridgeConfigurationField = Literal[
    "active",
    "cloud_provider",
    "cloud_region",
    "destination_id",
    "endpoint",
    "fallback_domain",
    "first_party_domain",
    "host_business_id",
    "id",
    "instance_id",
    "instance_version",
    "is_sgw_instance",
    "is_sgw_pixel_from_meta_pixel",
    "partner_name",
    "pixel_id",
    "sgw_account_id",
    "sgw_instance_url",
    "sgw_pixel_id",
]


LeadGenClientValidationRulesField = Literal[
    "exclude_emoji_and_special_chars_enabled", "max_length_value", "min_length_value"
]


AdAccountCustomAudienceLimitsField = Literal[
    "audience_update_quota_in_total",
    "audience_update_quota_left",
    "has_hit_audience_update_limit",
    "next_audience_update_available_time",
    "rate_limit_reset_time",
]


GroupField = Literal[
    "archived",
    "cover",
    "created_time",
    "description",
    "email",
    "icon",
    "id",
    "install",
    "link",
    "member_count",
    "member_request_count",
    "name",
    "parent",
    "permissions",
    "privacy",
    "purpose",
    "subdomain",
    "updated_time",
    "venue",
]


PartnerIntegrationLinkedField = Literal[
    "ads_pixel",
    "application",
    "completed_integration_types",
    "external_business_connection_id",
    "external_id",
    "has_oauth_token",
    "id",
    "mbe_app_id",
    "mbe_asset_id",
    "mbe_external_business_id",
    "name",
    "offline_conversion_data_set",
    "page",
    "partner",
    "product_catalog",
    "setup_status",
]


RightsManagerDataExportField = Literal[
    "download_uri",
    "export_scope",
    "id",
    "name",
    "record_type",
    "time_range_end",
    "time_range_start",
]


IGShoppingProductAppealField = Literal[
    "eligible_for_appeal",
    "product_appeal_status",
    "product_id",
    "rejection_reasons",
    "review_status",
]


AIGeneratedProductImageField = Literal["flagged_for_manual_review", "transformed_image_url"]


PageUserMessageThreadLabelField = Literal["id", "page_label_name"]


CatalogItemAppLinksField = Literal[
    "android", "ios", "ipad", "iphone", "web", "windows", "windows_phone", "windows_universal"
]


InstagramShoppingMerchantReviewMessageField = Literal["help_url", "message"]


TargetingGeoLocationCustomLocationField = Literal[
    "address_string",
    "country",
    "country_group",
    "custom_type",
    "distance_unit",
    "key",
    "latitude",
    "longitude",
    "max_population",
    "min_population",
    "name",
    "primary_city_id",
    "radius",
    "region_id",
]


WorkExperienceField = Literal[
    "description",
    "employer",
    "end_date",
    "from",
    "id",
    "location",
    "position",
    "projects",
    "start_date",
    "with",
]


IosAppLinkField = Literal["app_name", "app_store_id", "url"]


BCPCampaignField = Literal[
    "ads_permission_required",
    "application_deadline",
    "campaign_goal",
    "campaign_goal_other",
    "content_delivery_deadline",
    "content_delivery_start_date",
    "content_requirements",
    "content_requirements_description",
    "currency",
    "deal_negotiation_type",
    "description",
    "has_free_product",
    "id",
    "name",
    "payment_amount_for_ads",
    "payment_amount_for_content",
    "payment_description",
]


CallAdsPhoneDataField = Literal[
    "call_ads_phone_data_use_case",
    "callback_variant",
    "destination_website_url",
    "id",
    "page",
    "phone_number",
]


AudiencePermissionField = Literal["audience", "share_account_id", "share_account_name"]


DraftPostField = Literal[
    "admin_creator",
    "creation_time",
    "feed_audience_description",
    "feed_targeting",
    "id",
    "is_post_in_good_state",
    "message",
    "modified_time",
    "og_action_summary",
    "permalink_url",
    "place",
    "privacy_description",
    "scheduled_failure_notice",
    "scheduled_publish_time",
    "story_token",
    "thumbnail",
    "video_id",
]


PaymentRequestDetailsField = Literal[
    "amount",
    "creation_time",
    "note",
    "payment_request_id",
    "receiver_id",
    "reference_number",
    "sender_id",
    "status",
    "transaction_time",
]


AdsReportBuilderMMMReportField = Literal[
    "async_status",
    "export_format",
    "export_name",
    "export_type",
    "has_seen",
    "id",
    "mmm_status",
    "time_start",
]


TargetingGeoLocationLocationExpansionField = Literal["allowed", "intent"]


ConversionActionQueryField = Literal[
    "action.type",
    "application",
    "conversion_id",
    "creative",
    "dataset",
    "event",
    "event.creator",
    "event_type",
    "fb_pixel",
    "fb_pixel_event",
    "leadgen",
    "object",
    "object.domain",
    "offer",
    "offer.creator",
    "offsite_pixel",
    "page",
    "page.parent",
    "post",
    "post.object",
    "post.object.wall",
    "post.wall",
    "question",
    "question.creator",
    "response",
    "subtype",
]


CustomAudienceSaltsField = Literal["app_id", "public_key", "salts", "user_id"]


AvatarProfilePictureField = Literal["id", "url"]


WebAppLinkField = Literal["should_fallback", "url"]


LeadGenQuestionField = Literal[
    "conditional_questions_choices",
    "conditional_questions_group_id",
    "dependent_conditional_questions",
    "id",
    "inline_context",
    "key",
    "label",
    "options",
    "type",
]


AdAssetLinkURLField = Literal[
    "android_deeplink_url",
    "carousel_see_more_url",
    "deeplink_url",
    "display_url",
    "id",
    "ipad_deeplink_url",
    "iphone_deeplink_url",
    "url_tags",
    "website_url",
]


AdvertiserVerificationStatusField = Literal[
    "banner_type", "grace_period_ends_at", "ufac_redirect_uri", "verification_status"
]


AdsPivotRulesField = Literal[
    "creation_time",
    "creator",
    "description",
    "id",
    "name",
    "permission",
    "rules",
    "scope",
    "update_by",
    "update_time",
]


DynamicVideoMetadataField = Literal["id", "tags", "url", "video"]


BusinessSettingLogsDataField = Literal[
    "actor", "event_object", "event_time", "event_type", "extra_data"
]


ALMAdAccountInfoField = Literal[
    "ad_account_id",
    "id",
    "managed_by",
    "owned_by",
    "parent_advertiser_id",
    "sub_vertical",
    "tag",
    "user_ids",
    "vertical",
]


ThirdPartyPartnerViewabilityRequestField = Literal[
    "created_time",
    "description",
    "ds",
    "hour",
    "id",
    "metric",
    "modified_time",
    "owner_instance_id",
    "platform",
    "status",
    "total_file_count",
]


ApplicationField = Literal[
    "aam_rules",
    "an_ad_space_limit",
    "an_platforms",
    "android_key_hash",
    "android_sdk_error_categories",
    "app_domains",
    "app_events_config",
    "app_events_feature_bitmask",
    "app_events_session_timeout",
    "app_install_tracked",
    "app_name",
    "app_signals_binding_ios",
    "app_type",
    "auth_dialog_data_help_url",
    "auth_dialog_headline",
    "auth_dialog_perms_explanation",
    "auth_referral_default_activity_privacy",
    "auth_referral_enabled",
    "auth_referral_extended_perms",
    "auth_referral_friend_perms",
    "auth_referral_response_type",
    "auth_referral_user_perms",
    "auto_event_mapping_android",
    "auto_event_mapping_ios",
    "auto_event_setup_enabled",
    "auto_log_app_events_default",
    "auto_log_app_events_enabled",
    "business",
    "canvas_fluid_height",
    "canvas_fluid_width",
    "canvas_url",
    "category",
    "client_config",
    "company",
    "configured_ios_sso",
    "contact_email",
    "created_time",
    "creator_uid",
    "daily_active_users",
    "daily_active_users_rank",
    "deauth_callback_url",
    "default_share_mode",
    "description",
    "enigma_config",
    "financial_id",
    "gdpv4_chrome_custom_tabs_enabled",
    "gdpv4_enabled",
    "gdpv4_nux_content",
    "gdpv4_nux_enabled",
    "has_messenger_product",
    "hosting_url",
    "icon_url",
    "id",
    "ios_bundle_id",
    "ios_sdk_dialog_flows",
    "ios_sdk_error_categories",
    "ios_sfvc_attr",
    "ios_supports_native_proxy_auth_flow",
    "ios_supports_system_auth",
    "ipad_app_store_id",
    "iphone_app_store_id",
    "latest_sdk_version",
    "link",
    "logging_token",
    "logo_url",
    "migrations",
    "mobile_profile_section_url",
    "mobile_web_url",
    "monthly_active_users",
    "monthly_active_users_rank",
    "name",
    "namespace",
    "object_store_urls",
    "owner_business",
    "page_tab_default_name",
    "page_tab_url",
    "photo_url",
    "privacy_policy_url",
    "profile_section_url",
    "property_id",
    "protected_mode_rules",
    "real_time_mode_devices",
    "restrictions",
    "restrictive_data_filter_params",
    "restrictive_data_filter_rules",
    "sdk_update_message",
    "seamless_login",
    "secure_canvas_url",
    "secure_page_tab_url",
    "server_ip_whitelist",
    "smart_login_bookmark_icon_url",
    "smart_login_menu_icon_url",
    "social_discovery",
    "subcategory",
    "suggested_events_setting",
    "supported_platforms",
    "supports_apprequests_fast_app_switch",
    "supports_attribution",
    "supports_implicit_sdk_logging",
    "suppress_native_ios_gdp",
    "terms_of_service_url",
    "url_scheme_suffix",
    "user_support_email",
    "user_support_url",
    "website_url",
    "weekly_active_users",
]


McomInvoiceBankAccountField = Literal[
    "num_pending_verification_accounts",
    "num_verified_accounts",
    "pending_verification_accounts",
    "verified_accounts",
]


PrivateLiftStudyInstanceField = Literal[
    "breakdown_key",
    "created_time",
    "feature_list",
    "id",
    "issuer_certificate",
    "latest_status_update_time",
    "run_id",
    "server_hostnames",
    "server_ips",
    "status",
    "tier",
]


IGUserForIGOnlyAPIField = Literal[
    "account_type",
    "biography",
    "followers_count",
    "follows_count",
    "id",
    "media_count",
    "name",
    "profile_picture_url",
    "user_id",
    "username",
    "website",
]


IGRefreshAccessTokenForIGOnlyAPIField = Literal[
    "access_token", "expires_in", "permissions", "token_type"
]


ProductCatalogDataSourceField = Literal[
    "app_id", "id", "ingestion_source_type", "name", "upload_type"
]


FAMEKumoField = Literal["id"]


WebPublisherField = Literal["domain_url", "id", "publisher_name"]


ProductItemInvalidationErrorField = Literal[""]  # No fields defined


WorkAccessCodeField = Literal["code", "expiration_time"]


PageCTXBudgetSimilarAdvertiserBudgetRecommendationField = Literal["budget", "reported_conversion"]


LinkField = Literal[
    "caption",
    "created_time",
    "description",
    "from",
    "icon",
    "id",
    "link",
    "message",
    "multi_share_optimized",
    "name",
    "privacy",
    "via",
]


MessengerCallSettingsField = Literal["audio_enabled", "call_hours", "call_routing", "icon_enabled"]


AdAccountASLScheduleField = Literal["ad_account", "id", "time_created", "time_updated"]


CatalogCollectionField = Literal["description", "title", "url"]


ProductFeedUploadProgressField = Literal["pos", "size", "step", "unit", "updated_time"]


ProductEventStatField = Literal[
    "date_start",
    "date_stop",
    "device_type",
    "event",
    "event_source",
    "total_content_ids_matched_other_catalogs",
    "total_matched_content_ids",
    "total_unmatched_content_ids",
    "unique_content_ids_matched_other_catalogs",
    "unique_matched_content_ids",
    "unique_unmatched_content_ids",
]


WorkUserBadgesField = Literal["category", "description", "icon", "id", "name"]


CPASSetupPageStructureProgressField = Literal["id", "issues", "name"]


AdAccountSubscribedAppsField = Literal["app_id", "app_name"]


CPASMerchantConfigField = Literal[
    "accepted_tos",
    "beta_features",
    "business_outcomes_status",
    "id",
    "is_test_merchant",
    "outcomes_compliance_status",
    "qualified_to_onboard",
]


LiveVideoAdCampaignConfigField = Literal["id", "live_video_ad_type"]


ThreadsUserField = Literal["threads_user_id", "threads_user_profile_pic"]


PageParkingField = Literal["lot", "street", "valet"]


AdsGuidanceQEExposureField = Literal["account_exposed"]


PageCategoryField = Literal["api_enum", "fb_page_categories", "id", "name"]


PageGameBotQuotaInformationField = Literal["count", "time_window"]


AdsPixelItemPriceField = Literal["date", "item_price_coverage"]


AdAccountRecommendedCamapaignBudgetField = Literal["daily", "lifetime", "objective"]


AdAssetFeedAdditionalDataPageNudgeMessageField = Literal["enabled", "quick_replies", "text"]


AdAssetFeedSpecTitleField = Literal["adlabels", "text", "url_tags"]


AdCreativeLinkDataChildAttachmentField = Literal[
    "call_to_action",
    "caption",
    "description",
    "image_crops",
    "image_hash",
    "link",
    "name",
    "picture",
    "place_data",
    "static_card",
    "video_id",
]


AdCreativeAssetGroupsSpecField = Literal["groups", "origin"]


WhatsAppBusinessPartnerClientVerificationSubmissionField = Literal[
    "client_business_id",
    "id",
    "rejection_reasons",
    "submitted_info",
    "submitted_time",
    "update_time",
    "verification_status",
]


AgeRangeField = Literal["max", "min"]


AdCreativePostClickConfigurationField = Literal[
    "post_click_item_description", "post_click_item_headline"
]


LinkedInstagramAccountDataField = Literal[
    "access_token", "analytics_claim", "full_name", "profile_picture_url", "user_id", "user_name"
]


FBPayButtonLoginField = Literal[""]  # No fields defined


CRMAddressField = Literal[
    "city",
    "cnpj_tax_id",
    "country",
    "id",
    "postal_code",
    "registration_label",
    "registration_number",
    "state",
    "street1",
    "street2",
    "street3",
    "street4",
    "validation_status",
    "vat_tax_id",
]


AdAccountSmartSuggestedAdsField = Literal[
    "ad_creative_spec", "description", "guidance_spec", "thumbnail_url"
]


CustomAudienceCapabilitiesField = Literal["capabilities"]


ALMEventField = Literal[
    "ad_account_ids",
    "campaign_ids",
    "channel",
    "event",
    "event_time",
    "guidance",
    "guidance_detail",
    "id",
    "parent_advertiser_ids",
    "reseller_business_id",
    "sub_channel",
    "user_id",
]


CASSSetupOfflineEventSetProgressField = Literal[""]  # No fields defined


PublisherDeliveryReportField = Literal[
    "content_types", "estimated_impressions", "name", "status", "url"
]


AdsPixelCapabilityOverrideField = Literal["capability", "id", "override_value", "reason"]


FinanceObjectField = Literal["finance_permission", "user"]


MIXInsightsResultField = Literal[
    "daily_age_gender_breakdown",
    "daily_audio_library_values",
    "daily_ugc_values",
    "daily_values",
    "metric",
    "monthly_audio_library_values",
    "monthly_ugc_values",
    "monthly_values",
    "percent_growth",
    "shielded_fields",
    "total_age_gender_breakdown",
    "total_audio_library_value",
    "total_country_breakdown",
    "total_locale_breakdown",
    "total_product_breakdown",
    "total_ugc_value",
    "total_value",
    "trending_age",
    "trending_gender",
    "trending_interest",
    "trending_territory",
]


PageDirectIntegrationCrmWithLeadsAccessField = Literal["can_access_leads", "id", "name"]


PagePublisherField = Literal["global_parent_id", "icon", "id", "name", "url"]


StatusField = Literal["event", "from", "id", "message", "place", "updated_time"]


ContextualBundlingSpecField = Literal["status"]


RawCustomAudienceField = Literal["id", "name"]


WhatsappSubscribedAppsInfoField = Literal["page_whatsapp_number", "subscribed_apps"]


FundingSourceDetailsField = Literal["coupon", "coupons", "display_string", "id", "type"]


OmegaCustomerTrxField = Literal[
    "ad_account_ids",
    "advertiser_name",
    "amount",
    "amount_due",
    "billed_amount_details",
    "billing_period",
    "cdn_download_uri",
    "currency",
    "download_uri",
    "due_date",
    "entity",
    "id",
    "invoice_date",
    "invoice_id",
    "invoice_type",
    "liability_type",
    "payment_status",
    "payment_term",
    "type",
]


AdLightAdgroupField = Literal["adset_id", "id"]


NullNodeField = Literal[""]  # No fields defined


TargetingMarketingMessageChannelsField = Literal["whatsapp"]


AdAccountPaymentOptionsField = Literal[
    "available_altpay_options",
    "available_card_types",
    "available_payment_options",
    "existing_payment_methods",
]


PaymentSubscriptionField = Literal[
    "amount",
    "app_param_data",
    "application",
    "billing_period",
    "canceled_reason",
    "created_time",
    "currency",
    "id",
    "last_payment",
    "next_bill_time",
    "next_period_amount",
    "next_period_currency",
    "next_period_product",
    "payment_status",
    "pending_cancel",
    "period_start_time",
    "product",
    "status",
    "test",
    "trial_amount",
    "trial_currency",
    "trial_expiry_time",
    "updated_time",
    "user",
]


PartnerStudyField = Literal[
    "additional_info",
    "brand",
    "client_name",
    "emails",
    "id",
    "input_ids",
    "is_export",
    "lift_study",
    "location",
    "match_file_ds",
    "name",
    "partner_defined_id",
    "partner_household_graph_dataset_id",
    "status",
    "study_end_date",
    "study_start_date",
    "study_type",
    "submit_date",
]


AdsStartYourDayWidgetField = Literal["id", "widget_id"]


ShadowIGMediaBuilderField = Literal[
    "copyright_check_status", "id", "status", "status_code", "video_status"
]


AdAssetFeedSpecVideoField = Literal[
    "adlabels", "caption_ids", "thumbnail_hash", "thumbnail_url", "url_tags", "video_id"
]


AdAccountUserPermissionsField = Literal[
    "business",
    "business_persona",
    "created_by",
    "created_time",
    "email",
    "status",
    "tasks",
    "updated_by",
    "updated_time",
    "user",
]


ShadowIGMediaCollaboratorsField = Literal["id", "invite_status", "username"]


TargetingProductAudienceSubSpecField = Literal["retention_seconds", "rule"]


PagePartnerWithLeadsAccessField = Literal["can_access_leads", "partner_business", "permitted_tasks"]


SiteLinkField = Literal["id", "link_image_hash", "link_title", "link_type", "link_url"]


CatalogWebsiteSettingsField = Literal["id", "is_allowed_to_crawl"]


CloudGameField = Literal[
    "id",
    "name",
    "owner",
    "playable_ad_file_size",
    "playable_ad_orientation",
    "playable_ad_package_name",
    "playable_ad_reject_reason",
    "playable_ad_status",
    "playable_ad_upload_time",
]


AppRequestFormerRecipientField = Literal["id", "recipient_id"]


SystemUserField = Literal[
    "created_by", "created_time", "finance_permission", "id", "ip_permission", "name"
]


VideoCopyrightRuleField = Literal[
    "condition_groups", "copyrights", "created_date", "creator", "id", "is_in_migration", "name"
]


PublisherWhiteListField = Literal[
    "business_owner_id", "id", "last_updated_time", "last_updated_user", "name", "placement_type"
]


TargetingDynamicRuleField = Literal[
    "action.type",
    "ad_group_id",
    "campaign_group_id",
    "campaign_id",
    "impression_count",
    "page_id",
    "post",
    "retention_seconds",
]


WhatsAppBusinessHealthStatusForMessageSendField = Literal["can_send_message", "entities"]


VideoCopyrightGeoGateField = Literal["excluded_countries", "included_countries"]


PageStartInfoField = Literal["date", "type"]


AdsPixelMicrodataStatsField = Literal[
    "allowed_domains",
    "errors_stats_for_time_ranges",
    "has_valid_events",
    "suggested_allowed_domains_count_max",
    "suggested_trusted_domains",
]


AudioVisualReferenceMatchField = Literal[
    "audio_conflicting_segments",
    "audio_current_conflict_resolved_segments",
    "audio_segment_resolution_history",
    "conflict_status",
    "conflict_type",
    "conflicting_countries",
    "country_resolution_history",
    "creation_time",
    "current_conflict_resolved_countries",
    "displayed_match_state",
    "dispute_form_data_entries_with_translations",
    "expiration_time",
    "id",
    "is_disputable",
    "match_state",
    "matched_overlap_percentage",
    "matched_owner_match_duration_in_sec",
    "matched_reference_owner",
    "modification_history",
    "num_matches_on_matched_side",
    "num_matches_on_ref_side",
    "ref_owner_match_duration_in_sec",
    "reference_overlap_percentage",
    "reference_owner",
    "rejection_form_data_entries_with_translations",
    "resolution_details",
    "resolution_reason",
    "update_time",
    "views_on_matched_side",
    "visual_conflicting_segments",
    "visual_current_conflict_resolved_segments",
    "visual_segment_resolution_history",
]


DayPartField = Literal["days", "end_minute", "start_minute", "timezone_type"]


ProductItemLocalInfoLatLongShapeField = Literal["latitude", "longitude"]


AdDefaultValuesField = Literal["campaign_group"]


CustomConversionField = Literal[
    "account_id",
    "aggregation_rule",
    "business",
    "creation_time",
    "custom_event_type",
    "data_sources",
    "default_conversion_value",
    "description",
    "event_source_type",
    "first_fired_time",
    "id",
    "is_archived",
    "is_unavailable",
    "last_fired_time",
    "name",
    "offline_conversion_data_set",
    "pixel",
    "retention_days",
    "rule",
]


UserDeviceField = Literal["hardware", "os"]


CommerceMerchantSettingsSetupStatusField = Literal[
    "deals_setup",
    "marketplace_approval_status",
    "marketplace_approval_status_details",
    "payment_setup",
    "review_status",
    "shop_setup",
]


ProductCatalogHotelRoomsBatchField = Literal["errors", "errors_total_count", "handle", "status"]


AdCreativeProductDataField = Literal["product_id", "product_source"]


PageField = Literal[
    "about",
    "access_token",
    "ad_campaign",
    "affiliation",
    "app_id",
    "artists_we_like",
    "attire",
    "available_promo_offer_ids",
    "awards",
    "band_interests",
    "band_members",
    "best_page",
    "bio",
    "birthday",
    "booking_agent",
    "breaking_news_usage",
    "built",
    "business",
    "can_checkin",
    "can_post",
    "category",
    "category_list",
    "checkins",
    "company_overview",
    "connected_instagram_account",
    "connected_page_backed_instagram_account",
    "contact_address",
    "copyright_whitelisted_ig_partners",
    "country_page_likes",
    "cover",
    "culinary_team",
    "current_location",
    "delivery_and_pickup_option_info",
    "description",
    "description_html",
    "differently_open_offerings",
    "directed_by",
    "display_subtext",
    "displayed_message_response_time",
    "does_viewer_have_page_permission_link_ig",
    "emails",
    "engagement",
    "fan_count",
    "featured_video",
    "features",
    "followers_count",
    "food_styles",
    "founded",
    "general_info",
    "general_manager",
    "genre",
    "global_brand_page_name",
    "global_brand_root_id",
    "has_added_app",
    "has_lead_access",
    "has_transitioned_to_new_page_experience",
    "has_whatsapp_business_number",
    "has_whatsapp_number",
    "hometown",
    "hours",
    "id",
    "impressum",
    "influences",
    "instagram_business_account",
    "is_always_open",
    "is_calling_eligible",
    "is_chain",
    "is_community_page",
    "is_eligible_for_branded_content",
    "is_eligible_for_disable_connect_ig_btn_for_non_page_admin_am_web",
    "is_messenger_bot_get_started_enabled",
    "is_messenger_platform_bot",
    "is_owned",
    "is_permanently_closed",
    "is_published",
    "is_unclaimed",
    "is_verified",
    "is_webhooks_subscribed",
    "keywords",
    "leadgen_tos_acceptance_time",
    "leadgen_tos_accepted",
    "leadgen_tos_accepting_user",
    "link",
    "location",
    "members",
    "merchant_id",
    "merchant_review_status",
    "messaging_feature_status",
    "messenger_ads_default_icebreakers",
    "messenger_ads_default_quick_replies",
    "messenger_ads_quick_replies_type",
    "mini_shop_storefront",
    "mission",
    "mpg",
    "name",
    "name_with_location_descriptor",
    "network",
    "new_like_count",
    "offer_eligible",
    "overall_star_rating",
    "owner_business",
    "page_token",
    "parent_page",
    "parking",
    "payment_options",
    "personal_info",
    "personal_interests",
    "pharma_safety_info",
    "phone",
    "pickup_options",
    "place_type",
    "plot_outline",
    "preferred_audience",
    "press_contact",
    "price_range",
    "privacy_info_url",
    "produced_by",
    "products",
    "promotion_eligible",
    "promotion_ineligible_reason",
    "public_transit",
    "rating_count",
    "recipient",
    "record_label",
    "release_date",
    "restaurant_services",
    "restaurant_specialties",
    "schedule",
    "screenplay_by",
    "season",
    "single_line_address",
    "starring",
    "start_info",
    "store_code",
    "store_location_descriptor",
    "store_number",
    "studio",
    "supports_donate_button_in_live_video",
    "talking_about_count",
    "temporary_status",
    "unread_message_count",
    "unread_notif_count",
    "unseen_message_count",
    "user_access_expire_time",
    "username",
    "verification_status",
    "voip_info",
    "website",
    "were_here_count",
    "whatsapp_number",
    "written_by",
]


AdCreativeSourcingSpecField = Literal[
    "associated_product_set_id",
    "brand",
    "dynamic_site_links_spec",
    "enable_social_feedback_preservation",
    "promotion_metadata_spec",
    "site_links_spec",
    "source_url",
]


AdCreativeVideoDataMediaElementsField = Literal["element_id", "element_type"]


AdCampaignMetricsMetadataField = Literal[
    "boosted_component_optimization",
    "creation_flow_tips",
    "default_opted_in_placements",
    "delivery_growth_optimizations",
    "duplication_flow_tips",
    "edit_flow_tips",
]


AdAssetCallToActionTypeField = Literal["id", "name"]


ProductCatalogFacetsField = Literal["facets", "item_count"]


ScheduledPostField = Literal[
    "admin_creator",
    "creation_time",
    "feed_audience_description",
    "feed_targeting",
    "id",
    "is_post_in_good_state",
    "message",
    "modified_time",
    "og_action_summary",
    "permalink_url",
    "place",
    "privacy_description",
    "scheduled_failure_notice",
    "scheduled_publish_time",
    "story_token",
    "thumbnail",
    "video_id",
]


AdAccountBillingDatePreferenceField = Literal[
    "ad_account", "day_of_month", "id", "next_bill_date", "time_created", "time_effective"
]


OfflineConversionDataSetUploadField = Literal[
    "api_calls",
    "creation_time",
    "duplicate_entries",
    "event_stats",
    "event_time_max",
    "event_time_min",
    "first_upload_time",
    "id",
    "is_excluded_for_lift",
    "last_upload_time",
    "match_rate_approx",
    "matched_entries",
    "upload_tag",
    "valid_entries",
]


CopyrightOwnershipTransferField = Literal[
    "id",
    "receiving_rights_holder",
    "sending_rights_holder",
    "status",
    "transfer_territories",
    "transfer_time",
]


AdCampaignConversionValueExpressionSpecField = Literal[
    "adjustment_sign", "adjustment_weight", "destination_type"
]


ProfileField = Literal[
    "can_post",
    "id",
    "link",
    "name",
    "pic",
    "pic_crop",
    "pic_large",
    "pic_small",
    "pic_square",
    "profile_type",
    "username",
]


MCExperienceConfigForApiField = Literal["is_campaign_enabled", "is_terms_signed", "merchant_type"]


AppEventConfigField = Literal[
    "breakdowns_config",
    "builtin_fields_config",
    "deprecated_events_config",
    "events_config",
    "id",
    "ios_purchase_validation_secret",
    "is_any_role_able_to_see_restricted_insights",
    "is_implicit_purchase_logging_on_android_supported",
    "is_implicit_purchase_logging_on_ios_supported",
    "is_track_android_app_uninstall_supported",
    "is_track_ios_app_uninstall_supported",
    "journey_backfill_status",
    "journey_conversion_events",
    "journey_enabled",
    "journey_timeout",
    "latest_sdk_versions",
    "log_android_implicit_purchase_events",
    "log_automatic_analytics_events",
    "log_implicit_purchase_events",
    "prev_journey_conversion_events",
    "query_approximation_accuracy_level",
    "query_currency",
    "query_timezone",
    "recent_events_update_time",
    "session_timeout_interval",
    "track_android_app_uninstall",
    "track_ios_app_uninstall",
]


AdCampaignStatsField = Literal[
    "account_id",
    "actions",
    "adgroup_id",
    "campaign_id",
    "campaign_ids",
    "clicks",
    "end_time",
    "id",
    "impressions",
    "inline_actions",
    "io_number",
    "is_completed",
    "line_number",
    "newsfeed_position",
    "social_clicks",
    "social_impressions",
    "social_spent",
    "social_unique_clicks",
    "social_unique_impressions",
    "spent",
    "start_time",
    "topline_id",
    "unique_clicks",
    "unique_impressions",
]


CPASLsbImageBankField = Literal["ad_group_id", "catalog_segment_proxy_id", "id"]


AdCampaignGroupIncrementalConversionOptimizationConfigField = Literal[
    "action_type",
    "ad_study_end_time",
    "ad_study_id",
    "ad_study_name",
    "ad_study_start_time",
    "cell_id",
    "cell_name",
    "holdout_size",
    "ico_type",
    "objectives",
]


FlexibleTargetingField = Literal[
    "behaviors",
    "college_years",
    "connections",
    "custom_audiences",
    "education_majors",
    "education_schools",
    "education_statuses",
    "ethnic_affinity",
    "family_statuses",
    "friends_of_connections",
    "generation",
    "home_ownership",
    "home_type",
    "home_value",
    "household_composition",
    "income",
    "industries",
    "interested_in",
    "interests",
    "life_events",
    "moms",
    "net_worth",
    "office_type",
    "politics",
    "relationship_statuses",
    "user_adclusters",
    "work_employers",
    "work_positions",
]


CopyrightAttributionInsightsField = Literal[
    "l7_attribution_page_view",
    "l7_attribution_page_view_delta",
    "l7_attribution_video_view",
    "l7_attribution_video_view_delta",
    "metrics_ending_date",
]


ProductFeedRuleField = Literal["attribute", "id", "params", "rule_type"]


ProductFeedUploadErrorReportField = Literal["file_handle", "report_status"]


ThirdPartyPartnerPanelScheduledField = Literal[
    "adentities_ids",
    "cadence",
    "country",
    "created_time",
    "description",
    "end_time",
    "id",
    "modified_time",
    "owner_instance_id",
    "owner_panel_id",
    "owner_panel_name",
    "start_time",
    "status",
    "study_type",
]


PageLocationsBreakdownField = Literal[
    "location_id",
    "location_name",
    "location_type",
    "num_pages",
    "num_pages_eligible_for_store_visit_reporting",
    "num_unpublished_or_closed_pages",
    "parent_country_code",
    "parent_region_id",
    "parent_region_name",
]


AdsPixelDomainControlRuleField = Literal["domain_list", "type"]


PhotoField = Literal[
    "album",
    "alt_text",
    "alt_text_custom",
    "backdated_time",
    "backdated_time_granularity",
    "can_backdate",
    "can_delete",
    "can_tag",
    "created_time",
    "event",
    "from",
    "height",
    "icon",
    "id",
    "images",
    "link",
    "name",
    "name_tags",
    "page_story_id",
    "picture",
    "place",
    "position",
    "source",
    "target",
    "updated_time",
    "webp_images",
    "width",
]


CatalogItemChannelsToIntegrityStatusField = Literal["channels", "rejection_information"]


IGShoppingReviewStatusOnsiteEligibilityField = Literal["is_eligible", "reasons"]


PostField = Literal[
    "actions",
    "admin_creator",
    "allowed_advertising_objectives",
    "application",
    "backdated_time",
    "call_to_action",
    "can_reply_privately",
    "caption",
    "child_attachments",
    "comments_mirroring_domain",
    "coordinates",
    "created_time",
    "description",
    "event",
    "expanded_height",
    "expanded_width",
    "feed_targeting",
    "from",
    "full_picture",
    "height",
    "icon",
    "id",
    "instagram_eligibility",
    "is_app_share",
    "is_eligible_for_promotion",
    "is_expired",
    "is_hidden",
    "is_inline_created",
    "is_instagram_eligible",
    "is_popular",
    "is_published",
    "is_spherical",
    "link",
    "message",
    "message_tags",
    "multi_share_end_card",
    "multi_share_optimized",
    "name",
    "object_id",
    "parent_id",
    "permalink_url",
    "picture",
    "place",
    "privacy",
    "promotable_id",
    "promotion_status",
    "properties",
    "scheduled_publish_time",
    "shares",
    "source",
    "status_type",
    "story",
    "story_tags",
    "subscribed",
    "target",
    "targeting",
    "timeline_visibility",
    "type",
    "updated_time",
    "via",
    "video_buying_eligibility",
    "width",
]


ExternalMerchantSettingsField = Literal["connect_woo", "external_platform", "id"]


DatasetField = Literal["id", "name"]


IGVideoCopyrightCheckMatchesInformationField = Literal["copyright_matches", "status"]


InstantArticleInsightsQueryResultField = Literal["breakdowns", "name", "time", "value"]


PageBroadcastField = Literal["id", "scheduled_time", "status"]


LeadGenDataDraftField = Literal[
    "block_display_for_non_targeted_viewer",
    "created_time",
    "disqualified_end_component",
    "follow_up_action_url",
    "id",
    "is_optimized_for_quality",
    "legal_content",
    "locale",
    "name",
    "page",
    "question_page_custom_headline",
    "questions",
    "status",
    "thank_you_page",
    "tracking_parameters",
]


AdCampaignLearningStageInfoField = Literal[
    "attribution_windows", "conversions", "last_sig_edit_ts", "status"
]


PartnershipAdsIdentityField = Literal["is_saved", "post_types", "secondary_identities"]


AdCreativeLinkDataSponsorshipInfoSpecField = Literal["sponsor_image_url", "sponsor_name"]


AdAssetMessageExtensionsField = Literal["type"]


VehicleOfferField = Literal[
    "amount_currency",
    "amount_percentage",
    "amount_price",
    "amount_qualifier",
    "applinks",
    "availability",
    "body_style",
    "cashback_currency",
    "cashback_price",
    "category_specific_fields",
    "currency",
    "custom_label_0",
    "custom_label_1",
    "custom_label_2",
    "custom_label_3",
    "custom_label_4",
    "custom_number_0",
    "custom_number_1",
    "custom_number_2",
    "custom_number_3",
    "custom_number_4",
    "dma_codes",
    "downpayment_currency",
    "downpayment_price",
    "downpayment_qualifier",
    "drivetrain",
    "end_date",
    "end_time",
    "exterior_color",
    "fuel_type",
    "generation",
    "id",
    "image_fetch_status",
    "images",
    "interior_color",
    "interior_upholstery",
    "make",
    "model",
    "offer_description",
    "offer_disclaimer",
    "offer_type",
    "price",
    "product_priority_0",
    "product_priority_1",
    "product_priority_2",
    "product_priority_3",
    "product_priority_4",
    "sanitized_images",
    "start_date",
    "start_time",
    "tags",
    "term_length",
    "term_qualifier",
    "title",
    "transmission",
    "trim",
    "unit_price",
    "url",
    "vehicle_offer_id",
    "visibility",
    "year",
]


MusicWorkCopyrightField = Literal[
    "available_ui_actions",
    "claim_status",
    "creation_time",
    "displayed_fb_matches_count",
    "displayed_ig_matches_count",
    "displayed_matches_count",
    "has_rev_share_eligible_isrcs",
    "id",
    "is_linking_required_to_monetize_for_manual_claim",
    "match_rule",
    "status",
    "tags",
    "update_time",
]


OwnedDomainField = Literal["domain_name", "id", "owner_business", "status", "verification_code"]


AdCreativeVideoDataCustomOverlaySpecField = Literal[
    "background_color",
    "background_opacity",
    "duration",
    "float_with_margin",
    "full_width",
    "option",
    "position",
    "start",
    "template",
    "text_color",
]


AdCreativeContextualMultiAdsField = Literal["enroll_status"]


WorkSkillField = Literal["id", "name"]


AREffectField = Literal["creation_time", "id", "last_modified_time", "name", "status", "surfaces"]


AdAccountPromotableObjectsField = Literal[
    "promotable_app_ids", "promotable_page_ids", "promotable_urls"
]


ExternalEventSourceCPASEventsDebuggingInfoField = Literal["counts", "diagnostic", "event_name"]


ProductCatalogPricingVariablesBatchField = Literal[
    "errors", "errors_total_count", "handle", "status"
]


# ============================================================================
# FIELD MODELS
# ============================================================================


class WhatsAppBusinessHealthStatusFields(BaseModel):
    """Pydantic model for WhatsAppBusinessHealthStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    additional_info: list[str] | None = Field(None, alias="additional_info")
    can_send_message: str | None = Field(None, alias="can_send_message")
    entity_type: str | None = Field(None, alias="entity_type")
    errors: list[dict[str, Any]] | None = Field(None, alias="errors")
    id: str | None = Field(None, alias="id")


class AdVolumeFields(BaseModel):
    """Pydantic model for AdVolume fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_volume_break_down: list[dict[str, Any]] | None = Field(None, alias="ad_volume_break_down")
    ads_running_or_in_review_count: int | None = Field(None, alias="ads_running_or_in_review_count")
    future_limit_activation_date: str | None = Field(None, alias="future_limit_activation_date")
    future_limit_on_ads_running_or_in_review: int | None = Field(
        None, alias="future_limit_on_ads_running_or_in_review"
    )
    individual_accounts_ad_volume: int | None = Field(None, alias="individual_accounts_ad_volume")
    is_gpa_page: bool | None = Field(None, alias="is_gpa_page")
    limit_on_ads_running_or_in_review: int | None = Field(
        None, alias="limit_on_ads_running_or_in_review"
    )
    owning_business_ad_volume: int | None = Field(None, alias="owning_business_ad_volume")
    partner_business_ad_volume: int | None = Field(None, alias="partner_business_ad_volume")
    user_role: str | None = Field(None, alias="user_role")


class DynamicPostChildAttachmentFields(BaseModel):
    """Pydantic model for DynamicPostChildAttachment fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    description: str | None = Field(None, alias="description")
    image_url: str | None = Field(None, alias="image_url")
    link: str | None = Field(None, alias="link")
    place_id: str | None = Field(None, alias="place_id")
    product_id: str | None = Field(None, alias="product_id")
    title: str | None = Field(None, alias="title")


class AdAssetFeedSpecFields(BaseModel):
    """Pydantic model for AdAssetFeedSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_formats: list[str] | None = Field(None, alias="ad_formats")
    additional_data: AdAssetFeedAdditionalDataFields | None = Field(None, alias="additional_data")
    app_product_page_id: str | None = Field(None, alias="app_product_page_id")
    asset_customization_rules: list[AdAssetFeedSpecAssetCustomizationRuleFields] | None = Field(
        None, alias="asset_customization_rules"
    )
    audios: list[dict[str, Any]] | None = Field(None, alias="audios")
    autotranslate: list[str] | None = Field(None, alias="autotranslate")
    bodies: list[AdAssetFeedSpecBodyFields] | None = Field(None, alias="bodies")
    call_ads_configuration: dict[str, Any] | None = Field(None, alias="call_ads_configuration")
    call_to_action_types: list[dict[str, Any]] | None = Field(None, alias="call_to_action_types")
    call_to_actions: list[AdAssetFeedSpecCallToActionFields] | None = Field(
        None, alias="call_to_actions"
    )
    captions: list[AdAssetFeedSpecCaptionFields] | None = Field(None, alias="captions")
    carousels: list[AdAssetFeedSpecCarouselFields] | None = Field(None, alias="carousels")
    ctwa_consent_data: list[dict[str, Any]] | None = Field(None, alias="ctwa_consent_data")
    descriptions: list[AdAssetFeedSpecDescriptionFields] | None = Field(None, alias="descriptions")
    events: list[AdAssetFeedSpecEventsFields] | None = Field(None, alias="events")
    groups: list[AdAssetFeedSpecGroupRuleFields] | None = Field(None, alias="groups")
    images: list[AdAssetFeedSpecImageFields] | None = Field(None, alias="images")
    link_urls: list[AdAssetFeedSpecLinkURLFields] | None = Field(None, alias="link_urls")
    message_extensions: list[AdAssetMessageExtensionsFields] | None = Field(
        None, alias="message_extensions"
    )
    onsite_destinations: list[AdAssetOnsiteDestinationsFields] | None = Field(
        None, alias="onsite_destinations"
    )
    optimization_type: str | None = Field(None, alias="optimization_type")
    promotional_metadata: dict[str, Any] | None = Field(None, alias="promotional_metadata")
    reasons_to_shop: bool | None = Field(None, alias="reasons_to_shop")
    shops_bundle: bool | None = Field(None, alias="shops_bundle")
    titles: list[AdAssetFeedSpecTitleFields] | None = Field(None, alias="titles")
    translations: list[dict[str, Any]] | None = Field(None, alias="translations")
    upcoming_events: list[dict[str, Any]] | None = Field(None, alias="upcoming_events")
    videos: list[AdAssetFeedSpecVideoFields] | None = Field(None, alias="videos")


class OfflineProductItemFields(BaseModel):
    """Pydantic model for OfflineProductItem fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    applinks: CatalogItemAppLinksFields | None = Field(None, alias="applinks")
    brand: str | None = Field(None, alias="brand")
    category: str | None = Field(None, alias="category")
    category_specific_fields: CatalogSubVerticalListFields | None = Field(
        None, alias="category_specific_fields"
    )
    currency: str | None = Field(None, alias="currency")
    description: str | None = Field(None, alias="description")
    id: str | None = Field(None, alias="id")
    image_fetch_status: dict[str, Any] | None = Field(None, alias="image_fetch_status")
    image_url: str | None = Field(None, alias="image_url")
    images: list[str] | None = Field(None, alias="images")
    name: str | None = Field(None, alias="name")
    offline_product_item_id: str | None = Field(None, alias="offline_product_item_id")
    price: str | None = Field(None, alias="price")
    sanitized_images: list[str] | None = Field(None, alias="sanitized_images")
    url: str | None = Field(None, alias="url")
    visibility: dict[str, Any] | None = Field(None, alias="visibility")


class AdCreativeLinkDataCallToActionValueFields(BaseModel):
    """Pydantic model for AdCreativeLinkDataCallToActionValue fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app_destination: str | None = Field(None, alias="app_destination")
    app_link: str | None = Field(None, alias="app_link")
    application: str | None = Field(None, alias="application")
    event_id: str | None = Field(None, alias="event_id")
    lead_gen_form_id: str | None = Field(None, alias="lead_gen_form_id")
    link: str | None = Field(None, alias="link")
    link_caption: str | None = Field(None, alias="link_caption")
    link_format: str | None = Field(None, alias="link_format")
    object_store_urls: list[str] | None = Field(None, alias="object_store_urls")
    page: str | None = Field(None, alias="page")
    product_link: str | None = Field(None, alias="product_link")
    whatsapp_number: str | None = Field(None, alias="whatsapp_number")


class BusinessFranchiseConfigFields(BaseModel):
    """Pydantic model for BusinessFranchiseConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    active_partner_count: int | None = Field(None, alias="active_partner_count")
    agency_business: BusinessFields | None = Field(None, alias="agency_business")
    agency_business_asset_group: BusinessAssetGroupFields | None = Field(
        None, alias="agency_business_asset_group"
    )
    brand_name: str | None = Field(None, alias="brand_name")
    business: BusinessFields | None = Field(None, alias="business")
    business_vertical: str | None = Field(None, alias="business_vertical")
    id: str | None = Field(None, alias="id")
    partner_count: int | None = Field(None, alias="partner_count")
    pending_agency_business: str | None = Field(None, alias="pending_agency_business")
    program_count: int | None = Field(None, alias="program_count")
    shared_business_asset_group: BusinessAssetGroupFields | None = Field(
        None, alias="shared_business_asset_group"
    )
    shared_creative_folder_count: int | None = Field(None, alias="shared_creative_folder_count")
    shared_custom_audience_count: int | None = Field(None, alias="shared_custom_audience_count")


class TransactionFields(BaseModel):
    """Pydantic model for Transaction fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    app_amount: dict[str, Any] | None = Field(None, alias="app_amount")
    billing_end_time: int | None = Field(None, alias="billing_end_time")
    billing_reason: str | None = Field(None, alias="billing_reason")
    billing_start_time: int | None = Field(None, alias="billing_start_time")
    card_charge_mode: int | None = Field(None, alias="card_charge_mode")
    charge_type: str | None = Field(None, alias="charge_type")
    checkout_campaign_group_id: str | None = Field(None, alias="checkout_campaign_group_id")
    credential_id: str | None = Field(None, alias="credential_id")
    fatura_id: int | None = Field(None, alias="fatura_id")
    id: str | None = Field(None, alias="id")
    is_business_ec_charge: bool | None = Field(None, alias="is_business_ec_charge")
    is_funding_event: bool | None = Field(None, alias="is_funding_event")
    payment_option: str | None = Field(None, alias="payment_option")
    product_type: dict[str, Any] | None = Field(None, alias="product_type")
    provider_amount: dict[str, Any] | None = Field(None, alias="provider_amount")
    status: str | None = Field(None, alias="status")
    time: int | None = Field(None, alias="time")
    tracking_id: str | None = Field(None, alias="tracking_id")
    transaction_type: str | None = Field(None, alias="transaction_type")
    tx_type: int | None = Field(None, alias="tx_type")
    vat_invoice_id: str | None = Field(None, alias="vat_invoice_id")


class IGMediaFields(BaseModel):
    """Pydantic model for IGMedia fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    alt_text: str | None = Field(None, alias="alt_text")
    boost_eligibility_info: IGMediaBoostEligibilityInfoFields | None = Field(
        None, alias="boost_eligibility_info"
    )
    caption: str | None = Field(None, alias="caption")
    comments_count: int | None = Field(None, alias="comments_count")
    copyright_check_information: IGVideoCopyrightCheckMatchesInformationFields | None = Field(
        None, alias="copyright_check_information"
    )
    id: str | None = Field(None, alias="id")
    ig_id: str | None = Field(None, alias="ig_id")
    is_comment_enabled: bool | None = Field(None, alias="is_comment_enabled")
    is_shared_to_feed: bool | None = Field(None, alias="is_shared_to_feed")
    legacy_instagram_media_id: str | None = Field(None, alias="legacy_instagram_media_id")
    like_count: int | None = Field(None, alias="like_count")
    media_product_type: str | None = Field(None, alias="media_product_type")
    media_type: str | None = Field(None, alias="media_type")
    media_url: str | None = Field(None, alias="media_url")
    owner: IGUserFields | None = Field(None, alias="owner")
    permalink: str | None = Field(None, alias="permalink")
    shortcode: str | None = Field(None, alias="shortcode")
    thumbnail_url: str | None = Field(None, alias="thumbnail_url")
    timestamp: datetime | None = Field(None, alias="timestamp")
    username: str | None = Field(None, alias="username")
    view_count: int | None = Field(None, alias="view_count")


class IGBCAdsPermissionFields(BaseModel):
    """Pydantic model for IGBCAdsPermission fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    permission_type: str | None = Field(None, alias="permission_type")
    status: str | None = Field(None, alias="status")


class AdPlacePageSetFields(BaseModel):
    """Pydantic model for AdPlacePageSet fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    id: str | None = Field(None, alias="id")
    location_types: list[str] | None = Field(None, alias="location_types")
    name: str | None = Field(None, alias="name")
    pages_count: int | None = Field(None, alias="pages_count")
    parent_page: PageFields | None = Field(None, alias="parent_page")


class RightsManagerInsightsFields(BaseModel):
    """Pydantic model for RightsManagerInsights fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    error: str | None = Field(None, alias="error")
    error_message: str | None = Field(None, alias="error_message")
    metadata: list[dict[str, dict[str, Any]]] | None = Field(None, alias="metadata")
    totals: list[dict[str, dict[str, Any]]] | None = Field(None, alias="totals")
    x_axis_breakdown: list[list[dict[str, dict[str, Any]]]] | None = Field(
        None, alias="x_axis_breakdown"
    )


class AdsTextSuggestionsFields(BaseModel):
    """Pydantic model for AdsTextSuggestions fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_account_id: str | None = Field(None, alias="ad_account_id")
    bodies: list[dict[str, Any]] | None = Field(None, alias="bodies")
    descriptions: list[dict[str, Any]] | None = Field(None, alias="descriptions")
    inactive_session_tally: int | None = Field(None, alias="inactive_session_tally")
    long: list[dict[str, Any]] | None = Field(None, alias="long")
    short: list[dict[str, Any]] | None = Field(None, alias="short")
    titles: list[dict[str, Any]] | None = Field(None, alias="titles")


class AdCampaignGroupStructureTreeFields(BaseModel):
    """Pydantic model for AdCampaignGroupStructureTree fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    children: list[AdCampaignGroupStructureTreeFields] | None = Field(None, alias="children")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    time_updated: int | None = Field(None, alias="time_updated")


class TargetingGeoLocationRegionFields(BaseModel):
    """Pydantic model for TargetingGeoLocationRegion fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    country: str | None = Field(None, alias="country")
    key: str | None = Field(None, alias="key")
    name: str | None = Field(None, alias="name")


class CanvasTemplateFields(BaseModel):
    """Pydantic model for CanvasTemplate fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    channels: list[dict[str, list[dict[str, str]]]] | None = Field(None, alias="channels")
    description: str | None = Field(None, alias="description")
    document: CanvasFields | None = Field(None, alias="document")
    id: str | None = Field(None, alias="id")
    is_multi_tab_supportable: bool | None = Field(None, alias="is_multi_tab_supportable")
    is_new: bool | None = Field(None, alias="is_new")
    name: str | None = Field(None, alias="name")
    objectives: list[dict[dict[str, Any], dict[str, Any]]] | None = Field(None, alias="objectives")
    owner_id: UserFields | None = Field(None, alias="owner_id")
    required_capabilities: list[str] | None = Field(None, alias="required_capabilities")
    snapshot_photo: PhotoFields | None = Field(None, alias="snapshot_photo")
    status: str | None = Field(None, alias="status")
    sub_verticals: list[str] | None = Field(None, alias="sub_verticals")
    verticals: list[dict[str, str]] | None = Field(None, alias="verticals")


class TargetingSentenceLineFields(BaseModel):
    """Pydantic model for TargetingSentenceLine fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    params: TargetingFields | None = Field(None, alias="params")
    targetingsentencelines: dict[str, Any] | None = Field(None, alias="targetingsentencelines")


class AdRuleScheduleSpecFields(BaseModel):
    """Pydantic model for AdRuleScheduleSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    schedule: list[AdRuleScheduleFields] | None = Field(None, alias="schedule")
    schedule_type: str | None = Field(None, alias="schedule_type")


class CustomAudiencesTOSFields(BaseModel):
    """Pydantic model for CustomAudiencesTOS fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    content: str | None = Field(None, alias="content")
    id: str | None = Field(None, alias="id")
    type: str | None = Field(None, alias="type")


class CampaignFields(BaseModel):
    """Pydantic model for Campaign fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    adlabels: list[AdLabelFields] | None = Field(None, alias="adlabels")
    advantage_state_info: AdCampaignGroupAdvantageStateFields | None = Field(
        None, alias="advantage_state_info"
    )
    bid_strategy: dict[str, Any] | None = Field(None, alias="bid_strategy")
    boosted_object_id: str | None = Field(None, alias="boosted_object_id")
    brand_lift_studies: list[AdStudyFields] | None = Field(None, alias="brand_lift_studies")
    budget_rebalance_flag: bool | None = Field(None, alias="budget_rebalance_flag")
    budget_remaining: str | None = Field(None, alias="budget_remaining")
    buying_type: str | None = Field(None, alias="buying_type")
    campaign_group_active_time: str | None = Field(None, alias="campaign_group_active_time")
    can_create_brand_lift_study: bool | None = Field(None, alias="can_create_brand_lift_study")
    can_use_spend_cap: bool | None = Field(None, alias="can_use_spend_cap")
    configured_status: dict[str, Any] | None = Field(None, alias="configured_status")
    created_time: datetime | None = Field(None, alias="created_time")
    daily_budget: str | None = Field(None, alias="daily_budget")
    effective_status: dict[str, Any] | None = Field(None, alias="effective_status")
    has_secondary_skadnetwork_reporting: bool | None = Field(
        None, alias="has_secondary_skadnetwork_reporting"
    )
    id: str | None = Field(None, alias="id")
    is_budget_schedule_enabled: bool | None = Field(None, alias="is_budget_schedule_enabled")
    is_skadnetwork_attribution: bool | None = Field(None, alias="is_skadnetwork_attribution")
    issues_info: list[AdCampaignIssuesInfoFields] | None = Field(None, alias="issues_info")
    last_budget_toggling_time: datetime | None = Field(None, alias="last_budget_toggling_time")
    lifetime_budget: str | None = Field(None, alias="lifetime_budget")
    name: str | None = Field(None, alias="name")
    objective: str | None = Field(None, alias="objective")
    pacing_type: list[str] | None = Field(None, alias="pacing_type")
    primary_attribution: str | None = Field(None, alias="primary_attribution")
    promoted_object: AdPromotedObjectFields | None = Field(None, alias="promoted_object")
    recommendations: list[AdRecommendationFields] | None = Field(None, alias="recommendations")
    smart_promotion_type: str | None = Field(None, alias="smart_promotion_type")
    source_campaign: CampaignFields | None = Field(None, alias="source_campaign")
    source_campaign_id: str | None = Field(None, alias="source_campaign_id")
    source_recommendation_type: str | None = Field(None, alias="source_recommendation_type")
    special_ad_categories: list[str] | None = Field(None, alias="special_ad_categories")
    special_ad_category: str | None = Field(None, alias="special_ad_category")
    special_ad_category_country: list[str] | None = Field(None, alias="special_ad_category_country")
    spend_cap: str | None = Field(None, alias="spend_cap")
    start_time: datetime | None = Field(None, alias="start_time")
    status: dict[str, Any] | None = Field(None, alias="status")
    stop_time: datetime | None = Field(None, alias="stop_time")
    topline_id: str | None = Field(None, alias="topline_id")
    updated_time: datetime | None = Field(None, alias="updated_time")


class EventTicketTierFields(BaseModel):
    """Pydantic model for EventTicketTier fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    currency: str | None = Field(None, alias="currency")
    description: str | None = Field(None, alias="description")
    end_sales_time: datetime | None = Field(None, alias="end_sales_time")
    end_show_time: datetime | None = Field(None, alias="end_show_time")
    fee_settings: str | None = Field(None, alias="fee_settings")
    id: str | None = Field(None, alias="id")
    maximum_quantity: int | None = Field(None, alias="maximum_quantity")
    metadata: str | None = Field(None, alias="metadata")
    minimum_quantity: int | None = Field(None, alias="minimum_quantity")
    name: str | None = Field(None, alias="name")
    price: int | None = Field(None, alias="price")
    priority: int | None = Field(None, alias="priority")
    retailer_id: str | None = Field(None, alias="retailer_id")
    seating_map_image_url: str | None = Field(None, alias="seating_map_image_url")
    start_sales_time: datetime | None = Field(None, alias="start_sales_time")
    start_show_time: datetime | None = Field(None, alias="start_show_time")
    status: str | None = Field(None, alias="status")
    total_quantity: int | None = Field(None, alias="total_quantity")


class DynamicContentSetFields(BaseModel):
    """Pydantic model for DynamicContentSet fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    business_id: str | None = Field(None, alias="business_id")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class MusicVideoCopyrightFields(BaseModel):
    """Pydantic model for MusicVideoCopyright fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    creation_time: datetime | None = Field(None, alias="creation_time")
    displayed_matches_count: int | None = Field(None, alias="displayed_matches_count")
    id: str | None = Field(None, alias="id")
    in_conflict: bool | None = Field(None, alias="in_conflict")
    isrc: str | None = Field(None, alias="isrc")
    match_rule: VideoCopyrightRuleFields | None = Field(None, alias="match_rule")
    ownership_countries: list[str] | None = Field(None, alias="ownership_countries")
    reference_file_status: str | None = Field(None, alias="reference_file_status")
    ridge_monitoring_status: str | None = Field(None, alias="ridge_monitoring_status")
    tags: list[str] | None = Field(None, alias="tags")
    update_time: datetime | None = Field(None, alias="update_time")
    video_asset: CopyrightReferenceContainerFields | None = Field(None, alias="video_asset")
    whitelisted_fb_users: list[dict[str, Any]] | None = Field(None, alias="whitelisted_fb_users")
    whitelisted_ig_users: list[str] | None = Field(None, alias="whitelisted_ig_users")


class SmartPixelInsightsFields(BaseModel):
    """Pydantic model for SmartPixelInsights fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    source: str | None = Field(None, alias="source")
    stats: list[dict[str, Any]] | None = Field(None, alias="stats")


class CustomAudiencesharedAccountInfoFields(BaseModel):
    """Pydantic model for CustomAudiencesharedAccountInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    account_name: str | None = Field(None, alias="account_name")
    business_id: str | None = Field(None, alias="business_id")
    business_name: str | None = Field(None, alias="business_name")
    sharing_status: str | None = Field(None, alias="sharing_status")


class AdAssetFeedSpecAssetCustomizationRuleFields(BaseModel):
    """Pydantic model for AdAssetFeedSpecAssetCustomizationRule fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    body_label: AdAssetFeedSpecAssetLabelFields | None = Field(None, alias="body_label")
    call_to_action_label: AdAssetFeedSpecAssetLabelFields | None = Field(
        None, alias="call_to_action_label"
    )
    call_to_action_type_label: AdAssetFeedSpecAssetLabelFields | None = Field(
        None, alias="call_to_action_type_label"
    )
    caption_label: AdAssetFeedSpecAssetLabelFields | None = Field(None, alias="caption_label")
    carousel_label: AdAssetFeedSpecAssetLabelFields | None = Field(None, alias="carousel_label")
    customization_spec: AdAssetCustomizationRuleCustomizationSpecFields | None = Field(
        None, alias="customization_spec"
    )
    description_label: AdAssetFeedSpecAssetLabelFields | None = Field(
        None, alias="description_label"
    )
    image_label: AdAssetFeedSpecAssetLabelFields | None = Field(None, alias="image_label")
    is_default: bool | None = Field(None, alias="is_default")
    link_url_label: AdAssetFeedSpecAssetLabelFields | None = Field(None, alias="link_url_label")
    priority: int | None = Field(None, alias="priority")
    title_label: AdAssetFeedSpecAssetLabelFields | None = Field(None, alias="title_label")
    video_label: AdAssetFeedSpecAssetLabelFields | None = Field(None, alias="video_label")


class AdsPixelRealTimeEventLogResultFields(BaseModel):
    """Pydantic model for AdsPixelRealTimeEventLogResult fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    data_json: str | None = Field(None, alias="data_json")
    dedup_data: str | None = Field(None, alias="dedup_data")
    device_type: str | None = Field(None, alias="device_type")
    domain_control_rule_rejection: str | None = Field(None, alias="domain_control_rule_rejection")
    event: str | None = Field(None, alias="event")
    event_detection_method: str | None = Field(None, alias="event_detection_method")
    in_iframe: bool | None = Field(None, alias="in_iframe")
    matched_rule_conditions: str | None = Field(None, alias="matched_rule_conditions")
    resolved_link: str | None = Field(None, alias="resolved_link")
    source_rule_condition: str | None = Field(None, alias="source_rule_condition")
    timestamp: str | None = Field(None, alias="timestamp")
    trace_id: str | None = Field(None, alias="trace_id")
    url: str | None = Field(None, alias="url")


class AdvAInstanceFields(BaseModel):
    """Pydantic model for AdvAInstance fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    instance_type: str | None = Field(None, alias="instance_type")
    name: str | None = Field(None, alias="name")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")


class KeyValueFields(BaseModel):
    """Pydantic model for KeyValue fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    key: str | None = Field(None, alias="key")
    value: str | None = Field(None, alias="value")


class DirectDebitFields(BaseModel):
    """Pydantic model for DirectDebit fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    bank_account_last_4: str | None = Field(None, alias="bank_account_last_4")
    bank_code_last_4: str | None = Field(None, alias="bank_code_last_4")
    bank_name: str | None = Field(None, alias="bank_name")
    default_receiving_method_products: list[str] | None = Field(
        None, alias="default_receiving_method_products"
    )
    display_string: str | None = Field(None, alias="display_string")
    id: str | None = Field(None, alias="id")
    last_four_digits: str | None = Field(None, alias="last_four_digits")
    onboarding_url: str | None = Field(None, alias="onboarding_url")
    owner_name: str | None = Field(None, alias="owner_name")
    status: int | None = Field(None, alias="status")


class PageUpcomingChangeFields(BaseModel):
    """Pydantic model for PageUpcomingChange fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    change_type: str | None = Field(None, alias="change_type")
    effective_time: datetime | None = Field(None, alias="effective_time")
    id: str | None = Field(None, alias="id")
    page: PageFields | None = Field(None, alias="page")
    proposal: PageChangeProposalFields | None = Field(None, alias="proposal")
    timer_status: str | None = Field(None, alias="timer_status")


class ReachFrequencyEstimatesPlacementBreakdownFields(BaseModel):
    """Pydantic model for ReachFrequencyEstimatesPlacementBreakdown fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    android: list[float] | None = Field(None, alias="android")
    audience_network: list[float] | None = Field(None, alias="audience_network")
    desktop: list[float] | None = Field(None, alias="desktop")
    facebook_search: list[float] | None = Field(None, alias="facebook_search")
    fb_reels: list[float] | None = Field(None, alias="fb_reels")
    fb_reels_overlay: list[float] | None = Field(None, alias="fb_reels_overlay")
    ig_android: list[float] | None = Field(None, alias="ig_android")
    ig_ios: list[float] | None = Field(None, alias="ig_ios")
    ig_other: list[float] | None = Field(None, alias="ig_other")
    ig_reels: list[float] | None = Field(None, alias="ig_reels")
    ig_story: list[float] | None = Field(None, alias="ig_story")
    instant_articles: list[float] | None = Field(None, alias="instant_articles")
    instream_videos: list[float] | None = Field(None, alias="instream_videos")
    ios: list[float] | None = Field(None, alias="ios")
    msite: list[float] | None = Field(None, alias="msite")
    suggested_videos: list[float] | None = Field(None, alias="suggested_videos")


class AnalyticsSegmentFields(BaseModel):
    """Pydantic model for AnalyticsSegment fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    custom_audience_ineligiblity_reasons: list[str] | None = Field(
        None, alias="custom_audience_ineligiblity_reasons"
    )
    description: str | None = Field(None, alias="description")
    estimated_custom_audience_size: int | None = Field(None, alias="estimated_custom_audience_size")
    event_info_rules: list[dict[str, Any]] | None = Field(None, alias="event_info_rules")
    event_rules: list[dict[str, Any]] | None = Field(None, alias="event_rules")
    filter_set: str | None = Field(None, alias="filter_set")
    has_demographic_rules: bool | None = Field(None, alias="has_demographic_rules")
    id: str | None = Field(None, alias="id")
    is_all_user: bool | None = Field(None, alias="is_all_user")
    is_eligible_for_push_campaign: bool | None = Field(None, alias="is_eligible_for_push_campaign")
    is_internal: bool | None = Field(None, alias="is_internal")
    name: str | None = Field(None, alias="name")
    percentile_rules: list[dict[str, Any]] | None = Field(None, alias="percentile_rules")
    time_last_seen: int | None = Field(None, alias="time_last_seen")
    time_last_updated: int | None = Field(None, alias="time_last_updated")
    user_property_rules: list[dict[str, Any]] | None = Field(None, alias="user_property_rules")
    web_param_rules: list[dict[str, Any]] | None = Field(None, alias="web_param_rules")


class ContactsMessengerSyncConfigFields(BaseModel):
    """Pydantic model for ContactsMessengerSyncConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    enabled: bool | None = Field(None, alias="enabled")


class ChildEventFields(BaseModel):
    """Pydantic model for ChildEvent fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    end_time: str | None = Field(None, alias="end_time")
    id: str | None = Field(None, alias="id")
    start_time: str | None = Field(None, alias="start_time")
    ticket_uri: str | None = Field(None, alias="ticket_uri")


class TargetingGeoLocationElectoralDistrictFields(BaseModel):
    """Pydantic model for TargetingGeoLocationElectoralDistrict fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    country: str | None = Field(None, alias="country")
    deprecation_code: str | None = Field(None, alias="deprecation_code")
    electoral_district: str | None = Field(None, alias="electoral_district")
    key: str | None = Field(None, alias="key")
    name: str | None = Field(None, alias="name")


class AdAssetFeedSpecEventsFields(BaseModel):
    """Pydantic model for AdAssetFeedSpecEvents fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")


class AudienceFunnelFields(BaseModel):
    """Pydantic model for AudienceFunnel fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    audience_type_param_name: str | None = Field(None, alias="audience_type_param_name")
    audience_type_param_tags: list[dict[str, str]] | None = Field(
        None, alias="audience_type_param_tags"
    )
    custom_audience_groups_info: list[dict[str, list[str]]] | None = Field(
        None, alias="custom_audience_groups_info"
    )


class AdsSegmentsFields(BaseModel):
    """Pydantic model for AdsSegments fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    daily_audience_size: int | None = Field(None, alias="daily_audience_size")
    daily_impressions: int | None = Field(None, alias="daily_impressions")
    description: str | None = Field(None, alias="description")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    path: list[str] | None = Field(None, alias="path")
    popularity: float | None = Field(None, alias="popularity")
    projected_cpm: int | None = Field(None, alias="projected_cpm")
    projected_daily_revenue: int | None = Field(None, alias="projected_daily_revenue")


class AdExportPresetFields(BaseModel):
    """Pydantic model for AdExportPreset fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    created_time: datetime | None = Field(None, alias="created_time")
    fields: list[str] | None = Field(None, alias="fields")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    owner: UserFields | None = Field(None, alias="owner")
    updated_time: datetime | None = Field(None, alias="updated_time")


class ImageReferenceMatchFields(BaseModel):
    """Pydantic model for ImageReferenceMatch fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    conflicting_countries: list[str] | None = Field(None, alias="conflicting_countries")
    country_resolution_history: list[dict[str, list[dict[str, Any]]]] | None = Field(
        None, alias="country_resolution_history"
    )
    creation_time: datetime | None = Field(None, alias="creation_time")
    current_conflict_resolved_countries: list[dict[str, dict[str, Any]]] | None = Field(
        None, alias="current_conflict_resolved_countries"
    )
    displayed_match_state: str | None = Field(None, alias="displayed_match_state")
    dispute_form_data_entries_with_translations: list[dict[str, Any]] | None = Field(
        None, alias="dispute_form_data_entries_with_translations"
    )
    expiration_time: datetime | None = Field(None, alias="expiration_time")
    id: str | None = Field(None, alias="id")
    match_state: str | None = Field(None, alias="match_state")
    matched_reference_copyright: ImageCopyrightFields | None = Field(
        None, alias="matched_reference_copyright"
    )
    matched_reference_owner: ProfileFields | None = Field(None, alias="matched_reference_owner")
    modification_history: list[dict[str, Any]] | None = Field(None, alias="modification_history")
    reference_copyright: ImageCopyrightFields | None = Field(None, alias="reference_copyright")
    reference_owner: ProfileFields | None = Field(None, alias="reference_owner")
    rejection_form_data_entries_with_translations: list[dict[str, Any]] | None = Field(
        None, alias="rejection_form_data_entries_with_translations"
    )
    resolution_reason: str | None = Field(None, alias="resolution_reason")
    update_time: datetime | None = Field(None, alias="update_time")


class LeadGenQuestionOptionFields(BaseModel):
    """Pydantic model for LeadGenQuestionOption fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    key: str | None = Field(None, alias="key")
    value: str | None = Field(None, alias="value")


class CollaborativeAdsShareSettingsFields(BaseModel):
    """Pydantic model for CollaborativeAdsShareSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    agency_business: BusinessFields | None = Field(None, alias="agency_business")
    id: str | None = Field(None, alias="id")
    product_catalog_proxy_id: str | None = Field(None, alias="product_catalog_proxy_id")
    utm_campaign: str | None = Field(None, alias="utm_campaign")
    utm_medium: str | None = Field(None, alias="utm_medium")
    utm_source: str | None = Field(None, alias="utm_source")


class LiveVideoTargetingFields(BaseModel):
    """Pydantic model for LiveVideoTargeting fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    age_max: int | None = Field(None, alias="age_max")
    age_min: int | None = Field(None, alias="age_min")
    excluded_countries: list[str] | None = Field(None, alias="excluded_countries")
    geo_locations: TargetingGeoLocationFields | None = Field(None, alias="geo_locations")


class AdCreativeTextDataFields(BaseModel):
    """Pydantic model for AdCreativeTextData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    message: str | None = Field(None, alias="message")


class AnalyticsEntityUserConfigFields(BaseModel):
    """Pydantic model for AnalyticsEntityUserConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    dismissed_notices: list[str] | None = Field(None, alias="dismissed_notices")


class IGMediaForIGOnlyAPIFields(BaseModel):
    """Pydantic model for IGMediaForIGOnlyAPI fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    alt_text: str | None = Field(None, alias="alt_text")
    caption: str | None = Field(None, alias="caption")
    comments_count: int | None = Field(None, alias="comments_count")
    id: str | None = Field(None, alias="id")
    is_comment_enabled: bool | None = Field(None, alias="is_comment_enabled")
    is_shared_to_feed: bool | None = Field(None, alias="is_shared_to_feed")
    like_count: int | None = Field(None, alias="like_count")
    media_product_type: str | None = Field(None, alias="media_product_type")
    media_type: str | None = Field(None, alias="media_type")
    media_url: str | None = Field(None, alias="media_url")
    owner: UserFields | None = Field(None, alias="owner")
    permalink: str | None = Field(None, alias="permalink")
    shortcode: str | None = Field(None, alias="shortcode")
    thumbnail_url: str | None = Field(None, alias="thumbnail_url")
    timestamp: datetime | None = Field(None, alias="timestamp")
    username: str | None = Field(None, alias="username")


class AdCampaignOptimizationEventFields(BaseModel):
    """Pydantic model for AdCampaignOptimizationEvent fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    custom_conversion_id: str | None = Field(None, alias="custom_conversion_id")
    event_sequence: int | None = Field(None, alias="event_sequence")
    event_type: str | None = Field(None, alias="event_type")


class PrivacyFields(BaseModel):
    """Pydantic model for Privacy fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    allow: str | None = Field(None, alias="allow")
    deny: str | None = Field(None, alias="deny")
    description: str | None = Field(None, alias="description")
    friends: str | None = Field(None, alias="friends")
    networks: str | None = Field(None, alias="networks")
    value: str | None = Field(None, alias="value")


class BlindPigFields(BaseModel):
    """Pydantic model for BlindPig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class AttributionSpecFields(BaseModel):
    """Pydantic model for AttributionSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    event_type: str | None = Field(None, alias="event_type")
    window_days: int | None = Field(None, alias="window_days")


class AdsOptimalDeliveryGrowthOpportunityFields(BaseModel):
    """Pydantic model for AdsOptimalDeliveryGrowthOpportunity fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    child_metadata: list[dict[str, dict[str, Any]]] | None = Field(None, alias="child_metadata")
    metadata: dict[str, Any] | None = Field(None, alias="metadata")
    optimization_type: str | None = Field(None, alias="optimization_type")


class ALMGuidanceFields(BaseModel):
    """Pydantic model for ALMGuidance fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_account_id: str | None = Field(None, alias="ad_account_id")
    guidances: list[dict[str, Any]] | None = Field(None, alias="guidances")
    opportunity_score: float | None = Field(None, alias="opportunity_score")
    parent_advertiser_id: str | None = Field(None, alias="parent_advertiser_id")
    parent_advertiser_name: str | None = Field(None, alias="parent_advertiser_name")


class UserIDForPageFields(BaseModel):
    """Pydantic model for UserIDForPage fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    page: PageFields | None = Field(None, alias="page")


class AdAccountFields(BaseModel):
    """Pydantic model for AdAccount fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    account_status: int | None = Field(None, alias="account_status")
    ad_account_promotable_objects: AdAccountPromotableObjectsFields | None = Field(
        None, alias="ad_account_promotable_objects"
    )
    age: float | None = Field(None, alias="age")
    agency_client_declaration: AgencyClientDeclarationFields | None = Field(
        None, alias="agency_client_declaration"
    )
    all_capabilities: list[str] | None = Field(None, alias="all_capabilities")
    amount_spent: str | None = Field(None, alias="amount_spent")
    attribution_spec: list[AttributionSpecFields] | None = Field(None, alias="attribution_spec")
    balance: str | None = Field(None, alias="balance")
    brand_safety_content_filter_levels: list[str] | None = Field(
        None, alias="brand_safety_content_filter_levels"
    )
    business: BusinessFields | None = Field(None, alias="business")
    business_city: str | None = Field(None, alias="business_city")
    business_country_code: str | None = Field(None, alias="business_country_code")
    business_name: str | None = Field(None, alias="business_name")
    business_state: str | None = Field(None, alias="business_state")
    business_street: str | None = Field(None, alias="business_street")
    business_street2: str | None = Field(None, alias="business_street2")
    business_zip: str | None = Field(None, alias="business_zip")
    can_create_brand_lift_study: bool | None = Field(None, alias="can_create_brand_lift_study")
    capabilities: list[str] | None = Field(None, alias="capabilities")
    created_time: datetime | None = Field(None, alias="created_time")
    currency: str | None = Field(None, alias="currency")
    custom_audience_info: CustomAudienceGroupFields | None = Field(
        None, alias="custom_audience_info"
    )
    default_dsa_beneficiary: str | None = Field(None, alias="default_dsa_beneficiary")
    default_dsa_payor: str | None = Field(None, alias="default_dsa_payor")
    disable_reason: int | None = Field(None, alias="disable_reason")
    end_advertiser: str | None = Field(None, alias="end_advertiser")
    end_advertiser_name: str | None = Field(None, alias="end_advertiser_name")
    existing_customers: list[str] | None = Field(None, alias="existing_customers")
    expired_funding_source_details: FundingSourceDetailsFields | None = Field(
        None, alias="expired_funding_source_details"
    )
    extended_credit_invoice_group: ExtendedCreditInvoiceGroupFields | None = Field(
        None, alias="extended_credit_invoice_group"
    )
    failed_delivery_checks: list[DeliveryCheckFields] | None = Field(
        None, alias="failed_delivery_checks"
    )
    fb_entity: int | None = Field(None, alias="fb_entity")
    funding_source: str | None = Field(None, alias="funding_source")
    funding_source_details: FundingSourceDetailsFields | None = Field(
        None, alias="funding_source_details"
    )
    has_migrated_permissions: bool | None = Field(None, alias="has_migrated_permissions")
    has_page_authorized_adaccount: bool | None = Field(None, alias="has_page_authorized_adaccount")
    id: str | None = Field(None, alias="id")
    io_number: str | None = Field(None, alias="io_number")
    is_attribution_spec_system_default: bool | None = Field(
        None, alias="is_attribution_spec_system_default"
    )
    is_ba_skip_delayed_eligible: bool | None = Field(None, alias="is_ba_skip_delayed_eligible")
    is_direct_deals_enabled: bool | None = Field(None, alias="is_direct_deals_enabled")
    is_in_3ds_authorization_enabled_market: bool | None = Field(
        None, alias="is_in_3ds_authorization_enabled_market"
    )
    is_notifications_enabled: bool | None = Field(None, alias="is_notifications_enabled")
    is_personal: int | None = Field(None, alias="is_personal")
    is_prepay_account: bool | None = Field(None, alias="is_prepay_account")
    is_tax_id_required: bool | None = Field(None, alias="is_tax_id_required")
    liable_address: CRMAddressFields | None = Field(None, alias="liable_address")
    line_numbers: list[int] | None = Field(None, alias="line_numbers")
    media_agency: str | None = Field(None, alias="media_agency")
    min_campaign_group_spend_cap: str | None = Field(None, alias="min_campaign_group_spend_cap")
    min_daily_budget: int | None = Field(None, alias="min_daily_budget")
    name: str | None = Field(None, alias="name")
    offsite_pixels_tos_accepted: bool | None = Field(None, alias="offsite_pixels_tos_accepted")
    owner: str | None = Field(None, alias="owner")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")
    partner: str | None = Field(None, alias="partner")
    rf_spec: ReachFrequencySpecFields | None = Field(None, alias="rf_spec")
    send_bill_to_address: CRMAddressFields | None = Field(None, alias="send_bill_to_address")
    show_checkout_experience: bool | None = Field(None, alias="show_checkout_experience")
    sold_to_address: CRMAddressFields | None = Field(None, alias="sold_to_address")
    spend_cap: str | None = Field(None, alias="spend_cap")
    tax_id: str | None = Field(None, alias="tax_id")
    tax_id_status: int | None = Field(None, alias="tax_id_status")
    tax_id_type: str | None = Field(None, alias="tax_id_type")
    timezone_id: int | None = Field(None, alias="timezone_id")
    timezone_name: str | None = Field(None, alias="timezone_name")
    timezone_offset_hours_utc: float | None = Field(None, alias="timezone_offset_hours_utc")
    tos_accepted: dict[str, int] | None = Field(None, alias="tos_accepted")
    user_access_expire_time: datetime | None = Field(None, alias="user_access_expire_time")
    user_tasks: list[str] | None = Field(None, alias="user_tasks")
    user_tos_accepted: dict[str, int] | None = Field(None, alias="user_tos_accepted")
    viewable_business: BusinessFields | None = Field(None, alias="viewable_business")


class LeadGenDirectCRMIntegrationConfigFields(BaseModel):
    """Pydantic model for LeadGenDirectCRMIntegrationConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    auth_id: str | None = Field(None, alias="auth_id")
    creation_time: datetime | None = Field(None, alias="creation_time")
    id: str | None = Field(None, alias="id")
    lead_gen_data: LeadgenFormFields | None = Field(None, alias="lead_gen_data")
    matched_fields: list[dict[str, str]] | None = Field(None, alias="matched_fields")
    matched_fields_labels: list[dict[str, str]] | None = Field(None, alias="matched_fields_labels")
    resources: list[dict[str, str]] | None = Field(None, alias="resources")
    third_party_app_id: str | None = Field(None, alias="third_party_app_id")


class SignalsIWLExtractorFields(BaseModel):
    """Pydantic model for SignalsIWLExtractor fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    domain_uri: str | None = Field(None, alias="domain_uri")
    event_type: str | None = Field(None, alias="event_type")
    extractor_type: str | None = Field(None, alias="extractor_type")
    id: str | None = Field(None, alias="id")


class SingleOwnerAdditionalProfileFields(BaseModel):
    """Pydantic model for SingleOwnerAdditionalProfile fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    user_name: str | None = Field(None, alias="user_name")


class DynamicARMetadataFields(BaseModel):
    """Pydantic model for DynamicARMetadata fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    anchor_point: list[float] | None = Field(None, alias="anchor_point")
    container_effect_enum: int | None = Field(None, alias="container_effect_enum")
    effect_icon_url: str | None = Field(None, alias="effect_icon_url")
    effect_id: str | None = Field(None, alias="effect_id")
    id: str | None = Field(None, alias="id")
    platforms: list[str] | None = Field(None, alias="platforms")
    scale_factor: list[float] | None = Field(None, alias="scale_factor")
    shadow_texture_url: str | None = Field(None, alias="shadow_texture_url")
    source_url: str | None = Field(None, alias="source_url")
    state: str | None = Field(None, alias="state")
    tags: list[str] | None = Field(None, alias="tags")
    variant_picker_url: str | None = Field(None, alias="variant_picker_url")


class ProductItemLandingPageDataFields(BaseModel):
    """Pydantic model for ProductItemLandingPageData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    availability: dict[str, Any] | None = Field(None, alias="availability")


class BusinessAdAccountRequestFields(BaseModel):
    """Pydantic model for BusinessAdAccountRequest fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_account: AdAccountFields | None = Field(None, alias="ad_account")
    id: str | None = Field(None, alias="id")


class FlightFields(BaseModel):
    """Pydantic model for Flight fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    applinks: CatalogItemAppLinksFields | None = Field(None, alias="applinks")
    category_specific_fields: CatalogSubVerticalListFields | None = Field(
        None, alias="category_specific_fields"
    )
    currency: str | None = Field(None, alias="currency")
    custom_label_0: str | None = Field(None, alias="custom_label_0")
    custom_label_1: str | None = Field(None, alias="custom_label_1")
    custom_label_2: str | None = Field(None, alias="custom_label_2")
    custom_label_3: str | None = Field(None, alias="custom_label_3")
    custom_label_4: str | None = Field(None, alias="custom_label_4")
    custom_number_0: int | None = Field(None, alias="custom_number_0")
    custom_number_1: int | None = Field(None, alias="custom_number_1")
    custom_number_2: int | None = Field(None, alias="custom_number_2")
    custom_number_3: int | None = Field(None, alias="custom_number_3")
    custom_number_4: int | None = Field(None, alias="custom_number_4")
    description: str | None = Field(None, alias="description")
    destination_airport: str | None = Field(None, alias="destination_airport")
    destination_city: str | None = Field(None, alias="destination_city")
    flight_id: str | None = Field(None, alias="flight_id")
    id: str | None = Field(None, alias="id")
    image_fetch_status: dict[str, Any] | None = Field(None, alias="image_fetch_status")
    images: list[str] | None = Field(None, alias="images")
    oneway_currency: str | None = Field(None, alias="oneway_currency")
    oneway_price: str | None = Field(None, alias="oneway_price")
    origin_airport: str | None = Field(None, alias="origin_airport")
    origin_city: str | None = Field(None, alias="origin_city")
    price: str | None = Field(None, alias="price")
    product_priority_0: float | None = Field(None, alias="product_priority_0")
    product_priority_1: float | None = Field(None, alias="product_priority_1")
    product_priority_2: float | None = Field(None, alias="product_priority_2")
    product_priority_3: float | None = Field(None, alias="product_priority_3")
    product_priority_4: float | None = Field(None, alias="product_priority_4")
    sanitized_images: list[str] | None = Field(None, alias="sanitized_images")
    tags: list[str] | None = Field(None, alias="tags")
    unit_price: dict[str, Any] | None = Field(None, alias="unit_price")
    url: str | None = Field(None, alias="url")
    visibility: dict[str, Any] | None = Field(None, alias="visibility")


class CustomConversionActivitiesFields(BaseModel):
    """Pydantic model for CustomConversionActivities fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app_id: int | None = Field(None, alias="app_id")
    data: str | None = Field(None, alias="data")
    event_type: str | None = Field(None, alias="event_type")
    timestamp: datetime | None = Field(None, alias="timestamp")


class AdFields(BaseModel):
    """Pydantic model for Ad fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    ad_active_time: str | None = Field(None, alias="ad_active_time")
    ad_review_feedback: AdgroupReviewFeedbackFields | None = Field(None, alias="ad_review_feedback")
    ad_schedule_end_time: datetime | None = Field(None, alias="ad_schedule_end_time")
    ad_schedule_start_time: datetime | None = Field(None, alias="ad_schedule_start_time")
    adlabels: list[AdLabelFields] | None = Field(None, alias="adlabels")
    adset: AdSetFields | None = Field(None, alias="adset")
    adset_id: str | None = Field(None, alias="adset_id")
    bid_amount: int | None = Field(None, alias="bid_amount")
    bid_info: dict[str, int] | None = Field(None, alias="bid_info")
    bid_type: dict[str, Any] | None = Field(None, alias="bid_type")
    campaign: CampaignFields | None = Field(None, alias="campaign")
    campaign_id: str | None = Field(None, alias="campaign_id")
    configured_status: dict[str, Any] | None = Field(None, alias="configured_status")
    conversion_domain: str | None = Field(None, alias="conversion_domain")
    conversion_specs: list[ConversionActionQueryFields] | None = Field(
        None, alias="conversion_specs"
    )
    created_time: datetime | None = Field(None, alias="created_time")
    creative: AdCreativeFields | None = Field(None, alias="creative")
    creative_asset_groups_spec: AdCreativeAssetGroupsSpecFields | None = Field(
        None, alias="creative_asset_groups_spec"
    )
    demolink_hash: str | None = Field(None, alias="demolink_hash")
    display_sequence: int | None = Field(None, alias="display_sequence")
    effective_status: dict[str, Any] | None = Field(None, alias="effective_status")
    engagement_audience: bool | None = Field(None, alias="engagement_audience")
    failed_delivery_checks: list[DeliveryCheckFields] | None = Field(
        None, alias="failed_delivery_checks"
    )
    id: str | None = Field(None, alias="id")
    issues_info: list[AdgroupIssuesInfoFields] | None = Field(None, alias="issues_info")
    last_updated_by_app_id: str | None = Field(None, alias="last_updated_by_app_id")
    name: str | None = Field(None, alias="name")
    placement: PlacementFields | None = Field(None, alias="placement")
    preview_shareable_link: str | None = Field(None, alias="preview_shareable_link")
    priority: int | None = Field(None, alias="priority")
    recommendations: list[AdRecommendationFields] | None = Field(None, alias="recommendations")
    source_ad: AdFields | None = Field(None, alias="source_ad")
    source_ad_id: str | None = Field(None, alias="source_ad_id")
    status: dict[str, Any] | None = Field(None, alias="status")
    targeting: TargetingFields | None = Field(None, alias="targeting")
    tracking_and_conversion_with_defaults: TrackingAndConversionWithDefaultsFields | None = Field(
        None, alias="tracking_and_conversion_with_defaults"
    )
    tracking_specs: list[ConversionActionQueryFields] | None = Field(None, alias="tracking_specs")
    updated_time: datetime | None = Field(None, alias="updated_time")


class HotelRoomFields(BaseModel):
    """Pydantic model for HotelRoom fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    applinks: CatalogItemAppLinksFields | None = Field(None, alias="applinks")
    base_price: str | None = Field(None, alias="base_price")
    currency: str | None = Field(None, alias="currency")
    description: str | None = Field(None, alias="description")
    id: str | None = Field(None, alias="id")
    images: list[str] | None = Field(None, alias="images")
    margin_level: str | None = Field(None, alias="margin_level")
    name: str | None = Field(None, alias="name")
    room_id: str | None = Field(None, alias="room_id")
    sale_price: str | None = Field(None, alias="sale_price")
    url: str | None = Field(None, alias="url")


class AdCreativeOmnichannelLinkSpecFields(BaseModel):
    """Pydantic model for AdCreativeOmnichannelLinkSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app: dict[str, Any] | None = Field(None, alias="app")
    web: dict[str, Any] | None = Field(None, alias="web")


class LiveVideoAdBreakConfigFields(BaseModel):
    """Pydantic model for LiveVideoAdBreakConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    default_ad_break_duration: int | None = Field(None, alias="default_ad_break_duration")
    failure_reason_polling_interval: int | None = Field(
        None, alias="failure_reason_polling_interval"
    )
    first_break_eligible_secs: int | None = Field(None, alias="first_break_eligible_secs")
    guide_url: str | None = Field(None, alias="guide_url")
    is_eligible_to_onboard: bool | None = Field(None, alias="is_eligible_to_onboard")
    is_enabled: bool | None = Field(None, alias="is_enabled")
    onboarding_url: str | None = Field(None, alias="onboarding_url")
    preparing_duration: int | None = Field(None, alias="preparing_duration")
    time_between_ad_breaks_secs: int | None = Field(None, alias="time_between_ad_breaks_secs")
    viewer_count_threshold: int | None = Field(None, alias="viewer_count_threshold")


class SplitTestWinnerFields(BaseModel):
    """Pydantic model for SplitTestWinner fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_object_level: str | None = Field(None, alias="ad_object_level")
    confidences: list[dict[str, float]] | None = Field(None, alias="confidences")
    winner_ad_object_id: str | None = Field(None, alias="winner_ad_object_id")


class CampaignActionsDataFields(BaseModel):
    """Pydantic model for CampaignActionsData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pass  # No fields defined


class IDNameFields(BaseModel):
    """Pydantic model for IDName fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class AdsPixelRawFiresResultFields(BaseModel):
    """Pydantic model for AdsPixelRawFiresResult fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    data_json: str | None = Field(None, alias="data_json")
    device_type: str | None = Field(None, alias="device_type")
    event: str | None = Field(None, alias="event")
    event_detection_method: str | None = Field(None, alias="event_detection_method")
    event_src: str | None = Field(None, alias="event_src")
    placed_url: str | None = Field(None, alias="placed_url")
    timestamp: datetime | None = Field(None, alias="timestamp")
    user_pii_keys: str | None = Field(None, alias="user_pii_keys")


class RecommendedPagePostFields(BaseModel):
    """Pydantic model for RecommendedPagePost fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    intent_score: float | None = Field(None, alias="intent_score")
    is_ig_media: bool | None = Field(None, alias="is_ig_media")
    post_id: str | None = Field(None, alias="post_id")


class CopyrightReferenceContainerFields(BaseModel):
    """Pydantic model for CopyrightReferenceContainer fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    content_type: str | None = Field(None, alias="content_type")
    copyright_creation_time: datetime | None = Field(None, alias="copyright_creation_time")
    download_hd_url: str | None = Field(None, alias="download_hd_url")
    duration_in_sec: float | None = Field(None, alias="duration_in_sec")
    id: str | None = Field(None, alias="id")
    iswc: str | None = Field(None, alias="iswc")
    metadata: dict[str, Any] | None = Field(None, alias="metadata")
    playable_video_uri: str | None = Field(None, alias="playable_video_uri")
    published_time: datetime | None = Field(None, alias="published_time")
    thumbnail_url: str | None = Field(None, alias="thumbnail_url")
    title: str | None = Field(None, alias="title")
    universal_content_id: str | None = Field(None, alias="universal_content_id")
    writer_names: list[str] | None = Field(None, alias="writer_names")


class BusinessCreativeFolderFields(BaseModel):
    """Pydantic model for BusinessCreativeFolder fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    business: BusinessFields | None = Field(None, alias="business")
    creation_time: datetime | None = Field(None, alias="creation_time")
    creative_insight_permissions: list[dict[str, str]] | None = Field(
        None, alias="creative_insight_permissions"
    )
    description: str | None = Field(None, alias="description")
    id: str | None = Field(None, alias="id")
    media_library_url: str | None = Field(None, alias="media_library_url")
    name: str | None = Field(None, alias="name")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")


class UserIDForAppFields(BaseModel):
    """Pydantic model for UserIDForApp fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app: ApplicationFields | None = Field(None, alias="app")
    id: str | None = Field(None, alias="id")


class AMOneshopSettingsFields(BaseModel):
    """Pydantic model for AMOneshopSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pass  # No fields defined


class AdCampaignDeliveryStatsUnsupportedReasonsFields(BaseModel):
    """Pydantic model for AdCampaignDeliveryStatsUnsupportedReasons fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    reason_data: list[dict[str, str]] | None = Field(None, alias="reason_data")
    reason_type: str | None = Field(None, alias="reason_type")


class AdRecommendationFields(BaseModel):
    """Pydantic model for AdRecommendation fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    blame_field: str | None = Field(None, alias="blame_field")
    code: int | None = Field(None, alias="code")
    confidence: dict[str, Any] | None = Field(None, alias="confidence")
    importance: dict[str, Any] | None = Field(None, alias="importance")
    message: str | None = Field(None, alias="message")
    recommendation_data: AdRecommendationDataFields | None = Field(
        None, alias="recommendation_data"
    )
    title: str | None = Field(None, alias="title")
    value: str | None = Field(None, alias="value")


class PageAppWithLeadsAccessFields(BaseModel):
    """Pydantic model for PageAppWithLeadsAccess fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    can_access_leads: bool | None = Field(None, alias="can_access_leads")
    type: str | None = Field(None, alias="type")


class AdAssetFeedSpecGroupRuleFields(BaseModel):
    """Pydantic model for AdAssetFeedSpecGroupRule fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    body_label: AdAssetFeedSpecAssetLabelFields | None = Field(None, alias="body_label")
    caption_label: AdAssetFeedSpecAssetLabelFields | None = Field(None, alias="caption_label")
    description_label: AdAssetFeedSpecAssetLabelFields | None = Field(
        None, alias="description_label"
    )
    image_label: AdAssetFeedSpecAssetLabelFields | None = Field(None, alias="image_label")
    link_url_label: AdAssetFeedSpecAssetLabelFields | None = Field(None, alias="link_url_label")
    title_label: AdAssetFeedSpecAssetLabelFields | None = Field(None, alias="title_label")
    video_label: AdAssetFeedSpecAssetLabelFields | None = Field(None, alias="video_label")


class PageCrmsWithLeadsAccessFields(BaseModel):
    """Pydantic model for PageCrmsWithLeadsAccess fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    can_access_leads: bool | None = Field(None, alias="can_access_leads")
    id: str | None = Field(None, alias="id")
    integration_type: str | None = Field(None, alias="integration_type")
    name: str | None = Field(None, alias="name")


class BusinessObjectTransferOwnershipAgreementFields(BaseModel):
    """Pydantic model for BusinessObjectTransferOwnershipAgreement fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    receiving_business: BusinessFields | None = Field(None, alias="receiving_business")
    requesting_business: BusinessFields | None = Field(None, alias="requesting_business")
    status: str | None = Field(None, alias="status")


class LiveVideoRecommendedEncoderSettingsFields(BaseModel):
    """Pydantic model for LiveVideoRecommendedEncoderSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    audio_codec_settings: dict[str, Any] | None = Field(None, alias="audio_codec_settings")
    streaming_protocol: str | None = Field(None, alias="streaming_protocol")
    video_codec_settings: dict[str, Any] | None = Field(None, alias="video_codec_settings")


class PageCallToActionFields(BaseModel):
    """Pydantic model for PageCallToAction fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    android_app: ApplicationFields | None = Field(None, alias="android_app")
    android_deeplink: str | None = Field(None, alias="android_deeplink")
    android_destination_type: str | None = Field(None, alias="android_destination_type")
    android_package_name: str | None = Field(None, alias="android_package_name")
    android_url: str | None = Field(None, alias="android_url")
    created_time: datetime | None = Field(None, alias="created_time")
    email_address: str | None = Field(None, alias="email_address")
    from_: PageFields | None = Field(None, alias="from")
    id: str | None = Field(None, alias="id")
    intl_number_with_plus: str | None = Field(None, alias="intl_number_with_plus")
    iphone_app: ApplicationFields | None = Field(None, alias="iphone_app")
    iphone_deeplink: str | None = Field(None, alias="iphone_deeplink")
    iphone_destination_type: str | None = Field(None, alias="iphone_destination_type")
    iphone_url: str | None = Field(None, alias="iphone_url")
    status: str | None = Field(None, alias="status")
    type: str | None = Field(None, alias="type")
    updated_time: datetime | None = Field(None, alias="updated_time")
    web_destination_type: str | None = Field(None, alias="web_destination_type")
    web_url: str | None = Field(None, alias="web_url")


class AdCampaignGroupStatsFields(BaseModel):
    """Pydantic model for AdCampaignGroupStats fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    actions: dict[str, int] | None = Field(None, alias="actions")
    campaign_group_id: str | None = Field(None, alias="campaign_group_id")
    clicks: int | None = Field(None, alias="clicks")
    end_time: datetime | None = Field(None, alias="end_time")
    impressions: int | None = Field(None, alias="impressions")
    inline_actions: dict[str, int] | None = Field(None, alias="inline_actions")
    social_clicks: int | None = Field(None, alias="social_clicks")
    social_impressions: int | None = Field(None, alias="social_impressions")
    social_spent: int | None = Field(None, alias="social_spent")
    social_unique_clicks: int | None = Field(None, alias="social_unique_clicks")
    social_unique_impressions: int | None = Field(None, alias="social_unique_impressions")
    spent: int | None = Field(None, alias="spent")
    start_time: datetime | None = Field(None, alias="start_time")
    unique_clicks: int | None = Field(None, alias="unique_clicks")
    unique_impressions: int | None = Field(None, alias="unique_impressions")


class BusinessRoleRequestFields(BaseModel):
    """Pydantic model for BusinessRoleRequest fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    created_by: dict[str, Any] | None = Field(None, alias="created_by")
    created_time: datetime | None = Field(None, alias="created_time")
    email: str | None = Field(None, alias="email")
    expiration_time: datetime | None = Field(None, alias="expiration_time")
    expiry_time: datetime | None = Field(None, alias="expiry_time")
    finance_role: str | None = Field(None, alias="finance_role")
    id: str | None = Field(None, alias="id")
    invite_link: str | None = Field(None, alias="invite_link")
    invited_user_type: list[str] | None = Field(None, alias="invited_user_type")
    ip_role: str | None = Field(None, alias="ip_role")
    owner: BusinessFields | None = Field(None, alias="owner")
    role: str | None = Field(None, alias="role")
    status: str | None = Field(None, alias="status")
    tasks: list[str] | None = Field(None, alias="tasks")
    updated_by: dict[str, Any] | None = Field(None, alias="updated_by")
    updated_time: datetime | None = Field(None, alias="updated_time")


class OfflineTermsOfServiceFields(BaseModel):
    """Pydantic model for OfflineTermsOfService fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    accept_time: int | None = Field(None, alias="accept_time")
    id: str | None = Field(None, alias="id")
    signed_by_user: UserFields | None = Field(None, alias="signed_by_user")


class AdAccountAdLimitsInsightsFields(BaseModel):
    """Pydantic model for AdAccountAdLimitsInsights fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    date_start: str | None = Field(None, alias="date_start")
    date_stop: str | None = Field(None, alias="date_stop")


class AdCreativeRecommenderSettingsFields(BaseModel):
    """Pydantic model for AdCreativeRecommenderSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    preferred_events: list[str] | None = Field(None, alias="preferred_events")
    product_sales_channel: str | None = Field(None, alias="product_sales_channel")


class ExtendedCreditApplicationFields(BaseModel):
    """Pydantic model for ExtendedCreditApplication fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    billing_country: str | None = Field(None, alias="billing_country")
    city: str | None = Field(None, alias="city")
    cnpj: str | None = Field(None, alias="cnpj")
    country: str | None = Field(None, alias="country")
    display_currency: str | None = Field(None, alias="display_currency")
    duns_number: str | None = Field(None, alias="duns_number")
    id: str | None = Field(None, alias="id")
    invoice_email_address: str | None = Field(None, alias="invoice_email_address")
    is_umi: bool | None = Field(None, alias="is_umi")
    legal_entity_name: str | None = Field(None, alias="legal_entity_name")
    original_online_limit: CurrencyAmountFields | None = Field(None, alias="original_online_limit")
    phone_number: str | None = Field(None, alias="phone_number")
    postal_code: str | None = Field(None, alias="postal_code")
    product_types: list[str] | None = Field(None, alias="product_types")
    proposed_credit_limit: CurrencyAmountFields | None = Field(None, alias="proposed_credit_limit")
    registration_number: str | None = Field(None, alias="registration_number")
    run_id: str | None = Field(None, alias="run_id")
    state: str | None = Field(None, alias="state")
    status: str | None = Field(None, alias="status")
    street1: str | None = Field(None, alias="street1")
    street2: str | None = Field(None, alias="street2")
    submitter: UserFields | None = Field(None, alias="submitter")
    tax_exempt_status: str | None = Field(None, alias="tax_exempt_status")
    tax_id: str | None = Field(None, alias="tax_id")
    terms: str | None = Field(None, alias="terms")


class AdCreativeFormatTransformationSpecFields(BaseModel):
    """Pydantic model for AdCreativeFormatTransformationSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    data_source: list[str] | None = Field(None, alias="data_source")
    format: str | None = Field(None, alias="format")


class ProductVisualVariantFields(BaseModel):
    """Pydantic model for ProductVisualVariant fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    items: list[ProductItemFields] | None = Field(None, alias="items")
    unique_key: str | None = Field(None, alias="unique_key")


class AudiencePermissionForActionsFields(BaseModel):
    """Pydantic model for AudiencePermissionForActions fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    can_edit: bool | None = Field(None, alias="can_edit")
    can_see_insight: bool | None = Field(None, alias="can_see_insight")
    can_share: bool | None = Field(None, alias="can_share")
    subtype_supports_lookalike: bool | None = Field(None, alias="subtype_supports_lookalike")
    supports_recipient_lookalike: bool | None = Field(None, alias="supports_recipient_lookalike")


class AdsCreationSavedStateFields(BaseModel):
    """Pydantic model for AdsCreationSavedState fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_account: AdAccountFields | None = Field(None, alias="ad_account")
    id: str | None = Field(None, alias="id")
    serialized_store_data: str | None = Field(None, alias="serialized_store_data")
    time_updated: datetime | None = Field(None, alias="time_updated")
    user: dict[str, Any] | None = Field(None, alias="user")


class EducationExperienceFields(BaseModel):
    """Pydantic model for EducationExperience fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    classes: list[ExperienceFields] | None = Field(None, alias="classes")
    concentration: list[PageFields] | None = Field(None, alias="concentration")
    degree: PageFields | None = Field(None, alias="degree")
    id: str | None = Field(None, alias="id")
    school: PageFields | None = Field(None, alias="school")
    type: str | None = Field(None, alias="type")
    with_: list[UserFields] | None = Field(None, alias="with")
    year: PageFields | None = Field(None, alias="year")


class MessengerAdsPartialAutomatedStepListFields(BaseModel):
    """Pydantic model for MessengerAdsPartialAutomatedStepList fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    fblead_form: LeadgenFormFields | None = Field(None, alias="fblead_form")
    first_step_id: str | None = Field(None, alias="first_step_id")
    id: str | None = Field(None, alias="id")
    page: PageFields | None = Field(None, alias="page")
    privacy_url: str | None = Field(None, alias="privacy_url")
    reminder_text: str | None = Field(None, alias="reminder_text")
    stop_question_message: str | None = Field(None, alias="stop_question_message")


class TabFields(BaseModel):
    """Pydantic model for Tab fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    application: ApplicationFields | None = Field(None, alias="application")
    custom_image_url: str | None = Field(None, alias="custom_image_url")
    custom_name: str | None = Field(None, alias="custom_name")
    id: str | None = Field(None, alias="id")
    image_url: str | None = Field(None, alias="image_url")
    is_non_connection_landing_tab: bool | None = Field(None, alias="is_non_connection_landing_tab")
    is_permanent: bool | None = Field(None, alias="is_permanent")
    link: str | None = Field(None, alias="link")
    name: str | None = Field(None, alias="name")
    position: int | None = Field(None, alias="position")


class AudioCopyrightFields(BaseModel):
    """Pydantic model for AudioCopyright fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    creation_time: datetime | None = Field(None, alias="creation_time")
    displayed_matches_count: int | None = Field(None, alias="displayed_matches_count")
    id: str | None = Field(None, alias="id")
    in_conflict: bool | None = Field(None, alias="in_conflict")
    isrc: str | None = Field(None, alias="isrc")
    match_rule: VideoCopyrightRuleFields | None = Field(None, alias="match_rule")
    ownership_countries: list[str] | None = Field(None, alias="ownership_countries")
    ownership_details: list[dict[str, dict[str, Any]]] | None = Field(
        None, alias="ownership_details"
    )
    reference_file_status: str | None = Field(None, alias="reference_file_status")
    ridge_monitoring_status: str | None = Field(None, alias="ridge_monitoring_status")
    tags: list[str] | None = Field(None, alias="tags")
    update_time: datetime | None = Field(None, alias="update_time")
    whitelisted_fb_users: list[dict[str, Any]] | None = Field(None, alias="whitelisted_fb_users")
    whitelisted_ig_users: list[str] | None = Field(None, alias="whitelisted_ig_users")


class BrandedContentAdErrorFields(BaseModel):
    """Pydantic model for BrandedContentAdError fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    blame_field_spec: list[str] | None = Field(None, alias="blame_field_spec")
    error_code: int | None = Field(None, alias="error_code")
    error_description: str | None = Field(None, alias="error_description")
    error_message: str | None = Field(None, alias="error_message")
    error_placement: str | None = Field(None, alias="error_placement")
    error_severity: str | None = Field(None, alias="error_severity")
    help_center_id: int | None = Field(None, alias="help_center_id")


class WithAsset3DFields(BaseModel):
    """Pydantic model for WithAsset3D fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")


class AdCreativeDestinationSpecFields(BaseModel):
    """Pydantic model for AdCreativeDestinationSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    destination_type: str | None = Field(None, alias="destination_type")


class WoodhengePurchasedPAYGReceiptFields(BaseModel):
    """Pydantic model for WoodhengePurchasedPAYGReceipt fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    number_of_subscriptions_purchased: int | None = Field(
        None, alias="number_of_subscriptions_purchased"
    )
    purchase_time: datetime | None = Field(None, alias="purchase_time")
    user: UserFields | None = Field(None, alias="user")


class ProductSetTaxonCategoryFields(BaseModel):
    """Pydantic model for ProductSetTaxonCategory fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    category_id: int | None = Field(None, alias="category_id")
    category_name: str | None = Field(None, alias="category_name")
    image_url: str | None = Field(None, alias="image_url")


class CanvasFields(BaseModel):
    """Pydantic model for Canvas fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    background_color: str | None = Field(None, alias="background_color")
    body_elements: list[dict[str, Any]] | None = Field(None, alias="body_elements")
    business_id: str | None = Field(None, alias="business_id")
    canvas_link: str | None = Field(None, alias="canvas_link")
    collection_hero_image: PhotoFields | None = Field(None, alias="collection_hero_image")
    collection_hero_video: AdVideoFields | None = Field(None, alias="collection_hero_video")
    collection_thumbnails: list[CanvasCollectionThumbnailFields] | None = Field(
        None, alias="collection_thumbnails"
    )
    dynamic_setting: CanvasDynamicSettingFields | None = Field(None, alias="dynamic_setting")
    element_payload: str | None = Field(None, alias="element_payload")
    elements: list[RichMediaElementFields] | None = Field(None, alias="elements")
    fb_body_elements: list[dict[str, Any]] | None = Field(None, alias="fb_body_elements")
    id: str | None = Field(None, alias="id")
    is_hidden: bool | None = Field(None, alias="is_hidden")
    is_published: bool | None = Field(None, alias="is_published")
    last_editor: UserFields | None = Field(None, alias="last_editor")
    linked_documents: list[CanvasFields] | None = Field(None, alias="linked_documents")
    name: str | None = Field(None, alias="name")
    owner: PageFields | None = Field(None, alias="owner")
    property_list: list[str] | None = Field(None, alias="property_list")
    source_template: CanvasTemplateFields | None = Field(None, alias="source_template")
    store_url: str | None = Field(None, alias="store_url")
    style_list: list[str] | None = Field(None, alias="style_list")
    tags: list[str] | None = Field(None, alias="tags")
    ui_property_list: list[str] | None = Field(None, alias="ui_property_list")
    unused_body_elements: list[dict[str, Any]] | None = Field(None, alias="unused_body_elements")
    update_time: int | None = Field(None, alias="update_time")
    use_retailer_item_ids: bool | None = Field(None, alias="use_retailer_item_ids")


class AdConversionValuesFields(BaseModel):
    """Pydantic model for AdConversionValues fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adgroup_id: str | None = Field(None, alias="adgroup_id")
    campaign_id: str | None = Field(None, alias="campaign_id")
    values: dict[str, Any] | None = Field(None, alias="values")


class CatalogContentVersionConfigFields(BaseModel):
    """Pydantic model for CatalogContentVersionConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    version: str | None = Field(None, alias="version")


class CustomConversionStatsResultFields(BaseModel):
    """Pydantic model for CustomConversionStatsResult fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    aggregation: dict[str, Any] | None = Field(None, alias="aggregation")
    data: list[dict[str, Any]] | None = Field(None, alias="data")
    timestamp: datetime | None = Field(None, alias="timestamp")


class ShadowIGUserCatalogProductSearchFields(BaseModel):
    """Pydantic model for ShadowIGUserCatalogProductSearch fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    image_url: str | None = Field(None, alias="image_url")
    is_checkout_flow: bool | None = Field(None, alias="is_checkout_flow")
    merchant_id: int | None = Field(None, alias="merchant_id")
    product_id: int | None = Field(None, alias="product_id")
    product_name: str | None = Field(None, alias="product_name")
    product_variants: list[ShadowIGUserCatalogProductVariantFields] | None = Field(
        None, alias="product_variants"
    )
    retailer_id: str | None = Field(None, alias="retailer_id")
    review_status: str | None = Field(None, alias="review_status")


class AdCreativeHouseShopsAdsSellerContentFields(BaseModel):
    """Pydantic model for AdCreativeHouseShopsAdsSellerContent fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pass  # No fields defined


class ProductVariantFields(BaseModel):
    """Pydantic model for ProductVariant fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    label: str | None = Field(None, alias="label")
    options: list[str] | None = Field(None, alias="options")
    product_field: str | None = Field(None, alias="product_field")


class McomInvoiceStatusFields(BaseModel):
    """Pydantic model for McomInvoiceStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    bank_account_number: str | None = Field(None, alias="bank_account_number")
    bank_code: str | None = Field(None, alias="bank_code")
    invoice_id: str | None = Field(None, alias="invoice_id")
    invoice_status: str | None = Field(None, alias="invoice_status")
    page_id: str | None = Field(None, alias="page_id")
    payment_method: str | None = Field(None, alias="payment_method")
    payment_type: str | None = Field(None, alias="payment_type")
    payout_amount: dict[str, Any] | None = Field(None, alias="payout_amount")
    slip_verification_error: str | None = Field(None, alias="slip_verification_error")
    slip_verification_status: str | None = Field(None, alias="slip_verification_status")
    transaction_fee: dict[str, Any] | None = Field(None, alias="transaction_fee")
    transfer_slip: str | None = Field(None, alias="transfer_slip")


class DeliveryInfoFields(BaseModel):
    """Pydantic model for DeliveryInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    active_accelerated_campaign_count: int | None = Field(
        None, alias="active_accelerated_campaign_count"
    )
    active_day_parted_campaign_count: int | None = Field(
        None, alias="active_day_parted_campaign_count"
    )
    ad_penalty_map: list[dict[str, bool]] | None = Field(None, alias="ad_penalty_map")
    are_all_daily_budgets_spent: bool | None = Field(None, alias="are_all_daily_budgets_spent")
    credit_needed_ads_count: int | None = Field(None, alias="credit_needed_ads_count")
    eligible_for_delivery_insights: bool | None = Field(
        None, alias="eligible_for_delivery_insights"
    )
    end_time: datetime | None = Field(None, alias="end_time")
    has_account_hit_spend_limit: bool | None = Field(None, alias="has_account_hit_spend_limit")
    has_campaign_group_hit_spend_limit: bool | None = Field(
        None, alias="has_campaign_group_hit_spend_limit"
    )
    has_no_active_ads: bool | None = Field(None, alias="has_no_active_ads")
    has_no_ads: bool | None = Field(None, alias="has_no_ads")
    inactive_ads_count: int | None = Field(None, alias="inactive_ads_count")
    inactive_campaign_count: int | None = Field(None, alias="inactive_campaign_count")
    is_account_closed: bool | None = Field(None, alias="is_account_closed")
    is_account_disabled: bool | None = Field(None, alias="is_account_disabled")
    is_ad_uneconomical: bool | None = Field(None, alias="is_ad_uneconomical")
    is_adfarm_penalized: bool | None = Field(None, alias="is_adfarm_penalized")
    is_adgroup_partially_rejected: bool | None = Field(None, alias="is_adgroup_partially_rejected")
    is_campaign_accelerated: bool | None = Field(None, alias="is_campaign_accelerated")
    is_campaign_completed: bool | None = Field(None, alias="is_campaign_completed")
    is_campaign_day_parted: bool | None = Field(None, alias="is_campaign_day_parted")
    is_campaign_disabled: bool | None = Field(None, alias="is_campaign_disabled")
    is_campaign_group_disabled: bool | None = Field(None, alias="is_campaign_group_disabled")
    is_clickbait_penalized: bool | None = Field(None, alias="is_clickbait_penalized")
    is_daily_budget_spent: bool | None = Field(None, alias="is_daily_budget_spent")
    is_engagement_bait_penalized: bool | None = Field(None, alias="is_engagement_bait_penalized")
    is_lqwe_penalized: bool | None = Field(None, alias="is_lqwe_penalized")
    is_reach_and_frequency_misconfigured: bool | None = Field(
        None, alias="is_reach_and_frequency_misconfigured"
    )
    is_sensationalism_penalized: bool | None = Field(None, alias="is_sensationalism_penalized")
    is_split_test_active: bool | None = Field(None, alias="is_split_test_active")
    is_split_test_valid: bool | None = Field(None, alias="is_split_test_valid")
    lift_study_time_period: str | None = Field(None, alias="lift_study_time_period")
    needs_credit: bool | None = Field(None, alias="needs_credit")
    needs_tax_number: bool | None = Field(None, alias="needs_tax_number")
    non_deleted_ads_count: int | None = Field(None, alias="non_deleted_ads_count")
    not_delivering_campaign_count: int | None = Field(None, alias="not_delivering_campaign_count")
    pending_ads_count: int | None = Field(None, alias="pending_ads_count")
    reach_frequency_campaign_underdelivery_reason: str | None = Field(
        None, alias="reach_frequency_campaign_underdelivery_reason"
    )
    rejected_ads_count: int | None = Field(None, alias="rejected_ads_count")
    start_time: datetime | None = Field(None, alias="start_time")
    status: str | None = Field(None, alias="status")
    text_penalty_level: str | None = Field(None, alias="text_penalty_level")


class EventSourceGroupFields(BaseModel):
    """Pydantic model for EventSourceGroup fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    business: BusinessFields | None = Field(None, alias="business")
    event_sources: list[ExternalEventSourceFields] | None = Field(None, alias="event_sources")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")


class AnalyticsPlatformMetricsConfigFields(BaseModel):
    """Pydantic model for AnalyticsPlatformMetricsConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    has_a2u: bool | None = Field(None, alias="has_a2u")
    has_api_calls: bool | None = Field(None, alias="has_api_calls")
    has_app_invites: bool | None = Field(None, alias="has_app_invites")
    has_fb_login: bool | None = Field(None, alias="has_fb_login")
    has_game_requests: bool | None = Field(None, alias="has_game_requests")
    has_payments: bool | None = Field(None, alias="has_payments")
    has_referrals: bool | None = Field(None, alias="has_referrals")
    has_stories: bool | None = Field(None, alias="has_stories")
    has_structured_requests: bool | None = Field(None, alias="has_structured_requests")


class AdStudyObjectiveOffsiteDatasetsFields(BaseModel):
    """Pydantic model for AdStudyObjectiveOffsiteDatasets fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    event_names: list[str] | None = Field(None, alias="event_names")
    id: str | None = Field(None, alias="id")


class BrandSafetyCampaignConfigFields(BaseModel):
    """Pydantic model for BrandSafetyCampaignConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    comment_moderation_filter: str | None = Field(None, alias="comment_moderation_filter")


class PlatformImageSourceFields(BaseModel):
    """Pydantic model for PlatformImageSource fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    height: int | None = Field(None, alias="height")
    source: str | None = Field(None, alias="source")
    width: int | None = Field(None, alias="width")


class PageMessageResponsivenessMetricsFields(BaseModel):
    """Pydantic model for PageMessageResponsivenessMetrics fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    is_very_responsive: bool | None = Field(None, alias="is_very_responsive")
    response_rate: float | None = Field(None, alias="response_rate")
    response_time: float | None = Field(None, alias="response_time")


class PageCTXMessagingFeatureLimitFields(BaseModel):
    """Pydantic model for PageCTXMessagingFeatureLimit fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    messaging_feature_limit_duration: int | None = Field(
        None, alias="messaging_feature_limit_duration"
    )
    messaging_feature_limit_type: str | None = Field(None, alias="messaging_feature_limit_type")
    messaging_violation_type: str | None = Field(None, alias="messaging_violation_type")


class PersonalAdsPersonaFields(BaseModel):
    """Pydantic model for PersonalAdsPersona fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    email: str | None = Field(None, alias="email")
    first_name: str | None = Field(None, alias="first_name")
    id: str | None = Field(None, alias="id")
    last_name: str | None = Field(None, alias="last_name")
    pending_email: str | None = Field(None, alias="pending_email")


class AdAccountTargetingUnifiedFields(BaseModel):
    """Pydantic model for AdAccountTargetingUnified fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    audience_size_lower_bound: int | None = Field(None, alias="audience_size_lower_bound")
    audience_size_upper_bound: int | None = Field(None, alias="audience_size_upper_bound")
    conversion_lift: float | None = Field(None, alias="conversion_lift")
    description: str | None = Field(None, alias="description")
    id: str | None = Field(None, alias="id")
    img: str | None = Field(None, alias="img")
    info: str | None = Field(None, alias="info")
    info_title: str | None = Field(None, alias="info_title")
    is_recommendation: bool | None = Field(None, alias="is_recommendation")
    key: str | None = Field(None, alias="key")
    link: str | None = Field(None, alias="link")
    name: str | None = Field(None, alias="name")
    parent: str | None = Field(None, alias="parent")
    partner: str | None = Field(None, alias="partner")
    path: list[str] | None = Field(None, alias="path")
    performance_rating: int | None = Field(None, alias="performance_rating")
    raw_name: str | None = Field(None, alias="raw_name")
    recommendation_model: str | None = Field(None, alias="recommendation_model")
    search_interest_id: str | None = Field(None, alias="search_interest_id")
    source: str | None = Field(None, alias="source")
    spend: float | None = Field(None, alias="spend")
    type: str | None = Field(None, alias="type")
    valid: bool | None = Field(None, alias="valid")


class DeliveryCheckFields(BaseModel):
    """Pydantic model for DeliveryCheck fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    check_name: str | None = Field(None, alias="check_name")
    description: str | None = Field(None, alias="description")
    extra_info: DeliveryCheckExtraInfoFields | None = Field(None, alias="extra_info")
    summary: str | None = Field(None, alias="summary")


class SlicedEventSourceGroupFields(BaseModel):
    """Pydantic model for SlicedEventSourceGroup fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    event_source_group: EventSourceGroupFields | None = Field(None, alias="event_source_group")
    filter: str | None = Field(None, alias="filter")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class CustomAudienceSessionFields(BaseModel):
    """Pydantic model for CustomAudienceSession fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    end_time: str | None = Field(None, alias="end_time")
    num_invalid_entries: str | None = Field(None, alias="num_invalid_entries")
    num_matched: str | None = Field(None, alias="num_matched")
    num_received: str | None = Field(None, alias="num_received")
    progress: str | None = Field(None, alias="progress")
    session_id: str | None = Field(None, alias="session_id")
    stage: str | None = Field(None, alias="stage")
    start_time: str | None = Field(None, alias="start_time")


class CanvasPreviewFields(BaseModel):
    """Pydantic model for CanvasPreview fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    body: str | None = Field(None, alias="body")


class DACheckFields(BaseModel):
    """Pydantic model for DACheck fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    action_uri: str | None = Field(None, alias="action_uri")
    description: str | None = Field(None, alias="description")
    key: str | None = Field(None, alias="key")
    result: str | None = Field(None, alias="result")
    title: str | None = Field(None, alias="title")
    user_message: str | None = Field(None, alias="user_message")


class AudienceSharingAccountValidFields(BaseModel):
    """Pydantic model for AudienceSharingAccountValid fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    account_type: str | None = Field(None, alias="account_type")
    business_id: str | None = Field(None, alias="business_id")
    business_name: str | None = Field(None, alias="business_name")
    can_ad_account_use_lookalike_container: bool | None = Field(
        None, alias="can_ad_account_use_lookalike_container"
    )
    sharing_agreement_status: int | None = Field(None, alias="sharing_agreement_status")


class AdsPixelSignalsIWLFeedbackNuxFields(BaseModel):
    """Pydantic model for AdsPixelSignalsIWLFeedbackNux fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    should_ask_to_rate: bool | None = Field(None, alias="should_ask_to_rate")


class EventExternalTicketInfoFields(BaseModel):
    """Pydantic model for EventExternalTicketInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    max_sales_price: CurrencyAmountFields | None = Field(None, alias="max_sales_price")
    min_sales_price: CurrencyAmountFields | None = Field(None, alias="min_sales_price")
    sales_status: str | None = Field(None, alias="sales_status")


class ResearchPollStudyFields(BaseModel):
    """Pydantic model for ResearchPollStudy fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account: AdAccountFields | None = Field(None, alias="account")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class UserContextFields(BaseModel):
    """Pydantic model for UserContext fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")


class ALMEndAdvertiserInfoFields(BaseModel):
    """Pydantic model for ALMEndAdvertiserInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    estimated_ad_budget: int | None = Field(None, alias="estimated_ad_budget")
    id: str | None = Field(None, alias="id")
    parent_advertiser_id: str | None = Field(None, alias="parent_advertiser_id")
    parent_advertiser_name: str | None = Field(None, alias="parent_advertiser_name")
    tag: list[str] | None = Field(None, alias="tag")


class PremiumMusicVideoFields(BaseModel):
    """Pydantic model for PremiumMusicVideo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    creation_time: str | None = Field(None, alias="creation_time")
    cross_post_videos: list[dict[str, Any]] | None = Field(None, alias="cross_post_videos")
    eligible_cross_post_pages: list[dict[str, Any]] | None = Field(
        None, alias="eligible_cross_post_pages"
    )
    id: str | None = Field(None, alias="id")
    preferred_video_thumbnail_image_uri: str | None = Field(
        None, alias="preferred_video_thumbnail_image_uri"
    )
    premium_music_video_metadata: dict[str, Any] | None = Field(
        None, alias="premium_music_video_metadata"
    )
    scheduled_publish_time: int | None = Field(None, alias="scheduled_publish_time")
    title: str | None = Field(None, alias="title")


class PersonaFields(BaseModel):
    """Pydantic model for Persona fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    profile_picture_url: str | None = Field(None, alias="profile_picture_url")


class CreditPartitionActionOptionsFields(BaseModel):
    """Pydantic model for CreditPartitionActionOptions fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    liability_type: dict[str, Any] | None = Field(None, alias="liability_type")
    partition_type: dict[str, Any] | None = Field(None, alias="partition_type")
    send_bill_to: dict[str, Any] | None = Field(None, alias="send_bill_to")


class CanvasBodyElementFields(BaseModel):
    """Pydantic model for CanvasBodyElement fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    element: dict[str, Any] | None = Field(None, alias="element")


class AdAccountSubsidyAmountDetailsFields(BaseModel):
    """Pydantic model for AdAccountSubsidyAmountDetails fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    entered_amount: CurrencyAmountFields | None = Field(None, alias="entered_amount")
    fee_amount: CurrencyAmountFields | None = Field(None, alias="fee_amount")
    total_amount: CurrencyAmountFields | None = Field(None, alias="total_amount")


class AdCampaignDeliveryStatsFields(BaseModel):
    """Pydantic model for AdCampaignDeliveryStats fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    bid_recommendation: int | None = Field(None, alias="bid_recommendation")
    current_average_cost: float | None = Field(None, alias="current_average_cost")
    last_significant_edit_ts: int | None = Field(None, alias="last_significant_edit_ts")
    learning_stage_exit_info: dict[str, Any] | None = Field(None, alias="learning_stage_exit_info")
    learning_stage_info: AdCampaignLearningStageInfoFields | None = Field(
        None, alias="learning_stage_info"
    )
    unsupported_features: (
        list[dict[str, AdCampaignDeliveryStatsUnsupportedReasonsFields]] | None
    ) = Field(None, alias="unsupported_features")


class InstagramInsightsValueFields(BaseModel):
    """Pydantic model for InstagramInsightsValue fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    end_time: datetime | None = Field(None, alias="end_time")
    value: dict[str, Any] | None = Field(None, alias="value")


class FantasyGameFields(BaseModel):
    """Pydantic model for FantasyGame fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class IGVideoCopyrightCheckStatusFields(BaseModel):
    """Pydantic model for IGVideoCopyrightCheckStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    matches_found: bool | None = Field(None, alias="matches_found")
    status: str | None = Field(None, alias="status")


class McomPayoutsFields(BaseModel):
    """Pydantic model for McomPayouts fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    number_of_orders: int | None = Field(None, alias="number_of_orders")
    order_ids: list[str] | None = Field(None, alias="order_ids")
    payout_amount: dict[str, Any] | None = Field(None, alias="payout_amount")
    payout_provider_reference_id: str | None = Field(None, alias="payout_provider_reference_id")
    payout_status: str | None = Field(None, alias="payout_status")
    payout_time: int | None = Field(None, alias="payout_time")
    provider: str | None = Field(None, alias="provider")


class CustomAudienceFields(BaseModel):
    """Pydantic model for CustomAudience fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    approximate_count_lower_bound: int | None = Field(None, alias="approximate_count_lower_bound")
    approximate_count_upper_bound: int | None = Field(None, alias="approximate_count_upper_bound")
    customer_file_source: str | None = Field(None, alias="customer_file_source")
    data_source: CustomAudienceDataSourceFields | None = Field(None, alias="data_source")
    data_source_types: str | None = Field(None, alias="data_source_types")
    datafile_custom_audience_uploading_status: str | None = Field(
        None, alias="datafile_custom_audience_uploading_status"
    )
    delete_time: int | None = Field(None, alias="delete_time")
    delivery_status: CustomAudienceStatusFields | None = Field(None, alias="delivery_status")
    description: str | None = Field(None, alias="description")
    excluded_custom_audiences: list[CustomAudienceFields] | None = Field(
        None, alias="excluded_custom_audiences"
    )
    external_event_source: AdsPixelFields | None = Field(None, alias="external_event_source")
    household_audience: int | None = Field(None, alias="household_audience")
    id: str | None = Field(None, alias="id")
    included_custom_audiences: list[CustomAudienceFields] | None = Field(
        None, alias="included_custom_audiences"
    )
    is_eligible_for_sac_campaigns: bool | None = Field(None, alias="is_eligible_for_sac_campaigns")
    is_household: bool | None = Field(None, alias="is_household")
    is_snapshot: bool | None = Field(None, alias="is_snapshot")
    is_value_based: bool | None = Field(None, alias="is_value_based")
    lookalike_audience_ids: list[str] | None = Field(None, alias="lookalike_audience_ids")
    lookalike_spec: LookalikeSpecFields | None = Field(None, alias="lookalike_spec")
    name: str | None = Field(None, alias="name")
    operation_status: CustomAudienceStatusFields | None = Field(None, alias="operation_status")
    opt_out_link: str | None = Field(None, alias="opt_out_link")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")
    page_deletion_marked_delete_time: int | None = Field(
        None, alias="page_deletion_marked_delete_time"
    )
    permission_for_actions: AudiencePermissionForActionsFields | None = Field(
        None, alias="permission_for_actions"
    )
    pixel_id: str | None = Field(None, alias="pixel_id")
    regulated_audience_spec: LookalikeSpecFields | None = Field(
        None, alias="regulated_audience_spec"
    )
    retention_days: int | None = Field(None, alias="retention_days")
    rev_share_policy_id: int | None = Field(None, alias="rev_share_policy_id")
    rule: str | None = Field(None, alias="rule")
    rule_aggregation: str | None = Field(None, alias="rule_aggregation")
    rule_v2: str | None = Field(None, alias="rule_v2")
    seed_audience: int | None = Field(None, alias="seed_audience")
    sharing_status: CustomAudienceSharingStatusFields | None = Field(None, alias="sharing_status")
    subtype: str | None = Field(None, alias="subtype")
    time_content_updated: int | None = Field(None, alias="time_content_updated")
    time_created: int | None = Field(None, alias="time_created")
    time_updated: int | None = Field(None, alias="time_updated")


class AdAccountReachEstimateFields(BaseModel):
    """Pydantic model for AdAccountReachEstimate fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    estimate_ready: bool | None = Field(None, alias="estimate_ready")
    users_lower_bound: int | None = Field(None, alias="users_lower_bound")
    users_upper_bound: int | None = Field(None, alias="users_upper_bound")


class AdgroupMetadataFields(BaseModel):
    """Pydantic model for AdgroupMetadata fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_standard_enhancements_edit_source: int | None = Field(
        None, alias="ad_standard_enhancements_edit_source"
    )
    adgroup_creation_source: str | None = Field(None, alias="adgroup_creation_source")
    adgroup_edit_source: str | None = Field(None, alias="adgroup_edit_source")
    carousel_style: str | None = Field(None, alias="carousel_style")
    carousel_with_static_card_style: str | None = Field(
        None, alias="carousel_with_static_card_style"
    )


class PrivacyOptionFields(BaseModel):
    """Pydantic model for PrivacyOption fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    description: str | None = Field(None, alias="description")
    icon_src: str | None = Field(None, alias="icon_src")
    id: str | None = Field(None, alias="id")
    is_currently_selected: bool | None = Field(None, alias="is_currently_selected")
    type: str | None = Field(None, alias="type")
    user_id: str | None = Field(None, alias="user_id")


class FranchiseProgramFields(BaseModel):
    """Pydantic model for FranchiseProgram fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    business_asset_group: BusinessAssetGroupFields | None = Field(
        None, alias="business_asset_group"
    )
    creator_business: BusinessFields | None = Field(None, alias="creator_business")
    description: str | None = Field(None, alias="description")
    end_date: datetime | None = Field(None, alias="end_date")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    program_access_type: str | None = Field(None, alias="program_access_type")
    program_approval_type: str | None = Field(None, alias="program_approval_type")
    program_image_link: str | None = Field(None, alias="program_image_link")
    program_url: str | None = Field(None, alias="program_url")
    shared_custom_audience: CustomAudienceFields | None = Field(
        None, alias="shared_custom_audience"
    )
    start_date: datetime | None = Field(None, alias="start_date")


class AdsReportBuilderSavedReportFields(BaseModel):
    """Pydantic model for AdsReportBuilderSavedReport fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    action_report_time: str | None = Field(None, alias="action_report_time")
    ad_account_id: str | None = Field(None, alias="ad_account_id")
    attribution_windows: list[str] | None = Field(None, alias="attribution_windows")
    comparison_date_interval: dict[str, Any] | None = Field(None, alias="comparison_date_interval")
    creation_source: str | None = Field(None, alias="creation_source")
    creation_time: datetime | None = Field(None, alias="creation_time")
    currency: str | None = Field(None, alias="currency")
    date_interval: dict[str, Any] | None = Field(None, alias="date_interval")
    date_preset: str | None = Field(None, alias="date_preset")
    default_attribution_windows: list[str] | None = Field(None, alias="default_attribution_windows")
    dimension_groups: list[list[str]] | None = Field(None, alias="dimension_groups")
    dimensions: list[str] | None = Field(None, alias="dimensions")
    filtering: dict[str, Any] | None = Field(None, alias="filtering")
    formatting: list[dict[str, list[dict[str, Any]]]] | None = Field(None, alias="formatting")
    id: str | None = Field(None, alias="id")
    last_access_by: ProfileFields | None = Field(None, alias="last_access_by")
    last_access_time: datetime | None = Field(None, alias="last_access_time")
    last_report_snapshot_id: str | None = Field(None, alias="last_report_snapshot_id")
    last_report_snapshot_time: datetime | None = Field(None, alias="last_report_snapshot_time")
    last_shared_report_expiration: datetime | None = Field(
        None, alias="last_shared_report_expiration"
    )
    limit: int | None = Field(None, alias="limit")
    locked_dimensions: int | None = Field(None, alias="locked_dimensions")
    metrics: list[str] | None = Field(None, alias="metrics")
    report_name: str | None = Field(None, alias="report_name")
    report_snapshot_async_percent_completion: int | None = Field(
        None, alias="report_snapshot_async_percent_completion"
    )
    report_snapshot_async_status: str | None = Field(None, alias="report_snapshot_async_status")
    schedule_frequency: str | None = Field(None, alias="schedule_frequency")
    scope: str | None = Field(None, alias="scope")
    show_deprecate_aw_banner: bool | None = Field(None, alias="show_deprecate_aw_banner")
    sorting: list[dict[str, Any]] | None = Field(None, alias="sorting")
    start_date: str | None = Field(None, alias="start_date")
    status: str | None = Field(None, alias="status")
    subscribers: list[str] | None = Field(None, alias="subscribers")
    update_by: ProfileFields | None = Field(None, alias="update_by")
    update_time: datetime | None = Field(None, alias="update_time")
    user: ProfileFields | None = Field(None, alias="user")
    user_dimensions: list[str] | None = Field(None, alias="user_dimensions")
    user_metrics: list[str] | None = Field(None, alias="user_metrics")
    view_type: str | None = Field(None, alias="view_type")


class AnalyticsFunnelQueryResultFields(BaseModel):
    """Pydantic model for AnalyticsFunnelQueryResult fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    query_id: str | None = Field(None, alias="query_id")
    status: str | None = Field(None, alias="status")


class ProductCatalogUserActionsFields(BaseModel):
    """Pydantic model for ProductCatalogUserActions fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    actions: list[str] | None = Field(None, alias="actions")


class AdgroupIssuesInfoFields(BaseModel):
    """Pydantic model for AdgroupIssuesInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    error_code: int | None = Field(None, alias="error_code")
    error_message: str | None = Field(None, alias="error_message")
    error_summary: str | None = Field(None, alias="error_summary")
    error_type: str | None = Field(None, alias="error_type")
    level: str | None = Field(None, alias="level")
    mid: str | None = Field(None, alias="mid")


class ProductCatalogImageSettingsOperationFields(BaseModel):
    """Pydantic model for ProductCatalogImageSettingsOperation fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    transformation_type: str | None = Field(None, alias="transformation_type")


class IGUserExportForCAMFields(BaseModel):
    """Pydantic model for IGUserExportForCAM fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    age_bucket: str | None = Field(None, alias="age_bucket")
    biography: str | None = Field(None, alias="biography")
    country: str | None = Field(None, alias="country")
    email: str | None = Field(None, alias="email")
    gender: str | None = Field(None, alias="gender")
    id: str | None = Field(None, alias="id")
    is_account_verified: bool | None = Field(None, alias="is_account_verified")
    is_paid_partnership_messages_enabled: bool | None = Field(
        None, alias="is_paid_partnership_messages_enabled"
    )
    messaging_id: str | None = Field(None, alias="messaging_id")
    onboarded_status: bool | None = Field(None, alias="onboarded_status")
    portfolio_url: str | None = Field(None, alias="portfolio_url")
    username: str | None = Field(None, alias="username")


class AudioAssetFields(BaseModel):
    """Pydantic model for AudioAsset fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    all_ddex_featured_artists: str | None = Field(None, alias="all_ddex_featured_artists")
    all_ddex_main_artists: str | None = Field(None, alias="all_ddex_main_artists")
    audio_cluster_id: str | None = Field(None, alias="audio_cluster_id")
    cover_image_source: str | None = Field(None, alias="cover_image_source")
    display_artist: str | None = Field(None, alias="display_artist")
    download_hd_url: str | None = Field(None, alias="download_hd_url")
    download_sd_url: str | None = Field(None, alias="download_sd_url")
    duration_in_ms: int | None = Field(None, alias="duration_in_ms")
    freeform_genre: str | None = Field(None, alias="freeform_genre")
    grid: str | None = Field(None, alias="grid")
    id: str | None = Field(None, alias="id")
    is_test: bool | None = Field(None, alias="is_test")
    original_release_date: datetime | None = Field(None, alias="original_release_date")
    owner: PageFields | None = Field(None, alias="owner")
    parental_warning_type: str | None = Field(None, alias="parental_warning_type")
    subtitle: str | None = Field(None, alias="subtitle")
    title: str | None = Field(None, alias="title")
    title_with_featured_artists: str | None = Field(None, alias="title_with_featured_artists")
    upc: str | None = Field(None, alias="upc")


class AdAccountTrackingDataFields(BaseModel):
    """Pydantic model for AdAccountTrackingData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    tracking_specs: ConversionActionQueryFields | None = Field(None, alias="tracking_specs")


class ReachFrequencyAdFormatFields(BaseModel):
    """Pydantic model for ReachFrequencyAdFormat fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    details: dict[str, Any] | None = Field(None, alias="details")
    type: str | None = Field(None, alias="type")


class WhatsAppBusinessAccountFields(BaseModel):
    """Pydantic model for WhatsAppBusinessAccount fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_review_status: str | None = Field(None, alias="account_review_status")
    analytics: dict[str, Any] | None = Field(None, alias="analytics")
    auth_international_rate_eligibility: dict[str, Any] | None = Field(
        None, alias="auth_international_rate_eligibility"
    )
    business_verification_status: dict[str, Any] | None = Field(
        None, alias="business_verification_status"
    )
    country: str | None = Field(None, alias="country")
    creation_time: int | None = Field(None, alias="creation_time")
    currency: str | None = Field(None, alias="currency")
    health_status: WhatsAppBusinessHealthStatusForMessageSendFields | None = Field(
        None, alias="health_status"
    )
    id: str | None = Field(None, alias="id")
    is_enabled_for_insights: bool | None = Field(None, alias="is_enabled_for_insights")
    is_shared_with_partners: bool | None = Field(None, alias="is_shared_with_partners")
    linked_commerce_account: CommerceMerchantSettingsFields | None = Field(
        None, alias="linked_commerce_account"
    )
    marketing_messages_lite_api_status: str | None = Field(
        None, alias="marketing_messages_lite_api_status"
    )
    message_template_namespace: str | None = Field(None, alias="message_template_namespace")
    name: str | None = Field(None, alias="name")
    on_behalf_of_business_info: dict[str, Any] | None = Field(
        None, alias="on_behalf_of_business_info"
    )
    owner_business: BusinessFields | None = Field(None, alias="owner_business")
    owner_business_info: dict[str, Any] | None = Field(None, alias="owner_business_info")
    ownership_type: str | None = Field(None, alias="ownership_type")
    primary_business_location: str | None = Field(None, alias="primary_business_location")
    primary_funding_id: str | None = Field(None, alias="primary_funding_id")
    purchase_order_number: str | None = Field(None, alias="purchase_order_number")
    status: str | None = Field(None, alias="status")
    timezone_id: str | None = Field(None, alias="timezone_id")


class ExtendedCreditEmailFields(BaseModel):
    """Pydantic model for ExtendedCreditEmail fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    email: str | None = Field(None, alias="email")
    id: str | None = Field(None, alias="id")


class AdMonetizationPropertyFields(BaseModel):
    """Pydantic model for AdMonetizationProperty fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")


class BrandedContentShadowIGMediaIDFields(BaseModel):
    """Pydantic model for BrandedContentShadowIGMediaID fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    eligibility_errors: list[str] | None = Field(None, alias="eligibility_errors")
    has_permission_for_partnership_ad: bool | None = Field(
        None, alias="has_permission_for_partnership_ad"
    )
    id: str | None = Field(None, alias="id")
    owner_id: str | None = Field(None, alias="owner_id")
    permalink: str | None = Field(None, alias="permalink")
    recommended_campaign_objectives: list[str] | None = Field(
        None, alias="recommended_campaign_objectives"
    )


class ReachFrequencyEstimatesCurveFields(BaseModel):
    """Pydantic model for ReachFrequencyEstimatesCurve fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    budget: list[int] | None = Field(None, alias="budget")
    conversion: list[int] | None = Field(None, alias="conversion")
    impression: list[int] | None = Field(None, alias="impression")
    interpolated_reach: float | None = Field(None, alias="interpolated_reach")
    num_points: int | None = Field(None, alias="num_points")
    raw_impression: list[int] | None = Field(None, alias="raw_impression")
    raw_reach: list[int] | None = Field(None, alias="raw_reach")
    reach: list[int] | None = Field(None, alias="reach")


class VehicleFields(BaseModel):
    """Pydantic model for Vehicle fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    address: dict[str, Any] | None = Field(None, alias="address")
    applinks: CatalogItemAppLinksFields | None = Field(None, alias="applinks")
    availability: str | None = Field(None, alias="availability")
    availability_circle_radius: float | None = Field(None, alias="availability_circle_radius")
    availability_circle_radius_unit: str | None = Field(
        None, alias="availability_circle_radius_unit"
    )
    body_style: str | None = Field(None, alias="body_style")
    category_specific_fields: CatalogSubVerticalListFields | None = Field(
        None, alias="category_specific_fields"
    )
    condition: str | None = Field(None, alias="condition")
    currency: str | None = Field(None, alias="currency")
    custom_label_0: str | None = Field(None, alias="custom_label_0")
    custom_label_1: str | None = Field(None, alias="custom_label_1")
    custom_label_2: str | None = Field(None, alias="custom_label_2")
    custom_label_3: str | None = Field(None, alias="custom_label_3")
    custom_label_4: str | None = Field(None, alias="custom_label_4")
    custom_number_0: int | None = Field(None, alias="custom_number_0")
    custom_number_1: int | None = Field(None, alias="custom_number_1")
    custom_number_2: int | None = Field(None, alias="custom_number_2")
    custom_number_3: int | None = Field(None, alias="custom_number_3")
    custom_number_4: int | None = Field(None, alias="custom_number_4")
    date_first_on_lot: str | None = Field(None, alias="date_first_on_lot")
    dealer_communication_channel: str | None = Field(None, alias="dealer_communication_channel")
    dealer_email: str | None = Field(None, alias="dealer_email")
    dealer_id: str | None = Field(None, alias="dealer_id")
    dealer_name: str | None = Field(None, alias="dealer_name")
    dealer_phone: str | None = Field(None, alias="dealer_phone")
    dealer_privacy_policy_url: str | None = Field(None, alias="dealer_privacy_policy_url")
    description: str | None = Field(None, alias="description")
    drivetrain: str | None = Field(None, alias="drivetrain")
    exterior_color: str | None = Field(None, alias="exterior_color")
    fb_page_id: PageFields | None = Field(None, alias="fb_page_id")
    features: list[dict[str, Any]] | None = Field(None, alias="features")
    fuel_type: str | None = Field(None, alias="fuel_type")
    id: str | None = Field(None, alias="id")
    image_fetch_status: dict[str, Any] | None = Field(None, alias="image_fetch_status")
    images: list[str] | None = Field(None, alias="images")
    interior_color: str | None = Field(None, alias="interior_color")
    legal_disclosure_impressum_url: str | None = Field(None, alias="legal_disclosure_impressum_url")
    make: str | None = Field(None, alias="make")
    mileage: dict[str, Any] | None = Field(None, alias="mileage")
    model: str | None = Field(None, alias="model")
    previous_currency: str | None = Field(None, alias="previous_currency")
    previous_price: str | None = Field(None, alias="previous_price")
    price: str | None = Field(None, alias="price")
    product_priority_0: float | None = Field(None, alias="product_priority_0")
    product_priority_1: float | None = Field(None, alias="product_priority_1")
    product_priority_2: float | None = Field(None, alias="product_priority_2")
    product_priority_3: float | None = Field(None, alias="product_priority_3")
    product_priority_4: float | None = Field(None, alias="product_priority_4")
    sale_currency: str | None = Field(None, alias="sale_currency")
    sale_price: str | None = Field(None, alias="sale_price")
    sanitized_images: list[str] | None = Field(None, alias="sanitized_images")
    state_of_vehicle: str | None = Field(None, alias="state_of_vehicle")
    tags: list[str] | None = Field(None, alias="tags")
    title: str | None = Field(None, alias="title")
    transmission: str | None = Field(None, alias="transmission")
    trim: str | None = Field(None, alias="trim")
    unit_price: dict[str, Any] | None = Field(None, alias="unit_price")
    url: str | None = Field(None, alias="url")
    vehicle_id: str | None = Field(None, alias="vehicle_id")
    vehicle_registration_plate: str | None = Field(None, alias="vehicle_registration_plate")
    vehicle_specifications: list[dict[str, Any]] | None = Field(
        None, alias="vehicle_specifications"
    )
    vehicle_type: str | None = Field(None, alias="vehicle_type")
    vin: str | None = Field(None, alias="vin")
    visibility: dict[str, Any] | None = Field(None, alias="visibility")
    year: int | None = Field(None, alias="year")


class WhatsAppPaymentCapabilitiesFields(BaseModel):
    """Pydantic model for WhatsAppPaymentCapabilities fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    is_enabled: bool | None = Field(None, alias="is_enabled")
    payment_capability_details: list[dict[str, Any]] | None = Field(
        None, alias="payment_capability_details"
    )


class AdPromotedObjectFields(BaseModel):
    """Pydantic model for AdPromotedObject fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    application_id: str | None = Field(None, alias="application_id")
    boosted_product_set_id: str | None = Field(None, alias="boosted_product_set_id")
    conversion_goal_id: str | None = Field(None, alias="conversion_goal_id")
    custom_conversion_id: str | None = Field(None, alias="custom_conversion_id")
    custom_event_str: str | None = Field(None, alias="custom_event_str")
    custom_event_type: dict[str, Any] | None = Field(None, alias="custom_event_type")
    event_id: str | None = Field(None, alias="event_id")
    fundraiser_campaign_id: str | None = Field(None, alias="fundraiser_campaign_id")
    lead_ads_custom_event_str: str | None = Field(None, alias="lead_ads_custom_event_str")
    lead_ads_custom_event_type: dict[str, Any] | None = Field(
        None, alias="lead_ads_custom_event_type"
    )
    lead_ads_form_event_source_type: str | None = Field(
        None, alias="lead_ads_form_event_source_type"
    )
    lead_ads_offsite_conversion_type: str | None = Field(
        None, alias="lead_ads_offsite_conversion_type"
    )
    mcme_conversion_id: str | None = Field(None, alias="mcme_conversion_id")
    object_store_url: str | None = Field(None, alias="object_store_url")
    offer_id: str | None = Field(None, alias="offer_id")
    offline_conversion_data_set_id: str | None = Field(None, alias="offline_conversion_data_set_id")
    offsite_conversion_event_id: str | None = Field(None, alias="offsite_conversion_event_id")
    omnichannel_object: dict[str, Any] | None = Field(None, alias="omnichannel_object")
    page_id: str | None = Field(None, alias="page_id")
    pixel_aggregation_rule: str | None = Field(None, alias="pixel_aggregation_rule")
    pixel_id: str | None = Field(None, alias="pixel_id")
    pixel_rule: str | None = Field(None, alias="pixel_rule")
    place_page_set: AdPlacePageSetFields | None = Field(None, alias="place_page_set")
    place_page_set_id: str | None = Field(None, alias="place_page_set_id")
    product_catalog_id: str | None = Field(None, alias="product_catalog_id")
    product_item_id: str | None = Field(None, alias="product_item_id")
    product_set: ProductSetFields | None = Field(None, alias="product_set")
    product_set_id: str | None = Field(None, alias="product_set_id")
    product_set_optimization: str | None = Field(None, alias="product_set_optimization")
    retention_days: str | None = Field(None, alias="retention_days")
    value_semantic_type: str | None = Field(None, alias="value_semantic_type")
    variation: str | None = Field(None, alias="variation")
    whats_app_business_phone_number_id: str | None = Field(
        None, alias="whats_app_business_phone_number_id"
    )
    whatsapp_phone_number: str | None = Field(None, alias="whatsapp_phone_number")


class OfflineConversionDataSetPermissionsFields(BaseModel):
    """Pydantic model for OfflineConversionDataSetPermissions fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    can_edit: bool | None = Field(None, alias="can_edit")
    can_edit_or_upload: bool | None = Field(None, alias="can_edit_or_upload")
    can_upload: bool | None = Field(None, alias="can_upload")
    should_block_vanilla_business_employee_access: bool | None = Field(
        None, alias="should_block_vanilla_business_employee_access"
    )


class PaymentEnginePaymentFields(BaseModel):
    """Pydantic model for PaymentEnginePayment fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    actions: list[dict[str, Any]] | None = Field(None, alias="actions")
    application: ApplicationFields | None = Field(None, alias="application")
    country: str | None = Field(None, alias="country")
    created_time: datetime | None = Field(None, alias="created_time")
    disputes: list[dict[str, Any]] | None = Field(None, alias="disputes")
    fraud_status: str | None = Field(None, alias="fraud_status")
    fulfillment_status: str | None = Field(None, alias="fulfillment_status")
    id: str | None = Field(None, alias="id")
    is_from_ad: bool | None = Field(None, alias="is_from_ad")
    is_from_page_post: bool | None = Field(None, alias="is_from_page_post")
    items: list[dict[str, Any]] | None = Field(None, alias="items")
    payout_foreign_exchange_rate: float | None = Field(None, alias="payout_foreign_exchange_rate")
    phone_support_eligible: bool | None = Field(None, alias="phone_support_eligible")
    platform: str | None = Field(None, alias="platform")
    refundable_amount: CurrencyAmountFields | None = Field(None, alias="refundable_amount")
    request_id: str | None = Field(None, alias="request_id")
    tax: str | None = Field(None, alias="tax")
    tax_country: str | None = Field(None, alias="tax_country")
    test: int | None = Field(None, alias="test")
    user: UserFields | None = Field(None, alias="user")


class LeadGenAppointmentSlotsByDayFields(BaseModel):
    """Pydantic model for LeadGenAppointmentSlotsByDay fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    appointment_slots: list[LeadGenAppointmentTimeSlotFields] | None = Field(
        None, alias="appointment_slots"
    )
    day: str | None = Field(None, alias="day")


class AdRuleExecutionSpecFields(BaseModel):
    """Pydantic model for AdRuleExecutionSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    execution_options: list[AdRuleExecutionOptionsFields] | None = Field(
        None, alias="execution_options"
    )
    execution_type: dict[str, Any] | None = Field(None, alias="execution_type")
    is_once_off: bool | None = Field(None, alias="is_once_off")


class CatalogItemValidationErrorListFields(BaseModel):
    """Pydantic model for CatalogItemValidationErrorList fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    errors: list[dict[str, Any]] | None = Field(None, alias="errors")


class TargetingGeoLocationLocationClusterFields(BaseModel):
    """Pydantic model for TargetingGeoLocationLocationCluster fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    key: int | None = Field(None, alias="key")


class AnalyticsQueryResultFields(BaseModel):
    """Pydantic model for AnalyticsQueryResult fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    query_id: str | None = Field(None, alias="query_id")
    status: str | None = Field(None, alias="status")


class IGAccessTokenForIGOnlyAPIFields(BaseModel):
    """Pydantic model for IGAccessTokenForIGOnlyAPI fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    access_token: str | None = Field(None, alias="access_token")
    expires_in: int | None = Field(None, alias="expires_in")
    token_type: str | None = Field(None, alias="token_type")


class VideoStatusProcessingPhaseFields(BaseModel):
    """Pydantic model for VideoStatusProcessingPhase fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    errors: list[VideoStatusErrorFields] | None = Field(None, alias="errors")
    status: str | None = Field(None, alias="status")


class ProductItemCommerceInsightsFields(BaseModel):
    """Pydantic model for ProductItemCommerceInsights fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    message_sends: int | None = Field(None, alias="message_sends")
    organic_impressions: int | None = Field(None, alias="organic_impressions")
    paid_impressions: int | None = Field(None, alias="paid_impressions")


class AdAccountAAACompatibleAdObjectsFields(BaseModel):
    """Pydantic model for AdAccountAAACompatibleAdObjects fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adgroup_ids: list[str] | None = Field(None, alias="adgroup_ids")
    campaign_group_ids: list[str] | None = Field(None, alias="campaign_group_ids")
    campaign_ids: list[str] | None = Field(None, alias="campaign_ids")


class ProductItemInsightsFields(BaseModel):
    """Pydantic model for ProductItemInsights fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_click_count: int | None = Field(None, alias="ad_click_count")
    ad_impression_count: int | None = Field(None, alias="ad_impression_count")
    add_to_cart_count: int | None = Field(None, alias="add_to_cart_count")
    purchase_count: int | None = Field(None, alias="purchase_count")
    view_content_count: int | None = Field(None, alias="view_content_count")


class AdsPixelStatsFields(BaseModel):
    """Pydantic model for AdsPixelStats fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    count: int | None = Field(None, alias="count")
    diagnostics_hourly_last_timestamp: datetime | None = Field(
        None, alias="diagnostics_hourly_last_timestamp"
    )
    event: str | None = Field(None, alias="event")
    value: str | None = Field(None, alias="value")


class AdAssetDescriptionFields(BaseModel):
    """Pydantic model for AdAssetDescription fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    text: str | None = Field(None, alias="text")
    url_tags: str | None = Field(None, alias="url_tags")


class AdCreativeShopSpecFields(BaseModel):
    """Pydantic model for AdCreativeShopSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    collection_id: str | None = Field(None, alias="collection_id")
    landing_view: str | None = Field(None, alias="landing_view")
    shop_id: str | None = Field(None, alias="shop_id")


class ReachFrequencyDayPartFields(BaseModel):
    """Pydantic model for ReachFrequencyDayPart fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    days: list[int] | None = Field(None, alias="days")
    end_minute: int | None = Field(None, alias="end_minute")
    start_minute: int | None = Field(None, alias="start_minute")


class BusinessOwnedObjectOnBehalfOfRequestFields(BaseModel):
    """Pydantic model for BusinessOwnedObjectOnBehalfOfRequest fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    business_owned_object: str | None = Field(None, alias="business_owned_object")
    id: str | None = Field(None, alias="id")
    receiving_business: BusinessFields | None = Field(None, alias="receiving_business")
    requesting_business: BusinessFields | None = Field(None, alias="requesting_business")
    status: str | None = Field(None, alias="status")


class ProductCatalogFields(BaseModel):
    """Pydantic model for ProductCatalog fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_account_to_collaborative_ads_share_settings: CollaborativeAdsShareSettingsFields | None = (
        Field(None, alias="ad_account_to_collaborative_ads_share_settings")
    )
    agency_collaborative_ads_share_settings: CollaborativeAdsShareSettingsFields | None = Field(
        None, alias="agency_collaborative_ads_share_settings"
    )
    business: BusinessFields | None = Field(None, alias="business")
    catalog_store: StoreCatalogSettingsFields | None = Field(None, alias="catalog_store")
    commerce_merchant_settings: CommerceMerchantSettingsFields | None = Field(
        None, alias="commerce_merchant_settings"
    )
    creator_user: UserFields | None = Field(None, alias="creator_user")
    da_display_settings: ProductCatalogImageSettingsFields | None = Field(
        None, alias="da_display_settings"
    )
    default_image_url: str | None = Field(None, alias="default_image_url")
    fallback_image_url: list[str] | None = Field(None, alias="fallback_image_url")
    feed_count: int | None = Field(None, alias="feed_count")
    id: str | None = Field(None, alias="id")
    is_catalog_segment: bool | None = Field(None, alias="is_catalog_segment")
    is_local_catalog: bool | None = Field(None, alias="is_local_catalog")
    name: str | None = Field(None, alias="name")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")
    product_count: int | None = Field(None, alias="product_count")
    store_catalog_settings: StoreCatalogSettingsFields | None = Field(
        None, alias="store_catalog_settings"
    )
    user_access_expire_time: datetime | None = Field(None, alias="user_access_expire_time")
    vertical: str | None = Field(None, alias="vertical")


class ProductItemSubscriptionInfoFields(BaseModel):
    """Pydantic model for ProductItemSubscriptionInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    is_subscribable: bool | None = Field(None, alias="is_subscribable")
    subscription_billing_period: int | None = Field(None, alias="subscription_billing_period")
    subscription_billing_type: str | None = Field(None, alias="subscription_billing_type")


class VideoPollFields(BaseModel):
    """Pydantic model for VideoPoll fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    close_after_voting: bool | None = Field(None, alias="close_after_voting")
    default_open: bool | None = Field(None, alias="default_open")
    id: str | None = Field(None, alias="id")
    question: str | None = Field(None, alias="question")
    show_gradient: bool | None = Field(None, alias="show_gradient")
    show_results: bool | None = Field(None, alias="show_results")
    status: dict[str, Any] | None = Field(None, alias="status")


class AdEntityTargetSpendFields(BaseModel):
    """Pydantic model for AdEntityTargetSpend fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    amount: str | None = Field(None, alias="amount")
    has_error: bool | None = Field(None, alias="has_error")
    is_accurate: bool | None = Field(None, alias="is_accurate")
    is_prorated: bool | None = Field(None, alias="is_prorated")
    is_updating: bool | None = Field(None, alias="is_updating")


class CampaignGroupBrandConfigurationFields(BaseModel):
    """Pydantic model for CampaignGroupBrandConfiguration fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    brand_product_name: str | None = Field(None, alias="brand_product_name")
    locale: str | None = Field(None, alias="locale")
    vertical: str | None = Field(None, alias="vertical")


class PlayableContentFields(BaseModel):
    """Pydantic model for PlayableContent fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    owner: ProfileFields | None = Field(None, alias="owner")


class ShadowIGMediaProductTagsFields(BaseModel):
    """Pydantic model for ShadowIGMediaProductTags fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    image_url: str | None = Field(None, alias="image_url")
    is_checkout: bool | None = Field(None, alias="is_checkout")
    merchant_id: int | None = Field(None, alias="merchant_id")
    name: str | None = Field(None, alias="name")
    price_string: str | None = Field(None, alias="price_string")
    product_id: int | None = Field(None, alias="product_id")
    review_status: str | None = Field(None, alias="review_status")
    stripped_price_string: str | None = Field(None, alias="stripped_price_string")
    stripped_sale_price_string: str | None = Field(None, alias="stripped_sale_price_string")
    x: float | None = Field(None, alias="x")
    y: float | None = Field(None, alias="y")


class BusinessAssetGroupFields(BaseModel):
    """Pydantic model for BusinessAssetGroup fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")


class PageAboutStoryComposedBlockEntityRangesFields(BaseModel):
    """Pydantic model for PageAboutStoryComposedBlockEntityRanges fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    key: str | None = Field(None, alias="key")
    length: int | None = Field(None, alias="length")
    offset: int | None = Field(None, alias="offset")


class BusinessObjectFields(BaseModel):
    """Pydantic model for BusinessObject fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    asset: dict[str, Any] | None = Field(None, alias="asset")
    asset_type: str | None = Field(None, alias="asset_type")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    picture: str | None = Field(None, alias="picture")


class AdCreativePromotionMetadataSpecFields(BaseModel):
    """Pydantic model for AdCreativePromotionMetadataSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    end_date: int | None = Field(None, alias="end_date")
    id: str | None = Field(None, alias="id")
    promotion_source: str | None = Field(None, alias="promotion_source")
    promotion_type: str | None = Field(None, alias="promotion_type")
    promotion_value: float | None = Field(None, alias="promotion_value")
    required_code: str | None = Field(None, alias="required_code")
    start_date: int | None = Field(None, alias="start_date")


class TargetingSubscriberUniverseFields(BaseModel):
    """Pydantic model for TargetingSubscriberUniverse fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    messenger_subscriber_source: IDNameFields | None = Field(
        None, alias="messenger_subscriber_source"
    )
    whatsapp_subscriber_pool: IDNameFields | None = Field(None, alias="whatsapp_subscriber_pool")
    whatsapp_subscriber_source: IDNameFields | None = Field(
        None, alias="whatsapp_subscriber_source"
    )


class TextWithEntitiesFields(BaseModel):
    """Pydantic model for TextWithEntities fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    text: str | None = Field(None, alias="text")


class IGCommentFields(BaseModel):
    """Pydantic model for IGComment fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    from_: IGCommentFromUserFields | None = Field(None, alias="from")
    hidden: bool | None = Field(None, alias="hidden")
    id: str | None = Field(None, alias="id")
    legacy_instagram_comment_id: str | None = Field(None, alias="legacy_instagram_comment_id")
    like_count: int | None = Field(None, alias="like_count")
    media: IGMediaFields | None = Field(None, alias="media")
    parent_id: str | None = Field(None, alias="parent_id")
    text: str | None = Field(None, alias="text")
    timestamp: datetime | None = Field(None, alias="timestamp")
    user: IGUserFields | None = Field(None, alias="user")
    username: str | None = Field(None, alias="username")


class ShadowIGUserPartnershipAdsMediaErrorsFields(BaseModel):
    """Pydantic model for ShadowIGUserPartnershipAdsMediaErrors fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_code: str | None = Field(None, alias="ad_code")
    error_codes: str | None = Field(None, alias="error_codes")
    errors: list[str] | None = Field(None, alias="errors")
    permalink: str | None = Field(None, alias="permalink")


class UserPageOneTimeOptInTokenSettingsFields(BaseModel):
    """Pydantic model for UserPageOneTimeOptInTokenSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    creation_timestamp: int | None = Field(None, alias="creation_timestamp")
    next_eligible_time: int | None = Field(None, alias="next_eligible_time")
    notification_messages_frequency: str | None = Field(
        None, alias="notification_messages_frequency"
    )
    notification_messages_reoptin: str | None = Field(None, alias="notification_messages_reoptin")
    notification_messages_timezone: str | None = Field(None, alias="notification_messages_timezone")
    notification_messages_token: str | None = Field(None, alias="notification_messages_token")
    recipient_id: str | None = Field(None, alias="recipient_id")
    token_expiry_timestamp: int | None = Field(None, alias="token_expiry_timestamp")
    topic_title: str | None = Field(None, alias="topic_title")
    user_token_status: str | None = Field(None, alias="user_token_status")


class AdLimitSettingFields(BaseModel):
    """Pydantic model for AdLimitSetting fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    limit_allocation_by_page_advertisers: list[dict[str, int]] | None = Field(
        None, alias="limit_allocation_by_page_advertisers"
    )


class ReportingAudienceFields(BaseModel):
    """Pydantic model for ReportingAudience fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    custom_audiences: list[RawCustomAudienceFields] | None = Field(None, alias="custom_audiences")
    custom_audiences_url_param_name: str | None = Field(
        None, alias="custom_audiences_url_param_name"
    )
    custom_audiences_url_param_type: str | None = Field(
        None, alias="custom_audiences_url_param_type"
    )


class PartnershipAdContentSearchMediaFields(BaseModel):
    """Pydantic model for PartnershipAdContentSearchMedia fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ig_ad_code_sponsor_count: int | None = Field(None, alias="ig_ad_code_sponsor_count")
    ig_ad_code_sponsors: list[FBPageAndInstagramAccountFields] | None = Field(
        None, alias="ig_ad_code_sponsors"
    )
    ig_media: IGMediaFields | None = Field(None, alias="ig_media")
    ig_media_has_product_tags: bool | None = Field(None, alias="ig_media_has_product_tags")
    is_ad_code_eligible_for_boosting_by_two_sponsors: bool | None = Field(
        None, alias="is_ad_code_eligible_for_boosting_by_two_sponsors"
    )
    is_ad_code_entry: bool | None = Field(None, alias="is_ad_code_entry")


class AdAccountSpendCapChangeHistoryFields(BaseModel):
    """Pydantic model for AdAccountSpendCapChangeHistory fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    action: str | None = Field(None, alias="action")
    spend_cap: int | None = Field(None, alias="spend_cap")
    time_start: str | None = Field(None, alias="time_start")
    time_stop: str | None = Field(None, alias="time_stop")


class ReachFrequencyCurveLowerConfidenceRangeFields(BaseModel):
    """Pydantic model for ReachFrequencyCurveLowerConfidenceRange fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    impression_lower: list[int] | None = Field(None, alias="impression_lower")
    num_points: int | None = Field(None, alias="num_points")
    reach: list[int] | None = Field(None, alias="reach")
    reach_lower: list[int] | None = Field(None, alias="reach_lower")
    uniq_video_views_2s_lower: list[int] | None = Field(None, alias="uniq_video_views_2s_lower")
    video_views_2s_lower: list[int] | None = Field(None, alias="video_views_2s_lower")


class AdCreativeLinkDataImageLayerSpecFields(BaseModel):
    """Pydantic model for AdCreativeLinkDataImageLayerSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    blending_mode: dict[str, Any] | None = Field(None, alias="blending_mode")
    content: dict[str, Any] | None = Field(None, alias="content")
    frame_auto_show_enroll_status: str | None = Field(None, alias="frame_auto_show_enroll_status")
    frame_image_hash: str | None = Field(None, alias="frame_image_hash")
    frame_source: dict[str, Any] | None = Field(None, alias="frame_source")
    image_source: dict[str, Any] | None = Field(None, alias="image_source")
    layer_type: dict[str, Any] | None = Field(None, alias="layer_type")
    opacity: int | None = Field(None, alias="opacity")
    overlay_position: dict[str, Any] | None = Field(None, alias="overlay_position")
    overlay_shape: dict[str, Any] | None = Field(None, alias="overlay_shape")
    scale: int | None = Field(None, alias="scale")
    shape_color: str | None = Field(None, alias="shape_color")
    text_color: str | None = Field(None, alias="text_color")
    text_font: dict[str, Any] | None = Field(None, alias="text_font")


class TargetingGeoLocationGeoEntitiesFields(BaseModel):
    """Pydantic model for TargetingGeoLocationGeoEntities fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    country: str | None = Field(None, alias="country")
    key: str | None = Field(None, alias="key")
    name: str | None = Field(None, alias="name")
    region: str | None = Field(None, alias="region")
    region_id: str | None = Field(None, alias="region_id")


class OfflineConversionDataSetUsageFields(BaseModel):
    """Pydantic model for OfflineConversionDataSetUsage fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    num_lift_studies: int | None = Field(None, alias="num_lift_studies")


class VideoThumbnailFields(BaseModel):
    """Pydantic model for VideoThumbnail fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    height: int | None = Field(None, alias="height")
    id: str | None = Field(None, alias="id")
    is_preferred: bool | None = Field(None, alias="is_preferred")
    name: str | None = Field(None, alias="name")
    scale: float | None = Field(None, alias="scale")
    uri: str | None = Field(None, alias="uri")
    width: int | None = Field(None, alias="width")


class ExternalEventSourceCPASEventsDebuggingFields(BaseModel):
    """Pydantic model for ExternalEventSourceCPASEventsDebugging fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    actual_event_time: int | None = Field(None, alias="actual_event_time")
    app_version: str | None = Field(None, alias="app_version")
    content_url: str | None = Field(None, alias="content_url")
    device_os: str | None = Field(None, alias="device_os")
    diagnostic: str | None = Field(None, alias="diagnostic")
    event_name: str | None = Field(None, alias="event_name")
    event_time: int | None = Field(None, alias="event_time")
    missing_ids: str | None = Field(None, alias="missing_ids")
    severity: str | None = Field(None, alias="severity")


class AdAssetFeedSpecCaptionFields(BaseModel):
    """Pydantic model for AdAssetFeedSpecCaption fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adlabels: list[AdAssetFeedSpecAssetLabelFields] | None = Field(None, alias="adlabels")
    text: str | None = Field(None, alias="text")
    url_tags: str | None = Field(None, alias="url_tags")


class HasLeadAccessFields(BaseModel):
    """Pydantic model for HasLeadAccess fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app_has_leads_permission: bool | None = Field(None, alias="app_has_leads_permission")
    can_access_lead: bool | None = Field(None, alias="can_access_lead")
    enabled_lead_access_manager: bool | None = Field(None, alias="enabled_lead_access_manager")
    failure_reason: str | None = Field(None, alias="failure_reason")
    failure_resolution: str | None = Field(None, alias="failure_resolution")
    is_page_admin: bool | None = Field(None, alias="is_page_admin")
    page_id: str | None = Field(None, alias="page_id")
    user_has_leads_permission: bool | None = Field(None, alias="user_has_leads_permission")
    user_id: str | None = Field(None, alias="user_id")


class CollaborativeAdsPartnerBusinessesFields(BaseModel):
    """Pydantic model for CollaborativeAdsPartnerBusinesses fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    collaborative_ads_partner_businesses_info: list[BusinessFields] | None = Field(
        None, alias="collaborative_ads_partner_businesses_info"
    )
    dedicated_partner_business_info: BusinessFields | None = Field(
        None, alias="dedicated_partner_business_info"
    )


class BusinessFields(BaseModel):
    """Pydantic model for Business fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    block_offline_analytics: bool | None = Field(None, alias="block_offline_analytics")
    collaborative_ads_managed_partner_business_info: ManagedPartnerBusinessFields | None = Field(
        None, alias="collaborative_ads_managed_partner_business_info"
    )
    collaborative_ads_managed_partner_eligibility: (
        BusinessManagedPartnerEligibilityFields | None
    ) = Field(None, alias="collaborative_ads_managed_partner_eligibility")
    collaborative_ads_partner_premium_options: BusinessPartnerPremiumOptionsFields | None = Field(
        None, alias="collaborative_ads_partner_premium_options"
    )
    created_by: dict[str, Any] | None = Field(None, alias="created_by")
    created_time: datetime | None = Field(None, alias="created_time")
    extended_updated_time: datetime | None = Field(None, alias="extended_updated_time")
    id: str | None = Field(None, alias="id")
    is_hidden: bool | None = Field(None, alias="is_hidden")
    link: str | None = Field(None, alias="link")
    name: str | None = Field(None, alias="name")
    payment_account_id: str | None = Field(None, alias="payment_account_id")
    primary_page: PageFields | None = Field(None, alias="primary_page")
    profile_picture_uri: str | None = Field(None, alias="profile_picture_uri")
    timezone_id: int | None = Field(None, alias="timezone_id")
    two_factor_type: str | None = Field(None, alias="two_factor_type")
    updated_by: dict[str, Any] | None = Field(None, alias="updated_by")
    updated_time: datetime | None = Field(None, alias="updated_time")
    user_access_expire_time: datetime | None = Field(None, alias="user_access_expire_time")
    verification_status: dict[str, Any] | None = Field(None, alias="verification_status")
    vertical: str | None = Field(None, alias="vertical")
    vertical_id: int | None = Field(None, alias="vertical_id")


class SocialWifiSiteFields(BaseModel):
    """Pydantic model for SocialWifiSite fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")


class IGUserMessengerProfileFields(BaseModel):
    """Pydantic model for IGUserMessengerProfile fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ice_breakers: list[dict[str, Any]] | None = Field(None, alias="ice_breakers")
    persistent_menu: list[dict[str, Any]] | None = Field(None, alias="persistent_menu")


class AdCreativeLinkDataImageOverlaySpecFields(BaseModel):
    """Pydantic model for AdCreativeLinkDataImageOverlaySpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    custom_text_type: dict[str, Any] | None = Field(None, alias="custom_text_type")
    float_with_margin: bool | None = Field(None, alias="float_with_margin")
    overlay_template: dict[str, Any] | None = Field(None, alias="overlay_template")
    position: dict[str, Any] | None = Field(None, alias="position")
    text_font: dict[str, Any] | None = Field(None, alias="text_font")
    text_template_tags: list[str] | None = Field(None, alias="text_template_tags")
    text_type: dict[str, Any] | None = Field(None, alias="text_type")
    theme_color: dict[str, Any] | None = Field(None, alias="theme_color")


class SalesRightsInventoryManagementFields(BaseModel):
    """Pydantic model for SalesRightsInventoryManagement fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    available_impressions: int | None = Field(None, alias="available_impressions")
    booked_impressions: int | None = Field(None, alias="booked_impressions")
    overbooked_impressions: int | None = Field(None, alias="overbooked_impressions")
    supported_countries: list[str] | None = Field(None, alias="supported_countries")
    total_impressions: int | None = Field(None, alias="total_impressions")
    unavailable_impressions: int | None = Field(None, alias="unavailable_impressions")
    warning_messages: list[str] | None = Field(None, alias="warning_messages")


class AdCreativeObjectStorySpecFields(BaseModel):
    """Pydantic model for AdCreativeObjectStorySpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    instagram_user_id: str | None = Field(None, alias="instagram_user_id")
    link_data: AdCreativeLinkDataFields | None = Field(None, alias="link_data")
    page_id: str | None = Field(None, alias="page_id")
    photo_data: AdCreativePhotoDataFields | None = Field(None, alias="photo_data")
    product_data: list[AdCreativeProductDataFields] | None = Field(None, alias="product_data")
    template_data: AdCreativeLinkDataFields | None = Field(None, alias="template_data")
    text_data: AdCreativeTextDataFields | None = Field(None, alias="text_data")
    video_data: AdCreativeVideoDataFields | None = Field(None, alias="video_data")


class AdAsyncRequestSetFields(BaseModel):
    """Pydantic model for AdAsyncRequestSet fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    canceled_count: int | None = Field(None, alias="canceled_count")
    created_time: datetime | None = Field(None, alias="created_time")
    error_count: int | None = Field(None, alias="error_count")
    id: str | None = Field(None, alias="id")
    in_progress_count: int | None = Field(None, alias="in_progress_count")
    initial_count: int | None = Field(None, alias="initial_count")
    is_completed: bool | None = Field(None, alias="is_completed")
    name: str | None = Field(None, alias="name")
    notification_mode: dict[str, Any] | None = Field(None, alias="notification_mode")
    notification_result: AdAsyncRequestSetNotificationResultFields | None = Field(
        None, alias="notification_result"
    )
    notification_status: str | None = Field(None, alias="notification_status")
    notification_uri: str | None = Field(None, alias="notification_uri")
    owner_id: str | None = Field(None, alias="owner_id")
    success_count: int | None = Field(None, alias="success_count")
    total_count: int | None = Field(None, alias="total_count")
    updated_time: datetime | None = Field(None, alias="updated_time")


class AssignedUserFields(BaseModel):
    """Pydantic model for AssignedUser fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    business: BusinessFields | None = Field(None, alias="business")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    user_type: str | None = Field(None, alias="user_type")


class AdKpiShiftFields(BaseModel):
    """Pydantic model for AdKpiShift fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_set: AdSetFields | None = Field(None, alias="ad_set")
    cost_per_result_shift: float | None = Field(None, alias="cost_per_result_shift")
    enough_effective_days: bool | None = Field(None, alias="enough_effective_days")
    result_indicator: str | None = Field(None, alias="result_indicator")
    result_shift: float | None = Field(None, alias="result_shift")
    spend_shift: float | None = Field(None, alias="spend_shift")


class LeadGenPostSubmissionCheckResultFields(BaseModel):
    """Pydantic model for LeadGenPostSubmissionCheckResult fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    api_call_result: str | None = Field(None, alias="api_call_result")
    api_error_message: str | None = Field(None, alias="api_error_message")
    shown_thank_you_page: str | None = Field(None, alias="shown_thank_you_page")


class CustomAudienceHealthFields(BaseModel):
    """Pydantic model for CustomAudienceHealth fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    health: list[dict[str, Any]] | None = Field(None, alias="health")


class ReachFrequencyActivityFields(BaseModel):
    """Pydantic model for ReachFrequencyActivity fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    campaign_active: bool | None = Field(None, alias="campaign_active")
    campaign_started: bool | None = Field(None, alias="campaign_started")
    creative_uploaded: bool | None = Field(None, alias="creative_uploaded")
    io_approved: bool | None = Field(None, alias="io_approved")
    sf_link: str | None = Field(None, alias="sf_link")


class BusinessUserFields(BaseModel):
    """Pydantic model for BusinessUser fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    business: BusinessFields | None = Field(None, alias="business")
    business_role_request: BusinessRoleRequestFields | None = Field(
        None, alias="business_role_request"
    )
    email: str | None = Field(None, alias="email")
    finance_permission: str | None = Field(None, alias="finance_permission")
    first_name: str | None = Field(None, alias="first_name")
    id: str | None = Field(None, alias="id")
    ip_permission: str | None = Field(None, alias="ip_permission")
    last_name: str | None = Field(None, alias="last_name")
    marked_for_removal: bool | None = Field(None, alias="marked_for_removal")
    name: str | None = Field(None, alias="name")
    pending_email: str | None = Field(None, alias="pending_email")
    role: str | None = Field(None, alias="role")
    tasks: list[str] | None = Field(None, alias="tasks")
    title: str | None = Field(None, alias="title")
    two_fac_status: str | None = Field(None, alias="two_fac_status")


class AdCreativeTemplateURLSpecFields(BaseModel):
    """Pydantic model for AdCreativeTemplateURLSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    android: dict[str, Any] | None = Field(None, alias="android")
    config: dict[str, Any] | None = Field(None, alias="config")
    ios: dict[str, Any] | None = Field(None, alias="ios")
    ipad: dict[str, Any] | None = Field(None, alias="ipad")
    iphone: dict[str, Any] | None = Field(None, alias="iphone")
    web: dict[str, Any] | None = Field(None, alias="web")
    windows_phone: dict[str, Any] | None = Field(None, alias="windows_phone")


class CustomAudienceSharingStatusFields(BaseModel):
    """Pydantic model for CustomAudienceSharingStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    sharing_relationship_id: int | None = Field(None, alias="sharing_relationship_id")
    status: str | None = Field(None, alias="status")


class ProductFeedRulePreviewSampleFields(BaseModel):
    """Pydantic model for ProductFeedRulePreviewSample fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    properties_after: list[dict[str, str]] | None = Field(None, alias="properties_after")
    properties_before: list[dict[str, str]] | None = Field(None, alias="properties_before")


class FBLiteToNTTransitionsFields(BaseModel):
    """Pydantic model for FBLiteToNTTransitions fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    transition: dict[str, Any] | None = Field(None, alias="transition")


class BusinessVideoFields(BaseModel):
    """Pydantic model for BusinessVideo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    business: BusinessFields | None = Field(None, alias="business")
    id: str | None = Field(None, alias="id")
    media_library_url: str | None = Field(None, alias="media_library_url")
    name: str | None = Field(None, alias="name")
    video: AdVideoFields | None = Field(None, alias="video")


class TargetingFields(BaseModel):
    """Pydantic model for Targeting fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adgroup_id: str | None = Field(None, alias="adgroup_id")
    age_max: int | None = Field(None, alias="age_max")
    age_min: int | None = Field(None, alias="age_min")
    age_range: list[int] | None = Field(None, alias="age_range")
    alternate_auto_targeting_option: str | None = Field(
        None, alias="alternate_auto_targeting_option"
    )
    app_install_state: str | None = Field(None, alias="app_install_state")
    audience_network_positions: list[str] | None = Field(None, alias="audience_network_positions")
    behaviors: list[IDNameFields] | None = Field(None, alias="behaviors")
    brand_safety_content_filter_levels: list[str] | None = Field(
        None, alias="brand_safety_content_filter_levels"
    )
    catalog_based_targeting: CatalogBasedTargetingFields | None = Field(
        None, alias="catalog_based_targeting"
    )
    cities: list[IDNameFields] | None = Field(None, alias="cities")
    college_years: list[int] | None = Field(None, alias="college_years")
    connections: list[ConnectionsTargetingFields] | None = Field(None, alias="connections")
    contextual_targeting_categories: list[IDNameFields] | None = Field(
        None, alias="contextual_targeting_categories"
    )
    countries: list[str] | None = Field(None, alias="countries")
    country: list[str] | None = Field(None, alias="country")
    country_groups: list[str] | None = Field(None, alias="country_groups")
    custom_audiences: list[RawCustomAudienceFields] | None = Field(None, alias="custom_audiences")
    device_platforms: list[dict[str, Any]] | None = Field(None, alias="device_platforms")
    direct_install_devices: bool | None = Field(None, alias="direct_install_devices")
    dynamic_audience_ids: list[str] | None = Field(None, alias="dynamic_audience_ids")
    education_majors: list[IDNameFields] | None = Field(None, alias="education_majors")
    education_schools: list[IDNameFields] | None = Field(None, alias="education_schools")
    education_statuses: list[int] | None = Field(None, alias="education_statuses")
    effective_audience_network_positions: list[str] | None = Field(
        None, alias="effective_audience_network_positions"
    )
    effective_device_platforms: list[dict[str, Any]] | None = Field(
        None, alias="effective_device_platforms"
    )
    effective_facebook_positions: list[str] | None = Field(
        None, alias="effective_facebook_positions"
    )
    effective_instagram_positions: list[str] | None = Field(
        None, alias="effective_instagram_positions"
    )
    effective_messenger_positions: list[str] | None = Field(
        None, alias="effective_messenger_positions"
    )
    effective_publisher_platforms: list[str] | None = Field(
        None, alias="effective_publisher_platforms"
    )
    effective_threads_positions: list[str] | None = Field(None, alias="effective_threads_positions")
    engagement_specs: list[TargetingDynamicRuleFields] | None = Field(
        None, alias="engagement_specs"
    )
    ethnic_affinity: list[IDNameFields] | None = Field(None, alias="ethnic_affinity")
    exclude_reached_since: list[str] | None = Field(None, alias="exclude_reached_since")
    excluded_brand_safety_content_types: list[str] | None = Field(
        None, alias="excluded_brand_safety_content_types"
    )
    excluded_connections: list[ConnectionsTargetingFields] | None = Field(
        None, alias="excluded_connections"
    )
    excluded_custom_audiences: list[RawCustomAudienceFields] | None = Field(
        None, alias="excluded_custom_audiences"
    )
    excluded_dynamic_audience_ids: list[str] | None = Field(
        None, alias="excluded_dynamic_audience_ids"
    )
    excluded_engagement_specs: list[TargetingDynamicRuleFields] | None = Field(
        None, alias="excluded_engagement_specs"
    )
    excluded_geo_locations: TargetingGeoLocationFields | None = Field(
        None, alias="excluded_geo_locations"
    )
    excluded_mobile_device_model: list[str] | None = Field(
        None, alias="excluded_mobile_device_model"
    )
    excluded_product_audience_specs: list[TargetingProductAudienceSpecFields] | None = Field(
        None, alias="excluded_product_audience_specs"
    )
    excluded_publisher_categories: list[str] | None = Field(
        None, alias="excluded_publisher_categories"
    )
    excluded_publisher_list_ids: list[str] | None = Field(None, alias="excluded_publisher_list_ids")
    excluded_user_device: list[str] | None = Field(None, alias="excluded_user_device")
    exclusions: FlexibleTargetingFields | None = Field(None, alias="exclusions")
    facebook_positions: list[str] | None = Field(None, alias="facebook_positions")
    family_statuses: list[IDNameFields] | None = Field(None, alias="family_statuses")
    fb_deal_id: str | None = Field(None, alias="fb_deal_id")
    flexible_spec: list[FlexibleTargetingFields] | None = Field(None, alias="flexible_spec")
    friends_of_connections: list[ConnectionsTargetingFields] | None = Field(
        None, alias="friends_of_connections"
    )
    genders: list[int] | None = Field(None, alias="genders")
    generation: list[IDNameFields] | None = Field(None, alias="generation")
    geo_locations: TargetingGeoLocationFields | None = Field(None, alias="geo_locations")
    home_ownership: list[IDNameFields] | None = Field(None, alias="home_ownership")
    home_type: list[IDNameFields] | None = Field(None, alias="home_type")
    home_value: list[IDNameFields] | None = Field(None, alias="home_value")
    household_composition: list[IDNameFields] | None = Field(None, alias="household_composition")
    income: list[IDNameFields] | None = Field(None, alias="income")
    industries: list[IDNameFields] | None = Field(None, alias="industries")
    instagram_positions: list[str] | None = Field(None, alias="instagram_positions")
    instream_video_skippable_excluded: bool | None = Field(
        None, alias="instream_video_skippable_excluded"
    )
    interested_in: list[int] | None = Field(None, alias="interested_in")
    interests: list[IDNameFields] | None = Field(None, alias="interests")
    is_whatsapp_destination_ad: bool | None = Field(None, alias="is_whatsapp_destination_ad")
    keywords: list[str] | None = Field(None, alias="keywords")
    life_events: list[IDNameFields] | None = Field(None, alias="life_events")
    locales: list[int] | None = Field(None, alias="locales")
    messenger_positions: list[str] | None = Field(None, alias="messenger_positions")
    moms: list[IDNameFields] | None = Field(None, alias="moms")
    net_worth: list[IDNameFields] | None = Field(None, alias="net_worth")
    office_type: list[IDNameFields] | None = Field(None, alias="office_type")
    place_page_set_ids: list[str] | None = Field(None, alias="place_page_set_ids")
    political_views: list[int] | None = Field(None, alias="political_views")
    politics: list[IDNameFields] | None = Field(None, alias="politics")
    product_audience_specs: list[TargetingProductAudienceSpecFields] | None = Field(
        None, alias="product_audience_specs"
    )
    prospecting_audience: TargetingProspectingAudienceFields | None = Field(
        None, alias="prospecting_audience"
    )
    publisher_platforms: list[str] | None = Field(None, alias="publisher_platforms")
    radius: str | None = Field(None, alias="radius")
    regions: list[IDNameFields] | None = Field(None, alias="regions")
    relationship_statuses: list[int] | None = Field(None, alias="relationship_statuses")
    site_category: list[str] | None = Field(None, alias="site_category")
    targeting_automation: TargetingAutomationFields | None = Field(
        None, alias="targeting_automation"
    )
    targeting_optimization: str | None = Field(None, alias="targeting_optimization")
    targeting_relaxation_types: TargetingRelaxationFields | None = Field(
        None, alias="targeting_relaxation_types"
    )
    threads_positions: list[str] | None = Field(None, alias="threads_positions")
    user_adclusters: list[IDNameFields] | None = Field(None, alias="user_adclusters")
    user_device: list[str] | None = Field(None, alias="user_device")
    user_event: list[int] | None = Field(None, alias="user_event")
    user_os: list[str] | None = Field(None, alias="user_os")
    wireless_carrier: list[str] | None = Field(None, alias="wireless_carrier")
    work_employers: list[IDNameFields] | None = Field(None, alias="work_employers")
    work_positions: list[IDNameFields] | None = Field(None, alias="work_positions")
    zips: list[str] | None = Field(None, alias="zips")


class AdsPixelEventPredictionFields(BaseModel):
    """Pydantic model for AdsPixelEventPrediction fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    dismissed: bool | None = Field(None, alias="dismissed")
    event_type: str | None = Field(None, alias="event_type")
    rule: str | None = Field(None, alias="rule")


class DeliveryCheckExtraInfoFields(BaseModel):
    """Pydantic model for DeliveryCheckExtraInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adgroup_ids: list[str] | None = Field(None, alias="adgroup_ids")
    campaign_ids: list[str] | None = Field(None, alias="campaign_ids")
    countries: list[str] | None = Field(None, alias="countries")


class TargetingGeoLocationFields(BaseModel):
    """Pydantic model for TargetingGeoLocation fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    cities: list[TargetingGeoLocationCityFields] | None = Field(None, alias="cities")
    countries: list[str] | None = Field(None, alias="countries")
    country_groups: list[str] | None = Field(None, alias="country_groups")
    custom_locations: list[TargetingGeoLocationCustomLocationFields] | None = Field(
        None, alias="custom_locations"
    )
    electoral_districts: list[TargetingGeoLocationElectoralDistrictFields] | None = Field(
        None, alias="electoral_districts"
    )
    geo_markets: list[TargetingGeoLocationMarketFields] | None = Field(None, alias="geo_markets")
    large_geo_areas: list[TargetingGeoLocationGeoEntitiesFields] | None = Field(
        None, alias="large_geo_areas"
    )
    location_cluster_ids: list[TargetingGeoLocationLocationClusterFields] | None = Field(
        None, alias="location_cluster_ids"
    )
    location_types: list[str] | None = Field(None, alias="location_types")
    medium_geo_areas: list[TargetingGeoLocationGeoEntitiesFields] | None = Field(
        None, alias="medium_geo_areas"
    )
    metro_areas: list[TargetingGeoLocationGeoEntitiesFields] | None = Field(
        None, alias="metro_areas"
    )
    neighborhoods: list[TargetingGeoLocationGeoEntitiesFields] | None = Field(
        None, alias="neighborhoods"
    )
    places: list[TargetingGeoLocationPlaceFields] | None = Field(None, alias="places")
    political_districts: list[TargetingGeoLocationPoliticalDistrictFields] | None = Field(
        None, alias="political_districts"
    )
    regions: list[TargetingGeoLocationRegionFields] | None = Field(None, alias="regions")
    small_geo_areas: list[TargetingGeoLocationGeoEntitiesFields] | None = Field(
        None, alias="small_geo_areas"
    )
    subcities: list[TargetingGeoLocationGeoEntitiesFields] | None = Field(None, alias="subcities")
    subneighborhoods: list[TargetingGeoLocationGeoEntitiesFields] | None = Field(
        None, alias="subneighborhoods"
    )
    zips: list[TargetingGeoLocationZipFields] | None = Field(None, alias="zips")


class CustomAudienceAdAccountFields(BaseModel):
    """Pydantic model for CustomAudienceAdAccount fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")


class ColumnSuggestionsFields(BaseModel):
    """Pydantic model for ColumnSuggestions fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    explanations: dict[str, Any] | None = Field(None, alias="explanations")
    format: list[str] | None = Field(None, alias="format")
    objective: list[str] | None = Field(None, alias="objective")
    optimization_goals: list[str] | None = Field(None, alias="optimization_goals")


class ArAdsDataContainerFields(BaseModel):
    """Pydantic model for ArAdsDataContainer fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    camera_facing_override: str | None = Field(None, alias="camera_facing_override")
    creation_time: datetime | None = Field(None, alias="creation_time")
    effect: list[dict[str, Any]] | None = Field(None, alias="effect")
    id: str | None = Field(None, alias="id")
    is_published: bool | None = Field(None, alias="is_published")
    last_modified_time: datetime | None = Field(None, alias="last_modified_time")
    name: str | None = Field(None, alias="name")


class WindowsAppLinkFields(BaseModel):
    """Pydantic model for WindowsAppLink fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app_id: str | None = Field(None, alias="app_id")
    app_name: str | None = Field(None, alias="app_name")
    package_family_name: str | None = Field(None, alias="package_family_name")
    url: str | None = Field(None, alias="url")


class ProductSetFields(BaseModel):
    """Pydantic model for ProductSet fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    auto_creation_url: str | None = Field(None, alias="auto_creation_url")
    filter: str | None = Field(None, alias="filter")
    id: str | None = Field(None, alias="id")
    latest_metadata: ProductSetMetadataFields | None = Field(None, alias="latest_metadata")
    live_metadata: ProductSetMetadataFields | None = Field(None, alias="live_metadata")
    name: str | None = Field(None, alias="name")
    ordering_info: list[int] | None = Field(None, alias="ordering_info")
    product_catalog: ProductCatalogFields | None = Field(None, alias="product_catalog")
    product_count: int | None = Field(None, alias="product_count")
    retailer_id: str | None = Field(None, alias="retailer_id")


class AdAccountURLForAssetExtractionFields(BaseModel):
    """Pydantic model for AdAccountURLForAssetExtraction fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    source_type: str | None = Field(None, alias="source_type")
    source_url: str | None = Field(None, alias="source_url")


class EngagementFields(BaseModel):
    """Pydantic model for Engagement fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    count: int | None = Field(None, alias="count")
    count_string: str | None = Field(None, alias="count_string")
    count_string_with_like: str | None = Field(None, alias="count_string_with_like")
    count_string_without_like: str | None = Field(None, alias="count_string_without_like")
    social_sentence: str | None = Field(None, alias="social_sentence")
    social_sentence_with_like: str | None = Field(None, alias="social_sentence_with_like")
    social_sentence_without_like: str | None = Field(None, alias="social_sentence_without_like")


class ContentDeliveryReportFields(BaseModel):
    """Pydantic model for ContentDeliveryReport fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    content_id: str | None = Field(None, alias="content_id")
    content_name: str | None = Field(None, alias="content_name")
    content_url: str | None = Field(None, alias="content_url")
    creator_id: str | None = Field(None, alias="creator_id")
    creator_name: str | None = Field(None, alias="creator_name")
    creator_url: str | None = Field(None, alias="creator_url")
    estimated_impressions: int | None = Field(None, alias="estimated_impressions")


class VideoStatusPublishingPhaseFields(BaseModel):
    """Pydantic model for VideoStatusPublishingPhase fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    errors: list[VideoStatusErrorFields] | None = Field(None, alias="errors")
    publish_status: str | None = Field(None, alias="publish_status")
    publish_time: datetime | None = Field(None, alias="publish_time")
    status: str | None = Field(None, alias="status")


class BrandedContentEligibleSponsorIDsFields(BaseModel):
    """Pydantic model for BrandedContentEligibleSponsorIDs fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    fb_page: PageFields | None = Field(None, alias="fb_page")
    ig_account_v2: IGUserFields | None = Field(None, alias="ig_account_v2")
    ig_approval_needed: bool | None = Field(None, alias="ig_approval_needed")


class IGShoppingReviewStatusReasonWithHelpMessageFields(BaseModel):
    """Pydantic model for IGShoppingReviewStatusReasonWithHelpMessage fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    code: str | None = Field(None, alias="code")
    help_url: str | None = Field(None, alias="help_url")
    message: str | None = Field(None, alias="message")


class AdSavedReportFields(BaseModel):
    """Pydantic model for AdSavedReport fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app_owner: ApplicationFields | None = Field(None, alias="app_owner")
    breakdowns: list[str] | None = Field(None, alias="breakdowns")
    builtin_column_set: str | None = Field(None, alias="builtin_column_set")
    creation_source: str | None = Field(None, alias="creation_source")
    date_interval: dict[str, Any] | None = Field(None, alias="date_interval")
    date_preset: str | None = Field(None, alias="date_preset")
    format_version: int | None = Field(None, alias="format_version")
    id: str | None = Field(None, alias="id")
    insights_section: dict[str, Any] | None = Field(None, alias="insights_section")
    is_shared_unread: bool | None = Field(None, alias="is_shared_unread")
    level: str | None = Field(None, alias="level")
    name: str | None = Field(None, alias="name")
    normalized_filter: dict[str, Any] | None = Field(None, alias="normalized_filter")
    sort: list[dict[str, Any]] | None = Field(None, alias="sort")
    user_attribution_windows: list[str] | None = Field(None, alias="user_attribution_windows")
    user_columns: list[str] | None = Field(None, alias="user_columns")
    user_filter: dict[str, Any] | None = Field(None, alias="user_filter")
    user_owner: UserFields | None = Field(None, alias="user_owner")


class AdAccountPaymentDetailsFields(BaseModel):
    """Pydantic model for AdAccountPaymentDetails fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    amount: CurrencyAmountFields | None = Field(None, alias="amount")
    create_date: int | None = Field(None, alias="create_date")
    id: str | None = Field(None, alias="id")
    last_action_status: str | None = Field(None, alias="last_action_status")
    metadata: dict[str, Any] | None = Field(None, alias="metadata")
    payment_details_id: str | None = Field(None, alias="payment_details_id")


class AdRuleHistoryResultFields(BaseModel):
    """Pydantic model for AdRuleHistoryResult fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    actions: list[AdRuleHistoryResultActionFields] | None = Field(None, alias="actions")
    object_id: str | None = Field(None, alias="object_id")
    object_type: dict[str, Any] | None = Field(None, alias="object_type")


class LeadGenConditionalQuestionsGroupQuestionsFields(BaseModel):
    """Pydantic model for LeadGenConditionalQuestionsGroupQuestions fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    field_key: str | None = Field(None, alias="field_key")
    input_type: str | None = Field(None, alias="input_type")
    name: str | None = Field(None, alias="name")


class AsyncSessionFields(BaseModel):
    """Pydantic model for AsyncSession fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app: ApplicationFields | None = Field(None, alias="app")
    complete_time: datetime | None = Field(None, alias="complete_time")
    error_code: int | None = Field(None, alias="error_code")
    exception: str | None = Field(None, alias="exception")
    id: str | None = Field(None, alias="id")
    method: str | None = Field(None, alias="method")
    name: str | None = Field(None, alias="name")
    page: PageFields | None = Field(None, alias="page")
    percent_completed: int | None = Field(None, alias="percent_completed")
    platform_version: str | None = Field(None, alias="platform_version")
    result: str | None = Field(None, alias="result")
    start_time: datetime | None = Field(None, alias="start_time")
    status: str | None = Field(None, alias="status")
    uri: str | None = Field(None, alias="uri")
    user: UserFields | None = Field(None, alias="user")


class AdAccountCreationRequestFields(BaseModel):
    """Pydantic model for AdAccountCreationRequest fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_accounts_currency: str | None = Field(None, alias="ad_accounts_currency")
    ad_accounts_info: list[dict[str, Any]] | None = Field(None, alias="ad_accounts_info")
    additional_comment: str | None = Field(None, alias="additional_comment")
    address_in_chinese: str | None = Field(None, alias="address_in_chinese")
    address_in_english: dict[str, Any] | None = Field(None, alias="address_in_english")
    address_in_local_language: str | None = Field(None, alias="address_in_local_language")
    advertiser_business: BusinessFields | None = Field(None, alias="advertiser_business")
    appeal_reason: dict[str, Any] | None = Field(None, alias="appeal_reason")
    business: BusinessFields | None = Field(None, alias="business")
    business_registration_id: str | None = Field(None, alias="business_registration_id")
    chinese_legal_entity_name: str | None = Field(None, alias="chinese_legal_entity_name")
    contact: dict[str, Any] | None = Field(None, alias="contact")
    creator: UserFields | None = Field(None, alias="creator")
    credit_card_id: str | None = Field(None, alias="credit_card_id")
    disapproval_reasons: list[dict[str, Any]] | None = Field(None, alias="disapproval_reasons")
    english_legal_entity_name: str | None = Field(None, alias="english_legal_entity_name")
    extended_credit_id: str | None = Field(None, alias="extended_credit_id")
    id: str | None = Field(None, alias="id")
    is_smb: bool | None = Field(None, alias="is_smb")
    is_test: bool | None = Field(None, alias="is_test")
    legal_entity_name_in_local_language: str | None = Field(
        None, alias="legal_entity_name_in_local_language"
    )
    oe_request_id: str | None = Field(None, alias="oe_request_id")
    official_website_url: str | None = Field(None, alias="official_website_url")
    planning_agency_business: BusinessFields | None = Field(None, alias="planning_agency_business")
    planning_agency_business_id: str | None = Field(None, alias="planning_agency_business_id")
    promotable_app_ids: list[str] | None = Field(None, alias="promotable_app_ids")
    promotable_page_ids: list[str] | None = Field(None, alias="promotable_page_ids")
    promotable_urls: list[str] | None = Field(None, alias="promotable_urls")
    request_change_reasons: list[dict[str, Any]] | None = Field(
        None, alias="request_change_reasons"
    )
    status: str | None = Field(None, alias="status")
    subvertical: str | None = Field(None, alias="subvertical")
    subvertical_v2: str | None = Field(None, alias="subvertical_v2")
    time_created: datetime | None = Field(None, alias="time_created")
    vertical: str | None = Field(None, alias="vertical")
    vertical_v2: str | None = Field(None, alias="vertical_v2")


class PageUserPermissionsFields(BaseModel):
    """Pydantic model for PageUserPermissions fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    business: BusinessFields | None = Field(None, alias="business")
    business_persona: str | None = Field(None, alias="business_persona")
    created_by: ProfileFields | None = Field(None, alias="created_by")
    created_time: datetime | None = Field(None, alias="created_time")
    email: str | None = Field(None, alias="email")
    status: str | None = Field(None, alias="status")
    tasks: list[str] | None = Field(None, alias="tasks")
    updated_by: ProfileFields | None = Field(None, alias="updated_by")
    updated_time: datetime | None = Field(None, alias="updated_time")
    user: ProfileFields | None = Field(None, alias="user")


class PlatformSessionKeyFields(BaseModel):
    """Pydantic model for PlatformSessionKey fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")


class LocationFields(BaseModel):
    """Pydantic model for Location fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    city: str | None = Field(None, alias="city")
    city_id: int | None = Field(None, alias="city_id")
    country: str | None = Field(None, alias="country")
    country_code: str | None = Field(None, alias="country_code")
    latitude: float | None = Field(None, alias="latitude")
    located_in: str | None = Field(None, alias="located_in")
    longitude: float | None = Field(None, alias="longitude")
    name: str | None = Field(None, alias="name")
    region: str | None = Field(None, alias="region")
    region_id: int | None = Field(None, alias="region_id")
    state: str | None = Field(None, alias="state")
    street: str | None = Field(None, alias="street")
    zip: str | None = Field(None, alias="zip")


class AdAssetCustomizationRuleCustomizationSpecFields(BaseModel):
    """Pydantic model for AdAssetCustomizationRuleCustomizationSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    age_max: int | None = Field(None, alias="age_max")
    age_min: int | None = Field(None, alias="age_min")
    audience_network_positions: list[str] | None = Field(None, alias="audience_network_positions")
    device_platforms: list[dict[str, Any]] | None = Field(None, alias="device_platforms")
    facebook_positions: list[str] | None = Field(None, alias="facebook_positions")
    geo_locations: TargetingGeoLocationFields | None = Field(None, alias="geo_locations")
    instagram_positions: list[str] | None = Field(None, alias="instagram_positions")
    locales: list[int] | None = Field(None, alias="locales")
    messenger_positions: list[str] | None = Field(None, alias="messenger_positions")
    publisher_platforms: list[str] | None = Field(None, alias="publisher_platforms")


class CustomAudienceSharedAccountCampaignInfoFields(BaseModel):
    """Pydantic model for CustomAudienceSharedAccountCampaignInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    account_name: str | None = Field(None, alias="account_name")
    adset_excluding_count: int | None = Field(None, alias="adset_excluding_count")
    adset_including_count: int | None = Field(None, alias="adset_including_count")
    campaign_delivery_status: str | None = Field(None, alias="campaign_delivery_status")
    campaign_objective: str | None = Field(None, alias="campaign_objective")
    campaign_pages: list[dict[str, Any]] | None = Field(None, alias="campaign_pages")
    campaign_schedule: str | None = Field(None, alias="campaign_schedule")


class ManagementSiteLinkFields(BaseModel):
    """Pydantic model for ManagementSiteLink fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_account_id: str | None = Field(None, alias="ad_account_id")
    id: str | None = Field(None, alias="id")
    link_domain: str | None = Field(None, alias="link_domain")
    link_hash: str | None = Field(None, alias="link_hash")
    link_image_hash: str | None = Field(None, alias="link_image_hash")
    link_image_url: str | None = Field(None, alias="link_image_url")
    link_title: str | None = Field(None, alias="link_title")
    link_type: str | None = Field(None, alias="link_type")
    link_url: str | None = Field(None, alias="link_url")


class DeliveryWindowFields(BaseModel):
    """Pydantic model for DeliveryWindow fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad: int | None = Field(None, alias="ad")
    ae: int | None = Field(None, alias="ae")
    af: int | None = Field(None, alias="af")
    ag: int | None = Field(None, alias="ag")
    ai: int | None = Field(None, alias="ai")
    al: int | None = Field(None, alias="al")
    all: int | None = Field(None, alias="all")
    am: int | None = Field(None, alias="am")
    an: int | None = Field(None, alias="an")
    ao: int | None = Field(None, alias="ao")
    aq: int | None = Field(None, alias="aq")
    ar: int | None = Field(None, alias="ar")
    as_: int | None = Field(None, alias="as")
    at: int | None = Field(None, alias="at")
    au: int | None = Field(None, alias="au")
    aw: int | None = Field(None, alias="aw")
    ax: int | None = Field(None, alias="ax")
    az: int | None = Field(None, alias="az")
    ba: int | None = Field(None, alias="ba")
    bb: int | None = Field(None, alias="bb")
    bd: int | None = Field(None, alias="bd")
    be: int | None = Field(None, alias="be")
    bf: int | None = Field(None, alias="bf")
    bg: int | None = Field(None, alias="bg")
    bh: int | None = Field(None, alias="bh")
    bi: int | None = Field(None, alias="bi")
    bj: int | None = Field(None, alias="bj")
    bl: int | None = Field(None, alias="bl")
    bm: int | None = Field(None, alias="bm")
    bn: int | None = Field(None, alias="bn")
    bo: int | None = Field(None, alias="bo")
    bq: int | None = Field(None, alias="bq")
    br: int | None = Field(None, alias="br")
    bs: int | None = Field(None, alias="bs")
    bt: int | None = Field(None, alias="bt")
    bv: int | None = Field(None, alias="bv")
    bw: int | None = Field(None, alias="bw")
    by: int | None = Field(None, alias="by")
    bz: int | None = Field(None, alias="bz")
    ca: int | None = Field(None, alias="ca")
    cc: int | None = Field(None, alias="cc")
    cd: int | None = Field(None, alias="cd")
    cf: int | None = Field(None, alias="cf")
    cg: int | None = Field(None, alias="cg")
    ch: int | None = Field(None, alias="ch")
    ci: int | None = Field(None, alias="ci")
    ck: int | None = Field(None, alias="ck")
    cl: int | None = Field(None, alias="cl")
    cm: int | None = Field(None, alias="cm")
    cn: int | None = Field(None, alias="cn")
    co: int | None = Field(None, alias="co")
    cr: int | None = Field(None, alias="cr")
    cu: int | None = Field(None, alias="cu")
    cv: int | None = Field(None, alias="cv")
    cw: int | None = Field(None, alias="cw")
    cx: int | None = Field(None, alias="cx")
    cy: int | None = Field(None, alias="cy")
    cz: int | None = Field(None, alias="cz")
    de: int | None = Field(None, alias="de")
    dj: int | None = Field(None, alias="dj")
    dk: int | None = Field(None, alias="dk")
    dm: int | None = Field(None, alias="dm")
    do: int | None = Field(None, alias="do")
    dz: int | None = Field(None, alias="dz")
    ec: int | None = Field(None, alias="ec")
    ee: int | None = Field(None, alias="ee")
    eg: int | None = Field(None, alias="eg")
    eh: int | None = Field(None, alias="eh")
    er: int | None = Field(None, alias="er")
    es: int | None = Field(None, alias="es")
    et: int | None = Field(None, alias="et")
    fi: int | None = Field(None, alias="fi")
    fj: int | None = Field(None, alias="fj")
    fk: int | None = Field(None, alias="fk")
    fm: int | None = Field(None, alias="fm")
    fo: int | None = Field(None, alias="fo")
    fr: int | None = Field(None, alias="fr")
    ga: int | None = Field(None, alias="ga")
    gb: int | None = Field(None, alias="gb")
    gd: int | None = Field(None, alias="gd")
    ge: int | None = Field(None, alias="ge")
    gf: int | None = Field(None, alias="gf")
    gg: int | None = Field(None, alias="gg")
    gh: int | None = Field(None, alias="gh")
    gi: int | None = Field(None, alias="gi")
    gl: int | None = Field(None, alias="gl")
    gm: int | None = Field(None, alias="gm")
    gn: int | None = Field(None, alias="gn")
    gp: int | None = Field(None, alias="gp")
    gq: int | None = Field(None, alias="gq")
    gr: int | None = Field(None, alias="gr")
    gs: int | None = Field(None, alias="gs")
    gt: int | None = Field(None, alias="gt")
    gu: int | None = Field(None, alias="gu")
    gw: int | None = Field(None, alias="gw")
    gy: int | None = Field(None, alias="gy")
    hk: int | None = Field(None, alias="hk")
    hm: int | None = Field(None, alias="hm")
    hn: int | None = Field(None, alias="hn")
    hr: int | None = Field(None, alias="hr")
    ht: int | None = Field(None, alias="ht")
    hu: int | None = Field(None, alias="hu")
    id: int | None = Field(None, alias="id")
    ie: int | None = Field(None, alias="ie")
    il: int | None = Field(None, alias="il")
    im: int | None = Field(None, alias="im")
    in_: int | None = Field(None, alias="in")
    io: int | None = Field(None, alias="io")
    iq: int | None = Field(None, alias="iq")
    ir: int | None = Field(None, alias="ir")
    is_: int | None = Field(None, alias="is")
    it: int | None = Field(None, alias="it")
    je: int | None = Field(None, alias="je")
    jm: int | None = Field(None, alias="jm")
    jo: int | None = Field(None, alias="jo")
    jp: int | None = Field(None, alias="jp")
    ke: int | None = Field(None, alias="ke")
    kg: int | None = Field(None, alias="kg")
    kh: int | None = Field(None, alias="kh")
    ki: int | None = Field(None, alias="ki")
    km: int | None = Field(None, alias="km")
    kn: int | None = Field(None, alias="kn")
    kp: int | None = Field(None, alias="kp")
    kr: int | None = Field(None, alias="kr")
    kw: int | None = Field(None, alias="kw")
    ky: int | None = Field(None, alias="ky")
    kz: int | None = Field(None, alias="kz")
    la: int | None = Field(None, alias="la")
    lb: int | None = Field(None, alias="lb")
    lc: int | None = Field(None, alias="lc")
    li: int | None = Field(None, alias="li")
    lk: int | None = Field(None, alias="lk")
    lr: int | None = Field(None, alias="lr")
    ls: int | None = Field(None, alias="ls")
    lt: int | None = Field(None, alias="lt")
    lu: int | None = Field(None, alias="lu")
    lv: int | None = Field(None, alias="lv")
    ly: int | None = Field(None, alias="ly")
    ma: int | None = Field(None, alias="ma")
    mc: int | None = Field(None, alias="mc")
    md: int | None = Field(None, alias="md")
    me: int | None = Field(None, alias="me")
    mf: int | None = Field(None, alias="mf")
    mg: int | None = Field(None, alias="mg")
    mh: int | None = Field(None, alias="mh")
    mk: int | None = Field(None, alias="mk")
    ml: int | None = Field(None, alias="ml")
    mm: int | None = Field(None, alias="mm")
    mn: int | None = Field(None, alias="mn")
    mo: int | None = Field(None, alias="mo")
    mp: int | None = Field(None, alias="mp")
    mq: int | None = Field(None, alias="mq")
    mr: int | None = Field(None, alias="mr")
    ms: int | None = Field(None, alias="ms")
    mt: int | None = Field(None, alias="mt")
    mu: int | None = Field(None, alias="mu")
    mv: int | None = Field(None, alias="mv")
    mw: int | None = Field(None, alias="mw")
    mx: int | None = Field(None, alias="mx")
    my: int | None = Field(None, alias="my")
    mz: int | None = Field(None, alias="mz")
    na: int | None = Field(None, alias="na")
    nc: int | None = Field(None, alias="nc")
    ne: int | None = Field(None, alias="ne")
    nf: int | None = Field(None, alias="nf")
    ng: int | None = Field(None, alias="ng")
    ni: int | None = Field(None, alias="ni")
    nl: int | None = Field(None, alias="nl")
    no: int | None = Field(None, alias="no")
    np: int | None = Field(None, alias="np")
    nr: int | None = Field(None, alias="nr")
    nu: int | None = Field(None, alias="nu")
    nz: int | None = Field(None, alias="nz")
    om: int | None = Field(None, alias="om")
    pa: int | None = Field(None, alias="pa")
    pe: int | None = Field(None, alias="pe")
    pf: int | None = Field(None, alias="pf")
    pg: int | None = Field(None, alias="pg")
    ph: int | None = Field(None, alias="ph")
    pk: int | None = Field(None, alias="pk")
    pl: int | None = Field(None, alias="pl")
    pm: int | None = Field(None, alias="pm")
    pn: int | None = Field(None, alias="pn")
    pr: int | None = Field(None, alias="pr")
    ps: int | None = Field(None, alias="ps")
    pt: int | None = Field(None, alias="pt")
    pw: int | None = Field(None, alias="pw")
    py: int | None = Field(None, alias="py")
    qa: int | None = Field(None, alias="qa")
    re: int | None = Field(None, alias="re")
    ro: int | None = Field(None, alias="ro")
    rs: int | None = Field(None, alias="rs")
    ru: int | None = Field(None, alias="ru")
    rw: int | None = Field(None, alias="rw")
    sa: int | None = Field(None, alias="sa")
    sb: int | None = Field(None, alias="sb")
    sc: int | None = Field(None, alias="sc")
    sd: int | None = Field(None, alias="sd")
    se: int | None = Field(None, alias="se")
    sg: int | None = Field(None, alias="sg")
    sh: int | None = Field(None, alias="sh")
    si: int | None = Field(None, alias="si")
    sj: int | None = Field(None, alias="sj")
    sk: int | None = Field(None, alias="sk")
    sl: int | None = Field(None, alias="sl")
    sm: int | None = Field(None, alias="sm")
    sn: int | None = Field(None, alias="sn")
    so: int | None = Field(None, alias="so")
    sr: int | None = Field(None, alias="sr")
    ss: int | None = Field(None, alias="ss")
    st: int | None = Field(None, alias="st")
    sv: int | None = Field(None, alias="sv")
    sx: int | None = Field(None, alias="sx")
    sy: int | None = Field(None, alias="sy")
    sz: int | None = Field(None, alias="sz")
    tc: int | None = Field(None, alias="tc")
    td: int | None = Field(None, alias="td")
    tf: int | None = Field(None, alias="tf")
    tg: int | None = Field(None, alias="tg")
    th: int | None = Field(None, alias="th")
    tj: int | None = Field(None, alias="tj")
    tk: int | None = Field(None, alias="tk")
    tl: int | None = Field(None, alias="tl")
    tm: int | None = Field(None, alias="tm")
    tn: int | None = Field(None, alias="tn")
    to: int | None = Field(None, alias="to")
    tr: int | None = Field(None, alias="tr")
    tt: int | None = Field(None, alias="tt")
    tv: int | None = Field(None, alias="tv")
    tw: int | None = Field(None, alias="tw")
    tz: int | None = Field(None, alias="tz")
    ua: int | None = Field(None, alias="ua")
    ug: int | None = Field(None, alias="ug")
    um: int | None = Field(None, alias="um")
    us: int | None = Field(None, alias="us")
    uy: int | None = Field(None, alias="uy")
    uz: int | None = Field(None, alias="uz")
    va: int | None = Field(None, alias="va")
    vc: int | None = Field(None, alias="vc")
    ve: int | None = Field(None, alias="ve")
    vg: int | None = Field(None, alias="vg")
    vi: int | None = Field(None, alias="vi")
    vn: int | None = Field(None, alias="vn")
    vu: int | None = Field(None, alias="vu")
    wf: int | None = Field(None, alias="wf")
    ws: int | None = Field(None, alias="ws")
    xk: int | None = Field(None, alias="xk")
    ye: int | None = Field(None, alias="ye")
    yt: int | None = Field(None, alias="yt")
    za: int | None = Field(None, alias="za")
    zm: int | None = Field(None, alias="zm")
    zw: int | None = Field(None, alias="zw")


class BidScheduleFields(BaseModel):
    """Pydantic model for BidSchedule fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_object_id: str | None = Field(None, alias="ad_object_id")
    bid_recurrence_type: str | None = Field(None, alias="bid_recurrence_type")
    bid_timezone: str | None = Field(None, alias="bid_timezone")
    bid_value: int | None = Field(None, alias="bid_value")
    id: str | None = Field(None, alias="id")
    status: str | None = Field(None, alias="status")
    time_end: datetime | None = Field(None, alias="time_end")
    time_start: datetime | None = Field(None, alias="time_start")


class AdCreativeWhatsAppChannelSpecFields(BaseModel):
    """Pydantic model for AdCreativeWhatsAppChannelSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    channel_id: str | None = Field(None, alias="channel_id")
    channel_url: str | None = Field(None, alias="channel_url")


class AdgroupReviewFeedbackFields(BaseModel):
    """Pydantic model for AdgroupReviewFeedback fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    global_: dict[str, str] | None = Field(None, alias="global")
    placement_specific: AdgroupPlacementSpecificReviewFeedbackFields | None = Field(
        None, alias="placement_specific"
    )


class AdjacentContentDeliveryReportFields(BaseModel):
    """Pydantic model for AdjacentContentDeliveryReport fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_id: str | None = Field(None, alias="ad_id")
    content: list[dict[str, Any]] | None = Field(None, alias="content")
    impression_id: str | None = Field(None, alias="impression_id")


class CurrencyAmountFields(BaseModel):
    """Pydantic model for CurrencyAmount fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    amount: str | None = Field(None, alias="amount")
    amount_in_hundredths: str | None = Field(None, alias="amount_in_hundredths")
    currency: str | None = Field(None, alias="currency")
    offsetted_amount: str | None = Field(None, alias="offsetted_amount")


class PageRestaurantServicesFields(BaseModel):
    """Pydantic model for PageRestaurantServices fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    catering: bool | None = Field(None, alias="catering")
    delivery: bool | None = Field(None, alias="delivery")
    groups: bool | None = Field(None, alias="groups")
    kids: bool | None = Field(None, alias="kids")
    outdoor: bool | None = Field(None, alias="outdoor")
    pickup: bool | None = Field(None, alias="pickup")
    reserve: bool | None = Field(None, alias="reserve")
    takeout: bool | None = Field(None, alias="takeout")
    waiter: bool | None = Field(None, alias="waiter")
    walkins: bool | None = Field(None, alias="walkins")


class AdCampaignBidConstraintFields(BaseModel):
    """Pydantic model for AdCampaignBidConstraint fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    roas_average_floor: int | None = Field(None, alias="roas_average_floor")


class TargetingGeoLocationPlaceFields(BaseModel):
    """Pydantic model for TargetingGeoLocationPlace fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    country: str | None = Field(None, alias="country")
    distance_unit: str | None = Field(None, alias="distance_unit")
    key: str | None = Field(None, alias="key")
    latitude: float | None = Field(None, alias="latitude")
    longitude: float | None = Field(None, alias="longitude")
    name: str | None = Field(None, alias="name")
    primary_city_id: int | None = Field(None, alias="primary_city_id")
    radius: float | None = Field(None, alias="radius")
    region_id: int | None = Field(None, alias="region_id")


class ChinaBusinessOnboardingVettingRequestFields(BaseModel):
    """Pydantic model for ChinaBusinessOnboardingVettingRequest fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_account_creation_request_status: str | None = Field(
        None, alias="ad_account_creation_request_status"
    )
    ad_account_limit: int | None = Field(None, alias="ad_account_limit")
    ad_account_number: str | None = Field(None, alias="ad_account_number")
    ad_accounts_info: list[dict[str, Any]] | None = Field(None, alias="ad_accounts_info")
    advertiser_business_id: str | None = Field(None, alias="advertiser_business_id")
    advertiser_business_name: str | None = Field(None, alias="advertiser_business_name")
    business_manager_id: str | None = Field(None, alias="business_manager_id")
    business_registration: str | None = Field(None, alias="business_registration")
    business_registration_id: str | None = Field(None, alias="business_registration_id")
    business_verification_status: str | None = Field(None, alias="business_verification_status")
    chinese_address: str | None = Field(None, alias="chinese_address")
    chinese_legal_entity_name: str | None = Field(None, alias="chinese_legal_entity_name")
    city: str | None = Field(None, alias="city")
    contact: str | None = Field(None, alias="contact")
    coupon_code: str | None = Field(None, alias="coupon_code")
    disapprove_reason: str | None = Field(None, alias="disapprove_reason")
    english_business_name: str | None = Field(None, alias="english_business_name")
    id: str | None = Field(None, alias="id")
    official_website_url: str | None = Field(None, alias="official_website_url")
    org_ad_account_count: int | None = Field(None, alias="org_ad_account_count")
    payment_type: str | None = Field(None, alias="payment_type")
    planning_agency_id: str | None = Field(None, alias="planning_agency_id")
    planning_agency_name: str | None = Field(None, alias="planning_agency_name")
    promotable_app_ids: list[str] | None = Field(None, alias="promotable_app_ids")
    promotable_page_ids: list[str] | None = Field(None, alias="promotable_page_ids")
    promotable_pages: list[dict[str, Any]] | None = Field(None, alias="promotable_pages")
    promotable_urls: list[str] | None = Field(None, alias="promotable_urls")
    request_changes_reason: str | None = Field(None, alias="request_changes_reason")
    reviewed_user: str | None = Field(None, alias="reviewed_user")
    spend_limit: int | None = Field(None, alias="spend_limit")
    status: str | None = Field(None, alias="status")
    subvertical: str | None = Field(None, alias="subvertical")
    subvertical_v2: str | None = Field(None, alias="subvertical_v2")
    supporting_document: str | None = Field(None, alias="supporting_document")
    time_changes_requested: datetime | None = Field(None, alias="time_changes_requested")
    time_created: datetime | None = Field(None, alias="time_created")
    time_updated: datetime | None = Field(None, alias="time_updated")
    time_zone: str | None = Field(None, alias="time_zone")
    used_reseller_link: bool | None = Field(None, alias="used_reseller_link")
    user_id: str | None = Field(None, alias="user_id")
    user_name: str | None = Field(None, alias="user_name")
    vertical: str | None = Field(None, alias="vertical")
    vertical_v2: str | None = Field(None, alias="vertical_v2")
    viewed_by_reseller: bool | None = Field(None, alias="viewed_by_reseller")
    zip_code: str | None = Field(None, alias="zip_code")


class AdAccountAAASimilarCampaignsFields(BaseModel):
    """Pydantic model for AdAccountAAASimilarCampaigns fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    similar_campaign_limit: int | None = Field(None, alias="similar_campaign_limit")
    similar_campaigns_info: list[dict[str, dict[str, Any]]] | None = Field(
        None, alias="similar_campaigns_info"
    )
    used_campaign_slots: int | None = Field(None, alias="used_campaign_slots")


class AdReportRunFields(BaseModel):
    """Pydantic model for AdReportRun fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    async_percent_completion: int | None = Field(None, alias="async_percent_completion")
    async_report_url: str | None = Field(None, alias="async_report_url")
    async_status: str | None = Field(None, alias="async_status")
    date_start: str | None = Field(None, alias="date_start")
    date_stop: str | None = Field(None, alias="date_stop")
    emails: list[str] | None = Field(None, alias="emails")
    error_code: int | None = Field(None, alias="error_code")
    friendly_name: str | None = Field(None, alias="friendly_name")
    id: str | None = Field(None, alias="id")
    is_async_export: int | None = Field(None, alias="is_async_export")
    is_bookmarked: bool | None = Field(None, alias="is_bookmarked")
    is_running: bool | None = Field(None, alias="is_running")
    schedule_id: str | None = Field(None, alias="schedule_id")
    time_completed: int | None = Field(None, alias="time_completed")
    time_ref: int | None = Field(None, alias="time_ref")


class PaymentPricepointsFields(BaseModel):
    """Pydantic model for PaymentPricepoints fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    mobile: list[dict[str, Any]] | None = Field(None, alias="mobile")


class RecommendedIGMediaFields(BaseModel):
    """Pydantic model for RecommendedIGMedia fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    intent_score: float | None = Field(None, alias="intent_score")


class TargetingProspectingAudienceFields(BaseModel):
    """Pydantic model for TargetingProspectingAudience fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    sources: list[dict[str, Any]] | None = Field(None, alias="sources")


class ProductCatalogDiagnosticGroupFields(BaseModel):
    """Pydantic model for ProductCatalogDiagnosticGroup fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    affected_channels: list[str] | None = Field(None, alias="affected_channels")
    affected_entity: dict[str, Any] | None = Field(None, alias="affected_entity")
    affected_features: list[dict[str, Any]] | None = Field(None, alias="affected_features")
    diagnostics: list[dict[str, Any]] | None = Field(None, alias="diagnostics")
    error_code: int | None = Field(None, alias="error_code")
    number_of_affected_entities: int | None = Field(None, alias="number_of_affected_entities")
    number_of_affected_items: int | None = Field(None, alias="number_of_affected_items")
    severity: dict[str, Any] | None = Field(None, alias="severity")
    subtitle: str | None = Field(None, alias="subtitle")
    title: str | None = Field(None, alias="title")
    type: dict[str, Any] | None = Field(None, alias="type")


class AdStudyObjectiveFields(BaseModel):
    """Pydantic model for AdStudyObjective fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    is_primary: bool | None = Field(None, alias="is_primary")
    last_updated_results: str | None = Field(None, alias="last_updated_results")
    name: str | None = Field(None, alias="name")
    results: list[str] | None = Field(None, alias="results")
    type: str | None = Field(None, alias="type")


class AdsSignalDiagnosticIssueFields(BaseModel):
    """Pydantic model for AdsSignalDiagnosticIssue fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    data_source_id: AdsPixelFields | None = Field(None, alias="data_source_id")
    data_source_type: str | None = Field(None, alias="data_source_type")
    diagnostic_type: str | None = Field(None, alias="diagnostic_type")
    event_name: str | None = Field(None, alias="event_name")
    traffic_anomaly_drop_percentage: float | None = Field(
        None, alias="traffic_anomaly_drop_percentage"
    )
    traffic_anomaly_drop_timestamp: datetime | None = Field(
        None, alias="traffic_anomaly_drop_timestamp"
    )


class CPASAdvertiserPartnershipRecommendationFields(BaseModel):
    """Pydantic model for CPASAdvertiserPartnershipRecommendation fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    advertiser_business_id: str | None = Field(None, alias="advertiser_business_id")
    brand_business_id: str | None = Field(None, alias="brand_business_id")
    brands: list[str] | None = Field(None, alias="brands")
    countries: list[str] | None = Field(None, alias="countries")
    id: str | None = Field(None, alias="id")
    merchant_business_id: str | None = Field(None, alias="merchant_business_id")
    merchant_categories: list[str] | None = Field(None, alias="merchant_categories")
    status: str | None = Field(None, alias="status")
    status_reason: str | None = Field(None, alias="status_reason")


class ProductFeedFields(BaseModel):
    """Pydantic model for ProductFeed fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    country: str | None = Field(None, alias="country")
    created_time: datetime | None = Field(None, alias="created_time")
    default_currency: str | None = Field(None, alias="default_currency")
    deletion_enabled: bool | None = Field(None, alias="deletion_enabled")
    delimiter: dict[str, Any] | None = Field(None, alias="delimiter")
    encoding: str | None = Field(None, alias="encoding")
    file_name: str | None = Field(None, alias="file_name")
    id: str | None = Field(None, alias="id")
    ingestion_source_type: dict[str, Any] | None = Field(None, alias="ingestion_source_type")
    item_sub_type: str | None = Field(None, alias="item_sub_type")
    latest_upload: ProductFeedUploadFields | None = Field(None, alias="latest_upload")
    migrated_from_feed_id: str | None = Field(None, alias="migrated_from_feed_id")
    name: str | None = Field(None, alias="name")
    override_type: str | None = Field(None, alias="override_type")
    primary_feeds: list[str] | None = Field(None, alias="primary_feeds")
    product_count: int | None = Field(None, alias="product_count")
    quoted_fields_mode: dict[str, Any] | None = Field(None, alias="quoted_fields_mode")
    schedule: ProductFeedScheduleFields | None = Field(None, alias="schedule")
    supplementary_feeds: list[str] | None = Field(None, alias="supplementary_feeds")
    update_schedule: ProductFeedScheduleFields | None = Field(None, alias="update_schedule")


class AuthLinkFields(BaseModel):
    """Pydantic model for AuthLink fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    link: str | None = Field(None, alias="link")


class BusinessPageRequestFields(BaseModel):
    """Pydantic model for BusinessPageRequest fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    page: PageFields | None = Field(None, alias="page")


class BAPIDomainFields(BaseModel):
    """Pydantic model for BAPIDomain fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    domain: str | None = Field(None, alias="domain")
    in_cool_down_until: int | None = Field(None, alias="in_cool_down_until")
    is_eligible_for_vo: bool | None = Field(None, alias="is_eligible_for_vo")
    is_in_cool_down: bool | None = Field(None, alias="is_in_cool_down")


class ReachFrequencyPredictionFields(BaseModel):
    """Pydantic model for ReachFrequencyPrediction fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: int | None = Field(None, alias="account_id")
    activity_status: ReachFrequencyActivityFields | None = Field(None, alias="activity_status")
    ad_formats: list[ReachFrequencyAdFormatFields] | None = Field(None, alias="ad_formats")
    auction_entry_option_index: int | None = Field(None, alias="auction_entry_option_index")
    audience_size_lower_bound: int | None = Field(None, alias="audience_size_lower_bound")
    audience_size_upper_bound: int | None = Field(None, alias="audience_size_upper_bound")
    business_id: int | None = Field(None, alias="business_id")
    buying_type: str | None = Field(None, alias="buying_type")
    campaign_group_id: int | None = Field(None, alias="campaign_group_id")
    campaign_id: str | None = Field(None, alias="campaign_id")
    campaign_time_start: datetime | None = Field(None, alias="campaign_time_start")
    campaign_time_stop: datetime | None = Field(None, alias="campaign_time_stop")
    currency: str | None = Field(None, alias="currency")
    curve_budget_reach: ReachFrequencyEstimatesCurveFields | None = Field(
        None, alias="curve_budget_reach"
    )
    curve_reach: list[int] | None = Field(None, alias="curve_reach")
    daily_grp_curve: list[float] | None = Field(None, alias="daily_grp_curve")
    daily_impression_curve: list[float] | None = Field(None, alias="daily_impression_curve")
    daily_impression_curve_map: list[dict[int, list[float]]] | None = Field(
        None, alias="daily_impression_curve_map"
    )
    day_parting_schedule: list[ReachFrequencyDayPartFields] | None = Field(
        None, alias="day_parting_schedule"
    )
    destination_id: str | None = Field(None, alias="destination_id")
    end_time: datetime | None = Field(None, alias="end_time")
    expiration_time: datetime | None = Field(None, alias="expiration_time")
    external_budget: int | None = Field(None, alias="external_budget")
    external_impression: int | None = Field(None, alias="external_impression")
    external_maximum_budget: int | None = Field(None, alias="external_maximum_budget")
    external_maximum_impression: str | None = Field(None, alias="external_maximum_impression")
    external_maximum_reach: int | None = Field(None, alias="external_maximum_reach")
    external_minimum_budget: int | None = Field(None, alias="external_minimum_budget")
    external_minimum_impression: int | None = Field(None, alias="external_minimum_impression")
    external_minimum_reach: int | None = Field(None, alias="external_minimum_reach")
    external_reach: int | None = Field(None, alias="external_reach")
    feed_ratio_0000: int | None = Field(None, alias="feed_ratio_0000")
    frequency_cap: int | None = Field(None, alias="frequency_cap")
    frequency_distribution_map: list[dict[int, list[float]]] | None = Field(
        None, alias="frequency_distribution_map"
    )
    frequency_distribution_map_agg: list[dict[int, list[int]]] | None = Field(
        None, alias="frequency_distribution_map_agg"
    )
    grp_audience_size: float | None = Field(None, alias="grp_audience_size")
    grp_avg_probability_map: str | None = Field(None, alias="grp_avg_probability_map")
    grp_country_audience_size: float | None = Field(None, alias="grp_country_audience_size")
    grp_curve: list[float] | None = Field(None, alias="grp_curve")
    grp_dmas_audience_size: float | None = Field(None, alias="grp_dmas_audience_size")
    grp_filtering_threshold_00: int | None = Field(None, alias="grp_filtering_threshold_00")
    grp_points: float | None = Field(None, alias="grp_points")
    grp_ratio: float | None = Field(None, alias="grp_ratio")
    grp_reach_ratio: float | None = Field(None, alias="grp_reach_ratio")
    grp_status: str | None = Field(None, alias="grp_status")
    holdout_percentage: int | None = Field(None, alias="holdout_percentage")
    id: str | None = Field(None, alias="id")
    impression_curve: list[int] | None = Field(None, alias="impression_curve")
    instagram_destination_id: str | None = Field(None, alias="instagram_destination_id")
    instream_packages: list[str] | None = Field(None, alias="instream_packages")
    interval_frequency_cap: int | None = Field(None, alias="interval_frequency_cap")
    interval_frequency_cap_reset_period: int | None = Field(
        None, alias="interval_frequency_cap_reset_period"
    )
    is_balanced_frequency: bool | None = Field(None, alias="is_balanced_frequency")
    is_bonus_media: int | None = Field(None, alias="is_bonus_media")
    is_conversion_goal: int | None = Field(None, alias="is_conversion_goal")
    is_higher_average_frequency: bool | None = Field(None, alias="is_higher_average_frequency")
    is_io: bool | None = Field(None, alias="is_io")
    is_reserved_buying: int | None = Field(None, alias="is_reserved_buying")
    is_trp: bool | None = Field(None, alias="is_trp")
    name: str | None = Field(None, alias="name")
    objective: int | None = Field(None, alias="objective")
    objective_name: str | None = Field(None, alias="objective_name")
    odax_objective: int | None = Field(None, alias="odax_objective")
    odax_objective_name: str | None = Field(None, alias="odax_objective_name")
    optimization_goal: int | None = Field(None, alias="optimization_goal")
    optimization_goal_name: str | None = Field(None, alias="optimization_goal_name")
    pause_periods: list[dict[str, Any]] | None = Field(None, alias="pause_periods")
    percent_reach_at_target_frequency: int | None = Field(
        None, alias="percent_reach_at_target_frequency"
    )
    placement_breakdown: ReachFrequencyEstimatesPlacementBreakdownFields | None = Field(
        None, alias="placement_breakdown"
    )
    placement_breakdown_map: (
        list[dict[int, ReachFrequencyEstimatesPlacementBreakdownFields]] | None
    ) = Field(None, alias="placement_breakdown_map")
    plan_name: str | None = Field(None, alias="plan_name")
    plan_type: str | None = Field(None, alias="plan_type")
    prediction_mode: int | None = Field(None, alias="prediction_mode")
    prediction_progress: int | None = Field(None, alias="prediction_progress")
    reference_id: str | None = Field(None, alias="reference_id")
    reservation_status: int | None = Field(None, alias="reservation_status")
    start_time: datetime | None = Field(None, alias="start_time")
    status: int | None = Field(None, alias="status")
    story_event_type: int | None = Field(None, alias="story_event_type")
    target_cpm: int | None = Field(None, alias="target_cpm")
    target_frequency: int | None = Field(None, alias="target_frequency")
    target_frequency_reset_period: int | None = Field(None, alias="target_frequency_reset_period")
    target_spec: TargetingFields | None = Field(None, alias="target_spec")
    time_created: datetime | None = Field(None, alias="time_created")
    time_updated: datetime | None = Field(None, alias="time_updated")
    timezone_id: int | None = Field(None, alias="timezone_id")
    timezone_name: str | None = Field(None, alias="timezone_name")
    topline_id: int | None = Field(None, alias="topline_id")
    video_view_length_constraint: int | None = Field(None, alias="video_view_length_constraint")
    viewtag: str | None = Field(None, alias="viewtag")


class AdCreativeAdDisclaimerFields(BaseModel):
    """Pydantic model for AdCreativeAdDisclaimer fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    text: str | None = Field(None, alias="text")
    title: str | None = Field(None, alias="title")
    url: str | None = Field(None, alias="url")


class AdsReportBuilderExportCoreFields(BaseModel):
    """Pydantic model for AdsReportBuilderExportCore fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    async_percent_completion: int | None = Field(None, alias="async_percent_completion")
    async_report_url: str | None = Field(None, alias="async_report_url")
    async_status: str | None = Field(None, alias="async_status")
    client_creation_value: str | None = Field(None, alias="client_creation_value")
    expiry_time: datetime | None = Field(None, alias="expiry_time")
    export_download_time: datetime | None = Field(None, alias="export_download_time")
    export_format: str | None = Field(None, alias="export_format")
    export_name: str | None = Field(None, alias="export_name")
    export_type: str | None = Field(None, alias="export_type")
    has_seen: bool | None = Field(None, alias="has_seen")
    id: str | None = Field(None, alias="id")
    is_sharing: bool | None = Field(None, alias="is_sharing")
    link_sharing_expiration_time: datetime | None = Field(
        None, alias="link_sharing_expiration_time"
    )
    link_sharing_uri: str | None = Field(None, alias="link_sharing_uri")
    time_completed: datetime | None = Field(None, alias="time_completed")
    time_start: datetime | None = Field(None, alias="time_start")


class AdCreativeStaticFallbackSpecFields(BaseModel):
    """Pydantic model for AdCreativeStaticFallbackSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    call_to_action: AdCreativeLinkDataCallToActionFields | None = Field(
        None, alias="call_to_action"
    )
    description: str | None = Field(None, alias="description")
    image_hash: str | None = Field(None, alias="image_hash")
    link: str | None = Field(None, alias="link")
    message: str | None = Field(None, alias="message")
    name: str | None = Field(None, alias="name")


class CommerceSettingsFields(BaseModel):
    """Pydantic model for CommerceSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    inventory: int | None = Field(None, alias="inventory")
    total_inventory: int | None = Field(None, alias="total_inventory")


class ManagedPartnerExtendedCreditFields(BaseModel):
    """Pydantic model for ManagedPartnerExtendedCredit fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    max_balance: CurrencyAmountFields | None = Field(None, alias="max_balance")
    receiving_credit_allocation_config: ExtendedCreditAllocationConfigFields | None = Field(
        None, alias="receiving_credit_allocation_config"
    )


class BusinessAdvertisableApplicationsResultFields(BaseModel):
    """Pydantic model for BusinessAdvertisableApplicationsResult fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    are_app_events_unavailable: bool | None = Field(None, alias="are_app_events_unavailable")
    business: BusinessFields | None = Field(None, alias="business")
    has_insight_permission: bool | None = Field(None, alias="has_insight_permission")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    photo_url: str | None = Field(None, alias="photo_url")


class LifeEventFields(BaseModel):
    """Pydantic model for LifeEvent fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    description: str | None = Field(None, alias="description")
    end_time: datetime | None = Field(None, alias="end_time")
    from_: PageFields | None = Field(None, alias="from")
    id: str | None = Field(None, alias="id")
    is_hidden: bool | None = Field(None, alias="is_hidden")
    start_time: datetime | None = Field(None, alias="start_time")
    title: str | None = Field(None, alias="title")
    updated_time: datetime | None = Field(None, alias="updated_time")


class ProductItemVideoDataFields(BaseModel):
    """Pydantic model for ProductItemVideoData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    tags: list[str] | None = Field(None, alias="tags")
    url: str | None = Field(None, alias="url")


class AdAccountRelatedIcoStudyFields(BaseModel):
    """Pydantic model for AdAccountRelatedIcoStudy fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pass  # No fields defined


class AdsDatasetFields(BaseModel):
    """Pydantic model for AdsDataset fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    can_proxy: bool | None = Field(None, alias="can_proxy")
    collection_rate: float | None = Field(None, alias="collection_rate")
    config: str | None = Field(None, alias="config")
    creation_time: datetime | None = Field(None, alias="creation_time")
    creator: UserFields | None = Field(None, alias="creator")
    dataset_id: str | None = Field(None, alias="dataset_id")
    description: str | None = Field(None, alias="description")
    duplicate_entries: int | None = Field(None, alias="duplicate_entries")
    enable_auto_assign_to_accounts: bool | None = Field(
        None, alias="enable_auto_assign_to_accounts"
    )
    enable_automatic_events: bool | None = Field(None, alias="enable_automatic_events")
    enable_automatic_matching: bool | None = Field(None, alias="enable_automatic_matching")
    enable_real_time_event_log: bool | None = Field(None, alias="enable_real_time_event_log")
    event_stats: str | None = Field(None, alias="event_stats")
    event_time_max: int | None = Field(None, alias="event_time_max")
    event_time_min: int | None = Field(None, alias="event_time_min")
    first_party_cookie_status: str | None = Field(None, alias="first_party_cookie_status")
    has_bapi_domains: bool | None = Field(None, alias="has_bapi_domains")
    has_catalog_microdata_activity: bool | None = Field(
        None, alias="has_catalog_microdata_activity"
    )
    has_ofa_redacted_keys: bool | None = Field(None, alias="has_ofa_redacted_keys")
    has_sent_pii: bool | None = Field(None, alias="has_sent_pii")
    id: str | None = Field(None, alias="id")
    is_consolidated_container: bool | None = Field(None, alias="is_consolidated_container")
    is_created_by_business: bool | None = Field(None, alias="is_created_by_business")
    is_crm: bool | None = Field(None, alias="is_crm")
    is_eligible_for_sharing_to_ad_account: bool | None = Field(
        None, alias="is_eligible_for_sharing_to_ad_account"
    )
    is_eligible_for_sharing_to_business: bool | None = Field(
        None, alias="is_eligible_for_sharing_to_business"
    )
    is_eligible_for_value_optimization: bool | None = Field(
        None, alias="is_eligible_for_value_optimization"
    )
    is_mta_use: bool | None = Field(None, alias="is_mta_use")
    is_restricted_use: bool | None = Field(None, alias="is_restricted_use")
    is_unavailable: bool | None = Field(None, alias="is_unavailable")
    last_fired_time: datetime | None = Field(None, alias="last_fired_time")
    last_upload_app: str | None = Field(None, alias="last_upload_app")
    last_upload_app_changed_time: int | None = Field(None, alias="last_upload_app_changed_time")
    last_upload_time: int | None = Field(None, alias="last_upload_time")
    late_upload_reminder_eligibility: bool | None = Field(
        None, alias="late_upload_reminder_eligibility"
    )
    match_rate_approx: int | None = Field(None, alias="match_rate_approx")
    matched_entries: int | None = Field(None, alias="matched_entries")
    name: str | None = Field(None, alias="name")
    no_ads_tracked_for_weekly_uploaded_events_reminder_eligibility: bool | None = Field(
        None, alias="no_ads_tracked_for_weekly_uploaded_events_reminder_eligibility"
    )
    num_active_ad_set_tracked: int | None = Field(None, alias="num_active_ad_set_tracked")
    num_recent_offline_conversions_uploaded: int | None = Field(
        None, alias="num_recent_offline_conversions_uploaded"
    )
    num_uploads: int | None = Field(None, alias="num_uploads")
    owner_ad_account: AdAccountFields | None = Field(None, alias="owner_ad_account")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")
    percentage_of_late_uploads_in_external_suboptimal_window: int | None = Field(
        None, alias="percentage_of_late_uploads_in_external_suboptimal_window"
    )
    permissions: OfflineConversionDataSetPermissionsFields | None = Field(None, alias="permissions")
    server_last_fired_time: datetime | None = Field(None, alias="server_last_fired_time")
    show_automatic_events: bool | None = Field(None, alias="show_automatic_events")
    upload_rate: float | None = Field(None, alias="upload_rate")
    upload_reminder_eligibility: bool | None = Field(None, alias="upload_reminder_eligibility")
    usage: OfflineConversionDataSetUsageFields | None = Field(None, alias="usage")
    valid_entries: int | None = Field(None, alias="valid_entries")


class PageSettingsFields(BaseModel):
    """Pydantic model for PageSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    setting: str | None = Field(None, alias="setting")
    value: dict[str, Any] | None = Field(None, alias="value")


class BusinessRequestFields(BaseModel):
    """Pydantic model for BusinessRequest fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    accessor: BusinessFields | None = Field(None, alias="accessor")
    creation_time: datetime | None = Field(None, alias="creation_time")
    id: str | None = Field(None, alias="id")
    object_id: str | None = Field(None, alias="object_id")
    object_type: str | None = Field(None, alias="object_type")
    permitted_tasks: list[str] | None = Field(None, alias="permitted_tasks")
    request_status: str | None = Field(None, alias="request_status")
    request_type: str | None = Field(None, alias="request_type")
    requester: str | None = Field(None, alias="requester")


class AdNetworkAnalyticsSyncQueryResultFields(BaseModel):
    """Pydantic model for AdNetworkAnalyticsSyncQueryResult fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    omitted_results: list[dict[str, Any]] | None = Field(None, alias="omitted_results")
    query_id: str | None = Field(None, alias="query_id")
    results: list[dict[str, Any]] | None = Field(None, alias="results")


class InstagramRelatedProductTagsFields(BaseModel):
    """Pydantic model for InstagramRelatedProductTags fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    checkout_setting: str | None = Field(None, alias="checkout_setting")
    id: int | None = Field(None, alias="id")
    image_uri: str | None = Field(None, alias="image_uri")
    name: str | None = Field(None, alias="name")
    price_label: str | None = Field(None, alias="price_label")
    sale_price_label: str | None = Field(None, alias="sale_price_label")


class ConnectionsTargetingFields(BaseModel):
    """Pydantic model for ConnectionsTargeting fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class ExtendedCreditFields(BaseModel):
    """Pydantic model for ExtendedCredit fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    allocated_amount: CurrencyAmountFields | None = Field(None, alias="allocated_amount")
    balance: CurrencyAmountFields | None = Field(None, alias="balance")
    credit_available: CurrencyAmountFields | None = Field(None, alias="credit_available")
    credit_type: str | None = Field(None, alias="credit_type")
    id: str | None = Field(None, alias="id")
    is_access_revoked: bool | None = Field(None, alias="is_access_revoked")
    is_automated_experience: bool | None = Field(None, alias="is_automated_experience")
    legal_entity_name: str | None = Field(None, alias="legal_entity_name")
    liable_address: CRMAddressFields | None = Field(None, alias="liable_address")
    liable_biz_name: str | None = Field(None, alias="liable_biz_name")
    max_balance: CurrencyAmountFields | None = Field(None, alias="max_balance")
    online_max_balance: CurrencyAmountFields | None = Field(None, alias="online_max_balance")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")
    owner_business_name: str | None = Field(None, alias="owner_business_name")
    partition_from: str | None = Field(None, alias="partition_from")
    receiving_credit_allocation_config: ExtendedCreditAllocationConfigFields | None = Field(
        None, alias="receiving_credit_allocation_config"
    )
    send_bill_to_address: CRMAddressFields | None = Field(None, alias="send_bill_to_address")
    send_bill_to_biz_name: str | None = Field(None, alias="send_bill_to_biz_name")
    sold_to_address: CRMAddressFields | None = Field(None, alias="sold_to_address")


class CommercePayoutFields(BaseModel):
    """Pydantic model for CommercePayout fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    amount: dict[str, Any] | None = Field(None, alias="amount")
    payout_date: str | None = Field(None, alias="payout_date")
    payout_reference_id: str | None = Field(None, alias="payout_reference_id")
    status: str | None = Field(None, alias="status")
    transfer_id: str | None = Field(None, alias="transfer_id")


class IGUpcomingEventFields(BaseModel):
    """Pydantic model for IGUpcomingEvent fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    end_time: datetime | None = Field(None, alias="end_time")
    id: str | None = Field(None, alias="id")
    notification_subtypes: list[str] | None = Field(None, alias="notification_subtypes")
    notification_target_time: str | None = Field(None, alias="notification_target_time")
    start_time: datetime | None = Field(None, alias="start_time")
    title: str | None = Field(None, alias="title")


class AdRuleScheduleFields(BaseModel):
    """Pydantic model for AdRuleSchedule fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    days: list[int] | None = Field(None, alias="days")
    end_minute: int | None = Field(None, alias="end_minute")
    start_minute: int | None = Field(None, alias="start_minute")


class AdLightCampaignFields(BaseModel):
    """Pydantic model for AdLightCampaign fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    campaign_id: str | None = Field(None, alias="campaign_id")
    id: str | None = Field(None, alias="id")


class ResellerGuidanceFields(BaseModel):
    """Pydantic model for ResellerGuidance fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_account_first_spend_date: str | None = Field(None, alias="ad_account_first_spend_date")
    ad_account_id: str | None = Field(None, alias="ad_account_id")
    adopted_guidance_l7d: list[str] | None = Field(None, alias="adopted_guidance_l7d")
    advertiser_name: str | None = Field(None, alias="advertiser_name")
    attributed_to_reseller_l7d: bool | None = Field(None, alias="attributed_to_reseller_l7d")
    available_guidance: list[str] | None = Field(None, alias="available_guidance")
    guidance_adoption_rate_l7d: float | None = Field(None, alias="guidance_adoption_rate_l7d")
    nurtured_by_reseller_l7d: bool | None = Field(None, alias="nurtured_by_reseller_l7d")
    planning_agency_name: str | None = Field(None, alias="planning_agency_name")
    recommendation_time: datetime | None = Field(None, alias="recommendation_time")
    reporting_ds: str | None = Field(None, alias="reporting_ds")
    reseller: BusinessFields | None = Field(None, alias="reseller")
    revenue_l30d: float | None = Field(None, alias="revenue_l30d")
    ultimate_advertiser_name: str | None = Field(None, alias="ultimate_advertiser_name")


class CurrencyFields(BaseModel):
    """Pydantic model for Currency fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    currency_offset: int | None = Field(None, alias="currency_offset")
    usd_exchange: float | None = Field(None, alias="usd_exchange")
    usd_exchange_inverse: float | None = Field(None, alias="usd_exchange_inverse")
    user_currency: str | None = Field(None, alias="user_currency")


class ProductItemOfferFields(BaseModel):
    """Pydantic model for ProductItemOffer fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    availability_area: list[dict[str, Any]] | None = Field(None, alias="availability_area")
    availability_radius: float | None = Field(None, alias="availability_radius")
    id: str | None = Field(None, alias="id")


class WorkUserFrontlineFields(BaseModel):
    """Pydantic model for WorkUserFrontline fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    has_access: bool | None = Field(None, alias="has_access")
    is_frontline: bool | None = Field(None, alias="is_frontline")


class PermissionFields(BaseModel):
    """Pydantic model for Permission fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    permission: str | None = Field(None, alias="permission")
    status: str | None = Field(None, alias="status")


class AdAssetBodyFields(BaseModel):
    """Pydantic model for AdAssetBody fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    text: str | None = Field(None, alias="text")
    url_tags: str | None = Field(None, alias="url_tags")


class ReachFrequencyCurveUpperConfidenceRangeFields(BaseModel):
    """Pydantic model for ReachFrequencyCurveUpperConfidenceRange fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    impression_upper: list[int] | None = Field(None, alias="impression_upper")
    num_points: int | None = Field(None, alias="num_points")
    reach: list[int] | None = Field(None, alias="reach")
    reach_upper: list[int] | None = Field(None, alias="reach_upper")
    uniq_video_views_2s_upper: list[int] | None = Field(None, alias="uniq_video_views_2s_upper")
    video_views_2s_upper: list[int] | None = Field(None, alias="video_views_2s_upper")


class WebsiteCreativeAssetSuggestionsFields(BaseModel):
    """Pydantic model for WebsiteCreativeAssetSuggestions fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_account_id: str | None = Field(None, alias="ad_account_id")
    extraction_status: str | None = Field(None, alias="extraction_status")
    id: str | None = Field(None, alias="id")
    link_url: str | None = Field(None, alias="link_url")


class CheckBatchRequestStatusFields(BaseModel):
    """Pydantic model for CheckBatchRequestStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    errors: list[dict[str, Any]] | None = Field(None, alias="errors")
    errors_total_count: int | None = Field(None, alias="errors_total_count")
    handle: str | None = Field(None, alias="handle")
    ids_of_invalid_requests: list[str] | None = Field(None, alias="ids_of_invalid_requests")
    status: str | None = Field(None, alias="status")
    warnings: list[dict[str, Any]] | None = Field(None, alias="warnings")
    warnings_total_count: int | None = Field(None, alias="warnings_total_count")


class UserPaymentMobilePricepointsFields(BaseModel):
    """Pydantic model for UserPaymentMobilePricepoints fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    mobile_country: str | None = Field(None, alias="mobile_country")
    phone_number_last4: str | None = Field(None, alias="phone_number_last4")
    pricepoints: list[dict[str, Any]] | None = Field(None, alias="pricepoints")
    user_currency: str | None = Field(None, alias="user_currency")


class WhatsAppBusinessProfileFields(BaseModel):
    """Pydantic model for WhatsAppBusinessProfile fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name_verification: dict[str, Any] | None = Field(None, alias="name_verification")
    whatsapp_business_api_data: dict[str, Any] | None = Field(
        None, alias="whatsapp_business_api_data"
    )


class LoomConfigFields(BaseModel):
    """Pydantic model for LoomConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")


class AdCreativeBrandedContentAdsFields(BaseModel):
    """Pydantic model for AdCreativeBrandedContentAds fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_format: int | None = Field(None, alias="ad_format")
    content_search_input: str | None = Field(None, alias="content_search_input")
    creator_ad_permission_type: str | None = Field(None, alias="creator_ad_permission_type")
    facebook_boost_post_access_token: str | None = Field(
        None, alias="facebook_boost_post_access_token"
    )
    instagram_boost_post_access_token: str | None = Field(
        None, alias="instagram_boost_post_access_token"
    )
    is_mca_internal: bool | None = Field(None, alias="is_mca_internal")
    parent_source_facebook_post_id: str | None = Field(None, alias="parent_source_facebook_post_id")
    parent_source_instagram_media_id: str | None = Field(
        None, alias="parent_source_instagram_media_id"
    )
    partners: list[AdCreativeBrandedContentAdsPartnersFields] | None = Field(None, alias="partners")
    product_set_partner_selection_status: str | None = Field(
        None, alias="product_set_partner_selection_status"
    )
    promoted_page_id: str | None = Field(None, alias="promoted_page_id")
    testimonial: str | None = Field(None, alias="testimonial")
    testimonial_locale: str | None = Field(None, alias="testimonial_locale")
    ui_version: int | None = Field(None, alias="ui_version")


class AdCreativeMediaSourcingSpecFields(BaseModel):
    """Pydantic model for AdCreativeMediaSourcingSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pass  # No fields defined


class BrandRequestFields(BaseModel):
    """Pydantic model for BrandRequest fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_countries: list[str] | None = Field(None, alias="ad_countries")
    additional_contacts: list[str] | None = Field(None, alias="additional_contacts")
    approval_level: int | None = Field(None, alias="approval_level")
    cells: list[dict[str, Any]] | None = Field(None, alias="cells")
    countries: list[str] | None = Field(None, alias="countries")
    deny_reason: str | None = Field(None, alias="deny_reason")
    end_time: datetime | None = Field(None, alias="end_time")
    estimated_reach: int | None = Field(None, alias="estimated_reach")
    id: str | None = Field(None, alias="id")
    is_multicell: bool | None = Field(None, alias="is_multicell")
    locale: str | None = Field(None, alias="locale")
    max_age: int | None = Field(None, alias="max_age")
    min_age: int | None = Field(None, alias="min_age")
    questions: list[dict[str, Any]] | None = Field(None, alias="questions")
    region: str | None = Field(None, alias="region")
    request_status: str | None = Field(None, alias="request_status")
    review_date: datetime | None = Field(None, alias="review_date")
    start_time: datetime | None = Field(None, alias="start_time")
    status: str | None = Field(None, alias="status")
    submit_date: datetime | None = Field(None, alias="submit_date")
    total_budget: int | None = Field(None, alias="total_budget")


class BusinessManagedPartnerEligibilityFields(BaseModel):
    """Pydantic model for BusinessManagedPartnerEligibility fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    is_eligible: bool | None = Field(None, alias="is_eligible")
    reason_code: str | None = Field(None, alias="reason_code")
    reason_description: str | None = Field(None, alias="reason_description")


class LeadGenAppointmentBookingInfoFields(BaseModel):
    """Pydantic model for LeadGenAppointmentBookingInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    advertiser_timezone_offset: str | None = Field(None, alias="advertiser_timezone_offset")
    appointment_durations: list[str] | None = Field(None, alias="appointment_durations")
    appointment_slots_by_day: list[LeadGenAppointmentSlotsByDayFields] | None = Field(
        None, alias="appointment_slots_by_day"
    )


class WearableDevicePublicKeyFields(BaseModel):
    """Pydantic model for WearableDevicePublicKey fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    base64_encoded_public_key: str | None = Field(None, alias="base64_encoded_public_key")
    creation_time_on_device: datetime | None = Field(None, alias="creation_time_on_device")
    device_uuid: str | None = Field(None, alias="device_uuid")
    id: str | None = Field(None, alias="id")
    key_type: str | None = Field(None, alias="key_type")
    owner_id: str | None = Field(None, alias="owner_id")
    product_use_case: str | None = Field(None, alias="product_use_case")
    version: str | None = Field(None, alias="version")


class AdRuleTriggerFields(BaseModel):
    """Pydantic model for AdRuleTrigger fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    field: str | None = Field(None, alias="field")
    operator: dict[str, Any] | None = Field(None, alias="operator")
    type: dict[str, Any] | None = Field(None, alias="type")
    value: dict[str, Any] | None = Field(None, alias="value")


class AdCreativePlatformCustomizationFields(BaseModel):
    """Pydantic model for AdCreativePlatformCustomization fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    instagram: dict[str, Any] | None = Field(None, alias="instagram")


class AdRuleExecutionOptionsFields(BaseModel):
    """Pydantic model for AdRuleExecutionOptions fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    field: str | None = Field(None, alias="field")
    operator: dict[str, Any] | None = Field(None, alias="operator")
    value: dict[str, Any] | None = Field(None, alias="value")


class AdAccountAdRulesCountByTypeFields(BaseModel):
    """Pydantic model for AdAccountAdRulesCountByType fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    count: int | None = Field(None, alias="count")
    evaluation_type: str | None = Field(None, alias="evaluation_type")


class AudioReleaseFields(BaseModel):
    """Pydantic model for AudioRelease fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    album_title: str | None = Field(None, alias="album_title")
    asset_availability_status: list[dict[int, dict[str, Any]]] | None = Field(
        None, alias="asset_availability_status"
    )
    audio_availability_status: str | None = Field(None, alias="audio_availability_status")
    audio_release_image_uri: str | None = Field(None, alias="audio_release_image_uri")
    created_time: datetime | None = Field(None, alias="created_time")
    displayed_artist: str | None = Field(None, alias="displayed_artist")
    ean: str | None = Field(None, alias="ean")
    genre: str | None = Field(None, alias="genre")
    grid: str | None = Field(None, alias="grid")
    id: str | None = Field(None, alias="id")
    isrc: str | None = Field(None, alias="isrc")
    label_name: str | None = Field(None, alias="label_name")
    original_release_date: datetime | None = Field(None, alias="original_release_date")
    parental_warning_type: str | None = Field(None, alias="parental_warning_type")
    proprietary_id: str | None = Field(None, alias="proprietary_id")
    upc: str | None = Field(None, alias="upc")


class UnifiedThreadFields(BaseModel):
    """Pydantic model for UnifiedThread fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    can_reply: bool | None = Field(None, alias="can_reply")
    folder: str | None = Field(None, alias="folder")
    former_participants: dict[str, Any] | None = Field(None, alias="former_participants")
    id: str | None = Field(None, alias="id")
    is_subscribed: bool | None = Field(None, alias="is_subscribed")
    link: str | None = Field(None, alias="link")
    linked_group: GroupFields | None = Field(None, alias="linked_group")
    message_count: int | None = Field(None, alias="message_count")
    name: str | None = Field(None, alias="name")
    participants: dict[str, Any] | None = Field(None, alias="participants")
    scoped_thread_key: str | None = Field(None, alias="scoped_thread_key")
    senders: dict[str, Any] | None = Field(None, alias="senders")
    snippet: str | None = Field(None, alias="snippet")
    subject: str | None = Field(None, alias="subject")
    unread_count: int | None = Field(None, alias="unread_count")
    updated_time: datetime | None = Field(None, alias="updated_time")
    wallpaper: str | None = Field(None, alias="wallpaper")


class BrandedContentShadowIGUserIDFields(BaseModel):
    """Pydantic model for BrandedContentShadowIGUserID fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")


class CustomAudienceGroupFields(BaseModel):
    """Pydantic model for CustomAudienceGroup fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    audience_type_param_name: str | None = Field(None, alias="audience_type_param_name")
    existing_customer_tag: str | None = Field(None, alias="existing_customer_tag")
    new_customer_tag: str | None = Field(None, alias="new_customer_tag")


class AdAccountLiveVideoAdvertiserFields(BaseModel):
    """Pydantic model for AdAccountLiveVideoAdvertiser fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    is_lva_toggle_on: bool | None = Field(None, alias="is_lva_toggle_on")
    lva_default_budget: int | None = Field(None, alias="lva_default_budget")
    should_default_current_live: bool | None = Field(None, alias="should_default_current_live")
    should_default_scheduled_live: bool | None = Field(None, alias="should_default_scheduled_live")
    should_show_lva_toggle: bool | None = Field(None, alias="should_show_lva_toggle")


class UniqueAdCreativeFields(BaseModel):
    """Pydantic model for UniqueAdCreative fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    sample_creative: AdCreativeFields | None = Field(None, alias="sample_creative")
    visual_hash: int | None = Field(None, alias="visual_hash")


class AdAsyncRequestSetNotificationResultFields(BaseModel):
    """Pydantic model for AdAsyncRequestSetNotificationResult fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    response: str | None = Field(None, alias="response")
    status: str | None = Field(None, alias="status")


class CampaignGroupCollaborativeAdsPartnerInfoFields(BaseModel):
    """Pydantic model for CampaignGroupCollaborativeAdsPartnerInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pass  # No fields defined


class CatalogBasedTargetingFields(BaseModel):
    """Pydantic model for CatalogBasedTargeting fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    geo_targeting_type: str | None = Field(None, alias="geo_targeting_type")


class IPObjectFields(BaseModel):
    """Pydantic model for IPObject fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ip_permission: str | None = Field(None, alias="ip_permission")
    user: dict[str, Any] | None = Field(None, alias="user")


class AdsInsightsFields(BaseModel):
    """Pydantic model for AdsInsights fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_currency: str | None = Field(None, alias="account_currency")
    account_id: str | None = Field(None, alias="account_id")
    account_name: str | None = Field(None, alias="account_name")
    action_values: list[AdsActionStatsFields] | None = Field(None, alias="action_values")
    actions: list[AdsActionStatsFields] | None = Field(None, alias="actions")
    ad_click_actions: list[AdsActionStatsFields] | None = Field(None, alias="ad_click_actions")
    ad_id: str | None = Field(None, alias="ad_id")
    ad_impression_actions: list[AdsActionStatsFields] | None = Field(
        None, alias="ad_impression_actions"
    )
    ad_name: str | None = Field(None, alias="ad_name")
    adset_end: str | None = Field(None, alias="adset_end")
    adset_id: str | None = Field(None, alias="adset_id")
    adset_name: str | None = Field(None, alias="adset_name")
    adset_start: str | None = Field(None, alias="adset_start")
    age_targeting: str | None = Field(None, alias="age_targeting")
    attribution_setting: str | None = Field(None, alias="attribution_setting")
    auction_bid: str | None = Field(None, alias="auction_bid")
    auction_competitiveness: str | None = Field(None, alias="auction_competitiveness")
    auction_max_competitor_bid: str | None = Field(None, alias="auction_max_competitor_bid")
    average_purchases_conversion_value: list[AdsActionStatsFields] | None = Field(
        None, alias="average_purchases_conversion_value"
    )
    buying_type: str | None = Field(None, alias="buying_type")
    campaign_id: str | None = Field(None, alias="campaign_id")
    campaign_name: str | None = Field(None, alias="campaign_name")
    canvas_avg_view_percent: str | None = Field(None, alias="canvas_avg_view_percent")
    canvas_avg_view_time: str | None = Field(None, alias="canvas_avg_view_time")
    catalog_segment_actions: list[AdsActionStatsFields] | None = Field(
        None, alias="catalog_segment_actions"
    )
    catalog_segment_value: list[AdsActionStatsFields] | None = Field(
        None, alias="catalog_segment_value"
    )
    catalog_segment_value_mobile_purchase_roas: list[AdsActionStatsFields] | None = Field(
        None, alias="catalog_segment_value_mobile_purchase_roas"
    )
    catalog_segment_value_omni_purchase_roas: list[AdsActionStatsFields] | None = Field(
        None, alias="catalog_segment_value_omni_purchase_roas"
    )
    catalog_segment_value_website_purchase_roas: list[AdsActionStatsFields] | None = Field(
        None, alias="catalog_segment_value_website_purchase_roas"
    )
    clicks: str | None = Field(None, alias="clicks")
    conversion_lead_rate: list[AdsActionStatsFields] | None = Field(
        None, alias="conversion_lead_rate"
    )
    conversion_leads: list[AdsActionStatsFields] | None = Field(None, alias="conversion_leads")
    conversion_rate_ranking: str | None = Field(None, alias="conversion_rate_ranking")
    conversion_values: list[AdsActionStatsFields] | None = Field(None, alias="conversion_values")
    conversions: list[AdsActionStatsFields] | None = Field(None, alias="conversions")
    converted_product_app_custom_event_fb_mobile_purchase: list[AdsActionStatsFields] | None = (
        Field(None, alias="converted_product_app_custom_event_fb_mobile_purchase")
    )
    converted_product_app_custom_event_fb_mobile_purchase_value: (
        list[AdsActionStatsFields] | None
    ) = Field(None, alias="converted_product_app_custom_event_fb_mobile_purchase_value")
    converted_product_offline_purchase: list[AdsActionStatsFields] | None = Field(
        None, alias="converted_product_offline_purchase"
    )
    converted_product_offline_purchase_value: list[AdsActionStatsFields] | None = Field(
        None, alias="converted_product_offline_purchase_value"
    )
    converted_product_omni_purchase: list[AdsActionStatsFields] | None = Field(
        None, alias="converted_product_omni_purchase"
    )
    converted_product_omni_purchase_values: list[AdsActionStatsFields] | None = Field(
        None, alias="converted_product_omni_purchase_values"
    )
    converted_product_quantity: list[AdsActionStatsFields] | None = Field(
        None, alias="converted_product_quantity"
    )
    converted_product_value: list[AdsActionStatsFields] | None = Field(
        None, alias="converted_product_value"
    )
    converted_product_website_pixel_purchase: list[AdsActionStatsFields] | None = Field(
        None, alias="converted_product_website_pixel_purchase"
    )
    converted_product_website_pixel_purchase_value: list[AdsActionStatsFields] | None = Field(
        None, alias="converted_product_website_pixel_purchase_value"
    )
    converted_promoted_product_app_custom_event_fb_mobile_purchase: (
        list[AdsActionStatsFields] | None
    ) = Field(None, alias="converted_promoted_product_app_custom_event_fb_mobile_purchase")
    converted_promoted_product_app_custom_event_fb_mobile_purchase_value: (
        list[AdsActionStatsFields] | None
    ) = Field(None, alias="converted_promoted_product_app_custom_event_fb_mobile_purchase_value")
    converted_promoted_product_offline_purchase: list[AdsActionStatsFields] | None = Field(
        None, alias="converted_promoted_product_offline_purchase"
    )
    converted_promoted_product_offline_purchase_value: list[AdsActionStatsFields] | None = Field(
        None, alias="converted_promoted_product_offline_purchase_value"
    )
    converted_promoted_product_omni_purchase: list[AdsActionStatsFields] | None = Field(
        None, alias="converted_promoted_product_omni_purchase"
    )
    converted_promoted_product_omni_purchase_values: list[AdsActionStatsFields] | None = Field(
        None, alias="converted_promoted_product_omni_purchase_values"
    )
    converted_promoted_product_quantity: list[AdsActionStatsFields] | None = Field(
        None, alias="converted_promoted_product_quantity"
    )
    converted_promoted_product_value: list[AdsActionStatsFields] | None = Field(
        None, alias="converted_promoted_product_value"
    )
    converted_promoted_product_website_pixel_purchase: list[AdsActionStatsFields] | None = Field(
        None, alias="converted_promoted_product_website_pixel_purchase"
    )
    converted_promoted_product_website_pixel_purchase_value: list[AdsActionStatsFields] | None = (
        Field(None, alias="converted_promoted_product_website_pixel_purchase_value")
    )
    cost_per_15_sec_video_view: list[AdsActionStatsFields] | None = Field(
        None, alias="cost_per_15_sec_video_view"
    )
    cost_per_2_sec_continuous_video_view: list[AdsActionStatsFields] | None = Field(
        None, alias="cost_per_2_sec_continuous_video_view"
    )
    cost_per_action_type: list[AdsActionStatsFields] | None = Field(
        None, alias="cost_per_action_type"
    )
    cost_per_ad_click: list[AdsActionStatsFields] | None = Field(None, alias="cost_per_ad_click")
    cost_per_conversion: list[AdsActionStatsFields] | None = Field(
        None, alias="cost_per_conversion"
    )
    cost_per_conversion_lead: list[AdsActionStatsFields] | None = Field(
        None, alias="cost_per_conversion_lead"
    )
    cost_per_dda_countby_convs: str | None = Field(None, alias="cost_per_dda_countby_convs")
    cost_per_estimated_ad_recallers: str | None = Field(
        None, alias="cost_per_estimated_ad_recallers"
    )
    cost_per_inline_link_click: str | None = Field(None, alias="cost_per_inline_link_click")
    cost_per_inline_post_engagement: str | None = Field(
        None, alias="cost_per_inline_post_engagement"
    )
    cost_per_objective_result: list[dict[str, Any]] | None = Field(
        None, alias="cost_per_objective_result"
    )
    cost_per_one_thousand_ad_impression: list[AdsActionStatsFields] | None = Field(
        None, alias="cost_per_one_thousand_ad_impression"
    )
    cost_per_outbound_click: list[AdsActionStatsFields] | None = Field(
        None, alias="cost_per_outbound_click"
    )
    cost_per_result: list[dict[str, Any]] | None = Field(None, alias="cost_per_result")
    cost_per_thruplay: list[AdsActionStatsFields] | None = Field(None, alias="cost_per_thruplay")
    cost_per_unique_action_type: list[AdsActionStatsFields] | None = Field(
        None, alias="cost_per_unique_action_type"
    )
    cost_per_unique_click: str | None = Field(None, alias="cost_per_unique_click")
    cost_per_unique_conversion: list[AdsActionStatsFields] | None = Field(
        None, alias="cost_per_unique_conversion"
    )
    cost_per_unique_inline_link_click: str | None = Field(
        None, alias="cost_per_unique_inline_link_click"
    )
    cost_per_unique_outbound_click: list[AdsActionStatsFields] | None = Field(
        None, alias="cost_per_unique_outbound_click"
    )
    cpc: str | None = Field(None, alias="cpc")
    cpm: str | None = Field(None, alias="cpm")
    cpp: str | None = Field(None, alias="cpp")
    created_time: str | None = Field(None, alias="created_time")
    creative_media_type: str | None = Field(None, alias="creative_media_type")
    ctr: str | None = Field(None, alias="ctr")
    date_start: str | None = Field(None, alias="date_start")
    date_stop: str | None = Field(None, alias="date_stop")
    dda_countby_convs: str | None = Field(None, alias="dda_countby_convs")
    dda_results: list[dict[str, Any]] | None = Field(None, alias="dda_results")
    engagement_rate_ranking: str | None = Field(None, alias="engagement_rate_ranking")
    estimated_ad_recall_rate: str | None = Field(None, alias="estimated_ad_recall_rate")
    estimated_ad_recall_rate_lower_bound: str | None = Field(
        None, alias="estimated_ad_recall_rate_lower_bound"
    )
    estimated_ad_recall_rate_upper_bound: str | None = Field(
        None, alias="estimated_ad_recall_rate_upper_bound"
    )
    estimated_ad_recallers: str | None = Field(None, alias="estimated_ad_recallers")
    estimated_ad_recallers_lower_bound: str | None = Field(
        None, alias="estimated_ad_recallers_lower_bound"
    )
    estimated_ad_recallers_upper_bound: str | None = Field(
        None, alias="estimated_ad_recallers_upper_bound"
    )
    frequency: str | None = Field(None, alias="frequency")
    full_view_impressions: str | None = Field(None, alias="full_view_impressions")
    full_view_reach: str | None = Field(None, alias="full_view_reach")
    gender_targeting: str | None = Field(None, alias="gender_targeting")
    impressions: str | None = Field(None, alias="impressions")
    inline_link_click_ctr: str | None = Field(None, alias="inline_link_click_ctr")
    inline_link_clicks: str | None = Field(None, alias="inline_link_clicks")
    inline_post_engagement: str | None = Field(None, alias="inline_post_engagement")
    instagram_upcoming_event_reminders_set: str | None = Field(
        None, alias="instagram_upcoming_event_reminders_set"
    )
    instant_experience_clicks_to_open: str | None = Field(
        None, alias="instant_experience_clicks_to_open"
    )
    instant_experience_clicks_to_start: str | None = Field(
        None, alias="instant_experience_clicks_to_start"
    )
    instant_experience_outbound_clicks: list[AdsActionStatsFields] | None = Field(
        None, alias="instant_experience_outbound_clicks"
    )
    interactive_component_tap: list[AdsActionStatsFields] | None = Field(
        None, alias="interactive_component_tap"
    )
    labels: str | None = Field(None, alias="labels")
    landing_page_view_actions_per_link_click: str | None = Field(
        None, alias="landing_page_view_actions_per_link_click"
    )
    landing_page_view_per_link_click: str | None = Field(
        None, alias="landing_page_view_per_link_click"
    )
    landing_page_view_per_purchase_rate: str | None = Field(
        None, alias="landing_page_view_per_purchase_rate"
    )
    location: str | None = Field(None, alias="location")
    marketing_messages_click_rate_benchmark: str | None = Field(
        None, alias="marketing_messages_click_rate_benchmark"
    )
    marketing_messages_cost_per_delivered: str | None = Field(
        None, alias="marketing_messages_cost_per_delivered"
    )
    marketing_messages_cost_per_link_btn_click: str | None = Field(
        None, alias="marketing_messages_cost_per_link_btn_click"
    )
    marketing_messages_delivered: str | None = Field(None, alias="marketing_messages_delivered")
    marketing_messages_delivery_rate: str | None = Field(
        None, alias="marketing_messages_delivery_rate"
    )
    marketing_messages_link_btn_click: str | None = Field(
        None, alias="marketing_messages_link_btn_click"
    )
    marketing_messages_link_btn_click_rate: str | None = Field(
        None, alias="marketing_messages_link_btn_click_rate"
    )
    marketing_messages_media_view_rate: str | None = Field(
        None, alias="marketing_messages_media_view_rate"
    )
    marketing_messages_phone_call_btn_click_rate: str | None = Field(
        None, alias="marketing_messages_phone_call_btn_click_rate"
    )
    marketing_messages_quick_reply_btn_click: str | None = Field(
        None, alias="marketing_messages_quick_reply_btn_click"
    )
    marketing_messages_quick_reply_btn_click_rate: str | None = Field(
        None, alias="marketing_messages_quick_reply_btn_click_rate"
    )
    marketing_messages_read: str | None = Field(None, alias="marketing_messages_read")
    marketing_messages_read_rate: str | None = Field(None, alias="marketing_messages_read_rate")
    marketing_messages_read_rate_benchmark: str | None = Field(
        None, alias="marketing_messages_read_rate_benchmark"
    )
    marketing_messages_sent: str | None = Field(None, alias="marketing_messages_sent")
    marketing_messages_spend: str | None = Field(None, alias="marketing_messages_spend")
    marketing_messages_spend_currency: str | None = Field(
        None, alias="marketing_messages_spend_currency"
    )
    marketing_messages_website_add_to_cart: str | None = Field(
        None, alias="marketing_messages_website_add_to_cart"
    )
    marketing_messages_website_initiate_checkout: str | None = Field(
        None, alias="marketing_messages_website_initiate_checkout"
    )
    marketing_messages_website_purchase: str | None = Field(
        None, alias="marketing_messages_website_purchase"
    )
    marketing_messages_website_purchase_values: str | None = Field(
        None, alias="marketing_messages_website_purchase_values"
    )
    mobile_app_purchase_roas: list[AdsActionStatsFields] | None = Field(
        None, alias="mobile_app_purchase_roas"
    )
    objective: str | None = Field(None, alias="objective")
    objective_result_rate: list[dict[str, Any]] | None = Field(None, alias="objective_result_rate")
    objective_results: list[dict[str, Any]] | None = Field(None, alias="objective_results")
    onsite_conversion_messaging_detected_purchase_deduped: list[AdsActionStatsFields] | None = (
        Field(None, alias="onsite_conversion_messaging_detected_purchase_deduped")
    )
    optimization_goal: str | None = Field(None, alias="optimization_goal")
    outbound_clicks: list[AdsActionStatsFields] | None = Field(None, alias="outbound_clicks")
    outbound_clicks_ctr: list[AdsActionStatsFields] | None = Field(
        None, alias="outbound_clicks_ctr"
    )
    place_page_name: str | None = Field(None, alias="place_page_name")
    product_brand: str | None = Field(None, alias="product_brand")
    product_category: str | None = Field(None, alias="product_category")
    product_content_id: str | None = Field(None, alias="product_content_id")
    product_custom_label_0: str | None = Field(None, alias="product_custom_label_0")
    product_custom_label_1: str | None = Field(None, alias="product_custom_label_1")
    product_custom_label_2: str | None = Field(None, alias="product_custom_label_2")
    product_custom_label_3: str | None = Field(None, alias="product_custom_label_3")
    product_custom_label_4: str | None = Field(None, alias="product_custom_label_4")
    product_group_content_id: str | None = Field(None, alias="product_group_content_id")
    product_group_retailer_id: str | None = Field(None, alias="product_group_retailer_id")
    product_name: str | None = Field(None, alias="product_name")
    product_retailer_id: str | None = Field(None, alias="product_retailer_id")
    purchase_per_landing_page_view: str | None = Field(None, alias="purchase_per_landing_page_view")
    purchase_roas: list[AdsActionStatsFields] | None = Field(None, alias="purchase_roas")
    purchases_per_link_click: str | None = Field(None, alias="purchases_per_link_click")
    qualifying_question_qualify_answer_rate: str | None = Field(
        None, alias="qualifying_question_qualify_answer_rate"
    )
    quality_ranking: str | None = Field(None, alias="quality_ranking")
    reach: str | None = Field(None, alias="reach")
    result_rate: list[dict[str, Any]] | None = Field(None, alias="result_rate")
    result_values_performance_indicator: str | None = Field(
        None, alias="result_values_performance_indicator"
    )
    results: list[dict[str, Any]] | None = Field(None, alias="results")
    shops_assisted_purchases: str | None = Field(None, alias="shops_assisted_purchases")
    social_spend: str | None = Field(None, alias="social_spend")
    spend: str | None = Field(None, alias="spend")
    total_postbacks: str | None = Field(None, alias="total_postbacks")
    total_postbacks_detailed: list[AdsActionStatsFields] | None = Field(
        None, alias="total_postbacks_detailed"
    )
    total_postbacks_detailed_v4: list[AdsActionStatsFields] | None = Field(
        None, alias="total_postbacks_detailed_v4"
    )
    unique_actions: list[AdsActionStatsFields] | None = Field(None, alias="unique_actions")
    unique_clicks: str | None = Field(None, alias="unique_clicks")
    unique_conversions: list[AdsActionStatsFields] | None = Field(None, alias="unique_conversions")
    unique_ctr: str | None = Field(None, alias="unique_ctr")
    unique_inline_link_click_ctr: str | None = Field(None, alias="unique_inline_link_click_ctr")
    unique_inline_link_clicks: str | None = Field(None, alias="unique_inline_link_clicks")
    unique_link_clicks_ctr: str | None = Field(None, alias="unique_link_clicks_ctr")
    unique_outbound_clicks: list[AdsActionStatsFields] | None = Field(
        None, alias="unique_outbound_clicks"
    )
    unique_outbound_clicks_ctr: list[AdsActionStatsFields] | None = Field(
        None, alias="unique_outbound_clicks_ctr"
    )
    unique_video_continuous_2_sec_watched_actions: list[AdsActionStatsFields] | None = Field(
        None, alias="unique_video_continuous_2_sec_watched_actions"
    )
    unique_video_view_15_sec: list[AdsActionStatsFields] | None = Field(
        None, alias="unique_video_view_15_sec"
    )
    updated_time: str | None = Field(None, alias="updated_time")
    video_15_sec_watched_actions: list[AdsActionStatsFields] | None = Field(
        None, alias="video_15_sec_watched_actions"
    )
    video_30_sec_watched_actions: list[AdsActionStatsFields] | None = Field(
        None, alias="video_30_sec_watched_actions"
    )
    video_avg_time_watched_actions: list[AdsActionStatsFields] | None = Field(
        None, alias="video_avg_time_watched_actions"
    )
    video_continuous_2_sec_watched_actions: list[AdsActionStatsFields] | None = Field(
        None, alias="video_continuous_2_sec_watched_actions"
    )
    video_p100_watched_actions: list[AdsActionStatsFields] | None = Field(
        None, alias="video_p100_watched_actions"
    )
    video_p25_watched_actions: list[AdsActionStatsFields] | None = Field(
        None, alias="video_p25_watched_actions"
    )
    video_p50_watched_actions: list[AdsActionStatsFields] | None = Field(
        None, alias="video_p50_watched_actions"
    )
    video_p75_watched_actions: list[AdsActionStatsFields] | None = Field(
        None, alias="video_p75_watched_actions"
    )
    video_p95_watched_actions: list[AdsActionStatsFields] | None = Field(
        None, alias="video_p95_watched_actions"
    )
    video_play_actions: list[AdsActionStatsFields] | None = Field(None, alias="video_play_actions")
    video_play_curve_actions: list[AdsHistogramStatsFields] | None = Field(
        None, alias="video_play_curve_actions"
    )
    video_play_retention_0_to_15s_actions: list[AdsHistogramStatsFields] | None = Field(
        None, alias="video_play_retention_0_to_15s_actions"
    )
    video_play_retention_20_to_60s_actions: list[AdsHistogramStatsFields] | None = Field(
        None, alias="video_play_retention_20_to_60s_actions"
    )
    video_play_retention_graph_actions: list[AdsHistogramStatsFields] | None = Field(
        None, alias="video_play_retention_graph_actions"
    )
    video_thruplay_watched_actions: list[AdsActionStatsFields] | None = Field(
        None, alias="video_thruplay_watched_actions"
    )
    video_time_watched_actions: list[AdsActionStatsFields] | None = Field(
        None, alias="video_time_watched_actions"
    )
    video_view_per_impression: list[AdsActionStatsFields] | None = Field(
        None, alias="video_view_per_impression"
    )
    website_ctr: list[AdsActionStatsFields] | None = Field(None, alias="website_ctr")
    website_purchase_roas: list[AdsActionStatsFields] | None = Field(
        None, alias="website_purchase_roas"
    )
    wish_bid: str | None = Field(None, alias="wish_bid")


class ProductCatalogLocalizationSettingsFields(BaseModel):
    """Pydantic model for ProductCatalogLocalizationSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    default_country: str | None = Field(None, alias="default_country")
    default_language: str | None = Field(None, alias="default_language")
    id: str | None = Field(None, alias="id")


class MessageDeliveryEstimateFields(BaseModel):
    """Pydantic model for MessageDeliveryEstimate fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    estimate_cost: float | None = Field(None, alias="estimate_cost")
    estimate_cost_lower_bound: float | None = Field(None, alias="estimate_cost_lower_bound")
    estimate_cost_upper_bound: float | None = Field(None, alias="estimate_cost_upper_bound")
    estimate_coverage_lower_bound: int | None = Field(None, alias="estimate_coverage_lower_bound")
    estimate_coverage_upper_bound: int | None = Field(None, alias="estimate_coverage_upper_bound")
    estimate_delivery: int | None = Field(None, alias="estimate_delivery")
    estimate_delivery_lower_bound: int | None = Field(None, alias="estimate_delivery_lower_bound")
    estimate_delivery_upper_bound: int | None = Field(None, alias="estimate_delivery_upper_bound")
    estimate_status: str | None = Field(None, alias="estimate_status")


class AdAsyncRequestFields(BaseModel):
    """Pydantic model for AdAsyncRequest fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    async_request_set: AdAsyncRequestSetFields | None = Field(None, alias="async_request_set")
    created_time: datetime | None = Field(None, alias="created_time")
    id: str | None = Field(None, alias="id")
    input: dict[str, Any] | None = Field(None, alias="input")
    result: dict[str, Any] | None = Field(None, alias="result")
    scope_object_id: str | None = Field(None, alias="scope_object_id")
    status: str | None = Field(None, alias="status")
    type: str | None = Field(None, alias="type")
    updated_time: datetime | None = Field(None, alias="updated_time")


class CommentFields(BaseModel):
    """Pydantic model for Comment fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    admin_creator: UserFields | None = Field(None, alias="admin_creator")
    application: ApplicationFields | None = Field(None, alias="application")
    attachment: dict[str, Any] | None = Field(None, alias="attachment")
    can_comment: bool | None = Field(None, alias="can_comment")
    can_hide: bool | None = Field(None, alias="can_hide")
    can_like: bool | None = Field(None, alias="can_like")
    can_remove: bool | None = Field(None, alias="can_remove")
    can_reply_privately: bool | None = Field(None, alias="can_reply_privately")
    comment_count: int | None = Field(None, alias="comment_count")
    created_time: datetime | None = Field(None, alias="created_time")
    from_: dict[str, Any] | None = Field(None, alias="from")
    id: str | None = Field(None, alias="id")
    is_hidden: bool | None = Field(None, alias="is_hidden")
    is_private: bool | None = Field(None, alias="is_private")
    like_count: int | None = Field(None, alias="like_count")
    live_broadcast_timestamp: int | None = Field(None, alias="live_broadcast_timestamp")
    message: str | None = Field(None, alias="message")
    message_tags: list[EntityAtTextRangeFields] | None = Field(None, alias="message_tags")
    object: dict[str, Any] | None = Field(None, alias="object")
    parent: CommentFields | None = Field(None, alias="parent")
    permalink_url: str | None = Field(None, alias="permalink_url")
    private_reply_conversation: dict[str, Any] | None = Field(
        None, alias="private_reply_conversation"
    )
    user_likes: bool | None = Field(None, alias="user_likes")


class AdCreativePhotoDataFields(BaseModel):
    """Pydantic model for AdCreativePhotoData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    branded_content_shared_to_sponsor_status: str | None = Field(
        None, alias="branded_content_shared_to_sponsor_status"
    )
    branded_content_sponsor_page_id: str | None = Field(
        None, alias="branded_content_sponsor_page_id"
    )
    caption: str | None = Field(None, alias="caption")
    image_hash: str | None = Field(None, alias="image_hash")
    page_welcome_message: str | None = Field(None, alias="page_welcome_message")
    url: str | None = Field(None, alias="url")


class PagePostExperimentFields(BaseModel):
    """Pydantic model for PagePostExperiment fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    auto_resolve_settings: dict[str, Any] | None = Field(None, alias="auto_resolve_settings")
    control_video_id: str | None = Field(None, alias="control_video_id")
    creation_time: datetime | None = Field(None, alias="creation_time")
    creator: UserFields | None = Field(None, alias="creator")
    declared_winning_time: datetime | None = Field(None, alias="declared_winning_time")
    declared_winning_video_id: str | None = Field(None, alias="declared_winning_video_id")
    description: str | None = Field(None, alias="description")
    experiment_video_ids: list[str] | None = Field(None, alias="experiment_video_ids")
    id: str | None = Field(None, alias="id")
    insight_snapshots: list[dict[datetime, list[dict[int, dict[str, Any]]]]] | None = Field(
        None, alias="insight_snapshots"
    )
    name: str | None = Field(None, alias="name")
    optimization_goal: str | None = Field(None, alias="optimization_goal")
    publish_status: str | None = Field(None, alias="publish_status")
    publish_time: datetime | None = Field(None, alias="publish_time")
    scheduled_experiment_timestamp: datetime | None = Field(
        None, alias="scheduled_experiment_timestamp"
    )
    updated_time: datetime | None = Field(None, alias="updated_time")


class AutomotiveModelFields(BaseModel):
    """Pydantic model for AutomotiveModel fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    applinks: CatalogItemAppLinksFields | None = Field(None, alias="applinks")
    automotive_model_id: str | None = Field(None, alias="automotive_model_id")
    availability: str | None = Field(None, alias="availability")
    body_style: str | None = Field(None, alias="body_style")
    category_specific_fields: CatalogSubVerticalListFields | None = Field(
        None, alias="category_specific_fields"
    )
    currency: str | None = Field(None, alias="currency")
    custom_label_0: str | None = Field(None, alias="custom_label_0")
    custom_label_1: str | None = Field(None, alias="custom_label_1")
    custom_label_2: str | None = Field(None, alias="custom_label_2")
    custom_label_3: str | None = Field(None, alias="custom_label_3")
    custom_label_4: str | None = Field(None, alias="custom_label_4")
    custom_number_0: int | None = Field(None, alias="custom_number_0")
    custom_number_1: int | None = Field(None, alias="custom_number_1")
    custom_number_2: int | None = Field(None, alias="custom_number_2")
    custom_number_3: int | None = Field(None, alias="custom_number_3")
    custom_number_4: int | None = Field(None, alias="custom_number_4")
    description: str | None = Field(None, alias="description")
    drivetrain: str | None = Field(None, alias="drivetrain")
    exterior_color: str | None = Field(None, alias="exterior_color")
    finance_description: str | None = Field(None, alias="finance_description")
    finance_type: str | None = Field(None, alias="finance_type")
    fuel_type: str | None = Field(None, alias="fuel_type")
    generation: str | None = Field(None, alias="generation")
    id: str | None = Field(None, alias="id")
    image_fetch_status: dict[str, Any] | None = Field(None, alias="image_fetch_status")
    images: list[str] | None = Field(None, alias="images")
    interior_color: str | None = Field(None, alias="interior_color")
    interior_upholstery: str | None = Field(None, alias="interior_upholstery")
    make: str | None = Field(None, alias="make")
    model: str | None = Field(None, alias="model")
    price: str | None = Field(None, alias="price")
    sanitized_images: list[str] | None = Field(None, alias="sanitized_images")
    title: str | None = Field(None, alias="title")
    transmission: str | None = Field(None, alias="transmission")
    trim: str | None = Field(None, alias="trim")
    unit_price: dict[str, Any] | None = Field(None, alias="unit_price")
    url: str | None = Field(None, alias="url")
    visibility: dict[str, Any] | None = Field(None, alias="visibility")
    year: int | None = Field(None, alias="year")


class CPASSetupFields(BaseModel):
    """Pydantic model for CPASSetup fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pass  # No fields defined


class CatalogSubVerticalListFields(BaseModel):
    """Pydantic model for CatalogSubVerticalList fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    appliances: dict[str, Any] | None = Field(None, alias="appliances")
    baby_feeding: dict[str, Any] | None = Field(None, alias="baby_feeding")
    baby_transport: dict[str, Any] | None = Field(None, alias="baby_transport")
    beauty: dict[str, Any] | None = Field(None, alias="beauty")
    bedding: dict[str, Any] | None = Field(None, alias="bedding")
    cameras: dict[str, Any] | None = Field(None, alias="cameras")
    cameras_and_photos: dict[str, Any] | None = Field(None, alias="cameras_and_photos")
    cell_phones_and_smart_watches: dict[str, Any] | None = Field(
        None, alias="cell_phones_and_smart_watches"
    )
    cleaning_supplies: dict[str, Any] | None = Field(None, alias="cleaning_supplies")
    clo_offer: dict[str, Any] | None = Field(None, alias="clo_offer")
    clothing: dict[str, Any] | None = Field(None, alias="clothing")
    clothing_accessories: dict[str, Any] | None = Field(None, alias="clothing_accessories")
    computer_components: dict[str, Any] | None = Field(None, alias="computer_components")
    computers_and_tablets: dict[str, Any] | None = Field(None, alias="computers_and_tablets")
    computers_laptops_and_tablets: dict[str, Any] | None = Field(
        None, alias="computers_laptops_and_tablets"
    )
    diapering_and_potty_training: dict[str, Any] | None = Field(
        None, alias="diapering_and_potty_training"
    )
    electronic_accessories_and_cables: dict[str, Any] | None = Field(
        None, alias="electronic_accessories_and_cables"
    )
    electronics_accessories: dict[str, Any] | None = Field(None, alias="electronics_accessories")
    furniture: dict[str, Any] | None = Field(None, alias="furniture")
    health: dict[str, Any] | None = Field(None, alias="health")
    home: dict[str, Any] | None = Field(None, alias="home")
    home_goods: dict[str, Any] | None = Field(None, alias="home_goods")
    household_and_cleaning_supplies: dict[str, Any] | None = Field(
        None, alias="household_and_cleaning_supplies"
    )
    jewelry: dict[str, Any] | None = Field(None, alias="jewelry")
    large_appliances: dict[str, Any] | None = Field(None, alias="large_appliances")
    local_service_business_item: dict[str, Any] | None = Field(
        None, alias="local_service_business_item"
    )
    local_service_business_restaurant: dict[str, Any] | None = Field(
        None, alias="local_service_business_restaurant"
    )
    loyalty_offer: dict[str, Any] | None = Field(None, alias="loyalty_offer")
    nursery: dict[str, Any] | None = Field(None, alias="nursery")
    printers_and_scanners: dict[str, Any] | None = Field(None, alias="printers_and_scanners")
    printers_scanners_and_fax_machines: dict[str, Any] | None = Field(
        None, alias="printers_scanners_and_fax_machines"
    )
    product_discount: dict[str, Any] | None = Field(None, alias="product_discount")
    projectors: dict[str, Any] | None = Field(None, alias="projectors")
    shoes: dict[str, Any] | None = Field(None, alias="shoes")
    shoes_and_footwear: dict[str, Any] | None = Field(None, alias="shoes_and_footwear")
    software: dict[str, Any] | None = Field(None, alias="software")
    televisions_and_monitors: dict[str, Any] | None = Field(None, alias="televisions_and_monitors")
    test_child_sub_vertical: dict[str, Any] | None = Field(None, alias="test_child_sub_vertical")
    test_grand_child_sub_vertical: dict[str, Any] | None = Field(
        None, alias="test_grand_child_sub_vertical"
    )
    test_sub_vertical: dict[str, Any] | None = Field(None, alias="test_sub_vertical")
    test_sub_vertical_alias: dict[str, Any] | None = Field(None, alias="test_sub_vertical_alias")
    test_sub_vertical_data_object: dict[str, Any] | None = Field(
        None, alias="test_sub_vertical_data_object"
    )
    third_party_electronics: dict[str, Any] | None = Field(None, alias="third_party_electronics")
    third_party_toys_and_games: dict[str, Any] | None = Field(
        None, alias="third_party_toys_and_games"
    )
    toys: dict[str, Any] | None = Field(None, alias="toys")
    toys_and_games: dict[str, Any] | None = Field(None, alias="toys_and_games")
    tvs_and_monitors: dict[str, Any] | None = Field(None, alias="tvs_and_monitors")
    vehicle_manufacturer: dict[str, Any] | None = Field(None, alias="vehicle_manufacturer")
    video_game_consoles_and_video_games: dict[str, Any] | None = Field(
        None, alias="video_game_consoles_and_video_games"
    )
    video_games_and_consoles: dict[str, Any] | None = Field(None, alias="video_games_and_consoles")
    video_projectors: dict[str, Any] | None = Field(None, alias="video_projectors")
    watches: dict[str, Any] | None = Field(None, alias="watches")


class MerchantComplianceFields(BaseModel):
    """Pydantic model for MerchantCompliance fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    active_campaigns: int | None = Field(None, alias="active_campaigns")
    compliance_status: str | None = Field(None, alias="compliance_status")
    count_down_start_time: int | None = Field(None, alias="count_down_start_time")
    purchase: int | None = Field(None, alias="purchase")
    purchase_conversion_value: float | None = Field(None, alias="purchase_conversion_value")


class AnalyticsUserConfigFields(BaseModel):
    """Pydantic model for AnalyticsUserConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    demo_app_nux_config: dict[str, Any] | None = Field(None, alias="demo_app_nux_config")
    flags: list[dict[str, str]] | None = Field(None, alias="flags")
    id: str | None = Field(None, alias="id")


class AdCreativeRewardInfoFields(BaseModel):
    """Pydantic model for AdCreativeRewardInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    reward_offer_id: str | None = Field(None, alias="reward_offer_id")
    reward_program_id: str | None = Field(None, alias="reward_program_id")


class AdAccountPromotionProgressBarFields(BaseModel):
    """Pydantic model for AdAccountPromotionProgressBar fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adaccount_permission: bool | None = Field(None, alias="adaccount_permission")
    coupon_currency: str | None = Field(None, alias="coupon_currency")
    coupon_value: int | None = Field(None, alias="coupon_value")
    expiration_time: datetime | None = Field(None, alias="expiration_time")
    progress_completed: bool | None = Field(None, alias="progress_completed")
    promotion_type: str | None = Field(None, alias="promotion_type")
    spend_requirement_in_cent: int | None = Field(None, alias="spend_requirement_in_cent")
    spend_since_enrollment: int | None = Field(None, alias="spend_since_enrollment")


class IGProductTaggingInvalidationErrorFields(BaseModel):
    """Pydantic model for IGProductTaggingInvalidationError fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    description: str | None = Field(None, alias="description")
    taggability_state: str | None = Field(None, alias="taggability_state")
    title: str | None = Field(None, alias="title")


class AdCreativeLinkDataMomentFields(BaseModel):
    """Pydantic model for AdCreativeLinkDataMoment fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    type: dict[str, Any] | None = Field(None, alias="type")


class AdToplineDetailFields(BaseModel):
    """Pydantic model for AdToplineDetail fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    active_status: int | None = Field(None, alias="active_status")
    ad_account_id: str | None = Field(None, alias="ad_account_id")
    flight_end_date: datetime | None = Field(None, alias="flight_end_date")
    flight_start_date: datetime | None = Field(None, alias="flight_start_date")
    id: str | None = Field(None, alias="id")
    io_number: int | None = Field(None, alias="io_number")
    line_number: int | None = Field(None, alias="line_number")
    price: float | None = Field(None, alias="price")
    quantity: float | None = Field(None, alias="quantity")
    sf_detail_line_id: str | None = Field(None, alias="sf_detail_line_id")
    subline_id: str | None = Field(None, alias="subline_id")
    targets: str | None = Field(None, alias="targets")
    time_created: datetime | None = Field(None, alias="time_created")
    time_updated: datetime | None = Field(None, alias="time_updated")


class VideoListFields(BaseModel):
    """Pydantic model for VideoList fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    creation_time: datetime | None = Field(None, alias="creation_time")
    description: str | None = Field(None, alias="description")
    id: str | None = Field(None, alias="id")
    last_modified: datetime | None = Field(None, alias="last_modified")
    owner: dict[str, Any] | None = Field(None, alias="owner")
    season_number: int | None = Field(None, alias="season_number")
    thumbnail: str | None = Field(None, alias="thumbnail")
    title: str | None = Field(None, alias="title")
    videos_count: int | None = Field(None, alias="videos_count")


class LeadGenThankYouPageFields(BaseModel):
    """Pydantic model for LeadGenThankYouPage fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    body: str | None = Field(None, alias="body")
    business_phone_number: str | None = Field(None, alias="business_phone_number")
    button_text: str | None = Field(None, alias="button_text")
    button_type: str | None = Field(None, alias="button_type")
    country_code: str | None = Field(None, alias="country_code")
    enable_messenger: bool | None = Field(None, alias="enable_messenger")
    gated_file: LeadGenThankYouPageGatedFileFields | None = Field(None, alias="gated_file")
    id: str | None = Field(None, alias="id")
    lead_gen_use_case: str | None = Field(None, alias="lead_gen_use_case")
    status: str | None = Field(None, alias="status")
    title: str | None = Field(None, alias="title")
    website_url: str | None = Field(None, alias="website_url")


class AdPreviewFields(BaseModel):
    """Pydantic model for AdPreview fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    body: str | None = Field(None, alias="body")
    transformation_spec: dict[str, Any] | None = Field(None, alias="transformation_spec")


class AdRuleHistoryFields(BaseModel):
    """Pydantic model for AdRuleHistory fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    evaluation_spec: AdRuleEvaluationSpecFields | None = Field(None, alias="evaluation_spec")
    exception_code: int | None = Field(None, alias="exception_code")
    exception_message: str | None = Field(None, alias="exception_message")
    execution_spec: AdRuleExecutionSpecFields | None = Field(None, alias="execution_spec")
    is_manual: bool | None = Field(None, alias="is_manual")
    results: list[AdRuleHistoryResultFields] | None = Field(None, alias="results")
    schedule_spec: AdRuleScheduleSpecFields | None = Field(None, alias="schedule_spec")
    timestamp: datetime | None = Field(None, alias="timestamp")


class AdAccountAppSetupRequirementsFields(BaseModel):
    """Pydantic model for AdAccountAppSetupRequirements fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pass  # No fields defined


class ProductCatalogUserTasksFields(BaseModel):
    """Pydantic model for ProductCatalogUserTasks fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    business: BusinessFields | None = Field(None, alias="business")
    tasks: list[str] | None = Field(None, alias="tasks")


class AdsConversionGoalFields(BaseModel):
    """Pydantic model for AdsConversionGoal fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_account_id: str | None = Field(None, alias="ad_account_id")
    conversion_event_value_source: str | None = Field(None, alias="conversion_event_value_source")
    description: str | None = Field(None, alias="description")
    goal_creation_method: str | None = Field(None, alias="goal_creation_method")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    performance_goal: str | None = Field(None, alias="performance_goal")
    update_status: str | None = Field(None, alias="update_status")


class ChatPluginFields(BaseModel):
    """Pydantic model for ChatPlugin fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    alignment: str | None = Field(None, alias="alignment")
    desktop_bottom_spacing: str | None = Field(None, alias="desktop_bottom_spacing")
    desktop_side_spacing: str | None = Field(None, alias="desktop_side_spacing")
    entry_point_icon: str | None = Field(None, alias="entry_point_icon")
    entry_point_label: str | None = Field(None, alias="entry_point_label")
    greeting_dialog_display: str | None = Field(None, alias="greeting_dialog_display")
    guest_chat_mode: str | None = Field(None, alias="guest_chat_mode")
    mobile_bottom_spacing: str | None = Field(None, alias="mobile_bottom_spacing")
    mobile_chat_display: str | None = Field(None, alias="mobile_chat_display")
    mobile_side_spacing: str | None = Field(None, alias="mobile_side_spacing")
    theme_color: str | None = Field(None, alias="theme_color")
    welcome_screen_greeting: str | None = Field(None, alias="welcome_screen_greeting")


class BrandSafetyDownloadableFields(BaseModel):
    """Pydantic model for BrandSafetyDownloadable fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_context_id: str | None = Field(None, alias="account_context_id")
    async_job_percent_complete: int | None = Field(None, alias="async_job_percent_complete")
    async_job_status: str | None = Field(None, alias="async_job_status")
    file_name: str | None = Field(None, alias="file_name")
    id: str | None = Field(None, alias="id")
    request_surface: str | None = Field(None, alias="request_surface")
    url: str | None = Field(None, alias="url")


class PageCTXDefaultGreetingTextFields(BaseModel):
    """Pydantic model for PageCTXDefaultGreetingText fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ctd: str | None = Field(None, alias="ctd")
    ctm: str | None = Field(None, alias="ctm")
    ctwa: str | None = Field(None, alias="ctwa")


class AdAssetFeedSpecLinkURLFields(BaseModel):
    """Pydantic model for AdAssetFeedSpecLinkURL fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adlabels: list[AdAssetFeedSpecAssetLabelFields] | None = Field(None, alias="adlabels")
    carousel_see_more_url: str | None = Field(None, alias="carousel_see_more_url")
    deeplink_url: str | None = Field(None, alias="deeplink_url")
    display_url: str | None = Field(None, alias="display_url")
    object_store_urls: list[str] | None = Field(None, alias="object_store_urls")
    url_tags: str | None = Field(None, alias="url_tags")
    website_url: str | None = Field(None, alias="website_url")


class LeadGenConditionalQuestionsGroupChoicesFields(BaseModel):
    """Pydantic model for LeadGenConditionalQuestionsGroupChoices fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    customized_token: str | None = Field(None, alias="customized_token")
    next_question_choices: list[LeadGenConditionalQuestionsGroupChoicesFields] | None = Field(
        None, alias="next_question_choices"
    )
    value: str | None = Field(None, alias="value")


class BizInboxOffsiteEmailAccountFields(BaseModel):
    """Pydantic model for BizInboxOffsiteEmailAccount fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    email_address: str | None = Field(None, alias="email_address")
    id: str | None = Field(None, alias="id")


class AdAssetFeedSpecBodyFields(BaseModel):
    """Pydantic model for AdAssetFeedSpecBody fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adlabels: list[AdAssetFeedSpecAssetLabelFields] | None = Field(None, alias="adlabels")
    text: str | None = Field(None, alias="text")
    url_tags: str | None = Field(None, alias="url_tags")


class AdAccountUserFields(BaseModel):
    """Pydantic model for AdAccountUser fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    tasks: list[str] | None = Field(None, alias="tasks")


class PlacementFields(BaseModel):
    """Pydantic model for Placement fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    audience_network_positions: list[str] | None = Field(None, alias="audience_network_positions")
    device_platforms: list[dict[str, Any]] | None = Field(None, alias="device_platforms")
    effective_audience_network_positions: list[str] | None = Field(
        None, alias="effective_audience_network_positions"
    )
    effective_device_platforms: list[dict[str, Any]] | None = Field(
        None, alias="effective_device_platforms"
    )
    effective_facebook_positions: list[str] | None = Field(
        None, alias="effective_facebook_positions"
    )
    effective_instagram_positions: list[str] | None = Field(
        None, alias="effective_instagram_positions"
    )
    effective_messenger_positions: list[str] | None = Field(
        None, alias="effective_messenger_positions"
    )
    effective_oculus_positions: list[str] | None = Field(None, alias="effective_oculus_positions")
    effective_publisher_platforms: list[str] | None = Field(
        None, alias="effective_publisher_platforms"
    )
    effective_threads_positions: list[str] | None = Field(None, alias="effective_threads_positions")
    effective_whatsapp_positions: list[str] | None = Field(
        None, alias="effective_whatsapp_positions"
    )
    facebook_positions: list[str] | None = Field(None, alias="facebook_positions")
    instagram_positions: list[str] | None = Field(None, alias="instagram_positions")
    messenger_positions: list[str] | None = Field(None, alias="messenger_positions")
    oculus_positions: list[str] | None = Field(None, alias="oculus_positions")
    publisher_platforms: list[str] | None = Field(None, alias="publisher_platforms")
    threads_positions: list[str] | None = Field(None, alias="threads_positions")
    whatsapp_positions: list[str] | None = Field(None, alias="whatsapp_positions")


class FundingSourceDetailsCouponTieringFields(BaseModel):
    """Pydantic model for FundingSourceDetailsCouponTiering fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    coupon_tiering_new: dict[str, Any] | None = Field(None, alias="coupon_tiering_new")
    coupon_tiering_reactivation: dict[str, Any] | None = Field(
        None, alias="coupon_tiering_reactivation"
    )


class AdLightCampaignGroupFields(BaseModel):
    """Pydantic model for AdLightCampaignGroup fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")


class AdAccountCampaignAttributionOptionInfoFields(BaseModel):
    """Pydantic model for AdAccountCampaignAttributionOptionInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    is_eligible: bool | None = Field(None, alias="is_eligible")
    value: str | None = Field(None, alias="value")


class AdDraftFields(BaseModel):
    """Pydantic model for AdDraft fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    api_version: str | None = Field(None, alias="api_version")
    async_request_set: AdAsyncRequestSetFields | None = Field(None, alias="async_request_set")
    author_id: str | None = Field(None, alias="author_id")
    created_by: str | None = Field(None, alias="created_by")
    draft_version: str | None = Field(None, alias="draft_version")
    id: str | None = Field(None, alias="id")
    is_active: bool | None = Field(None, alias="is_active")
    name: str | None = Field(None, alias="name")
    ownership_type: str | None = Field(None, alias="ownership_type")
    publish_status: dict[str, Any] | None = Field(None, alias="publish_status")
    state: str | None = Field(None, alias="state")
    summary: str | None = Field(None, alias="summary")
    time_created: datetime | None = Field(None, alias="time_created")
    time_updated: datetime | None = Field(None, alias="time_updated")


class AdAccountDsaRecommendationsFields(BaseModel):
    """Pydantic model for AdAccountDsaRecommendations fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    recommendations: list[str] | None = Field(None, alias="recommendations")


class BusinessImageFields(BaseModel):
    """Pydantic model for BusinessImage fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    business: BusinessFields | None = Field(None, alias="business")
    creation_time: datetime | None = Field(None, alias="creation_time")
    hash: str | None = Field(None, alias="hash")
    height: int | None = Field(None, alias="height")
    id: str | None = Field(None, alias="id")
    media_library_url: str | None = Field(None, alias="media_library_url")
    name: str | None = Field(None, alias="name")
    url: str | None = Field(None, alias="url")
    url_128: str | None = Field(None, alias="url_128")
    width: int | None = Field(None, alias="width")


class AsyncRequestFields(BaseModel):
    """Pydantic model for AsyncRequest fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: int | None = Field(None, alias="id")
    result: str | None = Field(None, alias="result")
    status: int | None = Field(None, alias="status")
    type: int | None = Field(None, alias="type")


class WebsiteCreativeInfoFields(BaseModel):
    """Pydantic model for WebsiteCreativeInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    image_urls: list[str] | None = Field(None, alias="image_urls")
    link_url: str | None = Field(None, alias="link_url")


class ExtendedCreditInvoiceGroupFields(BaseModel):
    """Pydantic model for ExtendedCreditInvoiceGroup fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    auto_enroll: bool | None = Field(None, alias="auto_enroll")
    bill_to_address: CRMAddressFields | None = Field(None, alias="bill_to_address")
    customer_po_number: str | None = Field(None, alias="customer_po_number")
    email: ExtendedCreditEmailFields | None = Field(None, alias="email")
    emails: list[str] | None = Field(None, alias="emails")
    id: str | None = Field(None, alias="id")
    liable_address: CRMAddressFields | None = Field(None, alias="liable_address")
    name: str | None = Field(None, alias="name")
    sold_to_address: CRMAddressFields | None = Field(None, alias="sold_to_address")


class TargetingGeoLocationCityFields(BaseModel):
    """Pydantic model for TargetingGeoLocationCity fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    country: str | None = Field(None, alias="country")
    distance_unit: str | None = Field(None, alias="distance_unit")
    key: str | None = Field(None, alias="key")
    name: str | None = Field(None, alias="name")
    radius: int | None = Field(None, alias="radius")
    region: str | None = Field(None, alias="region")
    region_id: str | None = Field(None, alias="region_id")


class IGShoppingReviewStatusFields(BaseModel):
    """Pydantic model for IGShoppingReviewStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    onsite_eligibility: IGShoppingReviewStatusOnsiteEligibilityFields | None = Field(
        None, alias="onsite_eligibility"
    )
    reasons: list[IGShoppingReviewStatusReasonWithHelpMessageFields] | None = Field(
        None, alias="reasons"
    )
    status: str | None = Field(None, alias="status")


class DynamicItemDisplayBundleFolderFields(BaseModel):
    """Pydantic model for DynamicItemDisplayBundleFolder fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    categorization_criteria: str | None = Field(None, alias="categorization_criteria")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    product_catalog: ProductCatalogFields | None = Field(None, alias="product_catalog")
    product_set: ProductSetFields | None = Field(None, alias="product_set")
    valid_labels: list[dict[str, list[str]]] | None = Field(None, alias="valid_labels")


class PageChangeProposalFields(BaseModel):
    """Pydantic model for PageChangeProposal fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    acceptance_status: str | None = Field(None, alias="acceptance_status")
    category: str | None = Field(None, alias="category")
    id: str | None = Field(None, alias="id")
    upcoming_change_info: PageUpcomingChangeFields | None = Field(
        None, alias="upcoming_change_info"
    )


class RTBDynamicPostFields(BaseModel):
    """Pydantic model for RTBDynamicPost fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    child_attachments: list[DynamicPostChildAttachmentFields] | None = Field(
        None, alias="child_attachments"
    )
    created: datetime | None = Field(None, alias="created")
    description: str | None = Field(None, alias="description")
    id: str | None = Field(None, alias="id")
    image_url: str | None = Field(None, alias="image_url")
    link: str | None = Field(None, alias="link")
    message: str | None = Field(None, alias="message")
    owner_id: str | None = Field(None, alias="owner_id")
    place_id: str | None = Field(None, alias="place_id")
    product_id: str | None = Field(None, alias="product_id")
    title: str | None = Field(None, alias="title")


class AdAccountMaxBidFields(BaseModel):
    """Pydantic model for AdAccountMaxBid fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    max_bid: int | None = Field(None, alias="max_bid")


class VideoStatusErrorFields(BaseModel):
    """Pydantic model for VideoStatusError fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    code: int | None = Field(None, alias="code")
    message: str | None = Field(None, alias="message")


class EventRegistrationSettingFields(BaseModel):
    """Pydantic model for EventRegistrationSetting fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    questions: str | None = Field(None, alias="questions")
    target_type: str | None = Field(None, alias="target_type")
    ticket_tier_ids: list[str] | None = Field(None, alias="ticket_tier_ids")


class LiveVideoFields(BaseModel):
    """Pydantic model for LiveVideo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_break_config: LiveVideoAdBreakConfigFields | None = Field(None, alias="ad_break_config")
    ad_break_failure_reason: str | None = Field(None, alias="ad_break_failure_reason")
    broadcast_start_time: datetime | None = Field(None, alias="broadcast_start_time")
    copyright: VideoCopyrightFields | None = Field(None, alias="copyright")
    creation_time: datetime | None = Field(None, alias="creation_time")
    dash_ingest_url: str | None = Field(None, alias="dash_ingest_url")
    dash_preview_url: str | None = Field(None, alias="dash_preview_url")
    description: str | None = Field(None, alias="description")
    embed_html: dict[str, Any] | None = Field(None, alias="embed_html")
    from_: dict[str, Any] | None = Field(None, alias="from")
    id: str | None = Field(None, alias="id")
    ingest_streams: list[LiveVideoInputStreamFields] | None = Field(None, alias="ingest_streams")
    is_manual_mode: bool | None = Field(None, alias="is_manual_mode")
    is_reference_only: bool | None = Field(None, alias="is_reference_only")
    live_views: int | None = Field(None, alias="live_views")
    overlay_url: str | None = Field(None, alias="overlay_url")
    permalink_url: str | None = Field(None, alias="permalink_url")
    planned_start_time: datetime | None = Field(None, alias="planned_start_time")
    recommended_encoder_settings: LiveVideoRecommendedEncoderSettingsFields | None = Field(
        None, alias="recommended_encoder_settings"
    )
    seconds_left: int | None = Field(None, alias="seconds_left")
    secure_stream_url: str | None = Field(None, alias="secure_stream_url")
    status: str | None = Field(None, alias="status")
    stream_url: str | None = Field(None, alias="stream_url")
    targeting: LiveVideoTargetingFields | None = Field(None, alias="targeting")
    title: str | None = Field(None, alias="title")
    total_views: str | None = Field(None, alias="total_views")
    video: AdVideoFields | None = Field(None, alias="video")


class AdConversionsFields(BaseModel):
    """Pydantic model for AdConversions fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    adgroup_id: str | None = Field(None, alias="adgroup_id")
    campaign_id: str | None = Field(None, alias="campaign_id")
    values: dict[str, Any] | None = Field(None, alias="values")


class BusinessProductCatalogTOSFields(BaseModel):
    """Pydantic model for BusinessProductCatalogTOS fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    accepted: bool | None = Field(None, alias="accepted")
    content: str | None = Field(None, alias="content")


class BusinessAssetSharingAgreementFields(BaseModel):
    """Pydantic model for BusinessAssetSharingAgreement fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    initiator: BusinessFields | None = Field(None, alias="initiator")
    recipient: BusinessFields | None = Field(None, alias="recipient")
    relationship_type: list[str] | None = Field(None, alias="relationship_type")
    request_status: str | None = Field(None, alias="request_status")
    request_type: str | None = Field(None, alias="request_type")


class AdCreationPackageConfigFields(BaseModel):
    """Pydantic model for AdCreationPackageConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    api_version: str | None = Field(None, alias="api_version")
    id: str | None = Field(None, alias="id")
    is_eligible_for_default_opt_in: bool | None = Field(
        None, alias="is_eligible_for_default_opt_in"
    )
    objective: str | None = Field(None, alias="objective")
    package_id: str | None = Field(None, alias="package_id")
    status: str | None = Field(None, alias="status")


class ContentPublishingLimitResponseFields(BaseModel):
    """Pydantic model for ContentPublishingLimitResponse fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    config: dict[str, Any] | None = Field(None, alias="config")
    quota_usage: int | None = Field(None, alias="quota_usage")


class EndStudyCriteriaFields(BaseModel):
    """Pydantic model for EndStudyCriteria fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pass  # No fields defined


class CollaborativeAdsPartnerInfoListItemFields(BaseModel):
    """Pydantic model for CollaborativeAdsPartnerInfoListItem fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pass  # No fields defined


class CopyrightMediaMisuseFields(BaseModel):
    """Pydantic model for CopyrightMediaMisuse fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    audio_segments: list[dict[str, Any]] | None = Field(None, alias="audio_segments")
    creation_time: datetime | None = Field(None, alias="creation_time")
    disabled_audio_segments: list[dict[str, Any]] | None = Field(
        None, alias="disabled_audio_segments"
    )
    disabled_video_segments: list[dict[str, Any]] | None = Field(
        None, alias="disabled_video_segments"
    )
    entire_file_issue: bool | None = Field(None, alias="entire_file_issue")
    entire_file_issue_reasons: list[str] | None = Field(None, alias="entire_file_issue_reasons")
    expiration_time: datetime | None = Field(None, alias="expiration_time")
    id: str | None = Field(None, alias="id")
    media_asset_id: str | None = Field(None, alias="media_asset_id")
    reasons: list[str] | None = Field(None, alias="reasons")
    requested_audio_segments: list[dict[str, Any]] | None = Field(
        None, alias="requested_audio_segments"
    )
    requested_video_segments: list[dict[str, Any]] | None = Field(
        None, alias="requested_video_segments"
    )
    resolution_type: str | None = Field(None, alias="resolution_type")
    status: str | None = Field(None, alias="status")
    update_time: datetime | None = Field(None, alias="update_time")
    video_copyright: VideoCopyrightFields | None = Field(None, alias="video_copyright")
    video_segments: list[dict[str, Any]] | None = Field(None, alias="video_segments")


class AdCreativeLinkDataCallToActionFields(BaseModel):
    """Pydantic model for AdCreativeLinkDataCallToAction fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    type: dict[str, Any] | None = Field(None, alias="type")
    value: AdCreativeLinkDataCallToActionValueFields | None = Field(None, alias="value")


class VideoStatusUploadingPhaseFields(BaseModel):
    """Pydantic model for VideoStatusUploadingPhase fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    bytes_transferred: int | None = Field(None, alias="bytes_transferred")
    errors: list[VideoStatusErrorFields] | None = Field(None, alias="errors")
    source_file_size: int | None = Field(None, alias="source_file_size")
    status: str | None = Field(None, alias="status")


class AdCreativeBrandedContentAdsPartnersFields(BaseModel):
    """Pydantic model for AdCreativeBrandedContentAdsPartners fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    fb_page_id: str | None = Field(None, alias="fb_page_id")
    has_create_ads_access: bool | None = Field(None, alias="has_create_ads_access")
    identity_type: str | None = Field(None, alias="identity_type")
    ig_asset_id: str | None = Field(None, alias="ig_asset_id")
    ig_user_id: str | None = Field(None, alias="ig_user_id")


class StoriesFields(BaseModel):
    """Pydantic model for Stories fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    creation_time: str | None = Field(None, alias="creation_time")
    media_id: str | None = Field(None, alias="media_id")
    media_type: str | None = Field(None, alias="media_type")
    post_id: str | None = Field(None, alias="post_id")
    status: str | None = Field(None, alias="status")
    url: str | None = Field(None, alias="url")


class InstagramInsightsResultFields(BaseModel):
    """Pydantic model for InstagramInsightsResult fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    description: str | None = Field(None, alias="description")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    period: str | None = Field(None, alias="period")
    title: str | None = Field(None, alias="title")
    total_value: dict[str, Any] | None = Field(None, alias="total_value")
    values: list[InstagramInsightsValueFields] | None = Field(None, alias="values")


class AdsPixelSignalsIWLNuxFields(BaseModel):
    """Pydantic model for AdsPixelSignalsIWLNux fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    background_color: str | None = Field(None, alias="background_color")
    content: str | None = Field(None, alias="content")
    content_color: str | None = Field(None, alias="content_color")
    content_size: str | None = Field(None, alias="content_size")
    img_url: str | None = Field(None, alias="img_url")


class ProductFeedRuleSuggestionFields(BaseModel):
    """Pydantic model for ProductFeedRuleSuggestion fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    attribute: str | None = Field(None, alias="attribute")
    params: list[dict[str, str]] | None = Field(None, alias="params")
    type: str | None = Field(None, alias="type")


class MediaCopyrightAttributionFields(BaseModel):
    """Pydantic model for MediaCopyrightAttribution fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    attribution_ig_target_id: str | None = Field(None, alias="attribution_ig_target_id")
    attribution_target_email_address: str | None = Field(
        None, alias="attribution_target_email_address"
    )
    attribution_target_id: str | None = Field(None, alias="attribution_target_id")
    attribution_target_name: str | None = Field(None, alias="attribution_target_name")
    attribution_type: str | None = Field(None, alias="attribution_type")
    attribution_uri: str | None = Field(None, alias="attribution_uri")
    copyright_count: int | None = Field(None, alias="copyright_count")
    creation_time: datetime | None = Field(None, alias="creation_time")
    creator: ProfileFields | None = Field(None, alias="creator")
    id: str | None = Field(None, alias="id")
    is_enabled: bool | None = Field(None, alias="is_enabled")
    link_title: str | None = Field(None, alias="link_title")
    match_count: int | None = Field(None, alias="match_count")
    owner: PageFields | None = Field(None, alias="owner")
    status: str | None = Field(None, alias="status")
    title: str | None = Field(None, alias="title")


class BusinessProjectFields(BaseModel):
    """Pydantic model for BusinessProject fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    business: BusinessFields | None = Field(None, alias="business")
    created_time: datetime | None = Field(None, alias="created_time")
    creator: dict[str, Any] | None = Field(None, alias="creator")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class AdStudyFields(BaseModel):
    """Pydantic model for AdStudy fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    business: BusinessFields | None = Field(None, alias="business")
    canceled_time: datetime | None = Field(None, alias="canceled_time")
    client_business: BusinessFields | None = Field(None, alias="client_business")
    cooldown_start_time: datetime | None = Field(None, alias="cooldown_start_time")
    created_by: UserFields | None = Field(None, alias="created_by")
    created_time: datetime | None = Field(None, alias="created_time")
    description: str | None = Field(None, alias="description")
    end_time: datetime | None = Field(None, alias="end_time")
    id: str | None = Field(None, alias="id")
    measurement_contact: UserFields | None = Field(None, alias="measurement_contact")
    name: str | None = Field(None, alias="name")
    observation_end_time: datetime | None = Field(None, alias="observation_end_time")
    results_first_available_date: str | None = Field(None, alias="results_first_available_date")
    sales_contact: UserFields | None = Field(None, alias="sales_contact")
    start_time: datetime | None = Field(None, alias="start_time")
    type: str | None = Field(None, alias="type")
    updated_by: UserFields | None = Field(None, alias="updated_by")
    updated_time: datetime | None = Field(None, alias="updated_time")


class AdgroupPlacementSpecificReviewFeedbackFields(BaseModel):
    """Pydantic model for AdgroupPlacementSpecificReviewFeedback fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_admin: dict[str, str] | None = Field(None, alias="account_admin")
    ad: dict[str, str] | None = Field(None, alias="ad")
    ads_conversion_experiences: dict[str, str] | None = Field(
        None, alias="ads_conversion_experiences"
    )
    b2c: dict[str, str] | None = Field(None, alias="b2c")
    b2c_commerce_unified: dict[str, str] | None = Field(None, alias="b2c_commerce_unified")
    bsg: dict[str, str] | None = Field(None, alias="bsg")
    city_community: dict[str, str] | None = Field(None, alias="city_community")
    commerce: dict[str, str] | None = Field(None, alias="commerce")
    compromise: dict[str, str] | None = Field(None, alias="compromise")
    daily_deals: dict[str, str] | None = Field(None, alias="daily_deals")
    daily_deals_legacy: dict[str, str] | None = Field(None, alias="daily_deals_legacy")
    dpa: dict[str, str] | None = Field(None, alias="dpa")
    dri_copyright: dict[str, str] | None = Field(None, alias="dri_copyright")
    dri_counterfeit: dict[str, str] | None = Field(None, alias="dri_counterfeit")
    facebook: dict[str, str] | None = Field(None, alias="facebook")
    facebook_pages_live_shopping: dict[str, str] | None = Field(
        None, alias="facebook_pages_live_shopping"
    )
    independent_work: dict[str, str] | None = Field(None, alias="independent_work")
    instagram: dict[str, str] | None = Field(None, alias="instagram")
    instagram_shop: dict[str, str] | None = Field(None, alias="instagram_shop")
    job_search: dict[str, str] | None = Field(None, alias="job_search")
    lead_gen_honeypot: dict[str, str] | None = Field(None, alias="lead_gen_honeypot")
    marketplace: dict[str, str] | None = Field(None, alias="marketplace")
    marketplace_home_rentals: dict[str, str] | None = Field(None, alias="marketplace_home_rentals")
    marketplace_home_sales: dict[str, str] | None = Field(None, alias="marketplace_home_sales")
    marketplace_motors: dict[str, str] | None = Field(None, alias="marketplace_motors")
    marketplace_shops: dict[str, str] | None = Field(None, alias="marketplace_shops")
    max_review_placements: dict[str, str] | None = Field(None, alias="max_review_placements")
    neighborhoods: dict[str, str] | None = Field(None, alias="neighborhoods")
    page_admin: dict[str, str] | None = Field(None, alias="page_admin")
    product: dict[str, str] | None = Field(None, alias="product")
    product_service: dict[str, str] | None = Field(None, alias="product_service")
    profile: dict[str, str] | None = Field(None, alias="profile")
    seller: dict[str, str] | None = Field(None, alias="seller")
    shops: dict[str, str] | None = Field(None, alias="shops")
    traffic_quality: dict[str, str] | None = Field(None, alias="traffic_quality")
    unified_commerce_content: dict[str, str] | None = Field(None, alias="unified_commerce_content")
    whatsapp: dict[str, str] | None = Field(None, alias="whatsapp")


class CTXPartnerAppWelcomeMessageFlowFields(BaseModel):
    """Pydantic model for CTXPartnerAppWelcomeMessageFlow fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    compatible_platforms: list[str] | None = Field(None, alias="compatible_platforms")
    eligible_platforms: list[str] | None = Field(None, alias="eligible_platforms")
    id: str | None = Field(None, alias="id")
    is_ig_only_flow: bool | None = Field(None, alias="is_ig_only_flow")
    is_used_in_ad: bool | None = Field(None, alias="is_used_in_ad")
    last_update_time: datetime | None = Field(None, alias="last_update_time")
    name: str | None = Field(None, alias="name")
    welcome_message_flow: str | None = Field(None, alias="welcome_message_flow")
    welcome_message_sequence: str | None = Field(None, alias="welcome_message_sequence")


class TransactableItemFields(BaseModel):
    """Pydantic model for TransactableItem fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    action_title: str | None = Field(None, alias="action_title")
    applinks: CatalogItemAppLinksFields | None = Field(None, alias="applinks")
    category_specific_fields: CatalogSubVerticalListFields | None = Field(
        None, alias="category_specific_fields"
    )
    currency: str | None = Field(None, alias="currency")
    description: str | None = Field(None, alias="description")
    duration_time: int | None = Field(None, alias="duration_time")
    duration_type: str | None = Field(None, alias="duration_type")
    id: str | None = Field(None, alias="id")
    image_fetch_status: dict[str, Any] | None = Field(None, alias="image_fetch_status")
    images: list[str] | None = Field(None, alias="images")
    order_index: int | None = Field(None, alias="order_index")
    price: str | None = Field(None, alias="price")
    price_type: str | None = Field(None, alias="price_type")
    sanitized_images: list[str] | None = Field(None, alias="sanitized_images")
    session_type: str | None = Field(None, alias="session_type")
    time_padding_after_end: int | None = Field(None, alias="time_padding_after_end")
    title: str | None = Field(None, alias="title")
    transactable_item_id: str | None = Field(None, alias="transactable_item_id")
    url: str | None = Field(None, alias="url")
    visibility: dict[str, Any] | None = Field(None, alias="visibility")


class AdToplineFields(BaseModel):
    """Pydantic model for AdTopline fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    client_approval_date: datetime | None = Field(None, alias="client_approval_date")
    created_by: str | None = Field(None, alias="created_by")
    created_date: datetime | None = Field(None, alias="created_date")
    description: str | None = Field(None, alias="description")
    flight_end_date: datetime | None = Field(None, alias="flight_end_date")
    flight_start_date: datetime | None = Field(None, alias="flight_start_date")
    func_cap_amount: str | None = Field(None, alias="func_cap_amount")
    func_cap_amount_with_offset: str | None = Field(None, alias="func_cap_amount_with_offset")
    func_line_amount: str | None = Field(None, alias="func_line_amount")
    func_line_amount_with_offset: str | None = Field(None, alias="func_line_amount_with_offset")
    func_price: str | None = Field(None, alias="func_price")
    func_price_with_offset: str | None = Field(None, alias="func_price_with_offset")
    gender: str | None = Field(None, alias="gender")
    id: str | None = Field(None, alias="id")
    impressions: int | None = Field(None, alias="impressions")
    io_number: int | None = Field(None, alias="io_number")
    is_bonus_line: int | None = Field(None, alias="is_bonus_line")
    keywords: str | None = Field(None, alias="keywords")
    last_updated_by: str | None = Field(None, alias="last_updated_by")
    last_updated_date: datetime | None = Field(None, alias="last_updated_date")
    line_number: int | None = Field(None, alias="line_number")
    line_position: int | None = Field(None, alias="line_position")
    line_type: str | None = Field(None, alias="line_type")
    location: str | None = Field(None, alias="location")
    max_age: str | None = Field(None, alias="max_age")
    max_budget: str | None = Field(None, alias="max_budget")
    min_age: str | None = Field(None, alias="min_age")
    price_per_trp: str | None = Field(None, alias="price_per_trp")
    product_type: str | None = Field(None, alias="product_type")
    rev_assurance_approval_date: datetime | None = Field(None, alias="rev_assurance_approval_date")
    targets: str | None = Field(None, alias="targets")
    trp_updated_time: int | None = Field(None, alias="trp_updated_time")
    trp_value: str | None = Field(None, alias="trp_value")
    uom: str | None = Field(None, alias="uom")


class AdCreativeLinkDataCustomOverlaySpecFields(BaseModel):
    """Pydantic model for AdCreativeLinkDataCustomOverlaySpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    background_color: dict[str, Any] | None = Field(None, alias="background_color")
    float_with_margin: bool | None = Field(None, alias="float_with_margin")
    font: dict[str, Any] | None = Field(None, alias="font")
    option: dict[str, Any] | None = Field(None, alias="option")
    position: dict[str, Any] | None = Field(None, alias="position")
    render_with_icon: bool | None = Field(None, alias="render_with_icon")
    template: dict[str, Any] | None = Field(None, alias="template")
    text_color: dict[str, Any] | None = Field(None, alias="text_color")


class OfflineConversionDataSetFields(BaseModel):
    """Pydantic model for OfflineConversionDataSet fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    automatic_matching_fields: list[str] | None = Field(None, alias="automatic_matching_fields")
    business: BusinessFields | None = Field(None, alias="business")
    can_proxy: bool | None = Field(None, alias="can_proxy")
    config: str | None = Field(None, alias="config")
    creation_time: datetime | None = Field(None, alias="creation_time")
    creator: UserFields | None = Field(None, alias="creator")
    data_use_setting: str | None = Field(None, alias="data_use_setting")
    description: str | None = Field(None, alias="description")
    duplicate_entries: int | None = Field(None, alias="duplicate_entries")
    enable_auto_assign_to_accounts: bool | None = Field(
        None, alias="enable_auto_assign_to_accounts"
    )
    enable_automatic_matching: bool | None = Field(None, alias="enable_automatic_matching")
    event_stats: str | None = Field(None, alias="event_stats")
    event_time_max: int | None = Field(None, alias="event_time_max")
    event_time_min: int | None = Field(None, alias="event_time_min")
    first_party_cookie_status: str | None = Field(None, alias="first_party_cookie_status")
    id: str | None = Field(None, alias="id")
    is_consolidated_container: bool | None = Field(None, alias="is_consolidated_container")
    is_created_by_business: bool | None = Field(None, alias="is_created_by_business")
    is_crm: bool | None = Field(None, alias="is_crm")
    is_mta_use: bool | None = Field(None, alias="is_mta_use")
    is_restricted_use: bool | None = Field(None, alias="is_restricted_use")
    is_unavailable: bool | None = Field(None, alias="is_unavailable")
    last_fired_time: datetime | None = Field(None, alias="last_fired_time")
    last_upload_app: str | None = Field(None, alias="last_upload_app")
    last_upload_app_changed_time: int | None = Field(None, alias="last_upload_app_changed_time")
    match_rate_approx: int | None = Field(None, alias="match_rate_approx")
    matched_entries: int | None = Field(None, alias="matched_entries")
    name: str | None = Field(None, alias="name")
    owner_ad_account: AdAccountFields | None = Field(None, alias="owner_ad_account")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")
    usage: OfflineConversionDataSetUsageFields | None = Field(None, alias="usage")
    valid_entries: int | None = Field(None, alias="valid_entries")


class AdsPixelDeliveryRecommendationsFields(BaseModel):
    """Pydantic model for AdsPixelDeliveryRecommendations fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    custom_event_type: str | None = Field(None, alias="custom_event_type")
    optimization_goal: str | None = Field(None, alias="optimization_goal")


class AdCreativeFeaturesSpecFields(BaseModel):
    """Pydantic model for AdCreativeFeaturesSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adapt_to_placement: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="adapt_to_placement"
    )
    add_text_overlay: AdCreativeFeatureDetailsFields | None = Field(None, alias="add_text_overlay")
    ads_with_benefits: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="ads_with_benefits"
    )
    advantage_plus_creative: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="advantage_plus_creative"
    )
    app_highlights: AdCreativeFeatureDetailsFields | None = Field(None, alias="app_highlights")
    audio: AdCreativeFeatureDetailsFields | None = Field(None, alias="audio")
    biz_ai: AdCreativeFeatureDetailsFields | None = Field(None, alias="biz_ai")
    carousel_to_video: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="carousel_to_video"
    )
    catalog_feed_tag: AdCreativeFeatureDetailsFields | None = Field(None, alias="catalog_feed_tag")
    customize_product_recommendation: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="customize_product_recommendation"
    )
    cv_transformation: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="cv_transformation"
    )
    description_automation: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="description_automation"
    )
    dha_optimization: AdCreativeFeatureDetailsFields | None = Field(None, alias="dha_optimization")
    dynamic_partner_content: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="dynamic_partner_content"
    )
    enhance_cta: AdCreativeFeatureDetailsFields | None = Field(None, alias="enhance_cta")
    fb_feed_tag: AdCreativeFeatureDetailsFields | None = Field(None, alias="fb_feed_tag")
    fb_reels_tag: AdCreativeFeatureDetailsFields | None = Field(None, alias="fb_reels_tag")
    fb_story_tag: AdCreativeFeatureDetailsFields | None = Field(None, alias="fb_story_tag")
    feed_caption_optimization: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="feed_caption_optimization"
    )
    hide_price: AdCreativeFeatureDetailsFields | None = Field(None, alias="hide_price")
    ig_feed_tag: AdCreativeFeatureDetailsFields | None = Field(None, alias="ig_feed_tag")
    ig_glados_feed: AdCreativeFeatureDetailsFields | None = Field(None, alias="ig_glados_feed")
    ig_reels_tag: AdCreativeFeatureDetailsFields | None = Field(None, alias="ig_reels_tag")
    ig_stream_tag: AdCreativeFeatureDetailsFields | None = Field(None, alias="ig_stream_tag")
    image_animation: AdCreativeFeatureDetailsFields | None = Field(None, alias="image_animation")
    image_auto_crop: AdCreativeFeatureDetailsFields | None = Field(None, alias="image_auto_crop")
    image_background_gen: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="image_background_gen"
    )
    image_brightness_and_contrast: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="image_brightness_and_contrast"
    )
    image_enhancement: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="image_enhancement"
    )
    image_templates: AdCreativeFeatureDetailsFields | None = Field(None, alias="image_templates")
    image_touchups: AdCreativeFeatureDetailsFields | None = Field(None, alias="image_touchups")
    image_uncrop: AdCreativeFeatureDetailsFields | None = Field(None, alias="image_uncrop")
    inline_comment: AdCreativeFeatureDetailsFields | None = Field(None, alias="inline_comment")
    local_store_extension: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="local_store_extension"
    )
    media_liquidity_animated_image: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="media_liquidity_animated_image"
    )
    media_order: AdCreativeFeatureDetailsFields | None = Field(None, alias="media_order")
    media_type_automation: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="media_type_automation"
    )
    multi_photo_to_video: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="multi_photo_to_video"
    )
    music_generation: AdCreativeFeatureDetailsFields | None = Field(None, alias="music_generation")
    pac_relaxation: AdCreativeFeatureDetailsFields | None = Field(None, alias="pac_relaxation")
    product_extensions: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="product_extensions"
    )
    product_metadata_automation: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="product_metadata_automation"
    )
    product_tags: AdCreativeFeatureDetailsFields | None = Field(None, alias="product_tags")
    profile_card: AdCreativeFeatureDetailsFields | None = Field(None, alias="profile_card")
    profile_extension: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="profile_extension"
    )
    show_summary: AdCreativeFeatureDetailsFields | None = Field(None, alias="show_summary")
    site_extensions: AdCreativeFeatureDetailsFields | None = Field(None, alias="site_extensions")
    standard_enhancements: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="standard_enhancements"
    )
    standard_enhancements_catalog: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="standard_enhancements_catalog"
    )
    text_generation: AdCreativeFeatureDetailsFields | None = Field(None, alias="text_generation")
    text_optimizations: AdCreativeFeatureDetailsFields | None = Field(
        None, alias="text_optimizations"
    )
    text_translation: AdCreativeFeatureDetailsFields | None = Field(None, alias="text_translation")
    video_auto_crop: AdCreativeFeatureDetailsFields | None = Field(None, alias="video_auto_crop")
    video_filtering: AdCreativeFeatureDetailsFields | None = Field(None, alias="video_filtering")
    video_highlight: AdCreativeFeatureDetailsFields | None = Field(None, alias="video_highlight")
    video_to_image: AdCreativeFeatureDetailsFields | None = Field(None, alias="video_to_image")
    video_uncrop: AdCreativeFeatureDetailsFields | None = Field(None, alias="video_uncrop")


class ProductFeedUploadErrorSampleFields(BaseModel):
    """Pydantic model for ProductFeedUploadErrorSample fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    retailer_id: str | None = Field(None, alias="retailer_id")
    row_number: int | None = Field(None, alias="row_number")


class WITUserFields(BaseModel):
    """Pydantic model for WITUser fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    access_token: str | None = Field(None, alias="access_token")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class HighDemandPeriodTimeSuggestionWeeklySegmentFields(BaseModel):
    """Pydantic model for HighDemandPeriodTimeSuggestionWeeklySegment fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    days: list[str] | None = Field(None, alias="days")
    end_minute: int | None = Field(None, alias="end_minute")
    start_minute: int | None = Field(None, alias="start_minute")
    timezone_type: str | None = Field(None, alias="timezone_type")


class AdNetworkAnalyticsAsyncQueryResultFields(BaseModel):
    """Pydantic model for AdNetworkAnalyticsAsyncQueryResult fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    data: dict[str, Any] | None = Field(None, alias="data")
    omitted_results: list[dict[str, Any]] | None = Field(None, alias="omitted_results")
    query_id: str | None = Field(None, alias="query_id")
    results: list[dict[str, Any]] | None = Field(None, alias="results")
    status: str | None = Field(None, alias="status")


class AdCampaignGroupMetricsMetadataFields(BaseModel):
    """Pydantic model for AdCampaignGroupMetricsMetadata fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    budget_optimization: list[str] | None = Field(None, alias="budget_optimization")
    duplication_flow_tips: list[str] | None = Field(None, alias="duplication_flow_tips")


class AdCreativeMarketingMessageStructuredSpecFields(BaseModel):
    """Pydantic model for AdCreativeMarketingMessageStructuredSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    buttons: list[dict[str, Any]] | None = Field(None, alias="buttons")
    footer: str | None = Field(None, alias="footer")
    greeting: str | None = Field(None, alias="greeting")
    is_optimized_text: bool | None = Field(None, alias="is_optimized_text")
    language: str | None = Field(None, alias="language")
    referenced_adgroup_id: str | None = Field(None, alias="referenced_adgroup_id")
    whats_app_business_phone_number_id: str | None = Field(
        None, alias="whats_app_business_phone_number_id"
    )


class AdAccountAmountSpentHistoryFields(BaseModel):
    """Pydantic model for AdAccountAmountSpentHistory fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    amount_spent: int | None = Field(None, alias="amount_spent")
    spend_cap: int | None = Field(None, alias="spend_cap")
    time_start: str | None = Field(None, alias="time_start")
    time_stop: str | None = Field(None, alias="time_stop")


class TargetingProductAudienceSpecFields(BaseModel):
    """Pydantic model for TargetingProductAudienceSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    exclusions: list[TargetingProductAudienceSubSpecFields] | None = Field(None, alias="exclusions")
    inclusions: list[TargetingProductAudienceSubSpecFields] | None = Field(None, alias="inclusions")
    product_set_id: str | None = Field(None, alias="product_set_id")


class BlockedUserInfoFields(BaseModel):
    """Pydantic model for BlockedUserInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    block_time: datetime | None = Field(None, alias="block_time")
    block_type: str | None = Field(None, alias="block_type")
    fbid: str | None = Field(None, alias="fbid")
    name: str | None = Field(None, alias="name")
    username: str | None = Field(None, alias="username")


class AudienceOverlapFields(BaseModel):
    """Pydantic model for AudienceOverlap fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    estimated_reach: int | None = Field(None, alias="estimated_reach")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    overlap: int | None = Field(None, alias="overlap")


class CommerceOrderFields(BaseModel):
    """Pydantic model for CommerceOrder fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    buyer_details: dict[str, Any] | None = Field(None, alias="buyer_details")
    channel: str | None = Field(None, alias="channel")
    contains_bopis_items: bool | None = Field(None, alias="contains_bopis_items")
    created: str | None = Field(None, alias="created")
    estimated_payment_details: dict[str, Any] | None = Field(
        None, alias="estimated_payment_details"
    )
    id: str | None = Field(None, alias="id")
    is_group_buy: bool | None = Field(None, alias="is_group_buy")
    is_test_order: bool | None = Field(None, alias="is_test_order")
    last_updated: str | None = Field(None, alias="last_updated")
    merchant_order_id: str | None = Field(None, alias="merchant_order_id")
    order_status: dict[str, Any] | None = Field(None, alias="order_status")
    pre_order_details: dict[str, Any] | None = Field(None, alias="pre_order_details")
    selected_shipping_option: dict[str, Any] | None = Field(None, alias="selected_shipping_option")
    ship_by_date: str | None = Field(None, alias="ship_by_date")
    shipping_address: dict[str, Any] | None = Field(None, alias="shipping_address")


class ProductSetUsageFields(BaseModel):
    """Pydantic model for ProductSetUsage fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    product_set: ProductSetFields | None = Field(None, alias="product_set")
    usage_type: str | None = Field(None, alias="usage_type")


class AdAccountAllPaymentMethodsFields(BaseModel):
    """Pydantic model for AdAccountAllPaymentMethods fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pass  # No fields defined


class CTXOptimizationEligibilityFields(BaseModel):
    """Pydantic model for CTXOptimizationEligibility fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ctm: dict[str, Any] | None = Field(None, alias="ctm")


class EventFields(BaseModel):
    """Pydantic model for Event fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    attending_count: int | None = Field(None, alias="attending_count")
    can_guests_invite: bool | None = Field(None, alias="can_guests_invite")
    category: dict[str, Any] | None = Field(None, alias="category")
    cover: CoverPhotoFields | None = Field(None, alias="cover")
    created_time: datetime | None = Field(None, alias="created_time")
    declined_count: int | None = Field(None, alias="declined_count")
    description: str | None = Field(None, alias="description")
    discount_code_enabled: bool | None = Field(None, alias="discount_code_enabled")
    end_time: str | None = Field(None, alias="end_time")
    event_times: list[ChildEventFields] | None = Field(None, alias="event_times")
    guest_list_enabled: bool | None = Field(None, alias="guest_list_enabled")
    id: str | None = Field(None, alias="id")
    interested_count: int | None = Field(None, alias="interested_count")
    is_canceled: bool | None = Field(None, alias="is_canceled")
    is_draft: bool | None = Field(None, alias="is_draft")
    is_online: bool | None = Field(None, alias="is_online")
    is_page_owned: bool | None = Field(None, alias="is_page_owned")
    maybe_count: int | None = Field(None, alias="maybe_count")
    name: str | None = Field(None, alias="name")
    noreply_count: int | None = Field(None, alias="noreply_count")
    online_event_format: dict[str, Any] | None = Field(None, alias="online_event_format")
    online_event_third_party_url: str | None = Field(None, alias="online_event_third_party_url")
    owner: dict[str, Any] | None = Field(None, alias="owner")
    parent_group: GroupFields | None = Field(None, alias="parent_group")
    place: PlaceFields | None = Field(None, alias="place")
    registration_setting: EventRegistrationSettingFields | None = Field(
        None, alias="registration_setting"
    )
    scheduled_publish_time: str | None = Field(None, alias="scheduled_publish_time")
    start_time: str | None = Field(None, alias="start_time")
    sub_categories: list[str] | None = Field(None, alias="sub_categories")
    ticket_selling_status: str | None = Field(None, alias="ticket_selling_status")
    ticket_setting: EventTicketSettingFields | None = Field(None, alias="ticket_setting")
    ticket_uri: str | None = Field(None, alias="ticket_uri")
    ticket_uri_start_sales_time: str | None = Field(None, alias="ticket_uri_start_sales_time")
    ticketing_privacy_uri: str | None = Field(None, alias="ticketing_privacy_uri")
    ticketing_terms_uri: str | None = Field(None, alias="ticketing_terms_uri")
    timezone: str | None = Field(None, alias="timezone")
    type: dict[str, Any] | None = Field(None, alias="type")
    updated_time: datetime | None = Field(None, alias="updated_time")


class VideoTextQuestionFields(BaseModel):
    """Pydantic model for VideoTextQuestion fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    question_target_id: str | None = Field(None, alias="question_target_id")
    question_text: str | None = Field(None, alias="question_text")
    status: str | None = Field(None, alias="status")


class ExperienceFields(BaseModel):
    """Pydantic model for Experience fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    description: str | None = Field(None, alias="description")
    from_: dict[str, Any] | None = Field(None, alias="from")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    with_: list[UserFields] | None = Field(None, alias="with")


class AudioSubLabelFields(BaseModel):
    """Pydantic model for AudioSubLabel fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    expiration_timestamp: datetime | None = Field(None, alias="expiration_timestamp")
    flagged_timestamp: datetime | None = Field(None, alias="flagged_timestamp")
    id: str | None = Field(None, alias="id")
    label_name: str | None = Field(None, alias="label_name")
    last_update_timestamp: datetime | None = Field(None, alias="last_update_timestamp")
    num_audio_tracks: int | None = Field(None, alias="num_audio_tracks")
    state: str | None = Field(None, alias="state")


class LeadGenPrivacyPolicyFields(BaseModel):
    """Pydantic model for LeadGenPrivacyPolicy fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    link_text: str | None = Field(None, alias="link_text")
    url: str | None = Field(None, alias="url")


class AdColumnSizesFields(BaseModel):
    """Pydantic model for AdColumnSizes fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    admarket_account: AdAccountFields | None = Field(None, alias="admarket_account")
    app_id: str | None = Field(None, alias="app_id")
    columns: list[dict[str, str]] | None = Field(None, alias="columns")
    id: str | None = Field(None, alias="id")
    owner: UserFields | None = Field(None, alias="owner")
    page: str | None = Field(None, alias="page")
    report: str | None = Field(None, alias="report")
    tab: str | None = Field(None, alias="tab")
    view: str | None = Field(None, alias="view")


class VideoCopyrightFields(BaseModel):
    """Pydantic model for VideoCopyright fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    content_category: str | None = Field(None, alias="content_category")
    copyright_content_id: str | None = Field(None, alias="copyright_content_id")
    creator: UserFields | None = Field(None, alias="creator")
    excluded_ownership_segments: list[VideoCopyrightSegmentFields] | None = Field(
        None, alias="excluded_ownership_segments"
    )
    id: str | None = Field(None, alias="id")
    in_conflict: bool | None = Field(None, alias="in_conflict")
    monitoring_status: str | None = Field(None, alias="monitoring_status")
    monitoring_type: str | None = Field(None, alias="monitoring_type")
    ownership_countries: VideoCopyrightGeoGateFields | None = Field(
        None, alias="ownership_countries"
    )
    reference_file: CopyrightReferenceContainerFields | None = Field(None, alias="reference_file")
    reference_file_disabled: bool | None = Field(None, alias="reference_file_disabled")
    reference_file_disabled_by_ops: bool | None = Field(
        None, alias="reference_file_disabled_by_ops"
    )
    reference_owner_id: str | None = Field(None, alias="reference_owner_id")
    rule_ids: list[VideoCopyrightRuleFields] | None = Field(None, alias="rule_ids")
    tags: list[str] | None = Field(None, alias="tags")
    whitelisted_ids: list[str] | None = Field(None, alias="whitelisted_ids")


class ImageCopyrightDisputeFields(BaseModel):
    """Pydantic model for ImageCopyrightDispute fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    appeal_form_data: str | None = Field(None, alias="appeal_form_data")
    dispute_form_data: str | None = Field(None, alias="dispute_form_data")
    expiration_time: datetime | None = Field(None, alias="expiration_time")
    id: str | None = Field(None, alias="id")
    match_id: str | None = Field(None, alias="match_id")
    status: str | None = Field(None, alias="status")
    time_appealed: datetime | None = Field(None, alias="time_appealed")
    time_created: datetime | None = Field(None, alias="time_created")
    time_updated: datetime | None = Field(None, alias="time_updated")


class ProductFeedUploadFields(BaseModel):
    """Pydantic model for ProductFeedUpload fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    end_time: datetime | None = Field(None, alias="end_time")
    error_count: int | None = Field(None, alias="error_count")
    error_report: ProductFeedUploadErrorReportFields | None = Field(None, alias="error_report")
    filename: str | None = Field(None, alias="filename")
    id: str | None = Field(None, alias="id")
    input_method: dict[str, Any] | None = Field(None, alias="input_method")
    num_deleted_items: int | None = Field(None, alias="num_deleted_items")
    num_detected_items: int | None = Field(None, alias="num_detected_items")
    num_invalid_items: int | None = Field(None, alias="num_invalid_items")
    num_persisted_items: int | None = Field(None, alias="num_persisted_items")
    start_time: datetime | None = Field(None, alias="start_time")
    url: str | None = Field(None, alias="url")
    warning_count: int | None = Field(None, alias="warning_count")


class VideoCopyrightConditionGroupFields(BaseModel):
    """Pydantic model for VideoCopyrightConditionGroup fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    action: str | None = Field(None, alias="action")
    conditions: list[dict[str, Any]] | None = Field(None, alias="conditions")
    validity_status: str | None = Field(None, alias="validity_status")


class CPASAdCreationTemplateFields(BaseModel):
    """Pydantic model for CPASAdCreationTemplate fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    description: str | None = Field(None, alias="description")
    id: str | None = Field(None, alias="id")
    is_unused_template: bool | None = Field(None, alias="is_unused_template")
    name: str | None = Field(None, alias="name")
    optimization_goal: str | None = Field(None, alias="optimization_goal")
    targeting_type: str | None = Field(None, alias="targeting_type")
    template_type: str | None = Field(None, alias="template_type")


class LeadGenURLEntityAtRangesFields(BaseModel):
    """Pydantic model for LeadGenURLEntityAtRanges fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    length: int | None = Field(None, alias="length")
    offset: int | None = Field(None, alias="offset")
    url: str | None = Field(None, alias="url")


class ExternalEventSourceFields(BaseModel):
    """Pydantic model for ExternalEventSource fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    source_type: str | None = Field(None, alias="source_type")


class ALMGuidanceMetricsFields(BaseModel):
    """Pydantic model for ALMGuidanceMetrics fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_account_id: str | None = Field(None, alias="ad_account_id")
    adopted_objects: list[dict[str, Any]] | None = Field(None, alias="adopted_objects")
    guidance_name: str | None = Field(None, alias="guidance_name")
    guidance_type: str | None = Field(None, alias="guidance_type")
    l28_adoption: int | None = Field(None, alias="l28_adoption")
    l28_available: int | None = Field(None, alias="l28_available")
    l28_click: int | None = Field(None, alias="l28_click")
    l28_conversion: int | None = Field(None, alias="l28_conversion")
    l28_has_click: bool | None = Field(None, alias="l28_has_click")
    l28_has_impression: bool | None = Field(None, alias="l28_has_impression")
    l28_impression: int | None = Field(None, alias="l28_impression")
    l28_is_actioned: bool | None = Field(None, alias="l28_is_actioned")
    l28_is_adopted: bool | None = Field(None, alias="l28_is_adopted")
    l28_is_available: bool | None = Field(None, alias="l28_is_available")
    l28_is_pitched: bool | None = Field(None, alias="l28_is_pitched")
    l28_pitch: int | None = Field(None, alias="l28_pitch")
    l28d_adopted_revenue: float | None = Field(None, alias="l28d_adopted_revenue")
    last_actioned_ds: str | None = Field(None, alias="last_actioned_ds")
    last_adopted_ds: str | None = Field(None, alias="last_adopted_ds")
    last_pitch_ds: str | None = Field(None, alias="last_pitch_ds")
    parent_advertiser_id: str | None = Field(None, alias="parent_advertiser_id")
    report_ds: str | None = Field(None, alias="report_ds")


class UserLeadGenDisclaimerResponseFields(BaseModel):
    """Pydantic model for UserLeadGenDisclaimerResponse fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    checkbox_key: str | None = Field(None, alias="checkbox_key")
    is_checked: str | None = Field(None, alias="is_checked")


class DeliveryStatusFields(BaseModel):
    """Pydantic model for DeliveryStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    status: str | None = Field(None, alias="status")
    substatuses: list[str] | None = Field(None, alias="substatuses")


class AdCreativeInsightsFields(BaseModel):
    """Pydantic model for AdCreativeInsights fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    aesthetics: list[dict[str, str]] | None = Field(None, alias="aesthetics")


class AdsPixelEventLastFiredTimeFields(BaseModel):
    """Pydantic model for AdsPixelEventLastFiredTime fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    event: str | None = Field(None, alias="event")
    last_fired_time: int | None = Field(None, alias="last_fired_time")


class AdNetworkAnalyticsAsyncQueryExportFields(BaseModel):
    """Pydantic model for AdNetworkAnalyticsAsyncQueryExport fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    export_link: str | None = Field(None, alias="export_link")
    query_id: str | None = Field(None, alias="query_id")
    status: str | None = Field(None, alias="status")


class AdCreativeRegionalRegulationDisclaimerFields(BaseModel):
    """Pydantic model for AdCreativeRegionalRegulationDisclaimer fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    australia_finserv: dict[str, Any] | None = Field(None, alias="australia_finserv")
    india_finserv: dict[str, Any] | None = Field(None, alias="india_finserv")
    singapore_universal: dict[str, Any] | None = Field(None, alias="singapore_universal")
    taiwan_finserv: dict[str, Any] | None = Field(None, alias="taiwan_finserv")
    taiwan_universal: dict[str, Any] | None = Field(None, alias="taiwan_universal")


class AdsValueAdjustmentRuleCollectionFields(BaseModel):
    """Pydantic model for AdsValueAdjustmentRuleCollection fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    is_default_setting: bool | None = Field(None, alias="is_default_setting")
    name: str | None = Field(None, alias="name")
    product_type: str | None = Field(None, alias="product_type")
    status: str | None = Field(None, alias="status")


class IGUserFields(BaseModel):
    """Pydantic model for IGUser fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    biography: str | None = Field(None, alias="biography")
    business_discovery: IGUserFields | None = Field(None, alias="business_discovery")
    followers_count: int | None = Field(None, alias="followers_count")
    follows_count: int | None = Field(None, alias="follows_count")
    has_profile_pic: bool | None = Field(None, alias="has_profile_pic")
    id: str | None = Field(None, alias="id")
    ig_id: int | None = Field(None, alias="ig_id")
    is_published: bool | None = Field(None, alias="is_published")
    legacy_instagram_user_id: str | None = Field(None, alias="legacy_instagram_user_id")
    media_count: int | None = Field(None, alias="media_count")
    mentioned_comment: IGCommentFields | None = Field(None, alias="mentioned_comment")
    mentioned_media: IGMediaFields | None = Field(None, alias="mentioned_media")
    name: str | None = Field(None, alias="name")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")
    profile_picture_url: str | None = Field(None, alias="profile_picture_url")
    shopping_product_tag_eligibility: bool | None = Field(
        None, alias="shopping_product_tag_eligibility"
    )
    shopping_review_status: str | None = Field(None, alias="shopping_review_status")
    username: str | None = Field(None, alias="username")
    website: str | None = Field(None, alias="website")


class CPASParentCatalogSettingsFields(BaseModel):
    """Pydantic model for CPASParentCatalogSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    attribution_windows: list[str] | None = Field(None, alias="attribution_windows")
    default_currency: str | None = Field(None, alias="default_currency")
    disable_use_as_parent_catalog: bool | None = Field(None, alias="disable_use_as_parent_catalog")
    id: str | None = Field(None, alias="id")


class AgencyClientDeclarationFields(BaseModel):
    """Pydantic model for AgencyClientDeclaration fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    agency_representing_client: int | None = Field(None, alias="agency_representing_client")
    client_based_in_france: int | None = Field(None, alias="client_based_in_france")
    client_city: str | None = Field(None, alias="client_city")
    client_country_code: str | None = Field(None, alias="client_country_code")
    client_email_address: str | None = Field(None, alias="client_email_address")
    client_name: str | None = Field(None, alias="client_name")
    client_postal_code: str | None = Field(None, alias="client_postal_code")
    client_province: str | None = Field(None, alias="client_province")
    client_street: str | None = Field(None, alias="client_street")
    client_street2: str | None = Field(None, alias="client_street2")
    has_written_mandate_from_advertiser: int | None = Field(
        None, alias="has_written_mandate_from_advertiser"
    )
    is_client_paying_invoices: int | None = Field(None, alias="is_client_paying_invoices")


class RegionalRegulationIdentitiesFields(BaseModel):
    """Pydantic model for RegionalRegulationIdentities fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    australia_finserv_beneficiary: str | None = Field(None, alias="australia_finserv_beneficiary")
    australia_finserv_payer: str | None = Field(None, alias="australia_finserv_payer")
    india_finserv_beneficiary: str | None = Field(None, alias="india_finserv_beneficiary")
    india_finserv_payer: str | None = Field(None, alias="india_finserv_payer")
    singapore_universal_beneficiary: str | None = Field(
        None, alias="singapore_universal_beneficiary"
    )
    singapore_universal_payer: str | None = Field(None, alias="singapore_universal_payer")
    taiwan_finserv_beneficiary: str | None = Field(None, alias="taiwan_finserv_beneficiary")
    taiwan_finserv_payer: str | None = Field(None, alias="taiwan_finserv_payer")
    taiwan_universal_beneficiary: str | None = Field(None, alias="taiwan_universal_beneficiary")
    taiwan_universal_payer: str | None = Field(None, alias="taiwan_universal_payer")


class CanvasAdSettingsFields(BaseModel):
    """Pydantic model for CanvasAdSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    is_canvas_collection_eligible: bool | None = Field(None, alias="is_canvas_collection_eligible")
    lead_form_created_time: int | None = Field(None, alias="lead_form_created_time")
    lead_form_name: str | None = Field(None, alias="lead_form_name")
    lead_gen_form_id: str | None = Field(None, alias="lead_gen_form_id")
    leads_count: int | None = Field(None, alias="leads_count")
    product_set_id: str | None = Field(None, alias="product_set_id")
    use_retailer_item_ids: bool | None = Field(None, alias="use_retailer_item_ids")


class AppLinksFields(BaseModel):
    """Pydantic model for AppLinks fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    android: list[AndroidAppLinkFields] | None = Field(None, alias="android")
    id: str | None = Field(None, alias="id")
    ios: list[IosAppLinkFields] | None = Field(None, alias="ios")
    ipad: list[IosAppLinkFields] | None = Field(None, alias="ipad")
    iphone: list[IosAppLinkFields] | None = Field(None, alias="iphone")
    web: WebAppLinkFields | None = Field(None, alias="web")
    windows: list[WindowsAppLinkFields] | None = Field(None, alias="windows")
    windows_phone: list[WindowsPhoneAppLinkFields] | None = Field(None, alias="windows_phone")
    windows_universal: list[WindowsAppLinkFields] | None = Field(None, alias="windows_universal")


class AdSavedLocationFields(BaseModel):
    """Pydantic model for AdSavedLocation fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    cities: list[TargetingGeoLocationCityFields] | None = Field(None, alias="cities")
    countries: list[str] | None = Field(None, alias="countries")
    country_groups: list[str] | None = Field(None, alias="country_groups")
    custom_locations: list[TargetingGeoLocationCustomLocationFields] | None = Field(
        None, alias="custom_locations"
    )
    geo_markets: list[TargetingGeoLocationMarketFields] | None = Field(None, alias="geo_markets")
    id: str | None = Field(None, alias="id")
    location_sentences: list[str] | None = Field(None, alias="location_sentences")
    name: str | None = Field(None, alias="name")
    regions: list[TargetingGeoLocationRegionFields] | None = Field(None, alias="regions")
    zips: list[TargetingGeoLocationZipFields] | None = Field(None, alias="zips")


class ThirdPartyMeasurementReportDatasetFields(BaseModel):
    """Pydantic model for ThirdPartyMeasurementReportDataset fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    category: str | None = Field(None, alias="category")
    id: str | None = Field(None, alias="id")
    partner: BusinessFields | None = Field(None, alias="partner")
    product: str | None = Field(None, alias="product")
    schema_: list[dict[str, Any]] | None = Field(None, alias="schema")


class HomeListingFields(BaseModel):
    """Pydantic model for HomeListing fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ac_type: str | None = Field(None, alias="ac_type")
    additional_fees_description: str | None = Field(None, alias="additional_fees_description")
    address: dict[str, Any] | None = Field(None, alias="address")
    agent_company: str | None = Field(None, alias="agent_company")
    agent_email: str | None = Field(None, alias="agent_email")
    agent_fb_page_id: PageFields | None = Field(None, alias="agent_fb_page_id")
    agent_name: str | None = Field(None, alias="agent_name")
    agent_phone: str | None = Field(None, alias="agent_phone")
    applinks: CatalogItemAppLinksFields | None = Field(None, alias="applinks")
    area_size: int | None = Field(None, alias="area_size")
    area_unit: str | None = Field(None, alias="area_unit")
    availability: str | None = Field(None, alias="availability")
    category_specific_fields: CatalogSubVerticalListFields | None = Field(
        None, alias="category_specific_fields"
    )
    co_2_emission_rating_eu: dict[str, Any] | None = Field(None, alias="co_2_emission_rating_eu")
    currency: str | None = Field(None, alias="currency")
    custom_label_0: str | None = Field(None, alias="custom_label_0")
    custom_label_1: str | None = Field(None, alias="custom_label_1")
    custom_label_2: str | None = Field(None, alias="custom_label_2")
    custom_label_3: str | None = Field(None, alias="custom_label_3")
    custom_label_4: str | None = Field(None, alias="custom_label_4")
    custom_number_0: int | None = Field(None, alias="custom_number_0")
    custom_number_1: int | None = Field(None, alias="custom_number_1")
    custom_number_2: int | None = Field(None, alias="custom_number_2")
    custom_number_3: int | None = Field(None, alias="custom_number_3")
    custom_number_4: int | None = Field(None, alias="custom_number_4")
    days_on_market: int | None = Field(None, alias="days_on_market")
    description: str | None = Field(None, alias="description")
    energy_rating_eu: dict[str, Any] | None = Field(None, alias="energy_rating_eu")
    furnish_type: str | None = Field(None, alias="furnish_type")
    group_id: str | None = Field(None, alias="group_id")
    heating_type: str | None = Field(None, alias="heating_type")
    home_listing_id: str | None = Field(None, alias="home_listing_id")
    id: str | None = Field(None, alias="id")
    image_fetch_status: dict[str, Any] | None = Field(None, alias="image_fetch_status")
    images: list[str] | None = Field(None, alias="images")
    laundry_type: str | None = Field(None, alias="laundry_type")
    listing_type: str | None = Field(None, alias="listing_type")
    max_currency: str | None = Field(None, alias="max_currency")
    max_price: str | None = Field(None, alias="max_price")
    min_currency: str | None = Field(None, alias="min_currency")
    min_price: str | None = Field(None, alias="min_price")
    name: str | None = Field(None, alias="name")
    num_baths: float | None = Field(None, alias="num_baths")
    num_beds: float | None = Field(None, alias="num_beds")
    num_rooms: float | None = Field(None, alias="num_rooms")
    num_units: int | None = Field(None, alias="num_units")
    parking_type: str | None = Field(None, alias="parking_type")
    partner_verification: str | None = Field(None, alias="partner_verification")
    pet_policy: str | None = Field(None, alias="pet_policy")
    price: str | None = Field(None, alias="price")
    property_type: str | None = Field(None, alias="property_type")
    sanitized_images: list[str] | None = Field(None, alias="sanitized_images")
    securitydeposit_currency: str | None = Field(None, alias="securitydeposit_currency")
    securitydeposit_price: str | None = Field(None, alias="securitydeposit_price")
    tags: list[str] | None = Field(None, alias="tags")
    unit_price: dict[str, Any] | None = Field(None, alias="unit_price")
    url: str | None = Field(None, alias="url")
    visibility: dict[str, Any] | None = Field(None, alias="visibility")
    year_built: int | None = Field(None, alias="year_built")


class GeoGatingPolicyFields(BaseModel):
    """Pydantic model for GeoGatingPolicy fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    after_schedule: str | None = Field(None, alias="after_schedule")
    exclude_country: list[str] | None = Field(None, alias="exclude_country")
    id: str | None = Field(None, alias="id")
    include_country: list[str] | None = Field(None, alias="include_country")
    name: str | None = Field(None, alias="name")
    valid_from: datetime | None = Field(None, alias="valid_from")
    valid_until: datetime | None = Field(None, alias="valid_until")


class AdPlacePageSetMetadataFields(BaseModel):
    """Pydantic model for AdPlacePageSetMetadata fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    audience: dict[str, Any] | None = Field(None, alias="audience")
    custom: dict[str, Any] | None = Field(None, alias="custom")
    extra_data: str | None = Field(None, alias="extra_data")
    fixed_radius: dict[str, Any] | None = Field(None, alias="fixed_radius")


class McomOnboardingStatusFields(BaseModel):
    """Pydantic model for McomOnboardingStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    onboarding_status: str | None = Field(None, alias="onboarding_status")
    page_id: str | None = Field(None, alias="page_id")


class AdCreativeLinkDataAppLinkSpecFields(BaseModel):
    """Pydantic model for AdCreativeLinkDataAppLinkSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    android: list[AndroidAppLinkFields] | None = Field(None, alias="android")
    ios: list[IosAppLinkFields] | None = Field(None, alias="ios")
    ipad: list[IosAppLinkFields] | None = Field(None, alias="ipad")
    iphone: list[IosAppLinkFields] | None = Field(None, alias="iphone")


class AdDynamicCreativeFields(BaseModel):
    """Pydantic model for AdDynamicCreative fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    preview_url: str | None = Field(None, alias="preview_url")


class AdAccountDefaultDestinationFields(BaseModel):
    """Pydantic model for AdAccountDefaultDestination fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    destination_id: str | None = Field(None, alias="destination_id")
    destination_url: str | None = Field(None, alias="destination_url")


class ManagedPartnerBusinessFields(BaseModel):
    """Pydantic model for ManagedPartnerBusiness fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_account: AdAccountFields | None = Field(None, alias="ad_account")
    catalog_segment: ProductCatalogFields | None = Field(None, alias="catalog_segment")
    extended_credit: ManagedPartnerExtendedCreditFields | None = Field(
        None, alias="extended_credit"
    )
    page: PageFields | None = Field(None, alias="page")
    seller_business_info: dict[str, Any] | None = Field(None, alias="seller_business_info")
    seller_business_status: str | None = Field(None, alias="seller_business_status")
    template: list[dict[str, Any]] | None = Field(None, alias="template")


class CommerceMerchantSettingsFields(BaseModel):
    """Pydantic model for CommerceMerchantSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    checkout_config: str | None = Field(None, alias="checkout_config")
    checkout_message: str | None = Field(None, alias="checkout_message")
    contact_email: str | None = Field(None, alias="contact_email")
    cta: str | None = Field(None, alias="cta")
    display_name: str | None = Field(None, alias="display_name")
    facebook_channel: dict[str, Any] | None = Field(None, alias="facebook_channel")
    id: str | None = Field(None, alias="id")
    instagram_channel: dict[str, Any] | None = Field(None, alias="instagram_channel")
    korea_ftc_listing: str | None = Field(None, alias="korea_ftc_listing")
    merchant_page: ProfileFields | None = Field(None, alias="merchant_page")
    merchant_status: str | None = Field(None, alias="merchant_status")
    onsite_commerce_merchant: dict[str, Any] | None = Field(None, alias="onsite_commerce_merchant")
    payment_provider: str | None = Field(None, alias="payment_provider")
    privacy_policy_localized: str | None = Field(None, alias="privacy_policy_localized")
    return_policy_localized: str | None = Field(None, alias="return_policy_localized")
    review_rejection_messages: list[str] | None = Field(None, alias="review_rejection_messages")
    review_rejection_reasons: list[str] | None = Field(None, alias="review_rejection_reasons")
    terms: str | None = Field(None, alias="terms")


class AdCreativePlaceDataFields(BaseModel):
    """Pydantic model for AdCreativePlaceData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    address_string: str | None = Field(None, alias="address_string")
    label: str | None = Field(None, alias="label")
    latitude: float | None = Field(None, alias="latitude")
    location_source_id: str | None = Field(None, alias="location_source_id")
    longitude: float | None = Field(None, alias="longitude")
    type: str | None = Field(None, alias="type")


class ExtendedCreditInfoFields(BaseModel):
    """Pydantic model for ExtendedCreditInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    credit_left: str | None = Field(None, alias="credit_left")
    credit_revoked: bool | None = Field(None, alias="credit_revoked")
    credit_used: str | None = Field(None, alias="credit_used")
    using_biz_ec: str | None = Field(None, alias="using_biz_ec")


class PlaceTagFields(BaseModel):
    """Pydantic model for PlaceTag fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    created_time: datetime | None = Field(None, alias="created_time")
    id: str | None = Field(None, alias="id")
    place: PageFields | None = Field(None, alias="place")


class AdsMcmeConversionFields(BaseModel):
    """Pydantic model for AdsMcmeConversion fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    creation_time: datetime | None = Field(None, alias="creation_time")
    description: str | None = Field(None, alias="description")
    id: str | None = Field(None, alias="id")
    is_archived: bool | None = Field(None, alias="is_archived")
    mcme_conversion_type: str | None = Field(None, alias="mcme_conversion_type")
    name: str | None = Field(None, alias="name")
    omnichannel_object_id: str | None = Field(None, alias="omnichannel_object_id")


class ShopFields(BaseModel):
    """Pydantic model for Shop fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    commerce_merchant_settings: CommerceMerchantSettingsFields | None = Field(
        None, alias="commerce_merchant_settings"
    )
    fb_sales_channel: dict[str, Any] | None = Field(None, alias="fb_sales_channel")
    id: str | None = Field(None, alias="id")
    ig_sales_channel: dict[str, Any] | None = Field(None, alias="ig_sales_channel")
    is_onsite_enabled: bool | None = Field(None, alias="is_onsite_enabled")
    shop_status: str | None = Field(None, alias="shop_status")
    workspace: dict[str, Any] | None = Field(None, alias="workspace")


class ProductItemShippingFields(BaseModel):
    """Pydantic model for ProductItemShipping fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    shipping_country: str | None = Field(None, alias="shipping_country")
    shipping_price_currency: str | None = Field(None, alias="shipping_price_currency")
    shipping_price_value: float | None = Field(None, alias="shipping_price_value")
    shipping_region: str | None = Field(None, alias="shipping_region")
    shipping_service: str | None = Field(None, alias="shipping_service")


class AdsReportBuilderMMMReportSchedulerFields(BaseModel):
    """Pydantic model for AdsReportBuilderMMMReportScheduler fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_account_ids: list[str] | None = Field(None, alias="ad_account_ids")
    filtering: list[dict[str, Any]] | None = Field(None, alias="filtering")
    id: str | None = Field(None, alias="id")
    report_name: str | None = Field(None, alias="report_name")
    schedule_frequency: str | None = Field(None, alias="schedule_frequency")


class ReachFrequencySpecFields(BaseModel):
    """Pydantic model for ReachFrequencySpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    countries: list[str] | None = Field(None, alias="countries")
    default_creation_data: dict[str, Any] | None = Field(None, alias="default_creation_data")
    global_io_max_campaign_duration: int | None = Field(
        None, alias="global_io_max_campaign_duration"
    )
    max_campaign_duration: dict[str, Any] | None = Field(None, alias="max_campaign_duration")
    max_days_to_finish: dict[str, Any] | None = Field(None, alias="max_days_to_finish")
    max_pause_without_prediction_rerun: dict[str, Any] | None = Field(
        None, alias="max_pause_without_prediction_rerun"
    )
    min_campaign_duration: dict[str, Any] | None = Field(None, alias="min_campaign_duration")
    min_reach_limits: dict[str, Any] | None = Field(None, alias="min_reach_limits")


class CreativeMulticellTestConfigFields(BaseModel):
    """Pydantic model for CreativeMulticellTestConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    budget_percentage: int | None = Field(None, alias="budget_percentage")
    configured_cell_count: int | None = Field(None, alias="configured_cell_count")
    daily_budget: int | None = Field(None, alias="daily_budget")
    entry_source: str | None = Field(None, alias="entry_source")
    lifetime_budget: int | None = Field(None, alias="lifetime_budget")
    use_existing_daily_budget: bool | None = Field(None, alias="use_existing_daily_budget")


class UserPaymentModulesOptionsFields(BaseModel):
    """Pydantic model for UserPaymentModulesOptions fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    available_payment_options: list[dict[str, Any]] | None = Field(
        None, alias="available_payment_options"
    )
    country: str | None = Field(None, alias="country")
    currency: str | None = Field(None, alias="currency")


class ContentBlockListFields(BaseModel):
    """Pydantic model for ContentBlockList fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    business: BusinessFields | None = Field(None, alias="business")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class AdCreativeGenerativeAssetSpecFields(BaseModel):
    """Pydantic model for AdCreativeGenerativeAssetSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pass  # No fields defined


class AdCreativePhotoDataMediaElementsFields(BaseModel):
    """Pydantic model for AdCreativePhotoDataMediaElements fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    element_id: str | None = Field(None, alias="element_id")
    element_type: str | None = Field(None, alias="element_type")
    x: float | None = Field(None, alias="x")
    y: float | None = Field(None, alias="y")


class PhotoMetadataFields(BaseModel):
    """Pydantic model for PhotoMetadata fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    camera_make: str | None = Field(None, alias="camera_make")
    camera_model: str | None = Field(None, alias="camera_model")
    datetime_modified: datetime | None = Field(None, alias="datetime_modified")
    datetime_taken: datetime | None = Field(None, alias="datetime_taken")
    exposure: str | None = Field(None, alias="exposure")
    focal_length: str | None = Field(None, alias="focal_length")
    fstop: str | None = Field(None, alias="fstop")
    iso_speed: int | None = Field(None, alias="iso_speed")
    offline_id: str | None = Field(None, alias="offline_id")
    orientation: str | None = Field(None, alias="orientation")
    original_height: str | None = Field(None, alias="original_height")
    original_width: str | None = Field(None, alias="original_width")


class CopyrightAudioAssetFields(BaseModel):
    """Pydantic model for CopyrightAudioAsset fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    audio_availability_status: str | None = Field(None, alias="audio_availability_status")
    audio_library_policy: list[dict[str, list[dict[str, dict[str, Any]]]]] | None = Field(
        None, alias="audio_library_policy"
    )
    creation_time: datetime | None = Field(None, alias="creation_time")
    id: str | None = Field(None, alias="id")
    reference_files: list[dict[str, Any]] | None = Field(None, alias="reference_files")
    title: str | None = Field(None, alias="title")
    update_time: datetime | None = Field(None, alias="update_time")


class AdsAnomalyDetectionFields(BaseModel):
    """Pydantic model for AdsAnomalyDetection fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    anomaly_data: list[dict[str, Any]] | None = Field(None, alias="anomaly_data")
    day: int | None = Field(None, alias="day")


class AdStudyCellFields(BaseModel):
    """Pydantic model for AdStudyCell fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_entities_count: int | None = Field(None, alias="ad_entities_count")
    control_percentage: float | None = Field(None, alias="control_percentage")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    treatment_percentage: float | None = Field(None, alias="treatment_percentage")


class AdAssetFeedSpecCallToActionFields(BaseModel):
    """Pydantic model for AdAssetFeedSpecCallToAction fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adlabels: list[AdAssetFeedSpecAssetLabelFields] | None = Field(None, alias="adlabels")
    type: str | None = Field(None, alias="type")
    value: AdCreativeLinkDataCallToActionValueFields | None = Field(None, alias="value")


class ValueBasedEligibleSourceFields(BaseModel):
    """Pydantic model for ValueBasedEligibleSource fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    title: str | None = Field(None, alias="title")
    type: str | None = Field(None, alias="type")


class AdAssetFeedSpecCarouselFields(BaseModel):
    """Pydantic model for AdAssetFeedSpecCarousel fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adlabels: list[AdAssetFeedSpecAssetLabelFields] | None = Field(None, alias="adlabels")
    child_attachments: list[AdAssetFeedSpecCarouselChildAttachmentFields] | None = Field(
        None, alias="child_attachments"
    )
    multi_share_end_card: bool | None = Field(None, alias="multi_share_end_card")
    multi_share_optimized: bool | None = Field(None, alias="multi_share_optimized")


class BusinessApplicationRequestFields(BaseModel):
    """Pydantic model for BusinessApplicationRequest fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    application: ApplicationFields | None = Field(None, alias="application")
    id: str | None = Field(None, alias="id")


class P2MInvoicePaymentsFields(BaseModel):
    """Pydantic model for P2MInvoicePayments fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    page_id: str | None = Field(None, alias="page_id")
    payments: list[dict[str, Any]] | None = Field(None, alias="payments")


class CustomAudienceIntegrityFlagsAndAppealStatusFields(BaseModel):
    """Pydantic model for CustomAudienceIntegrityFlagsAndAppealStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    closeout_time: int | None = Field(None, alias="closeout_time")
    flagged_fields: list[str] | None = Field(None, alias="flagged_fields")
    latest_appeal_requestor: str | None = Field(None, alias="latest_appeal_requestor")
    latest_appeal_time: int | None = Field(None, alias="latest_appeal_time")
    restriction_status: str | None = Field(None, alias="restriction_status")


class MediaTitleFields(BaseModel):
    """Pydantic model for MediaTitle fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    applinks: CatalogItemAppLinksFields | None = Field(None, alias="applinks")
    category_specific_fields: CatalogSubVerticalListFields | None = Field(
        None, alias="category_specific_fields"
    )
    content_category: str | None = Field(None, alias="content_category")
    currency: str | None = Field(None, alias="currency")
    description: str | None = Field(None, alias="description")
    fb_page_alias: str | None = Field(None, alias="fb_page_alias")
    fb_page_id: PageFields | None = Field(None, alias="fb_page_id")
    genres: list[str] | None = Field(None, alias="genres")
    id: str | None = Field(None, alias="id")
    image_fetch_status: dict[str, Any] | None = Field(None, alias="image_fetch_status")
    images: list[str] | None = Field(None, alias="images")
    kg_fb_id: str | None = Field(None, alias="kg_fb_id")
    media_title_id: str | None = Field(None, alias="media_title_id")
    price: str | None = Field(None, alias="price")
    sanitized_images: list[str] | None = Field(None, alias="sanitized_images")
    title: str | None = Field(None, alias="title")
    title_display_name: str | None = Field(None, alias="title_display_name")
    unit_price: dict[str, Any] | None = Field(None, alias="unit_price")
    url: str | None = Field(None, alias="url")
    visibility: dict[str, Any] | None = Field(None, alias="visibility")
    wiki_data_item: str | None = Field(None, alias="wiki_data_item")


class OverrideDetailsFields(BaseModel):
    """Pydantic model for OverrideDetails fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    key: str | None = Field(None, alias="key")
    type: str | None = Field(None, alias="type")
    values: dict[str, Any] | None = Field(None, alias="values")


class AdPlacementFields(BaseModel):
    """Pydantic model for AdPlacement fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    bundle_id: str | None = Field(None, alias="bundle_id")
    display_format: str | None = Field(None, alias="display_format")
    external_placement_id: str | None = Field(None, alias="external_placement_id")
    google_display_format: str | None = Field(None, alias="google_display_format")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    placement_group: dict[str, Any] | None = Field(None, alias="placement_group")
    platform: str | None = Field(None, alias="platform")
    status: str | None = Field(None, alias="status")


class AndroidAppLinkFields(BaseModel):
    """Pydantic model for AndroidAppLink fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app_name: str | None = Field(None, alias="app_name")
    class_: str | None = Field(None, alias="class")
    package: str | None = Field(None, alias="package")
    url: str | None = Field(None, alias="url")


class AdsActionStatsFields(BaseModel):
    """Pydantic model for AdsActionStats fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    field_1d_click: str | None = Field(None, alias="1d_click")
    field_1d_click_all_conversions: str | None = Field(None, alias="1d_click_all_conversions")
    field_1d_click_first_conversion: str | None = Field(None, alias="1d_click_first_conversion")
    field_1d_ev: str | None = Field(None, alias="1d_ev")
    field_1d_ev_all_conversions: str | None = Field(None, alias="1d_ev_all_conversions")
    field_1d_ev_first_conversion: str | None = Field(None, alias="1d_ev_first_conversion")
    field_1d_view: str | None = Field(None, alias="1d_view")
    field_1d_view_all_conversions: str | None = Field(None, alias="1d_view_all_conversions")
    field_1d_view_first_conversion: str | None = Field(None, alias="1d_view_first_conversion")
    field_28d_click: str | None = Field(None, alias="28d_click")
    field_28d_click_all_conversions: str | None = Field(None, alias="28d_click_all_conversions")
    field_28d_click_first_conversion: str | None = Field(None, alias="28d_click_first_conversion")
    field_28d_view: str | None = Field(None, alias="28d_view")
    field_28d_view_all_conversions: str | None = Field(None, alias="28d_view_all_conversions")
    field_28d_view_first_conversion: str | None = Field(None, alias="28d_view_first_conversion")
    field_7d_click: str | None = Field(None, alias="7d_click")
    field_7d_click_all_conversions: str | None = Field(None, alias="7d_click_all_conversions")
    field_7d_click_first_conversion: str | None = Field(None, alias="7d_click_first_conversion")
    field_7d_view: str | None = Field(None, alias="7d_view")
    field_7d_view_all_conversions: str | None = Field(None, alias="7d_view_all_conversions")
    field_7d_view_first_conversion: str | None = Field(None, alias="7d_view_first_conversion")
    action_brand: str | None = Field(None, alias="action_brand")
    action_canvas_component_id: str | None = Field(None, alias="action_canvas_component_id")
    action_canvas_component_name: str | None = Field(None, alias="action_canvas_component_name")
    action_carousel_card_id: str | None = Field(None, alias="action_carousel_card_id")
    action_carousel_card_name: str | None = Field(None, alias="action_carousel_card_name")
    action_category: str | None = Field(None, alias="action_category")
    action_converted_product_id: str | None = Field(None, alias="action_converted_product_id")
    action_destination: str | None = Field(None, alias="action_destination")
    action_device: str | None = Field(None, alias="action_device")
    action_event_channel: str | None = Field(None, alias="action_event_channel")
    action_link_click_destination: str | None = Field(None, alias="action_link_click_destination")
    action_location_code: str | None = Field(None, alias="action_location_code")
    action_reaction: str | None = Field(None, alias="action_reaction")
    action_target_id: str | None = Field(None, alias="action_target_id")
    action_type: str | None = Field(None, alias="action_type")
    action_video_asset_id: str | None = Field(None, alias="action_video_asset_id")
    action_video_sound: str | None = Field(None, alias="action_video_sound")
    action_video_type: str | None = Field(None, alias="action_video_type")
    dda: str | None = Field(None, alias="dda")
    incrementality: str | None = Field(None, alias="incrementality")
    incrementality_all_conversions: str | None = Field(None, alias="incrementality_all_conversions")
    incrementality_first_conversion: str | None = Field(
        None, alias="incrementality_first_conversion"
    )
    inline: str | None = Field(None, alias="inline")
    interactive_component_sticker_id: str | None = Field(
        None, alias="interactive_component_sticker_id"
    )
    interactive_component_sticker_response: str | None = Field(
        None, alias="interactive_component_sticker_response"
    )
    skan_click: str | None = Field(None, alias="skan_click")
    skan_click_second_postback: str | None = Field(None, alias="skan_click_second_postback")
    skan_click_third_postback: str | None = Field(None, alias="skan_click_third_postback")
    skan_view: str | None = Field(None, alias="skan_view")
    skan_view_second_postback: str | None = Field(None, alias="skan_view_second_postback")
    skan_view_third_postback: str | None = Field(None, alias="skan_view_third_postback")
    value: str | None = Field(None, alias="value")


class CreatorAssetCreativeFields(BaseModel):
    """Pydantic model for CreatorAssetCreative fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    image_url: str | None = Field(None, alias="image_url")
    moderation_status: str | None = Field(None, alias="moderation_status")
    product_item_retailer_id: str | None = Field(None, alias="product_item_retailer_id")
    product_url: str | None = Field(None, alias="product_url")
    retailer_id: str | None = Field(None, alias="retailer_id")
    video_url: str | None = Field(None, alias="video_url")


class TargetingAutomationFields(BaseModel):
    """Pydantic model for TargetingAutomation fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    advantage_audience: int | None = Field(None, alias="advantage_audience")
    individual_setting: dict[str, Any] | None = Field(None, alias="individual_setting")
    shared_audiences: int | None = Field(None, alias="shared_audiences")
    value_expression: int | None = Field(None, alias="value_expression")


class AdAccountAdRulesHistoryFields(BaseModel):
    """Pydantic model for AdAccountAdRulesHistory fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    evaluation_spec: AdRuleEvaluationSpecFields | None = Field(None, alias="evaluation_spec")
    exception_code: int | None = Field(None, alias="exception_code")
    exception_message: str | None = Field(None, alias="exception_message")
    execution_spec: AdRuleExecutionSpecFields | None = Field(None, alias="execution_spec")
    is_manual: bool | None = Field(None, alias="is_manual")
    results: list[AdRuleHistoryResultFields] | None = Field(None, alias="results")
    rule_id: int | None = Field(None, alias="rule_id")
    schedule_spec: AdRuleScheduleSpecFields | None = Field(None, alias="schedule_spec")
    timestamp: datetime | None = Field(None, alias="timestamp")


class AdContractFields(BaseModel):
    """Pydantic model for AdContract fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    account_mgr_fbid: str | None = Field(None, alias="account_mgr_fbid")
    account_mgr_name: str | None = Field(None, alias="account_mgr_name")
    adops_person_name: str | None = Field(None, alias="adops_person_name")
    advertiser_address_fbid: str | None = Field(None, alias="advertiser_address_fbid")
    advertiser_fbid: str | None = Field(None, alias="advertiser_fbid")
    advertiser_name: str | None = Field(None, alias="advertiser_name")
    agency_discount: float | None = Field(None, alias="agency_discount")
    agency_name: str | None = Field(None, alias="agency_name")
    bill_to_address_fbid: str | None = Field(None, alias="bill_to_address_fbid")
    bill_to_fbid: str | None = Field(None, alias="bill_to_fbid")
    campaign_name: str | None = Field(None, alias="campaign_name")
    created_by: str | None = Field(None, alias="created_by")
    created_date: int | None = Field(None, alias="created_date")
    customer_io: str | None = Field(None, alias="customer_io")
    io_number: int | None = Field(None, alias="io_number")
    io_terms: str | None = Field(None, alias="io_terms")
    io_type: str | None = Field(None, alias="io_type")
    last_updated_by: str | None = Field(None, alias="last_updated_by")
    last_updated_date: int | None = Field(None, alias="last_updated_date")
    max_end_date: int | None = Field(None, alias="max_end_date")
    mdc_fbid: str | None = Field(None, alias="mdc_fbid")
    media_plan_number: str | None = Field(None, alias="media_plan_number")
    min_start_date: int | None = Field(None, alias="min_start_date")
    msa_contract: str | None = Field(None, alias="msa_contract")
    payment_terms: str | None = Field(None, alias="payment_terms")
    rev_hold_flag: bool | None = Field(None, alias="rev_hold_flag")
    rev_hold_released_by: int | None = Field(None, alias="rev_hold_released_by")
    rev_hold_released_on: int | None = Field(None, alias="rev_hold_released_on")
    salesrep_fbid: str | None = Field(None, alias="salesrep_fbid")
    salesrep_name: str | None = Field(None, alias="salesrep_name")
    sold_to_address_fbid: str | None = Field(None, alias="sold_to_address_fbid")
    sold_to_fbid: str | None = Field(None, alias="sold_to_fbid")
    status: str | None = Field(None, alias="status")
    subvertical: str | None = Field(None, alias="subvertical")
    thirdparty_billed: int | None = Field(None, alias="thirdparty_billed")
    thirdparty_uid: str | None = Field(None, alias="thirdparty_uid")
    thirdparty_url: str | None = Field(None, alias="thirdparty_url")
    vat_country: str | None = Field(None, alias="vat_country")
    version: int | None = Field(None, alias="version")
    vertical: str | None = Field(None, alias="vertical")


class MediaCopyrightUpdateRecordFields(BaseModel):
    """Pydantic model for MediaCopyrightUpdateRecord fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    action_types: list[str] | None = Field(None, alias="action_types")
    actor: UserFields | None = Field(None, alias="actor")
    actor_type: str | None = Field(None, alias="actor_type")
    creation_time: datetime | None = Field(None, alias="creation_time")
    id: str | None = Field(None, alias="id")
    ownership_countries: list[dict[str, Any]] | None = Field(None, alias="ownership_countries")
    whitelisted_accounts: list[dict[str, Any]] | None = Field(None, alias="whitelisted_accounts")


class PageCTSTopicFields(BaseModel):
    """Pydantic model for PageCTSTopic fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app_id: str | None = Field(None, alias="app_id")
    frequency: str | None = Field(None, alias="frequency")
    image_hash: str | None = Field(None, alias="image_hash")
    image_url: str | None = Field(None, alias="image_url")
    subscriber: int | None = Field(None, alias="subscriber")
    title: str | None = Field(None, alias="title")


class IGCommentFromUserFields(BaseModel):
    """Pydantic model for IGCommentFromUser fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    self_ig_scoped_id: str | None = Field(None, alias="self_ig_scoped_id")
    username: str | None = Field(None, alias="username")


class LeadFields(BaseModel):
    """Pydantic model for Lead fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_id: str | None = Field(None, alias="ad_id")
    ad_name: str | None = Field(None, alias="ad_name")
    adset_id: str | None = Field(None, alias="adset_id")
    adset_name: str | None = Field(None, alias="adset_name")
    campaign_id: str | None = Field(None, alias="campaign_id")
    campaign_name: str | None = Field(None, alias="campaign_name")
    created_time: datetime | None = Field(None, alias="created_time")
    custom_disclaimer_responses: list[UserLeadGenDisclaimerResponseFields] | None = Field(
        None, alias="custom_disclaimer_responses"
    )
    field_data: list[UserLeadGenFieldDataFields] | None = Field(None, alias="field_data")
    form_id: str | None = Field(None, alias="form_id")
    home_listing: HomeListingFields | None = Field(None, alias="home_listing")
    id: str | None = Field(None, alias="id")
    is_organic: bool | None = Field(None, alias="is_organic")
    partner_name: str | None = Field(None, alias="partner_name")
    platform: str | None = Field(None, alias="platform")
    post: LinkFields | None = Field(None, alias="post")
    post_submission_check_result: LeadGenPostSubmissionCheckResultFields | None = Field(
        None, alias="post_submission_check_result"
    )
    retailer_item_id: str | None = Field(None, alias="retailer_item_id")
    vehicle: VehicleFields | None = Field(None, alias="vehicle")


class AdCreativeFeatureCustomizationsFields(BaseModel):
    """Pydantic model for AdCreativeFeatureCustomizations fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    background_color: str | None = Field(None, alias="background_color")
    catalog_feed_tag_name: str | None = Field(None, alias="catalog_feed_tag_name")
    font_name: str | None = Field(None, alias="font_name")
    image_crop_style: str | None = Field(None, alias="image_crop_style")
    pe_carousel: dict[str, Any] | None = Field(None, alias="pe_carousel")
    showcase_card_display: str | None = Field(None, alias="showcase_card_display")
    text_extraction: dict[str, Any] | None = Field(None, alias="text_extraction")
    text_style: str | None = Field(None, alias="text_style")


class AdAccountIosFourteenCampaignLimitsFields(BaseModel):
    """Pydantic model for AdAccountIosFourteenCampaignLimits fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    campaign_group_limit: int | None = Field(None, alias="campaign_group_limit")
    campaign_group_limits_details: list[dict[str, Any]] | None = Field(
        None, alias="campaign_group_limits_details"
    )
    campaign_limit: int | None = Field(None, alias="campaign_limit")


class BusinessImageTBusinessFolderPathItemFields(BaseModel):
    """Pydantic model for BusinessImageTBusinessFolderPathItem fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    parent_folder_id: str | None = Field(None, alias="parent_folder_id")
    type: str | None = Field(None, alias="type")


class CTXDefaultOptimizationConfigFields(BaseModel):
    """Pydantic model for CTXDefaultOptimizationConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    destination_type: str | None = Field(None, alias="destination_type")
    objective: str | None = Field(None, alias="objective")
    optimization_goal: str | None = Field(None, alias="optimization_goal")


class AdsPaymentCycleFields(BaseModel):
    """Pydantic model for AdsPaymentCycle fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    created_time: datetime | None = Field(None, alias="created_time")
    multiplier: int | None = Field(None, alias="multiplier")
    requested_threshold_amount: int | None = Field(None, alias="requested_threshold_amount")
    threshold_amount: int | None = Field(None, alias="threshold_amount")
    updated_time: datetime | None = Field(None, alias="updated_time")


class RichMediaElementFields(BaseModel):
    """Pydantic model for RichMediaElement fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    element: dict[str, Any] | None = Field(None, alias="element")
    element_type: str | None = Field(None, alias="element_type")
    name: str | None = Field(None, alias="name")


class LookalikeSpecFields(BaseModel):
    """Pydantic model for LookalikeSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    country: str | None = Field(None, alias="country")
    is_financial_service: bool | None = Field(None, alias="is_financial_service")
    origin: list[dict[str, Any]] | None = Field(None, alias="origin")
    origin_event_name: str | None = Field(None, alias="origin_event_name")
    origin_event_source_name: str | None = Field(None, alias="origin_event_source_name")
    origin_event_source_type: str | None = Field(None, alias="origin_event_source_type")
    product_set_name: str | None = Field(None, alias="product_set_name")
    ratio: float | None = Field(None, alias="ratio")
    starting_ratio: float | None = Field(None, alias="starting_ratio")
    target_countries: list[str] | None = Field(None, alias="target_countries")
    target_country_names: dict[str, Any] | None = Field(None, alias="target_country_names")
    type: str | None = Field(None, alias="type")


class AdCampaignGroupAdvantageStateFields(BaseModel):
    """Pydantic model for AdCampaignGroupAdvantageState fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    advantage_audience_state: str | None = Field(None, alias="advantage_audience_state")
    advantage_budget_state: str | None = Field(None, alias="advantage_budget_state")
    advantage_placement_state: str | None = Field(None, alias="advantage_placement_state")
    advantage_state: str | None = Field(None, alias="advantage_state")


class AdsPixelCAPIIntegrationQualityFields(BaseModel):
    """Pydantic model for AdsPixelCAPIIntegrationQuality fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    acr: dict[str, Any] | None = Field(None, alias="acr")
    data_freshness: dict[str, Any] | None = Field(None, alias="data_freshness")
    dedupe_key_feedback: list[dict[str, Any]] | None = Field(None, alias="dedupe_key_feedback")
    event_coverage: dict[str, Any] | None = Field(None, alias="event_coverage")
    event_match_quality: dict[str, Any] | None = Field(None, alias="event_match_quality")
    event_name: str | None = Field(None, alias="event_name")
    event_potential_aly_acr_increase: dict[str, Any] | None = Field(
        None, alias="event_potential_aly_acr_increase"
    )


class ProductCatalogImageSettingsFields(BaseModel):
    """Pydantic model for ProductCatalogImageSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    carousel_ad: ProductCatalogImageSettingsOperationFields | None = Field(
        None, alias="carousel_ad"
    )
    single_ad: ProductCatalogImageSettingsOperationFields | None = Field(None, alias="single_ad")


class RevSharePolicyFields(BaseModel):
    """Pydantic model for RevSharePolicy fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    policy_id: str | None = Field(None, alias="policy_id")
    policy_name: str | None = Field(None, alias="policy_name")


class CanvasCollectionThumbnailFields(BaseModel):
    """Pydantic model for CanvasCollectionThumbnail fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    element_child_index: int | None = Field(None, alias="element_child_index")
    element_id: str | None = Field(None, alias="element_id")
    photo: PhotoFields | None = Field(None, alias="photo")


class AdCreativeSiteLinksSpecFields(BaseModel):
    """Pydantic model for AdCreativeSiteLinksSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    is_site_link_sticky: bool | None = Field(None, alias="is_site_link_sticky")
    site_link_hash: str | None = Field(None, alias="site_link_hash")
    site_link_id: str | None = Field(None, alias="site_link_id")
    site_link_image_hash: str | None = Field(None, alias="site_link_image_hash")
    site_link_image_url: str | None = Field(None, alias="site_link_image_url")
    site_link_recommendation_type: str | None = Field(None, alias="site_link_recommendation_type")
    site_link_title: str | None = Field(None, alias="site_link_title")
    site_link_url: str | None = Field(None, alias="site_link_url")


class DestinationFields(BaseModel):
    """Pydantic model for Destination fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    address: str | None = Field(None, alias="address")
    applinks: CatalogItemAppLinksFields | None = Field(None, alias="applinks")
    category_specific_fields: CatalogSubVerticalListFields | None = Field(
        None, alias="category_specific_fields"
    )
    currency: str | None = Field(None, alias="currency")
    custom_label_0: str | None = Field(None, alias="custom_label_0")
    custom_label_1: str | None = Field(None, alias="custom_label_1")
    custom_label_2: str | None = Field(None, alias="custom_label_2")
    custom_label_3: str | None = Field(None, alias="custom_label_3")
    custom_label_4: str | None = Field(None, alias="custom_label_4")
    custom_number_0: int | None = Field(None, alias="custom_number_0")
    custom_number_1: int | None = Field(None, alias="custom_number_1")
    custom_number_2: int | None = Field(None, alias="custom_number_2")
    custom_number_3: int | None = Field(None, alias="custom_number_3")
    custom_number_4: int | None = Field(None, alias="custom_number_4")
    description: str | None = Field(None, alias="description")
    destination_id: str | None = Field(None, alias="destination_id")
    id: str | None = Field(None, alias="id")
    image_fetch_status: dict[str, Any] | None = Field(None, alias="image_fetch_status")
    images: list[str] | None = Field(None, alias="images")
    name: str | None = Field(None, alias="name")
    price: str | None = Field(None, alias="price")
    price_change: str | None = Field(None, alias="price_change")
    sanitized_images: list[str] | None = Field(None, alias="sanitized_images")
    tags: list[str] | None = Field(None, alias="tags")
    types: list[str] | None = Field(None, alias="types")
    unit_price: dict[str, Any] | None = Field(None, alias="unit_price")
    url: str | None = Field(None, alias="url")
    visibility: dict[str, Any] | None = Field(None, alias="visibility")


class AdSetFields(BaseModel):
    """Pydantic model for AdSet fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    adlabels: list[AdLabelFields] | None = Field(None, alias="adlabels")
    adset_schedule: list[DayPartFields] | None = Field(None, alias="adset_schedule")
    asset_feed_id: str | None = Field(None, alias="asset_feed_id")
    attribution_spec: list[AttributionSpecFields] | None = Field(None, alias="attribution_spec")
    bid_adjustments: AdBidAdjustmentsFields | None = Field(None, alias="bid_adjustments")
    bid_amount: int | None = Field(None, alias="bid_amount")
    bid_constraints: AdCampaignBidConstraintFields | None = Field(None, alias="bid_constraints")
    bid_info: dict[str, int] | None = Field(None, alias="bid_info")
    bid_strategy: dict[str, Any] | None = Field(None, alias="bid_strategy")
    billing_event: dict[str, Any] | None = Field(None, alias="billing_event")
    brand_safety_config: BrandSafetyCampaignConfigFields | None = Field(
        None, alias="brand_safety_config"
    )
    budget_remaining: str | None = Field(None, alias="budget_remaining")
    campaign: CampaignFields | None = Field(None, alias="campaign")
    campaign_active_time: str | None = Field(None, alias="campaign_active_time")
    campaign_attribution: str | None = Field(None, alias="campaign_attribution")
    campaign_id: str | None = Field(None, alias="campaign_id")
    configured_status: dict[str, Any] | None = Field(None, alias="configured_status")
    created_time: datetime | None = Field(None, alias="created_time")
    creative_sequence: list[str] | None = Field(None, alias="creative_sequence")
    creative_sequence_repetition_pattern: str | None = Field(
        None, alias="creative_sequence_repetition_pattern"
    )
    daily_budget: str | None = Field(None, alias="daily_budget")
    daily_min_spend_target: str | None = Field(None, alias="daily_min_spend_target")
    daily_spend_cap: str | None = Field(None, alias="daily_spend_cap")
    destination_type: str | None = Field(None, alias="destination_type")
    dsa_beneficiary: str | None = Field(None, alias="dsa_beneficiary")
    dsa_payor: str | None = Field(None, alias="dsa_payor")
    effective_status: dict[str, Any] | None = Field(None, alias="effective_status")
    end_time: datetime | None = Field(None, alias="end_time")
    existing_customer_budget_percentage: int | None = Field(
        None, alias="existing_customer_budget_percentage"
    )
    frequency_control_specs: list[AdCampaignFrequencyControlSpecsFields] | None = Field(
        None, alias="frequency_control_specs"
    )
    full_funnel_exploration_mode: str | None = Field(None, alias="full_funnel_exploration_mode")
    id: str | None = Field(None, alias="id")
    instagram_user_id: str | None = Field(None, alias="instagram_user_id")
    is_ba_skip_delayed_eligible: bool | None = Field(None, alias="is_ba_skip_delayed_eligible")
    is_budget_schedule_enabled: bool | None = Field(None, alias="is_budget_schedule_enabled")
    is_dynamic_creative: bool | None = Field(None, alias="is_dynamic_creative")
    is_incremental_attribution_enabled: bool | None = Field(
        None, alias="is_incremental_attribution_enabled"
    )
    issues_info: list[AdCampaignIssuesInfoFields] | None = Field(None, alias="issues_info")
    learning_stage_info: AdCampaignLearningStageInfoFields | None = Field(
        None, alias="learning_stage_info"
    )
    lifetime_budget: str | None = Field(None, alias="lifetime_budget")
    lifetime_imps: int | None = Field(None, alias="lifetime_imps")
    lifetime_min_spend_target: str | None = Field(None, alias="lifetime_min_spend_target")
    lifetime_spend_cap: str | None = Field(None, alias="lifetime_spend_cap")
    max_budget_spend_percentage: str | None = Field(None, alias="max_budget_spend_percentage")
    min_budget_spend_percentage: str | None = Field(None, alias="min_budget_spend_percentage")
    multi_optimization_goal_weight: str | None = Field(None, alias="multi_optimization_goal_weight")
    name: str | None = Field(None, alias="name")
    optimization_goal: dict[str, Any] | None = Field(None, alias="optimization_goal")
    optimization_sub_event: str | None = Field(None, alias="optimization_sub_event")
    pacing_type: list[str] | None = Field(None, alias="pacing_type")
    promoted_object: AdPromotedObjectFields | None = Field(None, alias="promoted_object")
    recommendations: list[AdRecommendationFields] | None = Field(None, alias="recommendations")
    recurring_budget_semantics: bool | None = Field(None, alias="recurring_budget_semantics")
    regional_regulated_categories: list[str] | None = Field(
        None, alias="regional_regulated_categories"
    )
    regional_regulation_identities: RegionalRegulationIdentitiesFields | None = Field(
        None, alias="regional_regulation_identities"
    )
    review_feedback: str | None = Field(None, alias="review_feedback")
    rf_prediction_id: str | None = Field(None, alias="rf_prediction_id")
    source_adset: AdSetFields | None = Field(None, alias="source_adset")
    source_adset_id: str | None = Field(None, alias="source_adset_id")
    start_time: datetime | None = Field(None, alias="start_time")
    status: dict[str, Any] | None = Field(None, alias="status")
    targeting: TargetingFields | None = Field(None, alias="targeting")
    targeting_optimization_types: list[dict[str, int]] | None = Field(
        None, alias="targeting_optimization_types"
    )
    time_based_ad_rotation_id_blocks: list[list[int]] | None = Field(
        None, alias="time_based_ad_rotation_id_blocks"
    )
    time_based_ad_rotation_intervals: list[int] | None = Field(
        None, alias="time_based_ad_rotation_intervals"
    )
    updated_time: datetime | None = Field(None, alias="updated_time")
    use_new_app_click: bool | None = Field(None, alias="use_new_app_click")


class AdCampaignMultiAdsFields(BaseModel):
    """Pydantic model for AdCampaignMultiAds fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    enroll_status: str | None = Field(None, alias="enroll_status")
    source_type: str | None = Field(None, alias="source_type")


class InsightsValueFields(BaseModel):
    """Pydantic model for InsightsValue fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    campaign_id: str | None = Field(None, alias="campaign_id")
    earning_source: str | None = Field(None, alias="earning_source")
    end_time: datetime | None = Field(None, alias="end_time")
    engagement_source: str | None = Field(None, alias="engagement_source")
    message_type: str | None = Field(None, alias="message_type")
    messaging_channel: str | None = Field(None, alias="messaging_channel")
    monetization_tool: str | None = Field(None, alias="monetization_tool")
    recurring_notifications_entry_point: str | None = Field(
        None, alias="recurring_notifications_entry_point"
    )
    recurring_notifications_frequency: str | None = Field(
        None, alias="recurring_notifications_frequency"
    )
    recurring_notifications_topic: str | None = Field(None, alias="recurring_notifications_topic")
    start_time: datetime | None = Field(None, alias="start_time")
    value: dict[str, Any] | None = Field(None, alias="value")


class CanvasDynamicSettingFields(BaseModel):
    """Pydantic model for CanvasDynamicSetting fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    child_documents: list[CanvasFields] | None = Field(None, alias="child_documents")
    product_set_id: str | None = Field(None, alias="product_set_id")


class AdsQuickViewsFields(BaseModel):
    """Pydantic model for AdsQuickViews fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    attribution_windows: list[str] | None = Field(None, alias="attribution_windows")
    breakdowns: list[str] | None = Field(None, alias="breakdowns")
    column_fields: list[str] | None = Field(None, alias="column_fields")
    description: str | None = Field(None, alias="description")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    owner: ProfileFields | None = Field(None, alias="owner")
    permission: str | None = Field(None, alias="permission")
    quick_view_type: str | None = Field(None, alias="quick_view_type")
    sort: list[dict[str, Any]] | None = Field(None, alias="sort")


class PlaceTopicFields(BaseModel):
    """Pydantic model for PlaceTopic fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    count: int | None = Field(None, alias="count")
    has_children: bool | None = Field(None, alias="has_children")
    icon_url: str | None = Field(None, alias="icon_url")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    parent_ids: list[str] | None = Field(None, alias="parent_ids")
    plural_name: str | None = Field(None, alias="plural_name")
    top_subtopic_names: list[str] | None = Field(None, alias="top_subtopic_names")


class AdKeywordsFields(BaseModel):
    """Pydantic model for AdKeywords fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    brands: list[str] | None = Field(None, alias="brands")
    product_categories: list[str] | None = Field(None, alias="product_categories")
    product_names: list[str] | None = Field(None, alias="product_names")
    search_terms: list[str] | None = Field(None, alias="search_terms")


class AdsPixelEventSuggestionRuleFields(BaseModel):
    """Pydantic model for AdsPixelEventSuggestionRule fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    field_7d_volume: int | None = Field(None, alias="7d_volume")
    dismissed: bool | None = Field(None, alias="dismissed")
    end_time: datetime | None = Field(None, alias="end_time")
    event_type: str | None = Field(None, alias="event_type")
    rank: int | None = Field(None, alias="rank")
    rule: str | None = Field(None, alias="rule")
    sample_urls: list[str] | None = Field(None, alias="sample_urls")
    start_time: datetime | None = Field(None, alias="start_time")


class OfflineConversionDataSetActivitiesFields(BaseModel):
    """Pydantic model for OfflineConversionDataSetActivities fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    actor_id: int | None = Field(None, alias="actor_id")
    actor_name: str | None = Field(None, alias="actor_name")
    adaccount_id: int | None = Field(None, alias="adaccount_id")
    adaccount_name: str | None = Field(None, alias="adaccount_name")
    event_time: datetime | None = Field(None, alias="event_time")
    event_type: str | None = Field(None, alias="event_type")
    extra_data: str | None = Field(None, alias="extra_data")
    object_id: int | None = Field(None, alias="object_id")
    object_name: str | None = Field(None, alias="object_name")


class AdImageFields(BaseModel):
    """Pydantic model for AdImage fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    created_time: datetime | None = Field(None, alias="created_time")
    creatives: list[str] | None = Field(None, alias="creatives")
    hash: str | None = Field(None, alias="hash")
    height: int | None = Field(None, alias="height")
    id: str | None = Field(None, alias="id")
    is_associated_creatives_in_adgroups: bool | None = Field(
        None, alias="is_associated_creatives_in_adgroups"
    )
    name: str | None = Field(None, alias="name")
    original_height: int | None = Field(None, alias="original_height")
    original_width: int | None = Field(None, alias="original_width")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")
    permalink_url: str | None = Field(None, alias="permalink_url")
    status: dict[str, Any] | None = Field(None, alias="status")
    updated_time: datetime | None = Field(None, alias="updated_time")
    url: str | None = Field(None, alias="url")
    url_128: str | None = Field(None, alias="url_128")
    width: int | None = Field(None, alias="width")


class AdAssetVideoFields(BaseModel):
    """Pydantic model for AdAssetVideo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    caption_ids: list[str] | None = Field(None, alias="caption_ids")
    id: str | None = Field(None, alias="id")
    source_image_url: str | None = Field(None, alias="source_image_url")
    tag: str | None = Field(None, alias="tag")
    thumbnail_hash: str | None = Field(None, alias="thumbnail_hash")
    thumbnail_source: str | None = Field(None, alias="thumbnail_source")
    thumbnail_url: str | None = Field(None, alias="thumbnail_url")
    url: str | None = Field(None, alias="url")
    url_tags: str | None = Field(None, alias="url_tags")
    video_id: str | None = Field(None, alias="video_id")
    video_name: str | None = Field(None, alias="video_name")


class IGUserSubscribedAppsDataFields(BaseModel):
    """Pydantic model for IGUserSubscribedAppsData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app_id: str | None = Field(None, alias="app_id")
    subscribed_fields: list[str] | None = Field(None, alias="subscribed_fields")


class CatalogItemRejectionReasonsFields(BaseModel):
    """Pydantic model for CatalogItemRejectionReasons fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    capability: str | None = Field(None, alias="capability")
    rejection_information: list[dict[str, Any]] | None = Field(None, alias="rejection_information")


class ProductCatalogCategoryFields(BaseModel):
    """Pydantic model for ProductCatalogCategory fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    criteria_value: str | None = Field(None, alias="criteria_value")
    description: str | None = Field(None, alias="description")
    destination_uri: str | None = Field(None, alias="destination_uri")
    image_url: str | None = Field(None, alias="image_url")
    name: str | None = Field(None, alias="name")
    num_items: int | None = Field(None, alias="num_items")
    tokens: list[dict[str, str]] | None = Field(None, alias="tokens")


class TargetingGeoLocationPoliticalDistrictFields(BaseModel):
    """Pydantic model for TargetingGeoLocationPoliticalDistrict fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    country: str | None = Field(None, alias="country")
    key: str | None = Field(None, alias="key")
    name: str | None = Field(None, alias="name")
    political_district: str | None = Field(None, alias="political_district")


class AdsCustomPivotsPreviewFields(BaseModel):
    """Pydantic model for AdsCustomPivotsPreview fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    account_name: str | None = Field(None, alias="account_name")
    ad_id: str | None = Field(None, alias="ad_id")
    ad_name: str | None = Field(None, alias="ad_name")
    adset_id: str | None = Field(None, alias="adset_id")
    adset_name: str | None = Field(None, alias="adset_name")
    campaign_id: str | None = Field(None, alias="campaign_id")
    campaign_name: str | None = Field(None, alias="campaign_name")
    custom_breakdown: list[str] | None = Field(None, alias="custom_breakdown")


class ShadowIGHashtagFields(BaseModel):
    """Pydantic model for ShadowIGHashtag fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class AdCampaignFrequencyControlSpecsFields(BaseModel):
    """Pydantic model for AdCampaignFrequencyControlSpecs fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    event: str | None = Field(None, alias="event")
    interval_days: int | None = Field(None, alias="interval_days")
    max_frequency: int | None = Field(None, alias="max_frequency")


class AppPublisherFields(BaseModel):
    """Pydantic model for AppPublisher fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    content_id: str | None = Field(None, alias="content_id")
    icon_url: str | None = Field(None, alias="icon_url")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    platform: str | None = Field(None, alias="platform")
    store_name: str | None = Field(None, alias="store_name")
    store_url: str | None = Field(None, alias="store_url")


class HoursFields(BaseModel):
    """Pydantic model for Hours fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    permanent_status: str | None = Field(None, alias="permanent_status")


class AdAccountBusinessConstraintsFields(BaseModel):
    """Pydantic model for AdAccountBusinessConstraints fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    audience_controls: dict[str, Any] | None = Field(None, alias="audience_controls")
    campaigns_with_error: list[str] | None = Field(None, alias="campaigns_with_error")
    placement_controls: dict[str, Any] | None = Field(None, alias="placement_controls")
    status: dict[str, Any] | None = Field(None, alias="status")


class InstagramThreadFields(BaseModel):
    """Pydantic model for InstagramThread fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    folder: str | None = Field(None, alias="folder")
    id: str | None = Field(None, alias="id")
    participants: dict[str, Any] | None = Field(None, alias="participants")
    updated_time: datetime | None = Field(None, alias="updated_time")


class TimeSuggestionFields(BaseModel):
    """Pydantic model for TimeSuggestion fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    high_demand_periods: list[dict[str, Any]] | None = Field(None, alias="high_demand_periods")
    is_enabled: bool | None = Field(None, alias="is_enabled")


class ANBlockedBICategoryFields(BaseModel):
    """Pydantic model for ANBlockedBICategory fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    key: str | None = Field(None, alias="key")


class AdAssetTargetRuleTargetingFields(BaseModel):
    """Pydantic model for AdAssetTargetRuleTargeting fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    age_max: int | None = Field(None, alias="age_max")
    age_min: int | None = Field(None, alias="age_min")
    audience_network_positions: list[str] | None = Field(None, alias="audience_network_positions")
    device_platforms: list[dict[str, Any]] | None = Field(None, alias="device_platforms")
    facebook_positions: list[str] | None = Field(None, alias="facebook_positions")
    geo_locations: TargetingGeoLocationFields | None = Field(None, alias="geo_locations")
    instagram_positions: list[str] | None = Field(None, alias="instagram_positions")
    publisher_platforms: list[str] | None = Field(None, alias="publisher_platforms")
    threads_positions: list[str] | None = Field(None, alias="threads_positions")


class StoreLocationFields(BaseModel):
    """Pydantic model for StoreLocation fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    full_address: str | None = Field(None, alias="full_address")
    hours: dict[str, Any] | None = Field(None, alias="hours")
    id: str | None = Field(None, alias="id")
    phone_number: str | None = Field(None, alias="phone_number")
    pickup_options: list[str] | None = Field(None, alias="pickup_options")
    price_range: str | None = Field(None, alias="price_range")
    store_code: str | None = Field(None, alias="store_code")
    zip_code: str | None = Field(None, alias="zip_code")


class AdAccountYouthAdsAdvertiserFields(BaseModel):
    """Pydantic model for AdAccountYouthAdsAdvertiser fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    is_youth_ads_advertiser: bool | None = Field(None, alias="is_youth_ads_advertiser")


class AdCreativeImageDataMediaElementsFields(BaseModel):
    """Pydantic model for AdCreativeImageDataMediaElements fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    element_id: str | None = Field(None, alias="element_id")
    element_type: str | None = Field(None, alias="element_type")
    x: float | None = Field(None, alias="x")
    y: float | None = Field(None, alias="y")


class PublisherBlockListFields(BaseModel):
    """Pydantic model for PublisherBlockList fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app_publishers: list[AppPublisherFields] | None = Field(None, alias="app_publishers")
    business_owner_id: str | None = Field(None, alias="business_owner_id")
    id: str | None = Field(None, alias="id")
    is_auto_blocking_on: bool | None = Field(None, alias="is_auto_blocking_on")
    is_eligible_at_campaign_level: bool | None = Field(None, alias="is_eligible_at_campaign_level")
    last_update_time: datetime | None = Field(None, alias="last_update_time")
    last_update_user: str | None = Field(None, alias="last_update_user")
    name: str | None = Field(None, alias="name")
    owner_ad_account_id: str | None = Field(None, alias="owner_ad_account_id")
    web_publishers: list[WebPublisherFields] | None = Field(None, alias="web_publishers")


class AppRequestFields(BaseModel):
    """Pydantic model for AppRequest fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    action_type: str | None = Field(None, alias="action_type")
    application: ApplicationFields | None = Field(None, alias="application")
    created_time: datetime | None = Field(None, alias="created_time")
    data: str | None = Field(None, alias="data")
    from_: dict[str, Any] | None = Field(None, alias="from")
    id: str | None = Field(None, alias="id")
    message: str | None = Field(None, alias="message")
    object: dict[str, Any] | None = Field(None, alias="object")
    to: dict[str, Any] | None = Field(None, alias="to")


class StreamFilterFields(BaseModel):
    """Pydantic model for StreamFilter fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    filter_key: str | None = Field(None, alias="filter_key")
    name: str | None = Field(None, alias="name")
    type: str | None = Field(None, alias="type")


class ScimCompanyUserPhoneNumberFields(BaseModel):
    """Pydantic model for ScimCompanyUserPhoneNumber fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    number: str | None = Field(None, alias="number")
    primary: bool | None = Field(None, alias="primary")
    type: str | None = Field(None, alias="type")


class AdCreativeVideoDataFields(BaseModel):
    """Pydantic model for AdCreativeVideoData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    additional_image_index: int | None = Field(None, alias="additional_image_index")
    branded_content_shared_to_sponsor_status: str | None = Field(
        None, alias="branded_content_shared_to_sponsor_status"
    )
    branded_content_sponsor_page_id: str | None = Field(
        None, alias="branded_content_sponsor_page_id"
    )
    call_to_action: AdCreativeLinkDataCallToActionFields | None = Field(
        None, alias="call_to_action"
    )
    collection_thumbnails: list[AdCreativeCollectionThumbnailInfoFields] | None = Field(
        None, alias="collection_thumbnails"
    )
    customization_rules_spec: list[AdCustomizationRuleSpecFields] | None = Field(
        None, alias="customization_rules_spec"
    )
    image_hash: str | None = Field(None, alias="image_hash")
    image_url: str | None = Field(None, alias="image_url")
    link_description: str | None = Field(None, alias="link_description")
    message: str | None = Field(None, alias="message")
    offer_id: str | None = Field(None, alias="offer_id")
    page_welcome_message: str | None = Field(None, alias="page_welcome_message")
    post_click_configuration: AdCreativePostClickConfigurationFields | None = Field(
        None, alias="post_click_configuration"
    )
    retailer_item_ids: list[str] | None = Field(None, alias="retailer_item_ids")
    targeting: TargetingFields | None = Field(None, alias="targeting")
    title: str | None = Field(None, alias="title")
    video_id: str | None = Field(None, alias="video_id")


class MessagingFeatureStatusFields(BaseModel):
    """Pydantic model for MessagingFeatureStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    hop_v2: bool | None = Field(None, alias="hop_v2")
    ig_multi_app: bool | None = Field(None, alias="ig_multi_app")
    msgr_multi_app: bool | None = Field(None, alias="msgr_multi_app")


class FBImageCopyrightMatchFields(BaseModel):
    """Pydantic model for FBImageCopyrightMatch fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    added_to_dashboard_time: datetime | None = Field(None, alias="added_to_dashboard_time")
    applied_actions: list[dict[str, dict[str, Any]]] | None = Field(None, alias="applied_actions")
    audit_log: list[dict[str, Any]] | None = Field(None, alias="audit_log")
    available_ui_actions: list[str] | None = Field(None, alias="available_ui_actions")
    expiration_days: int | None = Field(None, alias="expiration_days")
    generic_match_data: list[dict[str, Any]] | None = Field(None, alias="generic_match_data")
    id: str | None = Field(None, alias="id")
    is_business_page_match: bool | None = Field(None, alias="is_business_page_match")
    last_modified_time: datetime | None = Field(None, alias="last_modified_time")
    match_data: list[dict[str, Any]] | None = Field(None, alias="match_data")
    match_status: str | None = Field(None, alias="match_status")
    ownership_countries: VideoCopyrightGeoGateFields | None = Field(
        None, alias="ownership_countries"
    )
    reference_owner: ProfileFields | None = Field(None, alias="reference_owner")
    time_to_appeal: int | None = Field(None, alias="time_to_appeal")


class BusinessAdsReportingReportSpecsFields(BaseModel):
    """Pydantic model for BusinessAdsReportingReportSpecs fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    action_report_time: str | None = Field(None, alias="action_report_time")
    ad_account_id: str | None = Field(None, alias="ad_account_id")
    ad_account_ids: list[str] | None = Field(None, alias="ad_account_ids")
    ad_accounts: list[dict[str, Any]] | None = Field(None, alias="ad_accounts")
    attribution_windows: list[str] | None = Field(None, alias="attribution_windows")
    business: BusinessFields | None = Field(None, alias="business")
    business_asset_group: BusinessAssetGroupFields | None = Field(
        None, alias="business_asset_group"
    )
    comparison_date_interval: dict[str, Any] | None = Field(None, alias="comparison_date_interval")
    creation_source: str | None = Field(None, alias="creation_source")
    creation_time: datetime | None = Field(None, alias="creation_time")
    currency: str | None = Field(None, alias="currency")
    date_preset: str | None = Field(None, alias="date_preset")
    default_attribution_windows: list[str] | None = Field(None, alias="default_attribution_windows")
    filtering: list[dict[str, Any]] | None = Field(None, alias="filtering")
    formatting: list[dict[str, list[dict[str, Any]]]] | None = Field(None, alias="formatting")
    id: str | None = Field(None, alias="id")
    last_access_by: ProfileFields | None = Field(None, alias="last_access_by")
    last_access_time: datetime | None = Field(None, alias="last_access_time")
    last_report_snapshot_id: str | None = Field(None, alias="last_report_snapshot_id")
    last_report_snapshot_time: datetime | None = Field(None, alias="last_report_snapshot_time")
    last_shared_report_expiration: datetime | None = Field(
        None, alias="last_shared_report_expiration"
    )
    limit: int | None = Field(None, alias="limit")
    locked_dimensions: int | None = Field(None, alias="locked_dimensions")
    report_name: str | None = Field(None, alias="report_name")
    report_snapshot_async_percent_completion: int | None = Field(
        None, alias="report_snapshot_async_percent_completion"
    )
    report_snapshot_async_status: str | None = Field(None, alias="report_snapshot_async_status")
    schedule_frequency: str | None = Field(None, alias="schedule_frequency")
    scope: str | None = Field(None, alias="scope")
    show_deprecate_aw_banner: bool | None = Field(None, alias="show_deprecate_aw_banner")
    sorting: list[dict[str, Any]] | None = Field(None, alias="sorting")
    start_date: str | None = Field(None, alias="start_date")
    status: str | None = Field(None, alias="status")
    subscribers: list[str] | None = Field(None, alias="subscribers")
    update_by: ProfileFields | None = Field(None, alias="update_by")
    update_time: datetime | None = Field(None, alias="update_time")
    user: ProfileFields | None = Field(None, alias="user")
    user_dimensions: list[str] | None = Field(None, alias="user_dimensions")
    user_metrics: list[str] | None = Field(None, alias="user_metrics")
    view_type: str | None = Field(None, alias="view_type")


class AdActivityFields(BaseModel):
    """Pydantic model for AdActivity fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    actor_id: str | None = Field(None, alias="actor_id")
    actor_name: str | None = Field(None, alias="actor_name")
    application_id: str | None = Field(None, alias="application_id")
    application_name: str | None = Field(None, alias="application_name")
    date_time_in_timezone: str | None = Field(None, alias="date_time_in_timezone")
    event_time: datetime | None = Field(None, alias="event_time")
    event_type: dict[str, Any] | None = Field(None, alias="event_type")
    extra_data: str | None = Field(None, alias="extra_data")
    object_id: str | None = Field(None, alias="object_id")
    object_name: str | None = Field(None, alias="object_name")
    object_type: str | None = Field(None, alias="object_type")
    translated_event_type: str | None = Field(None, alias="translated_event_type")


class AdCreativeCollectionThumbnailInfoFields(BaseModel):
    """Pydantic model for AdCreativeCollectionThumbnailInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    element_child_index: int | None = Field(None, alias="element_child_index")
    element_crops: AdsImageCropsFields | None = Field(None, alias="element_crops")
    element_id: str | None = Field(None, alias="element_id")


class AdAssetFeedSpecAssetLabelFields(BaseModel):
    """Pydantic model for AdAssetFeedSpecAssetLabel fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class RobotFields(BaseModel):
    """Pydantic model for Robot fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    bringup_vars: list[dict[str, str]] | None = Field(None, alias="bringup_vars")
    configurations: list[dict[str, str]] | None = Field(None, alias="configurations")
    data_center: str | None = Field(None, alias="data_center")
    id: str | None = Field(None, alias="id")
    init_pos: list[dict[str, float]] | None = Field(None, alias="init_pos")
    last_pos: list[dict[str, float]] | None = Field(None, alias="last_pos")
    meetup_link_hash: str | None = Field(None, alias="meetup_link_hash")
    suite: str | None = Field(None, alias="suite")
    target_map_image_uri: str | None = Field(None, alias="target_map_image_uri")
    target_os_image_uri: str | None = Field(None, alias="target_os_image_uri")
    target_sw_image_uri: str | None = Field(None, alias="target_sw_image_uri")
    user: UserFields | None = Field(None, alias="user")


class AdsHistogramStatsFields(BaseModel):
    """Pydantic model for AdsHistogramStats fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    field_1d_click: list[int] | None = Field(None, alias="1d_click")
    field_1d_click_all_conversions: list[int] | None = Field(None, alias="1d_click_all_conversions")
    field_1d_click_first_conversion: list[int] | None = Field(
        None, alias="1d_click_first_conversion"
    )
    field_1d_ev: list[int] | None = Field(None, alias="1d_ev")
    field_1d_ev_all_conversions: list[int] | None = Field(None, alias="1d_ev_all_conversions")
    field_1d_ev_first_conversion: list[int] | None = Field(None, alias="1d_ev_first_conversion")
    field_1d_view: list[int] | None = Field(None, alias="1d_view")
    field_1d_view_all_conversions: list[int] | None = Field(None, alias="1d_view_all_conversions")
    field_1d_view_first_conversion: list[int] | None = Field(None, alias="1d_view_first_conversion")
    field_28d_click: list[int] | None = Field(None, alias="28d_click")
    field_28d_click_all_conversions: list[int] | None = Field(
        None, alias="28d_click_all_conversions"
    )
    field_28d_click_first_conversion: list[int] | None = Field(
        None, alias="28d_click_first_conversion"
    )
    field_28d_view: list[int] | None = Field(None, alias="28d_view")
    field_28d_view_all_conversions: list[int] | None = Field(None, alias="28d_view_all_conversions")
    field_28d_view_first_conversion: list[int] | None = Field(
        None, alias="28d_view_first_conversion"
    )
    field_7d_click: list[int] | None = Field(None, alias="7d_click")
    field_7d_click_all_conversions: list[int] | None = Field(None, alias="7d_click_all_conversions")
    field_7d_click_first_conversion: list[int] | None = Field(
        None, alias="7d_click_first_conversion"
    )
    field_7d_view: list[int] | None = Field(None, alias="7d_view")
    field_7d_view_all_conversions: list[int] | None = Field(None, alias="7d_view_all_conversions")
    field_7d_view_first_conversion: list[int] | None = Field(None, alias="7d_view_first_conversion")
    action_brand: str | None = Field(None, alias="action_brand")
    action_canvas_component_id: str | None = Field(None, alias="action_canvas_component_id")
    action_canvas_component_name: str | None = Field(None, alias="action_canvas_component_name")
    action_carousel_card_id: str | None = Field(None, alias="action_carousel_card_id")
    action_carousel_card_name: str | None = Field(None, alias="action_carousel_card_name")
    action_category: str | None = Field(None, alias="action_category")
    action_converted_product_id: str | None = Field(None, alias="action_converted_product_id")
    action_destination: str | None = Field(None, alias="action_destination")
    action_device: str | None = Field(None, alias="action_device")
    action_event_channel: str | None = Field(None, alias="action_event_channel")
    action_link_click_destination: str | None = Field(None, alias="action_link_click_destination")
    action_location_code: str | None = Field(None, alias="action_location_code")
    action_reaction: str | None = Field(None, alias="action_reaction")
    action_target_id: str | None = Field(None, alias="action_target_id")
    action_type: str | None = Field(None, alias="action_type")
    action_video_asset_id: str | None = Field(None, alias="action_video_asset_id")
    action_video_sound: str | None = Field(None, alias="action_video_sound")
    action_video_type: str | None = Field(None, alias="action_video_type")
    dda: list[int] | None = Field(None, alias="dda")
    incrementality: list[int] | None = Field(None, alias="incrementality")
    incrementality_all_conversions: list[int] | None = Field(
        None, alias="incrementality_all_conversions"
    )
    incrementality_first_conversion: list[int] | None = Field(
        None, alias="incrementality_first_conversion"
    )
    inline: list[int] | None = Field(None, alias="inline")
    interactive_component_sticker_id: str | None = Field(
        None, alias="interactive_component_sticker_id"
    )
    interactive_component_sticker_response: str | None = Field(
        None, alias="interactive_component_sticker_response"
    )
    skan_click: list[int] | None = Field(None, alias="skan_click")
    skan_click_second_postback: list[int] | None = Field(None, alias="skan_click_second_postback")
    skan_click_third_postback: list[int] | None = Field(None, alias="skan_click_third_postback")
    skan_view: list[int] | None = Field(None, alias="skan_view")
    skan_view_second_postback: list[int] | None = Field(None, alias="skan_view_second_postback")
    skan_view_third_postback: list[int] | None = Field(None, alias="skan_view_third_postback")
    value: list[int] | None = Field(None, alias="value")


class ProductGroupFields(BaseModel):
    """Pydantic model for ProductGroup fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    product_catalog: ProductCatalogFields | None = Field(None, alias="product_catalog")
    retailer_id: str | None = Field(None, alias="retailer_id")
    variants: list[ProductVariantFields] | None = Field(None, alias="variants")


class OffsitePixelFields(BaseModel):
    """Pydantic model for OffsitePixel fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    creator: str | None = Field(None, alias="creator")
    id: str | None = Field(None, alias="id")
    js_pixel: str | None = Field(None, alias="js_pixel")
    last_firing_time: datetime | None = Field(None, alias="last_firing_time")
    name: str | None = Field(None, alias="name")
    tag: str | None = Field(None, alias="tag")


class AdAssetTitleFields(BaseModel):
    """Pydantic model for AdAssetTitle fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    text: str | None = Field(None, alias="text")
    url_tags: str | None = Field(None, alias="url_tags")


class HighDemandPeriodFields(BaseModel):
    """Pydantic model for HighDemandPeriod fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_object_id: str | None = Field(None, alias="ad_object_id")
    budget_value: int | None = Field(None, alias="budget_value")
    budget_value_type: str | None = Field(None, alias="budget_value_type")
    id: str | None = Field(None, alias="id")
    recurrence_type: str | None = Field(None, alias="recurrence_type")
    time_end: datetime | None = Field(None, alias="time_end")
    time_start: datetime | None = Field(None, alias="time_start")
    weekly_schedule: list[HighDemandPeriodTimeSuggestionWeeklySegmentFields] | None = Field(
        None, alias="weekly_schedule"
    )


class UserFields(BaseModel):
    """Pydantic model for User fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    about: str | None = Field(None, alias="about")
    age_range: AgeRangeFields | None = Field(None, alias="age_range")
    avatar_2d_profile_picture: AvatarProfilePictureFields | None = Field(
        None, alias="avatar_2d_profile_picture"
    )
    birthday: str | None = Field(None, alias="birthday")
    client_business_id: str | None = Field(None, alias="client_business_id")
    community: GroupFields | None = Field(None, alias="community")
    cover: UserCoverPhotoFields | None = Field(None, alias="cover")
    currency: CurrencyFields | None = Field(None, alias="currency")
    education: list[EducationExperienceFields] | None = Field(None, alias="education")
    email: str | None = Field(None, alias="email")
    favorite_athletes: list[ExperienceFields] | None = Field(None, alias="favorite_athletes")
    favorite_teams: list[ExperienceFields] | None = Field(None, alias="favorite_teams")
    first_name: str | None = Field(None, alias="first_name")
    gender: str | None = Field(None, alias="gender")
    hometown: PageFields | None = Field(None, alias="hometown")
    id: str | None = Field(None, alias="id")
    id_for_avatars: str | None = Field(None, alias="id_for_avatars")
    inspirational_people: list[ExperienceFields] | None = Field(None, alias="inspirational_people")
    install_type: str | None = Field(None, alias="install_type")
    installed: bool | None = Field(None, alias="installed")
    is_guest_user: bool | None = Field(None, alias="is_guest_user")
    is_work_account: bool | None = Field(None, alias="is_work_account")
    languages: list[ExperienceFields] | None = Field(None, alias="languages")
    last_name: str | None = Field(None, alias="last_name")
    link: str | None = Field(None, alias="link")
    local_news_megaphone_dismiss_status: bool | None = Field(
        None, alias="local_news_megaphone_dismiss_status"
    )
    local_news_subscription_status: bool | None = Field(
        None, alias="local_news_subscription_status"
    )
    locale: str | None = Field(None, alias="locale")
    location: PageFields | None = Field(None, alias="location")
    meeting_for: list[str] | None = Field(None, alias="meeting_for")
    middle_name: str | None = Field(None, alias="middle_name")
    name: str | None = Field(None, alias="name")
    name_format: str | None = Field(None, alias="name_format")
    payment_pricepoints: PaymentPricepointsFields | None = Field(None, alias="payment_pricepoints")
    political: str | None = Field(None, alias="political")
    profile_pic: str | None = Field(None, alias="profile_pic")
    quotes: str | None = Field(None, alias="quotes")
    relationship_status: str | None = Field(None, alias="relationship_status")
    religion: str | None = Field(None, alias="religion")
    shared_login_upgrade_required_by: datetime | None = Field(
        None, alias="shared_login_upgrade_required_by"
    )
    short_name: str | None = Field(None, alias="short_name")
    significant_other: UserFields | None = Field(None, alias="significant_other")
    sports: list[ExperienceFields] | None = Field(None, alias="sports")
    supports_donate_button_in_live_video: bool | None = Field(
        None, alias="supports_donate_button_in_live_video"
    )
    third_party_id: str | None = Field(None, alias="third_party_id")
    timezone: float | None = Field(None, alias="timezone")
    token_for_business: str | None = Field(None, alias="token_for_business")
    updated_time: datetime | None = Field(None, alias="updated_time")
    verified: bool | None = Field(None, alias="verified")
    video_upload_limits: VideoUploadLimitsFields | None = Field(None, alias="video_upload_limits")
    website: str | None = Field(None, alias="website")


class CatalogAdvertiserInsightFields(BaseModel):
    """Pydantic model for CatalogAdvertiserInsight fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    category: str | None = Field(None, alias="category")
    country: str | None = Field(None, alias="country")


class ProfilePictureSourceFields(BaseModel):
    """Pydantic model for ProfilePictureSource fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    bottom: int | None = Field(None, alias="bottom")
    cache_key: str | None = Field(None, alias="cache_key")
    height: int | None = Field(None, alias="height")
    is_silhouette: bool | None = Field(None, alias="is_silhouette")
    left: int | None = Field(None, alias="left")
    right: int | None = Field(None, alias="right")
    top: int | None = Field(None, alias="top")
    url: str | None = Field(None, alias="url")
    width: int | None = Field(None, alias="width")


class UserPaymentMethodsInfoFields(BaseModel):
    """Pydantic model for UserPaymentMethodsInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    available_card_types: list[str] | None = Field(None, alias="available_card_types")
    available_payment_methods: list[str] | None = Field(None, alias="available_payment_methods")
    available_payment_methods_details: list[dict[str, Any]] | None = Field(
        None, alias="available_payment_methods_details"
    )
    country: str | None = Field(None, alias="country")
    currency: str | None = Field(None, alias="currency")
    existing_payment_methods: list[dict[str, Any]] | None = Field(
        None, alias="existing_payment_methods"
    )


class ProductFeedScheduleFields(BaseModel):
    """Pydantic model for ProductFeedSchedule fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    day_of_month: int | None = Field(None, alias="day_of_month")
    day_of_week: str | None = Field(None, alias="day_of_week")
    hour: int | None = Field(None, alias="hour")
    id: str | None = Field(None, alias="id")
    interval: dict[str, Any] | None = Field(None, alias="interval")
    interval_count: int | None = Field(None, alias="interval_count")
    minute: int | None = Field(None, alias="minute")
    timezone: str | None = Field(None, alias="timezone")
    url: str | None = Field(None, alias="url")
    username: str | None = Field(None, alias="username")


class AdKeywordStatsFields(BaseModel):
    """Pydantic model for AdKeywordStats fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    actions: list[AdsActionStatsFields] | None = Field(None, alias="actions")
    clicks: int | None = Field(None, alias="clicks")
    cost_per_total_action: float | None = Field(None, alias="cost_per_total_action")
    cost_per_unique_click: float | None = Field(None, alias="cost_per_unique_click")
    cpc: float | None = Field(None, alias="cpc")
    cpm: float | None = Field(None, alias="cpm")
    cpp: float | None = Field(None, alias="cpp")
    ctr: float | None = Field(None, alias="ctr")
    frequency: float | None = Field(None, alias="frequency")
    id: str | None = Field(None, alias="id")
    impressions: int | None = Field(None, alias="impressions")
    name: str | None = Field(None, alias="name")
    reach: int | None = Field(None, alias="reach")
    spend: float | None = Field(None, alias="spend")
    total_actions: int | None = Field(None, alias="total_actions")
    total_unique_actions: int | None = Field(None, alias="total_unique_actions")
    unique_actions: list[AdsActionStatsFields] | None = Field(None, alias="unique_actions")
    unique_clicks: int | None = Field(None, alias="unique_clicks")
    unique_ctr: float | None = Field(None, alias="unique_ctr")
    unique_impressions: int | None = Field(None, alias="unique_impressions")


class BusinessCreativeFields(BaseModel):
    """Pydantic model for BusinessCreative fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    creation_time: datetime | None = Field(None, alias="creation_time")
    duration: int | None = Field(None, alias="duration")
    hash: str | None = Field(None, alias="hash")
    height: int | None = Field(None, alias="height")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    thumbnail: str | None = Field(None, alias="thumbnail")
    type: str | None = Field(None, alias="type")
    url: str | None = Field(None, alias="url")
    video_id: str | None = Field(None, alias="video_id")
    width: int | None = Field(None, alias="width")


class CustomUserSettingsFields(BaseModel):
    """Pydantic model for CustomUserSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    page_level_persistent_menu: list[dict[str, Any]] | None = Field(
        None, alias="page_level_persistent_menu"
    )
    user_level_persistent_menu: list[dict[str, Any]] | None = Field(
        None, alias="user_level_persistent_menu"
    )


class McomInvoiceListsFields(BaseModel):
    """Pydantic model for McomInvoiceLists fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    invoice_details: list[McomInvoiceDetailsFields] | None = Field(None, alias="invoice_details")
    invoice_ids: list[str] | None = Field(None, alias="invoice_ids")
    page_id: str | None = Field(None, alias="page_id")


class LeadGenContextCardFields(BaseModel):
    """Pydantic model for LeadGenContextCard fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    button_text: str | None = Field(None, alias="button_text")
    content: list[str] | None = Field(None, alias="content")
    cover_photo: PhotoFields | None = Field(None, alias="cover_photo")
    id: str | None = Field(None, alias="id")
    style: str | None = Field(None, alias="style")
    title: str | None = Field(None, alias="title")


class ImageCopyrightFields(BaseModel):
    """Pydantic model for ImageCopyright fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    artist: str | None = Field(None, alias="artist")
    copyright_monitoring_status: str | None = Field(None, alias="copyright_monitoring_status")
    creation_time: datetime | None = Field(None, alias="creation_time")
    creator: str | None = Field(None, alias="creator")
    custom_id: str | None = Field(None, alias="custom_id")
    description: str | None = Field(None, alias="description")
    filename: str | None = Field(None, alias="filename")
    id: str | None = Field(None, alias="id")
    image: PhotoFields | None = Field(None, alias="image")
    matches_count: int | None = Field(None, alias="matches_count")
    original_content_creation_date: datetime | None = Field(
        None, alias="original_content_creation_date"
    )
    ownership_countries: VideoCopyrightGeoGateFields | None = Field(
        None, alias="ownership_countries"
    )
    tags: list[str] | None = Field(None, alias="tags")
    title: str | None = Field(None, alias="title")
    update_time: datetime | None = Field(None, alias="update_time")


class ApacMonSellerStatusAPIContainerFields(BaseModel):
    """Pydantic model for ApacMonSellerStatusAPIContainer fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pass  # No fields defined


class AdCampaignIssuesInfoFields(BaseModel):
    """Pydantic model for AdCampaignIssuesInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    error_code: int | None = Field(None, alias="error_code")
    error_message: str | None = Field(None, alias="error_message")
    error_summary: str | None = Field(None, alias="error_summary")
    error_type: str | None = Field(None, alias="error_type")
    level: str | None = Field(None, alias="level")
    mid: str | None = Field(None, alias="mid")


class AdAccountAdVolumeFields(BaseModel):
    """Pydantic model for AdAccountAdVolume fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    actor_id: str | None = Field(None, alias="actor_id")
    actor_name: str | None = Field(None, alias="actor_name")
    ad_limit_scope_business: BusinessFields | None = Field(None, alias="ad_limit_scope_business")
    ad_limit_scope_business_manager_id: str | None = Field(
        None, alias="ad_limit_scope_business_manager_id"
    )
    ad_limit_set_by_page_admin: int | None = Field(None, alias="ad_limit_set_by_page_admin")
    ads_running_or_in_review_count: int | None = Field(None, alias="ads_running_or_in_review_count")
    ads_running_or_in_review_count_subject_to_limit_set_by_page: int | None = Field(
        None, alias="ads_running_or_in_review_count_subject_to_limit_set_by_page"
    )
    current_account_ads_running_or_in_review_count: int | None = Field(
        None, alias="current_account_ads_running_or_in_review_count"
    )
    future_limit_activation_date: str | None = Field(None, alias="future_limit_activation_date")
    future_limit_on_ads_running_or_in_review: int | None = Field(
        None, alias="future_limit_on_ads_running_or_in_review"
    )
    limit_on_ads_running_or_in_review: int | None = Field(
        None, alias="limit_on_ads_running_or_in_review"
    )
    recommendations: list[dict[str, Any]] | None = Field(None, alias="recommendations")


class PreapprovalReviewFields(BaseModel):
    """Pydantic model for PreapprovalReview fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    comp_type: str | None = Field(None, alias="comp_type")
    crow_component_id: int | None = Field(None, alias="crow_component_id")
    is_human_reviewed: bool | None = Field(None, alias="is_human_reviewed")
    is_reviewed: bool | None = Field(None, alias="is_reviewed")
    policy_info: list[dict[str, dict[str, Any]]] | None = Field(None, alias="policy_info")


class URLFields(BaseModel):
    """Pydantic model for URL fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    engagement: dict[str, Any] | None = Field(None, alias="engagement")
    id: str | None = Field(None, alias="id")
    og_object: dict[str, Any] | None = Field(None, alias="og_object")
    ownership_permissions: dict[str, Any] | None = Field(None, alias="ownership_permissions")
    scopes: dict[str, Any] | None = Field(None, alias="scopes")


class AdAssetFeedAdditionalDataFields(BaseModel):
    """Pydantic model for AdAssetFeedAdditionalData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    automated_product_tags: bool | None = Field(None, alias="automated_product_tags")
    brand_page_id: str | None = Field(None, alias="brand_page_id")
    is_click_to_message: bool | None = Field(None, alias="is_click_to_message")
    multi_share_end_card: bool | None = Field(None, alias="multi_share_end_card")
    page_welcome_message: str | None = Field(None, alias="page_welcome_message")
    partner_app_welcome_message_flow_id: str | None = Field(
        None, alias="partner_app_welcome_message_flow_id"
    )


class AdAccountUserSettingsFields(BaseModel):
    """Pydantic model for AdAccountUserSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    acf_should_opt_out_video_adjustments: bool | None = Field(
        None, alias="acf_should_opt_out_video_adjustments"
    )
    aco_sticky_settings: list[dict[str, str]] | None = Field(None, alias="aco_sticky_settings")
    actions_quick_view_created: bool | None = Field(None, alias="actions_quick_view_created")
    active_ads_quick_view_created: bool | None = Field(None, alias="active_ads_quick_view_created")
    ad_account: AdAccountFields | None = Field(None, alias="ad_account")
    ad_object_export_format: str | None = Field(None, alias="ad_object_export_format")
    ads_manager_footer_row_toast_impressions: int | None = Field(
        None, alias="ads_manager_footer_row_toast_impressions"
    )
    auto_review_video_caption: bool | None = Field(None, alias="auto_review_video_caption")
    campaign_overview_columns: list[str] | None = Field(None, alias="campaign_overview_columns")
    column_suggestion_status: str | None = Field(None, alias="column_suggestion_status")
    conditional_formatting_rules: list[str] | None = Field(
        None, alias="conditional_formatting_rules"
    )
    default_account_overview_agegender_metrics: list[str] | None = Field(
        None, alias="default_account_overview_agegender_metrics"
    )
    default_account_overview_location_metrics: list[str] | None = Field(
        None, alias="default_account_overview_location_metrics"
    )
    default_account_overview_metrics: list[str] | None = Field(
        None, alias="default_account_overview_metrics"
    )
    default_account_overview_time_metrics: list[str] | None = Field(
        None, alias="default_account_overview_time_metrics"
    )
    default_builtin_column_preset: str | None = Field(None, alias="default_builtin_column_preset")
    default_nam_time_range: str | None = Field(None, alias="default_nam_time_range")
    draft_mode_enabled: bool | None = Field(None, alias="draft_mode_enabled")
    export_deleted_items_with_delivery: bool | None = Field(
        None, alias="export_deleted_items_with_delivery"
    )
    export_summary_row: bool | None = Field(None, alias="export_summary_row")
    had_delivery_quick_view_created: bool | None = Field(
        None, alias="had_delivery_quick_view_created"
    )
    has_seen_groups_column_flexing_experience: bool | None = Field(
        None, alias="has_seen_groups_column_flexing_experience"
    )
    has_seen_instagram_column_flexing_experience: bool | None = Field(
        None, alias="has_seen_instagram_column_flexing_experience"
    )
    has_seen_leads_column_flexing_experience: bool | None = Field(
        None, alias="has_seen_leads_column_flexing_experience"
    )
    has_seen_shops_ads_metrics_onboarding_tour: bool | None = Field(
        None, alias="has_seen_shops_ads_metrics_onboarding_tour"
    )
    has_seen_shops_column_flexing_experience: bool | None = Field(
        None, alias="has_seen_shops_column_flexing_experience"
    )
    hidden_optimization_tips: list[dict[str, bool]] | None = Field(
        None, alias="hidden_optimization_tips"
    )
    high_performing_quick_view_created: bool | None = Field(
        None, alias="high_performing_quick_view_created"
    )
    id: str | None = Field(None, alias="id")
    is_3p_auth_setting_set: bool | None = Field(None, alias="is_3p_auth_setting_set")
    is_ads_manager_footer_row_preference_set: bool | None = Field(
        None, alias="is_ads_manager_footer_row_preference_set"
    )
    is_ads_manager_footer_row_shown: bool | None = Field(
        None, alias="is_ads_manager_footer_row_shown"
    )
    is_text_variation_nux_close: bool | None = Field(None, alias="is_text_variation_nux_close")
    last_used_columns: dict[str, Any] | None = Field(None, alias="last_used_columns")
    last_used_pe_filters: list[dict[str, Any]] | None = Field(None, alias="last_used_pe_filters")
    last_used_website_urls: list[str] | None = Field(None, alias="last_used_website_urls")
    outlier_preferences: dict[str, Any] | None = Field(None, alias="outlier_preferences")
    pinned_ad_object_ids: list[str] | None = Field(None, alias="pinned_ad_object_ids")
    rb_export_format: str | None = Field(None, alias="rb_export_format")
    rb_export_raw_data: bool | None = Field(None, alias="rb_export_raw_data")
    rb_export_summary_row: bool | None = Field(None, alias="rb_export_summary_row")
    saip_advertiser_setup_optimisation_guidance_overall_state: str | None = Field(
        None, alias="saip_advertiser_setup_optimisation_guidance_overall_state"
    )
    saip_advertiser_setup_optimisation_guidance_state: list[dict[str, str]] | None = Field(
        None, alias="saip_advertiser_setup_optimisation_guidance_state"
    )
    shops_ads_metrics_onboarding_tour_close_count: int | None = Field(
        None, alias="shops_ads_metrics_onboarding_tour_close_count"
    )
    shops_ads_metrics_onboarding_tour_last_action_time: datetime | None = Field(
        None, alias="shops_ads_metrics_onboarding_tour_last_action_time"
    )
    should_default_image_auto_crop: bool | None = Field(
        None, alias="should_default_image_auto_crop"
    )
    should_default_image_auto_crop_for_tail: bool | None = Field(
        None, alias="should_default_image_auto_crop_for_tail"
    )
    should_default_image_auto_crop_optimization: bool | None = Field(
        None, alias="should_default_image_auto_crop_optimization"
    )
    should_default_image_dof_toggle: bool | None = Field(
        None, alias="should_default_image_dof_toggle"
    )
    should_default_image_lpp_ads_to_square: bool | None = Field(
        None, alias="should_default_image_lpp_ads_to_square"
    )
    should_default_instagram_profile_card_optimization: bool | None = Field(
        None, alias="should_default_instagram_profile_card_optimization"
    )
    should_default_text_swapping_optimization: bool | None = Field(
        None, alias="should_default_text_swapping_optimization"
    )
    should_logout_of_3p_sourcing: bool | None = Field(None, alias="should_logout_of_3p_sourcing")
    should_show_shops_ads_metrics_onboarding_tour: bool | None = Field(
        None, alias="should_show_shops_ads_metrics_onboarding_tour"
    )
    show_archived_data: bool | None = Field(None, alias="show_archived_data")
    show_text_variation_nux_tooltip: bool | None = Field(
        None, alias="show_text_variation_nux_tooltip"
    )
    syd_campaign_trends_activemetric: str | None = Field(
        None, alias="syd_campaign_trends_activemetric"
    )
    syd_campaign_trends_attribution: str | None = Field(
        None, alias="syd_campaign_trends_attribution"
    )
    syd_campaign_trends_metrics: list[str] | None = Field(None, alias="syd_campaign_trends_metrics")
    syd_campaign_trends_objective: dict[str, Any] | None = Field(
        None, alias="syd_campaign_trends_objective"
    )
    syd_campaign_trends_time_range: str | None = Field(None, alias="syd_campaign_trends_time_range")
    syd_landing_page_opt_in_status: str | None = Field(None, alias="syd_landing_page_opt_in_status")
    text_gen_persona_opt_in_type: str | None = Field(None, alias="text_gen_persona_opt_in_type")
    text_variations_opt_in_out_ts: datetime | None = Field(
        None, alias="text_variations_opt_in_out_ts"
    )
    text_variations_opt_in_type: str | None = Field(None, alias="text_variations_opt_in_type")
    user: UserFields | None = Field(None, alias="user")


class LocalServiceBusinessFields(BaseModel):
    """Pydantic model for LocalServiceBusiness fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    address: dict[str, Any] | None = Field(None, alias="address")
    applinks: CatalogItemAppLinksFields | None = Field(None, alias="applinks")
    availability: dict[str, Any] | None = Field(None, alias="availability")
    brand: str | None = Field(None, alias="brand")
    category: str | None = Field(None, alias="category")
    category_specific_fields: CatalogSubVerticalListFields | None = Field(
        None, alias="category_specific_fields"
    )
    condition: dict[str, Any] | None = Field(None, alias="condition")
    cuisine_type: str | None = Field(None, alias="cuisine_type")
    currency: str | None = Field(None, alias="currency")
    custom_label_0: str | None = Field(None, alias="custom_label_0")
    custom_label_1: str | None = Field(None, alias="custom_label_1")
    custom_label_2: str | None = Field(None, alias="custom_label_2")
    custom_label_3: str | None = Field(None, alias="custom_label_3")
    custom_label_4: str | None = Field(None, alias="custom_label_4")
    custom_number_0: int | None = Field(None, alias="custom_number_0")
    custom_number_1: int | None = Field(None, alias="custom_number_1")
    custom_number_2: int | None = Field(None, alias="custom_number_2")
    custom_number_3: int | None = Field(None, alias="custom_number_3")
    custom_number_4: int | None = Field(None, alias="custom_number_4")
    description: str | None = Field(None, alias="description")
    expiration_date: str | None = Field(None, alias="expiration_date")
    gtin: str | None = Field(None, alias="gtin")
    id: str | None = Field(None, alias="id")
    image_fetch_status: dict[str, Any] | None = Field(None, alias="image_fetch_status")
    images: list[str] | None = Field(None, alias="images")
    local_info: ProductItemLocalInfoFields | None = Field(None, alias="local_info")
    local_service_business_id: str | None = Field(None, alias="local_service_business_id")
    main_local_info: ProductItemLocalInfoFields | None = Field(None, alias="main_local_info")
    phone: str | None = Field(None, alias="phone")
    price: str | None = Field(None, alias="price")
    price_range: str | None = Field(None, alias="price_range")
    retailer_category: str | None = Field(None, alias="retailer_category")
    sanitized_images: list[str] | None = Field(None, alias="sanitized_images")
    size: str | None = Field(None, alias="size")
    tags: list[str] | None = Field(None, alias="tags")
    title: str | None = Field(None, alias="title")
    unit_price: dict[str, Any] | None = Field(None, alias="unit_price")
    url: str | None = Field(None, alias="url")
    vendor_id: str | None = Field(None, alias="vendor_id")
    visibility: dict[str, Any] | None = Field(None, alias="visibility")


class MessengerDestinationPageWelcomeMessageFields(BaseModel):
    """Pydantic model for MessengerDestinationPageWelcomeMessage fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    page_welcome_message_body: str | None = Field(None, alias="page_welcome_message_body")
    page_welcome_message_type: str | None = Field(None, alias="page_welcome_message_type")
    template_name: str | None = Field(None, alias="template_name")
    time_created: datetime | None = Field(None, alias="time_created")
    time_last_used: datetime | None = Field(None, alias="time_last_used")


class AudioIsrcFields(BaseModel):
    """Pydantic model for AudioIsrc fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    all_kg_featured_artists: str | None = Field(None, alias="all_kg_featured_artists")
    all_kg_main_artists: str | None = Field(None, alias="all_kg_main_artists")
    artist_profile_picture_url: str | None = Field(None, alias="artist_profile_picture_url")
    id: str | None = Field(None, alias="id")
    isrc: str | None = Field(None, alias="isrc")
    publishing_rights_data: dict[str, Any] | None = Field(None, alias="publishing_rights_data")
    top_searchable_artist_id: str | None = Field(None, alias="top_searchable_artist_id")
    top_searchable_artist_name: str | None = Field(None, alias="top_searchable_artist_name")
    top_searchable_artist_profile_pic_url: str | None = Field(
        None, alias="top_searchable_artist_profile_pic_url"
    )


class WhitehatFBDLRunFields(BaseModel):
    """Pydantic model for WhitehatFBDLRun fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    creation_time: datetime | None = Field(None, alias="creation_time")
    id: str | None = Field(None, alias="id")
    is_pinned: bool | None = Field(None, alias="is_pinned")
    note: str | None = Field(None, alias="note")
    result: list[dict[str, str]] | None = Field(None, alias="result")
    run_code: str | None = Field(None, alias="run_code")
    status: str | None = Field(None, alias="status")
    user_type: str | None = Field(None, alias="user_type")


class CustomAudienceStatusFields(BaseModel):
    """Pydantic model for CustomAudienceStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    code: int | None = Field(None, alias="code")
    description: str | None = Field(None, alias="description")


class AdCustomizationRuleSpecFields(BaseModel):
    """Pydantic model for AdCustomizationRuleSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    caption: str | None = Field(None, alias="caption")
    customization_spec: dict[str, Any] | None = Field(None, alias="customization_spec")
    description: str | None = Field(None, alias="description")
    image_hash: str | None = Field(None, alias="image_hash")
    link: str | None = Field(None, alias="link")
    message: str | None = Field(None, alias="message")
    name: str | None = Field(None, alias="name")
    priority: int | None = Field(None, alias="priority")
    template_url_spec: AdCreativeTemplateURLSpecFields | None = Field(
        None, alias="template_url_spec"
    )
    video_id: int | None = Field(None, alias="video_id")


class AdProposalFields(BaseModel):
    """Pydantic model for AdProposal fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_proposal_type_name: str | None = Field(None, alias="ad_proposal_type_name")
    adaccount: AdAccountFields | None = Field(None, alias="adaccount")
    creation_time: datetime | None = Field(None, alias="creation_time")
    creator: UserFields | None = Field(None, alias="creator")
    delivery_interface: str | None = Field(None, alias="delivery_interface")
    expiration_time: datetime | None = Field(None, alias="expiration_time")
    has_conflict: bool | None = Field(None, alias="has_conflict")
    id: str | None = Field(None, alias="id")
    kpi_metric: str | None = Field(None, alias="kpi_metric")
    message: str | None = Field(None, alias="message")
    name: str | None = Field(None, alias="name")
    proposal_dts_template: str | None = Field(None, alias="proposal_dts_template")
    proposal_template_name: str | None = Field(None, alias="proposal_template_name")
    recommendation: str | None = Field(None, alias="recommendation")
    review_time: datetime | None = Field(None, alias="review_time")
    reviewed_by: UserFields | None = Field(None, alias="reviewed_by")
    send_time: datetime | None = Field(None, alias="send_time")
    status: str | None = Field(None, alias="status")
    use_testing: bool | None = Field(None, alias="use_testing")


class PageInsightsAsyncExportRunFields(BaseModel):
    """Pydantic model for PageInsightsAsyncExportRun fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    data_level: str | None = Field(None, alias="data_level")
    filters: list[dict[str, Any]] | None = Field(None, alias="filters")
    format: str | None = Field(None, alias="format")
    gen_report_date: int | None = Field(None, alias="gen_report_date")
    id: str | None = Field(None, alias="id")
    report_end_date: int | None = Field(None, alias="report_end_date")
    report_start_date: int | None = Field(None, alias="report_start_date")
    sorters: list[dict[str, Any]] | None = Field(None, alias="sorters")
    status: str | None = Field(None, alias="status")


class VideoGroupFields(BaseModel):
    """Pydantic model for VideoGroup fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    created_time: str | None = Field(None, alias="created_time")
    description: str | None = Field(None, alias="description")
    disable_reason: str | None = Field(None, alias="disable_reason")
    id: str | None = Field(None, alias="id")
    ig_profile_ids: list[str] | None = Field(None, alias="ig_profile_ids")
    is_disabled: bool | None = Field(None, alias="is_disabled")
    is_fb_video_group: bool | None = Field(None, alias="is_fb_video_group")
    last_used_time: str | None = Field(None, alias="last_used_time")
    length: float | None = Field(None, alias="length")
    name: str | None = Field(None, alias="name")
    page_id: str | None = Field(None, alias="page_id")
    page_ids: list[str] | None = Field(None, alias="page_ids")
    picture: str | None = Field(None, alias="picture")
    placements: list[str] | None = Field(None, alias="placements")
    video_group_types: list[str] | None = Field(None, alias="video_group_types")
    videos: list[str] | None = Field(None, alias="videos")
    views: int | None = Field(None, alias="views")


class AdRuleEvaluationSpecFields(BaseModel):
    """Pydantic model for AdRuleEvaluationSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    evaluation_type: dict[str, Any] | None = Field(None, alias="evaluation_type")
    filters: list[AdRuleFiltersFields] | None = Field(None, alias="filters")
    trigger: AdRuleTriggerFields | None = Field(None, alias="trigger")


class AppOptimizedCustomEventsFields(BaseModel):
    """Pydantic model for AppOptimizedCustomEvents fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app_id: int | None = Field(None, alias="app_id")
    app_name: str | None = Field(None, alias="app_name")
    event_names: list[str] | None = Field(None, alias="event_names")


class CTWAWhatsAppNumbersInfoFields(BaseModel):
    """Pydantic model for CTWAWhatsAppNumbersInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    can_manage_wa_flows: bool | None = Field(None, alias="can_manage_wa_flows")
    formatted_whatsapp_number: str | None = Field(None, alias="formatted_whatsapp_number")
    is_business_number: bool | None = Field(None, alias="is_business_number")
    is_calling_enabled: bool | None = Field(None, alias="is_calling_enabled")
    number_country_prefix: str | None = Field(None, alias="number_country_prefix")
    page_whatsapp_number_id: str | None = Field(None, alias="page_whatsapp_number_id")
    waba_id: str | None = Field(None, alias="waba_id")
    whatsapp_number: str | None = Field(None, alias="whatsapp_number")
    whatsapp_smb_device: str | None = Field(None, alias="whatsapp_smb_device")


class OfflineConversionDataSetOptimizationStatusFields(BaseModel):
    """Pydantic model for OfflineConversionDataSetOptimizationStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    event: str | None = Field(None, alias="event")
    last_changed_time: int | None = Field(None, alias="last_changed_time")
    last_detected_time: int | None = Field(None, alias="last_detected_time")
    status: str | None = Field(None, alias="status")


class AdAccountDefaultObjectiveFields(BaseModel):
    """Pydantic model for AdAccountDefaultObjective fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    default_objective_for_user: dict[str, Any] | None = Field(
        None, alias="default_objective_for_user"
    )
    objective_for_level: dict[str, Any] | None = Field(None, alias="objective_for_level")


class AdAccountAdsRecommendedAudiosFields(BaseModel):
    """Pydantic model for AdAccountAdsRecommendedAudios fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    audio_assets: list[int] | None = Field(None, alias="audio_assets")


class BrandSafetyBlockListUsageFields(BaseModel):
    """Pydantic model for BrandSafetyBlockListUsage fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    current_usage: int | None = Field(None, alias="current_usage")
    new_usage: int | None = Field(None, alias="new_usage")
    platform: str | None = Field(None, alias="platform")
    position: str | None = Field(None, alias="position")
    threshold: int | None = Field(None, alias="threshold")


class PageRestaurantSpecialtiesFields(BaseModel):
    """Pydantic model for PageRestaurantSpecialties fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    breakfast: int | None = Field(None, alias="breakfast")
    coffee: int | None = Field(None, alias="coffee")
    dinner: int | None = Field(None, alias="dinner")
    drinks: int | None = Field(None, alias="drinks")
    lunch: int | None = Field(None, alias="lunch")


class InstagramUserFields(BaseModel):
    """Pydantic model for InstagramUser fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    follow_count: int | None = Field(None, alias="follow_count")
    followed_by_count: int | None = Field(None, alias="followed_by_count")
    has_profile_picture: bool | None = Field(None, alias="has_profile_picture")
    id: str | None = Field(None, alias="id")
    ig_user_id: str | None = Field(None, alias="ig_user_id")
    is_private: bool | None = Field(None, alias="is_private")
    is_published: bool | None = Field(None, alias="is_published")
    media_count: int | None = Field(None, alias="media_count")
    mini_shop_storefront: ShopFields | None = Field(None, alias="mini_shop_storefront")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")
    profile_pic: str | None = Field(None, alias="profile_pic")
    username: str | None = Field(None, alias="username")


class FBPageAndInstagramAccountFields(BaseModel):
    """Pydantic model for FBPageAndInstagramAccount fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_permissions: list[str] | None = Field(None, alias="ad_permissions")
    bc_permission_status: str | None = Field(None, alias="bc_permission_status")
    bc_permissions: list[dict[str, str]] | None = Field(None, alias="bc_permissions")
    is_managed: bool | None = Field(None, alias="is_managed")
    matched_by: str | None = Field(None, alias="matched_by")


class SecuritySettingsFields(BaseModel):
    """Pydantic model for SecuritySettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pass  # No fields defined


class AdCustomDerivedMetricsFields(BaseModel):
    """Pydantic model for AdCustomDerivedMetrics fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_account_id: str | None = Field(None, alias="ad_account_id")
    business: BusinessFields | None = Field(None, alias="business")
    creation_time: datetime | None = Field(None, alias="creation_time")
    creator: ProfileFields | None = Field(None, alias="creator")
    custom_derived_metric_type: str | None = Field(None, alias="custom_derived_metric_type")
    deletion_time: datetime | None = Field(None, alias="deletion_time")
    deletor: ProfileFields | None = Field(None, alias="deletor")
    description: str | None = Field(None, alias="description")
    format_type: str | None = Field(None, alias="format_type")
    formula: str | None = Field(None, alias="formula")
    has_attribution_windows: bool | None = Field(None, alias="has_attribution_windows")
    has_inline_attribution_window: bool | None = Field(None, alias="has_inline_attribution_window")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    permission: str | None = Field(None, alias="permission")
    saved_report_id: str | None = Field(None, alias="saved_report_id")
    scope: str | None = Field(None, alias="scope")


class AdsPixelRecentEventsResultFields(BaseModel):
    """Pydantic model for AdsPixelRecentEventsResult fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    count: int | None = Field(None, alias="count")
    event: str | None = Field(None, alias="event")


class BusinessTrafficAnalysisReportFields(BaseModel):
    """Pydantic model for BusinessTrafficAnalysisReport fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    audience_location: list[dict[str, Any]] | None = Field(None, alias="audience_location")
    event_category: list[dict[str, Any]] | None = Field(None, alias="event_category")
    traffic_analysis_impressions: list[dict[str, Any]] | None = Field(
        None, alias="traffic_analysis_impressions"
    )


class LeadGenCustomDisclaimerBodyFields(BaseModel):
    """Pydantic model for LeadGenCustomDisclaimerBody fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    text: str | None = Field(None, alias="text")
    url_entities: list[LeadGenURLEntityAtRangesFields] | None = Field(None, alias="url_entities")


class AdCampaignDeliveryEstimateFields(BaseModel):
    """Pydantic model for AdCampaignDeliveryEstimate fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    daily_outcomes_curve: list[OutcomePredictionPointFields] | None = Field(
        None, alias="daily_outcomes_curve"
    )
    estimate_dau: int | None = Field(None, alias="estimate_dau")
    estimate_mau_lower_bound: int | None = Field(None, alias="estimate_mau_lower_bound")
    estimate_mau_upper_bound: int | None = Field(None, alias="estimate_mau_upper_bound")
    estimate_ready: bool | None = Field(None, alias="estimate_ready")
    targeting_optimization_types: list[dict[str, int]] | None = Field(
        None, alias="targeting_optimization_types"
    )


class IGMediaBoostEligibilityInfoFields(BaseModel):
    """Pydantic model for IGMediaBoostEligibilityInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    boost_ineligible_reason: str | None = Field(None, alias="boost_ineligible_reason")
    eligible_to_boost: bool | None = Field(None, alias="eligible_to_boost")


class ShadowIGUserCTXPartnerAppWelcomeMessageFlowFields(BaseModel):
    """Pydantic model for ShadowIGUserCTXPartnerAppWelcomeMessageFlow fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    compatible_platforms: list[str] | None = Field(None, alias="compatible_platforms")
    eligible_platforms: list[str] | None = Field(None, alias="eligible_platforms")
    id: str | None = Field(None, alias="id")
    is_ig_only_flow: bool | None = Field(None, alias="is_ig_only_flow")
    is_used_in_ad: bool | None = Field(None, alias="is_used_in_ad")
    last_update_time: datetime | None = Field(None, alias="last_update_time")
    name: str | None = Field(None, alias="name")
    welcome_message_flow: str | None = Field(None, alias="welcome_message_flow")


class EventTicketSettingFields(BaseModel):
    """Pydantic model for EventTicketSetting fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    ticket_delivery_type: str | None = Field(None, alias="ticket_delivery_type")


class TargetingGeoLocationZipFields(BaseModel):
    """Pydantic model for TargetingGeoLocationZip fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    country: str | None = Field(None, alias="country")
    key: str | None = Field(None, alias="key")
    name: str | None = Field(None, alias="name")
    primary_city_id: int | None = Field(None, alias="primary_city_id")
    region_id: int | None = Field(None, alias="region_id")


class AdAccountRecommendationsFields(BaseModel):
    """Pydantic model for AdAccountRecommendations fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    recommendations: list[dict[str, Any]] | None = Field(None, alias="recommendations")


class IGResumableVideoUploadStatusFields(BaseModel):
    """Pydantic model for IGResumableVideoUploadStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    processing_phase: VideoStatusProcessingPhaseFields | None = Field(
        None, alias="processing_phase"
    )
    uploading_phase: VideoStatusUploadingPhaseFields | None = Field(None, alias="uploading_phase")


class ThirdPartyPartnerPanelRequestFields(BaseModel):
    """Pydantic model for ThirdPartyPartnerPanelRequest fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adentities_ids: list[str] | None = Field(None, alias="adentities_ids")
    country: str | None = Field(None, alias="country")
    created_time: datetime | None = Field(None, alias="created_time")
    description: str | None = Field(None, alias="description")
    id: str | None = Field(None, alias="id")
    modified_time: datetime | None = Field(None, alias="modified_time")
    owner_instance_id: str | None = Field(None, alias="owner_instance_id")
    owner_panel_id: str | None = Field(None, alias="owner_panel_id")
    owner_panel_name: str | None = Field(None, alias="owner_panel_name")
    status: dict[str, Any] | None = Field(None, alias="status")
    study_end_time: datetime | None = Field(None, alias="study_end_time")
    study_start_time: datetime | None = Field(None, alias="study_start_time")
    study_type: dict[str, Any] | None = Field(None, alias="study_type")


class CreditCardFields(BaseModel):
    """Pydantic model for CreditCard fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    billing_address: dict[str, Any] | None = Field(None, alias="billing_address")
    card_cobadging: str | None = Field(None, alias="card_cobadging")
    card_holder_name: str | None = Field(None, alias="card_holder_name")
    card_type: str | None = Field(None, alias="card_type")
    credential_id: int | None = Field(None, alias="credential_id")
    default_receiving_method_products: list[str] | None = Field(
        None, alias="default_receiving_method_products"
    )
    expiry_month: str | None = Field(None, alias="expiry_month")
    expiry_year: str | None = Field(None, alias="expiry_year")
    id: str | None = Field(None, alias="id")
    is_cvv_tricky_bin: bool | None = Field(None, alias="is_cvv_tricky_bin")
    is_enabled: bool | None = Field(None, alias="is_enabled")
    is_last_used: bool | None = Field(None, alias="is_last_used")
    is_network_tokenized_in_india: bool | None = Field(None, alias="is_network_tokenized_in_india")
    is_soft_disabled: bool | None = Field(None, alias="is_soft_disabled")
    is_user_verified: bool | None = Field(None, alias="is_user_verified")
    is_zip_verified: bool | None = Field(None, alias="is_zip_verified")
    last4: str | None = Field(None, alias="last4")
    readable_card_type: str | None = Field(None, alias="readable_card_type")
    time_created: datetime | None = Field(None, alias="time_created")
    time_created_ts: int | None = Field(None, alias="time_created_ts")
    type: str | None = Field(None, alias="type")


class EntityAtTextRangeFields(BaseModel):
    """Pydantic model for EntityAtTextRange fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    length: int | None = Field(None, alias="length")
    name: str | None = Field(None, alias="name")
    object: ProfileFields | None = Field(None, alias="object")
    offset: int | None = Field(None, alias="offset")
    type: dict[str, Any] | None = Field(None, alias="type")


class AdRecommendationDataFields(BaseModel):
    """Pydantic model for AdRecommendationData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    link: str | None = Field(None, alias="link")


class AdCreativeInstagramBrandedContentFields(BaseModel):
    """Pydantic model for AdCreativeInstagramBrandedContent fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    sponsor_id: str | None = Field(None, alias="sponsor_id")


class UserCoverPhotoFields(BaseModel):
    """Pydantic model for UserCoverPhoto fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    offset_x: float | None = Field(None, alias="offset_x")
    offset_y: float | None = Field(None, alias="offset_y")
    source: str | None = Field(None, alias="source")


class MessagingFeatureReviewFields(BaseModel):
    """Pydantic model for MessagingFeatureReview fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    feature: str | None = Field(None, alias="feature")
    status: str | None = Field(None, alias="status")


class OrderIDAttributionsFields(BaseModel):
    """Pydantic model for OrderIDAttributions fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app_id: str | None = Field(None, alias="app_id")
    attribution_type: str | None = Field(None, alias="attribution_type")
    attributions: list[dict[str, Any]] | None = Field(None, alias="attributions")
    conversion_device: str | None = Field(None, alias="conversion_device")
    dataset_id: str | None = Field(None, alias="dataset_id")
    holdout_status: list[dict[str, Any]] | None = Field(None, alias="holdout_status")
    order_id: str | None = Field(None, alias="order_id")
    order_timestamp: datetime | None = Field(None, alias="order_timestamp")
    pixel_id: str | None = Field(None, alias="pixel_id")


class ProductItemErrorFields(BaseModel):
    """Pydantic model for ProductItemError fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    description: str | None = Field(None, alias="description")
    error_priority: str | None = Field(None, alias="error_priority")
    error_type: str | None = Field(None, alias="error_type")
    title: str | None = Field(None, alias="title")


class TargetingGeoLocationMarketFields(BaseModel):
    """Pydantic model for TargetingGeoLocationMarket fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    country: str | None = Field(None, alias="country")
    key: str | None = Field(None, alias="key")
    market_type: str | None = Field(None, alias="market_type")
    name: str | None = Field(None, alias="name")


class LiveVideoInputStreamFields(BaseModel):
    """Pydantic model for LiveVideoInputStream fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    dash_ingest_url: str | None = Field(None, alias="dash_ingest_url")
    dash_preview_url: str | None = Field(None, alias="dash_preview_url")
    id: str | None = Field(None, alias="id")
    is_master: bool | None = Field(None, alias="is_master")
    secure_stream_url: str | None = Field(None, alias="secure_stream_url")
    stream_health: dict[str, Any] | None = Field(None, alias="stream_health")
    stream_id: str | None = Field(None, alias="stream_id")
    stream_url: str | None = Field(None, alias="stream_url")


class AdAccountAgencyFeeConfigFields(BaseModel):
    """Pydantic model for AdAccountAgencyFeeConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    can_add_agency_fee_to_invoice: bool | None = Field(None, alias="can_add_agency_fee_to_invoice")
    default_agency_fee_pct: float | None = Field(None, alias="default_agency_fee_pct")
    id: str | None = Field(None, alias="id")
    is_agency_fee_disabled: bool | None = Field(None, alias="is_agency_fee_disabled")
    status: dict[str, Any] | None = Field(None, alias="status")


class SavedMessageResponseFields(BaseModel):
    """Pydantic model for SavedMessageResponse fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    image: str | None = Field(None, alias="image")
    is_enabled: bool | None = Field(None, alias="is_enabled")
    message: str | None = Field(None, alias="message")
    title: str | None = Field(None, alias="title")


class AdCreativeLinkDataTemplateVideoSpecFields(BaseModel):
    """Pydantic model for AdCreativeLinkDataTemplateVideoSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    categorization_criteria: str | None = Field(None, alias="categorization_criteria")
    customization: list[dict[str, str]] | None = Field(None, alias="customization")
    template_id: str | None = Field(None, alias="template_id")


class AdRuleHistoryResultActionFields(BaseModel):
    """Pydantic model for AdRuleHistoryResultAction fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    action: str | None = Field(None, alias="action")
    field: str | None = Field(None, alias="field")
    new_value: str | None = Field(None, alias="new_value")
    old_value: str | None = Field(None, alias="old_value")


class MessengerBusinessTemplateFields(BaseModel):
    """Pydantic model for MessengerBusinessTemplate fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    category: str | None = Field(None, alias="category")
    components: list[dict[str, Any]] | None = Field(None, alias="components")
    creation_time: int | None = Field(None, alias="creation_time")
    id: str | None = Field(None, alias="id")
    language: str | None = Field(None, alias="language")
    language_count: int | None = Field(None, alias="language_count")
    last_updated_time: datetime | None = Field(None, alias="last_updated_time")
    library_template_name: str | None = Field(None, alias="library_template_name")
    name: str | None = Field(None, alias="name")
    rejected_reason: str | None = Field(None, alias="rejected_reason")
    rejection_reasons: dict[str, Any] | None = Field(None, alias="rejection_reasons")
    specific_rejection_reasons: dict[str, Any] | None = Field(
        None, alias="specific_rejection_reasons"
    )
    status: str | None = Field(None, alias="status")


class MailingAddressFields(BaseModel):
    """Pydantic model for MailingAddress fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    city: str | None = Field(None, alias="city")
    city_page: PageFields | None = Field(None, alias="city_page")
    country: str | None = Field(None, alias="country")
    id: str | None = Field(None, alias="id")
    postal_code: str | None = Field(None, alias="postal_code")
    region: str | None = Field(None, alias="region")
    street1: str | None = Field(None, alias="street1")
    street2: str | None = Field(None, alias="street2")


class OffsiteSignalContainerBusinessObjectFields(BaseModel):
    """Pydantic model for OffsiteSignalContainerBusinessObject fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    business: BusinessFields | None = Field(None, alias="business")
    id: str | None = Field(None, alias="id")
    is_eligible_for_sharing_to_ad_account: bool | None = Field(
        None, alias="is_eligible_for_sharing_to_ad_account"
    )
    is_eligible_for_sharing_to_business: bool | None = Field(
        None, alias="is_eligible_for_sharing_to_business"
    )
    is_unavailable: bool | None = Field(None, alias="is_unavailable")
    name: str | None = Field(None, alias="name")
    primary_container_id: str | None = Field(None, alias="primary_container_id")


class CustomAudienceDataSourceFields(BaseModel):
    """Pydantic model for CustomAudienceDataSource fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    creation_params: str | None = Field(None, alias="creation_params")
    sub_type: dict[str, Any] | None = Field(None, alias="sub_type")
    type: dict[str, Any] | None = Field(None, alias="type")


class AdAccountSpendLimitFields(BaseModel):
    """Pydantic model for AdAccountSpendLimit fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    amount_spent: str | None = Field(None, alias="amount_spent")
    group_id: str | None = Field(None, alias="group_id")
    limit_id: str | None = Field(None, alias="limit_id")
    limit_value: str | None = Field(None, alias="limit_value")
    time_created: int | None = Field(None, alias="time_created")
    time_start: int | None = Field(None, alias="time_start")
    time_stop: int | None = Field(None, alias="time_stop")


class LeadGenCustomDisclaimerFields(BaseModel):
    """Pydantic model for LeadGenCustomDisclaimer fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    body: LeadGenCustomDisclaimerBodyFields | None = Field(None, alias="body")
    checkboxes: list[LeadGenLegalContentCheckboxFields] | None = Field(None, alias="checkboxes")
    title: str | None = Field(None, alias="title")


class ProductCatalogCheckMarketplacePartnerSellersStatusFields(BaseModel):
    """Pydantic model for ProductCatalogCheckMarketplacePartnerSellersStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    sample_errors: list[dict[str, Any]] | None = Field(None, alias="sample_errors")
    session_id: str | None = Field(None, alias="session_id")
    status: str | None = Field(None, alias="status")


class AdAssetFeedSpecCarouselChildAttachmentFields(BaseModel):
    """Pydantic model for AdAssetFeedSpecCarouselChildAttachment fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    body_label: AdAssetFeedSpecAssetLabelFields | None = Field(None, alias="body_label")
    call_to_action_type_label: AdAssetFeedSpecAssetLabelFields | None = Field(
        None, alias="call_to_action_type_label"
    )
    caption_label: AdAssetFeedSpecAssetLabelFields | None = Field(None, alias="caption_label")
    description_label: AdAssetFeedSpecAssetLabelFields | None = Field(
        None, alias="description_label"
    )
    image_label: AdAssetFeedSpecAssetLabelFields | None = Field(None, alias="image_label")
    link_url_label: AdAssetFeedSpecAssetLabelFields | None = Field(None, alias="link_url_label")
    phone_data_ids_label: AdAssetFeedSpecAssetLabelFields | None = Field(
        None, alias="phone_data_ids_label"
    )
    static_card: bool | None = Field(None, alias="static_card")
    title_label: AdAssetFeedSpecAssetLabelFields | None = Field(None, alias="title_label")
    video_label: AdAssetFeedSpecAssetLabelFields | None = Field(None, alias="video_label")


class ProductSetMetadataFields(BaseModel):
    """Pydantic model for ProductSetMetadata fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    cover_image_url: str | None = Field(None, alias="cover_image_url")
    description: str | None = Field(None, alias="description")
    external_url: str | None = Field(None, alias="external_url")
    integrity_review_status: str | None = Field(None, alias="integrity_review_status")


class AdsTabularFields(BaseModel):
    """Pydantic model for AdsTabular fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    rows: list[dict[str, Any]] | None = Field(None, alias="rows")


class BusinessTagFields(BaseModel):
    """Pydantic model for BusinessTag fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class AdsImageCropsFields(BaseModel):
    """Pydantic model for AdsImageCrops fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    field_100x100: list[dict[str, Any]] | None = Field(None, alias="100x100")
    field_100x72: list[dict[str, Any]] | None = Field(None, alias="100x72")
    field_191x100: list[dict[str, Any]] | None = Field(None, alias="191x100")
    field_400x150: list[dict[str, Any]] | None = Field(None, alias="400x150")
    field_400x500: list[dict[str, Any]] | None = Field(None, alias="400x500")
    field_600x360: list[dict[str, Any]] | None = Field(None, alias="600x360")
    field_90x160: list[dict[str, Any]] | None = Field(None, alias="90x160")


class DynamicItemDisplayBundleFields(BaseModel):
    """Pydantic model for DynamicItemDisplayBundle fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    additional_urls: list[dict[str, str]] | None = Field(None, alias="additional_urls")
    description: str | None = Field(None, alias="description")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    product_set: ProductSetFields | None = Field(None, alias="product_set")
    text_tokens: list[dict[str, str]] | None = Field(None, alias="text_tokens")
    url: str | None = Field(None, alias="url")


class ProductCatalogImageSettingsInternalFields(BaseModel):
    """Pydantic model for ProductCatalogImageSettingsInternal fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    carousel_ad: ProductCatalogImageSettingsOperationFields | None = Field(
        None, alias="carousel_ad"
    )
    shops_pdp: ProductCatalogImageSettingsOperationFields | None = Field(None, alias="shops_pdp")
    single_ad: ProductCatalogImageSettingsOperationFields | None = Field(None, alias="single_ad")


class BusinessPartnerPremiumOptionsFields(BaseModel):
    """Pydantic model for BusinessPartnerPremiumOptions fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    enable_basket_insight: bool | None = Field(None, alias="enable_basket_insight")
    enable_extended_audience_retargeting: bool | None = Field(
        None, alias="enable_extended_audience_retargeting"
    )
    retailer_custom_audience_config: dict[str, Any] | None = Field(
        None, alias="retailer_custom_audience_config"
    )


class FranchiseProgramMemberFields(BaseModel):
    """Pydantic model for FranchiseProgramMember fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    business: BusinessFields | None = Field(None, alias="business")
    end_date: datetime | None = Field(None, alias="end_date")
    id: str | None = Field(None, alias="id")
    join_date: datetime | None = Field(None, alias="join_date")
    member_ad_account: AdAccountFields | None = Field(None, alias="member_ad_account")
    member_user: UserFields | None = Field(None, alias="member_user")
    membership_status: str | None = Field(None, alias="membership_status")
    page: PageFields | None = Field(None, alias="page")


class AdStudyObjectiveIDFields(BaseModel):
    """Pydantic model for AdStudyObjectiveID fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    event_names: list[str] | None = Field(None, alias="event_names")
    id: str | None = Field(None, alias="id")
    type: str | None = Field(None, alias="type")


class OutcomePredictionPointFields(BaseModel):
    """Pydantic model for OutcomePredictionPoint fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    actions: float | None = Field(None, alias="actions")
    impressions: float | None = Field(None, alias="impressions")
    reach: float | None = Field(None, alias="reach")
    spend: int | None = Field(None, alias="spend")


class LeadGenThankYouPageGatedFileFields(BaseModel):
    """Pydantic model for LeadGenThankYouPageGatedFile fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    file_cdn_url: str | None = Field(None, alias="file_cdn_url")
    file_name: str | None = Field(None, alias="file_name")
    file_size_bytes: int | None = Field(None, alias="file_size_bytes")
    id: str | None = Field(None, alias="id")


class EventTourFields(BaseModel):
    """Pydantic model for EventTour fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    description: str | None = Field(None, alias="description")
    dominant_color: str | None = Field(None, alias="dominant_color")
    end_time: str | None = Field(None, alias="end_time")
    id: str | None = Field(None, alias="id")
    is_past: bool | None = Field(None, alias="is_past")
    last_event_timestamp: int | None = Field(None, alias="last_event_timestamp")
    name: str | None = Field(None, alias="name")
    num_events: int | None = Field(None, alias="num_events")
    photo: PhotoFields | None = Field(None, alias="photo")
    scheduled_publish_timestamp: int | None = Field(None, alias="scheduled_publish_timestamp")
    start_time: str | None = Field(None, alias="start_time")
    ticketing_uri: str | None = Field(None, alias="ticketing_uri")
    video: AdVideoFields | None = Field(None, alias="video")


class PageAboutStoryComposedBlockFields(BaseModel):
    """Pydantic model for PageAboutStoryComposedBlock fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    depth: int | None = Field(None, alias="depth")
    entity_ranges: list[PageAboutStoryComposedBlockEntityRangesFields] | None = Field(
        None, alias="entity_ranges"
    )
    inline_style_ranges: list[PageAboutStoryComposedBlockInlineStyleFields] | None = Field(
        None, alias="inline_style_ranges"
    )
    text: str | None = Field(None, alias="text")
    type: str | None = Field(None, alias="type")


class AdsPixelDomainLastFiredTimeFields(BaseModel):
    """Pydantic model for AdsPixelDomainLastFiredTime fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    domain_name: str | None = Field(None, alias="domain_name")
    last_fired_time: int | None = Field(None, alias="last_fired_time")


class AdAssetFeedSpecDescriptionFields(BaseModel):
    """Pydantic model for AdAssetFeedSpecDescription fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adlabels: list[AdAssetFeedSpecAssetLabelFields] | None = Field(None, alias="adlabels")
    text: str | None = Field(None, alias="text")
    url_tags: str | None = Field(None, alias="url_tags")


class AdCreativePortraitCustomizationsFields(BaseModel):
    """Pydantic model for AdCreativePortraitCustomizations fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    carousel_delivery_mode: str | None = Field(None, alias="carousel_delivery_mode")
    specifications: list[dict[str, Any]] | None = Field(None, alias="specifications")


class LeadGenAppointmentTimeSlotFields(BaseModel):
    """Pydantic model for LeadGenAppointmentTimeSlot fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    end_time: int | None = Field(None, alias="end_time")
    start_time: int | None = Field(None, alias="start_time")


class AdCreativeFeatureDetailsFields(BaseModel):
    """Pydantic model for AdCreativeFeatureDetails fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    customizations: AdCreativeFeatureCustomizationsFields | None = Field(
        None, alias="customizations"
    )
    enroll_status: str | None = Field(None, alias="enroll_status")


class CreativeAssetTagFields(BaseModel):
    """Pydantic model for CreativeAssetTag fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    name: str | None = Field(None, alias="name")


class LeadGenDraftQuestionFields(BaseModel):
    """Pydantic model for LeadGenDraftQuestion fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    conditional_questions_choices: list[LeadGenConditionalQuestionsGroupChoicesFields] | None = (
        Field(None, alias="conditional_questions_choices")
    )
    conditional_questions_group_id: str | None = Field(None, alias="conditional_questions_group_id")
    dependent_conditional_questions: (
        list[LeadGenConditionalQuestionsGroupQuestionsFields] | None
    ) = Field(None, alias="dependent_conditional_questions")
    inline_context: str | None = Field(None, alias="inline_context")
    key: str | None = Field(None, alias="key")
    label: str | None = Field(None, alias="label")
    options: list[LeadGenQuestionOptionFields] | None = Field(None, alias="options")
    type: str | None = Field(None, alias="type")


class SavedAudienceFields(BaseModel):
    """Pydantic model for SavedAudience fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account: AdAccountFields | None = Field(None, alias="account")
    approximate_count_lower_bound: int | None = Field(None, alias="approximate_count_lower_bound")
    approximate_count_upper_bound: int | None = Field(None, alias="approximate_count_upper_bound")
    delete_time: int | None = Field(None, alias="delete_time")
    description: str | None = Field(None, alias="description")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    operation_status: CustomAudienceStatusFields | None = Field(None, alias="operation_status")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")
    page_deletion_marked_delete_time: int | None = Field(
        None, alias="page_deletion_marked_delete_time"
    )
    permission_for_actions: AudiencePermissionForActionsFields | None = Field(
        None, alias="permission_for_actions"
    )
    run_status: str | None = Field(None, alias="run_status")
    sentence_lines: dict[str, Any] | None = Field(None, alias="sentence_lines")
    targeting: TargetingFields | None = Field(None, alias="targeting")
    time_created: datetime | None = Field(None, alias="time_created")
    time_updated: datetime | None = Field(None, alias="time_updated")


class AdRuleFields(BaseModel):
    """Pydantic model for AdRule fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    created_by: UserFields | None = Field(None, alias="created_by")
    created_time: datetime | None = Field(None, alias="created_time")
    disable_error_code: int | None = Field(None, alias="disable_error_code")
    evaluation_spec: AdRuleEvaluationSpecFields | None = Field(None, alias="evaluation_spec")
    execution_spec: AdRuleExecutionSpecFields | None = Field(None, alias="execution_spec")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    schedule_spec: AdRuleScheduleSpecFields | None = Field(None, alias="schedule_spec")
    status: str | None = Field(None, alias="status")
    updated_time: datetime | None = Field(None, alias="updated_time")


class LeadGenFormPreviewDetailsFields(BaseModel):
    """Pydantic model for LeadGenFormPreviewDetails fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    call_business_text: str | None = Field(None, alias="call_business_text")
    call_to_action_title: str | None = Field(None, alias="call_to_action_title")
    chat_on_messenger_text: str | None = Field(None, alias="chat_on_messenger_text")
    chat_on_whatsapp_text: str | None = Field(None, alias="chat_on_whatsapp_text")
    contact_information_text: str | None = Field(None, alias="contact_information_text")
    creatives_overview_default_text: str | None = Field(
        None, alias="creatives_overview_default_text"
    )
    custom_disclaimer_editor_state: str | None = Field(None, alias="custom_disclaimer_editor_state")
    custom_disclaimer_title: str | None = Field(None, alias="custom_disclaimer_title")
    data_privacy_policy_setting_description: str | None = Field(
        None, alias="data_privacy_policy_setting_description"
    )
    default_appointment_scheduling_inline_context: str | None = Field(
        None, alias="default_appointment_scheduling_inline_context"
    )
    default_disqualified_end_component: dict[str, Any] | None = Field(
        None, alias="default_disqualified_end_component"
    )
    default_thank_you_page: dict[str, Any] | None = Field(None, alias="default_thank_you_page")
    disqualified_thank_you_card_transparency_info_text: str | None = Field(
        None, alias="disqualified_thank_you_card_transparency_info_text"
    )
    edit_text: str | None = Field(None, alias="edit_text")
    email_inline_context_text: str | None = Field(None, alias="email_inline_context_text")
    email_messenger_push_opt_in_disclaimer: str | None = Field(
        None, alias="email_messenger_push_opt_in_disclaimer"
    )
    email_messenger_push_opt_in_transparency_text: str | None = Field(
        None, alias="email_messenger_push_opt_in_transparency_text"
    )
    form_clarity_description_content: str | None = Field(
        None, alias="form_clarity_description_content"
    )
    form_clarity_description_title: str | None = Field(None, alias="form_clarity_description_title")
    form_clarity_headline: str | None = Field(None, alias="form_clarity_headline")
    gated_content_locked_description: str | None = Field(
        None, alias="gated_content_locked_description"
    )
    gated_content_locked_headline: str | None = Field(None, alias="gated_content_locked_headline")
    gated_content_unlocked_description: str | None = Field(
        None, alias="gated_content_unlocked_description"
    )
    gated_content_unlocked_headline: str | None = Field(
        None, alias="gated_content_unlocked_headline"
    )
    how_it_works_section_headers: list[dict[str, str]] | None = Field(
        None, alias="how_it_works_section_headers"
    )
    next_button_text: str | None = Field(None, alias="next_button_text")
    optional_question_text: str | None = Field(None, alias="optional_question_text")
    personal_info_text: str | None = Field(None, alias="personal_info_text")
    phone_number_inline_context_text: str | None = Field(
        None, alias="phone_number_inline_context_text"
    )
    privacy_policy_link_text: str | None = Field(None, alias="privacy_policy_link_text")
    privacy_policy_link_text_for_optional_privacy_policy: str | None = Field(
        None, alias="privacy_policy_link_text_for_optional_privacy_policy"
    )
    privacy_policy_title_section_title_text: str | None = Field(
        None, alias="privacy_policy_title_section_title_text"
    )
    privacy_setting_description: str | None = Field(None, alias="privacy_setting_description")
    products_section_headers: list[dict[str, str]] | None = Field(
        None, alias="products_section_headers"
    )
    qualified_thank_you_card_transparency_info_text: str | None = Field(
        None, alias="qualified_thank_you_card_transparency_info_text"
    )
    redeem_promo_code_text: str | None = Field(None, alias="redeem_promo_code_text")
    return_to_facebook_text: str | None = Field(None, alias="return_to_facebook_text")
    review_your_info_text: str | None = Field(None, alias="review_your_info_text")
    secure_sharing_text: str | None = Field(None, alias="secure_sharing_text")
    secure_sharing_text_for_optional_privacy_policy: str | None = Field(
        None, alias="secure_sharing_text_for_optional_privacy_policy"
    )
    slide_to_submit_text: str | None = Field(None, alias="slide_to_submit_text")
    social_proof_section_headers: list[dict[str, str]] | None = Field(
        None, alias="social_proof_section_headers"
    )
    submit_button_text: str | None = Field(None, alias="submit_button_text")
    view_file_text: str | None = Field(None, alias="view_file_text")
    whats_app_opt_in_body: str | None = Field(None, alias="whats_app_opt_in_body")
    whats_app_opt_in_title: str | None = Field(None, alias="whats_app_opt_in_title")


class LeadgenFormFields(BaseModel):
    """Pydantic model for LeadgenForm fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    allow_organic_lead: bool | None = Field(None, alias="allow_organic_lead")
    block_display_for_non_targeted_viewer: bool | None = Field(
        None, alias="block_display_for_non_targeted_viewer"
    )
    context_card: LeadGenContextCardFields | None = Field(None, alias="context_card")
    created_time: datetime | None = Field(None, alias="created_time")
    creator: UserFields | None = Field(None, alias="creator")
    expired_leads_count: int | None = Field(None, alias="expired_leads_count")
    follow_up_action_text: str | None = Field(None, alias="follow_up_action_text")
    follow_up_action_url: str | None = Field(None, alias="follow_up_action_url")
    id: str | None = Field(None, alias="id")
    is_optimized_for_quality: bool | None = Field(None, alias="is_optimized_for_quality")
    leads_count: int | None = Field(None, alias="leads_count")
    legal_content: LeadGenLegalContentFields | None = Field(None, alias="legal_content")
    locale: str | None = Field(None, alias="locale")
    name: str | None = Field(None, alias="name")
    organic_leads_count: int | None = Field(None, alias="organic_leads_count")
    page: PageFields | None = Field(None, alias="page")
    page_id: str | None = Field(None, alias="page_id")
    privacy_policy_url: str | None = Field(None, alias="privacy_policy_url")
    question_page_custom_headline: str | None = Field(None, alias="question_page_custom_headline")
    questions: list[LeadGenQuestionFields] | None = Field(None, alias="questions")
    status: str | None = Field(None, alias="status")
    thank_you_page: LeadGenThankYouPageFields | None = Field(None, alias="thank_you_page")
    tracking_parameters: list[dict[str, str]] | None = Field(None, alias="tracking_parameters")


class PageThreadOwnerFields(BaseModel):
    """Pydantic model for PageThreadOwner fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    thread_owner: dict[str, Any] | None = Field(None, alias="thread_owner")


class ProductFeedUploadErrorFields(BaseModel):
    """Pydantic model for ProductFeedUploadError fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    affected_surfaces: list[dict[str, Any]] | None = Field(None, alias="affected_surfaces")
    description: str | None = Field(None, alias="description")
    error_type: str | None = Field(None, alias="error_type")
    id: str | None = Field(None, alias="id")
    severity: dict[str, Any] | None = Field(None, alias="severity")
    summary: str | None = Field(None, alias="summary")
    total_count: int | None = Field(None, alias="total_count")


class AdLabelFields(BaseModel):
    """Pydantic model for AdLabel fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account: AdAccountFields | None = Field(None, alias="account")
    created_time: datetime | None = Field(None, alias="created_time")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    updated_time: datetime | None = Field(None, alias="updated_time")


class CalibratorExistingRuleFields(BaseModel):
    """Pydantic model for CalibratorExistingRule fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    field_7d_volume: int | None = Field(None, alias="7d_volume")
    creation_source: str | None = Field(None, alias="creation_source")
    creation_time: datetime | None = Field(None, alias="creation_time")
    creator: str | None = Field(None, alias="creator")
    event_type: str | None = Field(None, alias="event_type")
    id: str | None = Field(None, alias="id")
    rule: str | None = Field(None, alias="rule")
    rule_type: str | None = Field(None, alias="rule_type")
    sample_urls: list[str] | None = Field(None, alias="sample_urls")
    status: str | None = Field(None, alias="status")
    transforms: list[str] | None = Field(None, alias="transforms")


class VideoCopyrightMatchFields(BaseModel):
    """Pydantic model for VideoCopyrightMatch fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    created_date: datetime | None = Field(None, alias="created_date")
    id: str | None = Field(None, alias="id")
    last_modified_user: UserFields | None = Field(None, alias="last_modified_user")
    match_data: list[dict[str, Any]] | None = Field(None, alias="match_data")
    match_status: str | None = Field(None, alias="match_status")
    notes: str | None = Field(None, alias="notes")
    permalink: str | None = Field(None, alias="permalink")
    ugc_content_format: str | None = Field(None, alias="ugc_content_format")


class ProductItemUnitPriceFields(BaseModel):
    """Pydantic model for ProductItemUnitPrice fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pass  # No fields defined


class StoreCatalogSettingsFields(BaseModel):
    """Pydantic model for StoreCatalogSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    page: PageFields | None = Field(None, alias="page")


class PartnerAccountLinkingFields(BaseModel):
    """Pydantic model for PartnerAccountLinking fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adaccount: AdAccountFields | None = Field(None, alias="adaccount")
    app: ApplicationFields | None = Field(None, alias="app")
    business: BusinessFields | None = Field(None, alias="business")
    externalidentifier: str | None = Field(None, alias="externalidentifier")
    externalidentifieruri: str | None = Field(None, alias="externalidentifieruri")
    id: str | None = Field(None, alias="id")
    partnername: str | None = Field(None, alias="partnername")
    pixel: str | None = Field(None, alias="pixel")


class CommerceOrderTransactionDetailFields(BaseModel):
    """Pydantic model for CommerceOrderTransactionDetail fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    merchant_order_id: str | None = Field(None, alias="merchant_order_id")
    net_payment_amount: dict[str, Any] | None = Field(None, alias="net_payment_amount")
    order_created: str | None = Field(None, alias="order_created")
    order_details: CommerceOrderFields | None = Field(None, alias="order_details")
    order_id: str | None = Field(None, alias="order_id")
    payout_reference_id: str | None = Field(None, alias="payout_reference_id")
    postal_code: str | None = Field(None, alias="postal_code")
    processing_fee: dict[str, Any] | None = Field(None, alias="processing_fee")
    state: str | None = Field(None, alias="state")
    tax_rate: str | None = Field(None, alias="tax_rate")
    transaction_date: str | None = Field(None, alias="transaction_date")
    transaction_type: str | None = Field(None, alias="transaction_type")
    transfer_id: str | None = Field(None, alias="transfer_id")


class WebsiteCreativeAssetSourceFields(BaseModel):
    """Pydantic model for WebsiteCreativeAssetSource fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    source_url: str | None = Field(None, alias="source_url")


class MinimumBudgetFields(BaseModel):
    """Pydantic model for MinimumBudget fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    currency: str | None = Field(None, alias="currency")
    min_daily_budget_high_freq: int | None = Field(None, alias="min_daily_budget_high_freq")
    min_daily_budget_imp: int | None = Field(None, alias="min_daily_budget_imp")
    min_daily_budget_low_freq: int | None = Field(None, alias="min_daily_budget_low_freq")
    min_daily_budget_video_views: int | None = Field(None, alias="min_daily_budget_video_views")


class LeadGenThankYouPageGatedPromoFields(BaseModel):
    """Pydantic model for LeadGenThankYouPageGatedPromo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    online_offer_url: str | None = Field(None, alias="online_offer_url")
    online_promo_code: str | None = Field(None, alias="online_promo_code")


class PlaceFields(BaseModel):
    """Pydantic model for Place fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    location: LocationFields | None = Field(None, alias="location")
    name: str | None = Field(None, alias="name")
    overall_rating: float | None = Field(None, alias="overall_rating")


class AdCreativeInteractiveComponentsSpecFields(BaseModel):
    """Pydantic model for AdCreativeInteractiveComponentsSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    child_attachments: list[dict[str, Any]] | None = Field(None, alias="child_attachments")
    components: list[dict[str, Any]] | None = Field(None, alias="components")


class WoodhengeSupporterFields(BaseModel):
    """Pydantic model for WoodhengeSupporter fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    creation_time: datetime | None = Field(None, alias="creation_time")
    id: str | None = Field(None, alias="id")
    is_gifted_subscription: bool | None = Field(None, alias="is_gifted_subscription")
    most_recent_subscription_time: datetime | None = Field(
        None, alias="most_recent_subscription_time"
    )
    number_of_months_subscribed: int | None = Field(None, alias="number_of_months_subscribed")
    user: UserFields | None = Field(None, alias="user")


class BusinessMediaAdPlacementValidationResultFields(BaseModel):
    """Pydantic model for BusinessMediaAdPlacementValidationResult fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_placement: str | None = Field(None, alias="ad_placement")
    ad_placement_label: str | None = Field(None, alias="ad_placement_label")
    error_messages: list[str] | None = Field(None, alias="error_messages")
    is_valid: bool | None = Field(None, alias="is_valid")


class FundraiserPersonToCharityFields(BaseModel):
    """Pydantic model for FundraiserPersonToCharity fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    amount_raised: int | None = Field(None, alias="amount_raised")
    charity_id: str | None = Field(None, alias="charity_id")
    currency: str | None = Field(None, alias="currency")
    description: str | None = Field(None, alias="description")
    donations_count: int | None = Field(None, alias="donations_count")
    donors_count: int | None = Field(None, alias="donors_count")
    end_time: datetime | None = Field(None, alias="end_time")
    external_amount_raised: int | None = Field(None, alias="external_amount_raised")
    external_donations_count: int | None = Field(None, alias="external_donations_count")
    external_donors_count: int | None = Field(None, alias="external_donors_count")
    external_event_name: str | None = Field(None, alias="external_event_name")
    external_event_start_time: datetime | None = Field(None, alias="external_event_start_time")
    external_event_uri: str | None = Field(None, alias="external_event_uri")
    external_fundraiser_uri: str | None = Field(None, alias="external_fundraiser_uri")
    external_id: str | None = Field(None, alias="external_id")
    goal_amount: int | None = Field(None, alias="goal_amount")
    id: str | None = Field(None, alias="id")
    internal_amount_raised: int | None = Field(None, alias="internal_amount_raised")
    internal_donations_count: int | None = Field(None, alias="internal_donations_count")
    internal_donors_count: int | None = Field(None, alias="internal_donors_count")
    name: str | None = Field(None, alias="name")
    uri: str | None = Field(None, alias="uri")


class ShadowIGUserCatalogProductVariantFields(BaseModel):
    """Pydantic model for ShadowIGUserCatalogProductVariant fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    product_id: int | None = Field(None, alias="product_id")
    variant_name: str | None = Field(None, alias="variant_name")


class IGBoostMediaAdFields(BaseModel):
    """Pydantic model for IGBoostMediaAd fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_id: str | None = Field(None, alias="ad_id")
    ad_status: str | None = Field(None, alias="ad_status")


class OrganizationFields(BaseModel):
    """Pydantic model for Organization fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    legal_entity_name: str | None = Field(None, alias="legal_entity_name")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")


class AdAccountBankInfoListFields(BaseModel):
    """Pydantic model for AdAccountBankInfoList fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    banks: list[dict[str, Any]] | None = Field(None, alias="banks")


class CPASCollaborationRequestFields(BaseModel):
    """Pydantic model for CPASCollaborationRequest fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    brands: list[str] | None = Field(None, alias="brands")
    contact_email: str | None = Field(None, alias="contact_email")
    contact_first_name: str | None = Field(None, alias="contact_first_name")
    contact_last_name: str | None = Field(None, alias="contact_last_name")
    id: str | None = Field(None, alias="id")
    phone_number: str | None = Field(None, alias="phone_number")
    receiver_business: BusinessFields | None = Field(None, alias="receiver_business")
    requester_agency_or_brand: str | None = Field(None, alias="requester_agency_or_brand")
    sender_client_business: BusinessFields | None = Field(None, alias="sender_client_business")
    status: str | None = Field(None, alias="status")


class BroadTargetingCategoriesFields(BaseModel):
    """Pydantic model for BroadTargetingCategories fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    category_description: str | None = Field(None, alias="category_description")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    parent_category: str | None = Field(None, alias="parent_category")
    path: list[str] | None = Field(None, alias="path")
    size_lower_bound: int | None = Field(None, alias="size_lower_bound")
    size_upper_bound: int | None = Field(None, alias="size_upper_bound")
    source: str | None = Field(None, alias="source")
    type: int | None = Field(None, alias="type")
    type_name: str | None = Field(None, alias="type_name")
    untranslated_name: str | None = Field(None, alias="untranslated_name")
    untranslated_parent_name: str | None = Field(None, alias="untranslated_parent_name")


class VideoStatsFields(BaseModel):
    """Pydantic model for VideoStats fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    aggregate: list[dict[str, dict[str, Any]]] | None = Field(None, alias="aggregate")
    error: str | None = Field(None, alias="error")
    metadata: list[dict[str, dict[str, Any]]] | None = Field(None, alias="metadata")
    time_series: list[dict[str, list[dict[str, Any]]]] | None = Field(None, alias="time_series")
    totals: list[dict[str, dict[str, Any]]] | None = Field(None, alias="totals")
    x_axis_breakdown: list[list[dict[str, dict[str, Any]]]] | None = Field(
        None, alias="x_axis_breakdown"
    )


class ConversionHealthKPIFields(BaseModel):
    """Pydantic model for ConversionHealthKPI fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    health_indicator: str | None = Field(None, alias="health_indicator")
    impacted_browsers_match_rate: float | None = Field(None, alias="impacted_browsers_match_rate")
    impacted_browsers_match_rate_mom_trend: float | None = Field(
        None, alias="impacted_browsers_match_rate_mom_trend"
    )
    impacted_browsers_traffic_share: float | None = Field(
        None, alias="impacted_browsers_traffic_share"
    )
    impacted_browsers_traffic_share_mom_trend: float | None = Field(
        None, alias="impacted_browsers_traffic_share_mom_trend"
    )
    match_rate: float | None = Field(None, alias="match_rate")
    match_rate_mom_trend: float | None = Field(None, alias="match_rate_mom_trend")
    match_rate_vertical_benchmark: float | None = Field(None, alias="match_rate_vertical_benchmark")
    match_rate_vs_benchmark_mom_trend: float | None = Field(
        None, alias="match_rate_vs_benchmark_mom_trend"
    )


class PagePostFields(BaseModel):
    """Pydantic model for PagePost fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    actions: dict[str, Any] | None = Field(None, alias="actions")
    admin_creator: dict[str, Any] | None = Field(None, alias="admin_creator")
    allowed_advertising_objectives: list[str] | None = Field(
        None, alias="allowed_advertising_objectives"
    )
    application: ApplicationFields | None = Field(None, alias="application")
    backdated_time: datetime | None = Field(None, alias="backdated_time")
    call_to_action: dict[str, Any] | None = Field(None, alias="call_to_action")
    can_reply_privately: bool | None = Field(None, alias="can_reply_privately")
    child_attachments: dict[str, Any] | None = Field(None, alias="child_attachments")
    comments_mirroring_domain: str | None = Field(None, alias="comments_mirroring_domain")
    coordinates: dict[str, Any] | None = Field(None, alias="coordinates")
    created_time: datetime | None = Field(None, alias="created_time")
    event: EventFields | None = Field(None, alias="event")
    expanded_height: int | None = Field(None, alias="expanded_height")
    expanded_width: int | None = Field(None, alias="expanded_width")
    feed_targeting: dict[str, Any] | None = Field(None, alias="feed_targeting")
    from_: dict[str, Any] | None = Field(None, alias="from")
    full_picture: str | None = Field(None, alias="full_picture")
    height: int | None = Field(None, alias="height")
    icon: str | None = Field(None, alias="icon")
    id: str | None = Field(None, alias="id")
    instagram_eligibility: str | None = Field(None, alias="instagram_eligibility")
    is_app_share: bool | None = Field(None, alias="is_app_share")
    is_eligible_for_promotion: bool | None = Field(None, alias="is_eligible_for_promotion")
    is_expired: bool | None = Field(None, alias="is_expired")
    is_hidden: bool | None = Field(None, alias="is_hidden")
    is_inline_created: bool | None = Field(None, alias="is_inline_created")
    is_instagram_eligible: bool | None = Field(None, alias="is_instagram_eligible")
    is_popular: bool | None = Field(None, alias="is_popular")
    is_published: bool | None = Field(None, alias="is_published")
    is_spherical: bool | None = Field(None, alias="is_spherical")
    message: str | None = Field(None, alias="message")
    message_tags: dict[str, Any] | None = Field(None, alias="message_tags")
    multi_share_end_card: bool | None = Field(None, alias="multi_share_end_card")
    multi_share_optimized: bool | None = Field(None, alias="multi_share_optimized")
    parent_id: str | None = Field(None, alias="parent_id")
    permalink_url: str | None = Field(None, alias="permalink_url")
    picture: str | None = Field(None, alias="picture")
    place: PlaceFields | None = Field(None, alias="place")
    privacy: PrivacyFields | None = Field(None, alias="privacy")
    promotable_id: str | None = Field(None, alias="promotable_id")
    promotion_status: str | None = Field(None, alias="promotion_status")
    properties: dict[str, Any] | None = Field(None, alias="properties")
    scheduled_publish_time: float | None = Field(None, alias="scheduled_publish_time")
    shares: dict[str, Any] | None = Field(None, alias="shares")
    status_type: str | None = Field(None, alias="status_type")
    story: str | None = Field(None, alias="story")
    story_tags: dict[str, Any] | None = Field(None, alias="story_tags")
    subscribed: bool | None = Field(None, alias="subscribed")
    target: ProfileFields | None = Field(None, alias="target")
    targeting: dict[str, Any] | None = Field(None, alias="targeting")
    timeline_visibility: str | None = Field(None, alias="timeline_visibility")
    updated_time: datetime | None = Field(None, alias="updated_time")
    via: dict[str, Any] | None = Field(None, alias="via")
    video_buying_eligibility: list[str] | None = Field(None, alias="video_buying_eligibility")
    width: int | None = Field(None, alias="width")


class AnalyticsConfigFields(BaseModel):
    """Pydantic model for AnalyticsConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    analytics_access_for_authorized_ad_account: bool | None = Field(
        None, alias="analytics_access_for_authorized_ad_account"
    )
    breakdowns_config: list[dict[str, Any]] | None = Field(None, alias="breakdowns_config")
    builtin_fields_config: list[dict[str, Any]] | None = Field(None, alias="builtin_fields_config")
    deprecated_events_config: list[dict[str, Any]] | None = Field(
        None, alias="deprecated_events_config"
    )
    events_config: list[dict[str, Any]] | None = Field(None, alias="events_config")
    ios_purchase_validation_secret: str | None = Field(None, alias="ios_purchase_validation_secret")
    is_any_role_able_to_see_restricted_insights: bool | None = Field(
        None, alias="is_any_role_able_to_see_restricted_insights"
    )
    is_implicit_purchase_logging_on_android_supported: bool | None = Field(
        None, alias="is_implicit_purchase_logging_on_android_supported"
    )
    is_implicit_purchase_logging_on_ios_supported: bool | None = Field(
        None, alias="is_implicit_purchase_logging_on_ios_supported"
    )
    is_track_ios_app_uninstall_supported: bool | None = Field(
        None, alias="is_track_ios_app_uninstall_supported"
    )
    journey_backfill_status: str | None = Field(None, alias="journey_backfill_status")
    journey_conversion_events: list[str] | None = Field(None, alias="journey_conversion_events")
    journey_enabled: bool | None = Field(None, alias="journey_enabled")
    journey_impacting_change_time: datetime | None = Field(
        None, alias="journey_impacting_change_time"
    )
    journey_timeout: str | None = Field(None, alias="journey_timeout")
    latest_sdk_versions: dict[str, str] | None = Field(None, alias="latest_sdk_versions")
    log_android_implicit_purchase_events: bool | None = Field(
        None, alias="log_android_implicit_purchase_events"
    )
    log_automatic_analytics_events: bool | None = Field(
        None, alias="log_automatic_analytics_events"
    )
    log_implicit_purchase_events: bool | None = Field(None, alias="log_implicit_purchase_events")
    prev_journey_conversion_events: list[str] | None = Field(
        None, alias="prev_journey_conversion_events"
    )
    query_approximation_accuracy_level: str | None = Field(
        None, alias="query_approximation_accuracy_level"
    )
    query_currency: str | None = Field(None, alias="query_currency")
    query_timezone: str | None = Field(None, alias="query_timezone")
    recent_events_update_time: datetime | None = Field(None, alias="recent_events_update_time")
    session_timeout_interval: int | None = Field(None, alias="session_timeout_interval")
    track_ios_app_uninstall: bool | None = Field(None, alias="track_ios_app_uninstall")


class WindowsPhoneAppLinkFields(BaseModel):
    """Pydantic model for WindowsPhoneAppLink fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app_id: str | None = Field(None, alias="app_id")
    app_name: str | None = Field(None, alias="app_name")
    url: str | None = Field(None, alias="url")


class AdCampaignPacedBidInfoFields(BaseModel):
    """Pydantic model for AdCampaignPacedBidInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    bidding_status: str | None = Field(None, alias="bidding_status")


class UserAvailableCatalogsFields(BaseModel):
    """Pydantic model for UserAvailableCatalogs fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    catalog_id: str | None = Field(None, alias="catalog_id")
    catalog_name: str | None = Field(None, alias="catalog_name")
    product_count: int | None = Field(None, alias="product_count")
    shop_name: str | None = Field(None, alias="shop_name")


class TimezoneOffsetFields(BaseModel):
    """Pydantic model for TimezoneOffset fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    abbr: str | None = Field(None, alias="abbr")
    isdst: bool | None = Field(None, alias="isdst")
    offset: int | None = Field(None, alias="offset")
    time: str | None = Field(None, alias="time")
    ts: int | None = Field(None, alias="ts")


class JobOpeningFields(BaseModel):
    """Pydantic model for JobOpening fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    address: str | None = Field(None, alias="address")
    application_callback_url: str | None = Field(None, alias="application_callback_url")
    created_time: datetime | None = Field(None, alias="created_time")
    description: str | None = Field(None, alias="description")
    errors: list[str] | None = Field(None, alias="errors")
    external_company_facebook_url: str | None = Field(None, alias="external_company_facebook_url")
    external_company_full_address: str | None = Field(None, alias="external_company_full_address")
    external_company_id: str | None = Field(None, alias="external_company_id")
    external_company_name: str | None = Field(None, alias="external_company_name")
    external_id: str | None = Field(None, alias="external_id")
    id: str | None = Field(None, alias="id")
    job_status: dict[str, Any] | None = Field(None, alias="job_status")
    latitude: float | None = Field(None, alias="latitude")
    longitude: float | None = Field(None, alias="longitude")
    offsite_application_url: str | None = Field(None, alias="offsite_application_url")
    page: PageFields | None = Field(None, alias="page")
    photo: PhotoFields | None = Field(None, alias="photo")
    platform_review_status: dict[str, Any] | None = Field(None, alias="platform_review_status")
    post: PostFields | None = Field(None, alias="post")
    remote_type: str | None = Field(None, alias="remote_type")
    review_rejection_reasons: list[dict[str, Any]] | None = Field(
        None, alias="review_rejection_reasons"
    )
    title: str | None = Field(None, alias="title")
    type: dict[str, Any] | None = Field(None, alias="type")


class VoipInfoFields(BaseModel):
    """Pydantic model for VoipInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    has_mobile_app: bool | None = Field(None, alias="has_mobile_app")
    has_permission: bool | None = Field(None, alias="has_permission")
    is_callable: bool | None = Field(None, alias="is_callable")
    is_callable_webrtc: bool | None = Field(None, alias="is_callable_webrtc")
    is_pushable: bool | None = Field(None, alias="is_pushable")
    reason_code: int | None = Field(None, alias="reason_code")
    reason_description: str | None = Field(None, alias="reason_description")


class ExtendedCreditAllocationConfigFields(BaseModel):
    """Pydantic model for ExtendedCreditAllocationConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    currency_amount: CurrencyAmountFields | None = Field(None, alias="currency_amount")
    id: str | None = Field(None, alias="id")
    liability_type: str | None = Field(None, alias="liability_type")
    owning_business: BusinessFields | None = Field(None, alias="owning_business")
    owning_credential: ExtendedCreditFields | None = Field(None, alias="owning_credential")
    partition_type: str | None = Field(None, alias="partition_type")
    receiving_business: BusinessFields | None = Field(None, alias="receiving_business")
    receiving_credential: ExtendedCreditFields | None = Field(None, alias="receiving_credential")
    request_status: str | None = Field(None, alias="request_status")
    send_bill_to: str | None = Field(None, alias="send_bill_to")


class AdCreativeFacebookBrandedContentFields(BaseModel):
    """Pydantic model for AdCreativeFacebookBrandedContent fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    shared_to_sponsor_status: str | None = Field(None, alias="shared_to_sponsor_status")
    sponsor_page_id: str | None = Field(None, alias="sponsor_page_id")
    sponsor_relationship: str | None = Field(None, alias="sponsor_relationship")


class AdsUserSettingsFields(BaseModel):
    """Pydantic model for AdsUserSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    a_plus_c_survey_seen: bool | None = Field(None, alias="a_plus_c_survey_seen")
    add_overlays_opt_in_status: str | None = Field(None, alias="add_overlays_opt_in_status")
    adgroup_name_template: dict[str, Any] | None = Field(None, alias="adgroup_name_template")
    ads_cs_catalog_opt_out_timestamp: list[dict[str, int]] | None = Field(
        None, alias="ads_cs_catalog_opt_out_timestamp"
    )
    ads_tool_visits: list[dict[str, Any]] | None = Field(None, alias="ads_tool_visits")
    aplusc_carousel_cda_opt_in_status: str | None = Field(
        None, alias="aplusc_carousel_cda_opt_in_status"
    )
    aplusc_carousel_inline_comment_opt_in_status: str | None = Field(
        None, alias="aplusc_carousel_inline_comment_opt_in_status"
    )
    aplusc_enhance_cta_opt_in_status: str | None = Field(
        None, alias="aplusc_enhance_cta_opt_in_status"
    )
    aplusc_epa_opt_in_status: str | None = Field(None, alias="aplusc_epa_opt_in_status")
    aplusc_local_store_extension_opt_in_status: str | None = Field(
        None, alias="aplusc_local_store_extension_opt_in_status"
    )
    aplusc_opt_out_friction: list[str] | None = Field(None, alias="aplusc_opt_out_friction")
    aplusc_videofilter_opt_in_status: str | None = Field(
        None, alias="aplusc_videofilter_opt_in_status"
    )
    aplusc_videouncrop_opt_in_status: str | None = Field(
        None, alias="aplusc_videouncrop_opt_in_status"
    )
    autoflow_lite_opt_in_status: str | None = Field(None, alias="autoflow_lite_opt_in_status")
    autoflow_lite_should_opt_in: bool | None = Field(None, alias="autoflow_lite_should_opt_in")
    blended_ads_creation_defaulting_opt_in_status: str | None = Field(
        None, alias="blended_ads_creation_defaulting_opt_in_status"
    )
    blended_ads_creation_defaulting_opt_out_campaign_group_ids: list[int] | None = Field(
        None, alias="blended_ads_creation_defaulting_opt_out_campaign_group_ids"
    )
    bookmarked_pages: list[PageFields] | None = Field(None, alias="bookmarked_pages")
    campaign_group_name_template: dict[str, Any] | None = Field(
        None, alias="campaign_group_name_template"
    )
    campaign_name_template: dict[str, Any] | None = Field(None, alias="campaign_name_template")
    carousel_to_video_opt_in_status: str | None = Field(
        None, alias="carousel_to_video_opt_in_status"
    )
    connected_sources_catalog_opt_in_status: str | None = Field(
        None, alias="connected_sources_catalog_opt_in_status"
    )
    da_add_overlays_opt_in_status: str | None = Field(None, alias="da_add_overlays_opt_in_status")
    da_hide_price_opt_in_status: str | None = Field(None, alias="da_hide_price_opt_in_status")
    default_creation_mode: str | None = Field(None, alias="default_creation_mode")
    dynamic_partnership_ads_opt_in_status: str | None = Field(
        None, alias="dynamic_partnership_ads_opt_in_status"
    )
    enhance_cta_text_extraction_opt_in_status: str | None = Field(
        None, alias="enhance_cta_text_extraction_opt_in_status"
    )
    export_format_default: str | None = Field(None, alias="export_format_default")
    focus_mode_default: str | None = Field(None, alias="focus_mode_default")
    gen_ai_alpha_test_status: int | None = Field(None, alias="gen_ai_alpha_test_status")
    id: str | None = Field(None, alias="id")
    image_background_generation_opt_in_status: str | None = Field(
        None, alias="image_background_generation_opt_in_status"
    )
    image_brightness_and_contrast_opt_in_status: str | None = Field(
        None, alias="image_brightness_and_contrast_opt_in_status"
    )
    image_expansion_opt_in_status: str | None = Field(None, alias="image_expansion_opt_in_status")
    is_ads_ai_consented: bool | None = Field(None, alias="is_ads_ai_consented")
    is_cbo_default_on: bool | None = Field(None, alias="is_cbo_default_on")
    is_se_removal_guidance_dismissed: bool | None = Field(
        None, alias="is_se_removal_guidance_dismissed"
    )
    last_used_post_format: str | None = Field(None, alias="last_used_post_format")
    last_visited_time: datetime | None = Field(None, alias="last_visited_time")
    metadata_brand_kit_opt_in_status: str | None = Field(
        None, alias="metadata_brand_kit_opt_in_status"
    )
    music_on_reels_opt_in: list[dict[str, str]] | None = Field(None, alias="music_on_reels_opt_in")
    muted_cbo_midflight_education_messages: list[str] | None = Field(
        None, alias="muted_cbo_midflight_education_messages"
    )
    onsite_destination_optimization_opt_in: str | None = Field(
        None, alias="onsite_destination_optimization_opt_in"
    )
    open_tabs: list[str] | None = Field(None, alias="open_tabs")
    pac_relaxation_opt_in_status: str | None = Field(None, alias="pac_relaxation_opt_in_status")
    placement_group_square_opt_in_status: str | None = Field(
        None, alias="placement_group_square_opt_in_status"
    )
    placement_group_vertical_opt_in_status: str | None = Field(
        None, alias="placement_group_vertical_opt_in_status"
    )
    previously_seen_recommendations: list[str] | None = Field(
        None, alias="previously_seen_recommendations"
    )
    product_extensions_opt_in: str | None = Field(None, alias="product_extensions_opt_in")
    sa_off_conv_loc_seen: str | None = Field(None, alias="sa_off_conv_loc_seen")
    saoff_published_l2_conv_loc_seen: str | None = Field(
        None, alias="saoff_published_l2_conv_loc_seen"
    )
    saon_migr_l1_seen_status: str | None = Field(None, alias="saon_migr_l1_seen_status")
    selected_ad_account: AdAccountFields | None = Field(None, alias="selected_ad_account")
    selected_comparison_timerange: dict[str, Any] | None = Field(
        None, alias="selected_comparison_timerange"
    )
    selected_metric_cic: str | None = Field(None, alias="selected_metric_cic")
    selected_metrics_cic: list[str] | None = Field(None, alias="selected_metrics_cic")
    selected_page: PageFields | None = Field(None, alias="selected_page")
    selected_page_section: str | None = Field(None, alias="selected_page_section")
    selected_power_editor_pane: str | None = Field(None, alias="selected_power_editor_pane")
    selected_stat_range: dict[str, Any] | None = Field(None, alias="selected_stat_range")
    should_export_filter_empty_cols: str | None = Field(
        None, alias="should_export_filter_empty_cols"
    )
    should_export_rows_without_unsupported_feature: str | None = Field(
        None, alias="should_export_rows_without_unsupported_feature"
    )
    should_not_auto_expand_tree_table: bool | None = Field(
        None, alias="should_not_auto_expand_tree_table"
    )
    should_not_show_cbo_campaign_toggle_off_confirmation_message: bool | None = Field(
        None, alias="should_not_show_cbo_campaign_toggle_off_confirmation_message"
    )
    should_not_show_publish_message_on_editor_close: bool | None = Field(
        None, alias="should_not_show_publish_message_on_editor_close"
    )
    show_original_videos_opt_in: str | None = Field(None, alias="show_original_videos_opt_in")
    static_ad_product_extensions_opt_in: str | None = Field(
        None, alias="static_ad_product_extensions_opt_in"
    )
    sticky_setting_after_default_on: str | None = Field(
        None, alias="sticky_setting_after_default_on"
    )
    syd_campaign_trends_metric: str | None = Field(None, alias="syd_campaign_trends_metric")
    text_optimizations_text_extraction_opt_in_status: str | None = Field(
        None, alias="text_optimizations_text_extraction_opt_in_status"
    )
    text_translation_opt_in_status: str | None = Field(None, alias="text_translation_opt_in_status")
    text_variations_sticky_opt_in_status: str | None = Field(
        None, alias="text_variations_sticky_opt_in_status"
    )
    total_coupon_syd_dismissals: int | None = Field(None, alias="total_coupon_syd_dismissals")
    total_coupon_upsell_dismissals: int | None = Field(None, alias="total_coupon_upsell_dismissals")
    url_prefill_removal_timestamp: int | None = Field(None, alias="url_prefill_removal_timestamp")
    use_pe_create_flow: bool | None = Field(None, alias="use_pe_create_flow")
    use_stepper_primary_entry: bool | None = Field(None, alias="use_stepper_primary_entry")
    user: UserFields | None = Field(None, alias="user")


class HotelFields(BaseModel):
    """Pydantic model for Hotel fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    address: str | None = Field(None, alias="address")
    applinks: CatalogItemAppLinksFields | None = Field(None, alias="applinks")
    brand: str | None = Field(None, alias="brand")
    category: str | None = Field(None, alias="category")
    category_specific_fields: CatalogSubVerticalListFields | None = Field(
        None, alias="category_specific_fields"
    )
    currency: str | None = Field(None, alias="currency")
    custom_label_0: str | None = Field(None, alias="custom_label_0")
    custom_label_1: str | None = Field(None, alias="custom_label_1")
    custom_label_2: str | None = Field(None, alias="custom_label_2")
    custom_label_3: str | None = Field(None, alias="custom_label_3")
    custom_label_4: str | None = Field(None, alias="custom_label_4")
    custom_number_0: int | None = Field(None, alias="custom_number_0")
    custom_number_1: int | None = Field(None, alias="custom_number_1")
    custom_number_2: int | None = Field(None, alias="custom_number_2")
    custom_number_3: int | None = Field(None, alias="custom_number_3")
    custom_number_4: int | None = Field(None, alias="custom_number_4")
    description: str | None = Field(None, alias="description")
    guest_ratings: str | None = Field(None, alias="guest_ratings")
    hotel_id: str | None = Field(None, alias="hotel_id")
    id: str | None = Field(None, alias="id")
    image_fetch_status: dict[str, Any] | None = Field(None, alias="image_fetch_status")
    images: list[str] | None = Field(None, alias="images")
    lowest_base_price: str | None = Field(None, alias="lowest_base_price")
    loyalty_program: str | None = Field(None, alias="loyalty_program")
    margin_level: int | None = Field(None, alias="margin_level")
    name: str | None = Field(None, alias="name")
    phone: str | None = Field(None, alias="phone")
    product_priority_0: float | None = Field(None, alias="product_priority_0")
    product_priority_1: float | None = Field(None, alias="product_priority_1")
    product_priority_2: float | None = Field(None, alias="product_priority_2")
    product_priority_3: float | None = Field(None, alias="product_priority_3")
    product_priority_4: float | None = Field(None, alias="product_priority_4")
    sale_price: str | None = Field(None, alias="sale_price")
    sanitized_images: list[str] | None = Field(None, alias="sanitized_images")
    star_rating: float | None = Field(None, alias="star_rating")
    tags: list[str] | None = Field(None, alias="tags")
    unit_price: dict[str, Any] | None = Field(None, alias="unit_price")
    url: str | None = Field(None, alias="url")
    visibility: dict[str, Any] | None = Field(None, alias="visibility")


class EntWithSponsorFields(BaseModel):
    """Pydantic model for EntWithSponsor fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    owner_linked_instagram_user_v1_id: str | None = Field(
        None, alias="owner_linked_instagram_user_v1_id"
    )
    owner_picture: str | None = Field(None, alias="owner_picture")
    post_id: str | None = Field(None, alias="post_id")
    post_info: PostFields | None = Field(None, alias="post_info")


class AdsTargetingInsightsFields(BaseModel):
    """Pydantic model for AdsTargetingInsights fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    audience_size: int | None = Field(None, alias="audience_size")
    clicks: int | None = Field(None, alias="clicks")
    conversion_cost: float | None = Field(None, alias="conversion_cost")
    conversions: int | None = Field(None, alias="conversions")
    description: str | None = Field(None, alias="description")
    id: str | None = Field(None, alias="id")
    impressions: str | None = Field(None, alias="impressions")
    name: str | None = Field(None, alias="name")
    revenue: float | None = Field(None, alias="revenue")
    spend: float | None = Field(None, alias="spend")
    type: str | None = Field(None, alias="type")


class BusinessVideoTBusinessFolderPathItemFields(BaseModel):
    """Pydantic model for BusinessVideoTBusinessFolderPathItem fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    parent_folder_id: str | None = Field(None, alias="parent_folder_id")
    type: str | None = Field(None, alias="type")


class CreativeHistoryFields(BaseModel):
    """Pydantic model for CreativeHistory fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    creative_fingerprint: int | None = Field(None, alias="creative_fingerprint")
    time_ranges: list[dict[str, Any]] | None = Field(None, alias="time_ranges")


class McomInvoiceDetailsFields(BaseModel):
    """Pydantic model for McomInvoiceDetails fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    additional_amounts: list[dict[str, Any]] | None = Field(None, alias="additional_amounts")
    buyer_notes: str | None = Field(None, alias="buyer_notes")
    currency_amount: dict[str, Any] | None = Field(None, alias="currency_amount")
    external_invoice_id: str | None = Field(None, alias="external_invoice_id")
    features: dict[str, Any] | None = Field(None, alias="features")
    invoice_created: int | None = Field(None, alias="invoice_created")
    invoice_id: str | None = Field(None, alias="invoice_id")
    invoice_instructions: str | None = Field(None, alias="invoice_instructions")
    invoice_instructions_image_url: str | None = Field(None, alias="invoice_instructions_image_url")
    invoice_updated: int | None = Field(None, alias="invoice_updated")
    outstanding_amount: dict[str, Any] | None = Field(None, alias="outstanding_amount")
    paid_amount: dict[str, Any] | None = Field(None, alias="paid_amount")
    payments: list[dict[str, Any]] | None = Field(None, alias="payments")
    platform_logo_url: str | None = Field(None, alias="platform_logo_url")
    platform_name: str | None = Field(None, alias="platform_name")
    product_items: list[dict[str, Any]] | None = Field(None, alias="product_items")
    shipping_address: dict[str, Any] | None = Field(None, alias="shipping_address")
    status: str | None = Field(None, alias="status")
    tracking_info: dict[str, Any] | None = Field(None, alias="tracking_info")


class WhatsAppBusinessPreVerifiedPhoneNumberFields(BaseModel):
    """Pydantic model for WhatsAppBusinessPreVerifiedPhoneNumber fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    code_verification_status: dict[str, Any] | None = Field(None, alias="code_verification_status")
    code_verification_time: datetime | None = Field(None, alias="code_verification_time")
    id: str | None = Field(None, alias="id")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")
    phone_number: str | None = Field(None, alias="phone_number")
    verification_expiry_time: datetime | None = Field(None, alias="verification_expiry_time")


class AdCreativeLinkDataFields(BaseModel):
    """Pydantic model for AdCreativeLinkData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_context: str | None = Field(None, alias="ad_context")
    additional_image_index: int | None = Field(None, alias="additional_image_index")
    app_link_spec: AdCreativeLinkDataAppLinkSpecFields | None = Field(None, alias="app_link_spec")
    attachment_style: str | None = Field(None, alias="attachment_style")
    automated_product_tags: bool | None = Field(None, alias="automated_product_tags")
    boosted_product_set_id: str | None = Field(None, alias="boosted_product_set_id")
    branded_content_shared_to_sponsor_status: str | None = Field(
        None, alias="branded_content_shared_to_sponsor_status"
    )
    branded_content_sponsor_page_id: str | None = Field(
        None, alias="branded_content_sponsor_page_id"
    )
    call_to_action: AdCreativeLinkDataCallToActionFields | None = Field(
        None, alias="call_to_action"
    )
    caption: str | None = Field(None, alias="caption")
    child_attachments: list[AdCreativeLinkDataChildAttachmentFields] | None = Field(
        None, alias="child_attachments"
    )
    collection_thumbnails: list[AdCreativeCollectionThumbnailInfoFields] | None = Field(
        None, alias="collection_thumbnails"
    )
    customization_rules_spec: list[AdCustomizationRuleSpecFields] | None = Field(
        None, alias="customization_rules_spec"
    )
    description: str | None = Field(None, alias="description")
    event_id: str | None = Field(None, alias="event_id")
    force_single_link: bool | None = Field(None, alias="force_single_link")
    format_option: dict[str, Any] | None = Field(None, alias="format_option")
    image_crops: AdsImageCropsFields | None = Field(None, alias="image_crops")
    image_hash: str | None = Field(None, alias="image_hash")
    image_layer_specs: list[AdCreativeLinkDataImageLayerSpecFields] | None = Field(
        None, alias="image_layer_specs"
    )
    image_overlay_spec: AdCreativeLinkDataImageOverlaySpecFields | None = Field(
        None, alias="image_overlay_spec"
    )
    link: str | None = Field(None, alias="link")
    message: str | None = Field(None, alias="message")
    multi_share_end_card: bool | None = Field(None, alias="multi_share_end_card")
    multi_share_optimized: bool | None = Field(None, alias="multi_share_optimized")
    name: str | None = Field(None, alias="name")
    offer_id: str | None = Field(None, alias="offer_id")
    page_welcome_message: str | None = Field(None, alias="page_welcome_message")
    picture: str | None = Field(None, alias="picture")
    post_click_configuration: AdCreativePostClickConfigurationFields | None = Field(
        None, alias="post_click_configuration"
    )
    preferred_image_tags: list[str] | None = Field(None, alias="preferred_image_tags")
    preferred_video_tags: list[str] | None = Field(None, alias="preferred_video_tags")
    retailer_item_ids: list[str] | None = Field(None, alias="retailer_item_ids")
    show_multiple_images: bool | None = Field(None, alias="show_multiple_images")
    static_fallback_spec: AdCreativeStaticFallbackSpecFields | None = Field(
        None, alias="static_fallback_spec"
    )
    use_flexible_image_aspect_ratio: bool | None = Field(
        None, alias="use_flexible_image_aspect_ratio"
    )


class WifiInformationFields(BaseModel):
    """Pydantic model for WifiInformation fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    network_access_type: str | None = Field(None, alias="network_access_type")


class AdAccountPrepayDetailsFields(BaseModel):
    """Pydantic model for AdAccountPrepayDetails fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    default_funding_amount: CurrencyAmountFields | None = Field(
        None, alias="default_funding_amount"
    )
    max_acceptable_amount: CurrencyAmountFields | None = Field(None, alias="max_acceptable_amount")
    min_acceptable_amount: CurrencyAmountFields | None = Field(None, alias="min_acceptable_amount")
    should_collect_business_details: bool | None = Field(
        None, alias="should_collect_business_details"
    )


class AdBidAdjustmentsFields(BaseModel):
    """Pydantic model for AdBidAdjustments fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    age_range: dict[str, float] | None = Field(None, alias="age_range")
    page_types: dict[str, Any] | None = Field(None, alias="page_types")
    user_groups: str | None = Field(None, alias="user_groups")


class AvatarFields(BaseModel):
    """Pydantic model for Avatar fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")


class AudienceSharingRecipientAccountsFields(BaseModel):
    """Pydantic model for AudienceSharingRecipientAccounts fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    account_name: str | None = Field(None, alias="account_name")
    account_type: str | None = Field(None, alias="account_type")
    business_id: str | None = Field(None, alias="business_id")
    business_name: str | None = Field(None, alias="business_name")
    can_ad_account_use_lookalike_container: bool | None = Field(
        None, alias="can_ad_account_use_lookalike_container"
    )
    sharing_agreement_status: int | None = Field(None, alias="sharing_agreement_status")


class MessengerProfileFields(BaseModel):
    """Pydantic model for MessengerProfile fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_linking_url: str | None = Field(None, alias="account_linking_url")
    commands: list[dict[str, Any]] | None = Field(None, alias="commands")
    get_started: dict[str, Any] | None = Field(None, alias="get_started")
    greeting: list[dict[str, Any]] | None = Field(None, alias="greeting")
    ice_breakers: list[dict[str, Any]] | None = Field(None, alias="ice_breakers")
    persistent_menu: list[dict[str, Any]] | None = Field(None, alias="persistent_menu")
    subject_to_new_eu_privacy_rules: bool | None = Field(
        None, alias="subject_to_new_eu_privacy_rules"
    )
    whitelisted_domains: list[str] | None = Field(None, alias="whitelisted_domains")


class AdsReportBuilderFields(BaseModel):
    """Pydantic model for AdsReportBuilder fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    headers: dict[str, Any] | None = Field(None, alias="headers")
    rows: list[dict[str, Any]] | None = Field(None, alias="rows")
    skan_readiness_status: list[dict[str, str]] | None = Field(None, alias="skan_readiness_status")


class VideoStatusFields(BaseModel):
    """Pydantic model for VideoStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    copyright_check_status: VideoCopyrightCheckStatusFields | None = Field(
        None, alias="copyright_check_status"
    )
    processing_phase: VideoStatusProcessingPhaseFields | None = Field(
        None, alias="processing_phase"
    )
    processing_progress: int | None = Field(None, alias="processing_progress")
    publishing_phase: VideoStatusPublishingPhaseFields | None = Field(
        None, alias="publishing_phase"
    )
    uploading_phase: VideoStatusUploadingPhaseFields | None = Field(None, alias="uploading_phase")
    video_status: str | None = Field(None, alias="video_status")


class ProductImageFields(BaseModel):
    """Pydantic model for ProductImage fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    height: int | None = Field(None, alias="height")
    id: str | None = Field(None, alias="id")
    image_url: str | None = Field(None, alias="image_url")
    width: int | None = Field(None, alias="width")


class ProductItemFields(BaseModel):
    """Pydantic model for ProductItem fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    additional_image_cdn_urls: list[list[dict[str, str]]] | None = Field(
        None, alias="additional_image_cdn_urls"
    )
    additional_image_urls: list[str] | None = Field(None, alias="additional_image_urls")
    additional_variant_attributes: list[dict[str, str]] | None = Field(
        None, alias="additional_variant_attributes"
    )
    age_group: dict[str, Any] | None = Field(None, alias="age_group")
    applinks: CatalogItemAppLinksFields | None = Field(None, alias="applinks")
    availability: dict[str, Any] | None = Field(None, alias="availability")
    brand: str | None = Field(None, alias="brand")
    bundle_items: list[str] | None = Field(None, alias="bundle_items")
    bundle_retailer_ids: list[str] | None = Field(None, alias="bundle_retailer_ids")
    capability_to_review_status: list[dict[str, dict[str, Any]]] | None = Field(
        None, alias="capability_to_review_status"
    )
    category: str | None = Field(None, alias="category")
    category_specific_fields: CatalogSubVerticalListFields | None = Field(
        None, alias="category_specific_fields"
    )
    color: str | None = Field(None, alias="color")
    commerce_insights: ProductItemCommerceInsightsFields | None = Field(
        None, alias="commerce_insights"
    )
    condition: dict[str, Any] | None = Field(None, alias="condition")
    currency: str | None = Field(None, alias="currency")
    custom_data: list[dict[str, str]] | None = Field(None, alias="custom_data")
    custom_label_0: str | None = Field(None, alias="custom_label_0")
    custom_label_1: str | None = Field(None, alias="custom_label_1")
    custom_label_2: str | None = Field(None, alias="custom_label_2")
    custom_label_3: str | None = Field(None, alias="custom_label_3")
    custom_label_4: str | None = Field(None, alias="custom_label_4")
    custom_number_0: str | None = Field(None, alias="custom_number_0")
    custom_number_1: str | None = Field(None, alias="custom_number_1")
    custom_number_2: str | None = Field(None, alias="custom_number_2")
    custom_number_3: str | None = Field(None, alias="custom_number_3")
    custom_number_4: str | None = Field(None, alias="custom_number_4")
    description: str | None = Field(None, alias="description")
    errors: list[ProductItemErrorFields] | None = Field(None, alias="errors")
    expiration_date: str | None = Field(None, alias="expiration_date")
    fb_product_category: str | None = Field(None, alias="fb_product_category")
    gender: dict[str, Any] | None = Field(None, alias="gender")
    generated_background_images: list[AIGeneratedProductImageFields] | None = Field(
        None, alias="generated_background_images"
    )
    generated_background_images_ad_usage: bool | None = Field(
        None, alias="generated_background_images_ad_usage"
    )
    gtin: str | None = Field(None, alias="gtin")
    id: str | None = Field(None, alias="id")
    image_cdn_urls: list[dict[str, str]] | None = Field(None, alias="image_cdn_urls")
    image_fetch_status: dict[str, Any] | None = Field(None, alias="image_fetch_status")
    image_url: str | None = Field(None, alias="image_url")
    images: list[str] | None = Field(None, alias="images")
    importer_address: ProductItemImporterAddressFields | None = Field(
        None, alias="importer_address"
    )
    importer_name: str | None = Field(None, alias="importer_name")
    invalidation_errors: list[ProductItemInvalidationErrorFields] | None = Field(
        None, alias="invalidation_errors"
    )
    inventory: int | None = Field(None, alias="inventory")
    is_bundle_hero: bool | None = Field(None, alias="is_bundle_hero")
    manufacturer_info: str | None = Field(None, alias="manufacturer_info")
    manufacturer_part_number: str | None = Field(None, alias="manufacturer_part_number")
    marked_for_product_launch: str | None = Field(None, alias="marked_for_product_launch")
    material: str | None = Field(None, alias="material")
    mobile_link: str | None = Field(None, alias="mobile_link")
    name: str | None = Field(None, alias="name")
    ordering_index: int | None = Field(None, alias="ordering_index")
    origin_country: str | None = Field(None, alias="origin_country")
    parent_product_id: str | None = Field(None, alias="parent_product_id")
    pattern: str | None = Field(None, alias="pattern")
    post_conversion_signal_based_enforcement_appeal_eligibility: bool | None = Field(
        None, alias="post_conversion_signal_based_enforcement_appeal_eligibility"
    )
    price: str | None = Field(None, alias="price")
    product_catalog: ProductCatalogFields | None = Field(None, alias="product_catalog")
    product_feed: ProductFeedFields | None = Field(None, alias="product_feed")
    product_group: ProductGroupFields | None = Field(None, alias="product_group")
    product_local_info: ProductItemLocalInfoFields | None = Field(None, alias="product_local_info")
    product_relationship: str | None = Field(None, alias="product_relationship")
    product_type: str | None = Field(None, alias="product_type")
    quantity_to_sell_on_facebook: int | None = Field(None, alias="quantity_to_sell_on_facebook")
    retailer_id: str | None = Field(None, alias="retailer_id")
    retailer_product_group_id: str | None = Field(None, alias="retailer_product_group_id")
    review_rejection_reasons: list[str] | None = Field(None, alias="review_rejection_reasons")
    review_status: dict[str, Any] | None = Field(None, alias="review_status")
    sale_price: str | None = Field(None, alias="sale_price")
    sale_price_end_date: str | None = Field(None, alias="sale_price_end_date")
    sale_price_start_date: str | None = Field(None, alias="sale_price_start_date")
    shipping_weight_unit: dict[str, Any] | None = Field(None, alias="shipping_weight_unit")
    shipping_weight_value: float | None = Field(None, alias="shipping_weight_value")
    short_description: str | None = Field(None, alias="short_description")
    size: str | None = Field(None, alias="size")
    start_date: str | None = Field(None, alias="start_date")
    tags: list[str] | None = Field(None, alias="tags")
    url: str | None = Field(None, alias="url")
    vendor_id: str | None = Field(None, alias="vendor_id")
    video_fetch_status: dict[str, Any] | None = Field(None, alias="video_fetch_status")
    videos: list[ProductItemVideoDataFields] | None = Field(None, alias="videos")
    visibility: dict[str, Any] | None = Field(None, alias="visibility")
    wa_compliance_category: str | None = Field(None, alias="wa_compliance_category")


class PartnerCategoryFields(BaseModel):
    """Pydantic model for PartnerCategory fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    approximate_count: int | None = Field(None, alias="approximate_count")
    country: str | None = Field(None, alias="country")
    description: str | None = Field(None, alias="description")
    details: str | None = Field(None, alias="details")
    id: str | None = Field(None, alias="id")
    is_private: bool | None = Field(None, alias="is_private")
    name: str | None = Field(None, alias="name")
    parent_category: str | None = Field(None, alias="parent_category")
    source: str | None = Field(None, alias="source")
    status: str | None = Field(None, alias="status")
    targeting_type: str | None = Field(None, alias="targeting_type")


class PageLeadsAccessConfigFields(BaseModel):
    """Pydantic model for PageLeadsAccessConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    page: PageFields | None = Field(None, alias="page")


class ProductDeliveryPreferenceFields(BaseModel):
    """Pydantic model for ProductDeliveryPreference fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_object_id: str | None = Field(None, alias="ad_object_id")
    id: str | None = Field(None, alias="id")
    product_priority: str | None = Field(None, alias="product_priority")
    product_priority_category: list[str] | None = Field(None, alias="product_priority_category")


class TrackingAndConversionWithDefaultsFields(BaseModel):
    """Pydantic model for TrackingAndConversionWithDefaults fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    custom_conversion: list[dict[str, Any]] | None = Field(None, alias="custom_conversion")
    custom_tracking: list[dict[str, Any]] | None = Field(None, alias="custom_tracking")
    default_conversion: list[dict[str, Any]] | None = Field(None, alias="default_conversion")
    default_tracking: list[dict[str, Any]] | None = Field(None, alias="default_tracking")


class AdAccountDeliveryEstimateFields(BaseModel):
    """Pydantic model for AdAccountDeliveryEstimate fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    daily_outcomes_curve: list[OutcomePredictionPointFields] | None = Field(
        None, alias="daily_outcomes_curve"
    )
    estimate_dau: int | None = Field(None, alias="estimate_dau")
    estimate_mau_lower_bound: int | None = Field(None, alias="estimate_mau_lower_bound")
    estimate_mau_upper_bound: int | None = Field(None, alias="estimate_mau_upper_bound")
    estimate_ready: bool | None = Field(None, alias="estimate_ready")
    targeting_optimization_types: list[dict[str, int]] | None = Field(
        None, alias="targeting_optimization_types"
    )


class ProductCatalogProductSetsBatchFields(BaseModel):
    """Pydantic model for ProductCatalogProductSetsBatch fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    errors: list[dict[str, Any]] | None = Field(None, alias="errors")
    errors_total_count: int | None = Field(None, alias="errors_total_count")
    handle: str | None = Field(None, alias="handle")
    status: str | None = Field(None, alias="status")


class ProductItemLocalInfoFields(BaseModel):
    """Pydantic model for ProductItemLocalInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    availability_circle_origin: ProductItemLocalInfoLatLongShapeFields | None = Field(
        None, alias="availability_circle_origin"
    )
    availability_circle_radius: float | None = Field(None, alias="availability_circle_radius")
    availability_circle_radius_unit: str | None = Field(
        None, alias="availability_circle_radius_unit"
    )
    availability_polygon_coordinates: list[ProductItemLocalInfoLatLongShapeFields] | None = Field(
        None, alias="availability_polygon_coordinates"
    )
    availability_postal_codes: list[str] | None = Field(None, alias="availability_postal_codes")
    availability_source: str | None = Field(None, alias="availability_source")
    id: str | None = Field(None, alias="id")
    inferred_circle_origin: ProductItemLocalInfoLatLongShapeFields | None = Field(
        None, alias="inferred_circle_origin"
    )
    inferred_circle_radius: float | None = Field(None, alias="inferred_circle_radius")


class AdCreativeFeatureActionMetadataFields(BaseModel):
    """Pydantic model for AdCreativeFeatureActionMetadata fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    type: str | None = Field(None, alias="type")


class AdRuleFiltersFields(BaseModel):
    """Pydantic model for AdRuleFilters fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    field: str | None = Field(None, alias="field")
    operator: dict[str, Any] | None = Field(None, alias="operator")
    value: dict[str, Any] | None = Field(None, alias="value")


class TaggableSubjectFields(BaseModel):
    """Pydantic model for TaggableSubject fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class AdAccountMatchedSearchApplicationsEdgeDataFields(BaseModel):
    """Pydantic model for AdAccountMatchedSearchApplicationsEdgeData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app_id: str | None = Field(None, alias="app_id")
    are_app_events_unavailable: bool | None = Field(None, alias="are_app_events_unavailable")
    icon_url: str | None = Field(None, alias="icon_url")
    name: str | None = Field(None, alias="name")
    search_source_store: str | None = Field(None, alias="search_source_store")
    store: str | None = Field(None, alias="store")
    unique_id: str | None = Field(None, alias="unique_id")
    url: str | None = Field(None, alias="url")


class CatalogWebsiteOnboardingSettingsFields(BaseModel):
    """Pydantic model for CatalogWebsiteOnboardingSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    quality_band: str | None = Field(None, alias="quality_band")
    status: str | None = Field(None, alias="status")


class CloudbridgeDatasetStatusFields(BaseModel):
    """Pydantic model for CloudbridgeDatasetStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app_redacted_event: list[str] | None = Field(None, alias="app_redacted_event")
    app_sensitive_params: list[dict[str, list[str]]] | None = Field(
        None, alias="app_sensitive_params"
    )
    app_unverified_event: list[str] | None = Field(None, alias="app_unverified_event")
    has_app_associated: bool | None = Field(None, alias="has_app_associated")
    is_app_prohibited: bool | None = Field(None, alias="is_app_prohibited")
    is_dataset: bool | None = Field(None, alias="is_dataset")


class PageGetStartedNullstateFields(BaseModel):
    """Pydantic model for PageGetStartedNullstate fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    cta_title: str | None = Field(None, alias="cta_title")
    processed_greeting: str | None = Field(None, alias="processed_greeting")
    responsiveness: str | None = Field(None, alias="responsiveness")


class MediaFingerprintFields(BaseModel):
    """Pydantic model for MediaFingerprint fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    duration_in_sec: float | None = Field(None, alias="duration_in_sec")
    fingerprint_content_type: str | None = Field(None, alias="fingerprint_content_type")
    fingerprint_type: str | None = Field(None, alias="fingerprint_type")
    id: str | None = Field(None, alias="id")
    metadata: dict[str, Any] | None = Field(None, alias="metadata")
    title: str | None = Field(None, alias="title")
    universal_content_id: str | None = Field(None, alias="universal_content_id")


class AdLimitsEnforcementDataFields(BaseModel):
    """Pydantic model for AdLimitsEnforcementData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_limit_on_page: int | None = Field(None, alias="ad_limit_on_page")
    ad_limit_on_scope: int | None = Field(None, alias="ad_limit_on_scope")
    ad_volume_on_page: int | None = Field(None, alias="ad_volume_on_page")
    ad_volume_on_scope: int | None = Field(None, alias="ad_volume_on_scope")
    is_admin: bool | None = Field(None, alias="is_admin")
    page_name: str | None = Field(None, alias="page_name")


class AdAssetFeedSpecImageFields(BaseModel):
    """Pydantic model for AdAssetFeedSpecImage fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adlabels: list[AdAssetFeedSpecAssetLabelFields] | None = Field(None, alias="adlabels")
    hash: str | None = Field(None, alias="hash")
    image_crops: AdsImageCropsFields | None = Field(None, alias="image_crops")
    url: str | None = Field(None, alias="url")
    url_tags: str | None = Field(None, alias="url_tags")


class LeadGenLegalContentFields(BaseModel):
    """Pydantic model for LeadGenLegalContent fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    custom_disclaimer: LeadGenCustomDisclaimerFields | None = Field(None, alias="custom_disclaimer")
    id: str | None = Field(None, alias="id")
    privacy_policy: LeadGenPrivacyPolicyFields | None = Field(None, alias="privacy_policy")


class InstagramBusinessAssetFields(BaseModel):
    """Pydantic model for InstagramBusinessAsset fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    ig_user_id: str | None = Field(None, alias="ig_user_id")
    ig_username: str | None = Field(None, alias="ig_username")


class LeadGenLegalContentCheckboxFields(BaseModel):
    """Pydantic model for LeadGenLegalContentCheckbox fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    is_checked_by_default: bool | None = Field(None, alias="is_checked_by_default")
    is_required: bool | None = Field(None, alias="is_required")
    key: str | None = Field(None, alias="key")
    text: str | None = Field(None, alias="text")


class OpenGraphContextFields(BaseModel):
    """Pydantic model for OpenGraphContext fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")


class UserNotificationSeenStateDataFields(BaseModel):
    """Pydantic model for UserNotificationSeenStateData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    seen_state: str | None = Field(None, alias="seen_state")


class UserMobileConfigFields(BaseModel):
    """Pydantic model for UserMobileConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    section_name: str | None = Field(None, alias="section_name")
    value: dict[str, Any] | None = Field(None, alias="value")


class CoverPhotoFields(BaseModel):
    """Pydantic model for CoverPhoto fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    cover_id: str | None = Field(None, alias="cover_id")
    id: str | None = Field(None, alias="id")
    offset_x: float | None = Field(None, alias="offset_x")
    offset_y: float | None = Field(None, alias="offset_y")
    source: str | None = Field(None, alias="source")


class CatalogItemOverrideFields(BaseModel):
    """Pydantic model for CatalogItemOverride fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    local_info: ProductItemLocalInfoFields | None = Field(None, alias="local_info")
    override_type: str | None = Field(None, alias="override_type")
    override_value: str | None = Field(None, alias="override_value")


class AdsPixelStatsResultFields(BaseModel):
    """Pydantic model for AdsPixelStatsResult fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    aggregation: str | None = Field(None, alias="aggregation")
    data: list[AdsPixelStatsFields] | None = Field(None, alias="data")
    start_time: datetime | None = Field(None, alias="start_time")


class CPASBusinessSetupConfigFields(BaseModel):
    """Pydantic model for CPASBusinessSetupConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    accepted_collab_ads_tos: bool | None = Field(None, alias="accepted_collab_ads_tos")
    business: BusinessFields | None = Field(None, alias="business")
    business_capabilities_status: list[dict[str, str]] | None = Field(
        None, alias="business_capabilities_status"
    )
    capabilities_compliance_status: list[dict[str, dict[str, Any]]] | None = Field(
        None, alias="capabilities_compliance_status"
    )
    id: str | None = Field(None, alias="id")


class FundingSourceDetailsCouponFields(BaseModel):
    """Pydantic model for FundingSourceDetailsCoupon fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    amount: int | None = Field(None, alias="amount")
    campaign_ids: list[int] | None = Field(None, alias="campaign_ids")
    child_ad_account_id: str | None = Field(None, alias="child_ad_account_id")
    child_bm_id: str | None = Field(None, alias="child_bm_id")
    coupon_id: str | None = Field(None, alias="coupon_id")
    coupon_tiering: FundingSourceDetailsCouponTieringFields | None = Field(
        None, alias="coupon_tiering"
    )
    currency: str | None = Field(None, alias="currency")
    display_amount: str | None = Field(None, alias="display_amount")
    expiration: datetime | None = Field(None, alias="expiration")
    original_amount: int | None = Field(None, alias="original_amount")
    original_display_amount: str | None = Field(None, alias="original_display_amount")
    start_date: datetime | None = Field(None, alias="start_date")
    vendor_id: str | None = Field(None, alias="vendor_id")


class AdsNamingTemplateFields(BaseModel):
    """Pydantic model for AdsNamingTemplate fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    api_fields: list[list[dict[str, list[dict[str, str]]]]] | None = Field(None, alias="api_fields")
    api_version: str | None = Field(None, alias="api_version")
    field_order: list[str] | None = Field(None, alias="field_order")
    id: str | None = Field(None, alias="id")
    level: dict[str, Any] | None = Field(None, alias="level")
    separator: str | None = Field(None, alias="separator")
    template_version: str | None = Field(None, alias="template_version")
    user_defined_fields: list[list[dict[str, list[str]]]] | None = Field(
        None, alias="user_defined_fields"
    )
    value_separator: str | None = Field(None, alias="value_separator")


class ThirdPartyPartnerLiftRequestFields(BaseModel):
    """Pydantic model for ThirdPartyPartnerLiftRequest fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_entities: list[str] | None = Field(None, alias="ad_entities")
    country: str | None = Field(None, alias="country")
    created_time: datetime | None = Field(None, alias="created_time")
    description: str | None = Field(None, alias="description")
    holdout_size: float | None = Field(None, alias="holdout_size")
    id: str | None = Field(None, alias="id")
    legacy_ads_data_partner_id: str | None = Field(None, alias="legacy_ads_data_partner_id")
    legacy_ads_data_partner_name: str | None = Field(None, alias="legacy_ads_data_partner_name")
    modified_time: datetime | None = Field(None, alias="modified_time")
    owner_instance_id: str | None = Field(None, alias="owner_instance_id")
    partner_household_graph_dataset_id: str | None = Field(
        None, alias="partner_household_graph_dataset_id"
    )
    region: str | None = Field(None, alias="region")
    status: dict[str, Any] | None = Field(None, alias="status")
    study_cells: list[str] | None = Field(None, alias="study_cells")
    study_end_time: datetime | None = Field(None, alias="study_end_time")
    study_start_time: datetime | None = Field(None, alias="study_start_time")


class AdsEligibilityFields(BaseModel):
    """Pydantic model for AdsEligibility fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    live_shopping: dict[str, Any] | None = Field(None, alias="live_shopping")


class UserLeadGenFieldDataFields(BaseModel):
    """Pydantic model for UserLeadGenFieldData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    name: str | None = Field(None, alias="name")
    values: list[str] | None = Field(None, alias="values")


class AlbumFields(BaseModel):
    """Pydantic model for Album fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    backdated_time: datetime | None = Field(None, alias="backdated_time")
    backdated_time_granularity: str | None = Field(None, alias="backdated_time_granularity")
    can_backdate: bool | None = Field(None, alias="can_backdate")
    can_upload: bool | None = Field(None, alias="can_upload")
    count: int | None = Field(None, alias="count")
    cover_photo: PhotoFields | None = Field(None, alias="cover_photo")
    created_time: datetime | None = Field(None, alias="created_time")
    description: str | None = Field(None, alias="description")
    edit_link: str | None = Field(None, alias="edit_link")
    event: EventFields | None = Field(None, alias="event")
    from_: dict[str, Any] | None = Field(None, alias="from")
    id: str | None = Field(None, alias="id")
    is_user_facing: bool | None = Field(None, alias="is_user_facing")
    link: str | None = Field(None, alias="link")
    location: str | None = Field(None, alias="location")
    modified_major: datetime | None = Field(None, alias="modified_major")
    name: str | None = Field(None, alias="name")
    photo_count: int | None = Field(None, alias="photo_count")
    place: PlaceFields | None = Field(None, alias="place")
    privacy: str | None = Field(None, alias="privacy")
    type: str | None = Field(None, alias="type")
    updated_time: datetime | None = Field(None, alias="updated_time")
    video_count: int | None = Field(None, alias="video_count")


class VideoUploadLimitsFields(BaseModel):
    """Pydantic model for VideoUploadLimits fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    length: int | None = Field(None, alias="length")
    size: int | None = Field(None, alias="size")


class MessagingAppsInfoFields(BaseModel):
    """Pydantic model for MessagingAppsInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ctd_support_only_for_ig_app: bool | None = Field(None, alias="ctd_support_only_for_ig_app")
    has_instagram_messaging_permission: bool | None = Field(
        None, alias="has_instagram_messaging_permission"
    )
    has_messenger_messaging_permission: bool | None = Field(
        None, alias="has_messenger_messaging_permission"
    )
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class FavoriteCatalogFields(BaseModel):
    """Pydantic model for FavoriteCatalog fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    catalog: ProductCatalogFields | None = Field(None, alias="catalog")
    id: str | None = Field(None, alias="id")


class LiveVideoErrorFields(BaseModel):
    """Pydantic model for LiveVideoError fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    creation_time: datetime | None = Field(None, alias="creation_time")
    error_code: int | None = Field(None, alias="error_code")
    error_message: str | None = Field(None, alias="error_message")
    error_type: str | None = Field(None, alias="error_type")


class ProductItemImporterAddressFields(BaseModel):
    """Pydantic model for ProductItemImporterAddress fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    city: str | None = Field(None, alias="city")
    country: str | None = Field(None, alias="country")
    postal_code: str | None = Field(None, alias="postal_code")
    region: str | None = Field(None, alias="region")
    street1: str | None = Field(None, alias="street1")
    street2: str | None = Field(None, alias="street2")


class VideoCopyrightSegmentFields(BaseModel):
    """Pydantic model for VideoCopyrightSegment fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    duration_in_sec: float | None = Field(None, alias="duration_in_sec")
    media_type: str | None = Field(None, alias="media_type")
    start_time_in_sec: float | None = Field(None, alias="start_time_in_sec")


class BusinessCreativeInsightsFields(BaseModel):
    """Pydantic model for BusinessCreativeInsights fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    actions: list[AdsActionStatsFields] | None = Field(None, alias="actions")
    age: str | None = Field(None, alias="age")
    country: str | None = Field(None, alias="country")
    date_end: str | None = Field(None, alias="date_end")
    date_start: str | None = Field(None, alias="date_start")
    device_platform: str | None = Field(None, alias="device_platform")
    gender: str | None = Field(None, alias="gender")
    impressions: int | None = Field(None, alias="impressions")
    inline_link_clicks: int | None = Field(None, alias="inline_link_clicks")
    objective: str | None = Field(None, alias="objective")
    optimization_goal: str | None = Field(None, alias="optimization_goal")
    platform_position: str | None = Field(None, alias="platform_position")
    publisher_platform: str | None = Field(None, alias="publisher_platform")
    quality_ranking: str | None = Field(None, alias="quality_ranking")
    video_play_actions: list[AdsActionStatsFields] | None = Field(None, alias="video_play_actions")
    video_thruplay_watched_actions: list[AdsActionStatsFields] | None = Field(
        None, alias="video_thruplay_watched_actions"
    )


class DynamicPriceConfigByDateFields(BaseModel):
    """Pydantic model for DynamicPriceConfigByDate fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    checkin_date: str | None = Field(None, alias="checkin_date")
    prices: str | None = Field(None, alias="prices")
    prices_pretty: list[dict[str, Any]] | None = Field(None, alias="prices_pretty")


class AdgroupFacebookFeedbackFields(BaseModel):
    """Pydantic model for AdgroupFacebookFeedback fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    preview: str | None = Field(None, alias="preview")


class EmailImportFields(BaseModel):
    """Pydantic model for EmailImport fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    lists: list[dict[str, Any]] | None = Field(None, alias="lists")
    total: int | None = Field(None, alias="total")


class AdAssetOnsiteDestinationsFields(BaseModel):
    """Pydantic model for AdAssetOnsiteDestinations fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    auto_optimization: str | None = Field(None, alias="auto_optimization")
    details_page_product_id: str | None = Field(None, alias="details_page_product_id")
    shop_collection_product_set_id: str | None = Field(None, alias="shop_collection_product_set_id")
    source: str | None = Field(None, alias="source")
    storefront_shop_id: str | None = Field(None, alias="storefront_shop_id")


class TargetingRelaxationFields(BaseModel):
    """Pydantic model for TargetingRelaxation fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    custom_audience: int | None = Field(None, alias="custom_audience")
    lookalike: int | None = Field(None, alias="lookalike")


class ProductDaEventSamplesBatchFields(BaseModel):
    """Pydantic model for ProductDaEventSamplesBatch fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    samples: list[dict[str, Any]] | None = Field(None, alias="samples")
    time_start: int | None = Field(None, alias="time_start")
    time_stop: int | None = Field(None, alias="time_stop")


class PagePaymentOptionsFields(BaseModel):
    """Pydantic model for PagePaymentOptions fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    amex: int | None = Field(None, alias="amex")
    cash_only: int | None = Field(None, alias="cash_only")
    discover: int | None = Field(None, alias="discover")
    mastercard: int | None = Field(None, alias="mastercard")
    visa: int | None = Field(None, alias="visa")


class AdVideoFields(BaseModel):
    """Pydantic model for AdVideo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_breaks: list[int] | None = Field(None, alias="ad_breaks")
    admin_creator: UserFields | None = Field(None, alias="admin_creator")
    audio_isrc: AudioIsrcFields | None = Field(None, alias="audio_isrc")
    backdated_time: datetime | None = Field(None, alias="backdated_time")
    backdated_time_granularity: str | None = Field(None, alias="backdated_time_granularity")
    boost_eligibility_info: dict[str, Any] | None = Field(None, alias="boost_eligibility_info")
    content_category: str | None = Field(None, alias="content_category")
    content_tags: list[str] | None = Field(None, alias="content_tags")
    copyright: VideoCopyrightFields | None = Field(None, alias="copyright")
    copyright_check_information: dict[str, Any] | None = Field(
        None, alias="copyright_check_information"
    )
    copyright_monitoring_status: str | None = Field(None, alias="copyright_monitoring_status")
    created_time: datetime | None = Field(None, alias="created_time")
    custom_labels: list[str] | None = Field(None, alias="custom_labels")
    description: str | None = Field(None, alias="description")
    embed_html: dict[str, Any] | None = Field(None, alias="embed_html")
    embeddable: bool | None = Field(None, alias="embeddable")
    event: EventFields | None = Field(None, alias="event")
    expiration: dict[str, Any] | None = Field(None, alias="expiration")
    format: list[dict[str, Any]] | None = Field(None, alias="format")
    from_: dict[str, Any] | None = Field(None, alias="from")
    icon: str | None = Field(None, alias="icon")
    id: str | None = Field(None, alias="id")
    is_crosspost_video: bool | None = Field(None, alias="is_crosspost_video")
    is_crossposting_eligible: bool | None = Field(None, alias="is_crossposting_eligible")
    is_episode: bool | None = Field(None, alias="is_episode")
    is_instagram_eligible: bool | None = Field(None, alias="is_instagram_eligible")
    is_reference_only: bool | None = Field(None, alias="is_reference_only")
    length: float | None = Field(None, alias="length")
    live_audience_count: int | None = Field(None, alias="live_audience_count")
    live_status: str | None = Field(None, alias="live_status")
    music_video_copyright: MusicVideoCopyrightFields | None = Field(
        None, alias="music_video_copyright"
    )
    permalink_url: str | None = Field(None, alias="permalink_url")
    picture: str | None = Field(None, alias="picture")
    place: PlaceFields | None = Field(None, alias="place")
    post_id: str | None = Field(None, alias="post_id")
    post_views: int | None = Field(None, alias="post_views")
    premiere_living_room_status: str | None = Field(None, alias="premiere_living_room_status")
    privacy: PrivacyFields | None = Field(None, alias="privacy")
    published: bool | None = Field(None, alias="published")
    scheduled_publish_time: datetime | None = Field(None, alias="scheduled_publish_time")
    source: str | None = Field(None, alias="source")
    spherical: bool | None = Field(None, alias="spherical")
    status: VideoStatusFields | None = Field(None, alias="status")
    title: str | None = Field(None, alias="title")
    universal_video_id: str | None = Field(None, alias="universal_video_id")
    updated_time: datetime | None = Field(None, alias="updated_time")
    views: int | None = Field(None, alias="views")


class MeasurementReportFields(BaseModel):
    """Pydantic model for MeasurementReport fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    download_urls: list[str] | None = Field(None, alias="download_urls")
    id: str | None = Field(None, alias="id")
    metadata: dict[str, Any] | None = Field(None, alias="metadata")
    report_type: str | None = Field(None, alias="report_type")
    status: str | None = Field(None, alias="status")


class PageUserWithLeadsAccessFields(BaseModel):
    """Pydantic model for PageUserWithLeadsAccess fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    active_on_business: bool | None = Field(None, alias="active_on_business")
    business_role: str | None = Field(None, alias="business_role")
    can_access_leads: bool | None = Field(None, alias="can_access_leads")
    page_role: str | None = Field(None, alias="page_role")


class AdAssetImageFields(BaseModel):
    """Pydantic model for AdAssetImage fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    hash: str | None = Field(None, alias="hash")
    id: str | None = Field(None, alias="id")
    image_crops: AdsImageCropsFields | None = Field(None, alias="image_crops")
    name: str | None = Field(None, alias="name")
    tag: str | None = Field(None, alias="tag")
    url: str | None = Field(None, alias="url")
    url_tags: str | None = Field(None, alias="url_tags")


class AdCreativeFields(BaseModel):
    """Pydantic model for AdCreative fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    actor_id: str | None = Field(None, alias="actor_id")
    ad_disclaimer_spec: AdCreativeAdDisclaimerFields | None = Field(
        None, alias="ad_disclaimer_spec"
    )
    adlabels: list[AdLabelFields] | None = Field(None, alias="adlabels")
    applink_treatment: str | None = Field(None, alias="applink_treatment")
    asset_feed_spec: AdAssetFeedSpecFields | None = Field(None, alias="asset_feed_spec")
    authorization_category: str | None = Field(None, alias="authorization_category")
    auto_update: bool | None = Field(None, alias="auto_update")
    body: str | None = Field(None, alias="body")
    branded_content: AdCreativeBrandedContentAdsFields | None = Field(None, alias="branded_content")
    branded_content_sponsor_page_id: str | None = Field(
        None, alias="branded_content_sponsor_page_id"
    )
    bundle_folder_id: str | None = Field(None, alias="bundle_folder_id")
    call_to_action: AdCreativeLinkDataCallToActionFields | None = Field(
        None, alias="call_to_action"
    )
    call_to_action_type: dict[str, Any] | None = Field(None, alias="call_to_action_type")
    categorization_criteria: str | None = Field(None, alias="categorization_criteria")
    category_media_source: str | None = Field(None, alias="category_media_source")
    collaborative_ads_lsb_image_bank_id: str | None = Field(
        None, alias="collaborative_ads_lsb_image_bank_id"
    )
    contextual_multi_ads: AdCreativeContextualMultiAdsFields | None = Field(
        None, alias="contextual_multi_ads"
    )
    creative_sourcing_spec: AdCreativeSourcingSpecFields | None = Field(
        None, alias="creative_sourcing_spec"
    )
    degrees_of_freedom_spec: AdCreativeDegreesOfFreedomSpecFields | None = Field(
        None, alias="degrees_of_freedom_spec"
    )
    destination_set_id: str | None = Field(None, alias="destination_set_id")
    dynamic_ad_voice: str | None = Field(None, alias="dynamic_ad_voice")
    effective_authorization_category: str | None = Field(
        None, alias="effective_authorization_category"
    )
    effective_instagram_media_id: str | None = Field(None, alias="effective_instagram_media_id")
    effective_object_story_id: str | None = Field(None, alias="effective_object_story_id")
    enable_direct_install: bool | None = Field(None, alias="enable_direct_install")
    enable_launch_instant_app: bool | None = Field(None, alias="enable_launch_instant_app")
    facebook_branded_content: AdCreativeFacebookBrandedContentFields | None = Field(
        None, alias="facebook_branded_content"
    )
    id: str | None = Field(None, alias="id")
    image_crops: AdsImageCropsFields | None = Field(None, alias="image_crops")
    image_hash: str | None = Field(None, alias="image_hash")
    image_url: str | None = Field(None, alias="image_url")
    instagram_branded_content: AdCreativeInstagramBrandedContentFields | None = Field(
        None, alias="instagram_branded_content"
    )
    instagram_permalink_url: str | None = Field(None, alias="instagram_permalink_url")
    instagram_user_id: str | None = Field(None, alias="instagram_user_id")
    interactive_components_spec: AdCreativeInteractiveComponentsSpecFields | None = Field(
        None, alias="interactive_components_spec"
    )
    link_deep_link_url: str | None = Field(None, alias="link_deep_link_url")
    link_destination_display_url: str | None = Field(None, alias="link_destination_display_url")
    link_og_id: str | None = Field(None, alias="link_og_id")
    link_url: str | None = Field(None, alias="link_url")
    messenger_sponsored_message: str | None = Field(None, alias="messenger_sponsored_message")
    name: str | None = Field(None, alias="name")
    object_id: str | None = Field(None, alias="object_id")
    object_store_url: str | None = Field(None, alias="object_store_url")
    object_story_id: str | None = Field(None, alias="object_story_id")
    object_story_spec: AdCreativeObjectStorySpecFields | None = Field(
        None, alias="object_story_spec"
    )
    object_type: dict[str, Any] | None = Field(None, alias="object_type")
    object_url: str | None = Field(None, alias="object_url")
    omnichannel_link_spec: AdCreativeOmnichannelLinkSpecFields | None = Field(
        None, alias="omnichannel_link_spec"
    )
    page_welcome_message: str | None = Field(None, alias="page_welcome_message")
    photo_album_source_object_story_id: str | None = Field(
        None, alias="photo_album_source_object_story_id"
    )
    place_page_set_id: str | None = Field(None, alias="place_page_set_id")
    platform_customizations: AdCreativePlatformCustomizationFields | None = Field(
        None, alias="platform_customizations"
    )
    playable_asset_id: str | None = Field(None, alias="playable_asset_id")
    portrait_customizations: AdCreativePortraitCustomizationsFields | None = Field(
        None, alias="portrait_customizations"
    )
    product_data: list[AdCreativeProductDataFields] | None = Field(None, alias="product_data")
    product_set_id: str | None = Field(None, alias="product_set_id")
    recommender_settings: AdCreativeRecommenderSettingsFields | None = Field(
        None, alias="recommender_settings"
    )
    regional_regulation_disclaimer_spec: AdCreativeRegionalRegulationDisclaimerFields | None = (
        Field(None, alias="regional_regulation_disclaimer_spec")
    )
    source_facebook_post_id: str | None = Field(None, alias="source_facebook_post_id")
    source_instagram_media_id: str | None = Field(None, alias="source_instagram_media_id")
    status: dict[str, Any] | None = Field(None, alias="status")
    template_url: str | None = Field(None, alias="template_url")
    template_url_spec: AdCreativeTemplateURLSpecFields | None = Field(
        None, alias="template_url_spec"
    )
    thumbnail_id: str | None = Field(None, alias="thumbnail_id")
    thumbnail_url: str | None = Field(None, alias="thumbnail_url")
    title: str | None = Field(None, alias="title")
    url_tags: str | None = Field(None, alias="url_tags")
    use_page_actor_override: bool | None = Field(None, alias="use_page_actor_override")
    video_id: str | None = Field(None, alias="video_id")


class AdAccountOptimizationGoalsAEMv2EligibilityFields(BaseModel):
    """Pydantic model for AdAccountOptimizationGoalsAEMv2Eligibility fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    is_disabled: bool | None = Field(None, alias="is_disabled")
    optimization_goal: dict[str, Any] | None = Field(None, alias="optimization_goal")


class PageAboutStoryComposedBlockInlineStyleFields(BaseModel):
    """Pydantic model for PageAboutStoryComposedBlockInlineStyle fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    length: int | None = Field(None, alias="length")
    offset: int | None = Field(None, alias="offset")
    style: str | None = Field(None, alias="style")


class AdCampaignGroupAgencyFeeConfigForApiFields(BaseModel):
    """Pydantic model for AdCampaignGroupAgencyFeeConfigForApi fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    agency_fee_pct: float | None = Field(None, alias="agency_fee_pct")
    is_agency_fee_disabled: bool | None = Field(None, alias="is_agency_fee_disabled")
    is_default_agency_fee: bool | None = Field(None, alias="is_default_agency_fee")


class BusinessAgreementFields(BaseModel):
    """Pydantic model for BusinessAgreement fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    request_status: str | None = Field(None, alias="request_status")


class InsightsResultFields(BaseModel):
    """Pydantic model for InsightsResult fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    description: str | None = Field(None, alias="description")
    description_from_api_doc: str | None = Field(None, alias="description_from_api_doc")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    period: str | None = Field(None, alias="period")
    title: str | None = Field(None, alias="title")
    values: list[InsightsValueFields] | None = Field(None, alias="values")


class AdSavedKeywordsFields(BaseModel):
    """Pydantic model for AdSavedKeywords fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account: AdAccountFields | None = Field(None, alias="account")
    id: str | None = Field(None, alias="id")
    keywords: AdKeywordsFields | None = Field(None, alias="keywords")
    name: str | None = Field(None, alias="name")
    run_status: str | None = Field(None, alias="run_status")
    time_created: datetime | None = Field(None, alias="time_created")
    time_updated: datetime | None = Field(None, alias="time_updated")


class RecommendationFields(BaseModel):
    """Pydantic model for Recommendation fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    created_time: datetime | None = Field(None, alias="created_time")
    has_rating: bool | None = Field(None, alias="has_rating")
    has_review: bool | None = Field(None, alias="has_review")
    open_graph_story: dict[str, Any] | None = Field(None, alias="open_graph_story")
    rating: int | None = Field(None, alias="rating")
    recommendation_type: str | None = Field(None, alias="recommendation_type")
    review_text: str | None = Field(None, alias="review_text")
    reviewer: UserFields | None = Field(None, alias="reviewer")


class CatalogSmartPixelSettingsFields(BaseModel):
    """Pydantic model for CatalogSmartPixelSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    allowed_domains: list[str] | None = Field(None, alias="allowed_domains")
    available_property_filters: list[str] | None = Field(None, alias="available_property_filters")
    catalog: ProductCatalogFields | None = Field(None, alias="catalog")
    cbb_custom_override_filters: list[dict[str, Any]] | None = Field(
        None, alias="cbb_custom_override_filters"
    )
    cbb_default_filter: list[dict[str, list[str]]] | None = Field(None, alias="cbb_default_filter")
    defaults: list[dict[str, str]] | None = Field(None, alias="defaults")
    filters: list[dict[str, list[str]]] | None = Field(None, alias="filters")
    id: str | None = Field(None, alias="id")
    is_cbb_enabled: bool | None = Field(None, alias="is_cbb_enabled")
    is_create_enabled: bool | None = Field(None, alias="is_create_enabled")
    is_delete_enabled: bool | None = Field(None, alias="is_delete_enabled")
    is_update_enabled: bool | None = Field(None, alias="is_update_enabled")
    microdata_format_precedence: list[str] | None = Field(None, alias="microdata_format_precedence")
    pixel: AdsPixelFields | None = Field(None, alias="pixel")
    property_filter: list[str] | None = Field(None, alias="property_filter")
    trusted_domains: list[str] | None = Field(None, alias="trusted_domains")


class VideoCopyrightCheckStatusFields(BaseModel):
    """Pydantic model for VideoCopyrightCheckStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    matches_found: bool | None = Field(None, alias="matches_found")
    status: str | None = Field(None, alias="status")


class AdCreativeDegreesOfFreedomSpecFields(BaseModel):
    """Pydantic model for AdCreativeDegreesOfFreedomSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_handle_type: str | None = Field(None, alias="ad_handle_type")
    creative_features_spec: AdCreativeFeaturesSpecFields | None = Field(
        None, alias="creative_features_spec"
    )
    degrees_of_freedom_type: str | None = Field(None, alias="degrees_of_freedom_type")
    image_transformation_types: list[str] | None = Field(None, alias="image_transformation_types")
    multi_media_transformation_type: str | None = Field(
        None, alias="multi_media_transformation_type"
    )
    stories_transformation_types: list[str] | None = Field(
        None, alias="stories_transformation_types"
    )
    text_transformation_types: list[str] | None = Field(None, alias="text_transformation_types")
    video_transformation_types: list[str] | None = Field(None, alias="video_transformation_types")


class AdsPixelFields(BaseModel):
    """Pydantic model for AdsPixel fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    automatic_matching_fields: list[str] | None = Field(None, alias="automatic_matching_fields")
    can_proxy: bool | None = Field(None, alias="can_proxy")
    code: str | None = Field(None, alias="code")
    config: str | None = Field(None, alias="config")
    creation_time: datetime | None = Field(None, alias="creation_time")
    creator: UserFields | None = Field(None, alias="creator")
    data_use_setting: str | None = Field(None, alias="data_use_setting")
    description: str | None = Field(None, alias="description")
    duplicate_entries: int | None = Field(None, alias="duplicate_entries")
    enable_auto_assign_to_accounts: bool | None = Field(
        None, alias="enable_auto_assign_to_accounts"
    )
    enable_automatic_matching: bool | None = Field(None, alias="enable_automatic_matching")
    event_stats: str | None = Field(None, alias="event_stats")
    event_time_max: int | None = Field(None, alias="event_time_max")
    event_time_min: int | None = Field(None, alias="event_time_min")
    first_party_cookie_status: str | None = Field(None, alias="first_party_cookie_status")
    has_1p_pixel_event: bool | None = Field(None, alias="has_1p_pixel_event")
    id: str | None = Field(None, alias="id")
    is_consolidated_container: bool | None = Field(None, alias="is_consolidated_container")
    is_created_by_business: bool | None = Field(None, alias="is_created_by_business")
    is_crm: bool | None = Field(None, alias="is_crm")
    is_mta_use: bool | None = Field(None, alias="is_mta_use")
    is_restricted_use: bool | None = Field(None, alias="is_restricted_use")
    is_unavailable: bool | None = Field(None, alias="is_unavailable")
    last_fired_time: datetime | None = Field(None, alias="last_fired_time")
    last_upload_app: str | None = Field(None, alias="last_upload_app")
    last_upload_app_changed_time: int | None = Field(None, alias="last_upload_app_changed_time")
    match_rate_approx: int | None = Field(None, alias="match_rate_approx")
    matched_entries: int | None = Field(None, alias="matched_entries")
    name: str | None = Field(None, alias="name")
    owner_ad_account: AdAccountFields | None = Field(None, alias="owner_ad_account")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")
    usage: OfflineConversionDataSetUsageFields | None = Field(None, alias="usage")
    user_access_expire_time: datetime | None = Field(None, alias="user_access_expire_time")
    valid_entries: int | None = Field(None, alias="valid_entries")


class OpenBridgeConfigurationFields(BaseModel):
    """Pydantic model for OpenBridgeConfiguration fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    active: bool | None = Field(None, alias="active")
    cloud_provider: str | None = Field(None, alias="cloud_provider")
    cloud_region: str | None = Field(None, alias="cloud_region")
    destination_id: str | None = Field(None, alias="destination_id")
    endpoint: str | None = Field(None, alias="endpoint")
    fallback_domain: str | None = Field(None, alias="fallback_domain")
    first_party_domain: str | None = Field(None, alias="first_party_domain")
    host_business_id: str | None = Field(None, alias="host_business_id")
    id: str | None = Field(None, alias="id")
    instance_id: str | None = Field(None, alias="instance_id")
    instance_version: str | None = Field(None, alias="instance_version")
    is_sgw_instance: bool | None = Field(None, alias="is_sgw_instance")
    is_sgw_pixel_from_meta_pixel: bool | None = Field(None, alias="is_sgw_pixel_from_meta_pixel")
    partner_name: str | None = Field(None, alias="partner_name")
    pixel_id: str | None = Field(None, alias="pixel_id")
    sgw_account_id: str | None = Field(None, alias="sgw_account_id")
    sgw_instance_url: str | None = Field(None, alias="sgw_instance_url")
    sgw_pixel_id: str | None = Field(None, alias="sgw_pixel_id")


class LeadGenClientValidationRulesFields(BaseModel):
    """Pydantic model for LeadGenClientValidationRules fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    exclude_emoji_and_special_chars_enabled: bool | None = Field(
        None, alias="exclude_emoji_and_special_chars_enabled"
    )
    max_length_value: int | None = Field(None, alias="max_length_value")
    min_length_value: int | None = Field(None, alias="min_length_value")


class AdAccountCustomAudienceLimitsFields(BaseModel):
    """Pydantic model for AdAccountCustomAudienceLimits fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    audience_update_quota_in_total: int | None = Field(None, alias="audience_update_quota_in_total")
    audience_update_quota_left: float | None = Field(None, alias="audience_update_quota_left")
    has_hit_audience_update_limit: bool | None = Field(None, alias="has_hit_audience_update_limit")
    next_audience_update_available_time: str | None = Field(
        None, alias="next_audience_update_available_time"
    )
    rate_limit_reset_time: str | None = Field(None, alias="rate_limit_reset_time")


class GroupFields(BaseModel):
    """Pydantic model for Group fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    archived: bool | None = Field(None, alias="archived")
    cover: CoverPhotoFields | None = Field(None, alias="cover")
    created_time: datetime | None = Field(None, alias="created_time")
    description: str | None = Field(None, alias="description")
    email: str | None = Field(None, alias="email")
    icon: str | None = Field(None, alias="icon")
    id: str | None = Field(None, alias="id")
    install: dict[str, Any] | None = Field(None, alias="install")
    link: str | None = Field(None, alias="link")
    member_count: int | None = Field(None, alias="member_count")
    member_request_count: int | None = Field(None, alias="member_request_count")
    name: str | None = Field(None, alias="name")
    parent: dict[str, Any] | None = Field(None, alias="parent")
    permissions: list[str] | None = Field(None, alias="permissions")
    privacy: str | None = Field(None, alias="privacy")
    purpose: str | None = Field(None, alias="purpose")
    subdomain: str | None = Field(None, alias="subdomain")
    updated_time: datetime | None = Field(None, alias="updated_time")
    venue: LocationFields | None = Field(None, alias="venue")


class PartnerIntegrationLinkedFields(BaseModel):
    """Pydantic model for PartnerIntegrationLinked fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ads_pixel: AdsPixelFields | None = Field(None, alias="ads_pixel")
    application: ApplicationFields | None = Field(None, alias="application")
    completed_integration_types: list[str] | None = Field(None, alias="completed_integration_types")
    external_business_connection_id: str | None = Field(
        None, alias="external_business_connection_id"
    )
    external_id: str | None = Field(None, alias="external_id")
    has_oauth_token: bool | None = Field(None, alias="has_oauth_token")
    id: str | None = Field(None, alias="id")
    mbe_app_id: str | None = Field(None, alias="mbe_app_id")
    mbe_asset_id: str | None = Field(None, alias="mbe_asset_id")
    mbe_external_business_id: str | None = Field(None, alias="mbe_external_business_id")
    name: str | None = Field(None, alias="name")
    offline_conversion_data_set: OfflineConversionDataSetFields | None = Field(
        None, alias="offline_conversion_data_set"
    )
    page: PageFields | None = Field(None, alias="page")
    partner: str | None = Field(None, alias="partner")
    product_catalog: ProductCatalogFields | None = Field(None, alias="product_catalog")
    setup_status: str | None = Field(None, alias="setup_status")


class RightsManagerDataExportFields(BaseModel):
    """Pydantic model for RightsManagerDataExport fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    download_uri: str | None = Field(None, alias="download_uri")
    export_scope: str | None = Field(None, alias="export_scope")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    record_type: str | None = Field(None, alias="record_type")
    time_range_end: datetime | None = Field(None, alias="time_range_end")
    time_range_start: datetime | None = Field(None, alias="time_range_start")


class IGShoppingProductAppealFields(BaseModel):
    """Pydantic model for IGShoppingProductAppeal fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    eligible_for_appeal: bool | None = Field(None, alias="eligible_for_appeal")
    product_appeal_status: str | None = Field(None, alias="product_appeal_status")
    product_id: int | None = Field(None, alias="product_id")
    rejection_reasons: list[str] | None = Field(None, alias="rejection_reasons")
    review_status: str | None = Field(None, alias="review_status")


class AIGeneratedProductImageFields(BaseModel):
    """Pydantic model for AIGeneratedProductImage fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    flagged_for_manual_review: bool | None = Field(None, alias="flagged_for_manual_review")
    transformed_image_url: str | None = Field(None, alias="transformed_image_url")


class PageUserMessageThreadLabelFields(BaseModel):
    """Pydantic model for PageUserMessageThreadLabel fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    page_label_name: str | None = Field(None, alias="page_label_name")


class CatalogItemAppLinksFields(BaseModel):
    """Pydantic model for CatalogItemAppLinks fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    android: list[AndroidAppLinkFields] | None = Field(None, alias="android")
    ios: list[IosAppLinkFields] | None = Field(None, alias="ios")
    ipad: list[IosAppLinkFields] | None = Field(None, alias="ipad")
    iphone: list[IosAppLinkFields] | None = Field(None, alias="iphone")
    web: WebAppLinkFields | None = Field(None, alias="web")
    windows: list[WindowsAppLinkFields] | None = Field(None, alias="windows")
    windows_phone: list[WindowsPhoneAppLinkFields] | None = Field(None, alias="windows_phone")
    windows_universal: list[WindowsAppLinkFields] | None = Field(None, alias="windows_universal")


class InstagramShoppingMerchantReviewMessageFields(BaseModel):
    """Pydantic model for InstagramShoppingMerchantReviewMessage fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    help_url: str | None = Field(None, alias="help_url")
    message: str | None = Field(None, alias="message")


class TargetingGeoLocationCustomLocationFields(BaseModel):
    """Pydantic model for TargetingGeoLocationCustomLocation fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    address_string: str | None = Field(None, alias="address_string")
    country: str | None = Field(None, alias="country")
    country_group: str | None = Field(None, alias="country_group")
    custom_type: str | None = Field(None, alias="custom_type")
    distance_unit: str | None = Field(None, alias="distance_unit")
    key: str | None = Field(None, alias="key")
    latitude: float | None = Field(None, alias="latitude")
    longitude: float | None = Field(None, alias="longitude")
    max_population: int | None = Field(None, alias="max_population")
    min_population: int | None = Field(None, alias="min_population")
    name: str | None = Field(None, alias="name")
    primary_city_id: int | None = Field(None, alias="primary_city_id")
    radius: float | None = Field(None, alias="radius")
    region_id: int | None = Field(None, alias="region_id")


class WorkExperienceFields(BaseModel):
    """Pydantic model for WorkExperience fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    description: str | None = Field(None, alias="description")
    employer: PageFields | None = Field(None, alias="employer")
    end_date: str | None = Field(None, alias="end_date")
    from_: UserFields | None = Field(None, alias="from")
    id: str | None = Field(None, alias="id")
    location: PageFields | None = Field(None, alias="location")
    position: PageFields | None = Field(None, alias="position")
    projects: list[dict[str, Any]] | None = Field(None, alias="projects")
    start_date: str | None = Field(None, alias="start_date")
    with_: list[UserFields] | None = Field(None, alias="with")


class IosAppLinkFields(BaseModel):
    """Pydantic model for IosAppLink fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app_name: str | None = Field(None, alias="app_name")
    app_store_id: str | None = Field(None, alias="app_store_id")
    url: str | None = Field(None, alias="url")


class BCPCampaignFields(BaseModel):
    """Pydantic model for BCPCampaign fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ads_permission_required: bool | None = Field(None, alias="ads_permission_required")
    application_deadline: str | None = Field(None, alias="application_deadline")
    campaign_goal: str | None = Field(None, alias="campaign_goal")
    campaign_goal_other: str | None = Field(None, alias="campaign_goal_other")
    content_delivery_deadline: str | None = Field(None, alias="content_delivery_deadline")
    content_delivery_start_date: str | None = Field(None, alias="content_delivery_start_date")
    content_requirements: list[dict[str, int]] | None = Field(None, alias="content_requirements")
    content_requirements_description: str | None = Field(
        None, alias="content_requirements_description"
    )
    currency: str | None = Field(None, alias="currency")
    deal_negotiation_type: str | None = Field(None, alias="deal_negotiation_type")
    description: str | None = Field(None, alias="description")
    has_free_product: bool | None = Field(None, alias="has_free_product")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    payment_amount_for_ads: int | None = Field(None, alias="payment_amount_for_ads")
    payment_amount_for_content: int | None = Field(None, alias="payment_amount_for_content")
    payment_description: str | None = Field(None, alias="payment_description")


class CallAdsPhoneDataFields(BaseModel):
    """Pydantic model for CallAdsPhoneData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    call_ads_phone_data_use_case: str | None = Field(None, alias="call_ads_phone_data_use_case")
    callback_variant: str | None = Field(None, alias="callback_variant")
    destination_website_url: str | None = Field(None, alias="destination_website_url")
    id: str | None = Field(None, alias="id")
    page: PageFields | None = Field(None, alias="page")
    phone_number: str | None = Field(None, alias="phone_number")


class AudiencePermissionFields(BaseModel):
    """Pydantic model for AudiencePermission fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    audience: CustomAudienceFields | None = Field(None, alias="audience")
    share_account_id: str | None = Field(None, alias="share_account_id")
    share_account_name: str | None = Field(None, alias="share_account_name")


class DraftPostFields(BaseModel):
    """Pydantic model for DraftPost fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    admin_creator: UserFields | None = Field(None, alias="admin_creator")
    creation_time: datetime | None = Field(None, alias="creation_time")
    feed_audience_description: str | None = Field(None, alias="feed_audience_description")
    feed_targeting: TargetingFields | None = Field(None, alias="feed_targeting")
    id: str | None = Field(None, alias="id")
    is_post_in_good_state: bool | None = Field(None, alias="is_post_in_good_state")
    message: str | None = Field(None, alias="message")
    modified_time: datetime | None = Field(None, alias="modified_time")
    og_action_summary: str | None = Field(None, alias="og_action_summary")
    permalink_url: str | None = Field(None, alias="permalink_url")
    place: PlaceFields | None = Field(None, alias="place")
    privacy_description: str | None = Field(None, alias="privacy_description")
    scheduled_failure_notice: str | None = Field(None, alias="scheduled_failure_notice")
    scheduled_publish_time: datetime | None = Field(None, alias="scheduled_publish_time")
    story_token: str | None = Field(None, alias="story_token")
    thumbnail: str | None = Field(None, alias="thumbnail")
    video_id: str | None = Field(None, alias="video_id")


class PaymentRequestDetailsFields(BaseModel):
    """Pydantic model for PaymentRequestDetails fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    amount: dict[str, Any] | None = Field(None, alias="amount")
    creation_time: int | None = Field(None, alias="creation_time")
    note: str | None = Field(None, alias="note")
    payment_request_id: str | None = Field(None, alias="payment_request_id")
    receiver_id: str | None = Field(None, alias="receiver_id")
    reference_number: str | None = Field(None, alias="reference_number")
    sender_id: str | None = Field(None, alias="sender_id")
    status: str | None = Field(None, alias="status")
    transaction_time: int | None = Field(None, alias="transaction_time")


class AdsReportBuilderMMMReportFields(BaseModel):
    """Pydantic model for AdsReportBuilderMMMReport fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    async_status: str | None = Field(None, alias="async_status")
    export_format: str | None = Field(None, alias="export_format")
    export_name: str | None = Field(None, alias="export_name")
    export_type: str | None = Field(None, alias="export_type")
    has_seen: bool | None = Field(None, alias="has_seen")
    id: str | None = Field(None, alias="id")
    mmm_status: str | None = Field(None, alias="mmm_status")
    time_start: datetime | None = Field(None, alias="time_start")


class TargetingGeoLocationLocationExpansionFields(BaseModel):
    """Pydantic model for TargetingGeoLocationLocationExpansion fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    allowed: bool | None = Field(None, alias="allowed")
    intent: str | None = Field(None, alias="intent")


class ConversionActionQueryFields(BaseModel):
    """Pydantic model for ConversionActionQuery fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    action_type: list[dict[str, Any]] | None = Field(None, alias="action.type")
    application: list[dict[str, Any]] | None = Field(None, alias="application")
    conversion_id: list[str] | None = Field(None, alias="conversion_id")
    creative: list[dict[str, Any]] | None = Field(None, alias="creative")
    dataset: list[str] | None = Field(None, alias="dataset")
    event: list[str] | None = Field(None, alias="event")
    event_creator: list[str] | None = Field(None, alias="event.creator")
    event_type: list[str] | None = Field(None, alias="event_type")
    fb_pixel: list[str] | None = Field(None, alias="fb_pixel")
    fb_pixel_event: list[str] | None = Field(None, alias="fb_pixel_event")
    leadgen: list[str] | None = Field(None, alias="leadgen")
    object: list[str] | None = Field(None, alias="object")
    object_domain: list[str] | None = Field(None, alias="object.domain")
    offer: list[str] | None = Field(None, alias="offer")
    offer_creator: list[str] | None = Field(None, alias="offer.creator")
    offsite_pixel: list[str] | None = Field(None, alias="offsite_pixel")
    page: list[str] | None = Field(None, alias="page")
    page_parent: list[str] | None = Field(None, alias="page.parent")
    post: list[str] | None = Field(None, alias="post")
    post_object: list[str] | None = Field(None, alias="post.object")
    post_object_wall: list[str] | None = Field(None, alias="post.object.wall")
    post_wall: list[str] | None = Field(None, alias="post.wall")
    question: list[str] | None = Field(None, alias="question")
    question_creator: list[str] | None = Field(None, alias="question.creator")
    response: list[str] | None = Field(None, alias="response")
    subtype: list[str] | None = Field(None, alias="subtype")


class CustomAudienceSaltsFields(BaseModel):
    """Pydantic model for CustomAudienceSalts fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app_id: int | None = Field(None, alias="app_id")
    public_key: str | None = Field(None, alias="public_key")
    salts: list[dict[str, Any]] | None = Field(None, alias="salts")
    user_id: int | None = Field(None, alias="user_id")


class AvatarProfilePictureFields(BaseModel):
    """Pydantic model for AvatarProfilePicture fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    url: str | None = Field(None, alias="url")


class WebAppLinkFields(BaseModel):
    """Pydantic model for WebAppLink fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    should_fallback: bool | None = Field(None, alias="should_fallback")
    url: str | None = Field(None, alias="url")


class LeadGenQuestionFields(BaseModel):
    """Pydantic model for LeadGenQuestion fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    conditional_questions_choices: list[LeadGenConditionalQuestionsGroupChoicesFields] | None = (
        Field(None, alias="conditional_questions_choices")
    )
    conditional_questions_group_id: str | None = Field(None, alias="conditional_questions_group_id")
    dependent_conditional_questions: (
        list[LeadGenConditionalQuestionsGroupQuestionsFields] | None
    ) = Field(None, alias="dependent_conditional_questions")
    id: str | None = Field(None, alias="id")
    inline_context: str | None = Field(None, alias="inline_context")
    key: str | None = Field(None, alias="key")
    label: str | None = Field(None, alias="label")
    options: list[LeadGenQuestionOptionFields] | None = Field(None, alias="options")
    type: str | None = Field(None, alias="type")


class AdAssetLinkURLFields(BaseModel):
    """Pydantic model for AdAssetLinkURL fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    android_deeplink_url: str | None = Field(None, alias="android_deeplink_url")
    carousel_see_more_url: str | None = Field(None, alias="carousel_see_more_url")
    deeplink_url: str | None = Field(None, alias="deeplink_url")
    display_url: str | None = Field(None, alias="display_url")
    id: str | None = Field(None, alias="id")
    ipad_deeplink_url: str | None = Field(None, alias="ipad_deeplink_url")
    iphone_deeplink_url: str | None = Field(None, alias="iphone_deeplink_url")
    url_tags: str | None = Field(None, alias="url_tags")
    website_url: str | None = Field(None, alias="website_url")


class AdvertiserVerificationStatusFields(BaseModel):
    """Pydantic model for AdvertiserVerificationStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    banner_type: str | None = Field(None, alias="banner_type")
    grace_period_ends_at: datetime | None = Field(None, alias="grace_period_ends_at")
    ufac_redirect_uri: str | None = Field(None, alias="ufac_redirect_uri")
    verification_status: str | None = Field(None, alias="verification_status")


class AdsPivotRulesFields(BaseModel):
    """Pydantic model for AdsPivotRules fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    creation_time: datetime | None = Field(None, alias="creation_time")
    creator: ProfileFields | None = Field(None, alias="creator")
    description: str | None = Field(None, alias="description")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    permission: str | None = Field(None, alias="permission")
    rules: list[dict[str, Any]] | None = Field(None, alias="rules")
    scope: str | None = Field(None, alias="scope")
    update_by: ProfileFields | None = Field(None, alias="update_by")
    update_time: datetime | None = Field(None, alias="update_time")


class DynamicVideoMetadataFields(BaseModel):
    """Pydantic model for DynamicVideoMetadata fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    tags: list[str] | None = Field(None, alias="tags")
    url: str | None = Field(None, alias="url")
    video: AdVideoFields | None = Field(None, alias="video")


class BusinessSettingLogsDataFields(BaseModel):
    """Pydantic model for BusinessSettingLogsData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    actor: dict[str, Any] | None = Field(None, alias="actor")
    event_object: dict[str, Any] | None = Field(None, alias="event_object")
    event_time: str | None = Field(None, alias="event_time")
    event_type: str | None = Field(None, alias="event_type")
    extra_data: dict[str, Any] | None = Field(None, alias="extra_data")


class ALMAdAccountInfoFields(BaseModel):
    """Pydantic model for ALMAdAccountInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_account_id: str | None = Field(None, alias="ad_account_id")
    id: str | None = Field(None, alias="id")
    managed_by: str | None = Field(None, alias="managed_by")
    owned_by: str | None = Field(None, alias="owned_by")
    parent_advertiser_id: str | None = Field(None, alias="parent_advertiser_id")
    sub_vertical: str | None = Field(None, alias="sub_vertical")
    tag: list[str] | None = Field(None, alias="tag")
    user_ids: list[str] | None = Field(None, alias="user_ids")
    vertical: str | None = Field(None, alias="vertical")


class ThirdPartyPartnerViewabilityRequestFields(BaseModel):
    """Pydantic model for ThirdPartyPartnerViewabilityRequest fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    created_time: datetime | None = Field(None, alias="created_time")
    description: str | None = Field(None, alias="description")
    ds: str | None = Field(None, alias="ds")
    hour: datetime | None = Field(None, alias="hour")
    id: str | None = Field(None, alias="id")
    metric: dict[str, Any] | None = Field(None, alias="metric")
    modified_time: datetime | None = Field(None, alias="modified_time")
    owner_instance_id: str | None = Field(None, alias="owner_instance_id")
    platform: dict[str, Any] | None = Field(None, alias="platform")
    status: dict[str, Any] | None = Field(None, alias="status")
    total_file_count: int | None = Field(None, alias="total_file_count")


class ApplicationFields(BaseModel):
    """Pydantic model for Application fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    aam_rules: str | None = Field(None, alias="aam_rules")
    an_ad_space_limit: int | None = Field(None, alias="an_ad_space_limit")
    an_platforms: list[str] | None = Field(None, alias="an_platforms")
    android_key_hash: list[str] | None = Field(None, alias="android_key_hash")
    android_sdk_error_categories: list[dict[str, Any]] | None = Field(
        None, alias="android_sdk_error_categories"
    )
    app_domains: list[str] | None = Field(None, alias="app_domains")
    app_events_config: dict[str, Any] | None = Field(None, alias="app_events_config")
    app_events_feature_bitmask: int | None = Field(None, alias="app_events_feature_bitmask")
    app_events_session_timeout: int | None = Field(None, alias="app_events_session_timeout")
    app_install_tracked: bool | None = Field(None, alias="app_install_tracked")
    app_name: str | None = Field(None, alias="app_name")
    app_signals_binding_ios: list[dict[str, Any]] | None = Field(
        None, alias="app_signals_binding_ios"
    )
    app_type: int | None = Field(None, alias="app_type")
    auth_dialog_data_help_url: str | None = Field(None, alias="auth_dialog_data_help_url")
    auth_dialog_headline: str | None = Field(None, alias="auth_dialog_headline")
    auth_dialog_perms_explanation: str | None = Field(None, alias="auth_dialog_perms_explanation")
    auth_referral_default_activity_privacy: str | None = Field(
        None, alias="auth_referral_default_activity_privacy"
    )
    auth_referral_enabled: int | None = Field(None, alias="auth_referral_enabled")
    auth_referral_extended_perms: list[str] | None = Field(
        None, alias="auth_referral_extended_perms"
    )
    auth_referral_friend_perms: list[str] | None = Field(None, alias="auth_referral_friend_perms")
    auth_referral_response_type: str | None = Field(None, alias="auth_referral_response_type")
    auth_referral_user_perms: list[str] | None = Field(None, alias="auth_referral_user_perms")
    auto_event_mapping_android: list[dict[str, Any]] | None = Field(
        None, alias="auto_event_mapping_android"
    )
    auto_event_mapping_ios: list[dict[str, Any]] | None = Field(
        None, alias="auto_event_mapping_ios"
    )
    auto_event_setup_enabled: bool | None = Field(None, alias="auto_event_setup_enabled")
    auto_log_app_events_default: bool | None = Field(None, alias="auto_log_app_events_default")
    auto_log_app_events_enabled: bool | None = Field(None, alias="auto_log_app_events_enabled")
    business: BusinessFields | None = Field(None, alias="business")
    canvas_fluid_height: bool | None = Field(None, alias="canvas_fluid_height")
    canvas_fluid_width: int | None = Field(None, alias="canvas_fluid_width")
    canvas_url: str | None = Field(None, alias="canvas_url")
    category: str | None = Field(None, alias="category")
    client_config: dict[str, Any] | None = Field(None, alias="client_config")
    company: str | None = Field(None, alias="company")
    configured_ios_sso: bool | None = Field(None, alias="configured_ios_sso")
    contact_email: str | None = Field(None, alias="contact_email")
    created_time: datetime | None = Field(None, alias="created_time")
    creator_uid: str | None = Field(None, alias="creator_uid")
    daily_active_users: str | None = Field(None, alias="daily_active_users")
    daily_active_users_rank: int | None = Field(None, alias="daily_active_users_rank")
    deauth_callback_url: str | None = Field(None, alias="deauth_callback_url")
    default_share_mode: str | None = Field(None, alias="default_share_mode")
    description: str | None = Field(None, alias="description")
    enigma_config: dict[str, Any] | None = Field(None, alias="enigma_config")
    financial_id: str | None = Field(None, alias="financial_id")
    gdpv4_chrome_custom_tabs_enabled: bool | None = Field(
        None, alias="gdpv4_chrome_custom_tabs_enabled"
    )
    gdpv4_enabled: bool | None = Field(None, alias="gdpv4_enabled")
    gdpv4_nux_content: str | None = Field(None, alias="gdpv4_nux_content")
    gdpv4_nux_enabled: bool | None = Field(None, alias="gdpv4_nux_enabled")
    has_messenger_product: bool | None = Field(None, alias="has_messenger_product")
    hosting_url: str | None = Field(None, alias="hosting_url")
    icon_url: str | None = Field(None, alias="icon_url")
    id: str | None = Field(None, alias="id")
    ios_bundle_id: list[str] | None = Field(None, alias="ios_bundle_id")
    ios_sdk_dialog_flows: dict[str, Any] | None = Field(None, alias="ios_sdk_dialog_flows")
    ios_sdk_error_categories: list[dict[str, Any]] | None = Field(
        None, alias="ios_sdk_error_categories"
    )
    ios_sfvc_attr: bool | None = Field(None, alias="ios_sfvc_attr")
    ios_supports_native_proxy_auth_flow: bool | None = Field(
        None, alias="ios_supports_native_proxy_auth_flow"
    )
    ios_supports_system_auth: bool | None = Field(None, alias="ios_supports_system_auth")
    ipad_app_store_id: str | None = Field(None, alias="ipad_app_store_id")
    iphone_app_store_id: str | None = Field(None, alias="iphone_app_store_id")
    latest_sdk_version: dict[str, Any] | None = Field(None, alias="latest_sdk_version")
    link: str | None = Field(None, alias="link")
    logging_token: str | None = Field(None, alias="logging_token")
    logo_url: str | None = Field(None, alias="logo_url")
    migrations: dict[str, bool] | None = Field(None, alias="migrations")
    mobile_profile_section_url: str | None = Field(None, alias="mobile_profile_section_url")
    mobile_web_url: str | None = Field(None, alias="mobile_web_url")
    monthly_active_users: str | None = Field(None, alias="monthly_active_users")
    monthly_active_users_rank: int | None = Field(None, alias="monthly_active_users_rank")
    name: str | None = Field(None, alias="name")
    namespace: str | None = Field(None, alias="namespace")
    object_store_urls: dict[str, Any] | None = Field(None, alias="object_store_urls")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")
    page_tab_default_name: str | None = Field(None, alias="page_tab_default_name")
    page_tab_url: str | None = Field(None, alias="page_tab_url")
    photo_url: str | None = Field(None, alias="photo_url")
    privacy_policy_url: str | None = Field(None, alias="privacy_policy_url")
    profile_section_url: str | None = Field(None, alias="profile_section_url")
    property_id: str | None = Field(None, alias="property_id")
    protected_mode_rules: dict[str, Any] | None = Field(None, alias="protected_mode_rules")
    real_time_mode_devices: list[str] | None = Field(None, alias="real_time_mode_devices")
    restrictions: dict[str, Any] | None = Field(None, alias="restrictions")
    restrictive_data_filter_params: str | None = Field(None, alias="restrictive_data_filter_params")
    restrictive_data_filter_rules: str | None = Field(None, alias="restrictive_data_filter_rules")
    sdk_update_message: str | None = Field(None, alias="sdk_update_message")
    seamless_login: int | None = Field(None, alias="seamless_login")
    secure_canvas_url: str | None = Field(None, alias="secure_canvas_url")
    secure_page_tab_url: str | None = Field(None, alias="secure_page_tab_url")
    server_ip_whitelist: str | None = Field(None, alias="server_ip_whitelist")
    smart_login_bookmark_icon_url: str | None = Field(None, alias="smart_login_bookmark_icon_url")
    smart_login_menu_icon_url: str | None = Field(None, alias="smart_login_menu_icon_url")
    social_discovery: int | None = Field(None, alias="social_discovery")
    subcategory: str | None = Field(None, alias="subcategory")
    suggested_events_setting: str | None = Field(None, alias="suggested_events_setting")
    supported_platforms: list[dict[str, Any]] | None = Field(None, alias="supported_platforms")
    supports_apprequests_fast_app_switch: dict[str, Any] | None = Field(
        None, alias="supports_apprequests_fast_app_switch"
    )
    supports_attribution: bool | None = Field(None, alias="supports_attribution")
    supports_implicit_sdk_logging: bool | None = Field(None, alias="supports_implicit_sdk_logging")
    suppress_native_ios_gdp: bool | None = Field(None, alias="suppress_native_ios_gdp")
    terms_of_service_url: str | None = Field(None, alias="terms_of_service_url")
    url_scheme_suffix: str | None = Field(None, alias="url_scheme_suffix")
    user_support_email: str | None = Field(None, alias="user_support_email")
    user_support_url: str | None = Field(None, alias="user_support_url")
    website_url: str | None = Field(None, alias="website_url")
    weekly_active_users: str | None = Field(None, alias="weekly_active_users")


class McomInvoiceBankAccountFields(BaseModel):
    """Pydantic model for McomInvoiceBankAccount fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    num_pending_verification_accounts: int | None = Field(
        None, alias="num_pending_verification_accounts"
    )
    num_verified_accounts: int | None = Field(None, alias="num_verified_accounts")
    pending_verification_accounts: list[dict[str, Any]] | None = Field(
        None, alias="pending_verification_accounts"
    )
    verified_accounts: list[dict[str, Any]] | None = Field(None, alias="verified_accounts")


class PrivateLiftStudyInstanceFields(BaseModel):
    """Pydantic model for PrivateLiftStudyInstance fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    breakdown_key: str | None = Field(None, alias="breakdown_key")
    created_time: datetime | None = Field(None, alias="created_time")
    feature_list: list[str] | None = Field(None, alias="feature_list")
    id: str | None = Field(None, alias="id")
    issuer_certificate: str | None = Field(None, alias="issuer_certificate")
    latest_status_update_time: datetime | None = Field(None, alias="latest_status_update_time")
    run_id: str | None = Field(None, alias="run_id")
    server_hostnames: list[str] | None = Field(None, alias="server_hostnames")
    server_ips: list[str] | None = Field(None, alias="server_ips")
    status: str | None = Field(None, alias="status")
    tier: str | None = Field(None, alias="tier")


class IGUserForIGOnlyAPIFields(BaseModel):
    """Pydantic model for IGUserForIGOnlyAPI fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_type: str | None = Field(None, alias="account_type")
    biography: str | None = Field(None, alias="biography")
    followers_count: int | None = Field(None, alias="followers_count")
    follows_count: int | None = Field(None, alias="follows_count")
    id: str | None = Field(None, alias="id")
    media_count: int | None = Field(None, alias="media_count")
    name: str | None = Field(None, alias="name")
    profile_picture_url: str | None = Field(None, alias="profile_picture_url")
    user_id: int | None = Field(None, alias="user_id")
    username: str | None = Field(None, alias="username")
    website: str | None = Field(None, alias="website")


class IGRefreshAccessTokenForIGOnlyAPIFields(BaseModel):
    """Pydantic model for IGRefreshAccessTokenForIGOnlyAPI fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    access_token: str | None = Field(None, alias="access_token")
    expires_in: int | None = Field(None, alias="expires_in")
    permissions: str | None = Field(None, alias="permissions")
    token_type: str | None = Field(None, alias="token_type")


class ProductCatalogDataSourceFields(BaseModel):
    """Pydantic model for ProductCatalogDataSource fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app_id: str | None = Field(None, alias="app_id")
    id: str | None = Field(None, alias="id")
    ingestion_source_type: str | None = Field(None, alias="ingestion_source_type")
    name: str | None = Field(None, alias="name")
    upload_type: str | None = Field(None, alias="upload_type")


class FAMEKumoFields(BaseModel):
    """Pydantic model for FAMEKumo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")


class WebPublisherFields(BaseModel):
    """Pydantic model for WebPublisher fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    domain_url: str | None = Field(None, alias="domain_url")
    id: str | None = Field(None, alias="id")
    publisher_name: str | None = Field(None, alias="publisher_name")


class ProductItemInvalidationErrorFields(BaseModel):
    """Pydantic model for ProductItemInvalidationError fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pass  # No fields defined


class WorkAccessCodeFields(BaseModel):
    """Pydantic model for WorkAccessCode fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    code: str | None = Field(None, alias="code")
    expiration_time: datetime | None = Field(None, alias="expiration_time")


class PageCTXBudgetSimilarAdvertiserBudgetRecommendationFields(BaseModel):
    """Pydantic model for PageCTXBudgetSimilarAdvertiserBudgetRecommendation fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    budget: str | None = Field(None, alias="budget")
    reported_conversion: str | None = Field(None, alias="reported_conversion")


class LinkFields(BaseModel):
    """Pydantic model for Link fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    caption: str | None = Field(None, alias="caption")
    created_time: datetime | None = Field(None, alias="created_time")
    description: str | None = Field(None, alias="description")
    from_: dict[str, Any] | None = Field(None, alias="from")
    icon: str | None = Field(None, alias="icon")
    id: str | None = Field(None, alias="id")
    link: str | None = Field(None, alias="link")
    message: str | None = Field(None, alias="message")
    multi_share_optimized: bool | None = Field(None, alias="multi_share_optimized")
    name: str | None = Field(None, alias="name")
    privacy: PrivacyFields | None = Field(None, alias="privacy")
    via: dict[str, Any] | None = Field(None, alias="via")


class MessengerCallSettingsFields(BaseModel):
    """Pydantic model for MessengerCallSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    audio_enabled: bool | None = Field(None, alias="audio_enabled")
    call_hours: dict[str, Any] | None = Field(None, alias="call_hours")
    call_routing: str | None = Field(None, alias="call_routing")
    icon_enabled: bool | None = Field(None, alias="icon_enabled")


class AdAccountASLScheduleFields(BaseModel):
    """Pydantic model for AdAccountASLSchedule fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_account: AdAccountFields | None = Field(None, alias="ad_account")
    id: str | None = Field(None, alias="id")
    time_created: datetime | None = Field(None, alias="time_created")
    time_updated: datetime | None = Field(None, alias="time_updated")


class CatalogCollectionFields(BaseModel):
    """Pydantic model for CatalogCollection fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    description: str | None = Field(None, alias="description")
    title: str | None = Field(None, alias="title")
    url: str | None = Field(None, alias="url")


class ProductFeedUploadProgressFields(BaseModel):
    """Pydantic model for ProductFeedUploadProgress fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pos: int | None = Field(None, alias="pos")
    size: int | None = Field(None, alias="size")
    step: str | None = Field(None, alias="step")
    unit: str | None = Field(None, alias="unit")
    updated_time: datetime | None = Field(None, alias="updated_time")


class ProductEventStatFields(BaseModel):
    """Pydantic model for ProductEventStat fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    date_start: str | None = Field(None, alias="date_start")
    date_stop: str | None = Field(None, alias="date_stop")
    device_type: dict[str, Any] | None = Field(None, alias="device_type")
    event: dict[str, Any] | None = Field(None, alias="event")
    event_source: ExternalEventSourceFields | None = Field(None, alias="event_source")
    total_content_ids_matched_other_catalogs: int | None = Field(
        None, alias="total_content_ids_matched_other_catalogs"
    )
    total_matched_content_ids: int | None = Field(None, alias="total_matched_content_ids")
    total_unmatched_content_ids: int | None = Field(None, alias="total_unmatched_content_ids")
    unique_content_ids_matched_other_catalogs: int | None = Field(
        None, alias="unique_content_ids_matched_other_catalogs"
    )
    unique_matched_content_ids: int | None = Field(None, alias="unique_matched_content_ids")
    unique_unmatched_content_ids: int | None = Field(None, alias="unique_unmatched_content_ids")


class WorkUserBadgesFields(BaseModel):
    """Pydantic model for WorkUserBadges fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    category: str | None = Field(None, alias="category")
    description: str | None = Field(None, alias="description")
    icon: str | None = Field(None, alias="icon")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class CPASSetupPageStructureProgressFields(BaseModel):
    """Pydantic model for CPASSetupPageStructureProgress fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    issues: list[dict[str, Any]] | None = Field(None, alias="issues")
    name: str | None = Field(None, alias="name")


class AdAccountSubscribedAppsFields(BaseModel):
    """Pydantic model for AdAccountSubscribedApps fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    app_id: str | None = Field(None, alias="app_id")
    app_name: str | None = Field(None, alias="app_name")


class CPASMerchantConfigFields(BaseModel):
    """Pydantic model for CPASMerchantConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    accepted_tos: bool | None = Field(None, alias="accepted_tos")
    beta_features: list[str] | None = Field(None, alias="beta_features")
    business_outcomes_status: list[dict[str, str]] | None = Field(
        None, alias="business_outcomes_status"
    )
    id: str | None = Field(None, alias="id")
    is_test_merchant: bool | None = Field(None, alias="is_test_merchant")
    outcomes_compliance_status: list[dict[str, dict[str, Any]]] | None = Field(
        None, alias="outcomes_compliance_status"
    )
    qualified_to_onboard: bool | None = Field(None, alias="qualified_to_onboard")


class LiveVideoAdCampaignConfigFields(BaseModel):
    """Pydantic model for LiveVideoAdCampaignConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    live_video_ad_type: str | None = Field(None, alias="live_video_ad_type")


class ThreadsUserFields(BaseModel):
    """Pydantic model for ThreadsUser fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    threads_user_id: str | None = Field(None, alias="threads_user_id")
    threads_user_profile_pic: str | None = Field(None, alias="threads_user_profile_pic")


class PageParkingFields(BaseModel):
    """Pydantic model for PageParking fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    lot: int | None = Field(None, alias="lot")
    street: int | None = Field(None, alias="street")
    valet: int | None = Field(None, alias="valet")


class AdsGuidanceQEExposureFields(BaseModel):
    """Pydantic model for AdsGuidanceQEExposure fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_exposed: bool | None = Field(None, alias="account_exposed")


class PageCategoryFields(BaseModel):
    """Pydantic model for PageCategory fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    api_enum: str | None = Field(None, alias="api_enum")
    fb_page_categories: list[PageCategoryFields] | None = Field(None, alias="fb_page_categories")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class PageGameBotQuotaInformationFields(BaseModel):
    """Pydantic model for PageGameBotQuotaInformation fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    count: int | None = Field(None, alias="count")
    time_window: int | None = Field(None, alias="time_window")


class AdsPixelItemPriceFields(BaseModel):
    """Pydantic model for AdsPixelItemPrice fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    date: str | None = Field(None, alias="date")
    item_price_coverage: str | None = Field(None, alias="item_price_coverage")


class AdAccountRecommendedCamapaignBudgetFields(BaseModel):
    """Pydantic model for AdAccountRecommendedCamapaignBudget fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    daily: str | None = Field(None, alias="daily")
    lifetime: str | None = Field(None, alias="lifetime")
    objective: str | None = Field(None, alias="objective")


class AdAssetFeedAdditionalDataPageNudgeMessageFields(BaseModel):
    """Pydantic model for AdAssetFeedAdditionalDataPageNudgeMessage fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    enabled: bool | None = Field(None, alias="enabled")
    quick_replies: list[dict[str, Any]] | None = Field(None, alias="quick_replies")
    text: str | None = Field(None, alias="text")


class AdAssetFeedSpecTitleFields(BaseModel):
    """Pydantic model for AdAssetFeedSpecTitle fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adlabels: list[AdAssetFeedSpecAssetLabelFields] | None = Field(None, alias="adlabels")
    text: str | None = Field(None, alias="text")
    url_tags: str | None = Field(None, alias="url_tags")


class AdCreativeLinkDataChildAttachmentFields(BaseModel):
    """Pydantic model for AdCreativeLinkDataChildAttachment fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    call_to_action: AdCreativeLinkDataCallToActionFields | None = Field(
        None, alias="call_to_action"
    )
    caption: str | None = Field(None, alias="caption")
    description: str | None = Field(None, alias="description")
    image_crops: AdsImageCropsFields | None = Field(None, alias="image_crops")
    image_hash: str | None = Field(None, alias="image_hash")
    link: str | None = Field(None, alias="link")
    name: str | None = Field(None, alias="name")
    picture: str | None = Field(None, alias="picture")
    place_data: AdCreativePlaceDataFields | None = Field(None, alias="place_data")
    static_card: bool | None = Field(None, alias="static_card")
    video_id: str | None = Field(None, alias="video_id")


class AdCreativeAssetGroupsSpecFields(BaseModel):
    """Pydantic model for AdCreativeAssetGroupsSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    groups: list[dict[str, Any]] | None = Field(None, alias="groups")
    origin: str | None = Field(None, alias="origin")


class WhatsAppBusinessPartnerClientVerificationSubmissionFields(BaseModel):
    """Pydantic model for WhatsAppBusinessPartnerClientVerificationSubmission fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    client_business_id: str | None = Field(None, alias="client_business_id")
    id: str | None = Field(None, alias="id")
    rejection_reasons: list[dict[str, Any]] | None = Field(None, alias="rejection_reasons")
    submitted_info: dict[str, Any] | None = Field(None, alias="submitted_info")
    submitted_time: datetime | None = Field(None, alias="submitted_time")
    update_time: datetime | None = Field(None, alias="update_time")
    verification_status: dict[str, Any] | None = Field(None, alias="verification_status")


class AgeRangeFields(BaseModel):
    """Pydantic model for AgeRange fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    max: int | None = Field(None, alias="max")
    min: int | None = Field(None, alias="min")


class AdCreativePostClickConfigurationFields(BaseModel):
    """Pydantic model for AdCreativePostClickConfiguration fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    post_click_item_description: str | None = Field(None, alias="post_click_item_description")
    post_click_item_headline: str | None = Field(None, alias="post_click_item_headline")


class LinkedInstagramAccountDataFields(BaseModel):
    """Pydantic model for LinkedInstagramAccountData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    access_token: str | None = Field(None, alias="access_token")
    analytics_claim: str | None = Field(None, alias="analytics_claim")
    full_name: str | None = Field(None, alias="full_name")
    profile_picture_url: str | None = Field(None, alias="profile_picture_url")
    user_id: str | None = Field(None, alias="user_id")
    user_name: str | None = Field(None, alias="user_name")


class FBPayButtonLoginFields(BaseModel):
    """Pydantic model for FBPayButtonLogin fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pass  # No fields defined


class CRMAddressFields(BaseModel):
    """Pydantic model for CRMAddress fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    city: str | None = Field(None, alias="city")
    cnpj_tax_id: str | None = Field(None, alias="cnpj_tax_id")
    country: str | None = Field(None, alias="country")
    id: str | None = Field(None, alias="id")
    postal_code: str | None = Field(None, alias="postal_code")
    registration_label: str | None = Field(None, alias="registration_label")
    registration_number: str | None = Field(None, alias="registration_number")
    state: str | None = Field(None, alias="state")
    street1: str | None = Field(None, alias="street1")
    street2: str | None = Field(None, alias="street2")
    street3: str | None = Field(None, alias="street3")
    street4: str | None = Field(None, alias="street4")
    validation_status: str | None = Field(None, alias="validation_status")
    vat_tax_id: str | None = Field(None, alias="vat_tax_id")


class AdAccountSmartSuggestedAdsFields(BaseModel):
    """Pydantic model for AdAccountSmartSuggestedAds fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_creative_spec: str | None = Field(None, alias="ad_creative_spec")
    description: str | None = Field(None, alias="description")
    guidance_spec: list[str] | None = Field(None, alias="guidance_spec")
    thumbnail_url: str | None = Field(None, alias="thumbnail_url")


class CustomAudienceCapabilitiesFields(BaseModel):
    """Pydantic model for CustomAudienceCapabilities fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    capabilities: dict[str, Any] | None = Field(None, alias="capabilities")


class ALMEventFields(BaseModel):
    """Pydantic model for ALMEvent fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_account_ids: list[str] | None = Field(None, alias="ad_account_ids")
    campaign_ids: list[str] | None = Field(None, alias="campaign_ids")
    channel: str | None = Field(None, alias="channel")
    event: str | None = Field(None, alias="event")
    event_time: datetime | None = Field(None, alias="event_time")
    guidance: str | None = Field(None, alias="guidance")
    guidance_detail: str | None = Field(None, alias="guidance_detail")
    id: str | None = Field(None, alias="id")
    parent_advertiser_ids: list[str] | None = Field(None, alias="parent_advertiser_ids")
    reseller_business_id: str | None = Field(None, alias="reseller_business_id")
    sub_channel: str | None = Field(None, alias="sub_channel")
    user_id: str | None = Field(None, alias="user_id")


class CASSSetupOfflineEventSetProgressFields(BaseModel):
    """Pydantic model for CASSSetupOfflineEventSetProgress fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pass  # No fields defined


class PublisherDeliveryReportFields(BaseModel):
    """Pydantic model for PublisherDeliveryReport fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    content_types: list[str] | None = Field(None, alias="content_types")
    estimated_impressions: int | None = Field(None, alias="estimated_impressions")
    name: str | None = Field(None, alias="name")
    status: str | None = Field(None, alias="status")
    url: str | None = Field(None, alias="url")


class AdsPixelCapabilityOverrideFields(BaseModel):
    """Pydantic model for AdsPixelCapabilityOverride fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    capability: str | None = Field(None, alias="capability")
    id: str | None = Field(None, alias="id")
    override_value: str | None = Field(None, alias="override_value")
    reason: str | None = Field(None, alias="reason")


class FinanceObjectFields(BaseModel):
    """Pydantic model for FinanceObject fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    finance_permission: str | None = Field(None, alias="finance_permission")
    user: dict[str, Any] | None = Field(None, alias="user")


class MIXInsightsResultFields(BaseModel):
    """Pydantic model for MIXInsightsResult fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    daily_age_gender_breakdown: list[dict[str, list[dict[str, int]]]] | None = Field(
        None, alias="daily_age_gender_breakdown"
    )
    daily_audio_library_values: list[dict[str, int]] | None = Field(
        None, alias="daily_audio_library_values"
    )
    daily_ugc_values: list[dict[str, int]] | None = Field(None, alias="daily_ugc_values")
    daily_values: list[dict[str, int]] | None = Field(None, alias="daily_values")
    metric: str | None = Field(None, alias="metric")
    monthly_audio_library_values: list[dict[str, int]] | None = Field(
        None, alias="monthly_audio_library_values"
    )
    monthly_ugc_values: list[dict[str, int]] | None = Field(None, alias="monthly_ugc_values")
    monthly_values: list[dict[str, int]] | None = Field(None, alias="monthly_values")
    percent_growth: float | None = Field(None, alias="percent_growth")
    shielded_fields: list[dict[str, list[dict[str, bool]]]] | None = Field(
        None, alias="shielded_fields"
    )
    total_age_gender_breakdown: list[dict[str, int]] | None = Field(
        None, alias="total_age_gender_breakdown"
    )
    total_audio_library_value: int | None = Field(None, alias="total_audio_library_value")
    total_country_breakdown: list[dict[str, int]] | None = Field(
        None, alias="total_country_breakdown"
    )
    total_locale_breakdown: list[dict[str, int]] | None = Field(
        None, alias="total_locale_breakdown"
    )
    total_product_breakdown: list[dict[str, int]] | None = Field(
        None, alias="total_product_breakdown"
    )
    total_ugc_value: int | None = Field(None, alias="total_ugc_value")
    total_value: int | None = Field(None, alias="total_value")
    trending_age: list[dict[str, list[dict[str, float]]]] | None = Field(None, alias="trending_age")
    trending_gender: list[dict[str, list[dict[str, float]]]] | None = Field(
        None, alias="trending_gender"
    )
    trending_interest: list[dict[str, list[dict[str, float]]]] | None = Field(
        None, alias="trending_interest"
    )
    trending_territory: list[dict[str, list[dict[str, float]]]] | None = Field(
        None, alias="trending_territory"
    )


class PageDirectIntegrationCrmWithLeadsAccessFields(BaseModel):
    """Pydantic model for PageDirectIntegrationCrmWithLeadsAccess fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    can_access_leads: bool | None = Field(None, alias="can_access_leads")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class PagePublisherFields(BaseModel):
    """Pydantic model for PagePublisher fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    global_parent_id: str | None = Field(None, alias="global_parent_id")
    icon: str | None = Field(None, alias="icon")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    url: str | None = Field(None, alias="url")


class StatusFields(BaseModel):
    """Pydantic model for Status fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    event: EventFields | None = Field(None, alias="event")
    from_: dict[str, Any] | None = Field(None, alias="from")
    id: str | None = Field(None, alias="id")
    message: str | None = Field(None, alias="message")
    place: PlaceFields | None = Field(None, alias="place")
    updated_time: datetime | None = Field(None, alias="updated_time")


class ContextualBundlingSpecFields(BaseModel):
    """Pydantic model for ContextualBundlingSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    status: str | None = Field(None, alias="status")


class RawCustomAudienceFields(BaseModel):
    """Pydantic model for RawCustomAudience fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class WhatsappSubscribedAppsInfoFields(BaseModel):
    """Pydantic model for WhatsappSubscribedAppsInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    page_whatsapp_number: str | None = Field(None, alias="page_whatsapp_number")
    subscribed_apps: list[dict[str, Any]] | None = Field(None, alias="subscribed_apps")


class FundingSourceDetailsFields(BaseModel):
    """Pydantic model for FundingSourceDetails fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    coupon: FundingSourceDetailsCouponFields | None = Field(None, alias="coupon")
    coupons: list[FundingSourceDetailsCouponFields] | None = Field(None, alias="coupons")
    display_string: str | None = Field(None, alias="display_string")
    id: str | None = Field(None, alias="id")
    type: int | None = Field(None, alias="type")


class OmegaCustomerTrxFields(BaseModel):
    """Pydantic model for OmegaCustomerTrx fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_account_ids: list[str] | None = Field(None, alias="ad_account_ids")
    advertiser_name: str | None = Field(None, alias="advertiser_name")
    amount: str | None = Field(None, alias="amount")
    amount_due: CurrencyAmountFields | None = Field(None, alias="amount_due")
    billed_amount_details: dict[str, Any] | None = Field(None, alias="billed_amount_details")
    billing_period: str | None = Field(None, alias="billing_period")
    cdn_download_uri: str | None = Field(None, alias="cdn_download_uri")
    currency: str | None = Field(None, alias="currency")
    download_uri: str | None = Field(None, alias="download_uri")
    due_date: datetime | None = Field(None, alias="due_date")
    entity: str | None = Field(None, alias="entity")
    id: str | None = Field(None, alias="id")
    invoice_date: datetime | None = Field(None, alias="invoice_date")
    invoice_id: str | None = Field(None, alias="invoice_id")
    invoice_type: str | None = Field(None, alias="invoice_type")
    liability_type: str | None = Field(None, alias="liability_type")
    payment_status: str | None = Field(None, alias="payment_status")
    payment_term: str | None = Field(None, alias="payment_term")
    type: str | None = Field(None, alias="type")


class AdLightAdgroupFields(BaseModel):
    """Pydantic model for AdLightAdgroup fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adset_id: str | None = Field(None, alias="adset_id")
    id: str | None = Field(None, alias="id")


class NullNodeFields(BaseModel):
    """Pydantic model for NullNode fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    pass  # No fields defined


class TargetingMarketingMessageChannelsFields(BaseModel):
    """Pydantic model for TargetingMarketingMessageChannels fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    whatsapp: IDNameFields | None = Field(None, alias="whatsapp")


class AdAccountPaymentOptionsFields(BaseModel):
    """Pydantic model for AdAccountPaymentOptions fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    available_altpay_options: list[dict[str, Any]] | None = Field(
        None, alias="available_altpay_options"
    )
    available_card_types: list[str] | None = Field(None, alias="available_card_types")
    available_payment_options: list[str] | None = Field(None, alias="available_payment_options")
    existing_payment_methods: list[dict[str, Any]] | None = Field(
        None, alias="existing_payment_methods"
    )


class PaymentSubscriptionFields(BaseModel):
    """Pydantic model for PaymentSubscription fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    amount: str | None = Field(None, alias="amount")
    app_param_data: str | None = Field(None, alias="app_param_data")
    application: ApplicationFields | None = Field(None, alias="application")
    billing_period: str | None = Field(None, alias="billing_period")
    canceled_reason: str | None = Field(None, alias="canceled_reason")
    created_time: datetime | None = Field(None, alias="created_time")
    currency: str | None = Field(None, alias="currency")
    id: str | None = Field(None, alias="id")
    last_payment: PaymentEnginePaymentFields | None = Field(None, alias="last_payment")
    next_bill_time: datetime | None = Field(None, alias="next_bill_time")
    next_period_amount: str | None = Field(None, alias="next_period_amount")
    next_period_currency: str | None = Field(None, alias="next_period_currency")
    next_period_product: str | None = Field(None, alias="next_period_product")
    payment_status: str | None = Field(None, alias="payment_status")
    pending_cancel: bool | None = Field(None, alias="pending_cancel")
    period_start_time: datetime | None = Field(None, alias="period_start_time")
    product: str | None = Field(None, alias="product")
    status: str | None = Field(None, alias="status")
    test: int | None = Field(None, alias="test")
    trial_amount: str | None = Field(None, alias="trial_amount")
    trial_currency: str | None = Field(None, alias="trial_currency")
    trial_expiry_time: datetime | None = Field(None, alias="trial_expiry_time")
    updated_time: datetime | None = Field(None, alias="updated_time")
    user: UserFields | None = Field(None, alias="user")


class PartnerStudyFields(BaseModel):
    """Pydantic model for PartnerStudy fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    additional_info: str | None = Field(None, alias="additional_info")
    brand: str | None = Field(None, alias="brand")
    client_name: str | None = Field(None, alias="client_name")
    emails: str | None = Field(None, alias="emails")
    id: str | None = Field(None, alias="id")
    input_ids: list[str] | None = Field(None, alias="input_ids")
    is_export: bool | None = Field(None, alias="is_export")
    lift_study: AdStudyFields | None = Field(None, alias="lift_study")
    location: str | None = Field(None, alias="location")
    match_file_ds: str | None = Field(None, alias="match_file_ds")
    name: str | None = Field(None, alias="name")
    partner_defined_id: str | None = Field(None, alias="partner_defined_id")
    partner_household_graph_dataset_id: str | None = Field(
        None, alias="partner_household_graph_dataset_id"
    )
    status: str | None = Field(None, alias="status")
    study_end_date: datetime | None = Field(None, alias="study_end_date")
    study_start_date: datetime | None = Field(None, alias="study_start_date")
    study_type: str | None = Field(None, alias="study_type")
    submit_date: datetime | None = Field(None, alias="submit_date")


class AdsStartYourDayWidgetFields(BaseModel):
    """Pydantic model for AdsStartYourDayWidget fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    widget_id: str | None = Field(None, alias="widget_id")


class ShadowIGMediaBuilderFields(BaseModel):
    """Pydantic model for ShadowIGMediaBuilder fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    copyright_check_status: IGVideoCopyrightCheckStatusFields | None = Field(
        None, alias="copyright_check_status"
    )
    id: str | None = Field(None, alias="id")
    status: str | None = Field(None, alias="status")
    status_code: str | None = Field(None, alias="status_code")
    video_status: IGResumableVideoUploadStatusFields | None = Field(None, alias="video_status")


class AdAssetFeedSpecVideoFields(BaseModel):
    """Pydantic model for AdAssetFeedSpecVideo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adlabels: list[AdAssetFeedSpecAssetLabelFields] | None = Field(None, alias="adlabels")
    caption_ids: list[str] | None = Field(None, alias="caption_ids")
    thumbnail_hash: str | None = Field(None, alias="thumbnail_hash")
    thumbnail_url: str | None = Field(None, alias="thumbnail_url")
    url_tags: str | None = Field(None, alias="url_tags")
    video_id: str | None = Field(None, alias="video_id")


class AdAccountUserPermissionsFields(BaseModel):
    """Pydantic model for AdAccountUserPermissions fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    business: BusinessFields | None = Field(None, alias="business")
    business_persona: dict[str, Any] | None = Field(None, alias="business_persona")
    created_by: UserFields | None = Field(None, alias="created_by")
    created_time: datetime | None = Field(None, alias="created_time")
    email: str | None = Field(None, alias="email")
    status: str | None = Field(None, alias="status")
    tasks: list[str] | None = Field(None, alias="tasks")
    updated_by: UserFields | None = Field(None, alias="updated_by")
    updated_time: datetime | None = Field(None, alias="updated_time")
    user: UserFields | None = Field(None, alias="user")


class ShadowIGMediaCollaboratorsFields(BaseModel):
    """Pydantic model for ShadowIGMediaCollaborators fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    invite_status: str | None = Field(None, alias="invite_status")
    username: str | None = Field(None, alias="username")


class TargetingProductAudienceSubSpecFields(BaseModel):
    """Pydantic model for TargetingProductAudienceSubSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    retention_seconds: str | None = Field(None, alias="retention_seconds")
    rule: str | None = Field(None, alias="rule")


class PagePartnerWithLeadsAccessFields(BaseModel):
    """Pydantic model for PagePartnerWithLeadsAccess fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    can_access_leads: bool | None = Field(None, alias="can_access_leads")
    partner_business: BusinessFields | None = Field(None, alias="partner_business")
    permitted_tasks: list[str] | None = Field(None, alias="permitted_tasks")


class SiteLinkFields(BaseModel):
    """Pydantic model for SiteLink fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    link_image_hash: str | None = Field(None, alias="link_image_hash")
    link_title: str | None = Field(None, alias="link_title")
    link_type: str | None = Field(None, alias="link_type")
    link_url: str | None = Field(None, alias="link_url")


class CatalogWebsiteSettingsFields(BaseModel):
    """Pydantic model for CatalogWebsiteSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    is_allowed_to_crawl: bool | None = Field(None, alias="is_allowed_to_crawl")


class CloudGameFields(BaseModel):
    """Pydantic model for CloudGame fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")
    owner: ProfileFields | None = Field(None, alias="owner")
    playable_ad_file_size: int | None = Field(None, alias="playable_ad_file_size")
    playable_ad_orientation: str | None = Field(None, alias="playable_ad_orientation")
    playable_ad_package_name: str | None = Field(None, alias="playable_ad_package_name")
    playable_ad_reject_reason: str | None = Field(None, alias="playable_ad_reject_reason")
    playable_ad_status: str | None = Field(None, alias="playable_ad_status")
    playable_ad_upload_time: datetime | None = Field(None, alias="playable_ad_upload_time")


class AppRequestFormerRecipientFields(BaseModel):
    """Pydantic model for AppRequestFormerRecipient fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    recipient_id: str | None = Field(None, alias="recipient_id")


class SystemUserFields(BaseModel):
    """Pydantic model for SystemUser fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    created_by: UserFields | None = Field(None, alias="created_by")
    created_time: datetime | None = Field(None, alias="created_time")
    finance_permission: str | None = Field(None, alias="finance_permission")
    id: str | None = Field(None, alias="id")
    ip_permission: str | None = Field(None, alias="ip_permission")
    name: str | None = Field(None, alias="name")


class VideoCopyrightRuleFields(BaseModel):
    """Pydantic model for VideoCopyrightRule fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    condition_groups: list[VideoCopyrightConditionGroupFields] | None = Field(
        None, alias="condition_groups"
    )
    copyrights: list[str] | None = Field(None, alias="copyrights")
    created_date: datetime | None = Field(None, alias="created_date")
    creator: UserFields | None = Field(None, alias="creator")
    id: str | None = Field(None, alias="id")
    is_in_migration: bool | None = Field(None, alias="is_in_migration")
    name: str | None = Field(None, alias="name")


class PublisherWhiteListFields(BaseModel):
    """Pydantic model for PublisherWhiteList fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    business_owner_id: str | None = Field(None, alias="business_owner_id")
    id: str | None = Field(None, alias="id")
    last_updated_time: datetime | None = Field(None, alias="last_updated_time")
    last_updated_user: str | None = Field(None, alias="last_updated_user")
    name: str | None = Field(None, alias="name")
    placement_type: str | None = Field(None, alias="placement_type")


class TargetingDynamicRuleFields(BaseModel):
    """Pydantic model for TargetingDynamicRule fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    action_type: str | None = Field(None, alias="action.type")
    ad_group_id: str | None = Field(None, alias="ad_group_id")
    campaign_group_id: str | None = Field(None, alias="campaign_group_id")
    campaign_id: str | None = Field(None, alias="campaign_id")
    impression_count: str | None = Field(None, alias="impression_count")
    page_id: str | None = Field(None, alias="page_id")
    post: str | None = Field(None, alias="post")
    retention_seconds: str | None = Field(None, alias="retention_seconds")


class WhatsAppBusinessHealthStatusForMessageSendFields(BaseModel):
    """Pydantic model for WhatsAppBusinessHealthStatusForMessageSend fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    can_send_message: str | None = Field(None, alias="can_send_message")
    entities: list[WhatsAppBusinessHealthStatusFields] | None = Field(None, alias="entities")


class VideoCopyrightGeoGateFields(BaseModel):
    """Pydantic model for VideoCopyrightGeoGate fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    excluded_countries: list[str] | None = Field(None, alias="excluded_countries")
    included_countries: list[str] | None = Field(None, alias="included_countries")


class PageStartInfoFields(BaseModel):
    """Pydantic model for PageStartInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    date: dict[str, Any] | None = Field(None, alias="date")
    type: str | None = Field(None, alias="type")


class AdsPixelMicrodataStatsFields(BaseModel):
    """Pydantic model for AdsPixelMicrodataStats fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    allowed_domains: list[str] | None = Field(None, alias="allowed_domains")
    errors_stats_for_time_ranges: list[dict[str, Any]] | None = Field(
        None, alias="errors_stats_for_time_ranges"
    )
    has_valid_events: bool | None = Field(None, alias="has_valid_events")
    suggested_allowed_domains_count_max: int | None = Field(
        None, alias="suggested_allowed_domains_count_max"
    )
    suggested_trusted_domains: list[str] | None = Field(None, alias="suggested_trusted_domains")


class AudioVisualReferenceMatchFields(BaseModel):
    """Pydantic model for AudioVisualReferenceMatch fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    audio_conflicting_segments: list[dict[str, Any]] | None = Field(
        None, alias="audio_conflicting_segments"
    )
    audio_current_conflict_resolved_segments: list[dict[str, Any]] | None = Field(
        None, alias="audio_current_conflict_resolved_segments"
    )
    audio_segment_resolution_history: list[dict[str, Any]] | None = Field(
        None, alias="audio_segment_resolution_history"
    )
    conflict_status: str | None = Field(None, alias="conflict_status")
    conflict_type: str | None = Field(None, alias="conflict_type")
    conflicting_countries: list[str] | None = Field(None, alias="conflicting_countries")
    country_resolution_history: list[dict[str, list[dict[str, Any]]]] | None = Field(
        None, alias="country_resolution_history"
    )
    creation_time: datetime | None = Field(None, alias="creation_time")
    current_conflict_resolved_countries: list[dict[str, dict[str, Any]]] | None = Field(
        None, alias="current_conflict_resolved_countries"
    )
    displayed_match_state: str | None = Field(None, alias="displayed_match_state")
    dispute_form_data_entries_with_translations: list[dict[str, Any]] | None = Field(
        None, alias="dispute_form_data_entries_with_translations"
    )
    expiration_time: datetime | None = Field(None, alias="expiration_time")
    id: str | None = Field(None, alias="id")
    is_disputable: bool | None = Field(None, alias="is_disputable")
    match_state: str | None = Field(None, alias="match_state")
    matched_overlap_percentage: float | None = Field(None, alias="matched_overlap_percentage")
    matched_owner_match_duration_in_sec: float | None = Field(
        None, alias="matched_owner_match_duration_in_sec"
    )
    matched_reference_owner: ProfileFields | None = Field(None, alias="matched_reference_owner")
    modification_history: list[dict[str, Any]] | None = Field(None, alias="modification_history")
    num_matches_on_matched_side: int | None = Field(None, alias="num_matches_on_matched_side")
    num_matches_on_ref_side: int | None = Field(None, alias="num_matches_on_ref_side")
    ref_owner_match_duration_in_sec: float | None = Field(
        None, alias="ref_owner_match_duration_in_sec"
    )
    reference_overlap_percentage: float | None = Field(None, alias="reference_overlap_percentage")
    reference_owner: ProfileFields | None = Field(None, alias="reference_owner")
    rejection_form_data_entries_with_translations: list[dict[str, Any]] | None = Field(
        None, alias="rejection_form_data_entries_with_translations"
    )
    resolution_details: str | None = Field(None, alias="resolution_details")
    resolution_reason: str | None = Field(None, alias="resolution_reason")
    update_time: datetime | None = Field(None, alias="update_time")
    views_on_matched_side: int | None = Field(None, alias="views_on_matched_side")
    visual_conflicting_segments: list[dict[str, Any]] | None = Field(
        None, alias="visual_conflicting_segments"
    )
    visual_current_conflict_resolved_segments: list[dict[str, Any]] | None = Field(
        None, alias="visual_current_conflict_resolved_segments"
    )
    visual_segment_resolution_history: list[dict[str, Any]] | None = Field(
        None, alias="visual_segment_resolution_history"
    )


class DayPartFields(BaseModel):
    """Pydantic model for DayPart fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    days: list[int] | None = Field(None, alias="days")
    end_minute: int | None = Field(None, alias="end_minute")
    start_minute: int | None = Field(None, alias="start_minute")
    timezone_type: str | None = Field(None, alias="timezone_type")


class ProductItemLocalInfoLatLongShapeFields(BaseModel):
    """Pydantic model for ProductItemLocalInfoLatLongShape fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    latitude: float | None = Field(None, alias="latitude")
    longitude: float | None = Field(None, alias="longitude")


class AdDefaultValuesFields(BaseModel):
    """Pydantic model for AdDefaultValues fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    campaign_group: dict[str, Any] | None = Field(None, alias="campaign_group")


class CustomConversionFields(BaseModel):
    """Pydantic model for CustomConversion fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    aggregation_rule: str | None = Field(None, alias="aggregation_rule")
    business: BusinessFields | None = Field(None, alias="business")
    creation_time: datetime | None = Field(None, alias="creation_time")
    custom_event_type: dict[str, Any] | None = Field(None, alias="custom_event_type")
    data_sources: list[ExternalEventSourceFields] | None = Field(None, alias="data_sources")
    default_conversion_value: int | None = Field(None, alias="default_conversion_value")
    description: str | None = Field(None, alias="description")
    event_source_type: str | None = Field(None, alias="event_source_type")
    first_fired_time: datetime | None = Field(None, alias="first_fired_time")
    id: str | None = Field(None, alias="id")
    is_archived: bool | None = Field(None, alias="is_archived")
    is_unavailable: bool | None = Field(None, alias="is_unavailable")
    last_fired_time: datetime | None = Field(None, alias="last_fired_time")
    name: str | None = Field(None, alias="name")
    offline_conversion_data_set: OfflineConversionDataSetFields | None = Field(
        None, alias="offline_conversion_data_set"
    )
    pixel: AdsPixelFields | None = Field(None, alias="pixel")
    retention_days: int | None = Field(None, alias="retention_days")
    rule: str | None = Field(None, alias="rule")


class UserDeviceFields(BaseModel):
    """Pydantic model for UserDevice fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    hardware: str | None = Field(None, alias="hardware")
    os: str | None = Field(None, alias="os")


class CommerceMerchantSettingsSetupStatusFields(BaseModel):
    """Pydantic model for CommerceMerchantSettingsSetupStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    deals_setup: str | None = Field(None, alias="deals_setup")
    marketplace_approval_status: str | None = Field(None, alias="marketplace_approval_status")
    marketplace_approval_status_details: dict[str, Any] | None = Field(
        None, alias="marketplace_approval_status_details"
    )
    payment_setup: str | None = Field(None, alias="payment_setup")
    review_status: dict[str, Any] | None = Field(None, alias="review_status")
    shop_setup: str | None = Field(None, alias="shop_setup")


class ProductCatalogHotelRoomsBatchFields(BaseModel):
    """Pydantic model for ProductCatalogHotelRoomsBatch fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    errors: list[dict[str, Any]] | None = Field(None, alias="errors")
    errors_total_count: int | None = Field(None, alias="errors_total_count")
    handle: str | None = Field(None, alias="handle")
    status: str | None = Field(None, alias="status")


class AdCreativeProductDataFields(BaseModel):
    """Pydantic model for AdCreativeProductData fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    product_id: str | None = Field(None, alias="product_id")
    product_source: str | None = Field(None, alias="product_source")


class PageFields(BaseModel):
    """Pydantic model for Page fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    about: str | None = Field(None, alias="about")
    access_token: str | None = Field(None, alias="access_token")
    ad_campaign: AdSetFields | None = Field(None, alias="ad_campaign")
    affiliation: str | None = Field(None, alias="affiliation")
    app_id: str | None = Field(None, alias="app_id")
    artists_we_like: str | None = Field(None, alias="artists_we_like")
    attire: str | None = Field(None, alias="attire")
    available_promo_offer_ids: list[dict[str, list[dict[str, str]]]] | None = Field(
        None, alias="available_promo_offer_ids"
    )
    awards: str | None = Field(None, alias="awards")
    band_interests: str | None = Field(None, alias="band_interests")
    band_members: str | None = Field(None, alias="band_members")
    best_page: PageFields | None = Field(None, alias="best_page")
    bio: str | None = Field(None, alias="bio")
    birthday: str | None = Field(None, alias="birthday")
    booking_agent: str | None = Field(None, alias="booking_agent")
    breaking_news_usage: dict[str, Any] | None = Field(None, alias="breaking_news_usage")
    built: str | None = Field(None, alias="built")
    business: dict[str, Any] | None = Field(None, alias="business")
    can_checkin: bool | None = Field(None, alias="can_checkin")
    can_post: bool | None = Field(None, alias="can_post")
    category: str | None = Field(None, alias="category")
    category_list: list[PageCategoryFields] | None = Field(None, alias="category_list")
    checkins: int | None = Field(None, alias="checkins")
    company_overview: str | None = Field(None, alias="company_overview")
    connected_instagram_account: IGUserFields | None = Field(
        None, alias="connected_instagram_account"
    )
    connected_page_backed_instagram_account: IGUserFields | None = Field(
        None, alias="connected_page_backed_instagram_account"
    )
    contact_address: MailingAddressFields | None = Field(None, alias="contact_address")
    copyright_whitelisted_ig_partners: list[str] | None = Field(
        None, alias="copyright_whitelisted_ig_partners"
    )
    country_page_likes: int | None = Field(None, alias="country_page_likes")
    cover: CoverPhotoFields | None = Field(None, alias="cover")
    culinary_team: str | None = Field(None, alias="culinary_team")
    current_location: str | None = Field(None, alias="current_location")
    delivery_and_pickup_option_info: list[str] | None = Field(
        None, alias="delivery_and_pickup_option_info"
    )
    description: str | None = Field(None, alias="description")
    description_html: str | None = Field(None, alias="description_html")
    differently_open_offerings: list[dict[str, bool]] | None = Field(
        None, alias="differently_open_offerings"
    )
    directed_by: str | None = Field(None, alias="directed_by")
    display_subtext: str | None = Field(None, alias="display_subtext")
    displayed_message_response_time: str | None = Field(
        None, alias="displayed_message_response_time"
    )
    does_viewer_have_page_permission_link_ig: bool | None = Field(
        None, alias="does_viewer_have_page_permission_link_ig"
    )
    emails: list[str] | None = Field(None, alias="emails")
    engagement: EngagementFields | None = Field(None, alias="engagement")
    fan_count: int | None = Field(None, alias="fan_count")
    featured_video: AdVideoFields | None = Field(None, alias="featured_video")
    features: str | None = Field(None, alias="features")
    followers_count: int | None = Field(None, alias="followers_count")
    food_styles: list[str] | None = Field(None, alias="food_styles")
    founded: str | None = Field(None, alias="founded")
    general_info: str | None = Field(None, alias="general_info")
    general_manager: str | None = Field(None, alias="general_manager")
    genre: str | None = Field(None, alias="genre")
    global_brand_page_name: str | None = Field(None, alias="global_brand_page_name")
    global_brand_root_id: str | None = Field(None, alias="global_brand_root_id")
    has_added_app: bool | None = Field(None, alias="has_added_app")
    has_lead_access: HasLeadAccessFields | None = Field(None, alias="has_lead_access")
    has_transitioned_to_new_page_experience: bool | None = Field(
        None, alias="has_transitioned_to_new_page_experience"
    )
    has_whatsapp_business_number: bool | None = Field(None, alias="has_whatsapp_business_number")
    has_whatsapp_number: bool | None = Field(None, alias="has_whatsapp_number")
    hometown: str | None = Field(None, alias="hometown")
    hours: dict[str, str] | None = Field(None, alias="hours")
    id: str | None = Field(None, alias="id")
    impressum: str | None = Field(None, alias="impressum")
    influences: str | None = Field(None, alias="influences")
    instagram_business_account: IGUserFields | None = Field(
        None, alias="instagram_business_account"
    )
    is_always_open: bool | None = Field(None, alias="is_always_open")
    is_calling_eligible: bool | None = Field(None, alias="is_calling_eligible")
    is_chain: bool | None = Field(None, alias="is_chain")
    is_community_page: bool | None = Field(None, alias="is_community_page")
    is_eligible_for_branded_content: bool | None = Field(
        None, alias="is_eligible_for_branded_content"
    )
    is_eligible_for_disable_connect_ig_btn_for_non_page_admin_am_web: bool | None = Field(
        None, alias="is_eligible_for_disable_connect_ig_btn_for_non_page_admin_am_web"
    )
    is_messenger_bot_get_started_enabled: bool | None = Field(
        None, alias="is_messenger_bot_get_started_enabled"
    )
    is_messenger_platform_bot: bool | None = Field(None, alias="is_messenger_platform_bot")
    is_owned: bool | None = Field(None, alias="is_owned")
    is_permanently_closed: bool | None = Field(None, alias="is_permanently_closed")
    is_published: bool | None = Field(None, alias="is_published")
    is_unclaimed: bool | None = Field(None, alias="is_unclaimed")
    is_verified: bool | None = Field(None, alias="is_verified")
    is_webhooks_subscribed: bool | None = Field(None, alias="is_webhooks_subscribed")
    keywords: dict[str, Any] | None = Field(None, alias="keywords")
    leadgen_tos_acceptance_time: datetime | None = Field(None, alias="leadgen_tos_acceptance_time")
    leadgen_tos_accepted: bool | None = Field(None, alias="leadgen_tos_accepted")
    leadgen_tos_accepting_user: UserFields | None = Field(None, alias="leadgen_tos_accepting_user")
    link: str | None = Field(None, alias="link")
    location: LocationFields | None = Field(None, alias="location")
    members: str | None = Field(None, alias="members")
    merchant_id: str | None = Field(None, alias="merchant_id")
    merchant_review_status: str | None = Field(None, alias="merchant_review_status")
    messaging_feature_status: MessagingFeatureStatusFields | None = Field(
        None, alias="messaging_feature_status"
    )
    messenger_ads_default_icebreakers: list[str] | None = Field(
        None, alias="messenger_ads_default_icebreakers"
    )
    messenger_ads_default_quick_replies: list[str] | None = Field(
        None, alias="messenger_ads_default_quick_replies"
    )
    messenger_ads_quick_replies_type: str | None = Field(
        None, alias="messenger_ads_quick_replies_type"
    )
    mini_shop_storefront: ShopFields | None = Field(None, alias="mini_shop_storefront")
    mission: str | None = Field(None, alias="mission")
    mpg: str | None = Field(None, alias="mpg")
    name: str | None = Field(None, alias="name")
    name_with_location_descriptor: str | None = Field(None, alias="name_with_location_descriptor")
    network: str | None = Field(None, alias="network")
    new_like_count: int | None = Field(None, alias="new_like_count")
    offer_eligible: bool | None = Field(None, alias="offer_eligible")
    overall_star_rating: float | None = Field(None, alias="overall_star_rating")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")
    page_token: str | None = Field(None, alias="page_token")
    parent_page: PageFields | None = Field(None, alias="parent_page")
    parking: PageParkingFields | None = Field(None, alias="parking")
    payment_options: PagePaymentOptionsFields | None = Field(None, alias="payment_options")
    personal_info: str | None = Field(None, alias="personal_info")
    personal_interests: str | None = Field(None, alias="personal_interests")
    pharma_safety_info: str | None = Field(None, alias="pharma_safety_info")
    phone: str | None = Field(None, alias="phone")
    pickup_options: list[str] | None = Field(None, alias="pickup_options")
    place_type: str | None = Field(None, alias="place_type")
    plot_outline: str | None = Field(None, alias="plot_outline")
    preferred_audience: TargetingFields | None = Field(None, alias="preferred_audience")
    press_contact: str | None = Field(None, alias="press_contact")
    price_range: str | None = Field(None, alias="price_range")
    privacy_info_url: str | None = Field(None, alias="privacy_info_url")
    produced_by: str | None = Field(None, alias="produced_by")
    products: str | None = Field(None, alias="products")
    promotion_eligible: bool | None = Field(None, alias="promotion_eligible")
    promotion_ineligible_reason: str | None = Field(None, alias="promotion_ineligible_reason")
    public_transit: str | None = Field(None, alias="public_transit")
    rating_count: int | None = Field(None, alias="rating_count")
    recipient: str | None = Field(None, alias="recipient")
    record_label: str | None = Field(None, alias="record_label")
    release_date: str | None = Field(None, alias="release_date")
    restaurant_services: PageRestaurantServicesFields | None = Field(
        None, alias="restaurant_services"
    )
    restaurant_specialties: PageRestaurantSpecialtiesFields | None = Field(
        None, alias="restaurant_specialties"
    )
    schedule: str | None = Field(None, alias="schedule")
    screenplay_by: str | None = Field(None, alias="screenplay_by")
    season: str | None = Field(None, alias="season")
    single_line_address: str | None = Field(None, alias="single_line_address")
    starring: str | None = Field(None, alias="starring")
    start_info: PageStartInfoFields | None = Field(None, alias="start_info")
    store_code: str | None = Field(None, alias="store_code")
    store_location_descriptor: str | None = Field(None, alias="store_location_descriptor")
    store_number: int | None = Field(None, alias="store_number")
    studio: str | None = Field(None, alias="studio")
    supports_donate_button_in_live_video: bool | None = Field(
        None, alias="supports_donate_button_in_live_video"
    )
    talking_about_count: int | None = Field(None, alias="talking_about_count")
    temporary_status: str | None = Field(None, alias="temporary_status")
    unread_message_count: int | None = Field(None, alias="unread_message_count")
    unread_notif_count: int | None = Field(None, alias="unread_notif_count")
    unseen_message_count: int | None = Field(None, alias="unseen_message_count")
    user_access_expire_time: datetime | None = Field(None, alias="user_access_expire_time")
    username: str | None = Field(None, alias="username")
    verification_status: str | None = Field(None, alias="verification_status")
    voip_info: VoipInfoFields | None = Field(None, alias="voip_info")
    website: str | None = Field(None, alias="website")
    were_here_count: int | None = Field(None, alias="were_here_count")
    whatsapp_number: str | None = Field(None, alias="whatsapp_number")
    written_by: str | None = Field(None, alias="written_by")


class AdCreativeSourcingSpecFields(BaseModel):
    """Pydantic model for AdCreativeSourcingSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    associated_product_set_id: str | None = Field(None, alias="associated_product_set_id")
    brand: dict[str, Any] | None = Field(None, alias="brand")
    dynamic_site_links_spec: dict[str, Any] | None = Field(None, alias="dynamic_site_links_spec")
    enable_social_feedback_preservation: bool | None = Field(
        None, alias="enable_social_feedback_preservation"
    )
    promotion_metadata_spec: list[AdCreativePromotionMetadataSpecFields] | None = Field(
        None, alias="promotion_metadata_spec"
    )
    site_links_spec: list[AdCreativeSiteLinksSpecFields] | None = Field(
        None, alias="site_links_spec"
    )
    source_url: str | None = Field(None, alias="source_url")


class AdCreativeVideoDataMediaElementsFields(BaseModel):
    """Pydantic model for AdCreativeVideoDataMediaElements fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    element_id: str | None = Field(None, alias="element_id")
    element_type: str | None = Field(None, alias="element_type")


class AdCampaignMetricsMetadataFields(BaseModel):
    """Pydantic model for AdCampaignMetricsMetadata fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    boosted_component_optimization: list[str] | None = Field(
        None, alias="boosted_component_optimization"
    )
    creation_flow_tips: list[str] | None = Field(None, alias="creation_flow_tips")
    default_opted_in_placements: list[dict[str, Any]] | None = Field(
        None, alias="default_opted_in_placements"
    )
    delivery_growth_optimizations: list[dict[str, Any]] | None = Field(
        None, alias="delivery_growth_optimizations"
    )
    duplication_flow_tips: list[str] | None = Field(None, alias="duplication_flow_tips")
    edit_flow_tips: list[str] | None = Field(None, alias="edit_flow_tips")


class AdAssetCallToActionTypeFields(BaseModel):
    """Pydantic model for AdAssetCallToActionType fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class ProductCatalogFacetsFields(BaseModel):
    """Pydantic model for ProductCatalogFacets fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    facets: list[dict[str, list[dict[str, Any]]]] | None = Field(None, alias="facets")
    item_count: int | None = Field(None, alias="item_count")


class ScheduledPostFields(BaseModel):
    """Pydantic model for ScheduledPost fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    admin_creator: UserFields | None = Field(None, alias="admin_creator")
    creation_time: datetime | None = Field(None, alias="creation_time")
    feed_audience_description: str | None = Field(None, alias="feed_audience_description")
    feed_targeting: TargetingFields | None = Field(None, alias="feed_targeting")
    id: str | None = Field(None, alias="id")
    is_post_in_good_state: bool | None = Field(None, alias="is_post_in_good_state")
    message: str | None = Field(None, alias="message")
    modified_time: datetime | None = Field(None, alias="modified_time")
    og_action_summary: str | None = Field(None, alias="og_action_summary")
    permalink_url: str | None = Field(None, alias="permalink_url")
    place: PlaceFields | None = Field(None, alias="place")
    privacy_description: str | None = Field(None, alias="privacy_description")
    scheduled_failure_notice: str | None = Field(None, alias="scheduled_failure_notice")
    scheduled_publish_time: datetime | None = Field(None, alias="scheduled_publish_time")
    story_token: str | None = Field(None, alias="story_token")
    thumbnail: str | None = Field(None, alias="thumbnail")
    video_id: str | None = Field(None, alias="video_id")


class AdAccountBillingDatePreferenceFields(BaseModel):
    """Pydantic model for AdAccountBillingDatePreference fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_account: AdAccountFields | None = Field(None, alias="ad_account")
    day_of_month: int | None = Field(None, alias="day_of_month")
    id: str | None = Field(None, alias="id")
    next_bill_date: datetime | None = Field(None, alias="next_bill_date")
    time_created: datetime | None = Field(None, alias="time_created")
    time_effective: datetime | None = Field(None, alias="time_effective")


class OfflineConversionDataSetUploadFields(BaseModel):
    """Pydantic model for OfflineConversionDataSetUpload fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    api_calls: int | None = Field(None, alias="api_calls")
    creation_time: int | None = Field(None, alias="creation_time")
    duplicate_entries: int | None = Field(None, alias="duplicate_entries")
    event_stats: str | None = Field(None, alias="event_stats")
    event_time_max: int | None = Field(None, alias="event_time_max")
    event_time_min: int | None = Field(None, alias="event_time_min")
    first_upload_time: int | None = Field(None, alias="first_upload_time")
    id: str | None = Field(None, alias="id")
    is_excluded_for_lift: bool | None = Field(None, alias="is_excluded_for_lift")
    last_upload_time: int | None = Field(None, alias="last_upload_time")
    match_rate_approx: int | None = Field(None, alias="match_rate_approx")
    matched_entries: int | None = Field(None, alias="matched_entries")
    upload_tag: str | None = Field(None, alias="upload_tag")
    valid_entries: int | None = Field(None, alias="valid_entries")


class CopyrightOwnershipTransferFields(BaseModel):
    """Pydantic model for CopyrightOwnershipTransfer fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    receiving_rights_holder: ProfileFields | None = Field(None, alias="receiving_rights_holder")
    sending_rights_holder: ProfileFields | None = Field(None, alias="sending_rights_holder")
    status: str | None = Field(None, alias="status")
    transfer_territories: list[str] | None = Field(None, alias="transfer_territories")
    transfer_time: datetime | None = Field(None, alias="transfer_time")


class AdCampaignConversionValueExpressionSpecFields(BaseModel):
    """Pydantic model for AdCampaignConversionValueExpressionSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adjustment_sign: str | None = Field(None, alias="adjustment_sign")
    adjustment_weight: int | None = Field(None, alias="adjustment_weight")
    destination_type: str | None = Field(None, alias="destination_type")


class ProfileFields(BaseModel):
    """Pydantic model for Profile fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    can_post: bool | None = Field(None, alias="can_post")
    id: str | None = Field(None, alias="id")
    link: str | None = Field(None, alias="link")
    name: str | None = Field(None, alias="name")
    pic: str | None = Field(None, alias="pic")
    pic_crop: ProfilePictureSourceFields | None = Field(None, alias="pic_crop")
    pic_large: str | None = Field(None, alias="pic_large")
    pic_small: str | None = Field(None, alias="pic_small")
    pic_square: str | None = Field(None, alias="pic_square")
    profile_type: dict[str, Any] | None = Field(None, alias="profile_type")
    username: str | None = Field(None, alias="username")


class MCExperienceConfigForApiFields(BaseModel):
    """Pydantic model for MCExperienceConfigForApi fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    is_campaign_enabled: bool | None = Field(None, alias="is_campaign_enabled")
    is_terms_signed: bool | None = Field(None, alias="is_terms_signed")
    merchant_type: str | None = Field(None, alias="merchant_type")


class AppEventConfigFields(BaseModel):
    """Pydantic model for AppEventConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    breakdowns_config: list[dict[str, Any]] | None = Field(None, alias="breakdowns_config")
    builtin_fields_config: list[dict[str, Any]] | None = Field(None, alias="builtin_fields_config")
    deprecated_events_config: list[dict[str, Any]] | None = Field(
        None, alias="deprecated_events_config"
    )
    events_config: list[dict[str, Any]] | None = Field(None, alias="events_config")
    id: str | None = Field(None, alias="id")
    ios_purchase_validation_secret: str | None = Field(None, alias="ios_purchase_validation_secret")
    is_any_role_able_to_see_restricted_insights: bool | None = Field(
        None, alias="is_any_role_able_to_see_restricted_insights"
    )
    is_implicit_purchase_logging_on_android_supported: bool | None = Field(
        None, alias="is_implicit_purchase_logging_on_android_supported"
    )
    is_implicit_purchase_logging_on_ios_supported: bool | None = Field(
        None, alias="is_implicit_purchase_logging_on_ios_supported"
    )
    is_track_android_app_uninstall_supported: bool | None = Field(
        None, alias="is_track_android_app_uninstall_supported"
    )
    is_track_ios_app_uninstall_supported: bool | None = Field(
        None, alias="is_track_ios_app_uninstall_supported"
    )
    journey_backfill_status: str | None = Field(None, alias="journey_backfill_status")
    journey_conversion_events: list[str] | None = Field(None, alias="journey_conversion_events")
    journey_enabled: bool | None = Field(None, alias="journey_enabled")
    journey_timeout: str | None = Field(None, alias="journey_timeout")
    latest_sdk_versions: dict[str, str] | None = Field(None, alias="latest_sdk_versions")
    log_android_implicit_purchase_events: bool | None = Field(
        None, alias="log_android_implicit_purchase_events"
    )
    log_automatic_analytics_events: bool | None = Field(
        None, alias="log_automatic_analytics_events"
    )
    log_implicit_purchase_events: bool | None = Field(None, alias="log_implicit_purchase_events")
    prev_journey_conversion_events: list[str] | None = Field(
        None, alias="prev_journey_conversion_events"
    )
    query_approximation_accuracy_level: str | None = Field(
        None, alias="query_approximation_accuracy_level"
    )
    query_currency: str | None = Field(None, alias="query_currency")
    query_timezone: str | None = Field(None, alias="query_timezone")
    recent_events_update_time: datetime | None = Field(None, alias="recent_events_update_time")
    session_timeout_interval: int | None = Field(None, alias="session_timeout_interval")
    track_android_app_uninstall: bool | None = Field(None, alias="track_android_app_uninstall")
    track_ios_app_uninstall: bool | None = Field(None, alias="track_ios_app_uninstall")


class AdCampaignStatsFields(BaseModel):
    """Pydantic model for AdCampaignStats fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    account_id: str | None = Field(None, alias="account_id")
    actions: dict[str, Any] | None = Field(None, alias="actions")
    adgroup_id: str | None = Field(None, alias="adgroup_id")
    campaign_id: str | None = Field(None, alias="campaign_id")
    campaign_ids: list[str] | None = Field(None, alias="campaign_ids")
    clicks: int | None = Field(None, alias="clicks")
    end_time: dict[str, Any] | None = Field(None, alias="end_time")
    id: str | None = Field(None, alias="id")
    impressions: str | None = Field(None, alias="impressions")
    inline_actions: dict[str, Any] | None = Field(None, alias="inline_actions")
    io_number: int | None = Field(None, alias="io_number")
    is_completed: bool | None = Field(None, alias="is_completed")
    line_number: int | None = Field(None, alias="line_number")
    newsfeed_position: dict[str, Any] | None = Field(None, alias="newsfeed_position")
    social_clicks: int | None = Field(None, alias="social_clicks")
    social_impressions: str | None = Field(None, alias="social_impressions")
    social_spent: int | None = Field(None, alias="social_spent")
    social_unique_clicks: int | None = Field(None, alias="social_unique_clicks")
    social_unique_impressions: str | None = Field(None, alias="social_unique_impressions")
    spent: int | None = Field(None, alias="spent")
    start_time: dict[str, Any] | None = Field(None, alias="start_time")
    topline_id: str | None = Field(None, alias="topline_id")
    unique_clicks: int | None = Field(None, alias="unique_clicks")
    unique_impressions: str | None = Field(None, alias="unique_impressions")


class CPASLsbImageBankFields(BaseModel):
    """Pydantic model for CPASLsbImageBank fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    ad_group_id: str | None = Field(None, alias="ad_group_id")
    catalog_segment_proxy_id: str | None = Field(None, alias="catalog_segment_proxy_id")
    id: str | None = Field(None, alias="id")


class AdCampaignGroupIncrementalConversionOptimizationConfigFields(BaseModel):
    """Pydantic model for AdCampaignGroupIncrementalConversionOptimizationConfig fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    action_type: str | None = Field(None, alias="action_type")
    ad_study_end_time: datetime | None = Field(None, alias="ad_study_end_time")
    ad_study_id: str | None = Field(None, alias="ad_study_id")
    ad_study_name: str | None = Field(None, alias="ad_study_name")
    ad_study_start_time: datetime | None = Field(None, alias="ad_study_start_time")
    cell_id: str | None = Field(None, alias="cell_id")
    cell_name: str | None = Field(None, alias="cell_name")
    holdout_size: float | None = Field(None, alias="holdout_size")
    ico_type: str | None = Field(None, alias="ico_type")
    objectives: list[dict[str, Any]] | None = Field(None, alias="objectives")


class FlexibleTargetingFields(BaseModel):
    """Pydantic model for FlexibleTargeting fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    behaviors: list[IDNameFields] | None = Field(None, alias="behaviors")
    college_years: list[int] | None = Field(None, alias="college_years")
    connections: list[IDNameFields] | None = Field(None, alias="connections")
    custom_audiences: list[IDNameFields] | None = Field(None, alias="custom_audiences")
    education_majors: list[IDNameFields] | None = Field(None, alias="education_majors")
    education_schools: list[IDNameFields] | None = Field(None, alias="education_schools")
    education_statuses: list[int] | None = Field(None, alias="education_statuses")
    ethnic_affinity: list[IDNameFields] | None = Field(None, alias="ethnic_affinity")
    family_statuses: list[IDNameFields] | None = Field(None, alias="family_statuses")
    friends_of_connections: list[IDNameFields] | None = Field(None, alias="friends_of_connections")
    generation: list[IDNameFields] | None = Field(None, alias="generation")
    home_ownership: list[IDNameFields] | None = Field(None, alias="home_ownership")
    home_type: list[IDNameFields] | None = Field(None, alias="home_type")
    home_value: list[IDNameFields] | None = Field(None, alias="home_value")
    household_composition: list[IDNameFields] | None = Field(None, alias="household_composition")
    income: list[IDNameFields] | None = Field(None, alias="income")
    industries: list[IDNameFields] | None = Field(None, alias="industries")
    interested_in: list[int] | None = Field(None, alias="interested_in")
    interests: list[IDNameFields] | None = Field(None, alias="interests")
    life_events: list[IDNameFields] | None = Field(None, alias="life_events")
    moms: list[IDNameFields] | None = Field(None, alias="moms")
    net_worth: list[IDNameFields] | None = Field(None, alias="net_worth")
    office_type: list[IDNameFields] | None = Field(None, alias="office_type")
    politics: list[IDNameFields] | None = Field(None, alias="politics")
    relationship_statuses: list[int] | None = Field(None, alias="relationship_statuses")
    user_adclusters: list[IDNameFields] | None = Field(None, alias="user_adclusters")
    work_employers: list[IDNameFields] | None = Field(None, alias="work_employers")
    work_positions: list[IDNameFields] | None = Field(None, alias="work_positions")


class CopyrightAttributionInsightsFields(BaseModel):
    """Pydantic model for CopyrightAttributionInsights fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    l7_attribution_page_view: int | None = Field(None, alias="l7_attribution_page_view")
    l7_attribution_page_view_delta: float | None = Field(
        None, alias="l7_attribution_page_view_delta"
    )
    l7_attribution_video_view: int | None = Field(None, alias="l7_attribution_video_view")
    l7_attribution_video_view_delta: float | None = Field(
        None, alias="l7_attribution_video_view_delta"
    )
    metrics_ending_date: str | None = Field(None, alias="metrics_ending_date")


class ProductFeedRuleFields(BaseModel):
    """Pydantic model for ProductFeedRule fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    attribute: str | None = Field(None, alias="attribute")
    id: str | None = Field(None, alias="id")
    params: list[dict[str, str]] | None = Field(None, alias="params")
    rule_type: str | None = Field(None, alias="rule_type")


class ProductFeedUploadErrorReportFields(BaseModel):
    """Pydantic model for ProductFeedUploadErrorReport fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    file_handle: str | None = Field(None, alias="file_handle")
    report_status: str | None = Field(None, alias="report_status")


class ThirdPartyPartnerPanelScheduledFields(BaseModel):
    """Pydantic model for ThirdPartyPartnerPanelScheduled fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    adentities_ids: list[str] | None = Field(None, alias="adentities_ids")
    cadence: str | None = Field(None, alias="cadence")
    country: str | None = Field(None, alias="country")
    created_time: datetime | None = Field(None, alias="created_time")
    description: str | None = Field(None, alias="description")
    end_time: datetime | None = Field(None, alias="end_time")
    id: str | None = Field(None, alias="id")
    modified_time: datetime | None = Field(None, alias="modified_time")
    owner_instance_id: str | None = Field(None, alias="owner_instance_id")
    owner_panel_id: str | None = Field(None, alias="owner_panel_id")
    owner_panel_name: str | None = Field(None, alias="owner_panel_name")
    start_time: datetime | None = Field(None, alias="start_time")
    status: dict[str, Any] | None = Field(None, alias="status")
    study_type: dict[str, Any] | None = Field(None, alias="study_type")


class PageLocationsBreakdownFields(BaseModel):
    """Pydantic model for PageLocationsBreakdown fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    location_id: str | None = Field(None, alias="location_id")
    location_name: str | None = Field(None, alias="location_name")
    location_type: str | None = Field(None, alias="location_type")
    num_pages: int | None = Field(None, alias="num_pages")
    num_pages_eligible_for_store_visit_reporting: int | None = Field(
        None, alias="num_pages_eligible_for_store_visit_reporting"
    )
    num_unpublished_or_closed_pages: int | None = Field(
        None, alias="num_unpublished_or_closed_pages"
    )
    parent_country_code: str | None = Field(None, alias="parent_country_code")
    parent_region_id: int | None = Field(None, alias="parent_region_id")
    parent_region_name: str | None = Field(None, alias="parent_region_name")


class AdsPixelDomainControlRuleFields(BaseModel):
    """Pydantic model for AdsPixelDomainControlRule fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    domain_list: list[dict[str, Any]] | None = Field(None, alias="domain_list")
    type: str | None = Field(None, alias="type")


class PhotoFields(BaseModel):
    """Pydantic model for Photo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    album: AlbumFields | None = Field(None, alias="album")
    alt_text: str | None = Field(None, alias="alt_text")
    alt_text_custom: str | None = Field(None, alias="alt_text_custom")
    backdated_time: datetime | None = Field(None, alias="backdated_time")
    backdated_time_granularity: str | None = Field(None, alias="backdated_time_granularity")
    can_backdate: bool | None = Field(None, alias="can_backdate")
    can_delete: bool | None = Field(None, alias="can_delete")
    can_tag: bool | None = Field(None, alias="can_tag")
    created_time: datetime | None = Field(None, alias="created_time")
    event: EventFields | None = Field(None, alias="event")
    from_: dict[str, Any] | None = Field(None, alias="from")
    height: int | None = Field(None, alias="height")
    icon: str | None = Field(None, alias="icon")
    id: str | None = Field(None, alias="id")
    images: list[PlatformImageSourceFields] | None = Field(None, alias="images")
    link: str | None = Field(None, alias="link")
    name: str | None = Field(None, alias="name")
    name_tags: list[EntityAtTextRangeFields] | None = Field(None, alias="name_tags")
    page_story_id: str | None = Field(None, alias="page_story_id")
    picture: str | None = Field(None, alias="picture")
    place: PlaceFields | None = Field(None, alias="place")
    position: int | None = Field(None, alias="position")
    source: str | None = Field(None, alias="source")
    target: ProfileFields | None = Field(None, alias="target")
    updated_time: datetime | None = Field(None, alias="updated_time")
    webp_images: list[PlatformImageSourceFields] | None = Field(None, alias="webp_images")
    width: int | None = Field(None, alias="width")


class CatalogItemChannelsToIntegrityStatusFields(BaseModel):
    """Pydantic model for CatalogItemChannelsToIntegrityStatus fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    channels: list[str] | None = Field(None, alias="channels")
    rejection_information: dict[str, Any] | None = Field(None, alias="rejection_information")


class IGShoppingReviewStatusOnsiteEligibilityFields(BaseModel):
    """Pydantic model for IGShoppingReviewStatusOnsiteEligibility fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    is_eligible: bool | None = Field(None, alias="is_eligible")
    reasons: list[IGShoppingReviewStatusReasonWithHelpMessageFields] | None = Field(
        None, alias="reasons"
    )


class PostFields(BaseModel):
    """Pydantic model for Post fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    actions: dict[str, Any] | None = Field(None, alias="actions")
    admin_creator: dict[str, Any] | None = Field(None, alias="admin_creator")
    allowed_advertising_objectives: list[str] | None = Field(
        None, alias="allowed_advertising_objectives"
    )
    application: ApplicationFields | None = Field(None, alias="application")
    backdated_time: datetime | None = Field(None, alias="backdated_time")
    call_to_action: dict[str, Any] | None = Field(None, alias="call_to_action")
    can_reply_privately: bool | None = Field(None, alias="can_reply_privately")
    caption: str | None = Field(None, alias="caption")
    child_attachments: dict[str, Any] | None = Field(None, alias="child_attachments")
    comments_mirroring_domain: str | None = Field(None, alias="comments_mirroring_domain")
    coordinates: dict[str, Any] | None = Field(None, alias="coordinates")
    created_time: datetime | None = Field(None, alias="created_time")
    description: str | None = Field(None, alias="description")
    event: EventFields | None = Field(None, alias="event")
    expanded_height: int | None = Field(None, alias="expanded_height")
    expanded_width: int | None = Field(None, alias="expanded_width")
    feed_targeting: dict[str, Any] | None = Field(None, alias="feed_targeting")
    from_: dict[str, Any] | None = Field(None, alias="from")
    full_picture: str | None = Field(None, alias="full_picture")
    height: int | None = Field(None, alias="height")
    icon: str | None = Field(None, alias="icon")
    id: str | None = Field(None, alias="id")
    instagram_eligibility: str | None = Field(None, alias="instagram_eligibility")
    is_app_share: bool | None = Field(None, alias="is_app_share")
    is_eligible_for_promotion: bool | None = Field(None, alias="is_eligible_for_promotion")
    is_expired: bool | None = Field(None, alias="is_expired")
    is_hidden: bool | None = Field(None, alias="is_hidden")
    is_inline_created: bool | None = Field(None, alias="is_inline_created")
    is_instagram_eligible: bool | None = Field(None, alias="is_instagram_eligible")
    is_popular: bool | None = Field(None, alias="is_popular")
    is_published: bool | None = Field(None, alias="is_published")
    is_spherical: bool | None = Field(None, alias="is_spherical")
    link: str | None = Field(None, alias="link")
    message: str | None = Field(None, alias="message")
    message_tags: dict[str, Any] | None = Field(None, alias="message_tags")
    multi_share_end_card: bool | None = Field(None, alias="multi_share_end_card")
    multi_share_optimized: bool | None = Field(None, alias="multi_share_optimized")
    name: str | None = Field(None, alias="name")
    object_id: str | None = Field(None, alias="object_id")
    parent_id: str | None = Field(None, alias="parent_id")
    permalink_url: str | None = Field(None, alias="permalink_url")
    picture: str | None = Field(None, alias="picture")
    place: PlaceFields | None = Field(None, alias="place")
    privacy: PrivacyFields | None = Field(None, alias="privacy")
    promotable_id: str | None = Field(None, alias="promotable_id")
    promotion_status: str | None = Field(None, alias="promotion_status")
    properties: dict[str, Any] | None = Field(None, alias="properties")
    scheduled_publish_time: float | None = Field(None, alias="scheduled_publish_time")
    shares: dict[str, Any] | None = Field(None, alias="shares")
    source: str | None = Field(None, alias="source")
    status_type: str | None = Field(None, alias="status_type")
    story: str | None = Field(None, alias="story")
    story_tags: dict[str, Any] | None = Field(None, alias="story_tags")
    subscribed: bool | None = Field(None, alias="subscribed")
    target: ProfileFields | None = Field(None, alias="target")
    targeting: dict[str, Any] | None = Field(None, alias="targeting")
    timeline_visibility: str | None = Field(None, alias="timeline_visibility")
    type: str | None = Field(None, alias="type")
    updated_time: datetime | None = Field(None, alias="updated_time")
    via: dict[str, Any] | None = Field(None, alias="via")
    video_buying_eligibility: list[str] | None = Field(None, alias="video_buying_eligibility")
    width: int | None = Field(None, alias="width")


class ExternalMerchantSettingsFields(BaseModel):
    """Pydantic model for ExternalMerchantSettings fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    connect_woo: str | None = Field(None, alias="connect_woo")
    external_platform: str | None = Field(None, alias="external_platform")
    id: str | None = Field(None, alias="id")


class DatasetFields(BaseModel):
    """Pydantic model for Dataset fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class IGVideoCopyrightCheckMatchesInformationFields(BaseModel):
    """Pydantic model for IGVideoCopyrightCheckMatchesInformation fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    copyright_matches: list[dict[str, Any]] | None = Field(None, alias="copyright_matches")
    status: IGVideoCopyrightCheckStatusFields | None = Field(None, alias="status")


class InstantArticleInsightsQueryResultFields(BaseModel):
    """Pydantic model for InstantArticleInsightsQueryResult fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    breakdowns: dict[str, str] | None = Field(None, alias="breakdowns")
    name: str | None = Field(None, alias="name")
    time: datetime | None = Field(None, alias="time")
    value: str | None = Field(None, alias="value")


class PageBroadcastFields(BaseModel):
    """Pydantic model for PageBroadcast fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    scheduled_time: str | None = Field(None, alias="scheduled_time")
    status: str | None = Field(None, alias="status")


class LeadGenDataDraftFields(BaseModel):
    """Pydantic model for LeadGenDataDraft fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    block_display_for_non_targeted_viewer: bool | None = Field(
        None, alias="block_display_for_non_targeted_viewer"
    )
    created_time: datetime | None = Field(None, alias="created_time")
    disqualified_end_component: dict[str, Any] | None = Field(
        None, alias="disqualified_end_component"
    )
    follow_up_action_url: str | None = Field(None, alias="follow_up_action_url")
    id: str | None = Field(None, alias="id")
    is_optimized_for_quality: bool | None = Field(None, alias="is_optimized_for_quality")
    legal_content: dict[str, Any] | None = Field(None, alias="legal_content")
    locale: str | None = Field(None, alias="locale")
    name: str | None = Field(None, alias="name")
    page: PageFields | None = Field(None, alias="page")
    question_page_custom_headline: str | None = Field(None, alias="question_page_custom_headline")
    questions: list[LeadGenDraftQuestionFields] | None = Field(None, alias="questions")
    status: str | None = Field(None, alias="status")
    thank_you_page: dict[str, Any] | None = Field(None, alias="thank_you_page")
    tracking_parameters: list[dict[str, str]] | None = Field(None, alias="tracking_parameters")


class AdCampaignLearningStageInfoFields(BaseModel):
    """Pydantic model for AdCampaignLearningStageInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    attribution_windows: list[str] | None = Field(None, alias="attribution_windows")
    conversions: int | None = Field(None, alias="conversions")
    last_sig_edit_ts: int | None = Field(None, alias="last_sig_edit_ts")
    status: str | None = Field(None, alias="status")


class PartnershipAdsIdentityFields(BaseModel):
    """Pydantic model for PartnershipAdsIdentity fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    is_saved: bool | None = Field(None, alias="is_saved")
    post_types: list[str] | None = Field(None, alias="post_types")
    secondary_identities: list[dict[str, Any]] | None = Field(None, alias="secondary_identities")


class AdCreativeLinkDataSponsorshipInfoSpecFields(BaseModel):
    """Pydantic model for AdCreativeLinkDataSponsorshipInfoSpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    sponsor_image_url: str | None = Field(None, alias="sponsor_image_url")
    sponsor_name: str | None = Field(None, alias="sponsor_name")


class AdAssetMessageExtensionsFields(BaseModel):
    """Pydantic model for AdAssetMessageExtensions fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    type: str | None = Field(None, alias="type")


class VehicleOfferFields(BaseModel):
    """Pydantic model for VehicleOffer fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    amount_currency: str | None = Field(None, alias="amount_currency")
    amount_percentage: float | None = Field(None, alias="amount_percentage")
    amount_price: str | None = Field(None, alias="amount_price")
    amount_qualifier: str | None = Field(None, alias="amount_qualifier")
    applinks: CatalogItemAppLinksFields | None = Field(None, alias="applinks")
    availability: str | None = Field(None, alias="availability")
    body_style: str | None = Field(None, alias="body_style")
    cashback_currency: str | None = Field(None, alias="cashback_currency")
    cashback_price: str | None = Field(None, alias="cashback_price")
    category_specific_fields: CatalogSubVerticalListFields | None = Field(
        None, alias="category_specific_fields"
    )
    currency: str | None = Field(None, alias="currency")
    custom_label_0: str | None = Field(None, alias="custom_label_0")
    custom_label_1: str | None = Field(None, alias="custom_label_1")
    custom_label_2: str | None = Field(None, alias="custom_label_2")
    custom_label_3: str | None = Field(None, alias="custom_label_3")
    custom_label_4: str | None = Field(None, alias="custom_label_4")
    custom_number_0: int | None = Field(None, alias="custom_number_0")
    custom_number_1: int | None = Field(None, alias="custom_number_1")
    custom_number_2: int | None = Field(None, alias="custom_number_2")
    custom_number_3: int | None = Field(None, alias="custom_number_3")
    custom_number_4: int | None = Field(None, alias="custom_number_4")
    dma_codes: list[str] | None = Field(None, alias="dma_codes")
    downpayment_currency: str | None = Field(None, alias="downpayment_currency")
    downpayment_price: str | None = Field(None, alias="downpayment_price")
    downpayment_qualifier: str | None = Field(None, alias="downpayment_qualifier")
    drivetrain: str | None = Field(None, alias="drivetrain")
    end_date: str | None = Field(None, alias="end_date")
    end_time: int | None = Field(None, alias="end_time")
    exterior_color: str | None = Field(None, alias="exterior_color")
    fuel_type: str | None = Field(None, alias="fuel_type")
    generation: str | None = Field(None, alias="generation")
    id: str | None = Field(None, alias="id")
    image_fetch_status: dict[str, Any] | None = Field(None, alias="image_fetch_status")
    images: list[str] | None = Field(None, alias="images")
    interior_color: str | None = Field(None, alias="interior_color")
    interior_upholstery: str | None = Field(None, alias="interior_upholstery")
    make: str | None = Field(None, alias="make")
    model: str | None = Field(None, alias="model")
    offer_description: str | None = Field(None, alias="offer_description")
    offer_disclaimer: str | None = Field(None, alias="offer_disclaimer")
    offer_type: str | None = Field(None, alias="offer_type")
    price: str | None = Field(None, alias="price")
    product_priority_0: float | None = Field(None, alias="product_priority_0")
    product_priority_1: float | None = Field(None, alias="product_priority_1")
    product_priority_2: float | None = Field(None, alias="product_priority_2")
    product_priority_3: float | None = Field(None, alias="product_priority_3")
    product_priority_4: float | None = Field(None, alias="product_priority_4")
    sanitized_images: list[str] | None = Field(None, alias="sanitized_images")
    start_date: str | None = Field(None, alias="start_date")
    start_time: int | None = Field(None, alias="start_time")
    tags: list[str] | None = Field(None, alias="tags")
    term_length: int | None = Field(None, alias="term_length")
    term_qualifier: str | None = Field(None, alias="term_qualifier")
    title: str | None = Field(None, alias="title")
    transmission: str | None = Field(None, alias="transmission")
    trim: str | None = Field(None, alias="trim")
    unit_price: dict[str, Any] | None = Field(None, alias="unit_price")
    url: str | None = Field(None, alias="url")
    vehicle_offer_id: str | None = Field(None, alias="vehicle_offer_id")
    visibility: dict[str, Any] | None = Field(None, alias="visibility")
    year: int | None = Field(None, alias="year")


class MusicWorkCopyrightFields(BaseModel):
    """Pydantic model for MusicWorkCopyright fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    available_ui_actions: list[str] | None = Field(None, alias="available_ui_actions")
    claim_status: str | None = Field(None, alias="claim_status")
    creation_time: datetime | None = Field(None, alias="creation_time")
    displayed_fb_matches_count: int | None = Field(None, alias="displayed_fb_matches_count")
    displayed_ig_matches_count: int | None = Field(None, alias="displayed_ig_matches_count")
    displayed_matches_count: int | None = Field(None, alias="displayed_matches_count")
    has_rev_share_eligible_isrcs: bool | None = Field(None, alias="has_rev_share_eligible_isrcs")
    id: str | None = Field(None, alias="id")
    is_linking_required_to_monetize_for_manual_claim: bool | None = Field(
        None, alias="is_linking_required_to_monetize_for_manual_claim"
    )
    match_rule: VideoCopyrightRuleFields | None = Field(None, alias="match_rule")
    status: str | None = Field(None, alias="status")
    tags: list[str] | None = Field(None, alias="tags")
    update_time: datetime | None = Field(None, alias="update_time")


class OwnedDomainFields(BaseModel):
    """Pydantic model for OwnedDomain fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    domain_name: str | None = Field(None, alias="domain_name")
    id: str | None = Field(None, alias="id")
    owner_business: BusinessFields | None = Field(None, alias="owner_business")
    status: str | None = Field(None, alias="status")
    verification_code: str | None = Field(None, alias="verification_code")


class AdCreativeVideoDataCustomOverlaySpecFields(BaseModel):
    """Pydantic model for AdCreativeVideoDataCustomOverlaySpec fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    background_color: str | None = Field(None, alias="background_color")
    background_opacity: dict[str, Any] | None = Field(None, alias="background_opacity")
    duration: int | None = Field(None, alias="duration")
    float_with_margin: bool | None = Field(None, alias="float_with_margin")
    full_width: bool | None = Field(None, alias="full_width")
    option: dict[str, Any] | None = Field(None, alias="option")
    position: dict[str, Any] | None = Field(None, alias="position")
    start: int | None = Field(None, alias="start")
    template: dict[str, Any] | None = Field(None, alias="template")
    text_color: str | None = Field(None, alias="text_color")


class AdCreativeContextualMultiAdsFields(BaseModel):
    """Pydantic model for AdCreativeContextualMultiAds fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    enroll_status: str | None = Field(None, alias="enroll_status")


class WorkSkillFields(BaseModel):
    """Pydantic model for WorkSkill fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    id: str | None = Field(None, alias="id")
    name: str | None = Field(None, alias="name")


class AREffectFields(BaseModel):
    """Pydantic model for AREffect fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    creation_time: datetime | None = Field(None, alias="creation_time")
    id: str | None = Field(None, alias="id")
    last_modified_time: datetime | None = Field(None, alias="last_modified_time")
    name: str | None = Field(None, alias="name")
    status: str | None = Field(None, alias="status")
    surfaces: list[str] | None = Field(None, alias="surfaces")


class AdAccountPromotableObjectsFields(BaseModel):
    """Pydantic model for AdAccountPromotableObjects fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    promotable_app_ids: list[str] | None = Field(None, alias="promotable_app_ids")
    promotable_page_ids: list[str] | None = Field(None, alias="promotable_page_ids")
    promotable_urls: list[str] | None = Field(None, alias="promotable_urls")


class ExternalEventSourceCPASEventsDebuggingInfoFields(BaseModel):
    """Pydantic model for ExternalEventSourceCPASEventsDebuggingInfo fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    counts: int | None = Field(None, alias="counts")
    diagnostic: str | None = Field(None, alias="diagnostic")
    event_name: str | None = Field(None, alias="event_name")


class ProductCatalogPricingVariablesBatchFields(BaseModel):
    """Pydantic model for ProductCatalogPricingVariablesBatch fields."""

    model_config = ConfigDict(populate_by_alias=True, extra="allow")
    errors: list[dict[str, Any]] | None = Field(None, alias="errors")
    errors_total_count: int | None = Field(None, alias="errors_total_count")
    handle: str | None = Field(None, alias="handle")
    status: str | None = Field(None, alias="status")


# ============================================================================
# API PARAMETER MODELS
# ============================================================================


class OfflineProductItemGetOverrideDetailsParams(BaseModel):
    """Parameters for OfflineProductItem.get_override_details()."""

    model_config = ConfigDict(extra="allow")
    keys: list[str] | None = Field(None)
    type: offlineproductitemoverride_details_type_enum_param | None = Field(None)


class IGMediaCreateBrandedContentPartnerPromoteParams(BaseModel):
    """Parameters for IGMedia.create_branded_content_partner_promote()."""

    model_config = ConfigDict(extra="allow")
    permission: bool = Field(...)
    sponsor_id: int = Field(...)


class IGMediaCreateCommentParams(BaseModel):
    """Parameters for IGMedia.create_comment()."""

    model_config = ConfigDict(extra="allow")
    ad_id: str | None = Field(None)
    message: str | None = Field(None)


class IGMediaGetInsightsParams(BaseModel):
    """Parameters for IGMedia.get_insights()."""

    model_config = ConfigDict(extra="allow")
    breakdown: list[Any] | None = Field(None)
    metric: list[Any] = Field(...)
    period: list[Any] | None = Field(None)


class IGMediaCreateProductTagParams(BaseModel):
    """Parameters for IGMedia.create_product_tag()."""

    model_config = ConfigDict(extra="allow")
    child_index: int | None = Field(None)
    updated_tags: list[Any] = Field(...)


class CampaignCreateAdLabelParams(BaseModel):
    """Parameters for Campaign.create_ad_label()."""

    model_config = ConfigDict(extra="allow")
    adlabels: list[Any] = Field(...)
    execution_options: list[Any] | None = Field(None)


class CampaignGetAdrulesGovernedParams(BaseModel):
    """Parameters for Campaign.get_adrules_governed()."""

    model_config = ConfigDict(extra="allow")
    pass_evaluation: bool | None = Field(None)


class CampaignGetAdSParams(BaseModel):
    """Parameters for Campaign.get_ad_s()."""

    model_config = ConfigDict(extra="allow")
    date_preset: adcampaigngroupads_date_preset_enum_param | None = Field(None)
    effective_status: list[str] | None = Field(None)
    time_range: dict[str, Any] | None = Field(None)
    updated_since: int | None = Field(None)


class CampaignGetAdSetsParams(BaseModel):
    """Parameters for Campaign.get_ad_sets()."""

    model_config = ConfigDict(extra="allow")
    date_preset: adcampaigngroupadsets_date_preset_enum_param | None = Field(None)
    effective_status: list[Any] | None = Field(None)
    is_completed: bool | None = Field(None)
    time_range: dict[str, Any] | None = Field(None)


class CampaignCreateBudgetScheduleParams(BaseModel):
    """Parameters for Campaign.create_budget_schedule()."""

    model_config = ConfigDict(extra="allow")
    budget_value: int = Field(...)
    budget_value_type: adcampaigngroupbudget_schedules_budget_value_type_enum_param = Field(...)
    time_end: int = Field(...)
    time_start: int = Field(...)


class CampaignGetCopiesParams(BaseModel):
    """Parameters for Campaign.get_copies()."""

    model_config = ConfigDict(extra="allow")
    date_preset: adcampaigngroupcopies_date_preset_enum_param | None = Field(None)
    effective_status: list[Any] | None = Field(None)
    is_completed: bool | None = Field(None)
    time_range: dict[str, Any] | None = Field(None)


class CampaignCreateCopieParams(BaseModel):
    """Parameters for Campaign.create_copie()."""

    model_config = ConfigDict(extra="allow")
    deep_copy: bool | None = Field(None)
    end_time: datetime | None = Field(None)
    rename_options: dict[str, Any] | None = Field(None)
    start_time: datetime | None = Field(None)
    status_option: adcampaigngroupcopies_status_option_enum_param | None = Field(None)


class CampaignGetInsightsParams(BaseModel):
    """Parameters for Campaign.get_insights()."""

    model_config = ConfigDict(extra="allow")
    action_attribution_windows: list[Any] | None = Field(None)
    action_breakdowns: list[Any] | None = Field(None)
    action_report_time: adcampaigngroupinsights_action_report_time_enum_param | None = Field(None)
    breakdowns: list[Any] | None = Field(None)
    date_preset: adcampaigngroupinsights_date_preset_enum_param | None = Field(None)
    default_summary: bool | None = Field(None)
    export_columns: list[str] | None = Field(None)
    export_format: str | None = Field(None)
    export_name: str | None = Field(None)
    fields: list[str] | None = Field(None)
    filtering: list[Any] | None = Field(None)
    level: adcampaigngroupinsights_level_enum_param | None = Field(None)
    limit: int | None = Field(None)
    product_id_limit: int | None = Field(None)
    sort: list[str] | None = Field(None)
    summary: list[str] | None = Field(None)
    summary_action_breakdowns: list[Any] | None = Field(None)
    time_increment: str | None = Field(None)
    time_range: dict[str, Any] | None = Field(None)
    time_ranges: list[Any] | None = Field(None)
    use_account_attribution_setting: bool | None = Field(None)
    use_unified_attribution_setting: bool | None = Field(None)


class CampaignCreateInsightParams(BaseModel):
    """Parameters for Campaign.create_insight()."""

    model_config = ConfigDict(extra="allow")
    action_attribution_windows: list[Any] | None = Field(None)
    action_breakdowns: list[Any] | None = Field(None)
    action_report_time: adcampaigngroupinsights_action_report_time_enum_param | None = Field(None)
    breakdowns: list[Any] | None = Field(None)
    date_preset: adcampaigngroupinsights_date_preset_enum_param | None = Field(None)
    default_summary: bool | None = Field(None)
    export_columns: list[str] | None = Field(None)
    export_format: str | None = Field(None)
    export_name: str | None = Field(None)
    fields: list[str] | None = Field(None)
    filtering: list[Any] | None = Field(None)
    level: adcampaigngroupinsights_level_enum_param | None = Field(None)
    limit: int | None = Field(None)
    product_id_limit: int | None = Field(None)
    sort: list[str] | None = Field(None)
    summary: list[str] | None = Field(None)
    summary_action_breakdowns: list[Any] | None = Field(None)
    time_increment: str | None = Field(None)
    time_range: dict[str, Any] | None = Field(None)
    time_ranges: list[Any] | None = Field(None)
    use_account_attribution_setting: bool | None = Field(None)
    use_unified_attribution_setting: bool | None = Field(None)


class IGMediaForIGOnlyAPICreateCommentParams(BaseModel):
    """Parameters for IGMediaForIGOnlyAPI.create_comment()."""

    model_config = ConfigDict(extra="allow")
    message: str | None = Field(None)


class IGMediaForIGOnlyAPIGetInsightsParams(BaseModel):
    """Parameters for IGMediaForIGOnlyAPI.get_insights()."""

    model_config = ConfigDict(extra="allow")
    breakdown: list[Any] | None = Field(None)
    metric: list[Any] = Field(...)
    period: list[Any] | None = Field(None)


class AdAccountCreateAccountControlParams(BaseModel):
    """Parameters for AdAccount.create_account_control()."""

    model_config = ConfigDict(extra="allow")
    audience_controls: dict[str, Any] = Field(...)
    placement_controls: dict[str, Any] | None = Field(None)


class AdAccountGetActivitiesParams(BaseModel):
    """Parameters for AdAccount.get_activities()."""

    model_config = ConfigDict(extra="allow")
    add_children: bool | None = Field(None)
    after: str | None = Field(None)
    business_id: str | None = Field(None)
    category: adaccountactivities_category_enum_param | None = Field(None)
    data_source: adaccountactivities_data_source_enum_param | None = Field(None)
    extra_oids: list[str] | None = Field(None)
    limit: int | None = Field(None)
    oid: str | None = Field(None)
    since: datetime | None = Field(None)
    uid: int | None = Field(None)
    until: datetime | None = Field(None)


class AdAccountCreateAdPlacePageSetParams(BaseModel):
    """Parameters for AdAccount.create_ad_place_page_set()."""

    model_config = ConfigDict(extra="allow")
    location_types: list[Any] | None = Field(None)
    name: str = Field(...)
    parent_page: str = Field(...)
    targeted_area_type: adaccountad_place_page_sets_targeted_area_type_enum_param | None = Field(
        None
    )


class AdAccountCreateAdPlacePageSetsAsyncParams(BaseModel):
    """Parameters for AdAccount.create_ad_place_page_sets_async()."""

    model_config = ConfigDict(extra="allow")
    location_types: list[Any] | None = Field(None)
    name: str = Field(...)
    parent_page: str = Field(...)
    targeted_area_type: adaccountad_place_page_sets_async_targeted_area_type_enum_param | None = (
        Field(None)
    )


class AdAccountGetAdSavedKeywordsParams(BaseModel):
    """Parameters for AdAccount.get_ad_saved_keywords()."""

    model_config = ConfigDict(extra="allow")
    fields: list[str] | None = Field(None)


class AdAccountCreateAdCreativeParams(BaseModel):
    """Parameters for AdAccount.create_ad_creative()."""

    model_config = ConfigDict(extra="allow")
    actor_id: int | None = Field(None)
    ad_disclaimer_spec: dict[str, Any] | None = Field(None)
    adlabels: list[Any] | None = Field(None)
    applink_treatment: adaccountadcreatives_applink_treatment_enum_param | None = Field(None)
    asset_feed_spec: dict[str, Any] | None = Field(None)
    authorization_category: adaccountadcreatives_authorization_category_enum_param | None = Field(
        None
    )
    body: str | None = Field(None)
    branded_content: dict[str, Any] | None = Field(None)
    branded_content_sponsor_page_id: str | None = Field(None)
    bundle_folder_id: str | None = Field(None)
    call_to_action: dict[str, Any] | None = Field(None)
    categorization_criteria: adaccountadcreatives_categorization_criteria_enum_param | None = Field(
        None
    )
    category_media_source: adaccountadcreatives_category_media_source_enum_param | None = Field(
        None
    )
    contextual_multi_ads: dict[str, Any] | None = Field(None)
    creative_sourcing_spec: dict[str, Any] | None = Field(None)
    degrees_of_freedom_spec: dict[str, Any] | None = Field(None)
    destination_set_id: str | None = Field(None)
    dynamic_ad_voice: adaccountadcreatives_dynamic_ad_voice_enum_param | None = Field(None)
    enable_launch_instant_app: bool | None = Field(None)
    facebook_branded_content: dict[str, Any] | None = Field(None)
    image_crops: dict[str, Any] | None = Field(None)
    image_file: str | None = Field(None)
    image_hash: str | None = Field(None)
    image_url: str | None = Field(None)
    instagram_branded_content: dict[str, Any] | None = Field(None)
    instagram_permalink_url: str | None = Field(None)
    instagram_user_id: str | None = Field(None)
    interactive_components_spec: dict[str, Any] | None = Field(None)
    is_dco_internal: bool | None = Field(None)
    link_og_id: str | None = Field(None)
    link_url: str | None = Field(None)
    name: str | None = Field(None)
    object_id: int | None = Field(None)
    object_story_id: str | None = Field(None)
    object_story_spec: AdCreativeObjectStorySpecFields | None = Field(None)
    object_type: str | None = Field(None)
    object_url: str | None = Field(None)
    omnichannel_link_spec: dict[str, Any] | None = Field(None)
    page_welcome_message: str | None = Field(None)
    place_page_set_id: str | None = Field(None)
    platform_customizations: dict[str, Any] | None = Field(None)
    playable_asset_id: str | None = Field(None)
    portrait_customizations: dict[str, Any] | None = Field(None)
    product_set_id: str | None = Field(None)
    recommender_settings: dict[str, Any] | None = Field(None)
    regional_regulation_disclaimer_spec: dict[str, Any] | None = Field(None)
    source_instagram_media_id: str | None = Field(None)
    template_url: str | None = Field(None)
    template_url_spec: str | None = Field(None)
    thumbnail_url: str | None = Field(None)
    title: str | None = Field(None)
    url_tags: str | None = Field(None)
    use_page_actor_override: bool | None = Field(None)


class AdAccountGetAdCreativesByLabelsParams(BaseModel):
    """Parameters for AdAccount.get_ad_creatives_by_labels()."""

    model_config = ConfigDict(extra="allow")
    ad_label_ids: list[str] = Field(...)
    operator: adaccountadcreativesbylabels_operator_enum_param | None = Field(None)


class AdAccountDeleteAdImagesParams(BaseModel):
    """Parameters for AdAccount.delete_ad_images()."""

    model_config = ConfigDict(extra="allow")
    hash: str = Field(...)


class AdAccountGetAdImagesParams(BaseModel):
    """Parameters for AdAccount.get_ad_images()."""

    model_config = ConfigDict(extra="allow")
    biz_tag_id: int | None = Field(None)
    business_id: str | None = Field(None)
    hashes: list[str] | None = Field(None)
    minheight: int | None = Field(None)
    minwidth: int | None = Field(None)
    name: str | None = Field(None)
    selected_hashes: list[str] | None = Field(None)


class AdAccountCreateAdImageParams(BaseModel):
    """Parameters for AdAccount.create_ad_image()."""

    model_config = ConfigDict(extra="allow")
    bytes: str | None = Field(None)
    copy_from: dict[str, Any] | None = Field(None)


class AdAccountCreateAdLabelParams(BaseModel):
    """Parameters for AdAccount.create_ad_label()."""

    model_config = ConfigDict(extra="allow")
    name: str = Field(...)


class AdAccountCreateAdPlayableParams(BaseModel):
    """Parameters for AdAccount.create_ad_playable()."""

    model_config = ConfigDict(extra="allow")
    app_id: str | None = Field(None)
    name: str = Field(...)
    session_id: str | None = Field(None)
    source: Any | None = Field(None)
    source_url: str | None = Field(None)
    source_zip: Any | None = Field(None)


class AdAccountGetAdrulesHistoryParams(BaseModel):
    """Parameters for AdAccount.get_adrules_history()."""

    model_config = ConfigDict(extra="allow")
    action: adaccountadrules_history_action_enum_param | None = Field(None)
    evaluation_type: adaccountadrules_history_evaluation_type_enum_param | None = Field(None)
    hide_no_changes: bool | None = Field(None)
    object_id: str | None = Field(None)


class AdAccountCreateAdrulesLibraryParams(BaseModel):
    """Parameters for AdAccount.create_adrules_library()."""

    model_config = ConfigDict(extra="allow")
    account_id: str | None = Field(None)
    evaluation_spec: dict[str, Any] = Field(...)
    execution_spec: dict[str, Any] = Field(...)
    name: str = Field(...)
    schedule_spec: dict[str, Any] | None = Field(None)
    status: adaccountadrules_library_status_enum_param | None = Field(None)
    ui_creation_source: adaccountadrules_library_ui_creation_source_enum_param | None = Field(None)


class AdAccountGetAdSParams(BaseModel):
    """Parameters for AdAccount.get_ad_s()."""

    model_config = ConfigDict(extra="allow")
    date_preset: adaccountads_date_preset_enum_param | None = Field(None)
    effective_status: list[str] | None = Field(None)
    time_range: dict[str, Any] | None = Field(None)
    updated_since: int | None = Field(None)


class AdAccountCreateAdParams(BaseModel):
    """Parameters for AdAccount.create_ad_()."""

    model_config = ConfigDict(extra="allow")
    ad_schedule_end_time: datetime | None = Field(None)
    ad_schedule_start_time: datetime | None = Field(None)
    adlabels: list[Any] | None = Field(None)
    adset_id: int | None = Field(None)
    adset_spec: AdSetFields | None = Field(None)
    audience_id: str | None = Field(None)
    bid_amount: int | None = Field(None)
    conversion_domain: str | None = Field(None)
    creative: AdCreativeFields = Field(...)
    creative_asset_groups_spec: dict[str, Any] | None = Field(None)
    date_format: str | None = Field(None)
    display_sequence: int | None = Field(None)
    draft_adgroup_id: str | None = Field(None)
    engagement_audience: bool | None = Field(None)
    execution_options: list[Any] | None = Field(None)
    include_demolink_hashes: bool | None = Field(None)
    name: str = Field(...)
    priority: int | None = Field(None)
    source_ad_id: str | None = Field(None)
    status: adaccountads_status_enum_param | None = Field(None)
    tracking_specs: dict[str, Any] | None = Field(None)


class AdAccountGetAdsReportingMmmReportsParams(BaseModel):
    """Parameters for AdAccount.get_ads_reporting_mmm_reports()."""

    model_config = ConfigDict(extra="allow")
    filtering: list[Any] | None = Field(None)


class AdAccountGetAdsVolumeParams(BaseModel):
    """Parameters for AdAccount.get_ads_volume()."""

    model_config = ConfigDict(extra="allow")
    page_id: str | None = Field(None)
    recommendation_type: adaccountads_volume_recommendation_type_enum_param | None = Field(None)
    show_breakdown_by_actor: bool | None = Field(None)


class AdAccountGetAdSByLabelsParams(BaseModel):
    """Parameters for AdAccount.get_ad_s_by_labels()."""

    model_config = ConfigDict(extra="allow")
    ad_label_ids: list[str] = Field(...)
    operator: adaccountadsbylabels_operator_enum_param | None = Field(None)


class AdAccountGetAdSetsParams(BaseModel):
    """Parameters for AdAccount.get_ad_sets()."""

    model_config = ConfigDict(extra="allow")
    date_preset: adaccountadsets_date_preset_enum_param | None = Field(None)
    effective_status: list[Any] | None = Field(None)
    is_completed: bool | None = Field(None)
    time_range: dict[str, Any] | None = Field(None)
    updated_since: int | None = Field(None)


class AdAccountCreateAdSetParams(BaseModel):
    """Parameters for AdAccount.create_ad_set()."""

    model_config = ConfigDict(extra="allow")
    adlabels: list[Any] | None = Field(None)
    adset_schedule: list[Any] | None = Field(None)
    attribution_spec: list[Any] | None = Field(None)
    bid_adjustments: dict[str, Any] | None = Field(None)
    bid_amount: int | None = Field(None)
    bid_constraints: dict[str, Any] | None = Field(None)
    bid_strategy: adaccountadsets_bid_strategy_enum_param | None = Field(None)
    billing_event: adaccountadsets_billing_event_enum_param | None = Field(None)
    budget_source: adaccountadsets_budget_source_enum_param | None = Field(None)
    budget_split_set_id: str | None = Field(None)
    campaign_attribution: dict[str, Any] | None = Field(None)
    campaign_id: str | None = Field(None)
    campaign_spec: dict[str, Any] | None = Field(None)
    creative_sequence: list[str] | None = Field(None)
    creative_sequence_repetition_pattern: (
        adaccountadsets_creative_sequence_repetition_pattern_enum_param | None
    ) = Field(None)
    daily_budget: int | None = Field(None)
    daily_imps: int | None = Field(None)
    daily_min_spend_target: int | None = Field(None)
    daily_spend_cap: int | None = Field(None)
    date_format: str | None = Field(None)
    destination_type: adaccountadsets_destination_type_enum_param | None = Field(None)
    dsa_beneficiary: str | None = Field(None)
    dsa_payor: str | None = Field(None)
    end_time: datetime | None = Field(None)
    execution_options: list[Any] | None = Field(None)
    existing_customer_budget_percentage: int | None = Field(None)
    frequency_control_specs: list[Any] | None = Field(None)
    full_funnel_exploration_mode: adaccountadsets_full_funnel_exploration_mode_enum_param | None = (
        Field(None)
    )
    is_ba_skip_delayed_eligible: bool | None = Field(None)
    is_dynamic_creative: bool | None = Field(None)
    is_incremental_attribution_enabled: bool | None = Field(None)
    is_sac_cfca_terms_certified: bool | None = Field(None)
    lifetime_budget: int | None = Field(None)
    lifetime_imps: int | None = Field(None)
    lifetime_min_spend_target: int | None = Field(None)
    lifetime_spend_cap: int | None = Field(None)
    line_number: int | None = Field(None)
    max_budget_spend_percentage: int | None = Field(None)
    min_budget_spend_percentage: int | None = Field(None)
    multi_optimization_goal_weight: (
        adaccountadsets_multi_optimization_goal_weight_enum_param | None
    ) = Field(None)
    name: str = Field(...)
    optimization_goal: adaccountadsets_optimization_goal_enum_param | None = Field(None)
    optimization_sub_event: adaccountadsets_optimization_sub_event_enum_param | None = Field(None)
    pacing_type: list[str] | None = Field(None)
    promoted_object: dict[str, Any] | None = Field(None)
    rb_prediction_id: str | None = Field(None)
    regional_regulated_categories: list[Any] | None = Field(None)
    regional_regulation_identities: dict[str, Any] | None = Field(None)
    rf_prediction_id: str | None = Field(None)
    source_adset_id: str | None = Field(None)
    start_time: datetime | None = Field(None)
    status: adaccountadsets_status_enum_param | None = Field(None)
    targeting: TargetingFields | None = Field(None)
    time_based_ad_rotation_id_blocks: list[Any] | None = Field(None)
    time_based_ad_rotation_intervals: list[Any] | None = Field(None)
    time_start: datetime | None = Field(None)
    time_stop: datetime | None = Field(None)
    topline_id: str | None = Field(None)
    tune_for_category: adaccountadsets_tune_for_category_enum_param | None = Field(None)


class AdAccountGetAdSetsByLabelsParams(BaseModel):
    """Parameters for AdAccount.get_ad_sets_by_labels()."""

    model_config = ConfigDict(extra="allow")
    ad_label_ids: list[str] = Field(...)
    operator: adaccountadsetsbylabels_operator_enum_param | None = Field(None)


class AdAccountGetAdSpixelsParams(BaseModel):
    """Parameters for AdAccount.get_ad_spixels()."""

    model_config = ConfigDict(extra="allow")
    sort_by: adaccountadspixels_sort_by_enum_param | None = Field(None)


class AdAccountCreateAdSpixelParams(BaseModel):
    """Parameters for AdAccount.create_ad_spixel()."""

    model_config = ConfigDict(extra="allow")
    name: str | None = Field(None)


class AdAccountGetAdvertisableApplicationsParams(BaseModel):
    """Parameters for AdAccount.get_advertisable_applications()."""

    model_config = ConfigDict(extra="allow")
    app_id: str | None = Field(None)
    business_id: str | None = Field(None)


class AdAccountDeleteAdVideosParams(BaseModel):
    """Parameters for AdAccount.delete_ad_videos()."""

    model_config = ConfigDict(extra="allow")
    video_id: str = Field(...)


class AdAccountGetAdVideosParams(BaseModel):
    """Parameters for AdAccount.get_ad_videos()."""

    model_config = ConfigDict(extra="allow")
    max_aspect_ratio: float | None = Field(None)
    maxheight: int | None = Field(None)
    maxlength: int | None = Field(None)
    maxwidth: int | None = Field(None)
    min_aspect_ratio: float | None = Field(None)
    minheight: int | None = Field(None)
    minlength: int | None = Field(None)
    minwidth: int | None = Field(None)
    title: str | None = Field(None)


class AdAccountCreateAdVideoParams(BaseModel):
    """Parameters for AdAccount.create_ad_video()."""

    model_config = ConfigDict(extra="allow")
    application_id: str | None = Field(None)
    asked_fun_fact_prompt_id: int | None = Field(None)
    audio_story_wave_animation_handle: str | None = Field(None)
    chunk_session_id: str | None = Field(None)
    composer_entry_picker: str | None = Field(None)
    composer_entry_point: str | None = Field(None)
    composer_entry_time: int | None = Field(None)
    composer_session_events_log: str | None = Field(None)
    composer_session_id: str | None = Field(None)
    composer_source_surface: str | None = Field(None)
    composer_type: str | None = Field(None)
    container_type: adaccountadvideos_container_type_enum_param | None = Field(None)
    content_category: adaccountadvideos_content_category_enum_param | None = Field(None)
    creative_tools: str | None = Field(None)
    description: str | None = Field(None)
    embeddable: bool | None = Field(None)
    end_offset: int | None = Field(None)
    fbuploader_video_file_chunk: str | None = Field(None)
    file_size: int | None = Field(None)
    file_url: str | None = Field(None)
    fisheye_video_cropped: bool | None = Field(None)
    formatting: adaccountadvideos_formatting_enum_param | None = Field(None)
    fov: int | None = Field(None)
    front_z_rotation: float | None = Field(None)
    fun_fact_prompt_id: str | None = Field(None)
    fun_fact_toastee_id: int | None = Field(None)
    guide: list[Any] | None = Field(None)
    guide_enabled: bool | None = Field(None)
    initial_heading: int | None = Field(None)
    initial_pitch: int | None = Field(None)
    instant_game_entry_point_data: str | None = Field(None)
    is_boost_intended: bool | None = Field(None)
    is_group_linking_post: bool | None = Field(None)
    is_partnership_ad: bool | None = Field(None)
    is_voice_clip: bool | None = Field(None)
    location_source_id: str | None = Field(None)
    name: str | None = Field(None)
    og_action_type_id: str | None = Field(None)
    og_icon_id: str | None = Field(None)
    og_object_id: str | None = Field(None)
    og_phrase: str | None = Field(None)
    og_suggestion_mechanism: str | None = Field(None)
    original_fov: int | None = Field(None)
    original_projection_type: adaccountadvideos_original_projection_type_enum_param | None = Field(
        None
    )
    partnership_ad_ad_code: str | None = Field(None)
    publish_event_id: int | None = Field(None)
    referenced_sticker_id: str | None = Field(None)
    replace_video_id: str | None = Field(None)
    slideshow_spec: dict[str, Any] | None = Field(None)
    source: str | None = Field(None)
    source_instagram_media_id: str | None = Field(None)
    spherical: bool | None = Field(None)
    start_offset: int | None = Field(None)
    swap_mode: adaccountadvideos_swap_mode_enum_param | None = Field(None)
    text_format_metadata: str | None = Field(None)
    thumb: Any | None = Field(None)
    time_since_original_post: int | None = Field(None)
    title: str | None = Field(None)
    transcode_setting_properties: str | None = Field(None)
    unpublished_content_type: adaccountadvideos_unpublished_content_type_enum_param | None = Field(
        None
    )
    upload_phase: adaccountadvideos_upload_phase_enum_param | None = Field(None)
    upload_session_id: str | None = Field(None)
    upload_setting_properties: str | None = Field(None)
    video_file_chunk: str | None = Field(None)
    video_id_original: str | None = Field(None)
    video_start_time_ms: int | None = Field(None)
    waterfall_id: str | None = Field(None)


class AdAccountDeleteAgenciesParams(BaseModel):
    """Parameters for AdAccount.delete_agencies()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)


class AdAccountCreateAgencieParams(BaseModel):
    """Parameters for AdAccount.create_agencie()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)
    permitted_tasks: list[Any] | None = Field(None)


class AdAccountDeleteAssignedUsersParams(BaseModel):
    """Parameters for AdAccount.delete_assigned_users()."""

    model_config = ConfigDict(extra="allow")
    user: int = Field(...)


class AdAccountGetAssignedUsersParams(BaseModel):
    """Parameters for AdAccount.get_assigned_users()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)


class AdAccountCreateAssignedUserParams(BaseModel):
    """Parameters for AdAccount.create_assigned_user()."""

    model_config = ConfigDict(extra="allow")
    tasks: list[Any] | None = Field(None)
    user: int = Field(...)


class AdAccountCreateAsyncBatchRequestParams(BaseModel):
    """Parameters for AdAccount.create_async_batch_request()."""

    model_config = ConfigDict(extra="allow")
    adbatch: list[Any] = Field(...)
    name: str = Field(...)


class AdAccountGetAsyncRequestsParams(BaseModel):
    """Parameters for AdAccount.get_async_requests()."""

    model_config = ConfigDict(extra="allow")
    status: adaccountasync_requests_status_enum_param | None = Field(None)
    type: adaccountasync_requests_type_enum_param | None = Field(None)


class AdAccountGetAsyncAdCreativesParams(BaseModel):
    """Parameters for AdAccount.get_async_ad_creatives()."""

    model_config = ConfigDict(extra="allow")
    is_completed: bool | None = Field(None)


class AdAccountCreateAsyncAdCreativeParams(BaseModel):
    """Parameters for AdAccount.create_async_ad_creative()."""

    model_config = ConfigDict(extra="allow")
    creative_spec: AdCreativeFields = Field(...)
    name: str = Field(...)
    notification_mode: adaccountasyncadcreatives_notification_mode_enum_param | None = Field(None)
    notification_uri: str | None = Field(None)


class AdAccountGetAsyncAdrequestsetsParams(BaseModel):
    """Parameters for AdAccount.get_async_adrequestsets()."""

    model_config = ConfigDict(extra="allow")
    is_completed: bool | None = Field(None)


class AdAccountCreateAsyncAdrequestsetParams(BaseModel):
    """Parameters for AdAccount.create_async_adrequestset()."""

    model_config = ConfigDict(extra="allow")
    ad_specs: list[Any] = Field(...)
    name: str = Field(...)
    notification_mode: adaccountasyncadrequestsets_notification_mode_enum_param | None = Field(None)
    notification_uri: str | None = Field(None)


class AdAccountCreateBlockListDraftParams(BaseModel):
    """Parameters for AdAccount.create_block_list_draft()."""

    model_config = ConfigDict(extra="allow")
    publisher_urls_file: Any = Field(...)


class AdAccountCreateBrandSafetyContentFilterLevelParams(BaseModel):
    """Parameters for AdAccount.create_brand_safety_content_filter_level()."""

    model_config = ConfigDict(extra="allow")
    brand_safety_content_filter_levels: list[Any] = Field(...)
    business_id: str | None = Field(None)


class AdAccountGetBroadtargetingcategoriesParams(BaseModel):
    """Parameters for AdAccount.get_broadtargetingcategories()."""

    model_config = ConfigDict(extra="allow")
    custom_categories_only: bool | None = Field(None)


class AdAccountGetBusinessprojectsParams(BaseModel):
    """Parameters for AdAccount.get_businessprojects()."""

    model_config = ConfigDict(extra="allow")
    business: str | None = Field(None)


class AdAccountDeleteCampaignsParams(BaseModel):
    """Parameters for AdAccount.delete_campaigns()."""

    model_config = ConfigDict(extra="allow")
    before_date: datetime | None = Field(None)
    delete_offset: int | None = Field(None)
    delete_strategy: adaccountcampaigns_delete_strategy_enum_param = Field(...)
    object_count: int | None = Field(None)


class AdAccountGetCampaignsParams(BaseModel):
    """Parameters for AdAccount.get_campaigns()."""

    model_config = ConfigDict(extra="allow")
    date_preset: adaccountcampaigns_date_preset_enum_param | None = Field(None)
    effective_status: list[Any] | None = Field(None)
    is_completed: bool | None = Field(None)
    time_range: dict[str, Any] | None = Field(None)


class AdAccountCreateCampaignParams(BaseModel):
    """Parameters for AdAccount.create_campaign()."""

    model_config = ConfigDict(extra="allow")
    adlabels: list[Any] | None = Field(None)
    bid_strategy: adaccountcampaigns_bid_strategy_enum_param | None = Field(None)
    buying_type: str | None = Field(None)
    daily_budget: int | None = Field(None)
    execution_options: list[Any] | None = Field(None)
    is_skadnetwork_attribution: bool | None = Field(None)
    iterative_split_test_configs: list[Any] | None = Field(None)
    lifetime_budget: int | None = Field(None)
    name: str | None = Field(None)
    objective: adaccountcampaigns_objective_enum_param | None = Field(None)
    pacing_type: list[str] | None = Field(None)
    promoted_object: dict[str, Any] | None = Field(None)
    smart_promotion_type: adaccountcampaigns_smart_promotion_type_enum_param | None = Field(None)
    source_campaign_id: str | None = Field(None)
    special_ad_categories: list[Any] = Field(...)
    special_ad_category_country: list[Any] | None = Field(None)
    spend_cap: int | None = Field(None)
    start_time: datetime | None = Field(None)
    status: adaccountcampaigns_status_enum_param | None = Field(None)
    stop_time: datetime | None = Field(None)
    topline_id: str | None = Field(None)


class AdAccountGetCampaignsByLabelsParams(BaseModel):
    """Parameters for AdAccount.get_campaigns_by_labels()."""

    model_config = ConfigDict(extra="allow")
    ad_label_ids: list[str] = Field(...)
    operator: adaccountcampaignsbylabels_operator_enum_param | None = Field(None)


class AdAccountGetConnectedInstagramAccountsWithIabpParams(BaseModel):
    """Parameters for AdAccount.get_connected_instagram_accounts_with_iabp()."""

    model_config = ConfigDict(extra="allow")
    business_id: str | None = Field(None)


class AdAccountGetCustomAudiencesParams(BaseModel):
    """Parameters for AdAccount.get_custom_audiences()."""

    model_config = ConfigDict(extra="allow")
    business_id: str | None = Field(None)
    fetch_primary_audience: bool | None = Field(None)
    fields: list[str] | None = Field(None)
    filtering: list[Any] | None = Field(None)
    pixel_id: str | None = Field(None)


class AdAccountCreateCustomAudienceParams(BaseModel):
    """Parameters for AdAccount.create_custom_audience()."""

    model_config = ConfigDict(extra="allow")
    allowed_domains: list[str] | None = Field(None)
    associated_audience_id: int | None = Field(None)
    claim_objective: adaccountcustomaudiences_claim_objective_enum_param | None = Field(None)
    content_type: adaccountcustomaudiences_content_type_enum_param | None = Field(None)
    countries: str | None = Field(None)
    creation_params: dict[str, Any] | None = Field(None)
    customer_file_source: adaccountcustomaudiences_customer_file_source_enum_param | None = Field(
        None
    )
    dataset_id: str | None = Field(None)
    description: str | None = Field(None)
    enable_fetch_or_create: bool | None = Field(None)
    event_source_group: str | None = Field(None)
    event_sources: list[Any] | None = Field(None)
    exclusions: list[Any] | None = Field(None)
    facebook_page_id: str | None = Field(None)
    inclusions: list[Any] | None = Field(None)
    is_snapshot: bool | None = Field(None)
    is_value_based: bool | None = Field(None)
    list_of_accounts: list[Any] | None = Field(None)
    lookalike_spec: str | None = Field(None)
    marketing_message_channels: dict[str, Any] | None = Field(None)
    name: str | None = Field(None)
    opt_out_link: str | None = Field(None)
    origin_audience_id: str | None = Field(None)
    parent_audience_id: int | None = Field(None)
    partner_reference_key: str | None = Field(None)
    pixel_id: str | None = Field(None)
    prefill: bool | None = Field(None)
    product_set_id: str | None = Field(None)
    regulated_audience_spec: str | None = Field(None)
    retention_days: int | None = Field(None)
    rev_share_policy_id: int | None = Field(None)
    rule: str | None = Field(None)
    rule_aggregation: str | None = Field(None)
    subscription_info: list[Any] | None = Field(None)
    subtype: adaccountcustomaudiences_subtype_enum_param | None = Field(None)
    use_for_products: list[Any] | None = Field(None)
    use_in_campaigns: bool | None = Field(None)
    video_group_ids: list[str] | None = Field(None)
    whats_app_business_phone_number_id: str | None = Field(None)


class AdAccountCreateCustomAudiencestoParams(BaseModel):
    """Parameters for AdAccount.create_custom_audiencesto()."""

    model_config = ConfigDict(extra="allow")
    business_id: str | None = Field(None)
    tos_id: str = Field(...)


class AdAccountCreateCustomConversionParams(BaseModel):
    """Parameters for AdAccount.create_custom_conversion()."""

    model_config = ConfigDict(extra="allow")
    action_source_type: adaccountcustomconversions_action_source_type_enum_param | None = Field(
        None
    )
    advanced_rule: str | None = Field(None)
    custom_event_type: adaccountcustomconversions_custom_event_type_enum_param | None = Field(None)
    default_conversion_value: float | None = Field(None)
    description: str | None = Field(None)
    event_source_id: str | None = Field(None)
    name: str = Field(...)
    rule: str | None = Field(None)


class AdAccountGetDeliveryEstimateParams(BaseModel):
    """Parameters for AdAccount.get_delivery_estimate()."""

    model_config = ConfigDict(extra="allow")
    optimization_goal: adaccountdelivery_estimate_optimization_goal_enum_param = Field(...)
    promoted_object: dict[str, Any] | None = Field(None)
    targeting_spec: TargetingFields = Field(...)


class AdAccountGetDeprecatedtargetingadsetsParams(BaseModel):
    """Parameters for AdAccount.get_deprecatedtargetingadsets()."""

    model_config = ConfigDict(extra="allow")
    type: str | None = Field(None)


class AdAccountGetGeneratepreviewsParams(BaseModel):
    """Parameters for AdAccount.get_generatepreviews()."""

    model_config = ConfigDict(extra="allow")
    ad_format: adaccountgeneratepreviews_ad_format_enum_param = Field(...)
    creative: AdCreativeFields = Field(...)
    creative_feature: adaccountgeneratepreviews_creative_feature_enum_param | None = Field(None)
    dynamic_asset_label: str | None = Field(None)
    dynamic_creative_spec: dict[str, Any] | None = Field(None)
    dynamic_customization: dict[str, Any] | None = Field(None)
    end_date: datetime | None = Field(None)
    height: int | None = Field(None)
    locale: str | None = Field(None)
    place_page_id: int | None = Field(None)
    post: dict[str, Any] | None = Field(None)
    product_item_ids: list[str] | None = Field(None)
    render_type: adaccountgeneratepreviews_render_type_enum_param | None = Field(None)
    start_date: datetime | None = Field(None)
    width: int | None = Field(None)


class AdAccountGetInsightsParams(BaseModel):
    """Parameters for AdAccount.get_insights()."""

    model_config = ConfigDict(extra="allow")
    action_attribution_windows: list[Any] | None = Field(None)
    action_breakdowns: list[Any] | None = Field(None)
    action_report_time: adaccountinsights_action_report_time_enum_param | None = Field(None)
    breakdowns: list[Any] | None = Field(None)
    date_preset: adaccountinsights_date_preset_enum_param | None = Field(None)
    default_summary: bool | None = Field(None)
    export_columns: list[str] | None = Field(None)
    export_format: str | None = Field(None)
    export_name: str | None = Field(None)
    fields: list[str] | None = Field(None)
    filtering: list[Any] | None = Field(None)
    level: adaccountinsights_level_enum_param | None = Field(None)
    limit: int | None = Field(None)
    product_id_limit: int | None = Field(None)
    sort: list[str] | None = Field(None)
    summary: list[str] | None = Field(None)
    summary_action_breakdowns: list[Any] | None = Field(None)
    time_increment: str | None = Field(None)
    time_range: dict[str, Any] | None = Field(None)
    time_ranges: list[Any] | None = Field(None)
    use_account_attribution_setting: bool | None = Field(None)
    use_unified_attribution_setting: bool | None = Field(None)


class AdAccountCreateInsightParams(BaseModel):
    """Parameters for AdAccount.create_insight()."""

    model_config = ConfigDict(extra="allow")
    action_attribution_windows: list[Any] | None = Field(None)
    action_breakdowns: list[Any] | None = Field(None)
    action_report_time: adaccountinsights_action_report_time_enum_param | None = Field(None)
    breakdowns: list[Any] | None = Field(None)
    date_preset: adaccountinsights_date_preset_enum_param | None = Field(None)
    default_summary: bool | None = Field(None)
    export_columns: list[str] | None = Field(None)
    export_format: str | None = Field(None)
    export_name: str | None = Field(None)
    fields: list[str] | None = Field(None)
    filtering: list[Any] | None = Field(None)
    level: adaccountinsights_level_enum_param | None = Field(None)
    limit: int | None = Field(None)
    product_id_limit: int | None = Field(None)
    sort: list[str] | None = Field(None)
    summary: list[str] | None = Field(None)
    summary_action_breakdowns: list[Any] | None = Field(None)
    time_increment: str | None = Field(None)
    time_range: dict[str, Any] | None = Field(None)
    time_ranges: list[Any] | None = Field(None)
    use_account_attribution_setting: bool | None = Field(None)
    use_unified_attribution_setting: bool | None = Field(None)


class AdAccountGetIosFourteenCampaignLimitsParams(BaseModel):
    """Parameters for AdAccount.get_ios_fourteen_campaign_limits()."""

    model_config = ConfigDict(extra="allow")
    app_id: str = Field(...)


class AdAccountGetMatchedSearchApplicationsParams(BaseModel):
    """Parameters for AdAccount.get_matched_search_applications()."""

    model_config = ConfigDict(extra="allow")
    allow_incomplete_app: bool | None = Field(None)
    app_store: adaccountmatched_search_applications_app_store_enum_param = Field(...)
    app_store_country: str | None = Field(None)
    business_id: str | None = Field(None)
    is_skadnetwork_search: bool | None = Field(None)
    only_apps_with_permission: bool | None = Field(None)
    query_term: str = Field(...)


class AdAccountGetMinimumBudgetsParams(BaseModel):
    """Parameters for AdAccount.get_minimum_budgets()."""

    model_config = ConfigDict(extra="allow")
    bid_amount: int | None = Field(None)


class AdAccountGetOnbehalfRequestsParams(BaseModel):
    """Parameters for AdAccount.get_onbehalf_requests()."""

    model_config = ConfigDict(extra="allow")
    status: adaccountonbehalf_requests_status_enum_param | None = Field(None)


class AdAccountCreateProductAudienceParams(BaseModel):
    """Parameters for AdAccount.create_product_audience()."""

    model_config = ConfigDict(extra="allow")
    allowed_domains: list[str] | None = Field(None)
    associated_audience_id: int | None = Field(None)
    claim_objective: adaccountproduct_audiences_claim_objective_enum_param | None = Field(None)
    content_type: adaccountproduct_audiences_content_type_enum_param | None = Field(None)
    creation_params: dict[str, Any] | None = Field(None)
    description: str | None = Field(None)
    enable_fetch_or_create: bool | None = Field(None)
    event_source_group: str | None = Field(None)
    event_sources: list[Any] | None = Field(None)
    exclusions: list[Any] | None = Field(None)
    inclusions: list[Any] | None = Field(None)
    is_snapshot: bool | None = Field(None)
    is_value_based: bool | None = Field(None)
    name: str = Field(...)
    opt_out_link: str | None = Field(None)
    parent_audience_id: int | None = Field(None)
    product_set_id: str = Field(...)
    rev_share_policy_id: int | None = Field(None)
    subtype: adaccountproduct_audiences_subtype_enum_param | None = Field(None)


class AdAccountCreatePublisherBlockListParams(BaseModel):
    """Parameters for AdAccount.create_publisher_block_list()."""

    model_config = ConfigDict(extra="allow")
    name: str | None = Field(None)


class AdAccountGetReachestimateParams(BaseModel):
    """Parameters for AdAccount.get_reachestimate()."""

    model_config = ConfigDict(extra="allow")
    adgroup_ids: list[str] | None = Field(None)
    caller_id: str | None = Field(None)
    concepts: str | None = Field(None)
    creative_action_spec: str | None = Field(None)
    is_debug: bool | None = Field(None)
    object_store_url: str | None = Field(None)
    targeting_spec: TargetingFields = Field(...)


class AdAccountCreateReachfrequencypredictionParams(BaseModel):
    """Parameters for AdAccount.create_reachfrequencyprediction()."""

    model_config = ConfigDict(extra="allow")
    action: adaccountreachfrequencypredictions_action_enum_param | None = Field(None)
    ad_formats: list[Any] | None = Field(None)
    auction_entry_option_index: int | None = Field(None)
    budget: int | None = Field(None)
    buying_type: adaccountreachfrequencypredictions_buying_type_enum_param | None = Field(None)
    campaign_group_id: str | None = Field(None)
    day_parting_schedule: list[Any] | None = Field(None)
    deal_id: str | None = Field(None)
    destination_id: int | None = Field(None)
    destination_ids: list[str] | None = Field(None)
    end_time: int | None = Field(None)
    exceptions: bool | None = Field(None)
    existing_campaign_id: str | None = Field(None)
    expiration_time: int | None = Field(None)
    frequency_cap: int | None = Field(None)
    grp_buying: bool | None = Field(None)
    impression: int | None = Field(None)
    instream_packages: list[Any] | None = Field(None)
    interval_frequency_cap_reset_period: int | None = Field(None)
    is_balanced_frequency: bool | None = Field(None)
    is_bonus_media: bool | None = Field(None)
    is_conversion_goal: bool | None = Field(None)
    is_full_view: bool | None = Field(None)
    is_higher_average_frequency: bool | None = Field(None)
    is_reach_and_frequency_io_buying: bool | None = Field(None)
    is_reserved_buying: bool | None = Field(None)
    num_curve_points: int | None = Field(None)
    objective: str | None = Field(None)
    optimization_goal: str | None = Field(None)
    prediction_mode: int | None = Field(None)
    reach: int | None = Field(None)
    rf_prediction_id: str | None = Field(None)
    rf_prediction_id_to_release: str | None = Field(None)
    rf_prediction_id_to_share: str | None = Field(None)
    start_time: int | None = Field(None)
    stop_time: int | None = Field(None)
    story_event_type: int | None = Field(None)
    target_cpm: int | None = Field(None)
    target_frequency: int | None = Field(None)
    target_frequency_reset_period: int | None = Field(None)
    target_spec: TargetingFields | None = Field(None)
    video_view_length_constraint: int | None = Field(None)


class AdAccountCreateRecommendationParams(BaseModel):
    """Parameters for AdAccount.create_recommendation()."""

    model_config = ConfigDict(extra="allow")
    asc_fragmentation_parameters: dict[str, Any] | None = Field(None)
    autoflow_parameters: dict[str, Any] | None = Field(None)
    fragmentation_parameters: dict[str, Any] | None = Field(None)
    music_parameters: dict[str, Any] | None = Field(None)
    recommendation_signature: str = Field(...)
    scale_good_campaign_parameters: dict[str, Any] | None = Field(None)


class AdAccountGetSavedAudiencesParams(BaseModel):
    """Parameters for AdAccount.get_saved_audiences()."""

    model_config = ConfigDict(extra="allow")
    business_id: str | None = Field(None)
    fields: list[str] | None = Field(None)
    filtering: list[Any] | None = Field(None)


class AdAccountDeleteSubscribedAppsParams(BaseModel):
    """Parameters for AdAccount.delete_subscribed_apps()."""

    model_config = ConfigDict(extra="allow")
    app_id: str | None = Field(None)


class AdAccountCreateSubscribedAppParams(BaseModel):
    """Parameters for AdAccount.create_subscribed_app()."""

    model_config = ConfigDict(extra="allow")
    app_id: str | None = Field(None)


class AdAccountGetTargetingbrowseParams(BaseModel):
    """Parameters for AdAccount.get_targetingbrowse()."""

    model_config = ConfigDict(extra="allow")
    excluded_category: str | None = Field(None)
    include_nodes: bool | None = Field(None)
    is_exclusion: bool | None = Field(None)
    limit_type: adaccounttargetingbrowse_limit_type_enum_param | None = Field(None)
    regulated_categories: list[Any] | None = Field(None)
    regulated_countries: list[Any] | None = Field(None)
    whitelisted_types: list[Any] | None = Field(None)


class AdAccountGetTargetingsearchParams(BaseModel):
    """Parameters for AdAccount.get_targetingsearch()."""

    model_config = ConfigDict(extra="allow")
    allow_only_fat_head_interests: bool | None = Field(None)
    app_store: adaccounttargetingsearch_app_store_enum_param | None = Field(None)
    countries: list[str] | None = Field(None)
    is_account_level_brand_safety_exclusion: bool | None = Field(None)
    is_account_level_employer_exclusion: bool | None = Field(None)
    is_exclusion: bool | None = Field(None)
    limit_type: adaccounttargetingsearch_limit_type_enum_param | None = Field(None)
    objective: adaccounttargetingsearch_objective_enum_param | None = Field(None)
    promoted_object: dict[str, Any] | None = Field(None)
    q: str = Field(...)
    regulated_categories: list[Any] | None = Field(None)
    regulated_countries: list[Any] | None = Field(None)
    session_id: int | None = Field(None)
    targeting_list: list[Any] | None = Field(None)
    whitelisted_types: list[Any] | None = Field(None)


class AdAccountGetTargetingSentenceLinesParams(BaseModel):
    """Parameters for AdAccount.get_targeting_sentence_lines()."""

    model_config = ConfigDict(extra="allow")
    discard_ages: bool | None = Field(None)
    discard_placements: bool | None = Field(None)
    hide_targeting_spec_from_return: bool | None = Field(None)
    targeting_spec: TargetingFields = Field(...)


class AdAccountGetTargetingsuggestionsParams(BaseModel):
    """Parameters for AdAccount.get_targetingsuggestions()."""

    model_config = ConfigDict(extra="allow")
    app_store: adaccounttargetingsuggestions_app_store_enum_param | None = Field(None)
    countries: list[str] | None = Field(None)
    limit_type: adaccounttargetingsuggestions_limit_type_enum_param | None = Field(None)
    mode: adaccounttargetingsuggestions_mode_enum_param | None = Field(None)
    objective: adaccounttargetingsuggestions_objective_enum_param | None = Field(None)
    objects: dict[str, Any] | None = Field(None)
    regulated_categories: list[Any] | None = Field(None)
    regulated_countries: list[Any] | None = Field(None)
    session_id: int | None = Field(None)
    targeting_list: list[Any] | None = Field(None)
    whitelisted_types: list[Any] | None = Field(None)


class AdAccountGetTargetingvalidationParams(BaseModel):
    """Parameters for AdAccount.get_targetingvalidation()."""

    model_config = ConfigDict(extra="allow")
    id_list: list[Any] | None = Field(None)
    is_exclusion: bool | None = Field(None)
    name_list: list[str] | None = Field(None)
    targeting_list: list[Any] | None = Field(None)


class AdAccountCreateTrackingParams(BaseModel):
    """Parameters for AdAccount.create_tracking()."""

    model_config = ConfigDict(extra="allow")
    tracking_specs: dict[str, Any] = Field(...)


class AdAccountDeleteUsersofanyaudienceParams(BaseModel):
    """Parameters for AdAccount.delete_usersofanyaudience()."""

    model_config = ConfigDict(extra="allow")
    namespace: str | None = Field(None)
    payload: dict[str, Any] | None = Field(None)
    session: dict[str, Any] | None = Field(None)


class AdAccountGetValueRuleSetParams(BaseModel):
    """Parameters for AdAccount.get_value_rule_set()."""

    model_config = ConfigDict(extra="allow")
    product_type: adaccountvalue_rule_set_product_type_enum_param | None = Field(None)
    status: adaccountvalue_rule_set_status_enum_param | None = Field(None)


class AdAccountCreateValueRuleSetParams(BaseModel):
    """Parameters for AdAccount.create_value_rule_set()."""

    model_config = ConfigDict(extra="allow")
    name: str = Field(...)
    product_type: adaccountvalue_rule_set_product_type_enum_param | None = Field(None)
    rules: list[Any] = Field(...)


class AdAccountGetVideoAdsParams(BaseModel):
    """Parameters for AdAccount.get_video_ads()."""

    model_config = ConfigDict(extra="allow")
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)


class AdAccountCreateVideoAdParams(BaseModel):
    """Parameters for AdAccount.create_video_ad()."""

    model_config = ConfigDict(extra="allow")
    description: str | None = Field(None)
    privacy: str | None = Field(None)
    title: str | None = Field(None)
    upload_phase: adaccountvideo_ads_upload_phase_enum_param = Field(...)
    video_id: str | None = Field(None)
    video_state: adaccountvideo_ads_video_state_enum_param | None = Field(None)


class FlightGetOverrideDetailsParams(BaseModel):
    """Parameters for Flight.get_override_details()."""

    model_config = ConfigDict(extra="allow")
    keys: list[str] | None = Field(None)
    type: flightoverride_details_type_enum_param | None = Field(None)


class AdCreateAdLabelParams(BaseModel):
    """Parameters for Ad.create_ad_label()."""

    model_config = ConfigDict(extra="allow")
    adlabels: list[Any] = Field(...)
    execution_options: list[Any] | None = Field(None)


class AdGetAdrulesGovernedParams(BaseModel):
    """Parameters for Ad.get_adrules_governed()."""

    model_config = ConfigDict(extra="allow")
    pass_evaluation: bool | None = Field(None)


class AdGetCopiesParams(BaseModel):
    """Parameters for Ad.get_copies()."""

    model_config = ConfigDict(extra="allow")
    date_preset: adgroupcopies_date_preset_enum_param | None = Field(None)
    effective_status: list[str] | None = Field(None)
    time_range: dict[str, Any] | None = Field(None)
    updated_since: int | None = Field(None)


class AdCreateCopieParams(BaseModel):
    """Parameters for Ad.create_copie()."""

    model_config = ConfigDict(extra="allow")
    adset_id: str | None = Field(None)
    creative_parameters: AdCreativeFields | None = Field(None)
    rename_options: dict[str, Any] | None = Field(None)
    status_option: adgroupcopies_status_option_enum_param | None = Field(None)


class AdGetInsightsParams(BaseModel):
    """Parameters for Ad.get_insights()."""

    model_config = ConfigDict(extra="allow")
    action_attribution_windows: list[Any] | None = Field(None)
    action_breakdowns: list[Any] | None = Field(None)
    action_report_time: adgroupinsights_action_report_time_enum_param | None = Field(None)
    breakdowns: list[Any] | None = Field(None)
    date_preset: adgroupinsights_date_preset_enum_param | None = Field(None)
    default_summary: bool | None = Field(None)
    export_columns: list[str] | None = Field(None)
    export_format: str | None = Field(None)
    export_name: str | None = Field(None)
    fields: list[str] | None = Field(None)
    filtering: list[Any] | None = Field(None)
    level: adgroupinsights_level_enum_param | None = Field(None)
    limit: int | None = Field(None)
    product_id_limit: int | None = Field(None)
    sort: list[str] | None = Field(None)
    summary: list[str] | None = Field(None)
    summary_action_breakdowns: list[Any] | None = Field(None)
    time_increment: str | None = Field(None)
    time_range: dict[str, Any] | None = Field(None)
    time_ranges: list[Any] | None = Field(None)
    use_account_attribution_setting: bool | None = Field(None)
    use_unified_attribution_setting: bool | None = Field(None)


class AdCreateInsightParams(BaseModel):
    """Parameters for Ad.create_insight()."""

    model_config = ConfigDict(extra="allow")
    action_attribution_windows: list[Any] | None = Field(None)
    action_breakdowns: list[Any] | None = Field(None)
    action_report_time: adgroupinsights_action_report_time_enum_param | None = Field(None)
    breakdowns: list[Any] | None = Field(None)
    date_preset: adgroupinsights_date_preset_enum_param | None = Field(None)
    default_summary: bool | None = Field(None)
    export_columns: list[str] | None = Field(None)
    export_format: str | None = Field(None)
    export_name: str | None = Field(None)
    fields: list[str] | None = Field(None)
    filtering: list[Any] | None = Field(None)
    level: adgroupinsights_level_enum_param | None = Field(None)
    limit: int | None = Field(None)
    product_id_limit: int | None = Field(None)
    sort: list[str] | None = Field(None)
    summary: list[str] | None = Field(None)
    summary_action_breakdowns: list[Any] | None = Field(None)
    time_increment: str | None = Field(None)
    time_range: dict[str, Any] | None = Field(None)
    time_ranges: list[Any] | None = Field(None)
    use_account_attribution_setting: bool | None = Field(None)
    use_unified_attribution_setting: bool | None = Field(None)


class AdGetPreviewsParams(BaseModel):
    """Parameters for Ad.get_previews()."""

    model_config = ConfigDict(extra="allow")
    ad_format: adgrouppreviews_ad_format_enum_param = Field(...)
    creative_feature: adgrouppreviews_creative_feature_enum_param | None = Field(None)
    dynamic_asset_label: str | None = Field(None)
    dynamic_creative_spec: dict[str, Any] | None = Field(None)
    dynamic_customization: dict[str, Any] | None = Field(None)
    end_date: datetime | None = Field(None)
    height: int | None = Field(None)
    locale: str | None = Field(None)
    place_page_id: int | None = Field(None)
    post: dict[str, Any] | None = Field(None)
    product_item_ids: list[str] | None = Field(None)
    render_type: adgrouppreviews_render_type_enum_param | None = Field(None)
    start_date: datetime | None = Field(None)
    width: int | None = Field(None)


class CanvasGetPreviewsParams(BaseModel):
    """Parameters for Canvas.get_previews()."""

    model_config = ConfigDict(extra="allow")
    user_ids: list[int] | None = Field(None)


class EventSourceGroupCreateSharedAccountParams(BaseModel):
    """Parameters for EventSourceGroup.create_shared_account()."""

    model_config = ConfigDict(extra="allow")
    accounts: list[str] = Field(...)


class CustomAudienceDeleteAdAccountsParams(BaseModel):
    """Parameters for CustomAudience.delete_ad_accounts()."""

    model_config = ConfigDict(extra="allow")
    adaccounts: list[str] | None = Field(None)


class CustomAudienceGetAdAccountsParams(BaseModel):
    """Parameters for CustomAudience.get_ad_accounts()."""

    model_config = ConfigDict(extra="allow")
    permissions: str | None = Field(None)


class CustomAudienceCreateAdAccountParams(BaseModel):
    """Parameters for CustomAudience.create_ad_account()."""

    model_config = ConfigDict(extra="allow")
    adaccounts: list[str] | None = Field(None)
    permissions: str | None = Field(None)
    relationship_type: list[str] | None = Field(None)
    replace: bool | None = Field(None)


class CustomAudienceGetAdSParams(BaseModel):
    """Parameters for CustomAudience.get_ad_s()."""

    model_config = ConfigDict(extra="allow")
    effective_status: list[str] | None = Field(None)
    status: list[str] | None = Field(None)


class CustomAudienceGetHealthParams(BaseModel):
    """Parameters for CustomAudience.get_health()."""

    model_config = ConfigDict(extra="allow")
    calculated_date: str | None = Field(None)
    processed_date: str | None = Field(None)
    value_aggregation_duration: int | None = Field(None)
    value_country: str | None = Field(None)
    value_currency: str | None = Field(None)
    value_version: int | None = Field(None)


class CustomAudienceGetSaltsParams(BaseModel):
    """Parameters for CustomAudience.get_salts()."""

    model_config = ConfigDict(extra="allow")
    params: list[str] | None = Field(None)


class CustomAudienceCreateSaltParams(BaseModel):
    """Parameters for CustomAudience.create_salt()."""

    model_config = ConfigDict(extra="allow")
    salt: str = Field(...)
    valid_from: datetime = Field(...)
    valid_to: datetime = Field(...)


class CustomAudienceGetSessionsParams(BaseModel):
    """Parameters for CustomAudience.get_sessions()."""

    model_config = ConfigDict(extra="allow")
    session_id: int | None = Field(None)


class CustomAudienceDeleteUsersParams(BaseModel):
    """Parameters for CustomAudience.delete_users()."""

    model_config = ConfigDict(extra="allow")
    namespace: str | None = Field(None)
    payload: dict[str, Any] | None = Field(None)
    session: dict[str, Any] | None = Field(None)


class CustomAudienceCreateUserParams(BaseModel):
    """Parameters for CustomAudience.create_user()."""

    model_config = ConfigDict(extra="allow")
    namespace: str | None = Field(None)
    payload: dict[str, Any] | None = Field(None)
    session: dict[str, Any] | None = Field(None)


class CustomAudienceCreateUsersreplaceParams(BaseModel):
    """Parameters for CustomAudience.create_usersreplace()."""

    model_config = ConfigDict(extra="allow")
    namespace: str | None = Field(None)
    payload: dict[str, Any] = Field(...)
    session: dict[str, Any] = Field(...)


class IGUserExportForCAMGetInsightsParams(BaseModel):
    """Parameters for IGUserExportForCAM.get_insights()."""

    model_config = ConfigDict(extra="allow")
    breakdown: iguserexportforcaminsights_breakdown_enum_param | None = Field(None)
    metrics: list[Any] | None = Field(None)
    period: iguserexportforcaminsights_period_enum_param | None = Field(None)
    time_range: iguserexportforcaminsights_time_range_enum_param | None = Field(None)


class WhatsAppBusinessAccountDeleteAssignedUsersParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.delete_assigned_users()."""

    model_config = ConfigDict(extra="allow")
    user: int = Field(...)


class WhatsAppBusinessAccountGetAssignedUsersParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.get_assigned_users()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)


class WhatsAppBusinessAccountCreateAssignedUserParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.create_assigned_user()."""

    model_config = ConfigDict(extra="allow")
    tasks: list[Any] = Field(...)
    user: int = Field(...)


class WhatsAppBusinessAccountGetCallAnalyticsParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.get_call_analytics()."""

    model_config = ConfigDict(extra="allow")
    country_codes: list[str] | None = Field(None)
    dimensions: list[Any] | None = Field(None)
    directions: list[Any] | None = Field(None)
    end: int = Field(...)
    granularity: whatsappbusinessaccountcall_analytics_granularity_enum_param = Field(...)
    metric_types: list[Any] | None = Field(None)
    phone_numbers: list[str] | None = Field(None)
    start: int = Field(...)


class WhatsAppBusinessAccountGetConversationAnalyticsParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.get_conversation_analytics()."""

    model_config = ConfigDict(extra="allow")
    conversation_categories: list[Any] | None = Field(None)
    conversation_directions: list[Any] | None = Field(None)
    conversation_types: list[Any] | None = Field(None)
    country_codes: list[str] | None = Field(None)
    dimensions: list[Any] | None = Field(None)
    end: int = Field(...)
    granularity: whatsappbusinessaccountconversation_analytics_granularity_enum_param = Field(...)
    metric_types: list[Any] | None = Field(None)
    phone_numbers: list[str] | None = Field(None)
    start: int = Field(...)


class WhatsAppBusinessAccountCreateDatasetParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.create_dataset()."""

    model_config = ConfigDict(extra="allow")
    dataset_name: str | None = Field(None)


class WhatsAppBusinessAccountCreateFlowParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.create_flow()."""

    model_config = ConfigDict(extra="allow")
    categories: list[Any] = Field(...)
    clone_flow_id: str | None = Field(None)
    endpoint_uri: str | None = Field(None)
    flow_json: str | None = Field(None)
    name: str = Field(...)
    publish: bool | None = Field(None)


class WhatsAppBusinessAccountCreateGeneratePaymentConfigurationOauthLinkParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.create_generate_payment_configuration_oauth_link()."""

    model_config = ConfigDict(extra="allow")
    configuration_name: str = Field(...)
    redirect_url: str | None = Field(None)


class WhatsAppBusinessAccountGetMessageTemplatePreviewsParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.get_message_template_previews()."""

    model_config = ConfigDict(extra="allow")
    add_security_recommendation: bool | None = Field(None)
    button_types: list[Any] | None = Field(None)
    category: whatsappbusinessaccountmessage_template_previews_category_enum_param = Field(...)
    code_expiration_minutes: int | None = Field(None)
    languages: list[str] | None = Field(None)


class WhatsAppBusinessAccountDeleteMessageTemplatesParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.delete_message_templates()."""

    model_config = ConfigDict(extra="allow")
    hsm_id: str | None = Field(None)
    name: str = Field(...)


class WhatsAppBusinessAccountGetMessageTemplatesParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.get_message_templates()."""

    model_config = ConfigDict(extra="allow")
    category: list[Any] | None = Field(None)
    content: str | None = Field(None)
    language: list[str] | None = Field(None)
    name: str | None = Field(None)
    name_or_content: str | None = Field(None)
    quality_score: list[Any] | None = Field(None)
    status: list[Any] | None = Field(None)


class WhatsAppBusinessAccountCreateMessageTemplateParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.create_message_template()."""

    model_config = ConfigDict(extra="allow")
    allow_category_change: bool | None = Field(None)
    category: whatsappbusinessaccountmessage_templates_category_enum_param = Field(...)
    components: list[Any] | None = Field(None)
    cta_url_link_tracking_opted_out: bool | None = Field(None)
    degrees_of_freedom_spec: dict[str, Any] | None = Field(None)
    display_format: whatsappbusinessaccountmessage_templates_display_format_enum_param | None = (
        Field(None)
    )
    language: str = Field(...)
    library_template_body_inputs: dict[str, Any] | None = Field(None)
    library_template_button_inputs: list[Any] | None = Field(None)
    library_template_name: str | None = Field(None)
    message_send_ttl_seconds: int | None = Field(None)
    name: str = Field(...)
    parameter_format: (
        whatsappbusinessaccountmessage_templates_parameter_format_enum_param | None
    ) = Field(None)
    sub_category: whatsappbusinessaccountmessage_templates_sub_category_enum_param | None = Field(
        None
    )


class WhatsAppBusinessAccountCreateMigrateFlowParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.create_migrate_flow()."""

    model_config = ConfigDict(extra="allow")
    source_flow_names: list[str] | None = Field(None)
    source_waba_id: str = Field(...)


class WhatsAppBusinessAccountCreateMigrateMessageTemplateParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.create_migrate_message_template()."""

    model_config = ConfigDict(extra="allow")
    page_number: int | None = Field(None)
    source_waba_id: str = Field(...)


class WhatsAppBusinessAccountDeletePaymentConfigurationParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.delete_payment_configuration()."""

    model_config = ConfigDict(extra="allow")
    configuration_name: str = Field(...)


class WhatsAppBusinessAccountGetPaymentConfigurationParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.get_payment_configuration()."""

    model_config = ConfigDict(extra="allow")
    configuration_name: str = Field(...)


class WhatsAppBusinessAccountCreatePaymentConfigurationParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.create_payment_configuration()."""

    model_config = ConfigDict(extra="allow")
    configuration_name: str = Field(...)
    data_endpoint_url: str | None = Field(None)
    merchant_category_code: str | None = Field(None)
    merchant_vpa: str | None = Field(None)
    provider_name: whatsappbusinessaccountpayment_configuration_provider_name_enum_param | None = (
        Field(None)
    )
    purpose_code: str | None = Field(None)
    redirect_url: str | None = Field(None)


class WhatsAppBusinessAccountCreatePhoneNumberParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.create_phone_number()."""

    model_config = ConfigDict(extra="allow")
    cc: str | None = Field(None)
    migrate_phone_number: bool | None = Field(None)
    phone_number: str | None = Field(None)
    preverified_id: str | None = Field(None)
    verified_name: str | None = Field(None)


class WhatsAppBusinessAccountGetPricingAnalyticsParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.get_pricing_analytics()."""

    model_config = ConfigDict(extra="allow")
    country_codes: list[str] | None = Field(None)
    dimensions: list[Any] | None = Field(None)
    end: int = Field(...)
    granularity: whatsappbusinessaccountpricing_analytics_granularity_enum_param = Field(...)
    metric_types: list[Any] | None = Field(None)
    phone_numbers: list[str] | None = Field(None)
    pricing_categories: list[Any] | None = Field(None)
    pricing_types: list[Any] | None = Field(None)
    start: int = Field(...)
    tiers: list[str] | None = Field(None)


class WhatsAppBusinessAccountDeleteProductCatalogsParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.delete_product_catalogs()."""

    model_config = ConfigDict(extra="allow")
    catalog_id: str = Field(...)


class WhatsAppBusinessAccountCreateProductCatalogParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.create_product_catalog()."""

    model_config = ConfigDict(extra="allow")
    catalog_id: str = Field(...)


class WhatsAppBusinessAccountCreateSetOboMobilityIntentParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.create_set_obo_mobility_intent()."""

    model_config = ConfigDict(extra="allow")
    solution_id: str | None = Field(None)


class WhatsAppBusinessAccountCreateSetSolutionMigrationIntentParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.create_set_solution_migration_intent()."""

    model_config = ConfigDict(extra="allow")
    app_id: str | None = Field(None)
    solution_id: str | None = Field(None)


class WhatsAppBusinessAccountCreateSubscribedAppParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.create_subscribed_app()."""

    model_config = ConfigDict(extra="allow")
    override_callback_uri: str | None = Field(None)
    verify_token: str | None = Field(None)


class WhatsAppBusinessAccountGetTemplateAnalyticsParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.get_template_analytics()."""

    model_config = ConfigDict(extra="allow")
    end: datetime = Field(...)
    granularity: whatsappbusinessaccounttemplate_analytics_granularity_enum_param = Field(...)
    metric_types: list[Any] | None = Field(None)
    product_type: whatsappbusinessaccounttemplate_analytics_product_type_enum_param | None = Field(
        None
    )
    start: datetime = Field(...)
    template_ids: list[str] = Field(...)


class WhatsAppBusinessAccountGetTemplateGroupAnalyticsParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.get_template_group_analytics()."""

    model_config = ConfigDict(extra="allow")
    end: datetime = Field(...)
    granularity: whatsappbusinessaccounttemplate_group_analytics_granularity_enum_param = Field(...)
    metric_types: list[Any] | None = Field(None)
    start: datetime = Field(...)
    template_group_ids: list[str] = Field(...)


class WhatsAppBusinessAccountCreateTemplateGroupParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.create_template_group()."""

    model_config = ConfigDict(extra="allow")
    description: str = Field(...)
    name: str = Field(...)
    whatsapp_business_templates: list[str] = Field(...)


class WhatsAppBusinessAccountGetTemplatePerformanceMetricsParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.get_template_performance_metrics()."""

    model_config = ConfigDict(extra="allow")
    name: str | None = Field(None)
    template_id: str | None = Field(None)


class WhatsAppBusinessAccountCreateUpsertMessageTemplateParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.create_upsert_message_template()."""

    model_config = ConfigDict(extra="allow")
    category: whatsappbusinessaccountupsert_message_templates_category_enum_param = Field(...)
    components: list[Any] = Field(...)
    languages: list[str] = Field(...)
    message_send_ttl_seconds: int | None = Field(None)
    name: str = Field(...)


class WhatsAppBusinessAccountGetWelcomeMessageSequencesParams(BaseModel):
    """Parameters for WhatsAppBusinessAccount.get_welcome_message_sequences()."""

    model_config = ConfigDict(extra="allow")
    app_id: str | None = Field(None)
    sequence_id: str | None = Field(None)


class AdMonetizationPropertyGetAdNetworkanalyticsParams(BaseModel):
    """Parameters for AdMonetizationProperty.get_ad_networkanalytics()."""

    model_config = ConfigDict(extra="allow")
    aggregation_period: (
        admonetizationpropertyadnetworkanalytics_aggregation_period_enum_param | None
    ) = Field(None)
    breakdowns: list[Any] | None = Field(None)
    filters: list[Any] | None = Field(None)
    limit: int | None = Field(None)
    metrics: list[Any] = Field(...)
    ordering_column: admonetizationpropertyadnetworkanalytics_ordering_column_enum_param | None = (
        Field(None)
    )
    ordering_type: admonetizationpropertyadnetworkanalytics_ordering_type_enum_param | None = Field(
        None
    )
    should_include_until: bool | None = Field(None)
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)


class AdMonetizationPropertyCreateAdNetworkanalyticParams(BaseModel):
    """Parameters for AdMonetizationProperty.create_ad_networkanalytic()."""

    model_config = ConfigDict(extra="allow")
    aggregation_period: (
        admonetizationpropertyadnetworkanalytics_aggregation_period_enum_param | None
    ) = Field(None)
    breakdowns: list[Any] | None = Field(None)
    filters: list[Any] | None = Field(None)
    limit: int | None = Field(None)
    metrics: list[Any] = Field(...)
    ordering_column: admonetizationpropertyadnetworkanalytics_ordering_column_enum_param | None = (
        Field(None)
    )
    ordering_type: admonetizationpropertyadnetworkanalytics_ordering_type_enum_param | None = Field(
        None
    )
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)


class AdMonetizationPropertyGetAdnetworkanalyticsResultsParams(BaseModel):
    """Parameters for AdMonetizationProperty.get_adnetworkanalytics_results()."""

    model_config = ConfigDict(extra="allow")
    query_ids: list[str] | None = Field(None)


class VehicleGetOverrideDetailsParams(BaseModel):
    """Parameters for Vehicle.get_override_details()."""

    model_config = ConfigDict(extra="allow")
    keys: list[str] | None = Field(None)
    type: vehicleoverride_details_type_enum_param | None = Field(None)


class PaymentEnginePaymentCreateDisputeParams(BaseModel):
    """Parameters for PaymentEnginePayment.create_dispute()."""

    model_config = ConfigDict(extra="allow")
    reason: paymentenginepaymentdispute_reason_enum_param = Field(...)


class PaymentEnginePaymentCreateRefundParams(BaseModel):
    """Parameters for PaymentEnginePayment.create_refund()."""

    model_config = ConfigDict(extra="allow")
    amount: float = Field(...)
    currency: str = Field(...)
    reason: paymentenginepaymentrefunds_reason_enum_param | None = Field(None)


class ProductCatalogDeleteAgenciesParams(BaseModel):
    """Parameters for ProductCatalog.delete_agencies()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)


class ProductCatalogCreateAgencieParams(BaseModel):
    """Parameters for ProductCatalog.create_agencie()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)
    permitted_roles: list[Any] | None = Field(None)
    permitted_tasks: list[Any] | None = Field(None)
    skip_defaults: bool | None = Field(None)
    utm_settings: dict[str, Any] | None = Field(None)


class ProductCatalogDeleteAssignedUsersParams(BaseModel):
    """Parameters for ProductCatalog.delete_assigned_users()."""

    model_config = ConfigDict(extra="allow")
    user: int = Field(...)


class ProductCatalogGetAssignedUsersParams(BaseModel):
    """Parameters for ProductCatalog.get_assigned_users()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)


class ProductCatalogCreateAssignedUserParams(BaseModel):
    """Parameters for ProductCatalog.create_assigned_user()."""

    model_config = ConfigDict(extra="allow")
    tasks: list[Any] = Field(...)
    user: int = Field(...)


class ProductCatalogGetAutomotiveModelsParams(BaseModel):
    """Parameters for ProductCatalog.get_automotive_models()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductCatalogCreateBatchParams(BaseModel):
    """Parameters for ProductCatalog.create_batch()."""

    model_config = ConfigDict(extra="allow")
    allow_upsert: bool | None = Field(None)
    fbe_external_business_id: str | None = Field(None)
    requests: list[Any] = Field(...)
    version: int | None = Field(None)


class ProductCatalogCreateCatalogStoreParams(BaseModel):
    """Parameters for ProductCatalog.create_catalog_store()."""

    model_config = ConfigDict(extra="allow")
    page: str = Field(...)


class ProductCatalogGetCategoriesParams(BaseModel):
    """Parameters for ProductCatalog.get_categories()."""

    model_config = ConfigDict(extra="allow")
    categorization_criteria: productcatalogcategories_categorization_criteria_enum_param = Field(
        ...
    )
    filter: dict[str, Any] | None = Field(None)


class ProductCatalogCreateCategorieParams(BaseModel):
    """Parameters for ProductCatalog.create_categorie()."""

    model_config = ConfigDict(extra="allow")
    data: list[Any] = Field(...)


class ProductCatalogGetCheckBatchRequestStatusParams(BaseModel):
    """Parameters for ProductCatalog.get_check_batch_request_status()."""

    model_config = ConfigDict(extra="allow")
    error_priority: productcatalogcheck_batch_request_status_error_priority_enum_param | None = (
        Field(None)
    )
    handle: str = Field(...)
    load_ids_of_invalid_requests: bool | None = Field(None)


class ProductCatalogGetCheckMarketplacePartnerSellersStatusParams(BaseModel):
    """Parameters for ProductCatalog.get_check_marketplace_partner_sellers_status()."""

    model_config = ConfigDict(extra="allow")
    session_id: str = Field(...)


class ProductCatalogCreateCpasLsbImageBankParams(BaseModel):
    """Parameters for ProductCatalog.create_cpas_lsb_image_bank()."""

    model_config = ConfigDict(extra="allow")
    ad_group_id: int | None = Field(None)
    agency_business_id: int | None = Field(None)
    backup_image_urls: list[str] = Field(...)


class ProductCatalogGetCreatorAssetCreativesParams(BaseModel):
    """Parameters for ProductCatalog.get_creator_asset_creatives()."""

    model_config = ConfigDict(extra="allow")
    moderation_status: productcatalogcreator_asset_creatives_moderation_status_enum_param | None = (
        Field(None)
    )


class ProductCatalogGetDataSourcesParams(BaseModel):
    """Parameters for ProductCatalog.get_data_sources()."""

    model_config = ConfigDict(extra="allow")
    ingestion_source_type: productcatalogdata_sources_ingestion_source_type_enum_param | None = (
        Field(None)
    )


class ProductCatalogGetDestinationsParams(BaseModel):
    """Parameters for ProductCatalog.get_destinations()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductCatalogGetDiagnosticsParams(BaseModel):
    """Parameters for ProductCatalog.get_diagnostics()."""

    model_config = ConfigDict(extra="allow")
    affected_channels: list[Any] | None = Field(None)
    affected_entities: list[Any] | None = Field(None)
    affected_features: list[Any] | None = Field(None)
    severities: list[Any] | None = Field(None)
    types: list[Any] | None = Field(None)


class ProductCatalogGetEventStatsParams(BaseModel):
    """Parameters for ProductCatalog.get_event_stats()."""

    model_config = ConfigDict(extra="allow")
    breakdowns: list[Any] | None = Field(None)


class ProductCatalogDeleteExternalEventSourcesParams(BaseModel):
    """Parameters for ProductCatalog.delete_external_event_sources()."""

    model_config = ConfigDict(extra="allow")
    external_event_sources: dict[str, Any] | None = Field(None)


class ProductCatalogCreateExternalEventSourceParams(BaseModel):
    """Parameters for ProductCatalog.create_external_event_source()."""

    model_config = ConfigDict(extra="allow")
    external_event_sources: dict[str, Any] | None = Field(None)


class ProductCatalogGetFlightsParams(BaseModel):
    """Parameters for ProductCatalog.get_flights()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductCatalogCreateGeolocatedItemsBatchParams(BaseModel):
    """Parameters for ProductCatalog.create_geolocated_items_batch()."""

    model_config = ConfigDict(extra="allow")
    allow_upsert: bool | None = Field(None)
    item_type: str = Field(...)
    requests: dict[str, Any] = Field(...)


class ProductCatalogGetHomeListingsParams(BaseModel):
    """Parameters for ProductCatalog.get_home_listings()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductCatalogCreateHomeListingParams(BaseModel):
    """Parameters for ProductCatalog.create_home_listing()."""

    model_config = ConfigDict(extra="allow")
    address: dict[str, Any] = Field(...)
    availability: str = Field(...)
    currency: str = Field(...)
    description: str | None = Field(None)
    home_listing_id: str = Field(...)
    images: list[Any] = Field(...)
    listing_type: str | None = Field(None)
    name: str = Field(...)
    num_baths: float | None = Field(None)
    num_beds: float | None = Field(None)
    num_units: float | None = Field(None)
    price: float = Field(...)
    property_type: str | None = Field(None)
    url: str = Field(...)
    year_built: int = Field(...)


class ProductCatalogGetHotelRoomsBatchParams(BaseModel):
    """Parameters for ProductCatalog.get_hotel_rooms_batch()."""

    model_config = ConfigDict(extra="allow")
    handle: str = Field(...)


class ProductCatalogCreateHotelRoomsBatchParams(BaseModel):
    """Parameters for ProductCatalog.create_hotel_rooms_batch()."""

    model_config = ConfigDict(extra="allow")
    file: Any | None = Field(None)
    password: str | None = Field(None)
    standard: productcataloghotel_rooms_batch_standard_enum_param = Field(...)
    update_only: bool | None = Field(None)
    url: str | None = Field(None)
    username: str | None = Field(None)


class ProductCatalogGetHotelsParams(BaseModel):
    """Parameters for ProductCatalog.get_hotels()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductCatalogCreateHotelParams(BaseModel):
    """Parameters for ProductCatalog.create_hotel()."""

    model_config = ConfigDict(extra="allow")
    address: dict[str, Any] = Field(...)
    applinks: dict[str, Any] | None = Field(None)
    base_price: int | None = Field(None)
    brand: str | None = Field(None)
    currency: str | None = Field(None)
    description: str = Field(...)
    guest_ratings: list[Any] | None = Field(None)
    hotel_id: str | None = Field(None)
    images: list[Any] = Field(...)
    name: str = Field(...)
    phone: str | None = Field(None)
    star_rating: float | None = Field(None)
    url: str = Field(...)


class ProductCatalogCreateItemsBatchParams(BaseModel):
    """Parameters for ProductCatalog.create_items_batch()."""

    model_config = ConfigDict(extra="allow")
    allow_upsert: bool | None = Field(None)
    item_sub_type: productcatalogitems_batch_item_sub_type_enum_param | None = Field(None)
    item_type: str = Field(...)
    requests: dict[str, Any] = Field(...)
    version: int | None = Field(None)


class ProductCatalogCreateLocalizedItemsBatchParams(BaseModel):
    """Parameters for ProductCatalog.create_localized_items_batch()."""

    model_config = ConfigDict(extra="allow")
    allow_upsert: bool | None = Field(None)
    item_type: str = Field(...)
    requests: dict[str, Any] = Field(...)
    version: int | None = Field(None)


class ProductCatalogCreateMarketplacePartnerSellersDetailParams(BaseModel):
    """Parameters for ProductCatalog.create_marketplace_partner_sellers_detail()."""

    model_config = ConfigDict(extra="allow")
    requests: dict[str, Any] = Field(...)


class ProductCatalogCreateMarketplacePartnerSignalParams(BaseModel):
    """Parameters for ProductCatalog.create_marketplace_partner_signal()."""

    model_config = ConfigDict(extra="allow")
    event_name: productcatalogmarketplace_partner_signals_event_name_enum_param = Field(...)
    event_source_url: str | None = Field(None)
    event_time: datetime = Field(...)
    order_data: dict[str, Any] | None = Field(None)
    user_data: dict[str, Any] = Field(...)


class ProductCatalogGetPricingVariablesBatchParams(BaseModel):
    """Parameters for ProductCatalog.get_pricing_variables_batch()."""

    model_config = ConfigDict(extra="allow")
    handle: str = Field(...)


class ProductCatalogCreatePricingVariablesBatchParams(BaseModel):
    """Parameters for ProductCatalog.create_pricing_variables_batch()."""

    model_config = ConfigDict(extra="allow")
    file: Any | None = Field(None)
    password: str | None = Field(None)
    standard: productcatalogpricing_variables_batch_standard_enum_param = Field(...)
    update_only: bool | None = Field(None)
    url: str | None = Field(None)
    username: str | None = Field(None)


class ProductCatalogCreateProductFeedParams(BaseModel):
    """Parameters for ProductCatalog.create_product_feed()."""

    model_config = ConfigDict(extra="allow")
    country: str | None = Field(None)
    default_currency: str | None = Field(None)
    deletion_enabled: bool | None = Field(None)
    delimiter: productcatalogproduct_feeds_delimiter_enum_param | None = Field(None)
    encoding: productcatalogproduct_feeds_encoding_enum_param | None = Field(None)
    feed_type: productcatalogproduct_feeds_feed_type_enum_param | None = Field(None)
    file_name: str | None = Field(None)
    ingestion_source_type: productcatalogproduct_feeds_ingestion_source_type_enum_param | None = (
        Field(None)
    )
    item_sub_type: productcatalogproduct_feeds_item_sub_type_enum_param | None = Field(None)
    migrated_from_feed_id: str | None = Field(None)
    name: str | None = Field(None)
    override_type: productcatalogproduct_feeds_override_type_enum_param | None = Field(None)
    override_value: str | None = Field(None)
    primary_feed_ids: list[str] | None = Field(None)
    quoted_fields_mode: productcatalogproduct_feeds_quoted_fields_mode_enum_param | None = Field(
        None
    )
    rules: list[str] | None = Field(None)
    schedule: str | None = Field(None)
    selected_override_fields: list[str] | None = Field(None)
    update_schedule: str | None = Field(None)


class ProductCatalogCreateProductGroupParams(BaseModel):
    """Parameters for ProductCatalog.create_product_group()."""

    model_config = ConfigDict(extra="allow")
    retailer_id: str | None = Field(None)
    variants: list[Any] | None = Field(None)


class ProductCatalogGetProductSetsParams(BaseModel):
    """Parameters for ProductCatalog.get_product_sets()."""

    model_config = ConfigDict(extra="allow")
    ancestor_id: str | None = Field(None)
    has_children: bool | None = Field(None)
    parent_id: str | None = Field(None)
    retailer_id: str | None = Field(None)


class ProductCatalogCreateProductSetParams(BaseModel):
    """Parameters for ProductCatalog.create_product_set()."""

    model_config = ConfigDict(extra="allow")
    filter: dict[str, Any] | None = Field(None)
    metadata: dict[str, Any] | None = Field(None)
    name: str = Field(...)
    ordering_info: list[Any] | None = Field(None)
    publish_to_shops: list[Any] | None = Field(None)
    retailer_id: str | None = Field(None)


class ProductCatalogGetProductSetsBatchParams(BaseModel):
    """Parameters for ProductCatalog.get_product_sets_batch()."""

    model_config = ConfigDict(extra="allow")
    handle: str = Field(...)


class ProductCatalogGetProductSParams(BaseModel):
    """Parameters for ProductCatalog.get_product_s()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    error_priority: productcatalogproducts_error_priority_enum_param | None = Field(None)
    error_type: productcatalogproducts_error_type_enum_param | None = Field(None)
    filter: dict[str, Any] | None = Field(None)
    return_only_approved_products: bool | None = Field(None)


class ProductCatalogCreateProductParams(BaseModel):
    """Parameters for ProductCatalog.create_product_()."""

    model_config = ConfigDict(extra="allow")
    additional_image_urls: list[str] | None = Field(None)
    additional_variant_attributes: dict[str, Any] | None = Field(None)
    age_group: productcatalogproducts_age_group_enum_param | None = Field(None)
    android_app_name: str | None = Field(None)
    android_class: str | None = Field(None)
    android_package: str | None = Field(None)
    android_url: str | None = Field(None)
    availability: productcatalogproducts_availability_enum_param | None = Field(None)
    brand: str | None = Field(None)
    category: str | None = Field(None)
    category_specific_fields: dict[str, Any] | None = Field(None)
    checkout_url: str | None = Field(None)
    color: str | None = Field(None)
    commerce_tax_category: productcatalogproducts_commerce_tax_category_enum_param | None = Field(
        None
    )
    condition: productcatalogproducts_condition_enum_param | None = Field(None)
    currency: str = Field(...)
    custom_data: dict[str, Any] | None = Field(None)
    custom_label_0: str | None = Field(None)
    custom_label_1: str | None = Field(None)
    custom_label_2: str | None = Field(None)
    custom_label_3: str | None = Field(None)
    custom_label_4: str | None = Field(None)
    custom_number_0: int | None = Field(None)
    custom_number_1: int | None = Field(None)
    custom_number_2: int | None = Field(None)
    custom_number_3: int | None = Field(None)
    custom_number_4: int | None = Field(None)
    description: str | None = Field(None)
    expiration_date: str | None = Field(None)
    fb_product_category: str | None = Field(None)
    gender: productcatalogproducts_gender_enum_param | None = Field(None)
    gtin: str | None = Field(None)
    image_url: str | None = Field(None)
    importer_address: dict[str, Any] | None = Field(None)
    importer_name: str | None = Field(None)
    inventory: int | None = Field(None)
    ios_app_name: str | None = Field(None)
    ios_app_store_id: int | None = Field(None)
    ios_url: str | None = Field(None)
    ipad_app_name: str | None = Field(None)
    ipad_app_store_id: int | None = Field(None)
    ipad_url: str | None = Field(None)
    iphone_app_name: str | None = Field(None)
    iphone_app_store_id: int | None = Field(None)
    iphone_url: str | None = Field(None)
    launch_date: str | None = Field(None)
    manufacturer_info: str | None = Field(None)
    manufacturer_part_number: str | None = Field(None)
    marked_for_product_launch: (
        productcatalogproducts_marked_for_product_launch_enum_param | None
    ) = Field(None)
    material: str | None = Field(None)
    mobile_link: str | None = Field(None)
    name: str = Field(...)
    ordering_index: int | None = Field(None)
    origin_country: productcatalogproducts_origin_country_enum_param | None = Field(None)
    pattern: str | None = Field(None)
    price: int = Field(...)
    product_priority_0: float | None = Field(None)
    product_priority_1: float | None = Field(None)
    product_priority_2: float | None = Field(None)
    product_priority_3: float | None = Field(None)
    product_priority_4: float | None = Field(None)
    product_type: str | None = Field(None)
    quantity_to_sell_on_facebook: int | None = Field(None)
    retailer_id: str | None = Field(None)
    retailer_product_group_id: str | None = Field(None)
    return_policy_days: int | None = Field(None)
    sale_price: int | None = Field(None)
    sale_price_end_date: datetime | None = Field(None)
    sale_price_start_date: datetime | None = Field(None)
    short_description: str | None = Field(None)
    size: str | None = Field(None)
    start_date: str | None = Field(None)
    url: str | None = Field(None)
    visibility: productcatalogproducts_visibility_enum_param | None = Field(None)
    wa_compliance_category: productcatalogproducts_wa_compliance_category_enum_param | None = Field(
        None
    )
    windows_phone_app_id: str | None = Field(None)
    windows_phone_app_name: str | None = Field(None)
    windows_phone_url: str | None = Field(None)


class ProductCatalogCreateUpdateGeneratedImageConfigParams(BaseModel):
    """Parameters for ProductCatalog.create_update_generated_image_config()."""

    model_config = ConfigDict(extra="allow")
    data: list[Any] = Field(...)


class ProductCatalogGetVehicleOffersParams(BaseModel):
    """Parameters for ProductCatalog.get_vehicle_offers()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductCatalogGetVehiclesParams(BaseModel):
    """Parameters for ProductCatalog.get_vehicles()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductCatalogCreateVehicleParams(BaseModel):
    """Parameters for ProductCatalog.create_vehicle()."""

    model_config = ConfigDict(extra="allow")
    address: dict[str, Any] = Field(...)
    applinks: dict[str, Any] | None = Field(None)
    availability: productcatalogvehicles_availability_enum_param | None = Field(None)
    body_style: productcatalogvehicles_body_style_enum_param = Field(...)
    condition: productcatalogvehicles_condition_enum_param | None = Field(None)
    currency: str = Field(...)
    date_first_on_lot: str | None = Field(None)
    dealer_id: str | None = Field(None)
    dealer_name: str | None = Field(None)
    dealer_phone: str | None = Field(None)
    description: str = Field(...)
    drivetrain: productcatalogvehicles_drivetrain_enum_param | None = Field(None)
    exterior_color: str = Field(...)
    fb_page_id: str | None = Field(None)
    fuel_type: productcatalogvehicles_fuel_type_enum_param | None = Field(None)
    images: list[Any] = Field(...)
    interior_color: str | None = Field(None)
    make: str = Field(...)
    mileage: dict[str, Any] = Field(...)
    model: str = Field(...)
    price: int = Field(...)
    state_of_vehicle: productcatalogvehicles_state_of_vehicle_enum_param = Field(...)
    title: str = Field(...)
    transmission: productcatalogvehicles_transmission_enum_param | None = Field(None)
    trim: str | None = Field(None)
    url: str = Field(...)
    vehicle_id: str = Field(...)
    vehicle_type: productcatalogvehicles_vehicle_type_enum_param | None = Field(None)
    vin: str = Field(...)
    year: int = Field(...)


class ProductCatalogCreateVersionItemsBatchParams(BaseModel):
    """Parameters for ProductCatalog.create_version_items_batch()."""

    model_config = ConfigDict(extra="allow")
    allow_upsert: bool | None = Field(None)
    item_type: str = Field(...)
    item_version: str = Field(...)
    requests: dict[str, Any] = Field(...)
    version: int | None = Field(None)


class BusinessAssetGroupDeleteAssignedUsersParams(BaseModel):
    """Parameters for BusinessAssetGroup.delete_assigned_users()."""

    model_config = ConfigDict(extra="allow")
    user: int = Field(...)


class BusinessAssetGroupGetAssignedUsersParams(BaseModel):
    """Parameters for BusinessAssetGroup.get_assigned_users()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)


class BusinessAssetGroupCreateAssignedUserParams(BaseModel):
    """Parameters for BusinessAssetGroup.create_assigned_user()."""

    model_config = ConfigDict(extra="allow")
    adaccount_tasks: list[Any] | None = Field(None)
    offline_conversion_data_set_tasks: list[Any] | None = Field(None)
    page_tasks: list[Any] | None = Field(None)
    pixel_tasks: list[Any] | None = Field(None)
    user: int = Field(...)


class BusinessAssetGroupDeleteContainedAdaccountsParams(BaseModel):
    """Parameters for BusinessAssetGroup.delete_contained_adaccounts()."""

    model_config = ConfigDict(extra="allow")
    asset_id: str = Field(...)


class BusinessAssetGroupCreateContainedAdaccountParams(BaseModel):
    """Parameters for BusinessAssetGroup.create_contained_adaccount()."""

    model_config = ConfigDict(extra="allow")
    asset_id: str = Field(...)


class BusinessAssetGroupDeleteContainedApplicationsParams(BaseModel):
    """Parameters for BusinessAssetGroup.delete_contained_applications()."""

    model_config = ConfigDict(extra="allow")
    asset_id: str = Field(...)


class BusinessAssetGroupCreateContainedApplicationParams(BaseModel):
    """Parameters for BusinessAssetGroup.create_contained_application()."""

    model_config = ConfigDict(extra="allow")
    asset_id: str = Field(...)


class BusinessAssetGroupDeleteContainedCustomConversionsParams(BaseModel):
    """Parameters for BusinessAssetGroup.delete_contained_custom_conversions()."""

    model_config = ConfigDict(extra="allow")
    asset_id: str = Field(...)


class BusinessAssetGroupCreateContainedCustomConversionParams(BaseModel):
    """Parameters for BusinessAssetGroup.create_contained_custom_conversion()."""

    model_config = ConfigDict(extra="allow")
    asset_id: str = Field(...)


class BusinessAssetGroupDeleteContainedInstagramAccountsParams(BaseModel):
    """Parameters for BusinessAssetGroup.delete_contained_instagram_accounts()."""

    model_config = ConfigDict(extra="allow")
    asset_id: str = Field(...)


class BusinessAssetGroupCreateContainedInstagramAccountParams(BaseModel):
    """Parameters for BusinessAssetGroup.create_contained_instagram_account()."""

    model_config = ConfigDict(extra="allow")
    asset_id: str = Field(...)


class BusinessAssetGroupDeleteContainedPagesParams(BaseModel):
    """Parameters for BusinessAssetGroup.delete_contained_pages()."""

    model_config = ConfigDict(extra="allow")
    asset_id: str = Field(...)


class BusinessAssetGroupCreateContainedPageParams(BaseModel):
    """Parameters for BusinessAssetGroup.create_contained_page()."""

    model_config = ConfigDict(extra="allow")
    asset_id: str = Field(...)


class BusinessAssetGroupDeleteContainedPixelsParams(BaseModel):
    """Parameters for BusinessAssetGroup.delete_contained_pixels()."""

    model_config = ConfigDict(extra="allow")
    asset_id: str = Field(...)


class BusinessAssetGroupCreateContainedPixelParams(BaseModel):
    """Parameters for BusinessAssetGroup.create_contained_pixel()."""

    model_config = ConfigDict(extra="allow")
    asset_id: str = Field(...)


class BusinessAssetGroupDeleteContainedProductCatalogsParams(BaseModel):
    """Parameters for BusinessAssetGroup.delete_contained_product_catalogs()."""

    model_config = ConfigDict(extra="allow")
    asset_id: str = Field(...)


class BusinessAssetGroupCreateContainedProductCatalogParams(BaseModel):
    """Parameters for BusinessAssetGroup.create_contained_product_catalog()."""

    model_config = ConfigDict(extra="allow")
    asset_id: str = Field(...)


class IGCommentCreateReplieParams(BaseModel):
    """Parameters for IGComment.create_replie()."""

    model_config = ConfigDict(extra="allow")
    message: str | None = Field(None)


class BusinessCreateAccessTokenParams(BaseModel):
    """Parameters for Business.create_access_token()."""

    model_config = ConfigDict(extra="allow")
    app_id: str = Field(...)
    fbe_external_business_id: str | None = Field(None)
    scope: list[Any] = Field(...)
    system_user_name: str | None = Field(None)


class BusinessGetAdAccountInfosParams(BaseModel):
    """Parameters for Business.get_ad_account_infos()."""

    model_config = ConfigDict(extra="allow")
    ad_account_id: str | None = Field(None)
    parent_advertiser_id: str | None = Field(None)
    user_id: str | None = Field(None)


class BusinessDeleteAdAccountsParams(BaseModel):
    """Parameters for Business.delete_ad_accounts()."""

    model_config = ConfigDict(extra="allow")
    adaccount_id: str = Field(...)


class BusinessCreateAdReviewRequestParams(BaseModel):
    """Parameters for Business.create_ad_review_request()."""

    model_config = ConfigDict(extra="allow")
    ad_account_ids: list[str] | None = Field(None)


class BusinessCreateAdStudieParams(BaseModel):
    """Parameters for Business.create_ad_studie()."""

    model_config = ConfigDict(extra="allow")
    cells: list[Any] = Field(...)
    client_business: str | None = Field(None)
    confidence_level: float | None = Field(None)
    cooldown_start_time: int | None = Field(None)
    description: str | None = Field(None)
    end_time: int = Field(...)
    name: str = Field(...)
    objectives: list[Any] | None = Field(None)
    observation_end_time: int | None = Field(None)
    start_time: int = Field(...)
    type: businessad_studies_type_enum_param | None = Field(None)
    viewers: list[int] | None = Field(None)


class BusinessCreateAdAccountParams(BaseModel):
    """Parameters for Business.create_ad_account()."""

    model_config = ConfigDict(extra="allow")
    ad_account_created_from_bm_flag: bool | None = Field(None)
    currency: str = Field(...)
    end_advertiser: dict[str, Any] = Field(...)
    funding_id: str | None = Field(None)
    invoice: bool | None = Field(None)
    invoice_group_id: str | None = Field(None)
    invoicing_emails: list[str] | None = Field(None)
    io: bool | None = Field(None)
    media_agency: str = Field(...)
    name: str = Field(...)
    partner: str = Field(...)
    po_number: str | None = Field(None)
    timezone_id: int = Field(...)


class BusinessCreateAddPhoneNumberParams(BaseModel):
    """Parameters for Business.create_add_phone_number()."""

    model_config = ConfigDict(extra="allow")
    phone_number: str = Field(...)


class BusinessCreateAdnetworkApplicationParams(BaseModel):
    """Parameters for Business.create_adnetwork_application()."""

    model_config = ConfigDict(extra="allow")
    name: str = Field(...)


class BusinessGetAdNetworkanalyticsParams(BaseModel):
    """Parameters for Business.get_ad_networkanalytics()."""

    model_config = ConfigDict(extra="allow")
    aggregation_period: businessadnetworkanalytics_aggregation_period_enum_param | None = Field(
        None
    )
    breakdowns: list[Any] | None = Field(None)
    filters: list[Any] | None = Field(None)
    limit: int | None = Field(None)
    metrics: list[Any] = Field(...)
    ordering_column: businessadnetworkanalytics_ordering_column_enum_param | None = Field(None)
    ordering_type: businessadnetworkanalytics_ordering_type_enum_param | None = Field(None)
    should_include_until: bool | None = Field(None)
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)


class BusinessCreateAdNetworkanalyticParams(BaseModel):
    """Parameters for Business.create_ad_networkanalytic()."""

    model_config = ConfigDict(extra="allow")
    aggregation_period: businessadnetworkanalytics_aggregation_period_enum_param | None = Field(
        None
    )
    breakdowns: list[Any] | None = Field(None)
    filters: list[Any] | None = Field(None)
    limit: int | None = Field(None)
    metrics: list[Any] = Field(...)
    ordering_column: businessadnetworkanalytics_ordering_column_enum_param | None = Field(None)
    ordering_type: businessadnetworkanalytics_ordering_type_enum_param | None = Field(None)
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)


class BusinessGetAdnetworkanalyticsResultsParams(BaseModel):
    """Parameters for Business.get_adnetworkanalytics_results()."""

    model_config = ConfigDict(extra="allow")
    query_ids: list[str] | None = Field(None)


class BusinessGetAdsDatasetParams(BaseModel):
    """Parameters for Business.get_ads_dataset()."""

    model_config = ConfigDict(extra="allow")
    id_filter: str | None = Field(None)
    name_filter: str | None = Field(None)
    sort_by: businessads_dataset_sort_by_enum_param | None = Field(None)


class BusinessCreateAdsDatasetParams(BaseModel):
    """Parameters for Business.create_ads_dataset()."""

    model_config = ConfigDict(extra="allow")
    ad_account_id: str | None = Field(None)
    app_id: str | None = Field(None)
    is_crm: bool | None = Field(None)
    name: str = Field(...)


class BusinessGetAdsReportingMmmReportsParams(BaseModel):
    """Parameters for Business.get_ads_reporting_mmm_reports()."""

    model_config = ConfigDict(extra="allow")
    filtering: list[Any] | None = Field(None)


class BusinessGetAdSpixelsParams(BaseModel):
    """Parameters for Business.get_ad_spixels()."""

    model_config = ConfigDict(extra="allow")
    id_filter: str | None = Field(None)
    name_filter: str | None = Field(None)
    sort_by: businessadspixels_sort_by_enum_param | None = Field(None)


class BusinessCreateAdSpixelParams(BaseModel):
    """Parameters for Business.create_ad_spixel()."""

    model_config = ConfigDict(extra="allow")
    is_crm: bool | None = Field(None)
    name: str = Field(...)


class BusinessDeleteAgenciesParams(BaseModel):
    """Parameters for Business.delete_agencies()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)


class BusinessCreateBlockListDraftParams(BaseModel):
    """Parameters for Business.create_block_list_draft()."""

    model_config = ConfigDict(extra="allow")
    publisher_urls_file: Any = Field(...)


class BusinessCreateBmReviewRequestParams(BaseModel):
    """Parameters for Business.create_bm_review_request()."""

    model_config = ConfigDict(extra="allow")
    business_manager_ids: list[str] = Field(...)


class BusinessGetBusinessInvoicesParams(BaseModel):
    """Parameters for Business.get_business_invoices()."""

    model_config = ConfigDict(extra="allow")
    end_date: str | None = Field(None)
    invoice_id: str | None = Field(None)
    issue_end_date: str | None = Field(None)
    issue_start_date: str | None = Field(None)
    root_id: int | None = Field(None)
    start_date: str | None = Field(None)
    type: businessbusiness_invoices_type_enum_param | None = Field(None)


class BusinessCreateBusinessUserParams(BaseModel):
    """Parameters for Business.create_business_user()."""

    model_config = ConfigDict(extra="allow")
    email: str = Field(...)
    invited_user_type: list[Any] | None = Field(None)
    role: businessbusiness_users_role_enum_param | None = Field(None)
    tasks: list[Any] | None = Field(None)


class BusinessCreateClaimCustomConversionParams(BaseModel):
    """Parameters for Business.create_claim_custom_conversion()."""

    model_config = ConfigDict(extra="allow")
    custom_conversion_id: str = Field(...)


class BusinessGetClientAdAccountsParams(BaseModel):
    """Parameters for Business.get_client_ad_accounts()."""

    model_config = ConfigDict(extra="allow")
    search_query: str | None = Field(None)


class BusinessCreateClientAppParams(BaseModel):
    """Parameters for Business.create_client_app()."""

    model_config = ConfigDict(extra="allow")
    app_id: dict[str, Any] = Field(...)


class BusinessCreateClientPageParams(BaseModel):
    """Parameters for Business.create_client_page()."""

    model_config = ConfigDict(extra="allow")
    page_id: int = Field(...)
    permitted_tasks: list[Any] | None = Field(None)


class BusinessDeleteClientsParams(BaseModel):
    """Parameters for Business.delete_clients()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)


class BusinessGetCollaborativeAdsCollaborationRequestsParams(BaseModel):
    """Parameters for Business.get_collaborative_ads_collaboration_requests()."""

    model_config = ConfigDict(extra="allow")
    status: str | None = Field(None)


class BusinessCreateCollaborativeAdsCollaborationRequestParams(BaseModel):
    """Parameters for Business.create_collaborative_ads_collaboration_request()."""

    model_config = ConfigDict(extra="allow")
    brands: list[str] = Field(...)
    contact_email: str = Field(...)
    contact_first_name: str = Field(...)
    contact_last_name: str = Field(...)
    phone_number: str | None = Field(None)
    receiver_business: str = Field(...)
    requester_agency_or_brand: businesscollaborative_ads_collaboration_requests_requester_agency_or_brand_enum_param = Field(
        ...
    )
    sender_client_business: str | None = Field(None)


class BusinessCreateCpasBusinessSetupConfigParams(BaseModel):
    """Parameters for Business.create_cpas_business_setup_config()."""

    model_config = ConfigDict(extra="allow")
    accepted_collab_ads_tos: bool | None = Field(None)
    ad_accounts: list[str] | None = Field(None)
    business_capabilities_status: dict[str, Any] | None = Field(None)
    capabilities_compliance_status: dict[str, Any] | None = Field(None)


class BusinessCreateCreativeFolderParams(BaseModel):
    """Parameters for Business.create_creative_folder()."""

    model_config = ConfigDict(extra="allow")
    description: str | None = Field(None)
    name: str = Field(...)
    parent_folder_id: str | None = Field(None)


class BusinessCreateCustomConversionParams(BaseModel):
    """Parameters for Business.create_custom_conversion()."""

    model_config = ConfigDict(extra="allow")
    action_source_type: businesscustomconversions_action_source_type_enum_param | None = Field(None)
    advanced_rule: str | None = Field(None)
    custom_event_type: businesscustomconversions_custom_event_type_enum_param = Field(...)
    default_conversion_value: float | None = Field(None)
    description: str | None = Field(None)
    event_source_id: str | None = Field(None)
    name: str = Field(...)
    rule: str | None = Field(None)


class BusinessCreateEventSourceGroupParams(BaseModel):
    """Parameters for Business.create_event_source_group()."""

    model_config = ConfigDict(extra="allow")
    event_sources: list[str] = Field(...)
    name: str = Field(...)


class BusinessGetExtendedcreditapplicationsParams(BaseModel):
    """Parameters for Business.get_extendedcreditapplications()."""

    model_config = ConfigDict(extra="allow")
    only_show_pending: bool | None = Field(None)


class BusinessGetExtendedcreditsParams(BaseModel):
    """Parameters for Business.get_extendedcredits()."""

    model_config = ConfigDict(extra="allow")
    order_by_is_owned_credential: bool | None = Field(None)


class BusinessCreateImageParams(BaseModel):
    """Parameters for Business.create_image()."""

    model_config = ConfigDict(extra="allow")
    ad_placements_validation_only: bool | None = Field(None)
    bytes: str | None = Field(None)
    creative_folder_id: str = Field(...)
    name: str | None = Field(None)
    validation_ad_placements: list[Any] | None = Field(None)


class BusinessGetInitiatedAudienceSharingRequestsParams(BaseModel):
    """Parameters for Business.get_initiated_audience_sharing_requests()."""

    model_config = ConfigDict(extra="allow")
    recipient_id: str | None = Field(None)
    request_status: businessinitiated_audience_sharing_requests_request_status_enum_param | None = (
        Field(None)
    )


class BusinessDeleteInstagramAccountsParams(BaseModel):
    """Parameters for Business.delete_instagram_accounts()."""

    model_config = ConfigDict(extra="allow")
    instagram_account: str = Field(...)


class BusinessDeleteManagedBusinessesParams(BaseModel):
    """Parameters for Business.delete_managed_businesses()."""

    model_config = ConfigDict(extra="allow")
    existing_client_business_id: str = Field(...)


class BusinessCreateManagedBusinesseParams(BaseModel):
    """Parameters for Business.create_managed_businesse()."""

    model_config = ConfigDict(extra="allow")
    child_business_external_id: str | None = Field(None)
    existing_client_business_id: str | None = Field(None)
    name: str | None = Field(None)
    sales_rep_email: str | None = Field(None)
    survey_business_type: businessmanaged_businesses_survey_business_type_enum_param | None = Field(
        None
    )
    survey_num_assets: int | None = Field(None)
    survey_num_people: int | None = Field(None)
    timezone_id: businessmanaged_businesses_timezone_id_enum_param | None = Field(None)
    vertical: businessmanaged_businesses_vertical_enum_param | None = Field(None)


class BusinessGetManagedPartnerAdsFundingSourceDetailsParams(BaseModel):
    """Parameters for Business.get_managed_partner_ads_funding_source_details()."""

    model_config = ConfigDict(extra="allow")
    year_quarter: str | None = Field(None)


class BusinessCreateManagedPartnerBusinessSetupParams(BaseModel):
    """Parameters for Business.create_managed_partner_business_setup()."""

    model_config = ConfigDict(extra="allow")
    active_ad_account_id: str | None = Field(None)
    active_page_id: int | None = Field(None)
    partner_facebook_page_url: str | None = Field(None)
    partner_registration_countries: list[str] | None = Field(None)
    seller_email_address: str | None = Field(None)
    seller_external_website_url: str | None = Field(None)
    template: list[Any] | None = Field(None)


class BusinessDeleteManagedPartnerBusinessesParams(BaseModel):
    """Parameters for Business.delete_managed_partner_businesses()."""

    model_config = ConfigDict(extra="allow")
    child_business_external_id: str | None = Field(None)
    child_business_id: str | None = Field(None)


class BusinessCreateManagedPartnerBusinesseParams(BaseModel):
    """Parameters for Business.create_managed_partner_businesse()."""

    model_config = ConfigDict(extra="allow")
    ad_account_currency: str | None = Field(None)
    catalog_id: str = Field(...)
    child_business_external_id: str | None = Field(None)
    credit_limit: int | None = Field(None)
    line_of_credit_id: str | None = Field(None)
    name: str = Field(...)
    no_ad_account: bool | None = Field(None)
    page_name: str | None = Field(None)
    page_profile_image_url: str | None = Field(None)
    partition_type: businessmanaged_partner_businesses_partition_type_enum_param | None = Field(
        None
    )
    partner_facebook_page_url: str | None = Field(None)
    partner_registration_countries: list[str] | None = Field(None)
    sales_rep_email: str | None = Field(None)
    seller_external_website_url: str = Field(...)
    seller_targeting_countries: list[str] = Field(...)
    skip_partner_page_creation: bool | None = Field(None)
    survey_business_type: (
        businessmanaged_partner_businesses_survey_business_type_enum_param | None
    ) = Field(None)
    survey_num_assets: int | None = Field(None)
    survey_num_people: int | None = Field(None)
    timezone_id: businessmanaged_partner_businesses_timezone_id_enum_param | None = Field(None)
    vertical: businessmanaged_partner_businesses_vertical_enum_param = Field(...)


class BusinessCreateOnboardPartnersToMmLiteParams(BaseModel):
    """Parameters for Business.create_onboard_partners_to_mm_lite()."""

    model_config = ConfigDict(extra="allow")
    solution_id: str | None = Field(None)


class BusinessCreateOpenbridgeConfigurationParams(BaseModel):
    """Parameters for Business.create_openbridge_configuration()."""

    model_config = ConfigDict(extra="allow")
    active: bool | None = Field(None)
    cloud_provider: str | None = Field(None)
    cloud_region: str | None = Field(None)
    destination_id: str | None = Field(None)
    endpoint: str | None = Field(None)
    fallback_domain: str | None = Field(None)
    first_party_domain: str | None = Field(None)
    host_business_id: int | None = Field(None)
    instance_id: str | None = Field(None)
    instance_version: str | None = Field(None)
    is_sgw_instance: bool | None = Field(None)
    is_sgw_pixel_from_meta_pixel: bool | None = Field(None)
    partner_name: str | None = Field(None)
    pixel_id: int = Field(...)
    sgw_account_id: str | None = Field(None)
    sgw_instance_url: str | None = Field(None)
    sgw_pixel_id: int | None = Field(None)


class BusinessGetOwnedAdAccountsParams(BaseModel):
    """Parameters for Business.get_owned_ad_accounts()."""

    model_config = ConfigDict(extra="allow")
    search_query: str | None = Field(None)


class BusinessCreateOwnedAdAccountParams(BaseModel):
    """Parameters for Business.create_owned_ad_account()."""

    model_config = ConfigDict(extra="allow")
    adaccount_id: str = Field(...)


class BusinessCreateOwnedAppParams(BaseModel):
    """Parameters for Business.create_owned_app()."""

    model_config = ConfigDict(extra="allow")
    app_id: dict[str, Any] = Field(...)


class BusinessDeleteOwnedBusinessesParams(BaseModel):
    """Parameters for Business.delete_owned_businesses()."""

    model_config = ConfigDict(extra="allow")
    client_id: str = Field(...)


class BusinessGetOwnedBusinessesParams(BaseModel):
    """Parameters for Business.get_owned_businesses()."""

    model_config = ConfigDict(extra="allow")
    child_business_external_id: str | None = Field(None)
    client_user_id: int | None = Field(None)


class BusinessCreateOwnedBusinesseParams(BaseModel):
    """Parameters for Business.create_owned_businesse()."""

    model_config = ConfigDict(extra="allow")
    child_business_external_id: str | None = Field(None)
    name: str = Field(...)
    page_permitted_tasks: list[Any] | None = Field(None)
    sales_rep_email: str | None = Field(None)
    shared_page_id: str | None = Field(None)
    should_generate_name: bool | None = Field(None)
    survey_business_type: businessowned_businesses_survey_business_type_enum_param | None = Field(
        None
    )
    survey_num_assets: int | None = Field(None)
    survey_num_people: int | None = Field(None)
    timezone_id: businessowned_businesses_timezone_id_enum_param | None = Field(None)
    vertical: businessowned_businesses_vertical_enum_param = Field(...)


class BusinessCreateOwnedPageParams(BaseModel):
    """Parameters for Business.create_owned_page()."""

    model_config = ConfigDict(extra="allow")
    code: str | None = Field(None)
    entry_point: str | None = Field(None)
    page_id: int = Field(...)


class BusinessCreateOwnedProductCatalogParams(BaseModel):
    """Parameters for Business.create_owned_product_catalog()."""

    model_config = ConfigDict(extra="allow")
    additional_vertical_option: (
        businessowned_product_catalogs_additional_vertical_option_enum_param | None
    ) = Field(None)
    business_metadata: dict[str, Any] | None = Field(None)
    catalog_segment_filter: dict[str, Any] | None = Field(None)
    catalog_segment_product_set_id: str | None = Field(None)
    da_display_settings: dict[str, Any] | None = Field(None)
    destination_catalog_settings: dict[str, Any] | None = Field(None)
    flight_catalog_settings: dict[str, Any] | None = Field(None)
    name: str = Field(...)
    parent_catalog_id: str | None = Field(None)
    partner_integration: dict[str, Any] | None = Field(None)
    store_catalog_settings: dict[str, Any] | None = Field(None)
    vertical: businessowned_product_catalogs_vertical_enum_param | None = Field(None)


class BusinessDeletePagesParams(BaseModel):
    """Parameters for Business.delete_pages()."""

    model_config = ConfigDict(extra="allow")
    page_id: int = Field(...)


class BusinessCreatePartnerPremiumOptionParams(BaseModel):
    """Parameters for Business.create_partner_premium_option()."""

    model_config = ConfigDict(extra="allow")
    catalog_segment_id: str | None = Field(None)
    enable_basket_insight: bool = Field(...)
    enable_extended_audience_retargeting: bool = Field(...)
    partner_business_id: str = Field(...)
    retailer_custom_audience_config: dict[str, Any] = Field(...)
    vendor_id: str | None = Field(None)


class BusinessGetPendingUsersParams(BaseModel):
    """Parameters for Business.get_pending_users()."""

    model_config = ConfigDict(extra="allow")
    email: str | None = Field(None)


class BusinessGetPictureParams(BaseModel):
    """Parameters for Business.get_picture()."""

    model_config = ConfigDict(extra="allow")
    height: int | None = Field(None)
    redirect: bool | None = Field(None)
    type: businesspicture_type_enum_param | None = Field(None)
    width: int | None = Field(None)


class BusinessGetPreverifiedNumbersParams(BaseModel):
    """Parameters for Business.get_preverified_numbers()."""

    model_config = ConfigDict(extra="allow")
    code_verification_status: (
        businesspreverified_numbers_code_verification_status_enum_param | None
    ) = Field(None)
    phone_number: str | None = Field(None)


class BusinessGetReceivedAudienceSharingRequestsParams(BaseModel):
    """Parameters for Business.get_received_audience_sharing_requests()."""

    model_config = ConfigDict(extra="allow")
    initiator_id: str | None = Field(None)
    request_status: businessreceived_audience_sharing_requests_request_status_enum_param | None = (
        Field(None)
    )


class BusinessGetSelfCertifiedWhatsappBusinessSubmissionsParams(BaseModel):
    """Parameters for Business.get_self_certified_whatsapp_business_submissions()."""

    model_config = ConfigDict(extra="allow")
    end_business_id: str | None = Field(None)


class BusinessCreateSelfCertifyWhatsappBusineParams(BaseModel):
    """Parameters for Business.create_self_certify_whatsapp_busine()."""

    model_config = ConfigDict(extra="allow")
    average_monthly_revenue_spend_with_partner: dict[str, Any] | None = Field(None)
    business_documents: list[Any] = Field(...)
    business_vertical: (
        businessself_certify_whatsapp_business_business_vertical_enum_param | None
    ) = Field(None)
    end_business_address: dict[str, Any] | None = Field(None)
    end_business_id: str = Field(...)
    end_business_legal_name: str | None = Field(None)
    end_business_trade_names: list[str] | None = Field(None)
    end_business_website: str | None = Field(None)
    num_billing_cycles_with_partner: int | None = Field(None)


class BusinessCreateSetupManagedPartnerAdaccountParams(BaseModel):
    """Parameters for Business.create_setup_managed_partner_adaccount()."""

    model_config = ConfigDict(extra="allow")
    credit_line_id: str = Field(...)
    marketplace_business_id: str = Field(...)
    subvertical_v2: businesssetup_managed_partner_adaccounts_subvertical_v2_enum_param = Field(...)
    vendor_id: str = Field(...)
    vertical_v2: businesssetup_managed_partner_adaccounts_vertical_v2_enum_param = Field(...)


class BusinessDeleteSharePreverifiedNumbersParams(BaseModel):
    """Parameters for Business.delete_share_preverified_numbers()."""

    model_config = ConfigDict(extra="allow")
    partner_business_id: str = Field(...)
    preverified_id: str = Field(...)


class BusinessCreateSharePreverifiedNumberParams(BaseModel):
    """Parameters for Business.create_share_preverified_number()."""

    model_config = ConfigDict(extra="allow")
    partner_business_id: str = Field(...)
    preverified_id: str = Field(...)


class BusinessCreateSystemUserAccessTokenParams(BaseModel):
    """Parameters for Business.create_system_user_access_token()."""

    model_config = ConfigDict(extra="allow")
    asset: list[Any] | None = Field(None)
    fetch_only: bool | None = Field(None)
    scope: list[Any] | None = Field(None)
    set_token_expires_in_60_days: bool | None = Field(None)
    system_user_id: int | None = Field(None)


class BusinessCreateSystemUserParams(BaseModel):
    """Parameters for Business.create_system_user()."""

    model_config = ConfigDict(extra="allow")
    name: str = Field(...)
    role: businesssystem_users_role_enum_param | None = Field(None)
    system_user_id: int | None = Field(None)


class BusinessCreateVideoParams(BaseModel):
    """Parameters for Business.create_video()."""

    model_config = ConfigDict(extra="allow")
    ad_placements_validation_only: bool | None = Field(None)
    application_id: str | None = Field(None)
    asked_fun_fact_prompt_id: int | None = Field(None)
    audio_story_wave_animation_handle: str | None = Field(None)
    chunk_session_id: str | None = Field(None)
    composer_entry_picker: str | None = Field(None)
    composer_entry_point: str | None = Field(None)
    composer_entry_time: int | None = Field(None)
    composer_session_events_log: str | None = Field(None)
    composer_session_id: str | None = Field(None)
    composer_source_surface: str | None = Field(None)
    composer_type: str | None = Field(None)
    container_type: businessvideos_container_type_enum_param | None = Field(None)
    content_category: businessvideos_content_category_enum_param | None = Field(None)
    creative_folder_id: str = Field(...)
    creative_tools: str | None = Field(None)
    description: str | None = Field(None)
    embeddable: bool | None = Field(None)
    end_offset: int | None = Field(None)
    fbuploader_video_file_chunk: str | None = Field(None)
    file_size: int | None = Field(None)
    file_url: str | None = Field(None)
    fisheye_video_cropped: bool | None = Field(None)
    formatting: businessvideos_formatting_enum_param | None = Field(None)
    fov: int | None = Field(None)
    front_z_rotation: float | None = Field(None)
    fun_fact_prompt_id: str | None = Field(None)
    fun_fact_toastee_id: int | None = Field(None)
    guide: list[Any] | None = Field(None)
    guide_enabled: bool | None = Field(None)
    initial_heading: int | None = Field(None)
    initial_pitch: int | None = Field(None)
    instant_game_entry_point_data: str | None = Field(None)
    is_boost_intended: bool | None = Field(None)
    is_group_linking_post: bool | None = Field(None)
    is_partnership_ad: bool | None = Field(None)
    is_voice_clip: bool | None = Field(None)
    location_source_id: str | None = Field(None)
    og_action_type_id: str | None = Field(None)
    og_icon_id: str | None = Field(None)
    og_object_id: str | None = Field(None)
    og_phrase: str | None = Field(None)
    og_suggestion_mechanism: str | None = Field(None)
    original_fov: int | None = Field(None)
    original_projection_type: businessvideos_original_projection_type_enum_param | None = Field(
        None
    )
    partnership_ad_ad_code: str | None = Field(None)
    publish_event_id: int | None = Field(None)
    referenced_sticker_id: str | None = Field(None)
    replace_video_id: str | None = Field(None)
    slideshow_spec: dict[str, Any] | None = Field(None)
    source: str | None = Field(None)
    source_instagram_media_id: str | None = Field(None)
    spherical: bool | None = Field(None)
    start_offset: int | None = Field(None)
    swap_mode: businessvideos_swap_mode_enum_param | None = Field(None)
    text_format_metadata: str | None = Field(None)
    thumb: Any | None = Field(None)
    time_since_original_post: int | None = Field(None)
    title: str | None = Field(None)
    transcode_setting_properties: str | None = Field(None)
    unpublished_content_type: businessvideos_unpublished_content_type_enum_param | None = Field(
        None
    )
    upload_phase: businessvideos_upload_phase_enum_param | None = Field(None)
    upload_session_id: str | None = Field(None)
    upload_setting_properties: str | None = Field(None)
    validation_ad_placements: list[Any] | None = Field(None)
    video_file_chunk: str | None = Field(None)
    video_id_original: str | None = Field(None)
    video_start_time_ms: int | None = Field(None)
    waterfall_id: str | None = Field(None)


class AdAsyncRequestSetGetRequestsParams(BaseModel):
    """Parameters for AdAsyncRequestSet.get_requests()."""

    model_config = ConfigDict(extra="allow")
    statuses: list[Any] | None = Field(None)


class BusinessUserGetAssignedBusinessAssetGroupsParams(BaseModel):
    """Parameters for BusinessUser.get_assigned_business_asset_groups()."""

    model_config = ConfigDict(extra="allow")
    contained_asset_id: str | None = Field(None)


class BusinessUserGetAssignedPagesParams(BaseModel):
    """Parameters for BusinessUser.get_assigned_pages()."""

    model_config = ConfigDict(extra="allow")
    pages: list[Any] | None = Field(None)


class ProductSetGetAutomotiveModelsParams(BaseModel):
    """Parameters for ProductSet.get_automotive_models()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductSetGetDestinationsParams(BaseModel):
    """Parameters for ProductSet.get_destinations()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductSetGetFlightsParams(BaseModel):
    """Parameters for ProductSet.get_flights()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductSetGetHomeListingsParams(BaseModel):
    """Parameters for ProductSet.get_home_listings()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductSetGetHotelsParams(BaseModel):
    """Parameters for ProductSet.get_hotels()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductSetGetMediaTitlesParams(BaseModel):
    """Parameters for ProductSet.get_media_titles()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductSetGetProductSParams(BaseModel):
    """Parameters for ProductSet.get_product_s()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    error_priority: productsetproducts_error_priority_enum_param | None = Field(None)
    error_type: productsetproducts_error_type_enum_param | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductSetGetVehicleOffersParams(BaseModel):
    """Parameters for ProductSet.get_vehicle_offers()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductSetGetVehiclesParams(BaseModel):
    """Parameters for ProductSet.get_vehicles()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductFeedGetAutomotiveModelsParams(BaseModel):
    """Parameters for ProductFeed.get_automotive_models()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductFeedGetDestinationsParams(BaseModel):
    """Parameters for ProductFeed.get_destinations()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductFeedGetFlightsParams(BaseModel):
    """Parameters for ProductFeed.get_flights()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductFeedGetHomeListingsParams(BaseModel):
    """Parameters for ProductFeed.get_home_listings()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductFeedGetHotelsParams(BaseModel):
    """Parameters for ProductFeed.get_hotels()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductFeedGetMediaTitlesParams(BaseModel):
    """Parameters for ProductFeed.get_media_titles()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductFeedGetProductSParams(BaseModel):
    """Parameters for ProductFeed.get_product_s()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    error_priority: productfeedproducts_error_priority_enum_param | None = Field(None)
    error_type: productfeedproducts_error_type_enum_param | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductFeedCreateRuleParams(BaseModel):
    """Parameters for ProductFeed.create_rule()."""

    model_config = ConfigDict(extra="allow")
    attribute: str = Field(...)
    params: dict[str, Any] | None = Field(None)
    rule_type: productfeedrules_rule_type_enum_param = Field(...)


class ProductFeedCreateSupplementaryFeedAssocParams(BaseModel):
    """Parameters for ProductFeed.create_supplementary_feed_assoc()."""

    model_config = ConfigDict(extra="allow")
    assoc_data: list[Any] = Field(...)


class ProductFeedCreateUploadScheduleParams(BaseModel):
    """Parameters for ProductFeed.create_upload_schedule()."""

    model_config = ConfigDict(extra="allow")
    upload_schedule: str | None = Field(None)


class ProductFeedCreateUploadParams(BaseModel):
    """Parameters for ProductFeed.create_upload()."""

    model_config = ConfigDict(extra="allow")
    fbe_external_business_id: str | None = Field(None)
    file: Any | None = Field(None)
    password: str | None = Field(None)
    update_only: bool | None = Field(None)
    url: str | None = Field(None)
    username: str | None = Field(None)


class ProductFeedGetVehicleOffersParams(BaseModel):
    """Parameters for ProductFeed.get_vehicle_offers()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ProductFeedGetVehiclesParams(BaseModel):
    """Parameters for ProductFeed.get_vehicles()."""

    model_config = ConfigDict(extra="allow")
    bulk_pagination: bool | None = Field(None)
    filter: dict[str, Any] | None = Field(None)


class ExtendedCreditCreateExtendedCreditInvoiceGroupParams(BaseModel):
    """Parameters for ExtendedCredit.create_extended_credit_invoice_group()."""

    model_config = ConfigDict(extra="allow")
    emails: list[str] = Field(...)
    name: str = Field(...)


class ExtendedCreditGetOwningCreditAllocationConfigsParams(BaseModel):
    """Parameters for ExtendedCredit.get_owning_credit_allocation_configs()."""

    model_config = ConfigDict(extra="allow")
    receiving_business_id: str | None = Field(None)


class ExtendedCreditCreateOwningCreditAllocationConfigParams(BaseModel):
    """Parameters for ExtendedCredit.create_owning_credit_allocation_config()."""

    model_config = ConfigDict(extra="allow")
    amount: dict[str, Any] | None = Field(None)
    liability_type: (
        extendedcreditowning_credit_allocation_configs_liability_type_enum_param | None
    ) = Field(None)
    partition_type: (
        extendedcreditowning_credit_allocation_configs_partition_type_enum_param | None
    ) = Field(None)
    receiving_business_id: str = Field(...)
    send_bill_to: extendedcreditowning_credit_allocation_configs_send_bill_to_enum_param | None = (
        Field(None)
    )


class ExtendedCreditCreateWhatsappCreditAttachParams(BaseModel):
    """Parameters for ExtendedCredit.create_whatsapp_credit_attach()."""

    model_config = ConfigDict(extra="allow")
    waba_currency: str = Field(...)
    waba_id: str = Field(...)


class ExtendedCreditCreateWhatsappCreditSharingParams(BaseModel):
    """Parameters for ExtendedCredit.create_whatsapp_credit_sharing()."""

    model_config = ConfigDict(extra="allow")
    receiving_business_id: str = Field(...)


class ExtendedCreditCreateWhatsappCreditSharingAndAttachParams(BaseModel):
    """Parameters for ExtendedCredit.create_whatsapp_credit_sharing_and_attach()."""

    model_config = ConfigDict(extra="allow")
    waba_currency: str = Field(...)
    waba_id: str = Field(...)


class UnifiedThreadGetMessagesParams(BaseModel):
    """Parameters for UnifiedThread.get_messages()."""

    model_config = ConfigDict(extra="allow")
    source: unifiedthreadmessages_source_enum_param | None = Field(None)


class CommentGetCommentsParams(BaseModel):
    """Parameters for Comment.get_comments()."""

    model_config = ConfigDict(extra="allow")
    filter: commentcomments_filter_enum_param | None = Field(None)
    live_filter: commentcomments_live_filter_enum_param | None = Field(None)
    order: commentcomments_order_enum_param | None = Field(None)
    since: datetime | None = Field(None)


class CommentCreateCommentParams(BaseModel):
    """Parameters for Comment.create_comment()."""

    model_config = ConfigDict(extra="allow")
    attachment_id: str | None = Field(None)
    attachment_share_url: str | None = Field(None)
    attachment_url: str | None = Field(None)
    comment_privacy_value: commentcomments_comment_privacy_value_enum_param | None = Field(None)
    facepile_mentioned_ids: list[str] | None = Field(None)
    feedback_source: str | None = Field(None)
    is_offline: bool | None = Field(None)
    message: str | None = Field(None)
    nectar_module: str | None = Field(None)
    object_id: str | None = Field(None)
    parent_comment_id: dict[str, Any] | None = Field(None)
    text: str | None = Field(None)
    tracking: str | None = Field(None)


class CommentDeleteLikesParams(BaseModel):
    """Parameters for Comment.delete_likes()."""

    model_config = ConfigDict(extra="allow")
    feedback_source: str | None = Field(None)
    nectar_module: str | None = Field(None)
    tracking: str | None = Field(None)


class CommentCreateLikeParams(BaseModel):
    """Parameters for Comment.create_like()."""

    model_config = ConfigDict(extra="allow")
    feedback_source: str | None = Field(None)
    nectar_module: str | None = Field(None)
    tracking: str | None = Field(None)


class CommentGetReactionsParams(BaseModel):
    """Parameters for Comment.get_reactions()."""

    model_config = ConfigDict(extra="allow")
    type: commentreactions_type_enum_param | None = Field(None)


class AutomotiveModelGetOverrideDetailsParams(BaseModel):
    """Parameters for AutomotiveModel.get_override_details()."""

    model_config = ConfigDict(extra="allow")
    keys: list[str] | None = Field(None)
    type: automotivemodeloverride_details_type_enum_param | None = Field(None)


class ExtendedCreditInvoiceGroupDeleteAdAccountsParams(BaseModel):
    """Parameters for ExtendedCreditInvoiceGroup.delete_ad_accounts()."""

    model_config = ConfigDict(extra="allow")
    ad_account_id: str = Field(...)


class ExtendedCreditInvoiceGroupCreateAdAccountParams(BaseModel):
    """Parameters for ExtendedCreditInvoiceGroup.create_ad_account()."""

    model_config = ConfigDict(extra="allow")
    ad_account_id: str = Field(...)


class RTBDynamicPostGetCommentsParams(BaseModel):
    """Parameters for RTBDynamicPost.get_comments()."""

    model_config = ConfigDict(extra="allow")
    filter: rtbdynamicpostcomments_filter_enum_param | None = Field(None)
    live_filter: rtbdynamicpostcomments_live_filter_enum_param | None = Field(None)
    order: rtbdynamicpostcomments_order_enum_param | None = Field(None)
    since: datetime | None = Field(None)


class LiveVideoGetBlockedUsersParams(BaseModel):
    """Parameters for LiveVideo.get_blocked_users()."""

    model_config = ConfigDict(extra="allow")
    uid: str | None = Field(None)


class LiveVideoGetCommentsParams(BaseModel):
    """Parameters for LiveVideo.get_comments()."""

    model_config = ConfigDict(extra="allow")
    filter: livevideocomments_filter_enum_param | None = Field(None)
    live_filter: livevideocomments_live_filter_enum_param | None = Field(None)
    order: livevideocomments_order_enum_param | None = Field(None)
    since: datetime | None = Field(None)


class LiveVideoCreatePollParams(BaseModel):
    """Parameters for LiveVideo.create_poll()."""

    model_config = ConfigDict(extra="allow")
    close_after_voting: bool | None = Field(None)
    correct_option: int | None = Field(None)
    default_open: bool | None = Field(None)
    options: list[str] = Field(...)
    question: str = Field(...)
    show_gradient: bool | None = Field(None)
    show_results: bool | None = Field(None)


class LiveVideoGetReactionsParams(BaseModel):
    """Parameters for LiveVideo.get_reactions()."""

    model_config = ConfigDict(extra="allow")
    type: livevideoreactions_type_enum_param | None = Field(None)


class StoriesGetInsightsParams(BaseModel):
    """Parameters for Stories.get_insights()."""

    model_config = ConfigDict(extra="allow")
    metric: list[Any] | None = Field(None)


class AdStudyCreateCheckpointParams(BaseModel):
    """Parameters for AdStudy.create_checkpoint()."""

    model_config = ConfigDict(extra="allow")
    checkpoint_data: str = Field(...)
    checkpoint_name: str = Field(...)
    component: str = Field(...)
    instance_id: str | None = Field(None)
    run_id: str | None = Field(None)


class AdStudyCreateInstanceParams(BaseModel):
    """Parameters for AdStudy.create_instance()."""

    model_config = ConfigDict(extra="allow")
    breakdown_key: dict[str, Any] = Field(...)
    run_id: str | None = Field(None)


class TransactableItemGetOverrideDetailsParams(BaseModel):
    """Parameters for TransactableItem.get_override_details()."""

    model_config = ConfigDict(extra="allow")
    keys: list[str] | None = Field(None)
    type: transactableitemoverride_details_type_enum_param | None = Field(None)


class OfflineConversionDataSetGetAdAccountsParams(BaseModel):
    """Parameters for OfflineConversionDataSet.get_ad_accounts()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)


class OfflineConversionDataSetGetAudiencesParams(BaseModel):
    """Parameters for OfflineConversionDataSet.get_audiences()."""

    model_config = ConfigDict(extra="allow")
    action_source: offlineconversiondatasetaudiences_action_source_enum_param | None = Field(None)
    ad_account: str | None = Field(None)


class OfflineConversionDataSetGetCustomConversionsParams(BaseModel):
    """Parameters for OfflineConversionDataSet.get_custom_conversions()."""

    model_config = ConfigDict(extra="allow")
    ad_account: str | None = Field(None)


class OfflineConversionDataSetGetSharedAccountsParams(BaseModel):
    """Parameters for OfflineConversionDataSet.get_shared_accounts()."""

    model_config = ConfigDict(extra="allow")
    action_source: offlineconversiondatasetshared_accounts_action_source_enum_param = Field(...)
    business: str = Field(...)


class OfflineConversionDataSetGetSharedAgenciesParams(BaseModel):
    """Parameters for OfflineConversionDataSet.get_shared_agencies()."""

    model_config = ConfigDict(extra="allow")
    action_source: offlineconversiondatasetshared_agencies_action_source_enum_param = Field(...)


class OfflineConversionDataSetGetStatsParams(BaseModel):
    """Parameters for OfflineConversionDataSet.get_stats()."""

    model_config = ConfigDict(extra="allow")
    aggr_time: offlineconversiondatasetstats_aggr_time_enum_param | None = Field(None)
    end: int | None = Field(None)
    granularity: offlineconversiondatasetstats_granularity_enum_param | None = Field(None)
    skip_empty_values: bool | None = Field(None)
    start: int | None = Field(None)
    user_timezone_id: int | None = Field(None)


class OfflineConversionDataSetGetUploadsParams(BaseModel):
    """Parameters for OfflineConversionDataSet.get_uploads()."""

    model_config = ConfigDict(extra="allow")
    end_time: datetime | None = Field(None)
    order: offlineconversiondatasetuploads_order_enum_param | None = Field(None)
    sort_by: offlineconversiondatasetuploads_sort_by_enum_param | None = Field(None)
    start_time: datetime | None = Field(None)
    upload_tag: str | None = Field(None)


class CommerceOrderCreateAcknowledgeOrderParams(BaseModel):
    """Parameters for CommerceOrder.create_acknowledge_order()."""

    model_config = ConfigDict(extra="allow")
    idempotency_key: str = Field(...)
    merchant_order_reference: str | None = Field(None)


class CommerceOrderCreateCancellationParams(BaseModel):
    """Parameters for CommerceOrder.create_cancellation()."""

    model_config = ConfigDict(extra="allow")
    cancel_reason: dict[str, Any] | None = Field(None)
    idempotency_key: str = Field(...)
    items: list[Any] | None = Field(None)
    restock_items: bool | None = Field(None)


class CommerceOrderCreateItemUpdateParams(BaseModel):
    """Parameters for CommerceOrder.create_item_update()."""

    model_config = ConfigDict(extra="allow")
    items: list[Any] = Field(...)
    merchant_order_reference: str = Field(...)


class CommerceOrderCreateRefundParams(BaseModel):
    """Parameters for CommerceOrder.create_refund()."""

    model_config = ConfigDict(extra="allow")
    adjustment_amount: dict[str, Any] | None = Field(None)
    deductions: list[Any] | None = Field(None)
    idempotency_key: str = Field(...)
    items: list[Any] | None = Field(None)
    reason_code: commerceorderrefunds_reason_code_enum_param = Field(...)
    reason_text: str | None = Field(None)
    return_id: str | None = Field(None)
    shipping: dict[str, Any] | None = Field(None)


class CommerceOrderGetReturnsParams(BaseModel):
    """Parameters for CommerceOrder.get_returns()."""

    model_config = ConfigDict(extra="allow")
    merchant_return_id: str | None = Field(None)
    statuses: list[Any] | None = Field(None)


class CommerceOrderCreateReturnParams(BaseModel):
    """Parameters for CommerceOrder.create_return()."""

    model_config = ConfigDict(extra="allow")
    items: list[Any] = Field(...)
    merchant_return_id: str | None = Field(None)
    return_message: str | None = Field(None)
    update: dict[str, Any] | None = Field(None)


class CommerceOrderCreateShipmentParams(BaseModel):
    """Parameters for CommerceOrder.create_shipment()."""

    model_config = ConfigDict(extra="allow")
    external_redemption_link: str | None = Field(None)
    external_shipment_id: str | None = Field(None)
    fulfillment: dict[str, Any] | None = Field(None)
    idempotency_key: str = Field(...)
    items: list[Any] | None = Field(None)
    merchant_order_reference: str | None = Field(None)
    shipment_origin_postal_code: str | None = Field(None)
    shipping_tax_details: dict[str, Any] | None = Field(None)
    should_use_default_fulfillment_location: bool | None = Field(None)
    tracking_info: dict[str, Any] | None = Field(None)


class CommerceOrderCreateUpdateShipmentParams(BaseModel):
    """Parameters for CommerceOrder.create_update_shipment()."""

    model_config = ConfigDict(extra="allow")
    external_shipment_id: str | None = Field(None)
    fulfillment_id: str | None = Field(None)
    idempotency_key: str = Field(...)
    shipment_id: str | None = Field(None)
    tracking_info: dict[str, Any] = Field(...)


class EventCreateLiveVideoParams(BaseModel):
    """Parameters for Event.create_live_video()."""

    model_config = ConfigDict(extra="allow")
    content_tags: list[str] | None = Field(None)
    description: str | None = Field(None)
    enable_backup_ingest: bool | None = Field(None)
    encoding_settings: str | None = Field(None)
    event_params: dict[str, Any] | None = Field(None)
    fisheye_video_cropped: bool | None = Field(None)
    front_z_rotation: float | None = Field(None)
    is_audio_only: bool | None = Field(None)
    is_spherical: bool | None = Field(None)
    original_fov: int | None = Field(None)
    privacy: str | None = Field(None)
    projection: eventlive_videos_projection_enum_param | None = Field(None)
    published: bool | None = Field(None)
    schedule_custom_profile_image: Any | None = Field(None)
    spatial_audio_format: eventlive_videos_spatial_audio_format_enum_param | None = Field(None)
    status: eventlive_videos_status_enum_param | None = Field(None)
    stereoscopic_mode: eventlive_videos_stereoscopic_mode_enum_param | None = Field(None)
    stop_on_delete_stream: bool | None = Field(None)
    stream_type: eventlive_videos_stream_type_enum_param | None = Field(None)
    title: str | None = Field(None)


class ProductFeedUploadGetErrorsParams(BaseModel):
    """Parameters for ProductFeedUpload.get_errors()."""

    model_config = ConfigDict(extra="allow")
    error_priority: productfeeduploaderrors_error_priority_enum_param | None = Field(None)


class IGUserGetAuthorizedAdaccountsParams(BaseModel):
    """Parameters for IGUser.get_authorized_adaccounts()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)


class IGUserCreateAuthorizedAdaccountParams(BaseModel):
    """Parameters for IGUser.create_authorized_adaccount()."""

    model_config = ConfigDict(extra="allow")
    account_id: str = Field(...)
    business: str = Field(...)


class IGUserCreateBrandedContentAdPermissionParams(BaseModel):
    """Parameters for IGUser.create_branded_content_ad_permission()."""

    model_config = ConfigDict(extra="allow")
    creator_instagram_account: str | None = Field(None)
    creator_instagram_username: str | None = Field(None)
    revoke: bool | None = Field(None)


class IGUserGetBrandedContentAdvertisableMediasParams(BaseModel):
    """Parameters for IGUser.get_branded_content_advertisable_medias()."""

    model_config = ConfigDict(extra="allow")
    ad_code: str | None = Field(None)
    creator_username: str | None = Field(None)
    only_fetch_allowlisted: bool | None = Field(None)
    only_fetch_recommended_content: bool | None = Field(None)
    permalinks: list[str] | None = Field(None)


class IGUserDeleteBrandedContentTagApprovalParams(BaseModel):
    """Parameters for IGUser.delete_branded_content_tag_approval()."""

    model_config = ConfigDict(extra="allow")
    user_ids: list[Any] = Field(...)


class IGUserGetBrandedContentTagApprovalParams(BaseModel):
    """Parameters for IGUser.get_branded_content_tag_approval()."""

    model_config = ConfigDict(extra="allow")
    user_ids: list[Any] = Field(...)


class IGUserCreateBrandedContentTagApprovalParams(BaseModel):
    """Parameters for IGUser.create_branded_content_tag_approval()."""

    model_config = ConfigDict(extra="allow")
    user_ids: list[Any] = Field(...)


class IGUserGetCatalogProductSearchParams(BaseModel):
    """Parameters for IGUser.get_catalog_product_search()."""

    model_config = ConfigDict(extra="allow")
    catalog_id: str = Field(...)
    q: str | None = Field(None)


class IGUserGetContentPublishingLimitParams(BaseModel):
    """Parameters for IGUser.get_content_publishing_limit()."""

    model_config = ConfigDict(extra="allow")
    since: datetime | None = Field(None)


class IGUserCreateDatasetParams(BaseModel):
    """Parameters for IGUser.create_dataset()."""

    model_config = ConfigDict(extra="allow")
    dataset_name: str | None = Field(None)


class IGUserGetInsightsParams(BaseModel):
    """Parameters for IGUser.get_insights()."""

    model_config = ConfigDict(extra="allow")
    breakdown: list[Any] | None = Field(None)
    metric: list[Any] = Field(...)
    metric_type: shadowiguserinsights_metric_type_enum_param | None = Field(None)
    period: list[Any] = Field(...)
    since: datetime | None = Field(None)
    timeframe: shadowiguserinsights_timeframe_enum_param | None = Field(None)
    until: datetime | None = Field(None)


class IGUserGetLiveMediaParams(BaseModel):
    """Parameters for IGUser.get_live_media()."""

    model_config = ConfigDict(extra="allow")
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)


class IGUserGetMediaParams(BaseModel):
    """Parameters for IGUser.get_media()."""

    model_config = ConfigDict(extra="allow")
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)


class IGUserCreateMediaParams(BaseModel):
    """Parameters for IGUser.create_media()."""

    model_config = ConfigDict(extra="allow")
    alt_text: str | None = Field(None)
    audio_name: str | None = Field(None)
    caption: str | None = Field(None)
    children: list[str] | None = Field(None)
    collaborators: list[str] | None = Field(None)
    cover_url: str | None = Field(None)
    image_url: str | None = Field(None)
    is_carousel_item: bool | None = Field(None)
    location_id: str | None = Field(None)
    media_type: str | None = Field(None)
    product_tags: list[Any] | None = Field(None)
    share_to_feed: bool | None = Field(None)
    thumb_offset: str | None = Field(None)
    upload_type: str | None = Field(None)
    user_tags: list[Any] | None = Field(None)
    video_url: str | None = Field(None)


class IGUserCreateMediaPublishParams(BaseModel):
    """Parameters for IGUser.create_media_publish()."""

    model_config = ConfigDict(extra="allow")
    creation_id: int = Field(...)


class IGUserCreateMentionParams(BaseModel):
    """Parameters for IGUser.create_mention()."""

    model_config = ConfigDict(extra="allow")
    comment_id: str | None = Field(None)
    media_id: str = Field(...)
    message: str = Field(...)


class IGUserGetProductAppealParams(BaseModel):
    """Parameters for IGUser.get_product_appeal()."""

    model_config = ConfigDict(extra="allow")
    product_id: str = Field(...)


class IGUserCreateProductAppealParams(BaseModel):
    """Parameters for IGUser.create_product_appeal()."""

    model_config = ConfigDict(extra="allow")
    appeal_reason: str = Field(...)
    product_id: str = Field(...)


class IGUserCreateUpcomingEventParams(BaseModel):
    """Parameters for IGUser.create_upcoming_event()."""

    model_config = ConfigDict(extra="allow")
    end_time: datetime | None = Field(None)
    notification_subtypes: list[Any] | None = Field(None)
    start_time: datetime = Field(...)
    title: str = Field(...)


class IGUserGetWelcomeMessageFlowsParams(BaseModel):
    """Parameters for IGUser.get_welcome_message_flows()."""

    model_config = ConfigDict(extra="allow")
    app_id: str | None = Field(None)
    flow_id: str | None = Field(None)


class HomeListingGetOverrideDetailsParams(BaseModel):
    """Parameters for HomeListing.get_override_details()."""

    model_config = ConfigDict(extra="allow")
    keys: list[str] | None = Field(None)
    type: homelistingoverride_details_type_enum_param | None = Field(None)


class CommerceMerchantSettingsCreateAcknowledgeOrderParams(BaseModel):
    """Parameters for CommerceMerchantSettings.create_acknowledge_order()."""

    model_config = ConfigDict(extra="allow")
    idempotency_key: str = Field(...)
    orders: list[Any] = Field(...)


class CommerceMerchantSettingsGetCommerceOrdersParams(BaseModel):
    """Parameters for CommerceMerchantSettings.get_commerce_orders()."""

    model_config = ConfigDict(extra="allow")
    filters: list[Any] | None = Field(None)
    state: list[Any] | None = Field(None)
    updated_after: datetime | None = Field(None)
    updated_before: datetime | None = Field(None)


class CommerceMerchantSettingsGetCommercePayoutsParams(BaseModel):
    """Parameters for CommerceMerchantSettings.get_commerce_payouts()."""

    model_config = ConfigDict(extra="allow")
    end_time: datetime | None = Field(None)
    start_time: datetime | None = Field(None)


class CommerceMerchantSettingsGetCommerceTransactionsParams(BaseModel):
    """Parameters for CommerceMerchantSettings.get_commerce_transactions()."""

    model_config = ConfigDict(extra="allow")
    end_time: datetime | None = Field(None)
    payout_reference_id: str | None = Field(None)
    start_time: datetime | None = Field(None)


class CommerceMerchantSettingsGetReturnsParams(BaseModel):
    """Parameters for CommerceMerchantSettings.get_returns()."""

    model_config = ConfigDict(extra="allow")
    end_time_created: datetime | None = Field(None)
    merchant_return_id: str | None = Field(None)
    start_time_created: datetime | None = Field(None)
    statuses: list[Any] | None = Field(None)


class CommerceMerchantSettingsGetShippingProfilesParams(BaseModel):
    """Parameters for CommerceMerchantSettings.get_shipping_profiles()."""

    model_config = ConfigDict(extra="allow")
    reference_id: str | None = Field(None)


class CommerceMerchantSettingsCreateShippingProfileParams(BaseModel):
    """Parameters for CommerceMerchantSettings.create_shipping_profile()."""

    model_config = ConfigDict(extra="allow")
    handling_time: dict[str, Any] | None = Field(None)
    is_default: bool | None = Field(None)
    is_default_shipping_profile: bool | None = Field(None)
    name: str = Field(...)
    reference_id: str | None = Field(None)
    shipping_destinations: list[Any] = Field(...)


class MediaTitleGetOverrideDetailsParams(BaseModel):
    """Parameters for MediaTitle.get_override_details()."""

    model_config = ConfigDict(extra="allow")
    keys: list[str] | None = Field(None)
    type: mediatitleoverride_details_type_enum_param | None = Field(None)


class DestinationGetOverrideDetailsParams(BaseModel):
    """Parameters for Destination.get_override_details()."""

    model_config = ConfigDict(extra="allow")
    keys: list[str] | None = Field(None)
    type: destinationoverride_details_type_enum_param | None = Field(None)


class AdSetGetActivitiesParams(BaseModel):
    """Parameters for AdSet.get_activities()."""

    model_config = ConfigDict(extra="allow")
    after: str | None = Field(None)
    business_id: str | None = Field(None)
    category: adcampaignactivities_category_enum_param | None = Field(None)
    limit: int | None = Field(None)
    since: datetime | None = Field(None)
    uid: int | None = Field(None)
    until: datetime | None = Field(None)


class AdSetDeleteAdLabelsParams(BaseModel):
    """Parameters for AdSet.delete_ad_labels()."""

    model_config = ConfigDict(extra="allow")
    adlabels: list[Any] = Field(...)
    execution_options: list[Any] | None = Field(None)


class AdSetCreateAdLabelParams(BaseModel):
    """Parameters for AdSet.create_ad_label()."""

    model_config = ConfigDict(extra="allow")
    adlabels: list[Any] = Field(...)
    execution_options: list[Any] | None = Field(None)


class AdSetGetAdrulesGovernedParams(BaseModel):
    """Parameters for AdSet.get_adrules_governed()."""

    model_config = ConfigDict(extra="allow")
    pass_evaluation: bool | None = Field(None)


class AdSetGetAdSParams(BaseModel):
    """Parameters for AdSet.get_ad_s()."""

    model_config = ConfigDict(extra="allow")
    date_preset: adcampaignads_date_preset_enum_param | None = Field(None)
    effective_status: list[str] | None = Field(None)
    time_range: dict[str, Any] | None = Field(None)
    updated_since: int | None = Field(None)


class AdSetGetAsyncAdRequestsParams(BaseModel):
    """Parameters for AdSet.get_async_ad_requests()."""

    model_config = ConfigDict(extra="allow")
    statuses: list[Any] | None = Field(None)


class AdSetCreateBudgetScheduleParams(BaseModel):
    """Parameters for AdSet.create_budget_schedule()."""

    model_config = ConfigDict(extra="allow")
    budget_value: int = Field(...)
    budget_value_type: adcampaignbudget_schedules_budget_value_type_enum_param = Field(...)
    time_end: int = Field(...)
    time_start: int = Field(...)


class AdSetGetCopiesParams(BaseModel):
    """Parameters for AdSet.get_copies()."""

    model_config = ConfigDict(extra="allow")
    date_preset: adcampaigncopies_date_preset_enum_param | None = Field(None)
    effective_status: list[Any] | None = Field(None)
    is_completed: bool | None = Field(None)
    time_range: dict[str, Any] | None = Field(None)


class AdSetCreateCopieParams(BaseModel):
    """Parameters for AdSet.create_copie()."""

    model_config = ConfigDict(extra="allow")
    campaign_id: str | None = Field(None)
    create_dco_adset: bool | None = Field(None)
    deep_copy: bool | None = Field(None)
    end_time: datetime | None = Field(None)
    rename_options: dict[str, Any] | None = Field(None)
    start_time: datetime | None = Field(None)
    status_option: adcampaigncopies_status_option_enum_param | None = Field(None)


class AdSetGetDeliveryEstimateParams(BaseModel):
    """Parameters for AdSet.get_delivery_estimate()."""

    model_config = ConfigDict(extra="allow")
    optimization_goal: adcampaigndelivery_estimate_optimization_goal_enum_param | None = Field(None)
    promoted_object: dict[str, Any] | None = Field(None)
    targeting_spec: TargetingFields | None = Field(None)


class AdSetGetInsightsParams(BaseModel):
    """Parameters for AdSet.get_insights()."""

    model_config = ConfigDict(extra="allow")
    action_attribution_windows: list[Any] | None = Field(None)
    action_breakdowns: list[Any] | None = Field(None)
    action_report_time: adcampaigninsights_action_report_time_enum_param | None = Field(None)
    breakdowns: list[Any] | None = Field(None)
    date_preset: adcampaigninsights_date_preset_enum_param | None = Field(None)
    default_summary: bool | None = Field(None)
    export_columns: list[str] | None = Field(None)
    export_format: str | None = Field(None)
    export_name: str | None = Field(None)
    fields: list[str] | None = Field(None)
    filtering: list[Any] | None = Field(None)
    level: adcampaigninsights_level_enum_param | None = Field(None)
    limit: int | None = Field(None)
    product_id_limit: int | None = Field(None)
    sort: list[str] | None = Field(None)
    summary: list[str] | None = Field(None)
    summary_action_breakdowns: list[Any] | None = Field(None)
    time_increment: str | None = Field(None)
    time_range: dict[str, Any] | None = Field(None)
    time_ranges: list[Any] | None = Field(None)
    use_account_attribution_setting: bool | None = Field(None)
    use_unified_attribution_setting: bool | None = Field(None)


class AdSetCreateInsightParams(BaseModel):
    """Parameters for AdSet.create_insight()."""

    model_config = ConfigDict(extra="allow")
    action_attribution_windows: list[Any] | None = Field(None)
    action_breakdowns: list[Any] | None = Field(None)
    action_report_time: adcampaigninsights_action_report_time_enum_param | None = Field(None)
    breakdowns: list[Any] | None = Field(None)
    date_preset: adcampaigninsights_date_preset_enum_param | None = Field(None)
    default_summary: bool | None = Field(None)
    export_columns: list[str] | None = Field(None)
    export_format: str | None = Field(None)
    export_name: str | None = Field(None)
    fields: list[str] | None = Field(None)
    filtering: list[Any] | None = Field(None)
    level: adcampaigninsights_level_enum_param | None = Field(None)
    limit: int | None = Field(None)
    product_id_limit: int | None = Field(None)
    sort: list[str] | None = Field(None)
    summary: list[str] | None = Field(None)
    summary_action_breakdowns: list[Any] | None = Field(None)
    time_increment: str | None = Field(None)
    time_range: dict[str, Any] | None = Field(None)
    time_ranges: list[Any] | None = Field(None)
    use_account_attribution_setting: bool | None = Field(None)
    use_unified_attribution_setting: bool | None = Field(None)


class AdSetGetMessageDeliveryEstimateParams(BaseModel):
    """Parameters for AdSet.get_message_delivery_estimate()."""

    model_config = ConfigDict(extra="allow")
    bid_amount: int | None = Field(None)
    daily_budget: int | None = Field(None)
    is_direct_send_campaign: bool | None = Field(None)
    lifetime_budget: int | None = Field(None)
    lifetime_in_days: int | None = Field(None)
    optimization_goal: adcampaignmessage_delivery_estimate_optimization_goal_enum_param | None = (
        Field(None)
    )
    pacing_type: adcampaignmessage_delivery_estimate_pacing_type_enum_param | None = Field(None)
    promoted_object: dict[str, Any] | None = Field(None)
    targeting_spec: TargetingFields | None = Field(None)


class ShadowIGHashtagGetRecentMediaParams(BaseModel):
    """Parameters for ShadowIGHashtag.get_recent_media()."""

    model_config = ConfigDict(extra="allow")
    user_id: str = Field(...)


class ShadowIGHashtagGetTopMediaParams(BaseModel):
    """Parameters for ShadowIGHashtag.get_top_media()."""

    model_config = ConfigDict(extra="allow")
    user_id: str = Field(...)


class PublisherBlockListCreateAppendPublisherUrlParams(BaseModel):
    """Parameters for PublisherBlockList.create_append_publisher_url()."""

    model_config = ConfigDict(extra="allow")
    publisher_urls: list[str] = Field(...)


class PublisherBlockListGetPagedWebPublishersParams(BaseModel):
    """Parameters for PublisherBlockList.get_paged_web_publishers()."""

    model_config = ConfigDict(extra="allow")
    draft_id: str | None = Field(None)


class ProductGroupCreateProductParams(BaseModel):
    """Parameters for ProductGroup.create_product_()."""

    model_config = ConfigDict(extra="allow")
    additional_image_urls: list[str] | None = Field(None)
    additional_variant_attributes: dict[str, Any] | None = Field(None)
    age_group: productgroupproducts_age_group_enum_param | None = Field(None)
    android_app_name: str | None = Field(None)
    android_class: str | None = Field(None)
    android_package: str | None = Field(None)
    android_url: str | None = Field(None)
    availability: productgroupproducts_availability_enum_param | None = Field(None)
    brand: str | None = Field(None)
    category: str | None = Field(None)
    checkout_url: str | None = Field(None)
    color: str | None = Field(None)
    commerce_tax_category: productgroupproducts_commerce_tax_category_enum_param | None = Field(
        None
    )
    condition: productgroupproducts_condition_enum_param | None = Field(None)
    currency: str = Field(...)
    custom_data: dict[str, Any] | None = Field(None)
    custom_label_0: str | None = Field(None)
    custom_label_1: str | None = Field(None)
    custom_label_2: str | None = Field(None)
    custom_label_3: str | None = Field(None)
    custom_label_4: str | None = Field(None)
    custom_number_0: int | None = Field(None)
    custom_number_1: int | None = Field(None)
    custom_number_2: int | None = Field(None)
    custom_number_3: int | None = Field(None)
    custom_number_4: int | None = Field(None)
    description: str | None = Field(None)
    expiration_date: str | None = Field(None)
    fb_product_category: str | None = Field(None)
    gender: productgroupproducts_gender_enum_param | None = Field(None)
    gtin: str | None = Field(None)
    image_url: str = Field(...)
    inventory: int | None = Field(None)
    ios_app_name: str | None = Field(None)
    ios_app_store_id: int | None = Field(None)
    ios_url: str | None = Field(None)
    ipad_app_name: str | None = Field(None)
    ipad_app_store_id: int | None = Field(None)
    ipad_url: str | None = Field(None)
    iphone_app_name: str | None = Field(None)
    iphone_app_store_id: int | None = Field(None)
    iphone_url: str | None = Field(None)
    launch_date: str | None = Field(None)
    manufacturer_part_number: str | None = Field(None)
    marked_for_product_launch: productgroupproducts_marked_for_product_launch_enum_param | None = (
        Field(None)
    )
    material: str | None = Field(None)
    mobile_link: str | None = Field(None)
    name: str = Field(...)
    ordering_index: int | None = Field(None)
    pattern: str | None = Field(None)
    price: int = Field(...)
    product_priority_0: float | None = Field(None)
    product_priority_1: float | None = Field(None)
    product_priority_2: float | None = Field(None)
    product_priority_3: float | None = Field(None)
    product_priority_4: float | None = Field(None)
    product_type: str | None = Field(None)
    quantity_to_sell_on_facebook: int | None = Field(None)
    retailer_id: str = Field(...)
    return_policy_days: int | None = Field(None)
    sale_price: int | None = Field(None)
    sale_price_end_date: datetime | None = Field(None)
    sale_price_start_date: datetime | None = Field(None)
    short_description: str | None = Field(None)
    size: str | None = Field(None)
    start_date: str | None = Field(None)
    url: str | None = Field(None)
    visibility: productgroupproducts_visibility_enum_param | None = Field(None)
    windows_phone_app_id: str | None = Field(None)
    windows_phone_app_name: str | None = Field(None)
    windows_phone_url: str | None = Field(None)


class UserCreateAccessTokenParams(BaseModel):
    """Parameters for User.create_access_token()."""

    model_config = ConfigDict(extra="allow")
    business_app: str = Field(...)
    page_id: str | None = Field(None)
    scope: list[str] | None = Field(None)
    set_token_expires_in_60_days: bool | None = Field(None)


class UserGetAccountsParams(BaseModel):
    """Parameters for User.get_accounts()."""

    model_config = ConfigDict(extra="allow")
    ad_id: str | None = Field(None)
    is_place: bool | None = Field(None)
    is_promotable: bool | None = Field(None)


class UserCreateAccountParams(BaseModel):
    """Parameters for User.create_account()."""

    model_config = ConfigDict(extra="allow")
    about: str | None = Field(None)
    address: str | None = Field(None)
    category: int | None = Field(None)
    category_enum: str | None = Field(None)
    category_list: list[str] | None = Field(None)
    city_id: str | None = Field(None)
    coordinates: dict[str, Any] | None = Field(None)
    cover_photo: dict[str, Any] | None = Field(None)
    description: str | None = Field(None)
    ignore_coordinate_warnings: bool | None = Field(None)
    location: dict[str, Any] | None = Field(None)
    name: str = Field(...)
    phone: str | None = Field(None)
    picture: str | None = Field(None)
    website: str | None = Field(None)
    zip: str | None = Field(None)


class UserCreateAdStudieParams(BaseModel):
    """Parameters for User.create_ad_studie()."""

    model_config = ConfigDict(extra="allow")
    cells: list[Any] | None = Field(None)
    client_business: str | None = Field(None)
    confidence_level: float | None = Field(None)
    cooldown_start_time: int | None = Field(None)
    description: str | None = Field(None)
    end_time: int | None = Field(None)
    name: str | None = Field(None)
    objectives: list[Any] | None = Field(None)
    observation_end_time: int | None = Field(None)
    start_time: int | None = Field(None)
    type: userad_studies_type_enum_param | None = Field(None)
    viewers: list[int] | None = Field(None)


class UserCreateApplicationParams(BaseModel):
    """Parameters for User.create_application()."""

    model_config = ConfigDict(extra="allow")
    business_app: int = Field(...)


class UserGetAssignedBusinessAssetGroupsParams(BaseModel):
    """Parameters for User.get_assigned_business_asset_groups()."""

    model_config = ConfigDict(extra="allow")
    contained_asset_id: str | None = Field(None)


class UserGetAssignedPagesParams(BaseModel):
    """Parameters for User.get_assigned_pages()."""

    model_config = ConfigDict(extra="allow")
    pages: list[Any] | None = Field(None)


class UserDeleteBusinessesParams(BaseModel):
    """Parameters for User.delete_businesses()."""

    model_config = ConfigDict(extra="allow")
    business: str | None = Field(None)


class UserCreateBusinesseParams(BaseModel):
    """Parameters for User.create_businesse()."""

    model_config = ConfigDict(extra="allow")
    child_business_external_id: str | None = Field(None)
    email: str | None = Field(None)
    name: str = Field(...)
    primary_page: str | None = Field(None)
    sales_rep_email: str | None = Field(None)
    survey_business_type: userbusinesses_survey_business_type_enum_param | None = Field(None)
    survey_num_assets: int | None = Field(None)
    survey_num_people: int | None = Field(None)
    timezone_id: userbusinesses_timezone_id_enum_param | None = Field(None)
    vertical: userbusinesses_vertical_enum_param = Field(...)


class UserGetConversationsParams(BaseModel):
    """Parameters for User.get_conversations()."""

    model_config = ConfigDict(extra="allow")
    folder: str | None = Field(None)
    platform: userconversations_platform_enum_param | None = Field(None)
    tags: list[str] | None = Field(None)
    user_id: str | None = Field(None)


class UserGetEventsParams(BaseModel):
    """Parameters for User.get_events()."""

    model_config = ConfigDict(extra="allow")
    include_canceled: bool | None = Field(None)
    type: userevents_type_enum_param | None = Field(None)


class UserGetFeedParams(BaseModel):
    """Parameters for User.get_feed()."""

    model_config = ConfigDict(extra="allow")
    include_hidden: bool | None = Field(None)
    q: str | None = Field(None)
    show_expired: bool | None = Field(None)
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)
    field_with: str | None = Field(None, alias="with")


class UserCreateFeedParams(BaseModel):
    """Parameters for User.create_feed()."""

    model_config = ConfigDict(extra="allow")
    actions: dict[str, Any] | None = Field(None)
    album_id: str | None = Field(None)
    android_key_hash: str | None = Field(None)
    application_id: str | None = Field(None)
    asked_fun_fact_prompt_id: int | None = Field(None)
    asset3d_id: str | None = Field(None)
    associated_id: str | None = Field(None)
    attach_place_suggestion: bool | None = Field(None)
    attached_media: list[Any] | None = Field(None)
    audience_exp: bool | None = Field(None)
    backdated_time: datetime | None = Field(None)
    backdated_time_granularity: userfeed_backdated_time_granularity_enum_param | None = Field(None)
    breaking_news: bool | None = Field(None)
    breaking_news_expiration: int | None = Field(None)
    call_to_action: dict[str, Any] | None = Field(None)
    caption: str | None = Field(None)
    child_attachments: list[Any] | None = Field(None)
    client_mutation_id: str | None = Field(None)
    composer_entry_picker: str | None = Field(None)
    composer_entry_point: str | None = Field(None)
    composer_entry_time: int | None = Field(None)
    composer_session_events_log: str | None = Field(None)
    composer_session_id: str | None = Field(None)
    composer_source_surface: str | None = Field(None)
    composer_type: str | None = Field(None)
    connection_class: str | None = Field(None)
    content_attachment: str | None = Field(None)
    coordinates: dict[str, Any] | None = Field(None)
    cta_link: str | None = Field(None)
    cta_type: str | None = Field(None)
    description: str | None = Field(None)
    direct_share_status: int | None = Field(None)
    expanded_height: int | None = Field(None)
    expanded_width: int | None = Field(None)
    feed_targeting: dict[str, Any] | None = Field(None)
    formatting: userfeed_formatting_enum_param | None = Field(None)
    fun_fact_prompt_id: str | None = Field(None)
    fun_fact_toastee_id: int | None = Field(None)
    height: int | None = Field(None)
    home_checkin_city_id: dict[str, Any] | None = Field(None)
    image_crops: dict[str, Any] | None = Field(None)
    implicit_with_tags: list[int] | None = Field(None)
    instant_game_entry_point_data: str | None = Field(None)
    ios_bundle_id: str | None = Field(None)
    is_backout_draft: bool | None = Field(None)
    is_boost_intended: bool | None = Field(None)
    is_explicit_location: bool | None = Field(None)
    is_explicit_share: bool | None = Field(None)
    is_group_linking_post: bool | None = Field(None)
    is_photo_container: bool | None = Field(None)
    link: str | None = Field(None)
    location_source_id: str | None = Field(None)
    manual_privacy: bool | None = Field(None)
    message: str | None = Field(None)
    multi_share_end_card: bool | None = Field(None)
    multi_share_optimized: bool | None = Field(None)
    name: str | None = Field(None)
    nectar_module: str | None = Field(None)
    object_attachment: str | None = Field(None)
    og_action_type_id: str | None = Field(None)
    og_hide_object_attachment: bool | None = Field(None)
    og_icon_id: str | None = Field(None)
    og_object_id: str | None = Field(None)
    og_phrase: str | None = Field(None)
    og_set_profile_badge: bool | None = Field(None)
    og_suggestion_mechanism: str | None = Field(None)
    page_recommendation: str | None = Field(None)
    picture: str | None = Field(None)
    place: dict[str, Any] | None = Field(None)
    place_attachment_setting: userfeed_place_attachment_setting_enum_param | None = Field(None)
    place_list: str | None = Field(None)
    place_list_data: Any | None = Field(None)
    post_surfaces_blacklist: list[Any] | None = Field(None)
    posting_to_redspace: userfeed_posting_to_redspace_enum_param | None = Field(None)
    privacy: str | None = Field(None)
    prompt_id: str | None = Field(None)
    prompt_tracking_string: str | None = Field(None)
    properties: dict[str, Any] | None = Field(None)
    proxied_app_id: str | None = Field(None)
    publish_event_id: int | None = Field(None)
    published: bool | None = Field(None)
    quote: str | None = Field(None)
    ref: list[str] | None = Field(None)
    referenceable_image_ids: list[str] | None = Field(None)
    referral_id: str | None = Field(None)
    scheduled_publish_time: datetime | None = Field(None)
    source: str | None = Field(None)
    sponsor_id: str | None = Field(None)
    sponsor_relationship: int | None = Field(None)
    suggested_place_id: dict[str, Any] | None = Field(None)
    tags: list[int] | None = Field(None)
    target_surface: userfeed_target_surface_enum_param | None = Field(None)
    targeting: dict[str, Any] | None = Field(None)
    text_format_metadata: str | None = Field(None)
    text_format_preset_id: str | None = Field(None)
    text_only_place: str | None = Field(None)
    thumbnail: Any | None = Field(None)
    time_since_original_post: int | None = Field(None)
    title: str | None = Field(None)
    tracking_info: str | None = Field(None)
    unpublished_content_type: userfeed_unpublished_content_type_enum_param | None = Field(None)
    user_selected_tags: bool | None = Field(None)
    video_start_time_ms: int | None = Field(None)
    viewer_coordinates: dict[str, Any] | None = Field(None)
    width: int | None = Field(None)


class UserGetFriendsParams(BaseModel):
    """Parameters for User.get_friends()."""

    model_config = ConfigDict(extra="allow")
    uid: int | None = Field(None)


class UserCreateFundraiserParams(BaseModel):
    """Parameters for User.create_fundraiser()."""

    model_config = ConfigDict(extra="allow")
    charity_id: str | None = Field(None)
    cover_photo: Any | None = Field(None)
    currency: str = Field(...)
    description: str = Field(...)
    end_time: datetime = Field(...)
    external_event_name: str | None = Field(None)
    external_event_start_time: datetime | None = Field(None)
    external_event_uri: str | None = Field(None)
    external_fundraiser_uri: str | None = Field(None)
    external_id: str = Field(...)
    fundraiser_type: userfundraisers_fundraiser_type_enum_param = Field(...)
    goal_amount: int = Field(...)
    name: str = Field(...)
    page_id: str | None = Field(None)


class UserGetGroupsParams(BaseModel):
    """Parameters for User.get_groups()."""

    model_config = ConfigDict(extra="allow")
    admin_only: bool | None = Field(None)
    parent: str | None = Field(None)


class UserGetIdsForAppsParams(BaseModel):
    """Parameters for User.get_ids_for_apps()."""

    model_config = ConfigDict(extra="allow")
    app: int | None = Field(None)


class UserGetIdsForBusinessParams(BaseModel):
    """Parameters for User.get_ids_for_business()."""

    model_config = ConfigDict(extra="allow")
    app: int | None = Field(None)


class UserGetIdsForPagesParams(BaseModel):
    """Parameters for User.get_ids_for_pages()."""

    model_config = ConfigDict(extra="allow")
    page: int | None = Field(None)


class UserGetLikesParams(BaseModel):
    """Parameters for User.get_likes()."""

    model_config = ConfigDict(extra="allow")
    target_id: str | None = Field(None)


class UserGetLiveVideosParams(BaseModel):
    """Parameters for User.get_live_videos()."""

    model_config = ConfigDict(extra="allow")
    broadcast_status: list[Any] | None = Field(None)
    source: userlive_videos_source_enum_param | None = Field(None)


class UserCreateLiveVideoParams(BaseModel):
    """Parameters for User.create_live_video()."""

    model_config = ConfigDict(extra="allow")
    content_tags: list[str] | None = Field(None)
    description: str | None = Field(None)
    enable_backup_ingest: bool | None = Field(None)
    encoding_settings: str | None = Field(None)
    event_params: dict[str, Any] | None = Field(None)
    fisheye_video_cropped: bool | None = Field(None)
    front_z_rotation: float | None = Field(None)
    is_audio_only: bool | None = Field(None)
    is_spherical: bool | None = Field(None)
    original_fov: int | None = Field(None)
    privacy: str | None = Field(None)
    projection: userlive_videos_projection_enum_param | None = Field(None)
    published: bool | None = Field(None)
    schedule_custom_profile_image: Any | None = Field(None)
    spatial_audio_format: userlive_videos_spatial_audio_format_enum_param | None = Field(None)
    status: userlive_videos_status_enum_param | None = Field(None)
    stereoscopic_mode: userlive_videos_stereoscopic_mode_enum_param | None = Field(None)
    stop_on_delete_stream: bool | None = Field(None)
    stream_type: userlive_videos_stream_type_enum_param | None = Field(None)
    title: str | None = Field(None)


class UserCreateMessengerKidsAccountsUnreadBadgeParams(BaseModel):
    """Parameters for User.create_messenger_kids_accounts_unread_badge()."""

    model_config = ConfigDict(extra="allow")
    proxied_app_id: int = Field(...)


class UserGetMusicParams(BaseModel):
    """Parameters for User.get_music()."""

    model_config = ConfigDict(extra="allow")
    target_id: str | None = Field(None)


class UserCreateNotificationParams(BaseModel):
    """Parameters for User.create_notification()."""

    model_config = ConfigDict(extra="allow")
    bot_message_payload_elements: str | None = Field(None)
    filtering: list[Any] | None = Field(None)
    href: dict[str, Any] | None = Field(None)
    label: str | None = Field(None)
    message: dict[str, Any] | None = Field(None)
    notif_ids: list[str] | None = Field(None)
    payload: str | None = Field(None)
    read: bool | None = Field(None)
    ref: str | None = Field(None)
    schedule_interval: int | None = Field(None)
    seen: bool | None = Field(None)
    template: dict[str, Any] | None = Field(None)
    type: usernotifications_type_enum_param | None = Field(None)


class UserDeletePermissionsParams(BaseModel):
    """Parameters for User.delete_permissions()."""

    model_config = ConfigDict(extra="allow")
    permission: str | None = Field(None)


class UserGetPermissionsParams(BaseModel):
    """Parameters for User.get_permissions()."""

    model_config = ConfigDict(extra="allow")
    permission: str | None = Field(None)
    status: userpermissions_status_enum_param | None = Field(None)


class UserGetPhotosParams(BaseModel):
    """Parameters for User.get_photos()."""

    model_config = ConfigDict(extra="allow")
    type: userphotos_type_enum_param | None = Field(None)


class UserCreatePhotoParams(BaseModel):
    """Parameters for User.create_photo()."""

    model_config = ConfigDict(extra="allow")
    aid: str | None = Field(None)
    allow_spherical_photo: bool | None = Field(None)
    alt_text_custom: str | None = Field(None)
    android_key_hash: str | None = Field(None)
    application_id: str | None = Field(None)
    attempt: int | None = Field(None)
    audience_exp: bool | None = Field(None)
    backdated_time: datetime | None = Field(None)
    backdated_time_granularity: userphotos_backdated_time_granularity_enum_param | None = Field(
        None
    )
    caption: str | None = Field(None)
    composer_session_id: str | None = Field(None)
    direct_share_status: int | None = Field(None)
    feed_targeting: dict[str, Any] | None = Field(None)
    filter_type: int | None = Field(None)
    full_res_is_coming_later: bool | None = Field(None)
    initial_view_heading_override_degrees: int | None = Field(None)
    initial_view_pitch_override_degrees: int | None = Field(None)
    initial_view_vertical_fov_override_degrees: int | None = Field(None)
    ios_bundle_id: str | None = Field(None)
    is_explicit_location: bool | None = Field(None)
    is_explicit_place: bool | None = Field(None)
    manual_privacy: bool | None = Field(None)
    message: str | None = Field(None)
    name: str | None = Field(None)
    no_story: bool | None = Field(None)
    offline_id: int | None = Field(None)
    og_action_type_id: str | None = Field(None)
    og_icon_id: str | None = Field(None)
    og_object_id: str | None = Field(None)
    og_phrase: str | None = Field(None)
    og_set_profile_badge: bool | None = Field(None)
    og_suggestion_mechanism: str | None = Field(None)
    place: dict[str, Any] | None = Field(None)
    privacy: str | None = Field(None)
    profile_id: int | None = Field(None)
    provenance_info: dict[str, Any] | None = Field(None)
    proxied_app_id: str | None = Field(None)
    published: bool | None = Field(None)
    qn: str | None = Field(None)
    scheduled_publish_time: int | None = Field(None)
    spherical_metadata: dict[str, Any] | None = Field(None)
    sponsor_id: str | None = Field(None)
    sponsor_relationship: int | None = Field(None)
    tags: list[Any] | None = Field(None)
    target_id: int | None = Field(None)
    targeting: dict[str, Any] | None = Field(None)
    time_since_original_post: int | None = Field(None)
    uid: int | None = Field(None)
    unpublished_content_type: userphotos_unpublished_content_type_enum_param | None = Field(None)
    url: str | None = Field(None)
    user_selected_tags: bool | None = Field(None)
    vault_image_id: str | None = Field(None)


class UserGetPictureParams(BaseModel):
    """Parameters for User.get_picture()."""

    model_config = ConfigDict(extra="allow")
    height: int | None = Field(None)
    redirect: bool | None = Field(None)
    type: userpicture_type_enum_param | None = Field(None)
    width: int | None = Field(None)


class UserGetPostsParams(BaseModel):
    """Parameters for User.get_posts()."""

    model_config = ConfigDict(extra="allow")
    include_hidden: bool | None = Field(None)
    q: str | None = Field(None)
    show_expired: bool | None = Field(None)
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)
    field_with: str | None = Field(None, alias="with")


class UserGetRichMediaDocumentsParams(BaseModel):
    """Parameters for User.get_rich_media_documents()."""

    model_config = ConfigDict(extra="allow")
    query: str | None = Field(None)


class UserCreateStagingResourceParams(BaseModel):
    """Parameters for User.create_staging_resource()."""

    model_config = ConfigDict(extra="allow")
    file: Any | None = Field(None)


class UserGetVideosParams(BaseModel):
    """Parameters for User.get_videos()."""

    model_config = ConfigDict(extra="allow")
    type: uservideos_type_enum_param | None = Field(None)


class UserCreateVideoParams(BaseModel):
    """Parameters for User.create_video()."""

    model_config = ConfigDict(extra="allow")
    application_id: str | None = Field(None)
    asked_fun_fact_prompt_id: int | None = Field(None)
    audio_story_wave_animation_handle: str | None = Field(None)
    composer_entry_picker: str | None = Field(None)
    composer_entry_point: str | None = Field(None)
    composer_entry_time: int | None = Field(None)
    composer_session_events_log: str | None = Field(None)
    composer_session_id: str | None = Field(None)
    composer_source_surface: str | None = Field(None)
    composer_type: str | None = Field(None)
    container_type: uservideos_container_type_enum_param | None = Field(None)
    content_category: uservideos_content_category_enum_param | None = Field(None)
    creative_tools: str | None = Field(None)
    description: str | None = Field(None)
    direct_share_status: int | None = Field(None)
    embeddable: bool | None = Field(None)
    end_offset: int | None = Field(None)
    fbuploader_video_file_chunk: str | None = Field(None)
    file_size: int | None = Field(None)
    file_url: str | None = Field(None)
    fisheye_video_cropped: bool | None = Field(None)
    formatting: uservideos_formatting_enum_param | None = Field(None)
    fov: int | None = Field(None)
    front_z_rotation: float | None = Field(None)
    fun_fact_prompt_id: str | None = Field(None)
    fun_fact_toastee_id: int | None = Field(None)
    guide: list[Any] | None = Field(None)
    guide_enabled: bool | None = Field(None)
    initial_heading: int | None = Field(None)
    initial_pitch: int | None = Field(None)
    instant_game_entry_point_data: str | None = Field(None)
    is_boost_intended: bool | None = Field(None)
    is_explicit_share: bool | None = Field(None)
    is_group_linking_post: bool | None = Field(None)
    is_partnership_ad: bool | None = Field(None)
    is_voice_clip: bool | None = Field(None)
    location_source_id: str | None = Field(None)
    manual_privacy: bool | None = Field(None)
    no_story: bool | None = Field(None)
    og_action_type_id: str | None = Field(None)
    og_icon_id: str | None = Field(None)
    og_object_id: str | None = Field(None)
    og_phrase: str | None = Field(None)
    og_suggestion_mechanism: str | None = Field(None)
    original_fov: int | None = Field(None)
    original_projection_type: uservideos_original_projection_type_enum_param | None = Field(None)
    partnership_ad_ad_code: str | None = Field(None)
    privacy: str | None = Field(None)
    publish_event_id: int | None = Field(None)
    referenced_sticker_id: str | None = Field(None)
    replace_video_id: str | None = Field(None)
    slideshow_spec: dict[str, Any] | None = Field(None)
    source: str | None = Field(None)
    source_instagram_media_id: str | None = Field(None)
    spherical: bool | None = Field(None)
    sponsor_id: str | None = Field(None)
    start_offset: int | None = Field(None)
    swap_mode: uservideos_swap_mode_enum_param | None = Field(None)
    text_format_metadata: str | None = Field(None)
    thumb: Any | None = Field(None)
    time_since_original_post: int | None = Field(None)
    title: str | None = Field(None)
    transcode_setting_properties: str | None = Field(None)
    unpublished_content_type: uservideos_unpublished_content_type_enum_param | None = Field(None)
    upload_phase: uservideos_upload_phase_enum_param | None = Field(None)
    upload_session_id: str | None = Field(None)
    upload_setting_properties: str | None = Field(None)
    video_file_chunk: str | None = Field(None)
    video_id_original: str | None = Field(None)
    video_start_time_ms: int | None = Field(None)
    waterfall_id: str | None = Field(None)


class LocalServiceBusinessGetOverrideDetailsParams(BaseModel):
    """Parameters for LocalServiceBusiness.get_override_details()."""

    model_config = ConfigDict(extra="allow")
    keys: list[str] | None = Field(None)
    type: localservicebusinessoverride_details_type_enum_param | None = Field(None)


class InstagramUserGetAuthorizedAdaccountsParams(BaseModel):
    """Parameters for InstagramUser.get_authorized_adaccounts()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)


class AdRuleGetHistoryParams(BaseModel):
    """Parameters for AdRule.get_history()."""

    model_config = ConfigDict(extra="allow")
    action: adrulehistory_action_enum_param | None = Field(None)
    hide_no_changes: bool | None = Field(None)
    object_id: str | None = Field(None)


class LeadgenFormCreateTestLeadParams(BaseModel):
    """Parameters for LeadgenForm.create_test_lead()."""

    model_config = ConfigDict(extra="allow")
    custom_disclaimer_responses: list[Any] | None = Field(None)
    field_data: list[Any] | None = Field(None)


class FundraiserPersonToCharityCreateExternalDonationParams(BaseModel):
    """Parameters for FundraiserPersonToCharity.create_external_donation()."""

    model_config = ConfigDict(extra="allow")
    amount_received: int = Field(...)
    currency: str = Field(...)
    donation_id_hash: str = Field(...)
    donation_time: int = Field(...)
    donor_id_hash: str = Field(...)


class PagePostGetCommentsParams(BaseModel):
    """Parameters for PagePost.get_comments()."""

    model_config = ConfigDict(extra="allow")
    filter: pagepostcomments_filter_enum_param | None = Field(None)
    live_filter: pagepostcomments_live_filter_enum_param | None = Field(None)
    order: pagepostcomments_order_enum_param | None = Field(None)
    since: datetime | None = Field(None)


class PagePostCreateCommentParams(BaseModel):
    """Parameters for PagePost.create_comment()."""

    model_config = ConfigDict(extra="allow")
    attachment_id: str | None = Field(None)
    attachment_share_url: str | None = Field(None)
    attachment_url: str | None = Field(None)
    comment: str | None = Field(None)
    comment_privacy_value: pagepostcomments_comment_privacy_value_enum_param | None = Field(None)
    feedback_source: str | None = Field(None)
    message: str | None = Field(None)
    nectar_module: str | None = Field(None)
    parent_comment_id: dict[str, Any] | None = Field(None)
    post_id: str | None = Field(None)
    tracking: str | None = Field(None)


class PagePostGetInsightsParams(BaseModel):
    """Parameters for PagePost.get_insights()."""

    model_config = ConfigDict(extra="allow")
    date_preset: pagepostinsights_date_preset_enum_param | None = Field(None)
    metric: list[Any] | None = Field(None)
    period: pagepostinsights_period_enum_param | None = Field(None)
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)


class PagePostDeleteLikesParams(BaseModel):
    """Parameters for PagePost.delete_likes()."""

    model_config = ConfigDict(extra="allow")
    nectar_module: str | None = Field(None)
    tracking: str | None = Field(None)


class PagePostCreateLikeParams(BaseModel):
    """Parameters for PagePost.create_like()."""

    model_config = ConfigDict(extra="allow")
    feedback_source: str | None = Field(None)
    nectar_module: str | None = Field(None)
    tracking: str | None = Field(None)


class PagePostGetReactionsParams(BaseModel):
    """Parameters for PagePost.get_reactions()."""

    model_config = ConfigDict(extra="allow")
    type: pagepostreactions_type_enum_param | None = Field(None)


class HotelGetOverrideDetailsParams(BaseModel):
    """Parameters for Hotel.get_override_details()."""

    model_config = ConfigDict(extra="allow")
    keys: list[str] | None = Field(None)
    type: hoteloverride_details_type_enum_param | None = Field(None)


class WhatsAppBusinessPreVerifiedPhoneNumberCreateRequestCodeParams(BaseModel):
    """Parameters for WhatsAppBusinessPreVerifiedPhoneNumber.create_request_code()."""

    model_config = ConfigDict(extra="allow")
    code_method: whatsappbusinesspreverifiedphonenumberrequest_code_code_method_enum_param = Field(
        ...
    )
    language: str = Field(...)


class WhatsAppBusinessPreVerifiedPhoneNumberCreateVerifyCodeParams(BaseModel):
    """Parameters for WhatsAppBusinessPreVerifiedPhoneNumber.create_verify_code()."""

    model_config = ConfigDict(extra="allow")
    code: str = Field(...)


class AvatarGetModelsParams(BaseModel):
    """Parameters for Avatar.get_models()."""

    model_config = ConfigDict(extra="allow")
    client_name: str | None = Field(None)
    client_version: str | None = Field(None)
    config_id: str | None = Field(None)
    force_generate: bool | None = Field(None)
    platform: str | None = Field(None)
    profile: str = Field(...)
    sdk_version: str | None = Field(None)


class ProductItemGetOverrideDetailsParams(BaseModel):
    """Parameters for ProductItem.get_override_details()."""

    model_config = ConfigDict(extra="allow")
    keys: list[str] | None = Field(None)
    type: productitemoverride_details_type_enum_param | None = Field(None)


class AlbumGetCommentsParams(BaseModel):
    """Parameters for Album.get_comments()."""

    model_config = ConfigDict(extra="allow")
    filter: albumcomments_filter_enum_param | None = Field(None)
    live_filter: albumcomments_live_filter_enum_param | None = Field(None)
    order: albumcomments_order_enum_param | None = Field(None)
    since: datetime | None = Field(None)


class AlbumCreateCommentParams(BaseModel):
    """Parameters for Album.create_comment()."""

    model_config = ConfigDict(extra="allow")
    attachment_id: str | None = Field(None)
    attachment_share_url: str | None = Field(None)
    attachment_url: str | None = Field(None)
    comment_privacy_value: albumcomments_comment_privacy_value_enum_param | None = Field(None)
    facepile_mentioned_ids: list[str] | None = Field(None)
    feedback_source: str | None = Field(None)
    is_offline: bool | None = Field(None)
    message: str | None = Field(None)
    nectar_module: str | None = Field(None)
    object_id: str | None = Field(None)
    parent_comment_id: dict[str, Any] | None = Field(None)
    text: str | None = Field(None)
    tracking: str | None = Field(None)


class AlbumCreateLikeParams(BaseModel):
    """Parameters for Album.create_like()."""

    model_config = ConfigDict(extra="allow")
    feedback_source: str | None = Field(None)
    nectar_module: str | None = Field(None)
    notify: bool | None = Field(None)
    tracking: str | None = Field(None)


class AlbumCreatePhotoParams(BaseModel):
    """Parameters for Album.create_photo()."""

    model_config = ConfigDict(extra="allow")
    aid: str | None = Field(None)
    allow_spherical_photo: bool | None = Field(None)
    alt_text_custom: str | None = Field(None)
    android_key_hash: str | None = Field(None)
    application_id: str | None = Field(None)
    attempt: int | None = Field(None)
    audience_exp: bool | None = Field(None)
    backdated_time: datetime | None = Field(None)
    backdated_time_granularity: albumphotos_backdated_time_granularity_enum_param | None = Field(
        None
    )
    caption: str | None = Field(None)
    composer_session_id: str | None = Field(None)
    direct_share_status: int | None = Field(None)
    feed_targeting: dict[str, Any] | None = Field(None)
    filter_type: int | None = Field(None)
    full_res_is_coming_later: bool | None = Field(None)
    initial_view_heading_override_degrees: int | None = Field(None)
    initial_view_pitch_override_degrees: int | None = Field(None)
    initial_view_vertical_fov_override_degrees: int | None = Field(None)
    ios_bundle_id: str | None = Field(None)
    is_explicit_location: bool | None = Field(None)
    is_explicit_place: bool | None = Field(None)
    manual_privacy: bool | None = Field(None)
    message: str | None = Field(None)
    name: str | None = Field(None)
    no_story: bool | None = Field(None)
    offline_id: int | None = Field(None)
    og_action_type_id: str | None = Field(None)
    og_icon_id: str | None = Field(None)
    og_object_id: str | None = Field(None)
    og_phrase: str | None = Field(None)
    og_set_profile_badge: bool | None = Field(None)
    og_suggestion_mechanism: str | None = Field(None)
    place: dict[str, Any] | None = Field(None)
    privacy: str | None = Field(None)
    profile_id: int | None = Field(None)
    provenance_info: dict[str, Any] | None = Field(None)
    proxied_app_id: str | None = Field(None)
    published: bool | None = Field(None)
    qn: str | None = Field(None)
    spherical_metadata: dict[str, Any] | None = Field(None)
    sponsor_id: str | None = Field(None)
    sponsor_relationship: int | None = Field(None)
    tags: list[Any] | None = Field(None)
    target_id: int | None = Field(None)
    targeting: dict[str, Any] | None = Field(None)
    time_since_original_post: int | None = Field(None)
    uid: int | None = Field(None)
    unpublished_content_type: albumphotos_unpublished_content_type_enum_param | None = Field(None)
    url: str | None = Field(None)
    user_selected_tags: bool | None = Field(None)
    vault_image_id: str | None = Field(None)


class AlbumGetPictureParams(BaseModel):
    """Parameters for Album.get_picture()."""

    model_config = ConfigDict(extra="allow")
    redirect: bool | None = Field(None)
    type: albumpicture_type_enum_param | None = Field(None)


class AdgroupFacebookFeedbackGetCommentsParams(BaseModel):
    """Parameters for AdgroupFacebookFeedback.get_comments()."""

    model_config = ConfigDict(extra="allow")
    order: adgroupfacebookfeedbackcomments_order_enum_param | None = Field(None)


class AdVideoCreateCaptionParams(BaseModel):
    """Parameters for AdVideo.create_caption()."""

    model_config = ConfigDict(extra="allow")
    captions_file: Any | None = Field(None)
    default_locale: str | None = Field(None)
    locales_to_delete: list[str] | None = Field(None)


class AdVideoCreateCollaboratorParams(BaseModel):
    """Parameters for AdVideo.create_collaborator()."""

    model_config = ConfigDict(extra="allow")
    target_id: str = Field(...)


class AdVideoGetCommentsParams(BaseModel):
    """Parameters for AdVideo.get_comments()."""

    model_config = ConfigDict(extra="allow")
    filter: videocomments_filter_enum_param | None = Field(None)
    live_filter: videocomments_live_filter_enum_param | None = Field(None)
    order: videocomments_order_enum_param | None = Field(None)
    since: datetime | None = Field(None)


class AdVideoCreateCommentParams(BaseModel):
    """Parameters for AdVideo.create_comment()."""

    model_config = ConfigDict(extra="allow")
    attachment_id: str | None = Field(None)
    attachment_share_url: str | None = Field(None)
    attachment_url: str | None = Field(None)
    comment_privacy_value: videocomments_comment_privacy_value_enum_param | None = Field(None)
    facepile_mentioned_ids: list[str] | None = Field(None)
    feedback_source: str | None = Field(None)
    is_offline: bool | None = Field(None)
    message: str | None = Field(None)
    nectar_module: str | None = Field(None)
    object_id: str | None = Field(None)
    parent_comment_id: dict[str, Any] | None = Field(None)
    text: str | None = Field(None)
    tracking: str | None = Field(None)


class AdVideoCreateGamingClipCreateParams(BaseModel):
    """Parameters for AdVideo.create_gaming_clip_create()."""

    model_config = ConfigDict(extra="allow")
    duration_seconds: float | None = Field(None)


class AdVideoCreateLikeParams(BaseModel):
    """Parameters for AdVideo.create_like()."""

    model_config = ConfigDict(extra="allow")
    feedback_source: str | None = Field(None)
    nectar_module: str | None = Field(None)
    notify: bool | None = Field(None)
    tracking: str | None = Field(None)


class AdVideoCreatePollParams(BaseModel):
    """Parameters for AdVideo.create_poll()."""

    model_config = ConfigDict(extra="allow")
    close_after_voting: bool | None = Field(None)
    correct_option: int | None = Field(None)
    default_open: bool | None = Field(None)
    options: list[str] = Field(...)
    question: str = Field(...)
    show_gradient: bool | None = Field(None)
    show_results: bool | None = Field(None)


class AdVideoCreateThumbnailParams(BaseModel):
    """Parameters for AdVideo.create_thumbnail()."""

    model_config = ConfigDict(extra="allow")
    is_preferred: bool | None = Field(None)
    source: Any = Field(...)


class AdVideoGetVideoInsightsParams(BaseModel):
    """Parameters for AdVideo.get_video_insights()."""

    model_config = ConfigDict(extra="allow")
    metric: list[Any] | None = Field(None)
    period: videovideo_insights_period_enum_param | None = Field(None)
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)


class AdCreativeCreateAdLabelParams(BaseModel):
    """Parameters for AdCreative.create_ad_label()."""

    model_config = ConfigDict(extra="allow")
    adlabels: list[Any] = Field(...)


class AdCreativeGetPreviewsParams(BaseModel):
    """Parameters for AdCreative.get_previews()."""

    model_config = ConfigDict(extra="allow")
    ad_format: adcreativepreviews_ad_format_enum_param = Field(...)
    creative_feature: adcreativepreviews_creative_feature_enum_param | None = Field(None)
    dynamic_asset_label: str | None = Field(None)
    dynamic_creative_spec: dict[str, Any] | None = Field(None)
    dynamic_customization: dict[str, Any] | None = Field(None)
    end_date: datetime | None = Field(None)
    height: int | None = Field(None)
    locale: str | None = Field(None)
    place_page_id: int | None = Field(None)
    post: dict[str, Any] | None = Field(None)
    product_item_ids: list[str] | None = Field(None)
    render_type: adcreativepreviews_render_type_enum_param | None = Field(None)
    start_date: datetime | None = Field(None)
    width: int | None = Field(None)


class AdsPixelGetAdAccountsParams(BaseModel):
    """Parameters for AdsPixel.get_ad_accounts()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)


class AdsPixelDeleteAgenciesParams(BaseModel):
    """Parameters for AdsPixel.delete_agencies()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)


class AdsPixelCreateAgencieParams(BaseModel):
    """Parameters for AdsPixel.create_agencie()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)
    permitted_tasks: list[Any] = Field(...)


class AdsPixelCreateAhpConfigParams(BaseModel):
    """Parameters for AdsPixel.create_ahp_config()."""

    model_config = ConfigDict(extra="allow")
    applink_autosetup: bool = Field(...)


class AdsPixelGetAssignedUsersParams(BaseModel):
    """Parameters for AdsPixel.get_assigned_users()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)


class AdsPixelCreateAssignedUserParams(BaseModel):
    """Parameters for AdsPixel.create_assigned_user()."""

    model_config = ConfigDict(extra="allow")
    tasks: list[Any] = Field(...)
    user: int = Field(...)


class AdsPixelGetDaChecksParams(BaseModel):
    """Parameters for AdsPixel.get_da_checks()."""

    model_config = ConfigDict(extra="allow")
    checks: list[str] | None = Field(None)
    connection_method: adspixelda_checks_connection_method_enum_param | None = Field(None)


class AdsPixelCreateEventParams(BaseModel):
    """Parameters for AdsPixel.create_event()."""

    model_config = ConfigDict(extra="allow")
    data: list[str] = Field(...)
    namespace_id: str | None = Field(None)
    partner_agent: str | None = Field(None)
    platforms: list[Any] | None = Field(None)
    progress: dict[str, Any] | None = Field(None)
    test_event_code: str | None = Field(None)
    trace: int | None = Field(None)
    upload_id: str | None = Field(None)
    upload_source: str | None = Field(None)
    upload_tag: str | None = Field(None)


class AdsPixelGetOfflineEventUploadsParams(BaseModel):
    """Parameters for AdsPixel.get_offline_event_uploads()."""

    model_config = ConfigDict(extra="allow")
    end_time: datetime | None = Field(None)
    order: adspixeloffline_event_uploads_order_enum_param | None = Field(None)
    sort_by: adspixeloffline_event_uploads_sort_by_enum_param | None = Field(None)
    start_time: datetime | None = Field(None)
    upload_tag: str | None = Field(None)


class AdsPixelDeleteSharedAccountsParams(BaseModel):
    """Parameters for AdsPixel.delete_shared_accounts()."""

    model_config = ConfigDict(extra="allow")
    account_id: str = Field(...)
    business: str = Field(...)


class AdsPixelGetSharedAccountsParams(BaseModel):
    """Parameters for AdsPixel.get_shared_accounts()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)


class AdsPixelCreateSharedAccountParams(BaseModel):
    """Parameters for AdsPixel.create_shared_account()."""

    model_config = ConfigDict(extra="allow")
    account_id: str = Field(...)
    business: str = Field(...)


class AdsPixelGetStatsParams(BaseModel):
    """Parameters for AdsPixel.get_stats()."""

    model_config = ConfigDict(extra="allow")
    aggregation: adspixelstats_aggregation_enum_param | None = Field(None)
    end_time: datetime | None = Field(None)
    event: str | None = Field(None)
    event_source: str | None = Field(None)
    start_time: datetime | None = Field(None)


class GroupDeleteAdMinsParams(BaseModel):
    """Parameters for Group.delete_ad_mins()."""

    model_config = ConfigDict(extra="allow")
    uid: int = Field(...)


class GroupCreateAdMinParams(BaseModel):
    """Parameters for Group.create_ad_min()."""

    model_config = ConfigDict(extra="allow")
    uid: int = Field(...)


class GroupGetFeedParams(BaseModel):
    """Parameters for Group.get_feed()."""

    model_config = ConfigDict(extra="allow")
    include_hidden: bool | None = Field(None)
    q: str | None = Field(None)
    show_expired: bool | None = Field(None)
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)
    field_with: str | None = Field(None, alias="with")


class GroupCreateFeedParams(BaseModel):
    """Parameters for Group.create_feed()."""

    model_config = ConfigDict(extra="allow")
    actions: dict[str, Any] | None = Field(None)
    album_id: str | None = Field(None)
    android_key_hash: str | None = Field(None)
    application_id: str | None = Field(None)
    asked_fun_fact_prompt_id: int | None = Field(None)
    asset3d_id: str | None = Field(None)
    associated_id: str | None = Field(None)
    attach_place_suggestion: bool | None = Field(None)
    attached_media: list[Any] | None = Field(None)
    audience_exp: bool | None = Field(None)
    backdated_time: datetime | None = Field(None)
    backdated_time_granularity: groupfeed_backdated_time_granularity_enum_param | None = Field(None)
    breaking_news: bool | None = Field(None)
    breaking_news_expiration: int | None = Field(None)
    call_to_action: dict[str, Any] | None = Field(None)
    caption: str | None = Field(None)
    child_attachments: list[Any] | None = Field(None)
    client_mutation_id: str | None = Field(None)
    composer_entry_picker: str | None = Field(None)
    composer_entry_point: str | None = Field(None)
    composer_entry_time: int | None = Field(None)
    composer_session_events_log: str | None = Field(None)
    composer_session_id: str | None = Field(None)
    composer_source_surface: str | None = Field(None)
    composer_type: str | None = Field(None)
    connection_class: str | None = Field(None)
    content_attachment: str | None = Field(None)
    coordinates: dict[str, Any] | None = Field(None)
    cta_link: str | None = Field(None)
    cta_type: str | None = Field(None)
    description: str | None = Field(None)
    direct_share_status: int | None = Field(None)
    expanded_height: int | None = Field(None)
    expanded_width: int | None = Field(None)
    feed_targeting: dict[str, Any] | None = Field(None)
    formatting: groupfeed_formatting_enum_param | None = Field(None)
    fun_fact_prompt_id: str | None = Field(None)
    fun_fact_toastee_id: int | None = Field(None)
    height: int | None = Field(None)
    home_checkin_city_id: dict[str, Any] | None = Field(None)
    image_crops: dict[str, Any] | None = Field(None)
    implicit_with_tags: list[int] | None = Field(None)
    instant_game_entry_point_data: str | None = Field(None)
    ios_bundle_id: str | None = Field(None)
    is_backout_draft: bool | None = Field(None)
    is_boost_intended: bool | None = Field(None)
    is_explicit_location: bool | None = Field(None)
    is_explicit_share: bool | None = Field(None)
    is_group_linking_post: bool | None = Field(None)
    is_photo_container: bool | None = Field(None)
    link: str | None = Field(None)
    location_source_id: str | None = Field(None)
    manual_privacy: bool | None = Field(None)
    message: str | None = Field(None)
    multi_share_end_card: bool | None = Field(None)
    multi_share_optimized: bool | None = Field(None)
    name: str | None = Field(None)
    nectar_module: str | None = Field(None)
    object_attachment: str | None = Field(None)
    og_action_type_id: str | None = Field(None)
    og_hide_object_attachment: bool | None = Field(None)
    og_icon_id: str | None = Field(None)
    og_object_id: str | None = Field(None)
    og_phrase: str | None = Field(None)
    og_set_profile_badge: bool | None = Field(None)
    og_suggestion_mechanism: str | None = Field(None)
    page_recommendation: str | None = Field(None)
    picture: str | None = Field(None)
    place: dict[str, Any] | None = Field(None)
    place_attachment_setting: groupfeed_place_attachment_setting_enum_param | None = Field(None)
    place_list: str | None = Field(None)
    place_list_data: Any | None = Field(None)
    post_surfaces_blacklist: list[Any] | None = Field(None)
    posting_to_redspace: groupfeed_posting_to_redspace_enum_param | None = Field(None)
    privacy: str | None = Field(None)
    prompt_id: str | None = Field(None)
    prompt_tracking_string: str | None = Field(None)
    properties: dict[str, Any] | None = Field(None)
    proxied_app_id: str | None = Field(None)
    publish_event_id: int | None = Field(None)
    published: bool | None = Field(None)
    quote: str | None = Field(None)
    ref: list[str] | None = Field(None)
    referenceable_image_ids: list[str] | None = Field(None)
    referral_id: str | None = Field(None)
    scheduled_publish_time: datetime | None = Field(None)
    source: str | None = Field(None)
    sponsor_id: str | None = Field(None)
    sponsor_relationship: int | None = Field(None)
    suggested_place_id: dict[str, Any] | None = Field(None)
    tags: list[int] | None = Field(None)
    target_surface: groupfeed_target_surface_enum_param | None = Field(None)
    targeting: dict[str, Any] | None = Field(None)
    text_format_metadata: str | None = Field(None)
    text_format_preset_id: str | None = Field(None)
    text_only_place: str | None = Field(None)
    thumbnail: Any | None = Field(None)
    time_since_original_post: int | None = Field(None)
    title: str | None = Field(None)
    tracking_info: str | None = Field(None)
    unpublished_content_type: groupfeed_unpublished_content_type_enum_param | None = Field(None)
    user_selected_tags: bool | None = Field(None)
    video_start_time_ms: int | None = Field(None)
    viewer_coordinates: dict[str, Any] | None = Field(None)
    width: int | None = Field(None)


class GroupCreateGroupParams(BaseModel):
    """Parameters for Group.create_group()."""

    model_config = ConfigDict(extra="allow")
    admin: int | None = Field(None)
    description: str | None = Field(None)
    group_icon_id: str | None = Field(None)
    group_type: groupgroups_group_type_enum_param | None = Field(None)
    join_setting: groupgroups_join_setting_enum_param | None = Field(None)
    name: str = Field(...)
    parent_id: str | None = Field(None)
    post_permissions: groupgroups_post_permissions_enum_param | None = Field(None)
    post_requires_admin_approval: bool | None = Field(None)
    privacy: str | None = Field(None)
    ref: str | None = Field(None)


class GroupGetLiveVideosParams(BaseModel):
    """Parameters for Group.get_live_videos()."""

    model_config = ConfigDict(extra="allow")
    broadcast_status: list[Any] | None = Field(None)
    source: grouplive_videos_source_enum_param | None = Field(None)


class GroupCreateLiveVideoParams(BaseModel):
    """Parameters for Group.create_live_video()."""

    model_config = ConfigDict(extra="allow")
    content_tags: list[str] | None = Field(None)
    description: str | None = Field(None)
    enable_backup_ingest: bool | None = Field(None)
    encoding_settings: str | None = Field(None)
    event_params: dict[str, Any] | None = Field(None)
    fisheye_video_cropped: bool | None = Field(None)
    front_z_rotation: float | None = Field(None)
    is_audio_only: bool | None = Field(None)
    is_spherical: bool | None = Field(None)
    original_fov: int | None = Field(None)
    privacy: str | None = Field(None)
    projection: grouplive_videos_projection_enum_param | None = Field(None)
    published: bool | None = Field(None)
    schedule_custom_profile_image: Any | None = Field(None)
    spatial_audio_format: grouplive_videos_spatial_audio_format_enum_param | None = Field(None)
    status: grouplive_videos_status_enum_param | None = Field(None)
    stereoscopic_mode: grouplive_videos_stereoscopic_mode_enum_param | None = Field(None)
    stop_on_delete_stream: bool | None = Field(None)
    stream_type: grouplive_videos_stream_type_enum_param | None = Field(None)
    title: str | None = Field(None)


class GroupDeleteMembersParams(BaseModel):
    """Parameters for Group.delete_members()."""

    model_config = ConfigDict(extra="allow")
    email: str | None = Field(None)
    member: int | None = Field(None)


class GroupCreateMemberParams(BaseModel):
    """Parameters for Group.create_member()."""

    model_config = ConfigDict(extra="allow")
    email: str | None = Field(None)
    field_from: int | None = Field(None, alias="from")
    member: int | None = Field(None)
    rate: int | None = Field(None)
    source: str | None = Field(None)


class GroupCreatePhotoParams(BaseModel):
    """Parameters for Group.create_photo()."""

    model_config = ConfigDict(extra="allow")
    aid: str | None = Field(None)
    allow_spherical_photo: bool | None = Field(None)
    alt_text_custom: str | None = Field(None)
    android_key_hash: str | None = Field(None)
    application_id: str | None = Field(None)
    attempt: int | None = Field(None)
    audience_exp: bool | None = Field(None)
    backdated_time: datetime | None = Field(None)
    backdated_time_granularity: groupphotos_backdated_time_granularity_enum_param | None = Field(
        None
    )
    caption: str | None = Field(None)
    composer_session_id: str | None = Field(None)
    direct_share_status: int | None = Field(None)
    feed_targeting: dict[str, Any] | None = Field(None)
    filter_type: int | None = Field(None)
    full_res_is_coming_later: bool | None = Field(None)
    initial_view_heading_override_degrees: int | None = Field(None)
    initial_view_pitch_override_degrees: int | None = Field(None)
    initial_view_vertical_fov_override_degrees: int | None = Field(None)
    ios_bundle_id: str | None = Field(None)
    is_explicit_location: bool | None = Field(None)
    is_explicit_place: bool | None = Field(None)
    manual_privacy: bool | None = Field(None)
    message: str | None = Field(None)
    name: str | None = Field(None)
    no_story: bool | None = Field(None)
    offline_id: int | None = Field(None)
    og_action_type_id: str | None = Field(None)
    og_icon_id: str | None = Field(None)
    og_object_id: str | None = Field(None)
    og_phrase: str | None = Field(None)
    og_set_profile_badge: bool | None = Field(None)
    og_suggestion_mechanism: str | None = Field(None)
    place: dict[str, Any] | None = Field(None)
    privacy: str | None = Field(None)
    profile_id: int | None = Field(None)
    provenance_info: dict[str, Any] | None = Field(None)
    proxied_app_id: str | None = Field(None)
    published: bool | None = Field(None)
    qn: str | None = Field(None)
    spherical_metadata: dict[str, Any] | None = Field(None)
    sponsor_id: str | None = Field(None)
    sponsor_relationship: int | None = Field(None)
    tags: list[Any] | None = Field(None)
    target_id: int | None = Field(None)
    targeting: dict[str, Any] | None = Field(None)
    time_since_original_post: int | None = Field(None)
    uid: int | None = Field(None)
    unpublished_content_type: groupphotos_unpublished_content_type_enum_param | None = Field(None)
    url: str | None = Field(None)
    user_selected_tags: bool | None = Field(None)
    vault_image_id: str | None = Field(None)


class GroupGetPictureParams(BaseModel):
    """Parameters for Group.get_picture()."""

    model_config = ConfigDict(extra="allow")
    height: int | None = Field(None)
    redirect: bool | None = Field(None)
    type: grouppicture_type_enum_param | None = Field(None)
    width: int | None = Field(None)


class GroupGetVideosParams(BaseModel):
    """Parameters for Group.get_videos()."""

    model_config = ConfigDict(extra="allow")
    type: groupvideos_type_enum_param | None = Field(None)


class GroupCreateVideoParams(BaseModel):
    """Parameters for Group.create_video()."""

    model_config = ConfigDict(extra="allow")
    application_id: str | None = Field(None)
    asked_fun_fact_prompt_id: int | None = Field(None)
    audio_story_wave_animation_handle: str | None = Field(None)
    composer_entry_picker: str | None = Field(None)
    composer_entry_point: str | None = Field(None)
    composer_entry_time: int | None = Field(None)
    composer_session_events_log: str | None = Field(None)
    composer_session_id: str | None = Field(None)
    composer_source_surface: str | None = Field(None)
    composer_type: str | None = Field(None)
    container_type: groupvideos_container_type_enum_param | None = Field(None)
    content_category: groupvideos_content_category_enum_param | None = Field(None)
    creative_tools: str | None = Field(None)
    description: str | None = Field(None)
    embeddable: bool | None = Field(None)
    end_offset: int | None = Field(None)
    fbuploader_video_file_chunk: str | None = Field(None)
    file_size: int | None = Field(None)
    file_url: str | None = Field(None)
    fisheye_video_cropped: bool | None = Field(None)
    formatting: groupvideos_formatting_enum_param | None = Field(None)
    fov: int | None = Field(None)
    front_z_rotation: float | None = Field(None)
    fun_fact_prompt_id: str | None = Field(None)
    fun_fact_toastee_id: int | None = Field(None)
    guide: list[Any] | None = Field(None)
    guide_enabled: bool | None = Field(None)
    initial_heading: int | None = Field(None)
    initial_pitch: int | None = Field(None)
    instant_game_entry_point_data: str | None = Field(None)
    is_boost_intended: bool | None = Field(None)
    is_explicit_share: bool | None = Field(None)
    is_group_linking_post: bool | None = Field(None)
    is_partnership_ad: bool | None = Field(None)
    is_voice_clip: bool | None = Field(None)
    location_source_id: str | None = Field(None)
    manual_privacy: bool | None = Field(None)
    og_action_type_id: str | None = Field(None)
    og_icon_id: str | None = Field(None)
    og_object_id: str | None = Field(None)
    og_phrase: str | None = Field(None)
    og_suggestion_mechanism: str | None = Field(None)
    original_fov: int | None = Field(None)
    original_projection_type: groupvideos_original_projection_type_enum_param | None = Field(None)
    partnership_ad_ad_code: str | None = Field(None)
    publish_event_id: int | None = Field(None)
    published: bool | None = Field(None)
    referenced_sticker_id: str | None = Field(None)
    replace_video_id: str | None = Field(None)
    scheduled_publish_time: int | None = Field(None)
    slideshow_spec: dict[str, Any] | None = Field(None)
    source: str | None = Field(None)
    source_instagram_media_id: str | None = Field(None)
    spherical: bool | None = Field(None)
    start_offset: int | None = Field(None)
    swap_mode: groupvideos_swap_mode_enum_param | None = Field(None)
    text_format_metadata: str | None = Field(None)
    thumb: Any | None = Field(None)
    time_since_original_post: int | None = Field(None)
    title: str | None = Field(None)
    transcode_setting_properties: str | None = Field(None)
    unpublished_content_type: groupvideos_unpublished_content_type_enum_param | None = Field(None)
    upload_phase: groupvideos_upload_phase_enum_param | None = Field(None)
    upload_session_id: str | None = Field(None)
    upload_setting_properties: str | None = Field(None)
    video_file_chunk: str | None = Field(None)
    video_id_original: str | None = Field(None)
    video_start_time_ms: int | None = Field(None)
    waterfall_id: str | None = Field(None)


class PageUserMessageThreadLabelDeleteLabelParams(BaseModel):
    """Parameters for PageUserMessageThreadLabel.delete_label()."""

    model_config = ConfigDict(extra="allow")
    user: int = Field(...)


class PageUserMessageThreadLabelCreateLabelParams(BaseModel):
    """Parameters for PageUserMessageThreadLabel.create_label()."""

    model_config = ConfigDict(extra="allow")
    user: int = Field(...)


class ApplicationDeleteAccountsParams(BaseModel):
    """Parameters for Application.delete_accounts()."""

    model_config = ConfigDict(extra="allow")
    type: applicationaccounts_type_enum_param | None = Field(None)
    uid: int = Field(...)


class ApplicationGetAccountsParams(BaseModel):
    """Parameters for Application.get_accounts()."""

    model_config = ConfigDict(extra="allow")
    type: applicationaccounts_type_enum_param | None = Field(None)


class ApplicationCreateAccountParams(BaseModel):
    """Parameters for Application.create_account()."""

    model_config = ConfigDict(extra="allow")
    installed: bool | None = Field(None)
    minor: bool | None = Field(None)
    name: str | None = Field(None)
    owner_access_token: str | None = Field(None)
    permissions: list[Any] | None = Field(None)
    type: applicationaccounts_type_enum_param | None = Field(None)
    uid: int | None = Field(None)


class ApplicationCreateActivitieParams(BaseModel):
    """Parameters for Application.create_activitie()."""

    model_config = ConfigDict(extra="allow")
    advertiser_id: str | None = Field(None)
    advertiser_tracking_enabled: bool | None = Field(None)
    anon_id: str | None = Field(None)
    app_user_id: str | None = Field(None)
    application_tracking_enabled: bool | None = Field(None)
    attribution: str | None = Field(None)
    attribution_referrer: str | None = Field(None)
    attribution_sources: list[Any] | None = Field(None)
    auto_publish: bool | None = Field(None)
    bundle_id: str | None = Field(None)
    bundle_short_version: str | None = Field(None)
    bundle_version: str | None = Field(None)
    campaign_ids: str | None = Field(None)
    click_id: str | None = Field(None)
    consider_views: bool | None = Field(None)
    custom_events: list[Any] | None = Field(None)
    custom_events_file: Any | None = Field(None)
    data_processing_options: list[str] | None = Field(None)
    data_processing_options_country: int | None = Field(None)
    data_processing_options_state: int | None = Field(None)
    device_token: str | None = Field(None)
    event: applicationactivities_event_enum_param = Field(...)
    event_id: str | None = Field(None)
    extinfo: dict[str, Any] | None = Field(None)
    google_install_referrer: str | None = Field(None)
    include_dwell_data: bool | None = Field(None)
    include_video_data: bool | None = Field(None)
    install_id: str | None = Field(None)
    install_referrer: str | None = Field(None)
    install_timestamp: int | None = Field(None)
    installer_package: str | None = Field(None)
    is_fb: bool | None = Field(None)
    limited_data_use: bool | None = Field(None)
    meta_install_referrer: str | None = Field(None)
    migration_bundle: str | None = Field(None)
    operational_parameters: list[Any] | None = Field(None)
    page_id: int | None = Field(None)
    page_scoped_user_id: int | None = Field(None)
    receipt_data: str | None = Field(None)
    sdk_version: str | None = Field(None)
    ud: dict[str, Any] | None = Field(None)
    url_schemes: list[str] | None = Field(None)
    user_id: str | None = Field(None)
    user_id_type: applicationactivities_user_id_type_enum_param | None = Field(None)
    vendor_id: str | None = Field(None)
    windows_attribution_id: str | None = Field(None)


class ApplicationGetAdnetworkPlacementsParams(BaseModel):
    """Parameters for Application.get_adnetwork_placements()."""

    model_config = ConfigDict(extra="allow")
    request_id: str | None = Field(None)


class ApplicationGetAdNetworkanalyticsParams(BaseModel):
    """Parameters for Application.get_ad_networkanalytics()."""

    model_config = ConfigDict(extra="allow")
    aggregation_period: applicationadnetworkanalytics_aggregation_period_enum_param | None = Field(
        None
    )
    breakdowns: list[Any] | None = Field(None)
    filters: list[Any] | None = Field(None)
    limit: int | None = Field(None)
    metrics: list[Any] = Field(...)
    ordering_column: applicationadnetworkanalytics_ordering_column_enum_param | None = Field(None)
    ordering_type: applicationadnetworkanalytics_ordering_type_enum_param | None = Field(None)
    should_include_until: bool | None = Field(None)
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)


class ApplicationCreateAdNetworkanalyticParams(BaseModel):
    """Parameters for Application.create_ad_networkanalytic()."""

    model_config = ConfigDict(extra="allow")
    aggregation_period: applicationadnetworkanalytics_aggregation_period_enum_param | None = Field(
        None
    )
    breakdowns: list[Any] | None = Field(None)
    filters: list[Any] | None = Field(None)
    limit: int | None = Field(None)
    metrics: list[Any] = Field(...)
    ordering_column: applicationadnetworkanalytics_ordering_column_enum_param | None = Field(None)
    ordering_type: applicationadnetworkanalytics_ordering_type_enum_param | None = Field(None)
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)


class ApplicationGetAdnetworkanalyticsResultsParams(BaseModel):
    """Parameters for Application.get_adnetworkanalytics_results()."""

    model_config = ConfigDict(extra="allow")
    query_ids: list[str] | None = Field(None)


class ApplicationGetAemAttributionParams(BaseModel):
    """Parameters for Application.get_aem_attribution()."""

    model_config = ConfigDict(extra="allow")
    advertiser_ids: list[str] | None = Field(None)
    fb_content_data: str | None = Field(None)


class ApplicationGetAemConversionConfigsParams(BaseModel):
    """Parameters for Application.get_aem_conversion_configs()."""

    model_config = ConfigDict(extra="allow")
    advertiser_ids: list[str] | None = Field(None)


class ApplicationGetAemConversionFilterParams(BaseModel):
    """Parameters for Application.get_aem_conversion_filter()."""

    model_config = ConfigDict(extra="allow")
    catalog_id: str | None = Field(None)
    fb_content_ids: str | None = Field(None)


class ApplicationCreateAemConversionParams(BaseModel):
    """Parameters for Application.create_aem_conversion()."""

    model_config = ConfigDict(extra="allow")
    aem_conversions: list[Any] = Field(...)


class ApplicationCreateAemSkanReadineParams(BaseModel):
    """Parameters for Application.create_aem_skan_readine()."""

    model_config = ConfigDict(extra="allow")
    app_id: int = Field(...)
    is_aem_ready: bool | None = Field(None)
    is_app_aem_install_ready: bool | None = Field(None)
    is_app_aem_ready: bool | None = Field(None)
    is_skan_ready: bool | None = Field(None)
    message: str | None = Field(None)


class ApplicationCreateAggregateRevenueParams(BaseModel):
    """Parameters for Application.create_aggregate_revenue()."""

    model_config = ConfigDict(extra="allow")
    ecpms: list[str] | None = Field(None)
    query_ids: list[str] | None = Field(None)
    request_id: str | None = Field(None)
    sync_api: bool | None = Field(None)


class ApplicationCreateAppIndexingParams(BaseModel):
    """Parameters for Application.create_app_indexing()."""

    model_config = ConfigDict(extra="allow")
    app_version: str = Field(...)
    device_session_id: str | None = Field(None)
    extra_info: str | None = Field(None)
    platform: applicationapp_indexing_platform_enum_param = Field(...)
    request_type: applicationapp_indexing_request_type_enum_param | None = Field(None)
    tree: dict[str, Any] = Field(...)


class ApplicationCreateAppIndexingSessionParams(BaseModel):
    """Parameters for Application.create_app_indexing_session()."""

    model_config = ConfigDict(extra="allow")
    device_session_id: str = Field(...)
    extinfo: str | None = Field(None)


class ApplicationGetAppInstalledGroupsParams(BaseModel):
    """Parameters for Application.get_app_installed_groups()."""

    model_config = ConfigDict(extra="allow")
    group_id: str | None = Field(None)


class ApplicationCreateAppPushDeviceTokenParams(BaseModel):
    """Parameters for Application.create_app_push_device_token()."""

    model_config = ConfigDict(extra="allow")
    device_id: str = Field(...)
    device_token: str = Field(...)
    platform: applicationapp_push_device_token_platform_enum_param | None = Field(None)


class ApplicationCreateAssetParams(BaseModel):
    """Parameters for Application.create_asset()."""

    model_config = ConfigDict(extra="allow")
    asset: Any = Field(...)
    comment: str | None = Field(None)
    type: str = Field(...)


class ApplicationGetAuthorizedAdaccountsParams(BaseModel):
    """Parameters for Application.get_authorized_adaccounts()."""

    model_config = ConfigDict(extra="allow")
    business: str | None = Field(None)


class ApplicationGetButtonAutoDetectionDeviceSelectionParams(BaseModel):
    """Parameters for Application.get_button_auto_detection_device_selection()."""

    model_config = ConfigDict(extra="allow")
    device_id: str | None = Field(None)


class ApplicationCreateCodelessEventMappingParams(BaseModel):
    """Parameters for Application.create_codeless_event_mapping()."""

    model_config = ConfigDict(extra="allow")
    mappings: list[Any] = Field(...)
    mutation_method: applicationcodeless_event_mappings_mutation_method_enum_param = Field(...)
    platform: applicationcodeless_event_mappings_platform_enum_param = Field(...)
    post_method: applicationcodeless_event_mappings_post_method_enum_param | None = Field(None)


class ApplicationGetDaChecksParams(BaseModel):
    """Parameters for Application.get_da_checks()."""

    model_config = ConfigDict(extra="allow")
    checks: list[str] | None = Field(None)
    connection_method: applicationda_checks_connection_method_enum_param | None = Field(None)


class ApplicationCreateDomainReportParams(BaseModel):
    """Parameters for Application.create_domain_report()."""

    model_config = ConfigDict(extra="allow")
    tracking_domains: list[str] = Field(...)


class ApplicationGetIapPurchasesParams(BaseModel):
    """Parameters for Application.get_iap_purchases()."""

    model_config = ConfigDict(extra="allow")
    order_id: str = Field(...)


class ApplicationGetMessageTemplatesParams(BaseModel):
    """Parameters for Application.get_message_templates()."""

    model_config = ConfigDict(extra="allow")
    template_id: str | None = Field(None)


class ApplicationCreateMmpAuditingParams(BaseModel):
    """Parameters for Application.create_mmp_auditing()."""

    model_config = ConfigDict(extra="allow")
    advertiser_id: str | None = Field(None)
    attribution: str | None = Field(None)
    attribution_method: str | None = Field(None)
    attribution_model: str | None = Field(None)
    attribution_referrer: str | None = Field(None)
    auditing_token: str | None = Field(None)
    click_attr_window: int | None = Field(None)
    custom_events: list[Any] | None = Field(None)
    decline_reason: str | None = Field(None)
    device_os: str | None = Field(None)
    engagement_type: str | None = Field(None)
    event: str = Field(...)
    event_id: str | None = Field(None)
    event_reported_time: int | None = Field(None)
    fb_ad_id: int | None = Field(None)
    fb_adgroup_id: int | None = Field(None)
    fb_click_time: int | None = Field(None)
    fb_view_time: int | None = Field(None)
    google_install_referrer: str | None = Field(None)
    inactivity_window_hours: int | None = Field(None)
    install_id: str | None = Field(None)
    is_fb: bool = Field(...)
    meta_install_referrer: str | None = Field(None)
    used_install_referrer: bool | None = Field(None)
    view_attr_window: int | None = Field(None)


class ApplicationGetMobileSdkGkParams(BaseModel):
    """Parameters for Application.get_mobile_sdk_gk()."""

    model_config = ConfigDict(extra="allow")
    device_id: str | None = Field(None)
    extinfo: dict[str, Any] | None = Field(None)
    os_version: str | None = Field(None)
    platform: applicationmobile_sdk_gk_platform_enum_param = Field(...)
    sdk_version: str = Field(...)


class ApplicationCreateMonetizedDigitalStoreObjectParams(BaseModel):
    """Parameters for Application.create_monetized_digital_store_object()."""

    model_config = ConfigDict(extra="allow")
    content_id: str = Field(...)
    store: str = Field(...)


class ApplicationCreateOccludespopupParams(BaseModel):
    """Parameters for Application.create_occludespopup()."""

    model_config = ConfigDict(extra="allow")
    flash: bool | None = Field(None)
    unity: bool | None = Field(None)


class ApplicationGetPermissionsParams(BaseModel):
    """Parameters for Application.get_permissions()."""

    model_config = ConfigDict(extra="allow")
    android_key_hash: str | None = Field(None)
    ios_bundle_id: str | None = Field(None)
    permission: list[Any] | None = Field(None)
    proxied_app_id: int | None = Field(None)
    status: list[Any] | None = Field(None)


class ApplicationGetProductSParams(BaseModel):
    """Parameters for Application.get_product_s()."""

    model_config = ConfigDict(extra="allow")
    product_ids: list[str] | None = Field(None)


class ApplicationGetSgwDatasetStatusParams(BaseModel):
    """Parameters for Application.get_sgw_dataset_status()."""

    model_config = ConfigDict(extra="allow")
    dataset_id: int = Field(...)


class ApplicationGetSgwInstallDeferralLinkParams(BaseModel):
    """Parameters for Application.get_sgw_install_deferral_link()."""

    model_config = ConfigDict(extra="allow")
    client_ip: str | None = Field(None)
    dataset_id: int = Field(...)


class ApplicationCreateSubscribedDomainParams(BaseModel):
    """Parameters for Application.create_subscribed_domain()."""

    model_config = ConfigDict(extra="allow")
    subscribe: list[str] | None = Field(None)
    unsubscribe: list[str] | None = Field(None)


class ApplicationCreateSubscribedDomainsPhishingParams(BaseModel):
    """Parameters for Application.create_subscribed_domains_phishing()."""

    model_config = ConfigDict(extra="allow")
    subscribe: list[str] | None = Field(None)
    unsubscribe: list[str] | None = Field(None)


class ApplicationDeleteSubscriptionsParams(BaseModel):
    """Parameters for Application.delete_subscriptions()."""

    model_config = ConfigDict(extra="allow")
    fields: list[str] | None = Field(None)
    object: str | None = Field(None)


class ApplicationCreateSubscriptionParams(BaseModel):
    """Parameters for Application.create_subscription()."""

    model_config = ConfigDict(extra="allow")
    callback_url: str | None = Field(None)
    fields: list[str] | None = Field(None)
    include_values: bool | None = Field(None)
    object: str = Field(...)
    verify_token: str | None = Field(None)


class ApplicationCreateUploadParams(BaseModel):
    """Parameters for Application.create_upload()."""

    model_config = ConfigDict(extra="allow")
    file_length: int | None = Field(None)
    file_name: dict[str, Any] | None = Field(None)
    file_type: dict[str, Any] | None = Field(None)
    session_type: applicationuploads_session_type_enum_param | None = Field(None)


class ApplicationCreateWhatsappBusinessSolutionParams(BaseModel):
    """Parameters for Application.create_whatsapp_business_solution()."""

    model_config = ConfigDict(extra="allow")
    owner_permissions: list[Any] = Field(...)
    partner_app_id: str = Field(...)
    partner_permissions: list[Any] = Field(...)
    solution_name: str = Field(...)


class ApplicationGetWhatsappBusinessSolutionsParams(BaseModel):
    """Parameters for Application.get_whatsapp_business_solutions()."""

    model_config = ConfigDict(extra="allow")
    role: applicationwhatsapp_business_solutions_role_enum_param | None = Field(None)


class IGUserForIGOnlyAPIGetBusinessMessagingFeatureStatusParams(BaseModel):
    """Parameters for IGUserForIGOnlyAPI.get_business_messaging_feature_status()."""

    model_config = ConfigDict(extra="allow")
    feature: str = Field(...)


class IGUserForIGOnlyAPIGetContentPublishingLimitParams(BaseModel):
    """Parameters for IGUserForIGOnlyAPI.get_content_publishing_limit()."""

    model_config = ConfigDict(extra="allow")
    since: datetime | None = Field(None)


class IGUserForIGOnlyAPIGetConversationsParams(BaseModel):
    """Parameters for IGUserForIGOnlyAPI.get_conversations()."""

    model_config = ConfigDict(extra="allow")
    folder: str | None = Field(None)
    platform: userconversations_platform_enum_param | None = Field(None)
    tags: list[str] | None = Field(None)
    user_id: str | None = Field(None)


class IGUserForIGOnlyAPIGetInsightsParams(BaseModel):
    """Parameters for IGUserForIGOnlyAPI.get_insights()."""

    model_config = ConfigDict(extra="allow")
    breakdown: list[Any] | None = Field(None)
    metric: list[Any] = Field(...)
    metric_type: userinsights_metric_type_enum_param | None = Field(None)
    period: list[Any] = Field(...)
    since: datetime | None = Field(None)
    timeframe: userinsights_timeframe_enum_param | None = Field(None)
    until: datetime | None = Field(None)


class IGUserForIGOnlyAPIGetMediaParams(BaseModel):
    """Parameters for IGUserForIGOnlyAPI.get_media()."""

    model_config = ConfigDict(extra="allow")
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)


class IGUserForIGOnlyAPICreateMediaParams(BaseModel):
    """Parameters for IGUserForIGOnlyAPI.create_media()."""

    model_config = ConfigDict(extra="allow")
    alt_text: str | None = Field(None)
    audio_name: str | None = Field(None)
    caption: str | None = Field(None)
    children: list[str] | None = Field(None)
    collaborators: list[str] | None = Field(None)
    cover_url: str | None = Field(None)
    image_url: str | None = Field(None)
    is_carousel_item: bool | None = Field(None)
    location_id: str | None = Field(None)
    media_type: str | None = Field(None)
    product_tags: list[Any] | None = Field(None)
    share_to_feed: bool | None = Field(None)
    thumb_offset: str | None = Field(None)
    upload_type: str | None = Field(None)
    user_tags: list[Any] | None = Field(None)
    video_url: str | None = Field(None)


class IGUserForIGOnlyAPICreateMediapublishParams(BaseModel):
    """Parameters for IGUserForIGOnlyAPI.create_mediapublish()."""

    model_config = ConfigDict(extra="allow")
    creation_id: int = Field(...)


class IGUserForIGOnlyAPICreateMentionParams(BaseModel):
    """Parameters for IGUserForIGOnlyAPI.create_mention()."""

    model_config = ConfigDict(extra="allow")
    comment_id: str | None = Field(None)
    media_id: str = Field(...)
    message: str = Field(...)


class IGUserForIGOnlyAPICreateMessageattachmentParams(BaseModel):
    """Parameters for IGUserForIGOnlyAPI.create_messageattachment()."""

    model_config = ConfigDict(extra="allow")
    message: dict[str, Any] = Field(...)


class IGUserForIGOnlyAPICreateMessageParams(BaseModel):
    """Parameters for IGUserForIGOnlyAPI.create_message()."""

    model_config = ConfigDict(extra="allow")
    message: dict[str, Any] | None = Field(None)
    messaging_type: iggraphusermessages_messaging_type_enum_param | None = Field(None)
    payload: str | None = Field(None)
    recipient: dict[str, Any] | None = Field(None)
    sender_action: iggraphusermessages_sender_action_enum_param | None = Field(None)
    tag: dict[str, Any] | None = Field(None)
    thread_control: dict[str, Any] | None = Field(None)


class IGUserForIGOnlyAPIDeleteMessengerProfileParams(BaseModel):
    """Parameters for IGUserForIGOnlyAPI.delete_messenger_profile()."""

    model_config = ConfigDict(extra="allow")
    fields: list[Any] = Field(...)


class IGUserForIGOnlyAPICreateMessengerProfileParams(BaseModel):
    """Parameters for IGUserForIGOnlyAPI.create_messenger_profile()."""

    model_config = ConfigDict(extra="allow")
    ice_breakers: list[Any] | None = Field(None)
    persistent_menu: list[Any] | None = Field(None)


class IGUserForIGOnlyAPICreateSubscribedAppParams(BaseModel):
    """Parameters for IGUserForIGOnlyAPI.create_subscribed_app()."""

    model_config = ConfigDict(extra="allow")
    subscribed_fields: list[Any] = Field(...)


class IGUserForIGOnlyAPIDeleteWelcomeMessageFlowsParams(BaseModel):
    """Parameters for IGUserForIGOnlyAPI.delete_welcome_message_flows()."""

    model_config = ConfigDict(extra="allow")
    flow_id: str | None = Field(None)


class IGUserForIGOnlyAPIGetWelcomeMessageFlowsParams(BaseModel):
    """Parameters for IGUserForIGOnlyAPI.get_welcome_message_flows()."""

    model_config = ConfigDict(extra="allow")
    app_id: str | None = Field(None)
    flow_id: str | None = Field(None)


class IGUserForIGOnlyAPICreateWelcomeMessageFlowParams(BaseModel):
    """Parameters for IGUserForIGOnlyAPI.create_welcome_message_flow()."""

    model_config = ConfigDict(extra="allow")
    eligible_platforms: list[Any] | None = Field(None)
    flow_id: str | None = Field(None)
    name: str | None = Field(None)
    welcome_message_flow: list[Any] | None = Field(None)


class LinkCreateCommentParams(BaseModel):
    """Parameters for Link.create_comment()."""

    model_config = ConfigDict(extra="allow")
    attachment_id: str | None = Field(None)
    attachment_share_url: str | None = Field(None)
    attachment_url: str | None = Field(None)
    comment_privacy_value: linkcomments_comment_privacy_value_enum_param | None = Field(None)
    facepile_mentioned_ids: list[str] | None = Field(None)
    feedback_source: str | None = Field(None)
    is_offline: bool | None = Field(None)
    message: str | None = Field(None)
    nectar_module: str | None = Field(None)
    object_id: str | None = Field(None)
    parent_comment_id: dict[str, Any] | None = Field(None)
    text: str | None = Field(None)
    tracking: str | None = Field(None)


class StatusCreateLikeParams(BaseModel):
    """Parameters for Status.create_like()."""

    model_config = ConfigDict(extra="allow")
    feedback_source: str | None = Field(None)
    nectar_module: str | None = Field(None)
    notify: bool | None = Field(None)
    tracking: str | None = Field(None)


class SystemUserGetAssignedBusinessAssetGroupsParams(BaseModel):
    """Parameters for SystemUser.get_assigned_business_asset_groups()."""

    model_config = ConfigDict(extra="allow")
    contained_asset_id: str | None = Field(None)


class SystemUserGetAssignedPagesParams(BaseModel):
    """Parameters for SystemUser.get_assigned_pages()."""

    model_config = ConfigDict(extra="allow")
    pages: list[Any] | None = Field(None)


class CustomConversionGetStatsParams(BaseModel):
    """Parameters for CustomConversion.get_stats()."""

    model_config = ConfigDict(extra="allow")
    aggregation: customconversionstats_aggregation_enum_param | None = Field(None)
    end_time: datetime | None = Field(None)
    start_time: datetime | None = Field(None)


class PageCreateAbTestParams(BaseModel):
    """Parameters for Page.create_ab_test()."""

    model_config = ConfigDict(extra="allow")
    control_video_id: str = Field(...)
    description: str = Field(...)
    duration: int = Field(...)
    experiment_video_ids: list[str] = Field(...)
    name: str = Field(...)
    optimization_goal: pageab_tests_optimization_goal_enum_param = Field(...)
    scheduled_experiment_timestamp: int | None = Field(None)


class PageCreateAcknowledgeOrderParams(BaseModel):
    """Parameters for Page.create_acknowledge_order()."""

    model_config = ConfigDict(extra="allow")
    idempotency_key: str = Field(...)
    orders: list[Any] = Field(...)


class PageGetAdsPostsParams(BaseModel):
    """Parameters for Page.get_ads_posts()."""

    model_config = ConfigDict(extra="allow")
    exclude_dynamic_ads: bool | None = Field(None)
    include_inline_create: bool | None = Field(None)
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)


class PageDeleteAgenciesParams(BaseModel):
    """Parameters for Page.delete_agencies()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)


class PageCreateAgencieParams(BaseModel):
    """Parameters for Page.create_agencie()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)
    permitted_tasks: list[Any] | None = Field(None)


class PageDeleteAssignedUsersParams(BaseModel):
    """Parameters for Page.delete_assigned_users()."""

    model_config = ConfigDict(extra="allow")
    user: int = Field(...)


class PageGetAssignedUsersParams(BaseModel):
    """Parameters for Page.get_assigned_users()."""

    model_config = ConfigDict(extra="allow")
    business: str = Field(...)


class PageCreateAssignedUserParams(BaseModel):
    """Parameters for Page.create_assigned_user()."""

    model_config = ConfigDict(extra="allow")
    tasks: list[Any] | None = Field(None)
    user: int = Field(...)


class PageDeleteBlockedParams(BaseModel):
    """Parameters for Page.delete_blocked()."""

    model_config = ConfigDict(extra="allow")
    asid: str | None = Field(None)
    psid: int | None = Field(None)
    uid: int | None = Field(None)
    user: int | None = Field(None)


class PageGetBlockedParams(BaseModel):
    """Parameters for Page.get_blocked()."""

    model_config = ConfigDict(extra="allow")
    uid: int | None = Field(None)
    user: int | None = Field(None)


class PageCreateBlockedParams(BaseModel):
    """Parameters for Page.create_blocked()."""

    model_config = ConfigDict(extra="allow")
    asid: list[str] | None = Field(None)
    psid: list[int] | None = Field(None)
    uid: list[str] | None = Field(None)
    user: list[str] | None = Field(None)


class PageCreateBusinessDataParams(BaseModel):
    """Parameters for Page.create_business_data()."""

    model_config = ConfigDict(extra="allow")
    data: list[str] = Field(...)
    partner_agent: str = Field(...)
    processing_type: str | None = Field(None)


class PageGetBusinessprojectsParams(BaseModel):
    """Parameters for Page.get_businessprojects()."""

    model_config = ConfigDict(extra="allow")
    business: str | None = Field(None)


class PageCreateCallParams(BaseModel):
    """Parameters for Page.create_call()."""

    model_config = ConfigDict(extra="allow")
    action: pagecalls_action_enum_param = Field(...)
    call_id: str | None = Field(None)
    platform: pagecalls_platform_enum_param | None = Field(None)
    session: dict[str, Any] | None = Field(None)
    to: str | None = Field(None)


class PageCreateCanvasElementParams(BaseModel):
    """Parameters for Page.create_canvas_element()."""

    model_config = ConfigDict(extra="allow")
    canvas_button: dict[str, Any] | None = Field(None)
    canvas_carousel: dict[str, Any] | None = Field(None)
    canvas_footer: dict[str, Any] | None = Field(None)
    canvas_header: dict[str, Any] | None = Field(None)
    canvas_lead_form: dict[str, Any] | None = Field(None)
    canvas_photo: dict[str, Any] | None = Field(None)
    canvas_product_list: dict[str, Any] | None = Field(None)
    canvas_product_set: dict[str, Any] | None = Field(None)
    canvas_store_locator: dict[str, Any] | None = Field(None)
    canvas_template_video: dict[str, Any] | None = Field(None)
    canvas_text: dict[str, Any] | None = Field(None)
    canvas_video: dict[str, Any] | None = Field(None)


class PageGetCanvasesParams(BaseModel):
    """Parameters for Page.get_canvases()."""

    model_config = ConfigDict(extra="allow")
    is_hidden: bool | None = Field(None)
    is_published: bool | None = Field(None)


class PageCreateCanvaseParams(BaseModel):
    """Parameters for Page.create_canvase()."""

    model_config = ConfigDict(extra="allow")
    background_color: str | None = Field(None)
    body_element_ids: list[str] | None = Field(None)
    enable_swipe_to_open: bool | None = Field(None)
    is_hidden: bool | None = Field(None)
    is_published: bool | None = Field(None)
    name: str | None = Field(None)
    source_template_id: str | None = Field(None)


class PageGetCommerceOrdersParams(BaseModel):
    """Parameters for Page.get_commerce_orders()."""

    model_config = ConfigDict(extra="allow")
    filters: list[Any] | None = Field(None)
    state: list[Any] | None = Field(None)
    updated_after: datetime | None = Field(None)
    updated_before: datetime | None = Field(None)


class PageGetCommercePayoutsParams(BaseModel):
    """Parameters for Page.get_commerce_payouts()."""

    model_config = ConfigDict(extra="allow")
    end_time: datetime | None = Field(None)
    start_time: datetime | None = Field(None)


class PageGetCommerceTransactionsParams(BaseModel):
    """Parameters for Page.get_commerce_transactions()."""

    model_config = ConfigDict(extra="allow")
    end_time: datetime | None = Field(None)
    payout_reference_id: str | None = Field(None)
    start_time: datetime | None = Field(None)


class PageGetConversationsParams(BaseModel):
    """Parameters for Page.get_conversations()."""

    model_config = ConfigDict(extra="allow")
    folder: str | None = Field(None)
    platform: pageconversations_platform_enum_param | None = Field(None)
    tags: list[str] | None = Field(None)
    user_id: str | None = Field(None)


class PageCreateCopyrightManualClaimParams(BaseModel):
    """Parameters for Page.create_copyright_manual_claim()."""

    model_config = ConfigDict(extra="allow")
    action: pagecopyright_manual_claims_action_enum_param | None = Field(None)
    action_reason: pagecopyright_manual_claims_action_reason_enum_param | None = Field(None)
    countries: dict[str, Any] | None = Field(None)
    match_content_type: pagecopyright_manual_claims_match_content_type_enum_param = Field(...)
    matched_asset_id: str = Field(...)
    reference_asset_id: str = Field(...)
    selected_segments: list[Any] | None = Field(None)


class PageCreateCustomLabelParams(BaseModel):
    """Parameters for Page.create_custom_label()."""

    model_config = ConfigDict(extra="allow")
    name: str | None = Field(None)
    page_label_name: str = Field(...)


class PageDeleteCustomUserSettingsParams(BaseModel):
    """Parameters for Page.delete_custom_user_settings()."""

    model_config = ConfigDict(extra="allow")
    params: list[Any] = Field(...)
    psid: str = Field(...)


class PageGetCustomUserSettingsParams(BaseModel):
    """Parameters for Page.get_custom_user_settings()."""

    model_config = ConfigDict(extra="allow")
    psid: str = Field(...)


class PageCreateCustomUserSettingParams(BaseModel):
    """Parameters for Page.create_custom_user_setting()."""

    model_config = ConfigDict(extra="allow")
    persistent_menu: list[Any] | None = Field(None)
    psid: str = Field(...)


class PageCreateDatasetParams(BaseModel):
    """Parameters for Page.create_dataset()."""

    model_config = ConfigDict(extra="allow")
    dataset_name: str | None = Field(None)


class PageGetEventsParams(BaseModel):
    """Parameters for Page.get_events()."""

    model_config = ConfigDict(extra="allow")
    event_state_filter: list[Any] | None = Field(None)
    include_canceled: bool | None = Field(None)
    time_filter: pageevents_time_filter_enum_param | None = Field(None)
    type: pageevents_type_enum_param | None = Field(None)


class PageCreateExtendThreadControlParams(BaseModel):
    """Parameters for Page.create_extend_thread_control()."""

    model_config = ConfigDict(extra="allow")
    duration: int | None = Field(None)
    recipient: dict[str, Any] = Field(...)


class PageGetFeedParams(BaseModel):
    """Parameters for Page.get_feed()."""

    model_config = ConfigDict(extra="allow")
    include_hidden: bool | None = Field(None)
    limit: int | None = Field(None)
    show_expired: bool | None = Field(None)
    field_with: pagefeed_with_enum_param | None = Field(None, alias="with")


class PageCreateFeedParams(BaseModel):
    """Parameters for Page.create_feed()."""

    model_config = ConfigDict(extra="allow")
    actions: dict[str, Any] | None = Field(None)
    album_id: str | None = Field(None)
    android_key_hash: str | None = Field(None)
    application_id: str | None = Field(None)
    asked_fun_fact_prompt_id: int | None = Field(None)
    asset3d_id: str | None = Field(None)
    associated_id: str | None = Field(None)
    attach_place_suggestion: bool | None = Field(None)
    attached_media: list[Any] | None = Field(None)
    audience_exp: bool | None = Field(None)
    backdated_time: datetime | None = Field(None)
    backdated_time_granularity: pagefeed_backdated_time_granularity_enum_param | None = Field(None)
    breaking_news: bool | None = Field(None)
    breaking_news_expiration: int | None = Field(None)
    call_to_action: dict[str, Any] | None = Field(None)
    caption: str | None = Field(None)
    child_attachments: list[Any] | None = Field(None)
    client_mutation_id: str | None = Field(None)
    composer_entry_picker: str | None = Field(None)
    composer_entry_point: str | None = Field(None)
    composer_entry_time: int | None = Field(None)
    composer_session_events_log: str | None = Field(None)
    composer_session_id: str | None = Field(None)
    composer_source_surface: str | None = Field(None)
    composer_type: str | None = Field(None)
    connection_class: str | None = Field(None)
    content_attachment: str | None = Field(None)
    coordinates: dict[str, Any] | None = Field(None)
    cta_link: str | None = Field(None)
    cta_type: str | None = Field(None)
    description: str | None = Field(None)
    direct_share_status: int | None = Field(None)
    enforce_link_ownership: bool | None = Field(None)
    expanded_height: int | None = Field(None)
    expanded_width: int | None = Field(None)
    feed_targeting: dict[str, Any] | None = Field(None)
    formatting: pagefeed_formatting_enum_param | None = Field(None)
    fun_fact_prompt_id: str | None = Field(None)
    fun_fact_toastee_id: int | None = Field(None)
    height: int | None = Field(None)
    home_checkin_city_id: dict[str, Any] | None = Field(None)
    image_crops: dict[str, Any] | None = Field(None)
    implicit_with_tags: list[int] | None = Field(None)
    instant_game_entry_point_data: str | None = Field(None)
    ios_bundle_id: str | None = Field(None)
    is_backout_draft: bool | None = Field(None)
    is_boost_intended: bool | None = Field(None)
    is_explicit_location: bool | None = Field(None)
    is_explicit_share: bool | None = Field(None)
    is_group_linking_post: bool | None = Field(None)
    is_photo_container: bool | None = Field(None)
    link: str | None = Field(None)
    location_source_id: str | None = Field(None)
    manual_privacy: bool | None = Field(None)
    message: str | None = Field(None)
    multi_share_end_card: bool | None = Field(None)
    multi_share_optimized: bool | None = Field(None)
    name: str | None = Field(None)
    nectar_module: str | None = Field(None)
    object_attachment: str | None = Field(None)
    og_action_type_id: str | None = Field(None)
    og_hide_object_attachment: bool | None = Field(None)
    og_icon_id: str | None = Field(None)
    og_object_id: str | None = Field(None)
    og_phrase: str | None = Field(None)
    og_set_profile_badge: bool | None = Field(None)
    og_suggestion_mechanism: str | None = Field(None)
    page_recommendation: str | None = Field(None)
    picture: str | None = Field(None)
    place: dict[str, Any] | None = Field(None)
    place_attachment_setting: pagefeed_place_attachment_setting_enum_param | None = Field(None)
    place_list: str | None = Field(None)
    place_list_data: Any | None = Field(None)
    post_surfaces_blacklist: list[Any] | None = Field(None)
    posting_to_redspace: pagefeed_posting_to_redspace_enum_param | None = Field(None)
    privacy: str | None = Field(None)
    prompt_id: str | None = Field(None)
    prompt_tracking_string: str | None = Field(None)
    properties: dict[str, Any] | None = Field(None)
    proxied_app_id: str | None = Field(None)
    publish_event_id: int | None = Field(None)
    published: bool | None = Field(None)
    quote: str | None = Field(None)
    ref: list[str] | None = Field(None)
    referenceable_image_ids: list[str] | None = Field(None)
    referral_id: str | None = Field(None)
    scheduled_publish_time: datetime | None = Field(None)
    source: str | None = Field(None)
    sponsor_id: str | None = Field(None)
    sponsor_relationship: int | None = Field(None)
    suggested_place_id: dict[str, Any] | None = Field(None)
    tags: list[int] | None = Field(None)
    target_surface: pagefeed_target_surface_enum_param | None = Field(None)
    targeting: dict[str, Any] | None = Field(None)
    text_format_metadata: str | None = Field(None)
    text_format_preset_id: str | None = Field(None)
    text_only_place: str | None = Field(None)
    thumbnail: Any | None = Field(None)
    time_since_original_post: int | None = Field(None)
    title: str | None = Field(None)
    tracking_info: str | None = Field(None)
    unpublished_content_type: pagefeed_unpublished_content_type_enum_param | None = Field(None)
    user_selected_tags: bool | None = Field(None)
    video_start_time_ms: int | None = Field(None)
    viewer_coordinates: dict[str, Any] | None = Field(None)
    width: int | None = Field(None)


class PageCreateImageCopyrightParams(BaseModel):
    """Parameters for Page.create_image_copyright()."""

    model_config = ConfigDict(extra="allow")
    artist: str | None = Field(None)
    attribution_link: str | None = Field(None)
    creator: str | None = Field(None)
    custom_id: str | None = Field(None)
    description: str | None = Field(None)
    filename: str = Field(...)
    geo_ownership: list[Any] = Field(...)
    original_content_creation_date: int | None = Field(None)
    reference_photo: str = Field(...)
    title: str | None = Field(None)


class PageGetInsightsParams(BaseModel):
    """Parameters for Page.get_insights()."""

    model_config = ConfigDict(extra="allow")
    breakdown: list[Any] | None = Field(None)
    date_preset: pageinsights_date_preset_enum_param | None = Field(None)
    metric: list[Any] | None = Field(None)
    period: pageinsights_period_enum_param | None = Field(None)
    show_description_from_api_doc: bool | None = Field(None)
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)


class PageCreateLeadgenFormParams(BaseModel):
    """Parameters for Page.create_leadgen_form()."""

    model_config = ConfigDict(extra="allow")
    allow_organic_lead_retrieval: bool | None = Field(None)
    block_display_for_non_targeted_viewer: bool | None = Field(None)
    context_card: dict[str, Any] | None = Field(None)
    cover_photo: Any | None = Field(None)
    custom_disclaimer: dict[str, Any] | None = Field(None)
    follow_up_action_url: str | None = Field(None)
    is_for_canvas: bool | None = Field(None)
    is_optimized_for_quality: bool | None = Field(None)
    locale: pageleadgen_forms_locale_enum_param | None = Field(None)
    name: str = Field(...)
    privacy_policy: dict[str, Any] | None = Field(None)
    question_page_custom_headline: str | None = Field(None)
    questions: list[Any] = Field(...)
    thank_you_page: dict[str, Any] | None = Field(None)
    tracking_parameters: dict[str, Any] | None = Field(None)
    upload_gated_file: Any | None = Field(None)


class PageGetLikesParams(BaseModel):
    """Parameters for Page.get_likes()."""

    model_config = ConfigDict(extra="allow")
    target_id: str | None = Field(None)


class PageGetLiveVideosParams(BaseModel):
    """Parameters for Page.get_live_videos()."""

    model_config = ConfigDict(extra="allow")
    broadcast_status: list[Any] | None = Field(None)
    source: pagelive_videos_source_enum_param | None = Field(None)


class PageCreateLiveVideoParams(BaseModel):
    """Parameters for Page.create_live_video()."""

    model_config = ConfigDict(extra="allow")
    content_tags: list[str] | None = Field(None)
    crossposting_actions: list[Any] | None = Field(None)
    custom_labels: list[str] | None = Field(None)
    description: str | None = Field(None)
    enable_backup_ingest: bool | None = Field(None)
    encoding_settings: str | None = Field(None)
    event_params: dict[str, Any] | None = Field(None)
    fisheye_video_cropped: bool | None = Field(None)
    front_z_rotation: float | None = Field(None)
    game_show: dict[str, Any] | None = Field(None)
    is_audio_only: bool | None = Field(None)
    is_spherical: bool | None = Field(None)
    original_fov: int | None = Field(None)
    privacy: str | None = Field(None)
    projection: pagelive_videos_projection_enum_param | None = Field(None)
    published: bool | None = Field(None)
    schedule_custom_profile_image: Any | None = Field(None)
    spatial_audio_format: pagelive_videos_spatial_audio_format_enum_param | None = Field(None)
    status: pagelive_videos_status_enum_param | None = Field(None)
    stereoscopic_mode: pagelive_videos_stereoscopic_mode_enum_param | None = Field(None)
    stop_on_delete_stream: bool | None = Field(None)
    stream_type: pagelive_videos_stream_type_enum_param | None = Field(None)
    targeting: dict[str, Any] | None = Field(None)
    title: str | None = Field(None)


class PageDeleteLocationsParams(BaseModel):
    """Parameters for Page.delete_locations()."""

    model_config = ConfigDict(extra="allow")
    location_page_ids: list[str] = Field(...)
    store_numbers: list[Any] = Field(...)


class PageCreateLocationParams(BaseModel):
    """Parameters for Page.create_location()."""

    model_config = ConfigDict(extra="allow")
    always_open: bool | None = Field(None)
    delivery_and_pickup_option_info: list[str] | None = Field(None)
    differently_open_offerings: dict[str, Any] | None = Field(None)
    hours: dict[str, Any] | None = Field(None)
    ignore_warnings: bool | None = Field(None)
    location: dict[str, Any] | None = Field(None)
    location_page_id: str | None = Field(None)
    old_store_number: int | None = Field(None)
    page_username: str | None = Field(None)
    permanently_closed: bool | None = Field(None)
    phone: str | None = Field(None)
    pickup_options: list[Any] | None = Field(None)
    place_topics: list[str] | None = Field(None)
    price_range: str | None = Field(None)
    store_code: str | None = Field(None)
    store_location_descriptor: str | None = Field(None)
    store_name: str | None = Field(None)
    store_number: int = Field(...)
    temporary_status: pagelocations_temporary_status_enum_param | None = Field(None)
    website: str | None = Field(None)


class PageGetMediaFingerprintsParams(BaseModel):
    """Parameters for Page.get_media_fingerprints()."""

    model_config = ConfigDict(extra="allow")
    universal_content_id: str | None = Field(None)


class PageCreateMediaFingerprintParams(BaseModel):
    """Parameters for Page.create_media_fingerprint()."""

    model_config = ConfigDict(extra="allow")
    fingerprint_content_type: pagemedia_fingerprints_fingerprint_content_type_enum_param = Field(
        ...
    )
    metadata: Any = Field(...)
    source: str = Field(...)
    title: str = Field(...)
    universal_content_id: str | None = Field(None)


class PageCreateMessageAttachmentParams(BaseModel):
    """Parameters for Page.create_message_attachment()."""

    model_config = ConfigDict(extra="allow")
    message: dict[str, Any] = Field(...)
    platform: pagemessage_attachments_platform_enum_param | None = Field(None)


class PageDeleteMessageTemplatesParams(BaseModel):
    """Parameters for Page.delete_message_templates()."""

    model_config = ConfigDict(extra="allow")
    name: str = Field(...)
    template_id: str | None = Field(None)


class PageGetMessageTemplatesParams(BaseModel):
    """Parameters for Page.get_message_templates()."""

    model_config = ConfigDict(extra="allow")
    category: list[Any] | None = Field(None)
    content: str | None = Field(None)
    language: list[str] | None = Field(None)
    name: str | None = Field(None)
    name_or_content: str | None = Field(None)
    status: list[Any] | None = Field(None)


class PageCreateMessageTemplateParams(BaseModel):
    """Parameters for Page.create_message_template()."""

    model_config = ConfigDict(extra="allow")
    category: pagemessage_templates_category_enum_param = Field(...)
    components: list[Any] | None = Field(None)
    language: str = Field(...)
    library_template_button_inputs: list[Any] | None = Field(None)
    library_template_name: str | None = Field(None)
    name: str = Field(...)


class PageCreateMessageParams(BaseModel):
    """Parameters for Page.create_message()."""

    model_config = ConfigDict(extra="allow")
    message: dict[str, Any] | None = Field(None)
    messaging_type: pagemessages_messaging_type_enum_param | None = Field(None)
    notification_type: pagemessages_notification_type_enum_param | None = Field(None)
    payload: str | None = Field(None)
    persona_id: str | None = Field(None)
    recipient: dict[str, Any] = Field(...)
    reply_to: str | None = Field(None)
    sender_action: pagemessages_sender_action_enum_param | None = Field(None)
    suggestion_action: pagemessages_suggestion_action_enum_param | None = Field(None)
    tag: dict[str, Any] | None = Field(None)
    thread_control: dict[str, Any] | None = Field(None)


class PageCreateMessengerCallSettingParams(BaseModel):
    """Parameters for Page.create_messenger_call_setting()."""

    model_config = ConfigDict(extra="allow")
    audio_enabled: bool | None = Field(None)
    call_hours: dict[str, Any] | None = Field(None)
    call_routing: dict[str, Any] | None = Field(None)
    icon_enabled: bool | None = Field(None)


class PageCreateMessengerLeadFormParams(BaseModel):
    """Parameters for Page.create_messenger_lead_form()."""

    model_config = ConfigDict(extra="allow")
    account_id: int | None = Field(None)
    block_send_api: bool | None = Field(None)
    exit_keyphrases: str | None = Field(None)
    handover_app_id: int | None = Field(None)
    handover_summary: bool | None = Field(None)
    privacy_url: str | None = Field(None)
    reminder_text: str | None = Field(None)
    step_list: list[Any] = Field(...)
    stop_question_message: str | None = Field(None)
    template_name: str | None = Field(None)
    tracking_parameters: dict[str, Any] | None = Field(None)


class PageDeleteMessengerProfileParams(BaseModel):
    """Parameters for Page.delete_messenger_profile()."""

    model_config = ConfigDict(extra="allow")
    fields: list[Any] = Field(...)
    platform: pagemessenger_profile_platform_enum_param | None = Field(None)


class PageGetMessengerProfileParams(BaseModel):
    """Parameters for Page.get_messenger_profile()."""

    model_config = ConfigDict(extra="allow")
    platform: pagemessenger_profile_platform_enum_param | None = Field(None)


class PageCreateMessengerProfileParams(BaseModel):
    """Parameters for Page.create_messenger_profile()."""

    model_config = ConfigDict(extra="allow")
    account_linking_url: str | None = Field(None)
    commands: list[Any] | None = Field(None)
    description: list[Any] | None = Field(None)
    get_started: dict[str, Any] | None = Field(None)
    greeting: list[Any] | None = Field(None)
    ice_breakers: list[Any] | None = Field(None)
    persistent_menu: list[Any] | None = Field(None)
    platform: pagemessenger_profile_platform_enum_param | None = Field(None)
    title: list[Any] | None = Field(None)
    whitelisted_domains: list[str] | None = Field(None)


class PageCreateModerateConversationParams(BaseModel):
    """Parameters for Page.create_moderate_conversation()."""

    model_config = ConfigDict(extra="allow")
    actions: list[Any] = Field(...)
    user_ids: list[Any] = Field(...)


class PageCreateNlpConfigParams(BaseModel):
    """Parameters for Page.create_nlp_config()."""

    model_config = ConfigDict(extra="allow")
    api_version: dict[str, Any] | None = Field(None)
    custom_token: str | None = Field(None)
    model: pagenlp_configs_model_enum_param | None = Field(None)
    n_best: int | None = Field(None)
    nlp_enabled: bool | None = Field(None)
    other_language_support: dict[str, Any] | None = Field(None)
    verbose: bool | None = Field(None)


class PageCreateNotificationMessagesDevSupportParams(BaseModel):
    """Parameters for Page.create_notification_messages_dev_support()."""

    model_config = ConfigDict(extra="allow")
    developer_action: pagenotification_messages_dev_support_developer_action_enum_param = Field(...)
    recipient: dict[str, Any] = Field(...)


class PageCreatePageWhatsappNumberVerificationParams(BaseModel):
    """Parameters for Page.create_page_whatsapp_number_verification()."""

    model_config = ConfigDict(extra="allow")
    verification_code: str | None = Field(None)
    whatsapp_number: str = Field(...)


class PageCreatePassThreadControlParams(BaseModel):
    """Parameters for Page.create_pass_thread_control()."""

    model_config = ConfigDict(extra="allow")
    metadata: str | None = Field(None)
    recipient: dict[str, Any] = Field(...)
    target_app_id: str | None = Field(None)


class PageCreatePersonaParams(BaseModel):
    """Parameters for Page.create_persona()."""

    model_config = ConfigDict(extra="allow")
    name: str = Field(...)
    profile_picture_url: str = Field(...)


class PageCreatePhotoStorieParams(BaseModel):
    """Parameters for Page.create_photo_storie()."""

    model_config = ConfigDict(extra="allow")
    photo_id: str | None = Field(None)


class PageGetPhotosParams(BaseModel):
    """Parameters for Page.get_photos()."""

    model_config = ConfigDict(extra="allow")
    biz_tag_id: int | None = Field(None)
    business_id: str | None = Field(None)
    type: pagephotos_type_enum_param | None = Field(None)


class PageCreatePhotoParams(BaseModel):
    """Parameters for Page.create_photo()."""

    model_config = ConfigDict(extra="allow")
    aid: str | None = Field(None)
    allow_spherical_photo: bool | None = Field(None)
    alt_text_custom: str | None = Field(None)
    android_key_hash: str | None = Field(None)
    application_id: str | None = Field(None)
    attempt: int | None = Field(None)
    audience_exp: bool | None = Field(None)
    backdated_time: datetime | None = Field(None)
    backdated_time_granularity: pagephotos_backdated_time_granularity_enum_param | None = Field(
        None
    )
    caption: str | None = Field(None)
    composer_session_id: str | None = Field(None)
    direct_share_status: int | None = Field(None)
    feed_targeting: dict[str, Any] | None = Field(None)
    filter_type: int | None = Field(None)
    full_res_is_coming_later: bool | None = Field(None)
    initial_view_heading_override_degrees: int | None = Field(None)
    initial_view_pitch_override_degrees: int | None = Field(None)
    initial_view_vertical_fov_override_degrees: int | None = Field(None)
    ios_bundle_id: str | None = Field(None)
    is_explicit_location: bool | None = Field(None)
    is_explicit_place: bool | None = Field(None)
    location_source_id: str | None = Field(None)
    manual_privacy: bool | None = Field(None)
    message: str | None = Field(None)
    name: str | None = Field(None)
    nectar_module: str | None = Field(None)
    no_story: bool | None = Field(None)
    offline_id: int | None = Field(None)
    og_action_type_id: str | None = Field(None)
    og_icon_id: str | None = Field(None)
    og_object_id: str | None = Field(None)
    og_phrase: str | None = Field(None)
    og_set_profile_badge: bool | None = Field(None)
    og_suggestion_mechanism: str | None = Field(None)
    parent_media_id: int | None = Field(None)
    place: dict[str, Any] | None = Field(None)
    privacy: str | None = Field(None)
    profile_id: int | None = Field(None)
    provenance_info: dict[str, Any] | None = Field(None)
    proxied_app_id: str | None = Field(None)
    published: bool | None = Field(None)
    qn: str | None = Field(None)
    scheduled_publish_time: int | None = Field(None)
    spherical_metadata: dict[str, Any] | None = Field(None)
    sponsor_id: str | None = Field(None)
    sponsor_relationship: int | None = Field(None)
    tags: list[Any] | None = Field(None)
    target_id: int | None = Field(None)
    targeting: dict[str, Any] | None = Field(None)
    temporary: bool | None = Field(None)
    time_since_original_post: int | None = Field(None)
    uid: int | None = Field(None)
    unpublished_content_type: pagephotos_unpublished_content_type_enum_param | None = Field(None)
    url: str | None = Field(None)
    user_selected_tags: bool | None = Field(None)
    vault_image_id: str | None = Field(None)


class PageGetPictureParams(BaseModel):
    """Parameters for Page.get_picture()."""

    model_config = ConfigDict(extra="allow")
    height: int | None = Field(None)
    redirect: bool | None = Field(None)
    type: pagepicture_type_enum_param | None = Field(None)
    width: int | None = Field(None)


class PageCreatePictureParams(BaseModel):
    """Parameters for Page.create_picture()."""

    model_config = ConfigDict(extra="allow")
    android_key_hash: str | None = Field(None)
    burn_media_effect: bool | None = Field(None)
    caption: str | None = Field(None)
    composer_session_id: str | None = Field(None)
    frame_entrypoint: str | None = Field(None)
    has_umg: bool | None = Field(None)
    height: int | None = Field(None)
    ios_bundle_id: str | None = Field(None)
    media_effect_ids: list[int] | None = Field(None)
    media_effect_source_object_id: int | None = Field(None)
    msqrd_mask_id: str | None = Field(None)
    photo: str | None = Field(None)
    picture: str | None = Field(None)
    profile_pic_method: str | None = Field(None)
    profile_pic_source: str | None = Field(None)
    proxied_app_id: int | None = Field(None)
    qn: str | None = Field(None)
    reuse: bool | None = Field(None)
    scaled_crop_rect: dict[str, Any] | None = Field(None)
    set_profile_photo_shield: str | None = Field(None)
    sticker_id: int | None = Field(None)
    sticker_source_object_id: int | None = Field(None)
    suppress_stories: bool | None = Field(None)
    width: int | None = Field(None)
    x: int | None = Field(None)
    y: int | None = Field(None)


class PageGetPostsParams(BaseModel):
    """Parameters for Page.get_posts()."""

    model_config = ConfigDict(extra="allow")
    include_hidden: bool | None = Field(None)
    limit: int | None = Field(None)
    q: str | None = Field(None)
    show_expired: bool | None = Field(None)
    field_with: pageposts_with_enum_param | None = Field(None, alias="with")


class PageGetPublishedPostsParams(BaseModel):
    """Parameters for Page.get_published_posts()."""

    model_config = ConfigDict(extra="allow")
    include_hidden: bool | None = Field(None)
    limit: int | None = Field(None)
    show_expired: bool | None = Field(None)
    field_with: pagepublished_posts_with_enum_param | None = Field(None, alias="with")


class PageCreateReleaseThreadControlParams(BaseModel):
    """Parameters for Page.create_release_thread_control()."""

    model_config = ConfigDict(extra="allow")
    recipient: dict[str, Any] = Field(...)


class PageCreateRequestThreadControlParams(BaseModel):
    """Parameters for Page.create_request_thread_control()."""

    model_config = ConfigDict(extra="allow")
    metadata: str | None = Field(None)
    recipient: dict[str, Any] = Field(...)


class PageGetRolesParams(BaseModel):
    """Parameters for Page.get_roles()."""

    model_config = ConfigDict(extra="allow")
    include_deactivated: bool | None = Field(None)
    uid: int | None = Field(None)


class PageGetSecondaryReceiversParams(BaseModel):
    """Parameters for Page.get_secondary_receivers()."""

    model_config = ConfigDict(extra="allow")
    platform: pagesecondary_receivers_platform_enum_param | None = Field(None)


class PageCreateSettingParams(BaseModel):
    """Parameters for Page.create_setting()."""

    model_config = ConfigDict(extra="allow")
    option: dict[str, Any] | None = Field(None)


class PageGetStoriesParams(BaseModel):
    """Parameters for Page.get_stories()."""

    model_config = ConfigDict(extra="allow")
    since: datetime | None = Field(None)
    status: list[Any] | None = Field(None)
    until: datetime | None = Field(None)


class PageCreateSubscribedAppParams(BaseModel):
    """Parameters for Page.create_subscribed_app()."""

    model_config = ConfigDict(extra="allow")
    subscribed_fields: list[Any] = Field(...)


class PageGetTabsParams(BaseModel):
    """Parameters for Page.get_tabs()."""

    model_config = ConfigDict(extra="allow")
    tab: list[str] | None = Field(None)


class PageCreateTakeThreadControlParams(BaseModel):
    """Parameters for Page.create_take_thread_control()."""

    model_config = ConfigDict(extra="allow")
    metadata: str | None = Field(None)
    recipient: dict[str, Any] = Field(...)


class PageGetThreadOwnerParams(BaseModel):
    """Parameters for Page.get_thread_owner()."""

    model_config = ConfigDict(extra="allow")
    recipient: str = Field(...)


class PageGetThreadsParams(BaseModel):
    """Parameters for Page.get_threads()."""

    model_config = ConfigDict(extra="allow")
    folder: str | None = Field(None)
    platform: pagethreads_platform_enum_param | None = Field(None)
    tags: list[str] | None = Field(None)
    user_id: str | None = Field(None)


class PageCreateUnlinkAccountParams(BaseModel):
    """Parameters for Page.create_unlink_account()."""

    model_config = ConfigDict(extra="allow")
    psid: str = Field(...)


class PageGetVideoCopyrightRulesParams(BaseModel):
    """Parameters for Page.get_video_copyright_rules()."""

    model_config = ConfigDict(extra="allow")
    selected_rule_id: str | None = Field(None)
    source: pagevideo_copyright_rules_source_enum_param | None = Field(None)


class PageCreateVideoCopyrightRuleParams(BaseModel):
    """Parameters for Page.create_video_copyright_rule()."""

    model_config = ConfigDict(extra="allow")
    condition_groups: list[Any] = Field(...)
    name: str = Field(...)


class PageCreateVideoCopyrightParams(BaseModel):
    """Parameters for Page.create_video_copyright()."""

    model_config = ConfigDict(extra="allow")
    attribution_id: str | None = Field(None)
    content_category: pagevideo_copyrights_content_category_enum_param | None = Field(None)
    copyright_content_id: str = Field(...)
    excluded_ownership_countries: list[str] | None = Field(None)
    excluded_ownership_segments: list[Any] | None = Field(None)
    is_reference_disabled: bool | None = Field(None)
    is_reference_video: bool | None = Field(None)
    monitoring_type: pagevideo_copyrights_monitoring_type_enum_param | None = Field(None)
    ownership_countries: list[str] | None = Field(None)
    rule_id: str | None = Field(None)
    tags: list[str] | None = Field(None)
    whitelisted_ids: list[str] | None = Field(None)
    whitelisted_ig_user_ids: list[str] | None = Field(None)


class PageGetVideoReelsParams(BaseModel):
    """Parameters for Page.get_video_reels()."""

    model_config = ConfigDict(extra="allow")
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)


class PageCreateVideoReelParams(BaseModel):
    """Parameters for Page.create_video_reel()."""

    model_config = ConfigDict(extra="allow")
    description: str | None = Field(None)
    feed_targeting: dict[str, Any] | None = Field(None)
    place: str | None = Field(None)
    scheduled_publish_time: datetime | None = Field(None)
    targeting: dict[str, Any] | None = Field(None)
    title: str | None = Field(None)
    upload_phase: pagevideo_reels_upload_phase_enum_param = Field(...)
    video_id: str | None = Field(None)
    video_state: pagevideo_reels_video_state_enum_param | None = Field(None)


class PageCreateVideoStorieParams(BaseModel):
    """Parameters for Page.create_video_storie()."""

    model_config = ConfigDict(extra="allow")
    description: str | None = Field(None)
    feed_targeting: dict[str, Any] | None = Field(None)
    place: str | None = Field(None)
    scheduled_publish_time: datetime | None = Field(None)
    targeting: dict[str, Any] | None = Field(None)
    title: str | None = Field(None)
    upload_phase: pagevideo_stories_upload_phase_enum_param = Field(...)
    video_id: str | None = Field(None)
    video_state: pagevideo_stories_video_state_enum_param | None = Field(None)


class PageGetVideosParams(BaseModel):
    """Parameters for Page.get_videos()."""

    model_config = ConfigDict(extra="allow")
    type: pagevideos_type_enum_param | None = Field(None)


class PageCreateVideoParams(BaseModel):
    """Parameters for Page.create_video()."""

    model_config = ConfigDict(extra="allow")
    ad_breaks: Any | None = Field(None)
    application_id: str | None = Field(None)
    asked_fun_fact_prompt_id: int | None = Field(None)
    audio_story_wave_animation_handle: str | None = Field(None)
    backdated_post: Any | None = Field(None)
    call_to_action: dict[str, Any] | None = Field(None)
    composer_entry_picker: str | None = Field(None)
    composer_entry_point: str | None = Field(None)
    composer_entry_time: int | None = Field(None)
    composer_session_events_log: str | None = Field(None)
    composer_session_id: str | None = Field(None)
    composer_source_surface: str | None = Field(None)
    composer_type: str | None = Field(None)
    container_type: pagevideos_container_type_enum_param | None = Field(None)
    content_category: pagevideos_content_category_enum_param | None = Field(None)
    content_tags: list[str] | None = Field(None)
    creative_tools: str | None = Field(None)
    crossposted_video_id: str | None = Field(None)
    custom_labels: list[str] | None = Field(None)
    description: str | None = Field(None)
    direct_share_status: int | None = Field(None)
    embeddable: bool | None = Field(None)
    end_offset: int | None = Field(None)
    expiration: dict[str, Any] | None = Field(None)
    fbuploader_video_file_chunk: str | None = Field(None)
    feed_targeting: dict[str, Any] | None = Field(None)
    file_size: int | None = Field(None)
    file_url: str | None = Field(None)
    fisheye_video_cropped: bool | None = Field(None)
    formatting: pagevideos_formatting_enum_param | None = Field(None)
    fov: int | None = Field(None)
    front_z_rotation: float | None = Field(None)
    fun_fact_prompt_id: str | None = Field(None)
    fun_fact_toastee_id: int | None = Field(None)
    guide: list[Any] | None = Field(None)
    guide_enabled: bool | None = Field(None)
    initial_heading: int | None = Field(None)
    initial_pitch: int | None = Field(None)
    instant_game_entry_point_data: str | None = Field(None)
    is_boost_intended: bool | None = Field(None)
    is_explicit_share: bool | None = Field(None)
    is_group_linking_post: bool | None = Field(None)
    is_partnership_ad: bool | None = Field(None)
    is_voice_clip: bool | None = Field(None)
    location_source_id: str | None = Field(None)
    manual_privacy: bool | None = Field(None)
    multilingual_data: list[Any] | None = Field(None)
    no_story: bool | None = Field(None)
    og_action_type_id: str | None = Field(None)
    og_icon_id: str | None = Field(None)
    og_object_id: str | None = Field(None)
    og_phrase: str | None = Field(None)
    og_suggestion_mechanism: str | None = Field(None)
    original_fov: int | None = Field(None)
    original_projection_type: pagevideos_original_projection_type_enum_param | None = Field(None)
    partnership_ad_ad_code: str | None = Field(None)
    publish_event_id: int | None = Field(None)
    published: bool | None = Field(None)
    reference_only: bool | None = Field(None)
    referenced_sticker_id: str | None = Field(None)
    replace_video_id: str | None = Field(None)
    scheduled_publish_time: int | None = Field(None)
    secret: bool | None = Field(None)
    slideshow_spec: dict[str, Any] | None = Field(None)
    social_actions: bool | None = Field(None)
    source: str | None = Field(None)
    source_instagram_media_id: str | None = Field(None)
    specified_dialect: str | None = Field(None)
    spherical: bool | None = Field(None)
    sponsor_id: str | None = Field(None)
    sponsor_relationship: int | None = Field(None)
    start_offset: int | None = Field(None)
    swap_mode: pagevideos_swap_mode_enum_param | None = Field(None)
    targeting: dict[str, Any] | None = Field(None)
    text_format_metadata: str | None = Field(None)
    thumb: Any | None = Field(None)
    time_since_original_post: int | None = Field(None)
    title: str | None = Field(None)
    transcode_setting_properties: str | None = Field(None)
    universal_video_id: str | None = Field(None)
    unpublished_content_type: pagevideos_unpublished_content_type_enum_param | None = Field(None)
    upload_phase: pagevideos_upload_phase_enum_param | None = Field(None)
    upload_session_id: str | None = Field(None)
    upload_setting_properties: str | None = Field(None)
    video_asset_id: str | None = Field(None)
    video_file_chunk: str | None = Field(None)
    video_id_original: str | None = Field(None)
    video_start_time_ms: int | None = Field(None)
    waterfall_id: str | None = Field(None)


class PageGetVisitorPostsParams(BaseModel):
    """Parameters for Page.get_visitor_posts()."""

    model_config = ConfigDict(extra="allow")
    include_hidden: bool | None = Field(None)
    limit: int | None = Field(None)
    show_expired: bool | None = Field(None)
    field_with: pagevisitor_posts_with_enum_param | None = Field(None, alias="with")


class PageDeleteWelcomeMessageFlowsParams(BaseModel):
    """Parameters for Page.delete_welcome_message_flows()."""

    model_config = ConfigDict(extra="allow")
    flow_id: str = Field(...)


class PageGetWelcomeMessageFlowsParams(BaseModel):
    """Parameters for Page.get_welcome_message_flows()."""

    model_config = ConfigDict(extra="allow")
    app_id: str | None = Field(None)
    flow_id: str | None = Field(None)


class PageCreateWelcomeMessageFlowParams(BaseModel):
    """Parameters for Page.create_welcome_message_flow()."""

    model_config = ConfigDict(extra="allow")
    eligible_platforms: list[Any] | None = Field(None)
    flow_id: str | None = Field(None)
    name: str | None = Field(None)
    welcome_message_flow: list[Any] | None = Field(None)


class ProfileGetPictureParams(BaseModel):
    """Parameters for Profile.get_picture()."""

    model_config = ConfigDict(extra="allow")
    height: int | None = Field(None)
    redirect: bool | None = Field(None)
    type: profilepicture_type_enum_param | None = Field(None)
    width: int | None = Field(None)


class PhotoGetCommentsParams(BaseModel):
    """Parameters for Photo.get_comments()."""

    model_config = ConfigDict(extra="allow")
    filter: photocomments_filter_enum_param | None = Field(None)
    live_filter: photocomments_live_filter_enum_param | None = Field(None)
    order: photocomments_order_enum_param | None = Field(None)
    since: datetime | None = Field(None)


class PhotoCreateCommentParams(BaseModel):
    """Parameters for Photo.create_comment()."""

    model_config = ConfigDict(extra="allow")
    attachment_id: str | None = Field(None)
    attachment_share_url: str | None = Field(None)
    attachment_url: str | None = Field(None)
    comment_privacy_value: photocomments_comment_privacy_value_enum_param | None = Field(None)
    facepile_mentioned_ids: list[str] | None = Field(None)
    feedback_source: str | None = Field(None)
    is_offline: bool | None = Field(None)
    message: str | None = Field(None)
    nectar_module: str | None = Field(None)
    object_id: str | None = Field(None)
    parent_comment_id: dict[str, Any] | None = Field(None)
    text: str | None = Field(None)
    tracking: str | None = Field(None)


class PhotoGetInsightsParams(BaseModel):
    """Parameters for Photo.get_insights()."""

    model_config = ConfigDict(extra="allow")
    date_preset: photoinsights_date_preset_enum_param | None = Field(None)
    metric: list[Any] | None = Field(None)
    period: photoinsights_period_enum_param | None = Field(None)
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)


class PhotoCreateLikeParams(BaseModel):
    """Parameters for Photo.create_like()."""

    model_config = ConfigDict(extra="allow")
    feedback_source: str | None = Field(None)
    nectar_module: str | None = Field(None)
    notify: bool | None = Field(None)
    tracking: str | None = Field(None)


class PostGetCommentsParams(BaseModel):
    """Parameters for Post.get_comments()."""

    model_config = ConfigDict(extra="allow")
    filter: postcomments_filter_enum_param | None = Field(None)
    live_filter: postcomments_live_filter_enum_param | None = Field(None)
    order: postcomments_order_enum_param | None = Field(None)
    since: datetime | None = Field(None)


class PostCreateCommentParams(BaseModel):
    """Parameters for Post.create_comment()."""

    model_config = ConfigDict(extra="allow")
    attachment_id: str | None = Field(None)
    attachment_share_url: str | None = Field(None)
    attachment_url: str | None = Field(None)
    comment: str | None = Field(None)
    comment_privacy_value: postcomments_comment_privacy_value_enum_param | None = Field(None)
    feedback_source: str | None = Field(None)
    message: str | None = Field(None)
    nectar_module: str | None = Field(None)
    parent_comment_id: dict[str, Any] | None = Field(None)
    post_id: str | None = Field(None)
    tracking: str | None = Field(None)


class PostGetInsightsParams(BaseModel):
    """Parameters for Post.get_insights()."""

    model_config = ConfigDict(extra="allow")
    date_preset: postinsights_date_preset_enum_param | None = Field(None)
    metric: list[Any] | None = Field(None)
    period: postinsights_period_enum_param | None = Field(None)
    since: datetime | None = Field(None)
    until: datetime | None = Field(None)


class PostDeleteLikesParams(BaseModel):
    """Parameters for Post.delete_likes()."""

    model_config = ConfigDict(extra="allow")
    nectar_module: str | None = Field(None)
    tracking: str | None = Field(None)


class PostCreateLikeParams(BaseModel):
    """Parameters for Post.create_like()."""

    model_config = ConfigDict(extra="allow")
    feedback_source: str | None = Field(None)
    nectar_module: str | None = Field(None)
    tracking: str | None = Field(None)


class PostGetReactionsParams(BaseModel):
    """Parameters for Post.get_reactions()."""

    model_config = ConfigDict(extra="allow")
    type: postreactions_type_enum_param | None = Field(None)


class VehicleOfferGetOverrideDetailsParams(BaseModel):
    """Parameters for VehicleOffer.get_override_details()."""

    model_config = ConfigDict(extra="allow")
    keys: list[str] | None = Field(None)
    type: vehicleofferoverride_details_type_enum_param | None = Field(None)


# ============================================================================
# EXPORTS
# ============================================================================

__all__ = [
    # Enums
    "Ad_bid_type",
    "Ad_configured_status",
    "Ad_effective_status",
    "Ad_status",
    "adaccount_currency",
    "adaccountactivities_category_enum_param",
    "adaccountactivities_data_source_enum_param",
    "adaccountad_place_page_sets_async_location_types_enum_param",
    "adaccountad_place_page_sets_async_targeted_area_type_enum_param",
    "adaccountad_place_page_sets_location_types_enum_param",
    "adaccountad_place_page_sets_targeted_area_type_enum_param",
    "adaccountadcreatives_applink_treatment_enum_param",
    "adaccountadcreatives_authorization_category_enum_param",
    "adaccountadcreatives_categorization_criteria_enum_param",
    "adaccountadcreatives_category_media_source_enum_param",
    "adaccountadcreatives_dynamic_ad_voice_enum_param",
    "adaccountadcreativesbylabels_operator_enum_param",
    "adaccountadrules_history_action_enum_param",
    "adaccountadrules_history_evaluation_type_enum_param",
    "adaccountadrules_library_status_enum_param",
    "adaccountadrules_library_ui_creation_source_enum_param",
    "adaccountads_date_preset_enum_param",
    "adaccountads_execution_options_enum_param",
    "adaccountads_status_enum_param",
    "adaccountads_volume_recommendation_type_enum_param",
    "adaccountadsbylabels_operator_enum_param",
    "adaccountadsets_bid_strategy_enum_param",
    "adaccountadsets_billing_event_enum_param",
    "adaccountadsets_budget_source_enum_param",
    "adaccountadsets_creative_sequence_repetition_pattern_enum_param",
    "adaccountadsets_date_preset_enum_param",
    "adaccountadsets_destination_type_enum_param",
    "adaccountadsets_effective_status_enum_param",
    "adaccountadsets_execution_options_enum_param",
    "adaccountadsets_full_funnel_exploration_mode_enum_param",
    "adaccountadsets_multi_optimization_goal_weight_enum_param",
    "adaccountadsets_optimization_goal_enum_param",
    "adaccountadsets_optimization_sub_event_enum_param",
    "adaccountadsets_regional_regulated_categories_enum_param",
    "adaccountadsets_status_enum_param",
    "adaccountadsets_tune_for_category_enum_param",
    "adaccountadsetsbylabels_operator_enum_param",
    "adaccountadspixels_sort_by_enum_param",
    "adaccountadvideos_container_type_enum_param",
    "adaccountadvideos_content_category_enum_param",
    "adaccountadvideos_formatting_enum_param",
    "adaccountadvideos_original_projection_type_enum_param",
    "adaccountadvideos_swap_mode_enum_param",
    "adaccountadvideos_unpublished_content_type_enum_param",
    "adaccountadvideos_upload_phase_enum_param",
    "adaccountagencies_permitted_tasks_enum_param",
    "AdAccountAgencyFeeConfig_status",
    "adaccountassigned_users_tasks_enum_param",
    "adaccountasync_requests_status_enum_param",
    "adaccountasync_requests_type_enum_param",
    "adaccountasyncadcreatives_notification_mode_enum_param",
    "adaccountasyncadrequestsets_notification_mode_enum_param",
    "adaccountbrand_safety_content_filter_levels_brand_safety_content_filter_levels_enum_param",
    "AdAccountBusinessConstraints_status",
    "adaccountcampaigns_bid_strategy_enum_param",
    "adaccountcampaigns_date_preset_enum_param",
    "adaccountcampaigns_delete_strategy_enum_param",
    "adaccountcampaigns_effective_status_enum_param",
    "adaccountcampaigns_execution_options_enum_param",
    "adaccountcampaigns_objective_enum_param",
    "adaccountcampaigns_smart_promotion_type_enum_param",
    "adaccountcampaigns_special_ad_categories_enum_param",
    "adaccountcampaigns_special_ad_category_country_enum_param",
    "adaccountcampaigns_status_enum_param",
    "adaccountcampaignsbylabels_operator_enum_param",
    "adaccountcustomaudiences_claim_objective_enum_param",
    "adaccountcustomaudiences_content_type_enum_param",
    "adaccountcustomaudiences_customer_file_source_enum_param",
    "adaccountcustomaudiences_subscription_info_enum_param",
    "adaccountcustomaudiences_subtype_enum_param",
    "adaccountcustomaudiences_use_for_products_enum_param",
    "adaccountcustomconversions_action_source_type_enum_param",
    "adaccountcustomconversions_custom_event_type_enum_param",
    "AdAccountDefaultObjective_default_objective_for_user",
    "AdAccountDefaultObjective_objective_for_level",
    "adaccountdelivery_estimate_optimization_goal_enum_param",
    "adaccountgeneratepreviews_ad_format_enum_param",
    "adaccountgeneratepreviews_creative_feature_enum_param",
    "adaccountgeneratepreviews_render_type_enum_param",
    "adaccountinsights_action_attribution_windows_enum_param",
    "adaccountinsights_action_breakdowns_enum_param",
    "adaccountinsights_action_report_time_enum_param",
    "adaccountinsights_breakdowns_enum_param",
    "adaccountinsights_date_preset_enum_param",
    "adaccountinsights_level_enum_param",
    "adaccountinsights_summary_action_breakdowns_enum_param",
    "adaccountmatched_search_applications_app_store_enum_param",
    "adaccountonbehalf_requests_status_enum_param",
    "AdAccountOptimizationGoalsAEMv2Eligibility_optimization_goal",
    "adaccountproduct_audiences_claim_objective_enum_param",
    "adaccountproduct_audiences_content_type_enum_param",
    "adaccountproduct_audiences_subtype_enum_param",
    "adaccountreachfrequencypredictions_action_enum_param",
    "adaccountreachfrequencypredictions_buying_type_enum_param",
    "adaccountreachfrequencypredictions_instream_packages_enum_param",
    "adaccounttargetingbrowse_limit_type_enum_param",
    "adaccounttargetingbrowse_regulated_categories_enum_param",
    "adaccounttargetingbrowse_regulated_countries_enum_param",
    "adaccounttargetingbrowse_whitelisted_types_enum_param",
    "adaccounttargetingsearch_app_store_enum_param",
    "adaccounttargetingsearch_limit_type_enum_param",
    "adaccounttargetingsearch_objective_enum_param",
    "adaccounttargetingsearch_regulated_categories_enum_param",
    "adaccounttargetingsearch_regulated_countries_enum_param",
    "adaccounttargetingsearch_whitelisted_types_enum_param",
    "adaccounttargetingsuggestions_app_store_enum_param",
    "adaccounttargetingsuggestions_limit_type_enum_param",
    "adaccounttargetingsuggestions_mode_enum_param",
    "adaccounttargetingsuggestions_objective_enum_param",
    "adaccounttargetingsuggestions_regulated_categories_enum_param",
    "adaccounttargetingsuggestions_regulated_countries_enum_param",
    "adaccounttargetingsuggestions_whitelisted_types_enum_param",
    "AdAccountUserSettings_syd_campaign_trends_objective",
    "adaccountvalue_rule_set_product_type_enum_param",
    "adaccountvalue_rule_set_status_enum_param",
    "adaccountvideo_ads_upload_phase_enum_param",
    "adaccountvideo_ads_video_state_enum_param",
    "AdActivity_event_type",
    "AdAssetCustomizationRuleCustomizationSpec_device_platforms",
    "AdAssetFeedSpec_call_to_action_types",
    "AdAssetTargetRuleTargeting_device_platforms",
    "AdAsyncRequestSet_notification_mode",
    "adasyncrequestset_notification_mode",
    "adasyncrequestsetrequests_statuses_enum_param",
    "adcampaign_bid_strategy",
    "adcampaign_billing_event",
    "adcampaign_creative_sequence_repetition_pattern",
    "adcampaign_date_preset",
    "adcampaign_destination_type",
    "adcampaign_execution_options",
    "adcampaign_full_funnel_exploration_mode",
    "adcampaign_multi_optimization_goal_weight",
    "adcampaign_optimization_goal",
    "adcampaign_optimization_sub_event",
    "adcampaign_regional_regulated_categories",
    "adcampaign_status",
    "adcampaign_tune_for_category",
    "adcampaignactivities_category_enum_param",
    "adcampaignadlabels_execution_options_enum_param",
    "adcampaignads_date_preset_enum_param",
    "adcampaignasyncadrequests_statuses_enum_param",
    "adcampaignbudget_schedules_budget_value_type_enum_param",
    "adcampaigncopies_date_preset_enum_param",
    "adcampaigncopies_effective_status_enum_param",
    "adcampaigncopies_status_option_enum_param",
    "adcampaigndelivery_estimate_optimization_goal_enum_param",
    "adcampaigngroup_bid_strategy",
    "adcampaigngroup_date_preset",
    "adcampaigngroup_execution_options",
    "adcampaigngroup_objective",
    "adcampaigngroup_smart_promotion_type",
    "adcampaigngroup_special_ad_categories",
    "adcampaigngroup_special_ad_category",
    "adcampaigngroup_special_ad_category_country",
    "adcampaigngroup_status",
    "adcampaigngroupadlabels_execution_options_enum_param",
    "adcampaigngroupads_date_preset_enum_param",
    "adcampaigngroupadsets_date_preset_enum_param",
    "adcampaigngroupadsets_effective_status_enum_param",
    "adcampaigngroupbudget_schedules_budget_value_type_enum_param",
    "adcampaigngroupcopies_date_preset_enum_param",
    "adcampaigngroupcopies_effective_status_enum_param",
    "adcampaigngroupcopies_status_option_enum_param",
    "adcampaigngroupinsights_action_attribution_windows_enum_param",
    "adcampaigngroupinsights_action_breakdowns_enum_param",
    "adcampaigngroupinsights_action_report_time_enum_param",
    "adcampaigngroupinsights_breakdowns_enum_param",
    "adcampaigngroupinsights_date_preset_enum_param",
    "adcampaigngroupinsights_level_enum_param",
    "adcampaigngroupinsights_summary_action_breakdowns_enum_param",
    "adcampaigninsights_action_attribution_windows_enum_param",
    "adcampaigninsights_action_breakdowns_enum_param",
    "adcampaigninsights_action_report_time_enum_param",
    "adcampaigninsights_breakdowns_enum_param",
    "adcampaigninsights_date_preset_enum_param",
    "adcampaigninsights_level_enum_param",
    "adcampaigninsights_summary_action_breakdowns_enum_param",
    "adcampaignmessage_delivery_estimate_optimization_goal_enum_param",
    "adcampaignmessage_delivery_estimate_pacing_type_enum_param",
    "AdCreative_call_to_action_type",
    "AdCreative_object_type",
    "AdCreative_status",
    "adcreative_status",
    "AdCreativeLinkData_format_option",
    "AdCreativeLinkDataCallToAction_type",
    "AdCreativeLinkDataCustomOverlaySpec_background_color",
    "AdCreativeLinkDataCustomOverlaySpec_font",
    "AdCreativeLinkDataCustomOverlaySpec_option",
    "AdCreativeLinkDataCustomOverlaySpec_position",
    "AdCreativeLinkDataCustomOverlaySpec_template",
    "AdCreativeLinkDataCustomOverlaySpec_text_color",
    "AdCreativeLinkDataImageLayerSpec_blending_mode",
    "AdCreativeLinkDataImageLayerSpec_frame_source",
    "AdCreativeLinkDataImageLayerSpec_image_source",
    "AdCreativeLinkDataImageLayerSpec_layer_type",
    "AdCreativeLinkDataImageLayerSpec_overlay_position",
    "AdCreativeLinkDataImageLayerSpec_overlay_shape",
    "AdCreativeLinkDataImageLayerSpec_text_font",
    "AdCreativeLinkDataImageOverlaySpec_custom_text_type",
    "AdCreativeLinkDataImageOverlaySpec_overlay_template",
    "AdCreativeLinkDataImageOverlaySpec_position",
    "AdCreativeLinkDataImageOverlaySpec_text_font",
    "AdCreativeLinkDataImageOverlaySpec_text_type",
    "AdCreativeLinkDataImageOverlaySpec_theme_color",
    "AdCreativeLinkDataMoment_type",
    "adcreativepreviews_ad_format_enum_param",
    "adcreativepreviews_creative_feature_enum_param",
    "adcreativepreviews_render_type_enum_param",
    "AdCreativeVideoDataCustomOverlaySpec_background_opacity",
    "AdCreativeVideoDataCustomOverlaySpec_option",
    "AdCreativeVideoDataCustomOverlaySpec_position",
    "AdCreativeVideoDataCustomOverlaySpec_template",
    "adgroup_date_preset",
    "adgroup_execution_options",
    "adgroup_status",
    "adgroupadlabels_execution_options_enum_param",
    "adgroupcopies_date_preset_enum_param",
    "adgroupcopies_status_option_enum_param",
    "adgroupfacebookfeedbackcomments_order_enum_param",
    "adgroupinsights_action_attribution_windows_enum_param",
    "adgroupinsights_action_breakdowns_enum_param",
    "adgroupinsights_action_report_time_enum_param",
    "adgroupinsights_breakdowns_enum_param",
    "adgroupinsights_date_preset_enum_param",
    "adgroupinsights_level_enum_param",
    "adgroupinsights_summary_action_breakdowns_enum_param",
    "adgrouppreviews_ad_format_enum_param",
    "adgrouppreviews_creative_feature_enum_param",
    "adgrouppreviews_render_type_enum_param",
    "AdImage_status",
    "admonetizationpropertyadnetworkanalytics_aggregation_period_enum_param",
    "admonetizationpropertyadnetworkanalytics_breakdowns_enum_param",
    "admonetizationpropertyadnetworkanalytics_metrics_enum_param",
    "admonetizationpropertyadnetworkanalytics_ordering_column_enum_param",
    "admonetizationpropertyadnetworkanalytics_ordering_type_enum_param",
    "AdPromotedObject_custom_event_type",
    "AdPromotedObject_lead_ads_custom_event_type",
    "AdRecommendation_confidence",
    "AdRecommendation_importance",
    "adrule_status",
    "AdRuleEvaluationSpec_evaluation_type",
    "AdRuleExecutionOptions_operator",
    "AdRuleExecutionSpec_execution_type",
    "AdRuleFilters_operator",
    "adrulehistory_action_enum_param",
    "AdRuleHistoryResult_object_type",
    "AdRuleTrigger_operator",
    "AdRuleTrigger_type",
    "AdSet_bid_strategy",
    "AdSet_billing_event",
    "AdSet_configured_status",
    "AdSet_effective_status",
    "AdSet_optimization_goal",
    "AdSet_status",
    "AdsNamingTemplate_level",
    "adspixel_automatic_matching_fields",
    "adspixel_data_use_setting",
    "adspixel_first_party_cookie_status",
    "adspixelagencies_permitted_tasks_enum_param",
    "adspixelassigned_users_tasks_enum_param",
    "adspixelda_checks_connection_method_enum_param",
    "adspixeloffline_event_uploads_order_enum_param",
    "adspixeloffline_event_uploads_sort_by_enum_param",
    "adspixelstats_aggregation_enum_param",
    "adstudy_type",
    "adstudycell_creation_template",
    "adstudyobjective_breakdowns",
    "adstudyobjective_type",
    "albumcomments_comment_privacy_value_enum_param",
    "albumcomments_filter_enum_param",
    "albumcomments_live_filter_enum_param",
    "albumcomments_order_enum_param",
    "albumphotos_backdated_time_granularity_enum_param",
    "albumphotos_unpublished_content_type_enum_param",
    "albumpicture_type_enum_param",
    "application_an_platforms",
    "Application_supported_platforms",
    "applicationaccounts_type_enum_param",
    "applicationactivities_event_enum_param",
    "applicationactivities_user_id_type_enum_param",
    "applicationadnetworkanalytics_aggregation_period_enum_param",
    "applicationadnetworkanalytics_breakdowns_enum_param",
    "applicationadnetworkanalytics_metrics_enum_param",
    "applicationadnetworkanalytics_ordering_column_enum_param",
    "applicationadnetworkanalytics_ordering_type_enum_param",
    "applicationapp_indexing_platform_enum_param",
    "applicationapp_indexing_request_type_enum_param",
    "applicationapp_push_device_token_platform_enum_param",
    "applicationcodeless_event_mappings_mutation_method_enum_param",
    "applicationcodeless_event_mappings_platform_enum_param",
    "applicationcodeless_event_mappings_post_method_enum_param",
    "applicationda_checks_connection_method_enum_param",
    "applicationmobile_sdk_gk_platform_enum_param",
    "applicationpermissions_status_enum_param",
    "applicationuploads_session_type_enum_param",
    "applicationwhatsapp_business_solution_owner_permissions_enum_param",
    "applicationwhatsapp_business_solution_partner_permissions_enum_param",
    "applicationwhatsapp_business_solutions_role_enum_param",
    "AutomotiveModel_image_fetch_status",
    "AutomotiveModel_visibility",
    "automotivemodeloverride_details_type_enum_param",
    "business_two_factor_type",
    "Business_verification_status",
    "business_vertical",
    "businessad_studies_type_enum_param",
    "businessadnetworkanalytics_aggregation_period_enum_param",
    "businessadnetworkanalytics_breakdowns_enum_param",
    "businessadnetworkanalytics_metrics_enum_param",
    "businessadnetworkanalytics_ordering_column_enum_param",
    "businessadnetworkanalytics_ordering_type_enum_param",
    "businessads_dataset_sort_by_enum_param",
    "businessadspixels_sort_by_enum_param",
    "businessagreement_request_status",
    "businessassetgroupassigned_users_adaccount_tasks_enum_param",
    "businessassetgroupassigned_users_offline_conversion_data_set_tasks_enum_param",
    "businessassetgroupassigned_users_page_tasks_enum_param",
    "businessassetgroupassigned_users_pixel_tasks_enum_param",
    "businessbusiness_invoices_type_enum_param",
    "businessbusiness_users_invited_user_type_enum_param",
    "businessbusiness_users_role_enum_param",
    "businessbusiness_users_tasks_enum_param",
    "businessclient_pages_permitted_tasks_enum_param",
    "businesscollaborative_ads_collaboration_requests_requester_agency_or_brand_enum_param",
    "businesscustomconversions_action_source_type_enum_param",
    "businesscustomconversions_custom_event_type_enum_param",
    "businessimages_validation_ad_placements_enum_param",
    "businessinitiated_audience_sharing_requests_request_status_enum_param",
    "businessmanaged_businesses_survey_business_type_enum_param",
    "businessmanaged_businesses_timezone_id_enum_param",
    "businessmanaged_businesses_vertical_enum_param",
    "businessmanaged_partner_businesses_partition_type_enum_param",
    "businessmanaged_partner_businesses_survey_business_type_enum_param",
    "businessmanaged_partner_businesses_timezone_id_enum_param",
    "businessmanaged_partner_businesses_vertical_enum_param",
    "businessowned_businesses_page_permitted_tasks_enum_param",
    "businessowned_businesses_survey_business_type_enum_param",
    "businessowned_businesses_timezone_id_enum_param",
    "businessowned_businesses_vertical_enum_param",
    "businessowned_product_catalogs_additional_vertical_option_enum_param",
    "businessowned_product_catalogs_vertical_enum_param",
    "businesspicture_type_enum_param",
    "businesspreverified_numbers_code_verification_status_enum_param",
    "businessreceived_audience_sharing_requests_request_status_enum_param",
    "businessrolerequest_role",
    "businessrolerequest_tasks",
    "businessself_certify_whatsapp_business_business_vertical_enum_param",
    "businesssetup_managed_partner_adaccounts_subvertical_v2_enum_param",
    "businesssetup_managed_partner_adaccounts_vertical_v2_enum_param",
    "businesssystem_users_role_enum_param",
    "businessuser_role",
    "businessuser_tasks",
    "businessvideos_container_type_enum_param",
    "businessvideos_content_category_enum_param",
    "businessvideos_formatting_enum_param",
    "businessvideos_original_projection_type_enum_param",
    "businessvideos_swap_mode_enum_param",
    "businessvideos_unpublished_content_type_enum_param",
    "businessvideos_upload_phase_enum_param",
    "businessvideos_validation_ad_placements_enum_param",
    "Campaign_bid_strategy",
    "Campaign_configured_status",
    "Campaign_effective_status",
    "Campaign_status",
    "commentcomments_comment_privacy_value_enum_param",
    "commentcomments_filter_enum_param",
    "commentcomments_live_filter_enum_param",
    "commentcomments_order_enum_param",
    "commentreactions_type_enum_param",
    "commercemerchantsettingscommerce_orders_filters_enum_param",
    "commercemerchantsettingscommerce_orders_state_enum_param",
    "commercemerchantsettingsreturns_statuses_enum_param",
    "commerceorderrefunds_reason_code_enum_param",
    "commerceorderreturns_statuses_enum_param",
    "customaudience_claim_objective",
    "customaudience_content_type",
    "customaudience_customer_file_source",
    "CustomAudienceDataSource_sub_type",
    "CustomAudienceDataSource_type",
    "CustomConversion_custom_event_type",
    "customconversionstats_aggregation_enum_param",
    "CustomConversionStatsResult_aggregation",
    "Destination_image_fetch_status",
    "Destination_visibility",
    "destinationoverride_details_type_enum_param",
    "EntityAtTextRange_type",
    "Event_category",
    "Event_online_event_format",
    "Event_type",
    "eventlive_videos_projection_enum_param",
    "eventlive_videos_spatial_audio_format_enum_param",
    "eventlive_videos_status_enum_param",
    "eventlive_videos_stereoscopic_mode_enum_param",
    "eventlive_videos_stream_type_enum_param",
    "extendedcreditowning_credit_allocation_configs_liability_type_enum_param",
    "extendedcreditowning_credit_allocation_configs_partition_type_enum_param",
    "extendedcreditowning_credit_allocation_configs_send_bill_to_enum_param",
    "Flight_image_fetch_status",
    "Flight_visibility",
    "flightoverride_details_type_enum_param",
    "group_icon_size",
    "group_join_setting",
    "group_post_permissions",
    "group_purpose",
    "groupfeed_backdated_time_granularity_enum_param",
    "groupfeed_formatting_enum_param",
    "groupfeed_place_attachment_setting_enum_param",
    "groupfeed_post_surfaces_blacklist_enum_param",
    "groupfeed_posting_to_redspace_enum_param",
    "groupfeed_target_surface_enum_param",
    "groupfeed_unpublished_content_type_enum_param",
    "groupgroups_group_type_enum_param",
    "groupgroups_join_setting_enum_param",
    "groupgroups_post_permissions_enum_param",
    "grouplive_videos_broadcast_status_enum_param",
    "grouplive_videos_projection_enum_param",
    "grouplive_videos_source_enum_param",
    "grouplive_videos_spatial_audio_format_enum_param",
    "grouplive_videos_status_enum_param",
    "grouplive_videos_stereoscopic_mode_enum_param",
    "grouplive_videos_stream_type_enum_param",
    "groupphotos_backdated_time_granularity_enum_param",
    "groupphotos_unpublished_content_type_enum_param",
    "grouppicture_type_enum_param",
    "groupvideos_container_type_enum_param",
    "groupvideos_content_category_enum_param",
    "groupvideos_formatting_enum_param",
    "groupvideos_original_projection_type_enum_param",
    "groupvideos_swap_mode_enum_param",
    "groupvideos_type_enum_param",
    "groupvideos_unpublished_content_type_enum_param",
    "groupvideos_upload_phase_enum_param",
    "highdemandperiod_budget_value_type",
    "HomeListing_image_fetch_status",
    "HomeListing_visibility",
    "homelistingoverride_details_type_enum_param",
    "Hotel_image_fetch_status",
    "Hotel_visibility",
    "hoteloverride_details_type_enum_param",
    "iggraphusermessages_messaging_type_enum_param",
    "iggraphusermessages_sender_action_enum_param",
    "iggraphusermessenger_profile_fields_enum_param",
    "iggraphusersubscribed_apps_subscribed_fields_enum_param",
    "iggraphuserwelcome_message_flows_eligible_platforms_enum_param",
    "igupcomingevent_notification_subtypes",
    "igupcomingevent_notification_target_time",
    "iguserexportforcaminsights_breakdown_enum_param",
    "iguserexportforcaminsights_metrics_enum_param",
    "iguserexportforcaminsights_period_enum_param",
    "iguserexportforcaminsights_time_range_enum_param",
    "imagecopyright_geo_ownership",
    "JobOpening_job_status",
    "JobOpening_platform_review_status",
    "JobOpening_review_rejection_reasons",
    "JobOpening_type",
    "leadgendata_status",
    "linkcomments_comment_privacy_value_enum_param",
    "livevideo_live_comment_moderation_setting",
    "livevideo_persistent_stream_key_status",
    "livevideo_status",
    "livevideo_stream_type",
    "livevideocomments_filter_enum_param",
    "livevideocomments_live_filter_enum_param",
    "livevideocomments_order_enum_param",
    "livevideoreactions_type_enum_param",
    "LocalServiceBusiness_availability",
    "LocalServiceBusiness_condition",
    "LocalServiceBusiness_image_fetch_status",
    "LocalServiceBusiness_visibility",
    "localservicebusinessoverride_details_type_enum_param",
    "mediainsights_breakdown_enum_param",
    "mediainsights_metric_enum_param",
    "mediainsights_period_enum_param",
    "mediatitle_content_category",
    "MediaTitle_image_fetch_status",
    "MediaTitle_visibility",
    "mediatitleoverride_details_type_enum_param",
    "offlineconversiondatasetaudiences_action_source_enum_param",
    "offlineconversiondatasetshared_accounts_action_source_enum_param",
    "offlineconversiondatasetshared_agencies_action_source_enum_param",
    "offlineconversiondatasetstats_aggr_time_enum_param",
    "offlineconversiondatasetstats_granularity_enum_param",
    "offlineconversiondatasetuploads_order_enum_param",
    "offlineconversiondatasetuploads_sort_by_enum_param",
    "OfflineProductItem_image_fetch_status",
    "OfflineProductItem_visibility",
    "offlineproductitemoverride_details_type_enum_param",
    "page_attire",
    "page_food_styles",
    "page_gen_ai_provenance_type",
    "page_pickup_options",
    "page_temporary_status",
    "pageab_tests_optimization_goal_enum_param",
    "pageagencies_permitted_tasks_enum_param",
    "pageassigned_users_tasks_enum_param",
    "pagecalls_action_enum_param",
    "pagecalls_platform_enum_param",
    "pagecalltoaction_android_destination_type",
    "pagecalltoaction_iphone_destination_type",
    "pagecalltoaction_type",
    "pagecalltoaction_web_destination_type",
    "pagecommerce_orders_filters_enum_param",
    "pagecommerce_orders_state_enum_param",
    "pageconversations_platform_enum_param",
    "pagecopyright_manual_claims_action_enum_param",
    "pagecopyright_manual_claims_action_reason_enum_param",
    "pagecopyright_manual_claims_match_content_type_enum_param",
    "pagecustom_user_settings_params_enum_param",
    "pageevents_event_state_filter_enum_param",
    "pageevents_time_filter_enum_param",
    "pageevents_type_enum_param",
    "pagefeed_backdated_time_granularity_enum_param",
    "pagefeed_formatting_enum_param",
    "pagefeed_place_attachment_setting_enum_param",
    "pagefeed_post_surfaces_blacklist_enum_param",
    "pagefeed_posting_to_redspace_enum_param",
    "pagefeed_target_surface_enum_param",
    "pagefeed_unpublished_content_type_enum_param",
    "pagefeed_with_enum_param",
    "pageimage_copyrights_geo_ownership_enum_param",
    "pageinsights_date_preset_enum_param",
    "pageinsights_period_enum_param",
    "pageleadgen_forms_locale_enum_param",
    "pagelive_videos_broadcast_status_enum_param",
    "pagelive_videos_projection_enum_param",
    "pagelive_videos_source_enum_param",
    "pagelive_videos_spatial_audio_format_enum_param",
    "pagelive_videos_status_enum_param",
    "pagelive_videos_stereoscopic_mode_enum_param",
    "pagelive_videos_stream_type_enum_param",
    "pagelocations_pickup_options_enum_param",
    "pagelocations_temporary_status_enum_param",
    "pagemedia_fingerprints_fingerprint_content_type_enum_param",
    "pagemessage_attachments_platform_enum_param",
    "pagemessage_templates_category_enum_param",
    "pagemessage_templates_status_enum_param",
    "pagemessages_messaging_type_enum_param",
    "pagemessages_notification_type_enum_param",
    "pagemessages_sender_action_enum_param",
    "pagemessages_suggestion_action_enum_param",
    "pagemessenger_profile_fields_enum_param",
    "pagemessenger_profile_platform_enum_param",
    "pagemoderate_conversations_actions_enum_param",
    "pagenlp_configs_model_enum_param",
    "pagenotification_messages_dev_support_developer_action_enum_param",
    "pagephotos_backdated_time_granularity_enum_param",
    "pagephotos_type_enum_param",
    "pagephotos_unpublished_content_type_enum_param",
    "pagepicture_type_enum_param",
    "pagepost_backdated_time_granularity",
    "pagepost_feed_story_visibility",
    "pagepost_timeline_visibility",
    "pagepostcomments_comment_privacy_value_enum_param",
    "pagepostcomments_filter_enum_param",
    "pagepostcomments_live_filter_enum_param",
    "pagepostcomments_order_enum_param",
    "pagepostinsights_date_preset_enum_param",
    "pagepostinsights_period_enum_param",
    "pagepostreactions_type_enum_param",
    "pageposts_with_enum_param",
    "pagepublished_posts_with_enum_param",
    "pagesecondary_receivers_platform_enum_param",
    "pagestories_status_enum_param",
    "pagesubscribed_apps_subscribed_fields_enum_param",
    "pagethreads_platform_enum_param",
    "pagevideo_copyright_rules_source_enum_param",
    "pagevideo_copyrights_content_category_enum_param",
    "pagevideo_copyrights_monitoring_type_enum_param",
    "pagevideo_reels_upload_phase_enum_param",
    "pagevideo_reels_video_state_enum_param",
    "pagevideo_stories_upload_phase_enum_param",
    "pagevideo_stories_video_state_enum_param",
    "pagevideos_container_type_enum_param",
    "pagevideos_content_category_enum_param",
    "pagevideos_formatting_enum_param",
    "pagevideos_original_projection_type_enum_param",
    "pagevideos_swap_mode_enum_param",
    "pagevideos_type_enum_param",
    "pagevideos_unpublished_content_type_enum_param",
    "pagevideos_upload_phase_enum_param",
    "pagevisitor_posts_with_enum_param",
    "pagewelcome_message_flows_eligible_platforms_enum_param",
    "paymentenginepaymentdispute_reason_enum_param",
    "paymentenginepaymentrefunds_reason_enum_param",
    "photocomments_comment_privacy_value_enum_param",
    "photocomments_filter_enum_param",
    "photocomments_live_filter_enum_param",
    "photocomments_order_enum_param",
    "photoinsights_date_preset_enum_param",
    "photoinsights_period_enum_param",
    "Placement_device_platforms",
    "Placement_effective_device_platforms",
    "placetopic_icon_size",
    "post_backdated_time_granularity",
    "post_feed_story_visibility",
    "post_timeline_visibility",
    "postcomments_comment_privacy_value_enum_param",
    "postcomments_filter_enum_param",
    "postcomments_live_filter_enum_param",
    "postcomments_order_enum_param",
    "postinsights_date_preset_enum_param",
    "postinsights_period_enum_param",
    "postreactions_type_enum_param",
    "privateliftstudyinstance_operation",
    "productcatalog_additional_vertical_option",
    "productcatalog_segment_use_cases",
    "productcatalogagencies_permitted_roles_enum_param",
    "productcatalogagencies_permitted_tasks_enum_param",
    "productcatalogassigned_users_tasks_enum_param",
    "productcatalogcategories_categorization_criteria_enum_param",
    "productcatalogcheck_batch_request_status_error_priority_enum_param",
    "productcatalogcreator_asset_creatives_moderation_status_enum_param",
    "productcatalogdata_sources_ingestion_source_type_enum_param",
    "ProductCatalogDiagnosticGroup_affected_entity",
    "ProductCatalogDiagnosticGroup_affected_features",
    "ProductCatalogDiagnosticGroup_severity",
    "ProductCatalogDiagnosticGroup_type",
    "productcatalogdiagnostics_affected_channels_enum_param",
    "productcatalogdiagnostics_affected_entities_enum_param",
    "productcatalogdiagnostics_affected_features_enum_param",
    "productcatalogdiagnostics_severities_enum_param",
    "productcatalogdiagnostics_types_enum_param",
    "productcatalogevent_stats_breakdowns_enum_param",
    "productcataloghotel_rooms_batch_standard_enum_param",
    "productcatalogitems_batch_item_sub_type_enum_param",
    "productcatalogmarketplace_partner_signals_event_name_enum_param",
    "productcatalogpricing_variables_batch_standard_enum_param",
    "productcatalogproduct_feeds_delimiter_enum_param",
    "productcatalogproduct_feeds_encoding_enum_param",
    "productcatalogproduct_feeds_feed_type_enum_param",
    "productcatalogproduct_feeds_ingestion_source_type_enum_param",
    "productcatalogproduct_feeds_item_sub_type_enum_param",
    "productcatalogproduct_feeds_override_type_enum_param",
    "productcatalogproduct_feeds_quoted_fields_mode_enum_param",
    "productcatalogproducts_age_group_enum_param",
    "productcatalogproducts_availability_enum_param",
    "productcatalogproducts_commerce_tax_category_enum_param",
    "productcatalogproducts_condition_enum_param",
    "productcatalogproducts_error_priority_enum_param",
    "productcatalogproducts_error_type_enum_param",
    "productcatalogproducts_gender_enum_param",
    "productcatalogproducts_marked_for_product_launch_enum_param",
    "productcatalogproducts_origin_country_enum_param",
    "productcatalogproducts_visibility_enum_param",
    "productcatalogproducts_wa_compliance_category_enum_param",
    "productcatalogvehicles_availability_enum_param",
    "productcatalogvehicles_body_style_enum_param",
    "productcatalogvehicles_condition_enum_param",
    "productcatalogvehicles_drivetrain_enum_param",
    "productcatalogvehicles_fuel_type_enum_param",
    "productcatalogvehicles_state_of_vehicle_enum_param",
    "productcatalogvehicles_transmission_enum_param",
    "productcatalogvehicles_vehicle_type_enum_param",
    "ProductEventStat_device_type",
    "ProductEventStat_event",
    "ProductFeed_delimiter",
    "productfeed_delimiter",
    "productfeed_encoding",
    "ProductFeed_ingestion_source_type",
    "ProductFeed_quoted_fields_mode",
    "productfeed_quoted_fields_mode",
    "productfeedproducts_error_priority_enum_param",
    "productfeedproducts_error_type_enum_param",
    "productfeedrules_rule_type_enum_param",
    "ProductFeedSchedule_interval",
    "ProductFeedUpload_input_method",
    "ProductFeedUploadError_affected_surfaces",
    "ProductFeedUploadError_severity",
    "productfeeduploaderrors_error_priority_enum_param",
    "productgroup_deletion_method",
    "productgroupproducts_age_group_enum_param",
    "productgroupproducts_availability_enum_param",
    "productgroupproducts_commerce_tax_category_enum_param",
    "productgroupproducts_condition_enum_param",
    "productgroupproducts_gender_enum_param",
    "productgroupproducts_marked_for_product_launch_enum_param",
    "productgroupproducts_visibility_enum_param",
    "ProductItem_age_group",
    "productitem_age_group",
    "ProductItem_availability",
    "productitem_availability",
    "ProductItem_capability_to_review_status",
    "productitem_commerce_tax_category",
    "ProductItem_condition",
    "productitem_condition",
    "ProductItem_gender",
    "productitem_gender",
    "ProductItem_image_fetch_status",
    "productitem_marked_for_product_launch",
    "productitem_origin_country",
    "ProductItem_review_status",
    "ProductItem_shipping_weight_unit",
    "ProductItem_video_fetch_status",
    "ProductItem_visibility",
    "productitem_visibility",
    "productitem_wa_compliance_category",
    "ProductItemLandingPageData_availability",
    "productitemoverride_details_type_enum_param",
    "productsetproducts_error_priority_enum_param",
    "productsetproducts_error_type_enum_param",
    "Profile_profile_type",
    "profilepicture_type_enum_param",
    "rtbdynamicpostcomments_filter_enum_param",
    "rtbdynamicpostcomments_live_filter_enum_param",
    "rtbdynamicpostcomments_order_enum_param",
    "shadowigmedia_boostable_media_callsite",
    "shadowigmediainsights_breakdown_enum_param",
    "shadowigmediainsights_metric_enum_param",
    "shadowigmediainsights_period_enum_param",
    "shadowiguserinsights_breakdown_enum_param",
    "shadowiguserinsights_metric_enum_param",
    "shadowiguserinsights_metric_type_enum_param",
    "shadowiguserinsights_period_enum_param",
    "shadowiguserinsights_timeframe_enum_param",
    "shadowiguserupcoming_events_notification_subtypes_enum_param",
    "storiesinsights_metric_enum_param",
    "Targeting_device_platforms",
    "Targeting_effective_device_platforms",
    "ThirdPartyPartnerLiftRequest_status",
    "ThirdPartyPartnerPanelRequest_status",
    "ThirdPartyPartnerPanelRequest_study_type",
    "ThirdPartyPartnerPanelScheduled_status",
    "ThirdPartyPartnerPanelScheduled_study_type",
    "ThirdPartyPartnerViewabilityRequest_metric",
    "ThirdPartyPartnerViewabilityRequest_platform",
    "ThirdPartyPartnerViewabilityRequest_status",
    "TransactableItem_image_fetch_status",
    "TransactableItem_visibility",
    "transactableitemoverride_details_type_enum_param",
    "Transaction_product_type",
    "unifiedthreadmessages_source_enum_param",
    "url_scopes",
    "user_local_news_megaphone_dismiss_status",
    "user_local_news_subscription_status",
    "userad_studies_type_enum_param",
    "userbusinesses_survey_business_type_enum_param",
    "userbusinesses_timezone_id_enum_param",
    "userbusinesses_vertical_enum_param",
    "userconversations_platform_enum_param",
    "userevents_type_enum_param",
    "userfeed_backdated_time_granularity_enum_param",
    "userfeed_formatting_enum_param",
    "userfeed_place_attachment_setting_enum_param",
    "userfeed_post_surfaces_blacklist_enum_param",
    "userfeed_posting_to_redspace_enum_param",
    "userfeed_target_surface_enum_param",
    "userfeed_unpublished_content_type_enum_param",
    "userfundraisers_fundraiser_type_enum_param",
    "userinsights_breakdown_enum_param",
    "userinsights_metric_enum_param",
    "userinsights_metric_type_enum_param",
    "userinsights_period_enum_param",
    "userinsights_timeframe_enum_param",
    "userlive_videos_broadcast_status_enum_param",
    "userlive_videos_projection_enum_param",
    "userlive_videos_source_enum_param",
    "userlive_videos_spatial_audio_format_enum_param",
    "userlive_videos_status_enum_param",
    "userlive_videos_stereoscopic_mode_enum_param",
    "userlive_videos_stream_type_enum_param",
    "usernotifications_filtering_enum_param",
    "usernotifications_type_enum_param",
    "userpermissions_status_enum_param",
    "userphotos_backdated_time_granularity_enum_param",
    "userphotos_type_enum_param",
    "userphotos_unpublished_content_type_enum_param",
    "userpicture_type_enum_param",
    "uservideos_container_type_enum_param",
    "uservideos_content_category_enum_param",
    "uservideos_formatting_enum_param",
    "uservideos_original_projection_type_enum_param",
    "uservideos_swap_mode_enum_param",
    "uservideos_type_enum_param",
    "uservideos_unpublished_content_type_enum_param",
    "uservideos_upload_phase_enum_param",
    "vehicle_availability",
    "vehicle_body_style",
    "vehicle_condition",
    "vehicle_drivetrain",
    "vehicle_fuel_type",
    "Vehicle_image_fetch_status",
    "vehicle_state_of_vehicle",
    "vehicle_transmission",
    "vehicle_vehicle_type",
    "Vehicle_visibility",
    "VehicleOffer_image_fetch_status",
    "VehicleOffer_visibility",
    "vehicleofferoverride_details_type_enum_param",
    "vehicleoverride_details_type_enum_param",
    "video_backdated_time_granularity",
    "video_content_category",
    "videocomments_comment_privacy_value_enum_param",
    "videocomments_filter_enum_param",
    "videocomments_live_filter_enum_param",
    "videocomments_order_enum_param",
    "videocopyright_content_category",
    "videocopyright_monitoring_type",
    "videopoll_action",
    "VideoPoll_status",
    "videovideo_insights_period_enum_param",
    "WhatsAppBusinessAccount_business_verification_status",
    "whatsappbusinessaccountassigned_users_tasks_enum_param",
    "whatsappbusinessaccountcall_analytics_dimensions_enum_param",
    "whatsappbusinessaccountcall_analytics_directions_enum_param",
    "whatsappbusinessaccountcall_analytics_granularity_enum_param",
    "whatsappbusinessaccountcall_analytics_metric_types_enum_param",
    "whatsappbusinessaccountconversation_analytics_conversation_categories_enum_param",
    "whatsappbusinessaccountconversation_analytics_conversation_directions_enum_param",
    "whatsappbusinessaccountconversation_analytics_conversation_types_enum_param",
    "whatsappbusinessaccountconversation_analytics_dimensions_enum_param",
    "whatsappbusinessaccountconversation_analytics_granularity_enum_param",
    "whatsappbusinessaccountconversation_analytics_metric_types_enum_param",
    "whatsappbusinessaccountflows_categories_enum_param",
    "whatsappbusinessaccountmessage_template_previews_button_types_enum_param",
    "whatsappbusinessaccountmessage_template_previews_category_enum_param",
    "whatsappbusinessaccountmessage_templates_category_enum_param",
    "whatsappbusinessaccountmessage_templates_display_format_enum_param",
    "whatsappbusinessaccountmessage_templates_parameter_format_enum_param",
    "whatsappbusinessaccountmessage_templates_quality_score_enum_param",
    "whatsappbusinessaccountmessage_templates_status_enum_param",
    "whatsappbusinessaccountmessage_templates_sub_category_enum_param",
    "whatsappbusinessaccountpayment_configuration_provider_name_enum_param",
    "whatsappbusinessaccountpricing_analytics_dimensions_enum_param",
    "whatsappbusinessaccountpricing_analytics_granularity_enum_param",
    "whatsappbusinessaccountpricing_analytics_metric_types_enum_param",
    "whatsappbusinessaccountpricing_analytics_pricing_categories_enum_param",
    "whatsappbusinessaccountpricing_analytics_pricing_types_enum_param",
    "whatsappbusinessaccounttemplate_analytics_granularity_enum_param",
    "whatsappbusinessaccounttemplate_analytics_metric_types_enum_param",
    "whatsappbusinessaccounttemplate_analytics_product_type_enum_param",
    "whatsappbusinessaccounttemplate_group_analytics_granularity_enum_param",
    "whatsappbusinessaccounttemplate_group_analytics_metric_types_enum_param",
    "whatsappbusinessaccountupsert_message_templates_category_enum_param",
    "WhatsAppBusinessPartnerClientVerificationSubmission_rejection_reasons",
    "WhatsAppBusinessPartnerClientVerificationSubmission_verification_status",
    "WhatsAppBusinessPreVerifiedPhoneNumber_code_verification_status",
    "whatsappbusinesspreverifiedphonenumberrequest_code_code_method_enum_param",
    # Field Literals
    "AdField",
    "AdAccountField",
    "AdAccountAAACompatibleAdObjectsField",
    "AdAccountAAASimilarCampaignsField",
    "AdAccountAdLimitsInsightsField",
    "AdAccountAdRulesCountByTypeField",
    "AdAccountAdRulesHistoryField",
    "AdAccountAdsRecommendedAudiosField",
    "AdAccountAdVolumeField",
    "AdAccountAgencyFeeConfigField",
    "AdAccountAllPaymentMethodsField",
    "AdAccountAmountSpentHistoryField",
    "AdAccountAppSetupRequirementsField",
    "AdAccountASLScheduleField",
    "AdAccountBankInfoListField",
    "AdAccountBillingDatePreferenceField",
    "AdAccountBusinessConstraintsField",
    "AdAccountCampaignAttributionOptionInfoField",
    "AdAccountCreationRequestField",
    "AdAccountCustomAudienceLimitsField",
    "AdAccountDefaultDestinationField",
    "AdAccountDefaultObjectiveField",
    "AdAccountDeliveryEstimateField",
    "AdAccountDsaRecommendationsField",
    "AdAccountIosFourteenCampaignLimitsField",
    "AdAccountLiveVideoAdvertiserField",
    "AdAccountMatchedSearchApplicationsEdgeDataField",
    "AdAccountMaxBidField",
    "AdAccountOptimizationGoalsAEMv2EligibilityField",
    "AdAccountPaymentDetailsField",
    "AdAccountPaymentOptionsField",
    "AdAccountPrepayDetailsField",
    "AdAccountPromotableObjectsField",
    "AdAccountPromotionProgressBarField",
    "AdAccountReachEstimateField",
    "AdAccountRecommendationsField",
    "AdAccountRecommendedCamapaignBudgetField",
    "AdAccountRelatedIcoStudyField",
    "AdAccountSmartSuggestedAdsField",
    "AdAccountSpendCapChangeHistoryField",
    "AdAccountSpendLimitField",
    "AdAccountSubscribedAppsField",
    "AdAccountSubsidyAmountDetailsField",
    "AdAccountTargetingUnifiedField",
    "AdAccountTrackingDataField",
    "AdAccountURLForAssetExtractionField",
    "AdAccountUserField",
    "AdAccountUserPermissionsField",
    "AdAccountUserSettingsField",
    "AdAccountYouthAdsAdvertiserField",
    "AdActivityField",
    "AdAssetBodyField",
    "AdAssetCallToActionTypeField",
    "AdAssetCustomizationRuleCustomizationSpecField",
    "AdAssetDescriptionField",
    "AdAssetFeedAdditionalDataField",
    "AdAssetFeedAdditionalDataPageNudgeMessageField",
    "AdAssetFeedSpecField",
    "AdAssetFeedSpecAssetCustomizationRuleField",
    "AdAssetFeedSpecAssetLabelField",
    "AdAssetFeedSpecBodyField",
    "AdAssetFeedSpecCallToActionField",
    "AdAssetFeedSpecCaptionField",
    "AdAssetFeedSpecCarouselField",
    "AdAssetFeedSpecCarouselChildAttachmentField",
    "AdAssetFeedSpecDescriptionField",
    "AdAssetFeedSpecEventsField",
    "AdAssetFeedSpecGroupRuleField",
    "AdAssetFeedSpecImageField",
    "AdAssetFeedSpecLinkURLField",
    "AdAssetFeedSpecTitleField",
    "AdAssetFeedSpecVideoField",
    "AdAssetImageField",
    "AdAssetLinkURLField",
    "AdAssetMessageExtensionsField",
    "AdAssetOnsiteDestinationsField",
    "AdAssetTargetRuleTargetingField",
    "AdAssetTitleField",
    "AdAssetVideoField",
    "AdAsyncRequestField",
    "AdAsyncRequestSetField",
    "AdAsyncRequestSetNotificationResultField",
    "AdBidAdjustmentsField",
    "AdCampaignBidConstraintField",
    "AdCampaignConversionValueExpressionSpecField",
    "AdCampaignDeliveryEstimateField",
    "AdCampaignDeliveryStatsField",
    "AdCampaignDeliveryStatsUnsupportedReasonsField",
    "AdCampaignFrequencyControlSpecsField",
    "AdCampaignGroupAdvantageStateField",
    "AdCampaignGroupAgencyFeeConfigForApiField",
    "AdCampaignGroupIncrementalConversionOptimizationConfigField",
    "AdCampaignGroupMetricsMetadataField",
    "AdCampaignGroupStatsField",
    "AdCampaignGroupStructureTreeField",
    "AdCampaignIssuesInfoField",
    "AdCampaignLearningStageInfoField",
    "AdCampaignMetricsMetadataField",
    "AdCampaignMultiAdsField",
    "AdCampaignOptimizationEventField",
    "AdCampaignPacedBidInfoField",
    "AdCampaignStatsField",
    "AdColumnSizesField",
    "AdContractField",
    "AdConversionsField",
    "AdConversionValuesField",
    "AdCreationPackageConfigField",
    "AdCreativeField",
    "AdCreativeAdDisclaimerField",
    "AdCreativeAssetGroupsSpecField",
    "AdCreativeBrandedContentAdsField",
    "AdCreativeBrandedContentAdsPartnersField",
    "AdCreativeCollectionThumbnailInfoField",
    "AdCreativeContextualMultiAdsField",
    "AdCreativeDegreesOfFreedomSpecField",
    "AdCreativeDestinationSpecField",
    "AdCreativeFacebookBrandedContentField",
    "AdCreativeFeatureActionMetadataField",
    "AdCreativeFeatureCustomizationsField",
    "AdCreativeFeatureDetailsField",
    "AdCreativeFeaturesSpecField",
    "AdCreativeFormatTransformationSpecField",
    "AdCreativeGenerativeAssetSpecField",
    "AdCreativeHouseShopsAdsSellerContentField",
    "AdCreativeImageDataMediaElementsField",
    "AdCreativeInsightsField",
    "AdCreativeInstagramBrandedContentField",
    "AdCreativeInteractiveComponentsSpecField",
    "AdCreativeLinkDataField",
    "AdCreativeLinkDataAppLinkSpecField",
    "AdCreativeLinkDataCallToActionField",
    "AdCreativeLinkDataCallToActionValueField",
    "AdCreativeLinkDataChildAttachmentField",
    "AdCreativeLinkDataCustomOverlaySpecField",
    "AdCreativeLinkDataImageLayerSpecField",
    "AdCreativeLinkDataImageOverlaySpecField",
    "AdCreativeLinkDataMomentField",
    "AdCreativeLinkDataSponsorshipInfoSpecField",
    "AdCreativeLinkDataTemplateVideoSpecField",
    "AdCreativeMarketingMessageStructuredSpecField",
    "AdCreativeMediaSourcingSpecField",
    "AdCreativeObjectStorySpecField",
    "AdCreativeOmnichannelLinkSpecField",
    "AdCreativePhotoDataField",
    "AdCreativePhotoDataMediaElementsField",
    "AdCreativePlaceDataField",
    "AdCreativePlatformCustomizationField",
    "AdCreativePortraitCustomizationsField",
    "AdCreativePostClickConfigurationField",
    "AdCreativeProductDataField",
    "AdCreativePromotionMetadataSpecField",
    "AdCreativeRecommenderSettingsField",
    "AdCreativeRegionalRegulationDisclaimerField",
    "AdCreativeRewardInfoField",
    "AdCreativeShopSpecField",
    "AdCreativeSiteLinksSpecField",
    "AdCreativeSourcingSpecField",
    "AdCreativeStaticFallbackSpecField",
    "AdCreativeTemplateURLSpecField",
    "AdCreativeTextDataField",
    "AdCreativeVideoDataField",
    "AdCreativeVideoDataCustomOverlaySpecField",
    "AdCreativeVideoDataMediaElementsField",
    "AdCreativeWhatsAppChannelSpecField",
    "AdCustomDerivedMetricsField",
    "AdCustomizationRuleSpecField",
    "AdDefaultValuesField",
    "AdDraftField",
    "AdDynamicCreativeField",
    "AdEntityTargetSpendField",
    "AdExportPresetField",
    "AdgroupFacebookFeedbackField",
    "AdgroupIssuesInfoField",
    "AdgroupMetadataField",
    "AdgroupPlacementSpecificReviewFeedbackField",
    "AdgroupReviewFeedbackField",
    "AdImageField",
    "AdjacentContentDeliveryReportField",
    "AdKeywordsField",
    "AdKeywordStatsField",
    "AdKpiShiftField",
    "AdLabelField",
    "AdLightAdgroupField",
    "AdLightCampaignField",
    "AdLightCampaignGroupField",
    "AdLimitsEnforcementDataField",
    "AdLimitSettingField",
    "AdMonetizationPropertyField",
    "AdNetworkAnalyticsAsyncQueryExportField",
    "AdNetworkAnalyticsAsyncQueryResultField",
    "AdNetworkAnalyticsSyncQueryResultField",
    "AdPlacementField",
    "AdPlacePageSetField",
    "AdPlacePageSetMetadataField",
    "AdPreviewField",
    "AdPromotedObjectField",
    "AdProposalField",
    "AdRecommendationField",
    "AdRecommendationDataField",
    "AdReportRunField",
    "AdRuleField",
    "AdRuleEvaluationSpecField",
    "AdRuleExecutionOptionsField",
    "AdRuleExecutionSpecField",
    "AdRuleFiltersField",
    "AdRuleHistoryField",
    "AdRuleHistoryResultField",
    "AdRuleHistoryResultActionField",
    "AdRuleScheduleField",
    "AdRuleScheduleSpecField",
    "AdRuleTriggerField",
    "AdsActionStatsField",
    "AdsAnomalyDetectionField",
    "AdSavedKeywordsField",
    "AdSavedLocationField",
    "AdSavedReportField",
    "AdsConversionGoalField",
    "AdsCreationSavedStateField",
    "AdsCustomPivotsPreviewField",
    "AdsDatasetField",
    "AdsEligibilityField",
    "AdSetField",
    "AdsGuidanceQEExposureField",
    "AdsHistogramStatsField",
    "AdsImageCropsField",
    "AdsInsightsField",
    "AdsMcmeConversionField",
    "AdsNamingTemplateField",
    "AdsOptimalDeliveryGrowthOpportunityField",
    "AdsPaymentCycleField",
    "AdsPivotRulesField",
    "AdsPixelField",
    "AdsPixelCapabilityOverrideField",
    "AdsPixelCAPIIntegrationQualityField",
    "AdsPixelDeliveryRecommendationsField",
    "AdsPixelDomainControlRuleField",
    "AdsPixelDomainLastFiredTimeField",
    "AdsPixelEventLastFiredTimeField",
    "AdsPixelEventPredictionField",
    "AdsPixelEventSuggestionRuleField",
    "AdsPixelItemPriceField",
    "AdsPixelMicrodataStatsField",
    "AdsPixelRawFiresResultField",
    "AdsPixelRealTimeEventLogResultField",
    "AdsPixelRecentEventsResultField",
    "AdsPixelSignalsIWLFeedbackNuxField",
    "AdsPixelSignalsIWLNuxField",
    "AdsPixelStatsField",
    "AdsPixelStatsResultField",
    "AdsQuickViewsField",
    "AdsReportBuilderField",
    "AdsReportBuilderExportCoreField",
    "AdsReportBuilderMMMReportField",
    "AdsReportBuilderMMMReportSchedulerField",
    "AdsReportBuilderSavedReportField",
    "AdsSegmentsField",
    "AdsSignalDiagnosticIssueField",
    "AdsStartYourDayWidgetField",
    "AdsTabularField",
    "AdsTargetingInsightsField",
    "AdsTextSuggestionsField",
    "AdStudyField",
    "AdStudyCellField",
    "AdStudyObjectiveField",
    "AdStudyObjectiveIDField",
    "AdStudyObjectiveOffsiteDatasetsField",
    "AdsUserSettingsField",
    "AdsValueAdjustmentRuleCollectionField",
    "AdToplineField",
    "AdToplineDetailField",
    "AdvAInstanceField",
    "AdvertiserVerificationStatusField",
    "AdVideoField",
    "AdVolumeField",
    "AgencyClientDeclarationField",
    "AgeRangeField",
    "AIGeneratedProductImageField",
    "AlbumField",
    "ALMAdAccountInfoField",
    "ALMEndAdvertiserInfoField",
    "ALMEventField",
    "ALMGuidanceField",
    "ALMGuidanceMetricsField",
    "AMOneshopSettingsField",
    "AnalyticsConfigField",
    "AnalyticsEntityUserConfigField",
    "AnalyticsFunnelQueryResultField",
    "AnalyticsPlatformMetricsConfigField",
    "AnalyticsQueryResultField",
    "AnalyticsSegmentField",
    "AnalyticsUserConfigField",
    "ANBlockedBICategoryField",
    "AndroidAppLinkField",
    "ApacMonSellerStatusAPIContainerField",
    "AppEventConfigField",
    "ApplicationField",
    "AppLinksField",
    "AppOptimizedCustomEventsField",
    "AppPublisherField",
    "AppRequestField",
    "AppRequestFormerRecipientField",
    "ArAdsDataContainerField",
    "AREffectField",
    "AssignedUserField",
    "AsyncRequestField",
    "AsyncSessionField",
    "AttributionSpecField",
    "AudienceFunnelField",
    "AudienceOverlapField",
    "AudiencePermissionField",
    "AudiencePermissionForActionsField",
    "AudienceSharingAccountValidField",
    "AudienceSharingRecipientAccountsField",
    "AudioAssetField",
    "AudioCopyrightField",
    "AudioIsrcField",
    "AudioReleaseField",
    "AudioSubLabelField",
    "AudioVisualReferenceMatchField",
    "AuthLinkField",
    "AutomotiveModelField",
    "AvatarField",
    "AvatarProfilePictureField",
    "BAPIDomainField",
    "BCPCampaignField",
    "BidScheduleField",
    "BizInboxOffsiteEmailAccountField",
    "BlindPigField",
    "BlockedUserInfoField",
    "BrandedContentAdErrorField",
    "BrandedContentEligibleSponsorIDsField",
    "BrandedContentShadowIGMediaIDField",
    "BrandedContentShadowIGUserIDField",
    "BrandRequestField",
    "BrandSafetyBlockListUsageField",
    "BrandSafetyCampaignConfigField",
    "BrandSafetyDownloadableField",
    "BroadTargetingCategoriesField",
    "BusinessField",
    "BusinessAdAccountRequestField",
    "BusinessAdsReportingReportSpecsField",
    "BusinessAdvertisableApplicationsResultField",
    "BusinessAgreementField",
    "BusinessApplicationRequestField",
    "BusinessAssetGroupField",
    "BusinessAssetSharingAgreementField",
    "BusinessCreativeField",
    "BusinessCreativeFolderField",
    "BusinessCreativeInsightsField",
    "BusinessFranchiseConfigField",
    "BusinessImageField",
    "BusinessImageTBusinessFolderPathItemField",
    "BusinessManagedPartnerEligibilityField",
    "BusinessMediaAdPlacementValidationResultField",
    "BusinessObjectField",
    "BusinessObjectTransferOwnershipAgreementField",
    "BusinessOwnedObjectOnBehalfOfRequestField",
    "BusinessPageRequestField",
    "BusinessPartnerPremiumOptionsField",
    "BusinessProductCatalogTOSField",
    "BusinessProjectField",
    "BusinessRequestField",
    "BusinessRoleRequestField",
    "BusinessSettingLogsDataField",
    "BusinessTagField",
    "BusinessTrafficAnalysisReportField",
    "BusinessUserField",
    "BusinessVideoField",
    "BusinessVideoTBusinessFolderPathItemField",
    "CalibratorExistingRuleField",
    "CallAdsPhoneDataField",
    "CampaignField",
    "CampaignActionsDataField",
    "CampaignGroupBrandConfigurationField",
    "CampaignGroupCollaborativeAdsPartnerInfoField",
    "CanvasField",
    "CanvasAdSettingsField",
    "CanvasBodyElementField",
    "CanvasCollectionThumbnailField",
    "CanvasDynamicSettingField",
    "CanvasPreviewField",
    "CanvasTemplateField",
    "CASSSetupOfflineEventSetProgressField",
    "CatalogAdvertiserInsightField",
    "CatalogBasedTargetingField",
    "CatalogCollectionField",
    "CatalogContentVersionConfigField",
    "CatalogItemAppLinksField",
    "CatalogItemChannelsToIntegrityStatusField",
    "CatalogItemOverrideField",
    "CatalogItemRejectionReasonsField",
    "CatalogItemValidationErrorListField",
    "CatalogSmartPixelSettingsField",
    "CatalogSubVerticalListField",
    "CatalogWebsiteOnboardingSettingsField",
    "CatalogWebsiteSettingsField",
    "ChatPluginField",
    "CheckBatchRequestStatusField",
    "ChildEventField",
    "ChinaBusinessOnboardingVettingRequestField",
    "CloudbridgeDatasetStatusField",
    "CloudGameField",
    "CollaborativeAdsPartnerBusinessesField",
    "CollaborativeAdsPartnerInfoListItemField",
    "CollaborativeAdsShareSettingsField",
    "ColumnSuggestionsField",
    "CommentField",
    "CommerceMerchantSettingsField",
    "CommerceMerchantSettingsSetupStatusField",
    "CommerceOrderField",
    "CommerceOrderTransactionDetailField",
    "CommercePayoutField",
    "CommerceSettingsField",
    "ConnectionsTargetingField",
    "ContactsMessengerSyncConfigField",
    "ContentBlockListField",
    "ContentDeliveryReportField",
    "ContentPublishingLimitResponseField",
    "ContextualBundlingSpecField",
    "ConversionActionQueryField",
    "ConversionHealthKPIField",
    "CopyrightAttributionInsightsField",
    "CopyrightAudioAssetField",
    "CopyrightMediaMisuseField",
    "CopyrightOwnershipTransferField",
    "CopyrightReferenceContainerField",
    "CoverPhotoField",
    "CPASAdCreationTemplateField",
    "CPASAdvertiserPartnershipRecommendationField",
    "CPASBusinessSetupConfigField",
    "CPASCollaborationRequestField",
    "CPASLsbImageBankField",
    "CPASMerchantConfigField",
    "CPASParentCatalogSettingsField",
    "CPASSetupField",
    "CPASSetupPageStructureProgressField",
    "CreativeAssetTagField",
    "CreativeHistoryField",
    "CreativeMulticellTestConfigField",
    "CreatorAssetCreativeField",
    "CreditCardField",
    "CreditPartitionActionOptionsField",
    "CRMAddressField",
    "CTWAWhatsAppNumbersInfoField",
    "CTXDefaultOptimizationConfigField",
    "CTXOptimizationEligibilityField",
    "CTXPartnerAppWelcomeMessageFlowField",
    "CurrencyField",
    "CurrencyAmountField",
    "CustomAudienceField",
    "CustomAudienceAdAccountField",
    "CustomAudienceCapabilitiesField",
    "CustomAudienceDataSourceField",
    "CustomAudienceGroupField",
    "CustomAudienceHealthField",
    "CustomAudienceIntegrityFlagsAndAppealStatusField",
    "CustomAudienceSaltsField",
    "CustomAudienceSessionField",
    "CustomAudienceSharedAccountCampaignInfoField",
    "CustomAudiencesharedAccountInfoField",
    "CustomAudienceSharingStatusField",
    "CustomAudienceStatusField",
    "CustomAudiencesTOSField",
    "CustomConversionField",
    "CustomConversionActivitiesField",
    "CustomConversionStatsResultField",
    "CustomUserSettingsField",
    "DACheckField",
    "DatasetField",
    "DayPartField",
    "DeliveryCheckField",
    "DeliveryCheckExtraInfoField",
    "DeliveryInfoField",
    "DeliveryStatusField",
    "DeliveryWindowField",
    "DestinationField",
    "DirectDebitField",
    "DraftPostField",
    "DynamicARMetadataField",
    "DynamicContentSetField",
    "DynamicItemDisplayBundleField",
    "DynamicItemDisplayBundleFolderField",
    "DynamicPostChildAttachmentField",
    "DynamicPriceConfigByDateField",
    "DynamicVideoMetadataField",
    "EducationExperienceField",
    "EmailImportField",
    "EndStudyCriteriaField",
    "EngagementField",
    "EntityAtTextRangeField",
    "EntWithSponsorField",
    "EventField",
    "EventExternalTicketInfoField",
    "EventRegistrationSettingField",
    "EventSourceGroupField",
    "EventTicketSettingField",
    "EventTicketTierField",
    "EventTourField",
    "ExperienceField",
    "ExtendedCreditField",
    "ExtendedCreditAllocationConfigField",
    "ExtendedCreditApplicationField",
    "ExtendedCreditEmailField",
    "ExtendedCreditInfoField",
    "ExtendedCreditInvoiceGroupField",
    "ExternalEventSourceField",
    "ExternalEventSourceCPASEventsDebuggingField",
    "ExternalEventSourceCPASEventsDebuggingInfoField",
    "ExternalMerchantSettingsField",
    "FAMEKumoField",
    "FantasyGameField",
    "FavoriteCatalogField",
    "FBImageCopyrightMatchField",
    "FBLiteToNTTransitionsField",
    "FBPageAndInstagramAccountField",
    "FBPayButtonLoginField",
    "FinanceObjectField",
    "FlexibleTargetingField",
    "FlightField",
    "FranchiseProgramField",
    "FranchiseProgramMemberField",
    "FundingSourceDetailsField",
    "FundingSourceDetailsCouponField",
    "FundingSourceDetailsCouponTieringField",
    "FundraiserPersonToCharityField",
    "GeoGatingPolicyField",
    "GroupField",
    "HasLeadAccessField",
    "HighDemandPeriodField",
    "HighDemandPeriodTimeSuggestionWeeklySegmentField",
    "HomeListingField",
    "HotelField",
    "HotelRoomField",
    "HoursField",
    "IDNameField",
    "IGAccessTokenForIGOnlyAPIField",
    "IGBCAdsPermissionField",
    "IGBoostMediaAdField",
    "IGCommentField",
    "IGCommentFromUserField",
    "IGMediaField",
    "IGMediaBoostEligibilityInfoField",
    "IGMediaForIGOnlyAPIField",
    "IGProductTaggingInvalidationErrorField",
    "IGRefreshAccessTokenForIGOnlyAPIField",
    "IGResumableVideoUploadStatusField",
    "IGShoppingProductAppealField",
    "IGShoppingReviewStatusField",
    "IGShoppingReviewStatusOnsiteEligibilityField",
    "IGShoppingReviewStatusReasonWithHelpMessageField",
    "IGUpcomingEventField",
    "IGUserField",
    "IGUserExportForCAMField",
    "IGUserForIGOnlyAPIField",
    "IGUserMessengerProfileField",
    "IGUserSubscribedAppsDataField",
    "IGVideoCopyrightCheckMatchesInformationField",
    "IGVideoCopyrightCheckStatusField",
    "ImageCopyrightField",
    "ImageCopyrightDisputeField",
    "ImageReferenceMatchField",
    "InsightsResultField",
    "InsightsValueField",
    "InstagramBusinessAssetField",
    "InstagramInsightsResultField",
    "InstagramInsightsValueField",
    "InstagramRelatedProductTagsField",
    "InstagramShoppingMerchantReviewMessageField",
    "InstagramThreadField",
    "InstagramUserField",
    "InstantArticleInsightsQueryResultField",
    "IosAppLinkField",
    "IPObjectField",
    "JobOpeningField",
    "KeyValueField",
    "LeadField",
    "LeadGenAppointmentBookingInfoField",
    "LeadGenAppointmentSlotsByDayField",
    "LeadGenAppointmentTimeSlotField",
    "LeadGenClientValidationRulesField",
    "LeadGenConditionalQuestionsGroupChoicesField",
    "LeadGenConditionalQuestionsGroupQuestionsField",
    "LeadGenContextCardField",
    "LeadGenCustomDisclaimerField",
    "LeadGenCustomDisclaimerBodyField",
    "LeadGenDataDraftField",
    "LeadGenDirectCRMIntegrationConfigField",
    "LeadGenDraftQuestionField",
    "LeadgenFormField",
    "LeadGenFormPreviewDetailsField",
    "LeadGenLegalContentField",
    "LeadGenLegalContentCheckboxField",
    "LeadGenPostSubmissionCheckResultField",
    "LeadGenPrivacyPolicyField",
    "LeadGenQuestionField",
    "LeadGenQuestionOptionField",
    "LeadGenThankYouPageField",
    "LeadGenThankYouPageGatedFileField",
    "LeadGenThankYouPageGatedPromoField",
    "LeadGenURLEntityAtRangesField",
    "LifeEventField",
    "LinkField",
    "LinkedInstagramAccountDataField",
    "LiveVideoField",
    "LiveVideoAdBreakConfigField",
    "LiveVideoAdCampaignConfigField",
    "LiveVideoErrorField",
    "LiveVideoInputStreamField",
    "LiveVideoRecommendedEncoderSettingsField",
    "LiveVideoTargetingField",
    "LocalServiceBusinessField",
    "LocationField",
    "LookalikeSpecField",
    "LoomConfigField",
    "MailingAddressField",
    "ManagedPartnerBusinessField",
    "ManagedPartnerExtendedCreditField",
    "ManagementSiteLinkField",
    "MCExperienceConfigForApiField",
    "McomInvoiceBankAccountField",
    "McomInvoiceDetailsField",
    "McomInvoiceListsField",
    "McomInvoiceStatusField",
    "McomOnboardingStatusField",
    "McomPayoutsField",
    "MeasurementReportField",
    "MediaCopyrightAttributionField",
    "MediaCopyrightUpdateRecordField",
    "MediaFingerprintField",
    "MediaTitleField",
    "MerchantComplianceField",
    "MessageDeliveryEstimateField",
    "MessagingAppsInfoField",
    "MessagingFeatureReviewField",
    "MessagingFeatureStatusField",
    "MessengerAdsPartialAutomatedStepListField",
    "MessengerBusinessTemplateField",
    "MessengerCallSettingsField",
    "MessengerDestinationPageWelcomeMessageField",
    "MessengerProfileField",
    "MinimumBudgetField",
    "MIXInsightsResultField",
    "MusicVideoCopyrightField",
    "MusicWorkCopyrightField",
    "NullNodeField",
    "OfflineConversionDataSetField",
    "OfflineConversionDataSetActivitiesField",
    "OfflineConversionDataSetOptimizationStatusField",
    "OfflineConversionDataSetPermissionsField",
    "OfflineConversionDataSetUploadField",
    "OfflineConversionDataSetUsageField",
    "OfflineProductItemField",
    "OfflineTermsOfServiceField",
    "OffsitePixelField",
    "OffsiteSignalContainerBusinessObjectField",
    "OmegaCustomerTrxField",
    "OpenBridgeConfigurationField",
    "OpenGraphContextField",
    "OrderIDAttributionsField",
    "OrganizationField",
    "OutcomePredictionPointField",
    "OverrideDetailsField",
    "OwnedDomainField",
    "P2MInvoicePaymentsField",
    "PageField",
    "PageAboutStoryComposedBlockField",
    "PageAboutStoryComposedBlockEntityRangesField",
    "PageAboutStoryComposedBlockInlineStyleField",
    "PageAppWithLeadsAccessField",
    "PageBroadcastField",
    "PageCallToActionField",
    "PageCategoryField",
    "PageChangeProposalField",
    "PageCrmsWithLeadsAccessField",
    "PageCTSTopicField",
    "PageCTXBudgetSimilarAdvertiserBudgetRecommendationField",
    "PageCTXDefaultGreetingTextField",
    "PageCTXMessagingFeatureLimitField",
    "PageDirectIntegrationCrmWithLeadsAccessField",
    "PageGameBotQuotaInformationField",
    "PageGetStartedNullstateField",
    "PageInsightsAsyncExportRunField",
    "PageLeadsAccessConfigField",
    "PageLocationsBreakdownField",
    "PageMessageResponsivenessMetricsField",
    "PageParkingField",
    "PagePartnerWithLeadsAccessField",
    "PagePaymentOptionsField",
    "PagePostField",
    "PagePostExperimentField",
    "PagePublisherField",
    "PageRestaurantServicesField",
    "PageRestaurantSpecialtiesField",
    "PageSettingsField",
    "PageStartInfoField",
    "PageThreadOwnerField",
    "PageUpcomingChangeField",
    "PageUserMessageThreadLabelField",
    "PageUserPermissionsField",
    "PageUserWithLeadsAccessField",
    "PartnerAccountLinkingField",
    "PartnerCategoryField",
    "PartnerIntegrationLinkedField",
    "PartnershipAdContentSearchMediaField",
    "PartnershipAdsIdentityField",
    "PartnerStudyField",
    "PaymentEnginePaymentField",
    "PaymentPricepointsField",
    "PaymentRequestDetailsField",
    "PaymentSubscriptionField",
    "PermissionField",
    "PersonaField",
    "PersonalAdsPersonaField",
    "PhotoField",
    "PhotoMetadataField",
    "PlaceField",
    "PlacementField",
    "PlaceTagField",
    "PlaceTopicField",
    "PlatformImageSourceField",
    "PlatformSessionKeyField",
    "PlayableContentField",
    "PostField",
    "PreapprovalReviewField",
    "PremiumMusicVideoField",
    "PrivacyField",
    "PrivacyOptionField",
    "PrivateLiftStudyInstanceField",
    "ProductCatalogField",
    "ProductCatalogCategoryField",
    "ProductCatalogCheckMarketplacePartnerSellersStatusField",
    "ProductCatalogDataSourceField",
    "ProductCatalogDiagnosticGroupField",
    "ProductCatalogFacetsField",
    "ProductCatalogHotelRoomsBatchField",
    "ProductCatalogImageSettingsField",
    "ProductCatalogImageSettingsInternalField",
    "ProductCatalogImageSettingsOperationField",
    "ProductCatalogLocalizationSettingsField",
    "ProductCatalogPricingVariablesBatchField",
    "ProductCatalogProductSetsBatchField",
    "ProductCatalogUserActionsField",
    "ProductCatalogUserTasksField",
    "ProductDaEventSamplesBatchField",
    "ProductDeliveryPreferenceField",
    "ProductEventStatField",
    "ProductFeedField",
    "ProductFeedRuleField",
    "ProductFeedRulePreviewSampleField",
    "ProductFeedRuleSuggestionField",
    "ProductFeedScheduleField",
    "ProductFeedUploadField",
    "ProductFeedUploadErrorField",
    "ProductFeedUploadErrorReportField",
    "ProductFeedUploadErrorSampleField",
    "ProductFeedUploadProgressField",
    "ProductGroupField",
    "ProductImageField",
    "ProductItemField",
    "ProductItemCommerceInsightsField",
    "ProductItemErrorField",
    "ProductItemImporterAddressField",
    "ProductItemInsightsField",
    "ProductItemInvalidationErrorField",
    "ProductItemLandingPageDataField",
    "ProductItemLocalInfoField",
    "ProductItemLocalInfoLatLongShapeField",
    "ProductItemOfferField",
    "ProductItemShippingField",
    "ProductItemSubscriptionInfoField",
    "ProductItemUnitPriceField",
    "ProductItemVideoDataField",
    "ProductSetField",
    "ProductSetMetadataField",
    "ProductSetTaxonCategoryField",
    "ProductSetUsageField",
    "ProductVariantField",
    "ProductVisualVariantField",
    "ProfileField",
    "ProfilePictureSourceField",
    "PublisherBlockListField",
    "PublisherDeliveryReportField",
    "PublisherWhiteListField",
    "RawCustomAudienceField",
    "ReachFrequencyActivityField",
    "ReachFrequencyAdFormatField",
    "ReachFrequencyCurveLowerConfidenceRangeField",
    "ReachFrequencyCurveUpperConfidenceRangeField",
    "ReachFrequencyDayPartField",
    "ReachFrequencyEstimatesCurveField",
    "ReachFrequencyEstimatesPlacementBreakdownField",
    "ReachFrequencyPredictionField",
    "ReachFrequencySpecField",
    "RecommendationField",
    "RecommendedIGMediaField",
    "RecommendedPagePostField",
    "RegionalRegulationIdentitiesField",
    "ReportingAudienceField",
    "ResearchPollStudyField",
    "ResellerGuidanceField",
    "RevSharePolicyField",
    "RichMediaElementField",
    "RightsManagerDataExportField",
    "RightsManagerInsightsField",
    "RobotField",
    "RTBDynamicPostField",
    "SalesRightsInventoryManagementField",
    "SavedAudienceField",
    "SavedMessageResponseField",
    "ScheduledPostField",
    "ScimCompanyUserPhoneNumberField",
    "SecuritySettingsField",
    "ShadowIGHashtagField",
    "ShadowIGMediaBuilderField",
    "ShadowIGMediaCollaboratorsField",
    "ShadowIGMediaProductTagsField",
    "ShadowIGUserCatalogProductSearchField",
    "ShadowIGUserCatalogProductVariantField",
    "ShadowIGUserCTXPartnerAppWelcomeMessageFlowField",
    "ShadowIGUserPartnershipAdsMediaErrorsField",
    "ShopField",
    "SignalsIWLExtractorField",
    "SingleOwnerAdditionalProfileField",
    "SiteLinkField",
    "SlicedEventSourceGroupField",
    "SmartPixelInsightsField",
    "SocialWifiSiteField",
    "SplitTestWinnerField",
    "StatusField",
    "StoreCatalogSettingsField",
    "StoreLocationField",
    "StoriesField",
    "StreamFilterField",
    "SystemUserField",
    "TabField",
    "TaggableSubjectField",
    "TargetingField",
    "TargetingAutomationField",
    "TargetingDynamicRuleField",
    "TargetingGeoLocationField",
    "TargetingGeoLocationCityField",
    "TargetingGeoLocationCustomLocationField",
    "TargetingGeoLocationElectoralDistrictField",
    "TargetingGeoLocationGeoEntitiesField",
    "TargetingGeoLocationLocationClusterField",
    "TargetingGeoLocationLocationExpansionField",
    "TargetingGeoLocationMarketField",
    "TargetingGeoLocationPlaceField",
    "TargetingGeoLocationPoliticalDistrictField",
    "TargetingGeoLocationRegionField",
    "TargetingGeoLocationZipField",
    "TargetingMarketingMessageChannelsField",
    "TargetingProductAudienceSpecField",
    "TargetingProductAudienceSubSpecField",
    "TargetingProspectingAudienceField",
    "TargetingRelaxationField",
    "TargetingSentenceLineField",
    "TargetingSubscriberUniverseField",
    "TextWithEntitiesField",
    "ThirdPartyMeasurementReportDatasetField",
    "ThirdPartyPartnerLiftRequestField",
    "ThirdPartyPartnerPanelRequestField",
    "ThirdPartyPartnerPanelScheduledField",
    "ThirdPartyPartnerViewabilityRequestField",
    "ThreadsUserField",
    "TimeSuggestionField",
    "TimezoneOffsetField",
    "TrackingAndConversionWithDefaultsField",
    "TransactableItemField",
    "TransactionField",
    "UnifiedThreadField",
    "UniqueAdCreativeField",
    "URLField",
    "UserField",
    "UserAvailableCatalogsField",
    "UserContextField",
    "UserCoverPhotoField",
    "UserDeviceField",
    "UserIDForAppField",
    "UserIDForPageField",
    "UserLeadGenDisclaimerResponseField",
    "UserLeadGenFieldDataField",
    "UserMobileConfigField",
    "UserNotificationSeenStateDataField",
    "UserPageOneTimeOptInTokenSettingsField",
    "UserPaymentMethodsInfoField",
    "UserPaymentMobilePricepointsField",
    "UserPaymentModulesOptionsField",
    "ValueBasedEligibleSourceField",
    "VehicleField",
    "VehicleOfferField",
    "VideoCopyrightField",
    "VideoCopyrightCheckStatusField",
    "VideoCopyrightConditionGroupField",
    "VideoCopyrightGeoGateField",
    "VideoCopyrightMatchField",
    "VideoCopyrightRuleField",
    "VideoCopyrightSegmentField",
    "VideoGroupField",
    "VideoListField",
    "VideoPollField",
    "VideoStatsField",
    "VideoStatusField",
    "VideoStatusErrorField",
    "VideoStatusProcessingPhaseField",
    "VideoStatusPublishingPhaseField",
    "VideoStatusUploadingPhaseField",
    "VideoTextQuestionField",
    "VideoThumbnailField",
    "VideoUploadLimitsField",
    "VoipInfoField",
    "WearableDevicePublicKeyField",
    "WebAppLinkField",
    "WebPublisherField",
    "WebsiteCreativeAssetSourceField",
    "WebsiteCreativeAssetSuggestionsField",
    "WebsiteCreativeInfoField",
    "WhatsAppBusinessAccountField",
    "WhatsAppBusinessHealthStatusField",
    "WhatsAppBusinessHealthStatusForMessageSendField",
    "WhatsAppBusinessPartnerClientVerificationSubmissionField",
    "WhatsAppBusinessPreVerifiedPhoneNumberField",
    "WhatsAppBusinessProfileField",
    "WhatsAppPaymentCapabilitiesField",
    "WhatsappSubscribedAppsInfoField",
    "WhitehatFBDLRunField",
    "WifiInformationField",
    "WindowsAppLinkField",
    "WindowsPhoneAppLinkField",
    "WithAsset3DField",
    "WITUserField",
    "WoodhengePurchasedPAYGReceiptField",
    "WoodhengeSupporterField",
    "WorkAccessCodeField",
    "WorkExperienceField",
    "WorkSkillField",
    "WorkUserBadgesField",
    "WorkUserFrontlineField",
    # Field Models
    "AdFields",
    "AdAccountFields",
    "AdAccountAAACompatibleAdObjectsFields",
    "AdAccountAAASimilarCampaignsFields",
    "AdAccountAdLimitsInsightsFields",
    "AdAccountAdRulesCountByTypeFields",
    "AdAccountAdRulesHistoryFields",
    "AdAccountAdsRecommendedAudiosFields",
    "AdAccountAdVolumeFields",
    "AdAccountAgencyFeeConfigFields",
    "AdAccountAllPaymentMethodsFields",
    "AdAccountAmountSpentHistoryFields",
    "AdAccountAppSetupRequirementsFields",
    "AdAccountASLScheduleFields",
    "AdAccountBankInfoListFields",
    "AdAccountBillingDatePreferenceFields",
    "AdAccountBusinessConstraintsFields",
    "AdAccountCampaignAttributionOptionInfoFields",
    "AdAccountCreationRequestFields",
    "AdAccountCustomAudienceLimitsFields",
    "AdAccountDefaultDestinationFields",
    "AdAccountDefaultObjectiveFields",
    "AdAccountDeliveryEstimateFields",
    "AdAccountDsaRecommendationsFields",
    "AdAccountIosFourteenCampaignLimitsFields",
    "AdAccountLiveVideoAdvertiserFields",
    "AdAccountMatchedSearchApplicationsEdgeDataFields",
    "AdAccountMaxBidFields",
    "AdAccountOptimizationGoalsAEMv2EligibilityFields",
    "AdAccountPaymentDetailsFields",
    "AdAccountPaymentOptionsFields",
    "AdAccountPrepayDetailsFields",
    "AdAccountPromotableObjectsFields",
    "AdAccountPromotionProgressBarFields",
    "AdAccountReachEstimateFields",
    "AdAccountRecommendationsFields",
    "AdAccountRecommendedCamapaignBudgetFields",
    "AdAccountRelatedIcoStudyFields",
    "AdAccountSmartSuggestedAdsFields",
    "AdAccountSpendCapChangeHistoryFields",
    "AdAccountSpendLimitFields",
    "AdAccountSubscribedAppsFields",
    "AdAccountSubsidyAmountDetailsFields",
    "AdAccountTargetingUnifiedFields",
    "AdAccountTrackingDataFields",
    "AdAccountURLForAssetExtractionFields",
    "AdAccountUserFields",
    "AdAccountUserPermissionsFields",
    "AdAccountUserSettingsFields",
    "AdAccountYouthAdsAdvertiserFields",
    "AdActivityFields",
    "AdAssetBodyFields",
    "AdAssetCallToActionTypeFields",
    "AdAssetCustomizationRuleCustomizationSpecFields",
    "AdAssetDescriptionFields",
    "AdAssetFeedAdditionalDataFields",
    "AdAssetFeedAdditionalDataPageNudgeMessageFields",
    "AdAssetFeedSpecFields",
    "AdAssetFeedSpecAssetCustomizationRuleFields",
    "AdAssetFeedSpecAssetLabelFields",
    "AdAssetFeedSpecBodyFields",
    "AdAssetFeedSpecCallToActionFields",
    "AdAssetFeedSpecCaptionFields",
    "AdAssetFeedSpecCarouselFields",
    "AdAssetFeedSpecCarouselChildAttachmentFields",
    "AdAssetFeedSpecDescriptionFields",
    "AdAssetFeedSpecEventsFields",
    "AdAssetFeedSpecGroupRuleFields",
    "AdAssetFeedSpecImageFields",
    "AdAssetFeedSpecLinkURLFields",
    "AdAssetFeedSpecTitleFields",
    "AdAssetFeedSpecVideoFields",
    "AdAssetImageFields",
    "AdAssetLinkURLFields",
    "AdAssetMessageExtensionsFields",
    "AdAssetOnsiteDestinationsFields",
    "AdAssetTargetRuleTargetingFields",
    "AdAssetTitleFields",
    "AdAssetVideoFields",
    "AdAsyncRequestFields",
    "AdAsyncRequestSetFields",
    "AdAsyncRequestSetNotificationResultFields",
    "AdBidAdjustmentsFields",
    "AdCampaignBidConstraintFields",
    "AdCampaignConversionValueExpressionSpecFields",
    "AdCampaignDeliveryEstimateFields",
    "AdCampaignDeliveryStatsFields",
    "AdCampaignDeliveryStatsUnsupportedReasonsFields",
    "AdCampaignFrequencyControlSpecsFields",
    "AdCampaignGroupAdvantageStateFields",
    "AdCampaignGroupAgencyFeeConfigForApiFields",
    "AdCampaignGroupIncrementalConversionOptimizationConfigFields",
    "AdCampaignGroupMetricsMetadataFields",
    "AdCampaignGroupStatsFields",
    "AdCampaignGroupStructureTreeFields",
    "AdCampaignIssuesInfoFields",
    "AdCampaignLearningStageInfoFields",
    "AdCampaignMetricsMetadataFields",
    "AdCampaignMultiAdsFields",
    "AdCampaignOptimizationEventFields",
    "AdCampaignPacedBidInfoFields",
    "AdCampaignStatsFields",
    "AdColumnSizesFields",
    "AdContractFields",
    "AdConversionsFields",
    "AdConversionValuesFields",
    "AdCreationPackageConfigFields",
    "AdCreativeFields",
    "AdCreativeAdDisclaimerFields",
    "AdCreativeAssetGroupsSpecFields",
    "AdCreativeBrandedContentAdsFields",
    "AdCreativeBrandedContentAdsPartnersFields",
    "AdCreativeCollectionThumbnailInfoFields",
    "AdCreativeContextualMultiAdsFields",
    "AdCreativeDegreesOfFreedomSpecFields",
    "AdCreativeDestinationSpecFields",
    "AdCreativeFacebookBrandedContentFields",
    "AdCreativeFeatureActionMetadataFields",
    "AdCreativeFeatureCustomizationsFields",
    "AdCreativeFeatureDetailsFields",
    "AdCreativeFeaturesSpecFields",
    "AdCreativeFormatTransformationSpecFields",
    "AdCreativeGenerativeAssetSpecFields",
    "AdCreativeHouseShopsAdsSellerContentFields",
    "AdCreativeImageDataMediaElementsFields",
    "AdCreativeInsightsFields",
    "AdCreativeInstagramBrandedContentFields",
    "AdCreativeInteractiveComponentsSpecFields",
    "AdCreativeLinkDataFields",
    "AdCreativeLinkDataAppLinkSpecFields",
    "AdCreativeLinkDataCallToActionFields",
    "AdCreativeLinkDataCallToActionValueFields",
    "AdCreativeLinkDataChildAttachmentFields",
    "AdCreativeLinkDataCustomOverlaySpecFields",
    "AdCreativeLinkDataImageLayerSpecFields",
    "AdCreativeLinkDataImageOverlaySpecFields",
    "AdCreativeLinkDataMomentFields",
    "AdCreativeLinkDataSponsorshipInfoSpecFields",
    "AdCreativeLinkDataTemplateVideoSpecFields",
    "AdCreativeMarketingMessageStructuredSpecFields",
    "AdCreativeMediaSourcingSpecFields",
    "AdCreativeObjectStorySpecFields",
    "AdCreativeOmnichannelLinkSpecFields",
    "AdCreativePhotoDataFields",
    "AdCreativePhotoDataMediaElementsFields",
    "AdCreativePlaceDataFields",
    "AdCreativePlatformCustomizationFields",
    "AdCreativePortraitCustomizationsFields",
    "AdCreativePostClickConfigurationFields",
    "AdCreativeProductDataFields",
    "AdCreativePromotionMetadataSpecFields",
    "AdCreativeRecommenderSettingsFields",
    "AdCreativeRegionalRegulationDisclaimerFields",
    "AdCreativeRewardInfoFields",
    "AdCreativeShopSpecFields",
    "AdCreativeSiteLinksSpecFields",
    "AdCreativeSourcingSpecFields",
    "AdCreativeStaticFallbackSpecFields",
    "AdCreativeTemplateURLSpecFields",
    "AdCreativeTextDataFields",
    "AdCreativeVideoDataFields",
    "AdCreativeVideoDataCustomOverlaySpecFields",
    "AdCreativeVideoDataMediaElementsFields",
    "AdCreativeWhatsAppChannelSpecFields",
    "AdCustomDerivedMetricsFields",
    "AdCustomizationRuleSpecFields",
    "AdDefaultValuesFields",
    "AdDraftFields",
    "AdDynamicCreativeFields",
    "AdEntityTargetSpendFields",
    "AdExportPresetFields",
    "AdgroupFacebookFeedbackFields",
    "AdgroupIssuesInfoFields",
    "AdgroupMetadataFields",
    "AdgroupPlacementSpecificReviewFeedbackFields",
    "AdgroupReviewFeedbackFields",
    "AdImageFields",
    "AdjacentContentDeliveryReportFields",
    "AdKeywordsFields",
    "AdKeywordStatsFields",
    "AdKpiShiftFields",
    "AdLabelFields",
    "AdLightAdgroupFields",
    "AdLightCampaignFields",
    "AdLightCampaignGroupFields",
    "AdLimitsEnforcementDataFields",
    "AdLimitSettingFields",
    "AdMonetizationPropertyFields",
    "AdNetworkAnalyticsAsyncQueryExportFields",
    "AdNetworkAnalyticsAsyncQueryResultFields",
    "AdNetworkAnalyticsSyncQueryResultFields",
    "AdPlacementFields",
    "AdPlacePageSetFields",
    "AdPlacePageSetMetadataFields",
    "AdPreviewFields",
    "AdPromotedObjectFields",
    "AdProposalFields",
    "AdRecommendationFields",
    "AdRecommendationDataFields",
    "AdReportRunFields",
    "AdRuleFields",
    "AdRuleEvaluationSpecFields",
    "AdRuleExecutionOptionsFields",
    "AdRuleExecutionSpecFields",
    "AdRuleFiltersFields",
    "AdRuleHistoryFields",
    "AdRuleHistoryResultFields",
    "AdRuleHistoryResultActionFields",
    "AdRuleScheduleFields",
    "AdRuleScheduleSpecFields",
    "AdRuleTriggerFields",
    "AdsActionStatsFields",
    "AdsAnomalyDetectionFields",
    "AdSavedKeywordsFields",
    "AdSavedLocationFields",
    "AdSavedReportFields",
    "AdsConversionGoalFields",
    "AdsCreationSavedStateFields",
    "AdsCustomPivotsPreviewFields",
    "AdsDatasetFields",
    "AdsEligibilityFields",
    "AdSetFields",
    "AdsGuidanceQEExposureFields",
    "AdsHistogramStatsFields",
    "AdsImageCropsFields",
    "AdsInsightsFields",
    "AdsMcmeConversionFields",
    "AdsNamingTemplateFields",
    "AdsOptimalDeliveryGrowthOpportunityFields",
    "AdsPaymentCycleFields",
    "AdsPivotRulesFields",
    "AdsPixelFields",
    "AdsPixelCapabilityOverrideFields",
    "AdsPixelCAPIIntegrationQualityFields",
    "AdsPixelDeliveryRecommendationsFields",
    "AdsPixelDomainControlRuleFields",
    "AdsPixelDomainLastFiredTimeFields",
    "AdsPixelEventLastFiredTimeFields",
    "AdsPixelEventPredictionFields",
    "AdsPixelEventSuggestionRuleFields",
    "AdsPixelItemPriceFields",
    "AdsPixelMicrodataStatsFields",
    "AdsPixelRawFiresResultFields",
    "AdsPixelRealTimeEventLogResultFields",
    "AdsPixelRecentEventsResultFields",
    "AdsPixelSignalsIWLFeedbackNuxFields",
    "AdsPixelSignalsIWLNuxFields",
    "AdsPixelStatsFields",
    "AdsPixelStatsResultFields",
    "AdsQuickViewsFields",
    "AdsReportBuilderFields",
    "AdsReportBuilderExportCoreFields",
    "AdsReportBuilderMMMReportFields",
    "AdsReportBuilderMMMReportSchedulerFields",
    "AdsReportBuilderSavedReportFields",
    "AdsSegmentsFields",
    "AdsSignalDiagnosticIssueFields",
    "AdsStartYourDayWidgetFields",
    "AdsTabularFields",
    "AdsTargetingInsightsFields",
    "AdsTextSuggestionsFields",
    "AdStudyFields",
    "AdStudyCellFields",
    "AdStudyObjectiveFields",
    "AdStudyObjectiveIDFields",
    "AdStudyObjectiveOffsiteDatasetsFields",
    "AdsUserSettingsFields",
    "AdsValueAdjustmentRuleCollectionFields",
    "AdToplineFields",
    "AdToplineDetailFields",
    "AdvAInstanceFields",
    "AdvertiserVerificationStatusFields",
    "AdVideoFields",
    "AdVolumeFields",
    "AgencyClientDeclarationFields",
    "AgeRangeFields",
    "AIGeneratedProductImageFields",
    "AlbumFields",
    "ALMAdAccountInfoFields",
    "ALMEndAdvertiserInfoFields",
    "ALMEventFields",
    "ALMGuidanceFields",
    "ALMGuidanceMetricsFields",
    "AMOneshopSettingsFields",
    "AnalyticsConfigFields",
    "AnalyticsEntityUserConfigFields",
    "AnalyticsFunnelQueryResultFields",
    "AnalyticsPlatformMetricsConfigFields",
    "AnalyticsQueryResultFields",
    "AnalyticsSegmentFields",
    "AnalyticsUserConfigFields",
    "ANBlockedBICategoryFields",
    "AndroidAppLinkFields",
    "ApacMonSellerStatusAPIContainerFields",
    "AppEventConfigFields",
    "ApplicationFields",
    "AppLinksFields",
    "AppOptimizedCustomEventsFields",
    "AppPublisherFields",
    "AppRequestFields",
    "AppRequestFormerRecipientFields",
    "ArAdsDataContainerFields",
    "AREffectFields",
    "AssignedUserFields",
    "AsyncRequestFields",
    "AsyncSessionFields",
    "AttributionSpecFields",
    "AudienceFunnelFields",
    "AudienceOverlapFields",
    "AudiencePermissionFields",
    "AudiencePermissionForActionsFields",
    "AudienceSharingAccountValidFields",
    "AudienceSharingRecipientAccountsFields",
    "AudioAssetFields",
    "AudioCopyrightFields",
    "AudioIsrcFields",
    "AudioReleaseFields",
    "AudioSubLabelFields",
    "AudioVisualReferenceMatchFields",
    "AuthLinkFields",
    "AutomotiveModelFields",
    "AvatarFields",
    "AvatarProfilePictureFields",
    "BAPIDomainFields",
    "BCPCampaignFields",
    "BidScheduleFields",
    "BizInboxOffsiteEmailAccountFields",
    "BlindPigFields",
    "BlockedUserInfoFields",
    "BrandedContentAdErrorFields",
    "BrandedContentEligibleSponsorIDsFields",
    "BrandedContentShadowIGMediaIDFields",
    "BrandedContentShadowIGUserIDFields",
    "BrandRequestFields",
    "BrandSafetyBlockListUsageFields",
    "BrandSafetyCampaignConfigFields",
    "BrandSafetyDownloadableFields",
    "BroadTargetingCategoriesFields",
    "BusinessFields",
    "BusinessAdAccountRequestFields",
    "BusinessAdsReportingReportSpecsFields",
    "BusinessAdvertisableApplicationsResultFields",
    "BusinessAgreementFields",
    "BusinessApplicationRequestFields",
    "BusinessAssetGroupFields",
    "BusinessAssetSharingAgreementFields",
    "BusinessCreativeFields",
    "BusinessCreativeFolderFields",
    "BusinessCreativeInsightsFields",
    "BusinessFranchiseConfigFields",
    "BusinessImageFields",
    "BusinessImageTBusinessFolderPathItemFields",
    "BusinessManagedPartnerEligibilityFields",
    "BusinessMediaAdPlacementValidationResultFields",
    "BusinessObjectFields",
    "BusinessObjectTransferOwnershipAgreementFields",
    "BusinessOwnedObjectOnBehalfOfRequestFields",
    "BusinessPageRequestFields",
    "BusinessPartnerPremiumOptionsFields",
    "BusinessProductCatalogTOSFields",
    "BusinessProjectFields",
    "BusinessRequestFields",
    "BusinessRoleRequestFields",
    "BusinessSettingLogsDataFields",
    "BusinessTagFields",
    "BusinessTrafficAnalysisReportFields",
    "BusinessUserFields",
    "BusinessVideoFields",
    "BusinessVideoTBusinessFolderPathItemFields",
    "CalibratorExistingRuleFields",
    "CallAdsPhoneDataFields",
    "CampaignFields",
    "CampaignActionsDataFields",
    "CampaignGroupBrandConfigurationFields",
    "CampaignGroupCollaborativeAdsPartnerInfoFields",
    "CanvasFields",
    "CanvasAdSettingsFields",
    "CanvasBodyElementFields",
    "CanvasCollectionThumbnailFields",
    "CanvasDynamicSettingFields",
    "CanvasPreviewFields",
    "CanvasTemplateFields",
    "CASSSetupOfflineEventSetProgressFields",
    "CatalogAdvertiserInsightFields",
    "CatalogBasedTargetingFields",
    "CatalogCollectionFields",
    "CatalogContentVersionConfigFields",
    "CatalogItemAppLinksFields",
    "CatalogItemChannelsToIntegrityStatusFields",
    "CatalogItemOverrideFields",
    "CatalogItemRejectionReasonsFields",
    "CatalogItemValidationErrorListFields",
    "CatalogSmartPixelSettingsFields",
    "CatalogSubVerticalListFields",
    "CatalogWebsiteOnboardingSettingsFields",
    "CatalogWebsiteSettingsFields",
    "ChatPluginFields",
    "CheckBatchRequestStatusFields",
    "ChildEventFields",
    "ChinaBusinessOnboardingVettingRequestFields",
    "CloudbridgeDatasetStatusFields",
    "CloudGameFields",
    "CollaborativeAdsPartnerBusinessesFields",
    "CollaborativeAdsPartnerInfoListItemFields",
    "CollaborativeAdsShareSettingsFields",
    "ColumnSuggestionsFields",
    "CommentFields",
    "CommerceMerchantSettingsFields",
    "CommerceMerchantSettingsSetupStatusFields",
    "CommerceOrderFields",
    "CommerceOrderTransactionDetailFields",
    "CommercePayoutFields",
    "CommerceSettingsFields",
    "ConnectionsTargetingFields",
    "ContactsMessengerSyncConfigFields",
    "ContentBlockListFields",
    "ContentDeliveryReportFields",
    "ContentPublishingLimitResponseFields",
    "ContextualBundlingSpecFields",
    "ConversionActionQueryFields",
    "ConversionHealthKPIFields",
    "CopyrightAttributionInsightsFields",
    "CopyrightAudioAssetFields",
    "CopyrightMediaMisuseFields",
    "CopyrightOwnershipTransferFields",
    "CopyrightReferenceContainerFields",
    "CoverPhotoFields",
    "CPASAdCreationTemplateFields",
    "CPASAdvertiserPartnershipRecommendationFields",
    "CPASBusinessSetupConfigFields",
    "CPASCollaborationRequestFields",
    "CPASLsbImageBankFields",
    "CPASMerchantConfigFields",
    "CPASParentCatalogSettingsFields",
    "CPASSetupFields",
    "CPASSetupPageStructureProgressFields",
    "CreativeAssetTagFields",
    "CreativeHistoryFields",
    "CreativeMulticellTestConfigFields",
    "CreatorAssetCreativeFields",
    "CreditCardFields",
    "CreditPartitionActionOptionsFields",
    "CRMAddressFields",
    "CTWAWhatsAppNumbersInfoFields",
    "CTXDefaultOptimizationConfigFields",
    "CTXOptimizationEligibilityFields",
    "CTXPartnerAppWelcomeMessageFlowFields",
    "CurrencyFields",
    "CurrencyAmountFields",
    "CustomAudienceFields",
    "CustomAudienceAdAccountFields",
    "CustomAudienceCapabilitiesFields",
    "CustomAudienceDataSourceFields",
    "CustomAudienceGroupFields",
    "CustomAudienceHealthFields",
    "CustomAudienceIntegrityFlagsAndAppealStatusFields",
    "CustomAudienceSaltsFields",
    "CustomAudienceSessionFields",
    "CustomAudienceSharedAccountCampaignInfoFields",
    "CustomAudiencesharedAccountInfoFields",
    "CustomAudienceSharingStatusFields",
    "CustomAudienceStatusFields",
    "CustomAudiencesTOSFields",
    "CustomConversionFields",
    "CustomConversionActivitiesFields",
    "CustomConversionStatsResultFields",
    "CustomUserSettingsFields",
    "DACheckFields",
    "DatasetFields",
    "DayPartFields",
    "DeliveryCheckFields",
    "DeliveryCheckExtraInfoFields",
    "DeliveryInfoFields",
    "DeliveryStatusFields",
    "DeliveryWindowFields",
    "DestinationFields",
    "DirectDebitFields",
    "DraftPostFields",
    "DynamicARMetadataFields",
    "DynamicContentSetFields",
    "DynamicItemDisplayBundleFields",
    "DynamicItemDisplayBundleFolderFields",
    "DynamicPostChildAttachmentFields",
    "DynamicPriceConfigByDateFields",
    "DynamicVideoMetadataFields",
    "EducationExperienceFields",
    "EmailImportFields",
    "EndStudyCriteriaFields",
    "EngagementFields",
    "EntityAtTextRangeFields",
    "EntWithSponsorFields",
    "EventFields",
    "EventExternalTicketInfoFields",
    "EventRegistrationSettingFields",
    "EventSourceGroupFields",
    "EventTicketSettingFields",
    "EventTicketTierFields",
    "EventTourFields",
    "ExperienceFields",
    "ExtendedCreditFields",
    "ExtendedCreditAllocationConfigFields",
    "ExtendedCreditApplicationFields",
    "ExtendedCreditEmailFields",
    "ExtendedCreditInfoFields",
    "ExtendedCreditInvoiceGroupFields",
    "ExternalEventSourceFields",
    "ExternalEventSourceCPASEventsDebuggingFields",
    "ExternalEventSourceCPASEventsDebuggingInfoFields",
    "ExternalMerchantSettingsFields",
    "FAMEKumoFields",
    "FantasyGameFields",
    "FavoriteCatalogFields",
    "FBImageCopyrightMatchFields",
    "FBLiteToNTTransitionsFields",
    "FBPageAndInstagramAccountFields",
    "FBPayButtonLoginFields",
    "FinanceObjectFields",
    "FlexibleTargetingFields",
    "FlightFields",
    "FranchiseProgramFields",
    "FranchiseProgramMemberFields",
    "FundingSourceDetailsFields",
    "FundingSourceDetailsCouponFields",
    "FundingSourceDetailsCouponTieringFields",
    "FundraiserPersonToCharityFields",
    "GeoGatingPolicyFields",
    "GroupFields",
    "HasLeadAccessFields",
    "HighDemandPeriodFields",
    "HighDemandPeriodTimeSuggestionWeeklySegmentFields",
    "HomeListingFields",
    "HotelFields",
    "HotelRoomFields",
    "HoursFields",
    "IDNameFields",
    "IGAccessTokenForIGOnlyAPIFields",
    "IGBCAdsPermissionFields",
    "IGBoostMediaAdFields",
    "IGCommentFields",
    "IGCommentFromUserFields",
    "IGMediaFields",
    "IGMediaBoostEligibilityInfoFields",
    "IGMediaForIGOnlyAPIFields",
    "IGProductTaggingInvalidationErrorFields",
    "IGRefreshAccessTokenForIGOnlyAPIFields",
    "IGResumableVideoUploadStatusFields",
    "IGShoppingProductAppealFields",
    "IGShoppingReviewStatusFields",
    "IGShoppingReviewStatusOnsiteEligibilityFields",
    "IGShoppingReviewStatusReasonWithHelpMessageFields",
    "IGUpcomingEventFields",
    "IGUserFields",
    "IGUserExportForCAMFields",
    "IGUserForIGOnlyAPIFields",
    "IGUserMessengerProfileFields",
    "IGUserSubscribedAppsDataFields",
    "IGVideoCopyrightCheckMatchesInformationFields",
    "IGVideoCopyrightCheckStatusFields",
    "ImageCopyrightFields",
    "ImageCopyrightDisputeFields",
    "ImageReferenceMatchFields",
    "InsightsResultFields",
    "InsightsValueFields",
    "InstagramBusinessAssetFields",
    "InstagramInsightsResultFields",
    "InstagramInsightsValueFields",
    "InstagramRelatedProductTagsFields",
    "InstagramShoppingMerchantReviewMessageFields",
    "InstagramThreadFields",
    "InstagramUserFields",
    "InstantArticleInsightsQueryResultFields",
    "IosAppLinkFields",
    "IPObjectFields",
    "JobOpeningFields",
    "KeyValueFields",
    "LeadFields",
    "LeadGenAppointmentBookingInfoFields",
    "LeadGenAppointmentSlotsByDayFields",
    "LeadGenAppointmentTimeSlotFields",
    "LeadGenClientValidationRulesFields",
    "LeadGenConditionalQuestionsGroupChoicesFields",
    "LeadGenConditionalQuestionsGroupQuestionsFields",
    "LeadGenContextCardFields",
    "LeadGenCustomDisclaimerFields",
    "LeadGenCustomDisclaimerBodyFields",
    "LeadGenDataDraftFields",
    "LeadGenDirectCRMIntegrationConfigFields",
    "LeadGenDraftQuestionFields",
    "LeadgenFormFields",
    "LeadGenFormPreviewDetailsFields",
    "LeadGenLegalContentFields",
    "LeadGenLegalContentCheckboxFields",
    "LeadGenPostSubmissionCheckResultFields",
    "LeadGenPrivacyPolicyFields",
    "LeadGenQuestionFields",
    "LeadGenQuestionOptionFields",
    "LeadGenThankYouPageFields",
    "LeadGenThankYouPageGatedFileFields",
    "LeadGenThankYouPageGatedPromoFields",
    "LeadGenURLEntityAtRangesFields",
    "LifeEventFields",
    "LinkFields",
    "LinkedInstagramAccountDataFields",
    "LiveVideoFields",
    "LiveVideoAdBreakConfigFields",
    "LiveVideoAdCampaignConfigFields",
    "LiveVideoErrorFields",
    "LiveVideoInputStreamFields",
    "LiveVideoRecommendedEncoderSettingsFields",
    "LiveVideoTargetingFields",
    "LocalServiceBusinessFields",
    "LocationFields",
    "LookalikeSpecFields",
    "LoomConfigFields",
    "MailingAddressFields",
    "ManagedPartnerBusinessFields",
    "ManagedPartnerExtendedCreditFields",
    "ManagementSiteLinkFields",
    "MCExperienceConfigForApiFields",
    "McomInvoiceBankAccountFields",
    "McomInvoiceDetailsFields",
    "McomInvoiceListsFields",
    "McomInvoiceStatusFields",
    "McomOnboardingStatusFields",
    "McomPayoutsFields",
    "MeasurementReportFields",
    "MediaCopyrightAttributionFields",
    "MediaCopyrightUpdateRecordFields",
    "MediaFingerprintFields",
    "MediaTitleFields",
    "MerchantComplianceFields",
    "MessageDeliveryEstimateFields",
    "MessagingAppsInfoFields",
    "MessagingFeatureReviewFields",
    "MessagingFeatureStatusFields",
    "MessengerAdsPartialAutomatedStepListFields",
    "MessengerBusinessTemplateFields",
    "MessengerCallSettingsFields",
    "MessengerDestinationPageWelcomeMessageFields",
    "MessengerProfileFields",
    "MinimumBudgetFields",
    "MIXInsightsResultFields",
    "MusicVideoCopyrightFields",
    "MusicWorkCopyrightFields",
    "NullNodeFields",
    "OfflineConversionDataSetFields",
    "OfflineConversionDataSetActivitiesFields",
    "OfflineConversionDataSetOptimizationStatusFields",
    "OfflineConversionDataSetPermissionsFields",
    "OfflineConversionDataSetUploadFields",
    "OfflineConversionDataSetUsageFields",
    "OfflineProductItemFields",
    "OfflineTermsOfServiceFields",
    "OffsitePixelFields",
    "OffsiteSignalContainerBusinessObjectFields",
    "OmegaCustomerTrxFields",
    "OpenBridgeConfigurationFields",
    "OpenGraphContextFields",
    "OrderIDAttributionsFields",
    "OrganizationFields",
    "OutcomePredictionPointFields",
    "OverrideDetailsFields",
    "OwnedDomainFields",
    "P2MInvoicePaymentsFields",
    "PageFields",
    "PageAboutStoryComposedBlockFields",
    "PageAboutStoryComposedBlockEntityRangesFields",
    "PageAboutStoryComposedBlockInlineStyleFields",
    "PageAppWithLeadsAccessFields",
    "PageBroadcastFields",
    "PageCallToActionFields",
    "PageCategoryFields",
    "PageChangeProposalFields",
    "PageCrmsWithLeadsAccessFields",
    "PageCTSTopicFields",
    "PageCTXBudgetSimilarAdvertiserBudgetRecommendationFields",
    "PageCTXDefaultGreetingTextFields",
    "PageCTXMessagingFeatureLimitFields",
    "PageDirectIntegrationCrmWithLeadsAccessFields",
    "PageGameBotQuotaInformationFields",
    "PageGetStartedNullstateFields",
    "PageInsightsAsyncExportRunFields",
    "PageLeadsAccessConfigFields",
    "PageLocationsBreakdownFields",
    "PageMessageResponsivenessMetricsFields",
    "PageParkingFields",
    "PagePartnerWithLeadsAccessFields",
    "PagePaymentOptionsFields",
    "PagePostFields",
    "PagePostExperimentFields",
    "PagePublisherFields",
    "PageRestaurantServicesFields",
    "PageRestaurantSpecialtiesFields",
    "PageSettingsFields",
    "PageStartInfoFields",
    "PageThreadOwnerFields",
    "PageUpcomingChangeFields",
    "PageUserMessageThreadLabelFields",
    "PageUserPermissionsFields",
    "PageUserWithLeadsAccessFields",
    "PartnerAccountLinkingFields",
    "PartnerCategoryFields",
    "PartnerIntegrationLinkedFields",
    "PartnershipAdContentSearchMediaFields",
    "PartnershipAdsIdentityFields",
    "PartnerStudyFields",
    "PaymentEnginePaymentFields",
    "PaymentPricepointsFields",
    "PaymentRequestDetailsFields",
    "PaymentSubscriptionFields",
    "PermissionFields",
    "PersonaFields",
    "PersonalAdsPersonaFields",
    "PhotoFields",
    "PhotoMetadataFields",
    "PlaceFields",
    "PlacementFields",
    "PlaceTagFields",
    "PlaceTopicFields",
    "PlatformImageSourceFields",
    "PlatformSessionKeyFields",
    "PlayableContentFields",
    "PostFields",
    "PreapprovalReviewFields",
    "PremiumMusicVideoFields",
    "PrivacyFields",
    "PrivacyOptionFields",
    "PrivateLiftStudyInstanceFields",
    "ProductCatalogFields",
    "ProductCatalogCategoryFields",
    "ProductCatalogCheckMarketplacePartnerSellersStatusFields",
    "ProductCatalogDataSourceFields",
    "ProductCatalogDiagnosticGroupFields",
    "ProductCatalogFacetsFields",
    "ProductCatalogHotelRoomsBatchFields",
    "ProductCatalogImageSettingsFields",
    "ProductCatalogImageSettingsInternalFields",
    "ProductCatalogImageSettingsOperationFields",
    "ProductCatalogLocalizationSettingsFields",
    "ProductCatalogPricingVariablesBatchFields",
    "ProductCatalogProductSetsBatchFields",
    "ProductCatalogUserActionsFields",
    "ProductCatalogUserTasksFields",
    "ProductDaEventSamplesBatchFields",
    "ProductDeliveryPreferenceFields",
    "ProductEventStatFields",
    "ProductFeedFields",
    "ProductFeedRuleFields",
    "ProductFeedRulePreviewSampleFields",
    "ProductFeedRuleSuggestionFields",
    "ProductFeedScheduleFields",
    "ProductFeedUploadFields",
    "ProductFeedUploadErrorFields",
    "ProductFeedUploadErrorReportFields",
    "ProductFeedUploadErrorSampleFields",
    "ProductFeedUploadProgressFields",
    "ProductGroupFields",
    "ProductImageFields",
    "ProductItemFields",
    "ProductItemCommerceInsightsFields",
    "ProductItemErrorFields",
    "ProductItemImporterAddressFields",
    "ProductItemInsightsFields",
    "ProductItemInvalidationErrorFields",
    "ProductItemLandingPageDataFields",
    "ProductItemLocalInfoFields",
    "ProductItemLocalInfoLatLongShapeFields",
    "ProductItemOfferFields",
    "ProductItemShippingFields",
    "ProductItemSubscriptionInfoFields",
    "ProductItemUnitPriceFields",
    "ProductItemVideoDataFields",
    "ProductSetFields",
    "ProductSetMetadataFields",
    "ProductSetTaxonCategoryFields",
    "ProductSetUsageFields",
    "ProductVariantFields",
    "ProductVisualVariantFields",
    "ProfileFields",
    "ProfilePictureSourceFields",
    "PublisherBlockListFields",
    "PublisherDeliveryReportFields",
    "PublisherWhiteListFields",
    "RawCustomAudienceFields",
    "ReachFrequencyActivityFields",
    "ReachFrequencyAdFormatFields",
    "ReachFrequencyCurveLowerConfidenceRangeFields",
    "ReachFrequencyCurveUpperConfidenceRangeFields",
    "ReachFrequencyDayPartFields",
    "ReachFrequencyEstimatesCurveFields",
    "ReachFrequencyEstimatesPlacementBreakdownFields",
    "ReachFrequencyPredictionFields",
    "ReachFrequencySpecFields",
    "RecommendationFields",
    "RecommendedIGMediaFields",
    "RecommendedPagePostFields",
    "RegionalRegulationIdentitiesFields",
    "ReportingAudienceFields",
    "ResearchPollStudyFields",
    "ResellerGuidanceFields",
    "RevSharePolicyFields",
    "RichMediaElementFields",
    "RightsManagerDataExportFields",
    "RightsManagerInsightsFields",
    "RobotFields",
    "RTBDynamicPostFields",
    "SalesRightsInventoryManagementFields",
    "SavedAudienceFields",
    "SavedMessageResponseFields",
    "ScheduledPostFields",
    "ScimCompanyUserPhoneNumberFields",
    "SecuritySettingsFields",
    "ShadowIGHashtagFields",
    "ShadowIGMediaBuilderFields",
    "ShadowIGMediaCollaboratorsFields",
    "ShadowIGMediaProductTagsFields",
    "ShadowIGUserCatalogProductSearchFields",
    "ShadowIGUserCatalogProductVariantFields",
    "ShadowIGUserCTXPartnerAppWelcomeMessageFlowFields",
    "ShadowIGUserPartnershipAdsMediaErrorsFields",
    "ShopFields",
    "SignalsIWLExtractorFields",
    "SingleOwnerAdditionalProfileFields",
    "SiteLinkFields",
    "SlicedEventSourceGroupFields",
    "SmartPixelInsightsFields",
    "SocialWifiSiteFields",
    "SplitTestWinnerFields",
    "StatusFields",
    "StoreCatalogSettingsFields",
    "StoreLocationFields",
    "StoriesFields",
    "StreamFilterFields",
    "SystemUserFields",
    "TabFields",
    "TaggableSubjectFields",
    "TargetingFields",
    "TargetingAutomationFields",
    "TargetingDynamicRuleFields",
    "TargetingGeoLocationFields",
    "TargetingGeoLocationCityFields",
    "TargetingGeoLocationCustomLocationFields",
    "TargetingGeoLocationElectoralDistrictFields",
    "TargetingGeoLocationGeoEntitiesFields",
    "TargetingGeoLocationLocationClusterFields",
    "TargetingGeoLocationLocationExpansionFields",
    "TargetingGeoLocationMarketFields",
    "TargetingGeoLocationPlaceFields",
    "TargetingGeoLocationPoliticalDistrictFields",
    "TargetingGeoLocationRegionFields",
    "TargetingGeoLocationZipFields",
    "TargetingMarketingMessageChannelsFields",
    "TargetingProductAudienceSpecFields",
    "TargetingProductAudienceSubSpecFields",
    "TargetingProspectingAudienceFields",
    "TargetingRelaxationFields",
    "TargetingSentenceLineFields",
    "TargetingSubscriberUniverseFields",
    "TextWithEntitiesFields",
    "ThirdPartyMeasurementReportDatasetFields",
    "ThirdPartyPartnerLiftRequestFields",
    "ThirdPartyPartnerPanelRequestFields",
    "ThirdPartyPartnerPanelScheduledFields",
    "ThirdPartyPartnerViewabilityRequestFields",
    "ThreadsUserFields",
    "TimeSuggestionFields",
    "TimezoneOffsetFields",
    "TrackingAndConversionWithDefaultsFields",
    "TransactableItemFields",
    "TransactionFields",
    "UnifiedThreadFields",
    "UniqueAdCreativeFields",
    "URLFields",
    "UserFields",
    "UserAvailableCatalogsFields",
    "UserContextFields",
    "UserCoverPhotoFields",
    "UserDeviceFields",
    "UserIDForAppFields",
    "UserIDForPageFields",
    "UserLeadGenDisclaimerResponseFields",
    "UserLeadGenFieldDataFields",
    "UserMobileConfigFields",
    "UserNotificationSeenStateDataFields",
    "UserPageOneTimeOptInTokenSettingsFields",
    "UserPaymentMethodsInfoFields",
    "UserPaymentMobilePricepointsFields",
    "UserPaymentModulesOptionsFields",
    "ValueBasedEligibleSourceFields",
    "VehicleFields",
    "VehicleOfferFields",
    "VideoCopyrightFields",
    "VideoCopyrightCheckStatusFields",
    "VideoCopyrightConditionGroupFields",
    "VideoCopyrightGeoGateFields",
    "VideoCopyrightMatchFields",
    "VideoCopyrightRuleFields",
    "VideoCopyrightSegmentFields",
    "VideoGroupFields",
    "VideoListFields",
    "VideoPollFields",
    "VideoStatsFields",
    "VideoStatusFields",
    "VideoStatusErrorFields",
    "VideoStatusProcessingPhaseFields",
    "VideoStatusPublishingPhaseFields",
    "VideoStatusUploadingPhaseFields",
    "VideoTextQuestionFields",
    "VideoThumbnailFields",
    "VideoUploadLimitsFields",
    "VoipInfoFields",
    "WearableDevicePublicKeyFields",
    "WebAppLinkFields",
    "WebPublisherFields",
    "WebsiteCreativeAssetSourceFields",
    "WebsiteCreativeAssetSuggestionsFields",
    "WebsiteCreativeInfoFields",
    "WhatsAppBusinessAccountFields",
    "WhatsAppBusinessHealthStatusFields",
    "WhatsAppBusinessHealthStatusForMessageSendFields",
    "WhatsAppBusinessPartnerClientVerificationSubmissionFields",
    "WhatsAppBusinessPreVerifiedPhoneNumberFields",
    "WhatsAppBusinessProfileFields",
    "WhatsAppPaymentCapabilitiesFields",
    "WhatsappSubscribedAppsInfoFields",
    "WhitehatFBDLRunFields",
    "WifiInformationFields",
    "WindowsAppLinkFields",
    "WindowsPhoneAppLinkFields",
    "WithAsset3DFields",
    "WITUserFields",
    "WoodhengePurchasedPAYGReceiptFields",
    "WoodhengeSupporterFields",
    "WorkAccessCodeFields",
    "WorkExperienceFields",
    "WorkSkillFields",
    "WorkUserBadgesFields",
    "WorkUserFrontlineFields",
    # API Parameter Models
    "AdCreateAdLabelParams",
    "AdGetAdrulesGovernedParams",
    "AdGetCopiesParams",
    "AdCreateCopieParams",
    "AdGetInsightsParams",
    "AdCreateInsightParams",
    "AdGetPreviewsParams",
    "AdAccountCreateAccountControlParams",
    "AdAccountGetActivitiesParams",
    "AdAccountCreateAdPlacePageSetParams",
    "AdAccountCreateAdPlacePageSetsAsyncParams",
    "AdAccountGetAdSavedKeywordsParams",
    "AdAccountCreateAdCreativeParams",
    "AdAccountGetAdCreativesByLabelsParams",
    "AdAccountDeleteAdImagesParams",
    "AdAccountGetAdImagesParams",
    "AdAccountCreateAdImageParams",
    "AdAccountCreateAdLabelParams",
    "AdAccountCreateAdPlayableParams",
    "AdAccountGetAdrulesHistoryParams",
    "AdAccountCreateAdrulesLibraryParams",
    "AdAccountGetAdSParams",
    "AdAccountCreateAdParams",
    "AdAccountGetAdsReportingMmmReportsParams",
    "AdAccountGetAdsVolumeParams",
    "AdAccountGetAdSByLabelsParams",
    "AdAccountGetAdSetsParams",
    "AdAccountCreateAdSetParams",
    "AdAccountGetAdSetsByLabelsParams",
    "AdAccountGetAdSpixelsParams",
    "AdAccountCreateAdSpixelParams",
    "AdAccountGetAdvertisableApplicationsParams",
    "AdAccountDeleteAdVideosParams",
    "AdAccountGetAdVideosParams",
    "AdAccountCreateAdVideoParams",
    "AdAccountDeleteAgenciesParams",
    "AdAccountCreateAgencieParams",
    "AdAccountDeleteAssignedUsersParams",
    "AdAccountGetAssignedUsersParams",
    "AdAccountCreateAssignedUserParams",
    "AdAccountCreateAsyncBatchRequestParams",
    "AdAccountGetAsyncRequestsParams",
    "AdAccountGetAsyncAdCreativesParams",
    "AdAccountCreateAsyncAdCreativeParams",
    "AdAccountGetAsyncAdrequestsetsParams",
    "AdAccountCreateAsyncAdrequestsetParams",
    "AdAccountCreateBlockListDraftParams",
    "AdAccountCreateBrandSafetyContentFilterLevelParams",
    "AdAccountGetBroadtargetingcategoriesParams",
    "AdAccountGetBusinessprojectsParams",
    "AdAccountDeleteCampaignsParams",
    "AdAccountGetCampaignsParams",
    "AdAccountCreateCampaignParams",
    "AdAccountGetCampaignsByLabelsParams",
    "AdAccountGetConnectedInstagramAccountsWithIabpParams",
    "AdAccountGetCustomAudiencesParams",
    "AdAccountCreateCustomAudienceParams",
    "AdAccountCreateCustomAudiencestoParams",
    "AdAccountCreateCustomConversionParams",
    "AdAccountGetDeliveryEstimateParams",
    "AdAccountGetDeprecatedtargetingadsetsParams",
    "AdAccountGetGeneratepreviewsParams",
    "AdAccountGetInsightsParams",
    "AdAccountCreateInsightParams",
    "AdAccountGetIosFourteenCampaignLimitsParams",
    "AdAccountGetMatchedSearchApplicationsParams",
    "AdAccountGetMinimumBudgetsParams",
    "AdAccountGetOnbehalfRequestsParams",
    "AdAccountCreateProductAudienceParams",
    "AdAccountCreatePublisherBlockListParams",
    "AdAccountGetReachestimateParams",
    "AdAccountCreateReachfrequencypredictionParams",
    "AdAccountCreateRecommendationParams",
    "AdAccountGetSavedAudiencesParams",
    "AdAccountDeleteSubscribedAppsParams",
    "AdAccountCreateSubscribedAppParams",
    "AdAccountGetTargetingbrowseParams",
    "AdAccountGetTargetingsearchParams",
    "AdAccountGetTargetingSentenceLinesParams",
    "AdAccountGetTargetingsuggestionsParams",
    "AdAccountGetTargetingvalidationParams",
    "AdAccountCreateTrackingParams",
    "AdAccountDeleteUsersofanyaudienceParams",
    "AdAccountGetValueRuleSetParams",
    "AdAccountCreateValueRuleSetParams",
    "AdAccountGetVideoAdsParams",
    "AdAccountCreateVideoAdParams",
    "AdAsyncRequestSetGetRequestsParams",
    "AdCreativeCreateAdLabelParams",
    "AdCreativeGetPreviewsParams",
    "AdMonetizationPropertyGetAdNetworkanalyticsParams",
    "AdMonetizationPropertyCreateAdNetworkanalyticParams",
    "AdMonetizationPropertyGetAdnetworkanalyticsResultsParams",
    "AdRuleGetHistoryParams",
    "AdSetGetActivitiesParams",
    "AdSetDeleteAdLabelsParams",
    "AdSetCreateAdLabelParams",
    "AdSetGetAdrulesGovernedParams",
    "AdSetGetAdSParams",
    "AdSetGetAsyncAdRequestsParams",
    "AdSetCreateBudgetScheduleParams",
    "AdSetGetCopiesParams",
    "AdSetCreateCopieParams",
    "AdSetGetDeliveryEstimateParams",
    "AdSetGetInsightsParams",
    "AdSetCreateInsightParams",
    "AdSetGetMessageDeliveryEstimateParams",
    "AdStudyCreateCheckpointParams",
    "AdStudyCreateInstanceParams",
    "AdVideoCreateCaptionParams",
    "AdVideoCreateCollaboratorParams",
    "AdVideoGetCommentsParams",
    "AdVideoCreateCommentParams",
    "AdVideoCreateGamingClipCreateParams",
    "AdVideoCreateLikeParams",
    "AdVideoCreatePollParams",
    "AdVideoCreateThumbnailParams",
    "AdVideoGetVideoInsightsParams",
    "AdgroupFacebookFeedbackGetCommentsParams",
    "AdsPixelGetAdAccountsParams",
    "AdsPixelDeleteAgenciesParams",
    "AdsPixelCreateAgencieParams",
    "AdsPixelCreateAhpConfigParams",
    "AdsPixelGetAssignedUsersParams",
    "AdsPixelCreateAssignedUserParams",
    "AdsPixelGetDaChecksParams",
    "AdsPixelCreateEventParams",
    "AdsPixelGetOfflineEventUploadsParams",
    "AdsPixelDeleteSharedAccountsParams",
    "AdsPixelGetSharedAccountsParams",
    "AdsPixelCreateSharedAccountParams",
    "AdsPixelGetStatsParams",
    "AlbumGetCommentsParams",
    "AlbumCreateCommentParams",
    "AlbumCreateLikeParams",
    "AlbumCreatePhotoParams",
    "AlbumGetPictureParams",
    "ApplicationDeleteAccountsParams",
    "ApplicationGetAccountsParams",
    "ApplicationCreateAccountParams",
    "ApplicationCreateActivitieParams",
    "ApplicationGetAdnetworkPlacementsParams",
    "ApplicationGetAdNetworkanalyticsParams",
    "ApplicationCreateAdNetworkanalyticParams",
    "ApplicationGetAdnetworkanalyticsResultsParams",
    "ApplicationGetAemAttributionParams",
    "ApplicationGetAemConversionConfigsParams",
    "ApplicationGetAemConversionFilterParams",
    "ApplicationCreateAemConversionParams",
    "ApplicationCreateAemSkanReadineParams",
    "ApplicationCreateAggregateRevenueParams",
    "ApplicationCreateAppIndexingParams",
    "ApplicationCreateAppIndexingSessionParams",
    "ApplicationGetAppInstalledGroupsParams",
    "ApplicationCreateAppPushDeviceTokenParams",
    "ApplicationCreateAssetParams",
    "ApplicationGetAuthorizedAdaccountsParams",
    "ApplicationGetButtonAutoDetectionDeviceSelectionParams",
    "ApplicationCreateCodelessEventMappingParams",
    "ApplicationGetDaChecksParams",
    "ApplicationCreateDomainReportParams",
    "ApplicationGetIapPurchasesParams",
    "ApplicationGetMessageTemplatesParams",
    "ApplicationCreateMmpAuditingParams",
    "ApplicationGetMobileSdkGkParams",
    "ApplicationCreateMonetizedDigitalStoreObjectParams",
    "ApplicationCreateOccludespopupParams",
    "ApplicationGetPermissionsParams",
    "ApplicationGetProductSParams",
    "ApplicationGetSgwDatasetStatusParams",
    "ApplicationGetSgwInstallDeferralLinkParams",
    "ApplicationCreateSubscribedDomainParams",
    "ApplicationCreateSubscribedDomainsPhishingParams",
    "ApplicationDeleteSubscriptionsParams",
    "ApplicationCreateSubscriptionParams",
    "ApplicationCreateUploadParams",
    "ApplicationCreateWhatsappBusinessSolutionParams",
    "ApplicationGetWhatsappBusinessSolutionsParams",
    "AutomotiveModelGetOverrideDetailsParams",
    "AvatarGetModelsParams",
    "BusinessCreateAccessTokenParams",
    "BusinessGetAdAccountInfosParams",
    "BusinessDeleteAdAccountsParams",
    "BusinessCreateAdReviewRequestParams",
    "BusinessCreateAdStudieParams",
    "BusinessCreateAdAccountParams",
    "BusinessCreateAddPhoneNumberParams",
    "BusinessCreateAdnetworkApplicationParams",
    "BusinessGetAdNetworkanalyticsParams",
    "BusinessCreateAdNetworkanalyticParams",
    "BusinessGetAdnetworkanalyticsResultsParams",
    "BusinessGetAdsDatasetParams",
    "BusinessCreateAdsDatasetParams",
    "BusinessGetAdsReportingMmmReportsParams",
    "BusinessGetAdSpixelsParams",
    "BusinessCreateAdSpixelParams",
    "BusinessDeleteAgenciesParams",
    "BusinessCreateBlockListDraftParams",
    "BusinessCreateBmReviewRequestParams",
    "BusinessGetBusinessInvoicesParams",
    "BusinessCreateBusinessUserParams",
    "BusinessCreateClaimCustomConversionParams",
    "BusinessGetClientAdAccountsParams",
    "BusinessCreateClientAppParams",
    "BusinessCreateClientPageParams",
    "BusinessDeleteClientsParams",
    "BusinessGetCollaborativeAdsCollaborationRequestsParams",
    "BusinessCreateCollaborativeAdsCollaborationRequestParams",
    "BusinessCreateCpasBusinessSetupConfigParams",
    "BusinessCreateCreativeFolderParams",
    "BusinessCreateCustomConversionParams",
    "BusinessCreateEventSourceGroupParams",
    "BusinessGetExtendedcreditapplicationsParams",
    "BusinessGetExtendedcreditsParams",
    "BusinessCreateImageParams",
    "BusinessGetInitiatedAudienceSharingRequestsParams",
    "BusinessDeleteInstagramAccountsParams",
    "BusinessDeleteManagedBusinessesParams",
    "BusinessCreateManagedBusinesseParams",
    "BusinessGetManagedPartnerAdsFundingSourceDetailsParams",
    "BusinessCreateManagedPartnerBusinessSetupParams",
    "BusinessDeleteManagedPartnerBusinessesParams",
    "BusinessCreateManagedPartnerBusinesseParams",
    "BusinessCreateOnboardPartnersToMmLiteParams",
    "BusinessCreateOpenbridgeConfigurationParams",
    "BusinessGetOwnedAdAccountsParams",
    "BusinessCreateOwnedAdAccountParams",
    "BusinessCreateOwnedAppParams",
    "BusinessDeleteOwnedBusinessesParams",
    "BusinessGetOwnedBusinessesParams",
    "BusinessCreateOwnedBusinesseParams",
    "BusinessCreateOwnedPageParams",
    "BusinessCreateOwnedProductCatalogParams",
    "BusinessDeletePagesParams",
    "BusinessCreatePartnerPremiumOptionParams",
    "BusinessGetPendingUsersParams",
    "BusinessGetPictureParams",
    "BusinessGetPreverifiedNumbersParams",
    "BusinessGetReceivedAudienceSharingRequestsParams",
    "BusinessGetSelfCertifiedWhatsappBusinessSubmissionsParams",
    "BusinessCreateSelfCertifyWhatsappBusineParams",
    "BusinessCreateSetupManagedPartnerAdaccountParams",
    "BusinessDeleteSharePreverifiedNumbersParams",
    "BusinessCreateSharePreverifiedNumberParams",
    "BusinessCreateSystemUserAccessTokenParams",
    "BusinessCreateSystemUserParams",
    "BusinessCreateVideoParams",
    "BusinessAssetGroupDeleteAssignedUsersParams",
    "BusinessAssetGroupGetAssignedUsersParams",
    "BusinessAssetGroupCreateAssignedUserParams",
    "BusinessAssetGroupDeleteContainedAdaccountsParams",
    "BusinessAssetGroupCreateContainedAdaccountParams",
    "BusinessAssetGroupDeleteContainedApplicationsParams",
    "BusinessAssetGroupCreateContainedApplicationParams",
    "BusinessAssetGroupDeleteContainedCustomConversionsParams",
    "BusinessAssetGroupCreateContainedCustomConversionParams",
    "BusinessAssetGroupDeleteContainedInstagramAccountsParams",
    "BusinessAssetGroupCreateContainedInstagramAccountParams",
    "BusinessAssetGroupDeleteContainedPagesParams",
    "BusinessAssetGroupCreateContainedPageParams",
    "BusinessAssetGroupDeleteContainedPixelsParams",
    "BusinessAssetGroupCreateContainedPixelParams",
    "BusinessAssetGroupDeleteContainedProductCatalogsParams",
    "BusinessAssetGroupCreateContainedProductCatalogParams",
    "BusinessUserGetAssignedBusinessAssetGroupsParams",
    "BusinessUserGetAssignedPagesParams",
    "CampaignCreateAdLabelParams",
    "CampaignGetAdrulesGovernedParams",
    "CampaignGetAdSParams",
    "CampaignGetAdSetsParams",
    "CampaignCreateBudgetScheduleParams",
    "CampaignGetCopiesParams",
    "CampaignCreateCopieParams",
    "CampaignGetInsightsParams",
    "CampaignCreateInsightParams",
    "CanvasGetPreviewsParams",
    "CommentGetCommentsParams",
    "CommentCreateCommentParams",
    "CommentDeleteLikesParams",
    "CommentCreateLikeParams",
    "CommentGetReactionsParams",
    "CommerceMerchantSettingsCreateAcknowledgeOrderParams",
    "CommerceMerchantSettingsGetCommerceOrdersParams",
    "CommerceMerchantSettingsGetCommercePayoutsParams",
    "CommerceMerchantSettingsGetCommerceTransactionsParams",
    "CommerceMerchantSettingsGetReturnsParams",
    "CommerceMerchantSettingsGetShippingProfilesParams",
    "CommerceMerchantSettingsCreateShippingProfileParams",
    "CommerceOrderCreateAcknowledgeOrderParams",
    "CommerceOrderCreateCancellationParams",
    "CommerceOrderCreateItemUpdateParams",
    "CommerceOrderCreateRefundParams",
    "CommerceOrderGetReturnsParams",
    "CommerceOrderCreateReturnParams",
    "CommerceOrderCreateShipmentParams",
    "CommerceOrderCreateUpdateShipmentParams",
    "CustomAudienceDeleteAdAccountsParams",
    "CustomAudienceGetAdAccountsParams",
    "CustomAudienceCreateAdAccountParams",
    "CustomAudienceGetAdSParams",
    "CustomAudienceGetHealthParams",
    "CustomAudienceGetSaltsParams",
    "CustomAudienceCreateSaltParams",
    "CustomAudienceGetSessionsParams",
    "CustomAudienceDeleteUsersParams",
    "CustomAudienceCreateUserParams",
    "CustomAudienceCreateUsersreplaceParams",
    "CustomConversionGetStatsParams",
    "DestinationGetOverrideDetailsParams",
    "EventCreateLiveVideoParams",
    "EventSourceGroupCreateSharedAccountParams",
    "ExtendedCreditCreateExtendedCreditInvoiceGroupParams",
    "ExtendedCreditGetOwningCreditAllocationConfigsParams",
    "ExtendedCreditCreateOwningCreditAllocationConfigParams",
    "ExtendedCreditCreateWhatsappCreditAttachParams",
    "ExtendedCreditCreateWhatsappCreditSharingParams",
    "ExtendedCreditCreateWhatsappCreditSharingAndAttachParams",
    "ExtendedCreditInvoiceGroupDeleteAdAccountsParams",
    "ExtendedCreditInvoiceGroupCreateAdAccountParams",
    "FlightGetOverrideDetailsParams",
    "FundraiserPersonToCharityCreateExternalDonationParams",
    "GroupDeleteAdMinsParams",
    "GroupCreateAdMinParams",
    "GroupGetFeedParams",
    "GroupCreateFeedParams",
    "GroupCreateGroupParams",
    "GroupGetLiveVideosParams",
    "GroupCreateLiveVideoParams",
    "GroupDeleteMembersParams",
    "GroupCreateMemberParams",
    "GroupCreatePhotoParams",
    "GroupGetPictureParams",
    "GroupGetVideosParams",
    "GroupCreateVideoParams",
    "HomeListingGetOverrideDetailsParams",
    "HotelGetOverrideDetailsParams",
    "IGCommentCreateReplieParams",
    "IGMediaCreateBrandedContentPartnerPromoteParams",
    "IGMediaCreateCommentParams",
    "IGMediaGetInsightsParams",
    "IGMediaCreateProductTagParams",
    "IGMediaForIGOnlyAPICreateCommentParams",
    "IGMediaForIGOnlyAPIGetInsightsParams",
    "IGUserGetAuthorizedAdaccountsParams",
    "IGUserCreateAuthorizedAdaccountParams",
    "IGUserCreateBrandedContentAdPermissionParams",
    "IGUserGetBrandedContentAdvertisableMediasParams",
    "IGUserDeleteBrandedContentTagApprovalParams",
    "IGUserGetBrandedContentTagApprovalParams",
    "IGUserCreateBrandedContentTagApprovalParams",
    "IGUserGetCatalogProductSearchParams",
    "IGUserGetContentPublishingLimitParams",
    "IGUserCreateDatasetParams",
    "IGUserGetInsightsParams",
    "IGUserGetLiveMediaParams",
    "IGUserGetMediaParams",
    "IGUserCreateMediaParams",
    "IGUserCreateMediaPublishParams",
    "IGUserCreateMentionParams",
    "IGUserGetProductAppealParams",
    "IGUserCreateProductAppealParams",
    "IGUserCreateUpcomingEventParams",
    "IGUserGetWelcomeMessageFlowsParams",
    "IGUserExportForCAMGetInsightsParams",
    "IGUserForIGOnlyAPIGetBusinessMessagingFeatureStatusParams",
    "IGUserForIGOnlyAPIGetContentPublishingLimitParams",
    "IGUserForIGOnlyAPIGetConversationsParams",
    "IGUserForIGOnlyAPIGetInsightsParams",
    "IGUserForIGOnlyAPIGetMediaParams",
    "IGUserForIGOnlyAPICreateMediaParams",
    "IGUserForIGOnlyAPICreateMediapublishParams",
    "IGUserForIGOnlyAPICreateMentionParams",
    "IGUserForIGOnlyAPICreateMessageattachmentParams",
    "IGUserForIGOnlyAPICreateMessageParams",
    "IGUserForIGOnlyAPIDeleteMessengerProfileParams",
    "IGUserForIGOnlyAPICreateMessengerProfileParams",
    "IGUserForIGOnlyAPICreateSubscribedAppParams",
    "IGUserForIGOnlyAPIDeleteWelcomeMessageFlowsParams",
    "IGUserForIGOnlyAPIGetWelcomeMessageFlowsParams",
    "IGUserForIGOnlyAPICreateWelcomeMessageFlowParams",
    "InstagramUserGetAuthorizedAdaccountsParams",
    "LeadgenFormCreateTestLeadParams",
    "LinkCreateCommentParams",
    "LiveVideoGetBlockedUsersParams",
    "LiveVideoGetCommentsParams",
    "LiveVideoCreatePollParams",
    "LiveVideoGetReactionsParams",
    "LocalServiceBusinessGetOverrideDetailsParams",
    "MediaTitleGetOverrideDetailsParams",
    "OfflineConversionDataSetGetAdAccountsParams",
    "OfflineConversionDataSetGetAudiencesParams",
    "OfflineConversionDataSetGetCustomConversionsParams",
    "OfflineConversionDataSetGetSharedAccountsParams",
    "OfflineConversionDataSetGetSharedAgenciesParams",
    "OfflineConversionDataSetGetStatsParams",
    "OfflineConversionDataSetGetUploadsParams",
    "OfflineProductItemGetOverrideDetailsParams",
    "PageCreateAbTestParams",
    "PageCreateAcknowledgeOrderParams",
    "PageGetAdsPostsParams",
    "PageDeleteAgenciesParams",
    "PageCreateAgencieParams",
    "PageDeleteAssignedUsersParams",
    "PageGetAssignedUsersParams",
    "PageCreateAssignedUserParams",
    "PageDeleteBlockedParams",
    "PageGetBlockedParams",
    "PageCreateBlockedParams",
    "PageCreateBusinessDataParams",
    "PageGetBusinessprojectsParams",
    "PageCreateCallParams",
    "PageCreateCanvasElementParams",
    "PageGetCanvasesParams",
    "PageCreateCanvaseParams",
    "PageGetCommerceOrdersParams",
    "PageGetCommercePayoutsParams",
    "PageGetCommerceTransactionsParams",
    "PageGetConversationsParams",
    "PageCreateCopyrightManualClaimParams",
    "PageCreateCustomLabelParams",
    "PageDeleteCustomUserSettingsParams",
    "PageGetCustomUserSettingsParams",
    "PageCreateCustomUserSettingParams",
    "PageCreateDatasetParams",
    "PageGetEventsParams",
    "PageCreateExtendThreadControlParams",
    "PageGetFeedParams",
    "PageCreateFeedParams",
    "PageCreateImageCopyrightParams",
    "PageGetInsightsParams",
    "PageCreateLeadgenFormParams",
    "PageGetLikesParams",
    "PageGetLiveVideosParams",
    "PageCreateLiveVideoParams",
    "PageDeleteLocationsParams",
    "PageCreateLocationParams",
    "PageGetMediaFingerprintsParams",
    "PageCreateMediaFingerprintParams",
    "PageCreateMessageAttachmentParams",
    "PageDeleteMessageTemplatesParams",
    "PageGetMessageTemplatesParams",
    "PageCreateMessageTemplateParams",
    "PageCreateMessageParams",
    "PageCreateMessengerCallSettingParams",
    "PageCreateMessengerLeadFormParams",
    "PageDeleteMessengerProfileParams",
    "PageGetMessengerProfileParams",
    "PageCreateMessengerProfileParams",
    "PageCreateModerateConversationParams",
    "PageCreateNlpConfigParams",
    "PageCreateNotificationMessagesDevSupportParams",
    "PageCreatePageWhatsappNumberVerificationParams",
    "PageCreatePassThreadControlParams",
    "PageCreatePersonaParams",
    "PageCreatePhotoStorieParams",
    "PageGetPhotosParams",
    "PageCreatePhotoParams",
    "PageGetPictureParams",
    "PageCreatePictureParams",
    "PageGetPostsParams",
    "PageGetPublishedPostsParams",
    "PageCreateReleaseThreadControlParams",
    "PageCreateRequestThreadControlParams",
    "PageGetRolesParams",
    "PageGetSecondaryReceiversParams",
    "PageCreateSettingParams",
    "PageGetStoriesParams",
    "PageCreateSubscribedAppParams",
    "PageGetTabsParams",
    "PageCreateTakeThreadControlParams",
    "PageGetThreadOwnerParams",
    "PageGetThreadsParams",
    "PageCreateUnlinkAccountParams",
    "PageGetVideoCopyrightRulesParams",
    "PageCreateVideoCopyrightRuleParams",
    "PageCreateVideoCopyrightParams",
    "PageGetVideoReelsParams",
    "PageCreateVideoReelParams",
    "PageCreateVideoStorieParams",
    "PageGetVideosParams",
    "PageCreateVideoParams",
    "PageGetVisitorPostsParams",
    "PageDeleteWelcomeMessageFlowsParams",
    "PageGetWelcomeMessageFlowsParams",
    "PageCreateWelcomeMessageFlowParams",
    "PagePostGetCommentsParams",
    "PagePostCreateCommentParams",
    "PagePostGetInsightsParams",
    "PagePostDeleteLikesParams",
    "PagePostCreateLikeParams",
    "PagePostGetReactionsParams",
    "PageUserMessageThreadLabelDeleteLabelParams",
    "PageUserMessageThreadLabelCreateLabelParams",
    "PaymentEnginePaymentCreateDisputeParams",
    "PaymentEnginePaymentCreateRefundParams",
    "PhotoGetCommentsParams",
    "PhotoCreateCommentParams",
    "PhotoGetInsightsParams",
    "PhotoCreateLikeParams",
    "PostGetCommentsParams",
    "PostCreateCommentParams",
    "PostGetInsightsParams",
    "PostDeleteLikesParams",
    "PostCreateLikeParams",
    "PostGetReactionsParams",
    "ProductCatalogDeleteAgenciesParams",
    "ProductCatalogCreateAgencieParams",
    "ProductCatalogDeleteAssignedUsersParams",
    "ProductCatalogGetAssignedUsersParams",
    "ProductCatalogCreateAssignedUserParams",
    "ProductCatalogGetAutomotiveModelsParams",
    "ProductCatalogCreateBatchParams",
    "ProductCatalogCreateCatalogStoreParams",
    "ProductCatalogGetCategoriesParams",
    "ProductCatalogCreateCategorieParams",
    "ProductCatalogGetCheckBatchRequestStatusParams",
    "ProductCatalogGetCheckMarketplacePartnerSellersStatusParams",
    "ProductCatalogCreateCpasLsbImageBankParams",
    "ProductCatalogGetCreatorAssetCreativesParams",
    "ProductCatalogGetDataSourcesParams",
    "ProductCatalogGetDestinationsParams",
    "ProductCatalogGetDiagnosticsParams",
    "ProductCatalogGetEventStatsParams",
    "ProductCatalogDeleteExternalEventSourcesParams",
    "ProductCatalogCreateExternalEventSourceParams",
    "ProductCatalogGetFlightsParams",
    "ProductCatalogCreateGeolocatedItemsBatchParams",
    "ProductCatalogGetHomeListingsParams",
    "ProductCatalogCreateHomeListingParams",
    "ProductCatalogGetHotelRoomsBatchParams",
    "ProductCatalogCreateHotelRoomsBatchParams",
    "ProductCatalogGetHotelsParams",
    "ProductCatalogCreateHotelParams",
    "ProductCatalogCreateItemsBatchParams",
    "ProductCatalogCreateLocalizedItemsBatchParams",
    "ProductCatalogCreateMarketplacePartnerSellersDetailParams",
    "ProductCatalogCreateMarketplacePartnerSignalParams",
    "ProductCatalogGetPricingVariablesBatchParams",
    "ProductCatalogCreatePricingVariablesBatchParams",
    "ProductCatalogCreateProductFeedParams",
    "ProductCatalogCreateProductGroupParams",
    "ProductCatalogGetProductSetsParams",
    "ProductCatalogCreateProductSetParams",
    "ProductCatalogGetProductSetsBatchParams",
    "ProductCatalogGetProductSParams",
    "ProductCatalogCreateProductParams",
    "ProductCatalogCreateUpdateGeneratedImageConfigParams",
    "ProductCatalogGetVehicleOffersParams",
    "ProductCatalogGetVehiclesParams",
    "ProductCatalogCreateVehicleParams",
    "ProductCatalogCreateVersionItemsBatchParams",
    "ProductFeedGetAutomotiveModelsParams",
    "ProductFeedGetDestinationsParams",
    "ProductFeedGetFlightsParams",
    "ProductFeedGetHomeListingsParams",
    "ProductFeedGetHotelsParams",
    "ProductFeedGetMediaTitlesParams",
    "ProductFeedGetProductSParams",
    "ProductFeedCreateRuleParams",
    "ProductFeedCreateSupplementaryFeedAssocParams",
    "ProductFeedCreateUploadScheduleParams",
    "ProductFeedCreateUploadParams",
    "ProductFeedGetVehicleOffersParams",
    "ProductFeedGetVehiclesParams",
    "ProductFeedUploadGetErrorsParams",
    "ProductGroupCreateProductParams",
    "ProductItemGetOverrideDetailsParams",
    "ProductSetGetAutomotiveModelsParams",
    "ProductSetGetDestinationsParams",
    "ProductSetGetFlightsParams",
    "ProductSetGetHomeListingsParams",
    "ProductSetGetHotelsParams",
    "ProductSetGetMediaTitlesParams",
    "ProductSetGetProductSParams",
    "ProductSetGetVehicleOffersParams",
    "ProductSetGetVehiclesParams",
    "ProfileGetPictureParams",
    "PublisherBlockListCreateAppendPublisherUrlParams",
    "PublisherBlockListGetPagedWebPublishersParams",
    "RTBDynamicPostGetCommentsParams",
    "ShadowIGHashtagGetRecentMediaParams",
    "ShadowIGHashtagGetTopMediaParams",
    "StatusCreateLikeParams",
    "StoriesGetInsightsParams",
    "SystemUserGetAssignedBusinessAssetGroupsParams",
    "SystemUserGetAssignedPagesParams",
    "TransactableItemGetOverrideDetailsParams",
    "UnifiedThreadGetMessagesParams",
    "UserCreateAccessTokenParams",
    "UserGetAccountsParams",
    "UserCreateAccountParams",
    "UserCreateAdStudieParams",
    "UserCreateApplicationParams",
    "UserGetAssignedBusinessAssetGroupsParams",
    "UserGetAssignedPagesParams",
    "UserDeleteBusinessesParams",
    "UserCreateBusinesseParams",
    "UserGetConversationsParams",
    "UserGetEventsParams",
    "UserGetFeedParams",
    "UserCreateFeedParams",
    "UserGetFriendsParams",
    "UserCreateFundraiserParams",
    "UserGetGroupsParams",
    "UserGetIdsForAppsParams",
    "UserGetIdsForBusinessParams",
    "UserGetIdsForPagesParams",
    "UserGetLikesParams",
    "UserGetLiveVideosParams",
    "UserCreateLiveVideoParams",
    "UserCreateMessengerKidsAccountsUnreadBadgeParams",
    "UserGetMusicParams",
    "UserCreateNotificationParams",
    "UserDeletePermissionsParams",
    "UserGetPermissionsParams",
    "UserGetPhotosParams",
    "UserCreatePhotoParams",
    "UserGetPictureParams",
    "UserGetPostsParams",
    "UserGetRichMediaDocumentsParams",
    "UserCreateStagingResourceParams",
    "UserGetVideosParams",
    "UserCreateVideoParams",
    "VehicleGetOverrideDetailsParams",
    "VehicleOfferGetOverrideDetailsParams",
    "WhatsAppBusinessAccountDeleteAssignedUsersParams",
    "WhatsAppBusinessAccountGetAssignedUsersParams",
    "WhatsAppBusinessAccountCreateAssignedUserParams",
    "WhatsAppBusinessAccountGetCallAnalyticsParams",
    "WhatsAppBusinessAccountGetConversationAnalyticsParams",
    "WhatsAppBusinessAccountCreateDatasetParams",
    "WhatsAppBusinessAccountCreateFlowParams",
    "WhatsAppBusinessAccountCreateGeneratePaymentConfigurationOauthLinkParams",
    "WhatsAppBusinessAccountGetMessageTemplatePreviewsParams",
    "WhatsAppBusinessAccountDeleteMessageTemplatesParams",
    "WhatsAppBusinessAccountGetMessageTemplatesParams",
    "WhatsAppBusinessAccountCreateMessageTemplateParams",
    "WhatsAppBusinessAccountCreateMigrateFlowParams",
    "WhatsAppBusinessAccountCreateMigrateMessageTemplateParams",
    "WhatsAppBusinessAccountDeletePaymentConfigurationParams",
    "WhatsAppBusinessAccountGetPaymentConfigurationParams",
    "WhatsAppBusinessAccountCreatePaymentConfigurationParams",
    "WhatsAppBusinessAccountCreatePhoneNumberParams",
    "WhatsAppBusinessAccountGetPricingAnalyticsParams",
    "WhatsAppBusinessAccountDeleteProductCatalogsParams",
    "WhatsAppBusinessAccountCreateProductCatalogParams",
    "WhatsAppBusinessAccountCreateSetOboMobilityIntentParams",
    "WhatsAppBusinessAccountCreateSetSolutionMigrationIntentParams",
    "WhatsAppBusinessAccountCreateSubscribedAppParams",
    "WhatsAppBusinessAccountGetTemplateAnalyticsParams",
    "WhatsAppBusinessAccountGetTemplateGroupAnalyticsParams",
    "WhatsAppBusinessAccountCreateTemplateGroupParams",
    "WhatsAppBusinessAccountGetTemplatePerformanceMetricsParams",
    "WhatsAppBusinessAccountCreateUpsertMessageTemplateParams",
    "WhatsAppBusinessAccountGetWelcomeMessageSequencesParams",
    "WhatsAppBusinessPreVerifiedPhoneNumberCreateRequestCodeParams",
    "WhatsAppBusinessPreVerifiedPhoneNumberCreateVerifyCodeParams",
]
