"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
===- Symbol.proto -------------------------------------------*- Proto -*-===//

 Copyright (C) 2020 GrammaTech, Inc.

 This code is licensed under the MIT license. See the LICENSE file in the
 project root for license terms.

 This project is sponsored by the Office of Naval Research, One Liberty
 Center, 875 N. Randolph Street, Arlington, VA 22203 under contract #
 N68335-17-C-0700.  The content of the information does not necessarily
 reflect the position or policy of the Government and no official
 endorsement should be inferred.

===----------------------------------------------------------------------===//
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Symbol(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    UUID_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    REFERENT_UUID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    AT_END_FIELD_NUMBER: builtins.int
    uuid: builtins.bytes
    value: builtins.int
    referent_uuid: builtins.bytes
    name: builtins.str
    at_end: builtins.bool
    def __init__(
        self,
        *,
        uuid: builtins.bytes = ...,
        value: builtins.int = ...,
        referent_uuid: builtins.bytes = ...,
        name: builtins.str = ...,
        at_end: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["optional_payload", b"optional_payload", "referent_uuid", b"referent_uuid", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["at_end", b"at_end", "name", b"name", "optional_payload", b"optional_payload", "referent_uuid", b"referent_uuid", "uuid", b"uuid", "value", b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["optional_payload", b"optional_payload"]) -> typing_extensions.Literal["value", "referent_uuid"] | None: ...

global___Symbol = Symbol
