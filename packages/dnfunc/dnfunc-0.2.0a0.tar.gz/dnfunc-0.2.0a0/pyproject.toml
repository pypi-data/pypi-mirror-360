[project]
name        = "dnfunc"
description = "A collection of Vapoursynth functions and wrappers"
readme      = "README.md"
license     = "MIT"
keywords    = ["vapoursynth", "vapoursynth-functions", "video-encoding"]
dynamic     = ["version"]

authors = [{ name = "DeadNews", email = "deadnewsgit@gmail.com" }]
classifiers = [
  "Operating System :: OS Independent",
  "Topic :: Multimedia :: Video",
]

requires-python = ">=3.13"
dependencies = [
  "vapoursynth>=72",
  "havsfunc>=33",
  "lvsfunc>=0.8.0",
  "pyyaml>=6.0.2",
  "vstools>=3.3.3",
  "vsutil>=0.8.0",
]

[dependency-groups]
dev = [
  "mypy>=1.16.0",
  "ruff>=0.11.12",
  "types-pyyaml>=6.0.12.20240917",
  "pytest>=8.3.5",
  "pytest-cov>=6.1.1",
]

[project.urls]
Repository = "https://github.com/deadnews/dnfunc"
Changelog  = "https://github.com/deadnews/dnfunc/CHANGELOG.md"

[build-system]
requires      = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv-dynamic-versioning]
vcs   = "git"
style = "semver"

[tool.ruff]
line-length        = 99
format.line-ending = "lf"

[tool.ruff.lint]
flake8-tidy-imports.ban-relative-imports = "all"
pycodestyle.max-doc-length               = 129
pycodestyle.max-line-length              = 129
pydocstyle.convention                    = "google"

select = ["ALL"]
ignore = [
  "COM812",  # Trailing comma missing
  "FBT001",  # Boolean positional arg in function definition
  "FBT002",  # Boolean default value in function definition
  "ISC001",  # Checks for implicitly concatenated strings on a single line
  "PLR0913", # Too many arguments to function call
  #
  "ANN401",  # Dynamically typed expressions are disallowed
  "D101",    # Missing docstring in public class
  "D102",    # Missing docstring in public method
  "D103",    # Missing docstring in public function
  "PLC0415", # Imports should be at the top-level of a file
  "PLR2004", # Magic value used in comparison
  "PLR2044", # Line with empty comment
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["ANN", "D", "E501", "PLC1901", "PLR2004", "S"]

[tool.pytest.ini_options]
addopts   = "--verbose --cov=./src --cov-report=term --cov-report=xml"
testpaths = ["tests"]
markers   = ["online"]

[tool.coverage.report]
exclude_lines = [
  "# pragma: no cover",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.mypy]
disallow_untyped_defs  = true
follow_imports         = "normal"
ignore_missing_imports = true
show_column_numbers    = true
show_error_codes       = true
warn_unused_ignores    = true

[[tool.mypy.overrides]]
module                = ["tests.*"]
disallow_untyped_defs = false

[tool.pyright]
include          = ["src"]
ignore           = ["tests"]
typeCheckingMode = "off"
