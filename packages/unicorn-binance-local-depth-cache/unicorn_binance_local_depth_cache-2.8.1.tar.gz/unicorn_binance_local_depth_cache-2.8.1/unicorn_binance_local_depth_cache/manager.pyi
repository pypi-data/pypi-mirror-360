from .exceptions import *
import logging
import threading
from .cluster import Cluster as Cluster
from _typeshed import Incomplete
from unicorn_binance_rest_api import BinanceRestApiManager
from unicorn_binance_websocket_api import BinanceWebSocketApiManager

__app_name__: str
__version__: str
__logger__: logging.getLogger
logger = __logger__

class BinanceLocalDepthCacheManager(threading.Thread):
    name: Incomplete
    version: Incomplete
    exchange: Incomplete
    dc_streams: Incomplete
    dc_streams_lock: Incomplete
    depth_caches: dict
    depth_cache_update_interval: Incomplete
    default_refresh_interval: Incomplete
    high_performance: Incomplete
    auto_data_cleanup_stopped_streams: Incomplete
    init_interval: Incomplete
    init_time_window: Incomplete
    websocket_close_timeout: Incomplete
    websocket_ping_interval: Incomplete
    websocket_ping_timeout: Incomplete
    disable_colorama: Incomplete
    ubdcc_address: Incomplete
    ubdcc_port: Incomplete
    last_update_check_github: dict
    stop_request: bool
    threading_lock_ask: dict
    threading_lock_bid: dict
    cluster: Incomplete
    ubra: Incomplete
    ubwa: Incomplete
    thread_manage_depthcaches: Incomplete
    def __init__(self, exchange: str = 'binance.com', default_refresh_interval: int = None, depth_cache_update_interval: int = None, high_performance: bool = False, auto_data_cleanup_stopped_streams: bool = False, init_interval: float = 4.0, init_time_window: int = 5, websocket_close_timeout: int = 2, websocket_ping_interval: int = 10, websocket_ping_timeout: int = 20, disable_colorama: bool = False, ubdcc_address: str = None, ubdcc_port: int = 80, ubra_manager: BinanceRestApiManager = None, warn_on_update: bool = True) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: type[BaseException] | None, exc_value: BaseException | None, error_traceback: types.TracebackType | None) -> None: ...
    def set_resync_request(self, market: str = None, unsubscribe: bool = True) -> bool: ...
    def create_depthcache(self, markets: str | list[str] | None = None, refresh_interval: int = None) -> bool: ...
    def create_depth_cache(self, markets: str | list | None = None, refresh_interval: int = None) -> bool: ...
    def get_asks(self, market: str = None, limit_count: int = None, threshold_volume: float = None) -> list: ...
    def get_bids(self, market: str = None, limit_count: int = None, threshold_volume: float = None) -> list: ...
    @staticmethod
    def get_latest_release_info() -> dict | None: ...
    def get_latest_version(self) -> str | None: ...
    def get_list_of_depthcaches(self) -> list: ...
    def get_list_of_depth_caches(self) -> list: ...
    def get_ubra_manager(self) -> BinanceRestApiManager: ...
    def get_ubwa_manager(self) -> BinanceWebSocketApiManager: ...
    def get_user_agent(self) -> str: ...
    def is_depth_cache_synchronized(self, market: str = None) -> bool: ...
    def is_stop_request(self, market: str = None) -> bool: ...
    def get_dc_stream_id(self, market: str = None) -> str | None: ...
    def is_update_available(self) -> bool: ...
    def get_version(self) -> str: ...
    def print_summary(self, add_string: str = None, footer: str = None, title: str = None) -> None: ...
    def print_summary_to_png(self, print_summary_export_path: str = None, height_per_row: float = 12.5, add_string: str = None, footer: str = None, title: str = None): ...
    def set_refresh_request(self, markets: str | list | None = None) -> bool: ...
    def stop_depthcache(self, markets: str | list | None = None) -> bool: ...
    def stop_depth_cache(self, markets: str | list | None = None) -> bool: ...
    def stop_manager(self) -> bool: ...
