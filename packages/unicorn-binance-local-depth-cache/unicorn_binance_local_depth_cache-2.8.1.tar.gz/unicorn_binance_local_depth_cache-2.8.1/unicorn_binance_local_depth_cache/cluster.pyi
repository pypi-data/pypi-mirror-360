import logging
from .cluster_endpoints import ClusterEndpoints as ClusterEndpoints
from .exceptions import DepthCacheClusterNotReachableError as DepthCacheClusterNotReachableError

__logger__: logging.getLogger
logger = __logger__

class Cluster:
    address: str
    endpoints: ClusterEndpoints
    port: int
    url: str
    def __init__(self, address: str = None, port: int = None) -> None: ...
    def create_depthcache(self, exchange: str = None, market: str = None, desired_quantity: int = None, update_interval: int = None, refresh_interval: int = None, debug: bool = False) -> dict: ...
    async def create_depthcache_async(self, exchange: str = None, market: str = None, desired_quantity: int = None, update_interval: int = None, refresh_interval: int = None, debug: bool = False) -> dict: ...
    def create_depthcaches(self, exchange: str = None, markets: list = None, desired_quantity: int = None, update_interval: int = None, refresh_interval: int = None, debug: bool = False) -> dict: ...
    async def create_depthcaches_async(self, exchange: str = None, markets: list = None, desired_quantity: int = None, update_interval: int = None, refresh_interval: int = None, debug: bool = False) -> dict: ...
    def get_asks(self, exchange: str = None, market: str = None, limit_count: int = None, threshold_volume: int = None, debug: bool = False) -> dict: ...
    async def get_asks_async(self, exchange: str = None, market: str = None, limit_count: int = None, threshold_volume: int = None, debug: bool = False) -> dict: ...
    def get_bids(self, exchange: str = None, market: str = None, limit_count: int = None, threshold_volume: int = None, debug: bool = False) -> dict: ...
    async def get_bids_async(self, exchange: str = None, market: str = None, limit_count: int = None, threshold_volume: int = None, debug: bool = False) -> dict: ...
    def get_cluster_info(self, debug: bool = False) -> dict: ...
    async def get_cluster_info_async(self, debug: bool = False) -> dict: ...
    def get_depthcache_list(self, debug: bool = False) -> dict: ...
    async def get_depthcache_list_async(self, debug: bool = False) -> dict: ...
    def get_depthcache_info(self, exchange: str = None, market: str = None, debug: bool = False) -> dict: ...
    async def get_depthcache_info_async(self, exchange: str = None, market: str = None, debug: bool = False) -> dict: ...
    def get_test(self) -> dict: ...
    async def get_test_async(self) -> dict: ...
    def submit_license(self, api_secret: str = None, license_token: str = None, debug: bool = False) -> dict: ...
    async def submit_license_async(self, api_secret: str = None, license_token: str = None, debug: bool = False) -> dict: ...
    def stop_depthcache(self, exchange: str = None, market: str = None, debug: bool = False) -> dict: ...
    async def stop_depthcache_async(self, exchange: str = None, market: str = None, debug: bool = False) -> dict: ...
    def test_connection(self) -> bool: ...
    async def test_connection_async(self) -> bool: ...
