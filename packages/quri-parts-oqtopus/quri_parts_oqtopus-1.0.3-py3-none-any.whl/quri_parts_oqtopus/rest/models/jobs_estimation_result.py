# coding: utf-8

"""
    OQTOPUS Cloud User API

    OQTOPUS Cloud User API. This API is used to interact with the OQTOPUS Cloud service. The API provides endpoints to manage devices, jobs, and results.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: oqtopus-team[at]googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobsEstimationResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exp_value': 'list[float]',
        'stds': 'float'
    }

    attribute_map = {
        'exp_value': 'exp_value',
        'stds': 'stds'
    }

    def __init__(self, exp_value=None, stds=None):  # noqa: E501
        """JobsEstimationResult - a model defined in Swagger"""  # noqa: E501
        self._exp_value = None
        self._stds = None
        self.discriminator = None
        if exp_value is not None:
            self.exp_value = exp_value
        if stds is not None:
            self.stds = stds

    @property
    def exp_value(self):
        """Gets the exp_value of this JobsEstimationResult.  # noqa: E501

        This field must contain an array of numbers with a maximum length of 2, representing a complex number. The first element corresponds to the real part, and the second corresponds to the imaginary part.   # noqa: E501

        :return: The exp_value of this JobsEstimationResult.  # noqa: E501
        :rtype: list[float]
        """
        return self._exp_value

    @exp_value.setter
    def exp_value(self, exp_value):
        """Sets the exp_value of this JobsEstimationResult.

        This field must contain an array of numbers with a maximum length of 2, representing a complex number. The first element corresponds to the real part, and the second corresponds to the imaginary part.   # noqa: E501

        :param exp_value: The exp_value of this JobsEstimationResult.  # noqa: E501
        :type: list[float]
        """

        self._exp_value = exp_value

    @property
    def stds(self):
        """Gets the stds of this JobsEstimationResult.  # noqa: E501

        (Only for estimation jobs) The standard deviation value  # noqa: E501

        :return: The stds of this JobsEstimationResult.  # noqa: E501
        :rtype: float
        """
        return self._stds

    @stds.setter
    def stds(self, stds):
        """Sets the stds of this JobsEstimationResult.

        (Only for estimation jobs) The standard deviation value  # noqa: E501

        :param stds: The stds of this JobsEstimationResult.  # noqa: E501
        :type: float
        """

        self._stds = stds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobsEstimationResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsEstimationResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
