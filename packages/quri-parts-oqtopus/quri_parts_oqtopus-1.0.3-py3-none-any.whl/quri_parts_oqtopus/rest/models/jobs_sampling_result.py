# coding: utf-8

"""
    OQTOPUS Cloud User API

    OQTOPUS Cloud User API. This API is used to interact with the OQTOPUS Cloud service. The API provides endpoints to manage devices, jobs, and results.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: oqtopus-team[at]googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobsSamplingResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'counts': 'dict(str, object)',
        'divided_counts': 'dict(str, object)'
    }

    attribute_map = {
        'counts': 'counts',
        'divided_counts': 'divided_counts'
    }

    def __init__(self, counts=None, divided_counts=None):  # noqa: E501
        """JobsSamplingResult - a model defined in Swagger"""  # noqa: E501
        self._counts = None
        self._divided_counts = None
        self.discriminator = None
        if counts is not None:
            self.counts = counts
        if divided_counts is not None:
            self.divided_counts = divided_counts

    @property
    def counts(self):
        """Gets the counts of this JobsSamplingResult.  # noqa: E501


        :return: The counts of this JobsSamplingResult.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this JobsSamplingResult.


        :param counts: The counts of this JobsSamplingResult.  # noqa: E501
        :type: dict(str, object)
        """

        self._counts = counts

    @property
    def divided_counts(self):
        """Gets the divided_counts of this JobsSamplingResult.  # noqa: E501


        :return: The divided_counts of this JobsSamplingResult.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._divided_counts

    @divided_counts.setter
    def divided_counts(self, divided_counts):
        """Sets the divided_counts of this JobsSamplingResult.


        :param divided_counts: The divided_counts of this JobsSamplingResult.  # noqa: E501
        :type: dict(str, object)
        """

        self._divided_counts = divided_counts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobsSamplingResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsSamplingResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
