# coding: utf-8

"""
    OQTOPUS Cloud User API

    OQTOPUS Cloud User API. This API is used to interact with the OQTOPUS Cloud service. The API provides endpoints to manage devices, jobs, and results.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: oqtopus-team[at]googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobsJobInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'program': 'list[str]',
        'combined_program': 'str',
        'operator': 'list[JobsOperatorItem]',
        'result': 'JobsJobResult',
        'transpile_result': 'JobsTranspileResult',
        'message': 'str'
    }

    attribute_map = {
        'program': 'program',
        'combined_program': 'combined_program',
        'operator': 'operator',
        'result': 'result',
        'transpile_result': 'transpile_result',
        'message': 'message'
    }

    def __init__(self, program=None, combined_program=None, operator=None, result=None, transpile_result=None, message=None):  # noqa: E501
        """JobsJobInfo - a model defined in Swagger"""  # noqa: E501
        self._program = None
        self._combined_program = None
        self._operator = None
        self._result = None
        self._transpile_result = None
        self._message = None
        self.discriminator = None
        self.program = program
        if combined_program is not None:
            self.combined_program = combined_program
        if operator is not None:
            self.operator = operator
        if result is not None:
            self.result = result
        if transpile_result is not None:
            self.transpile_result = transpile_result
        if message is not None:
            self.message = message

    @property
    def program(self):
        """Gets the program of this JobsJobInfo.  # noqa: E501

        A list of OPENQASM3 program. For non-multiprogramming jobs, this field is assumed to contain exactly one program. Otherwise, those programs are combined according to the multiprogramming machinery.  # noqa: E501

        :return: The program of this JobsJobInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._program

    @program.setter
    def program(self, program):
        """Sets the program of this JobsJobInfo.

        A list of OPENQASM3 program. For non-multiprogramming jobs, this field is assumed to contain exactly one program. Otherwise, those programs are combined according to the multiprogramming machinery.  # noqa: E501

        :param program: The program of this JobsJobInfo.  # noqa: E501
        :type: list[str]
        """
        if program is None:
            raise ValueError("Invalid value for `program`, must not be `None`")  # noqa: E501

        self._program = program

    @property
    def combined_program(self):
        """Gets the combined_program of this JobsJobInfo.  # noqa: E501

        For multiprogramming jobs, this field contains the combined circuit.  # noqa: E501

        :return: The combined_program of this JobsJobInfo.  # noqa: E501
        :rtype: str
        """
        return self._combined_program

    @combined_program.setter
    def combined_program(self, combined_program):
        """Sets the combined_program of this JobsJobInfo.

        For multiprogramming jobs, this field contains the combined circuit.  # noqa: E501

        :param combined_program: The combined_program of this JobsJobInfo.  # noqa: E501
        :type: str
        """

        self._combined_program = combined_program

    @property
    def operator(self):
        """Gets the operator of this JobsJobInfo.  # noqa: E501

        *(Only for estimation jobs)* The operator (or observable) for which the expectation value is to be estimated.   # noqa: E501

        :return: The operator of this JobsJobInfo.  # noqa: E501
        :rtype: list[JobsOperatorItem]
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this JobsJobInfo.

        *(Only for estimation jobs)* The operator (or observable) for which the expectation value is to be estimated.   # noqa: E501

        :param operator: The operator of this JobsJobInfo.  # noqa: E501
        :type: list[JobsOperatorItem]
        """

        self._operator = operator

    @property
    def result(self):
        """Gets the result of this JobsJobInfo.  # noqa: E501


        :return: The result of this JobsJobInfo.  # noqa: E501
        :rtype: JobsJobResult
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this JobsJobInfo.


        :param result: The result of this JobsJobInfo.  # noqa: E501
        :type: JobsJobResult
        """

        self._result = result

    @property
    def transpile_result(self):
        """Gets the transpile_result of this JobsJobInfo.  # noqa: E501


        :return: The transpile_result of this JobsJobInfo.  # noqa: E501
        :rtype: JobsTranspileResult
        """
        return self._transpile_result

    @transpile_result.setter
    def transpile_result(self, transpile_result):
        """Sets the transpile_result of this JobsJobInfo.


        :param transpile_result: The transpile_result of this JobsJobInfo.  # noqa: E501
        :type: JobsTranspileResult
        """

        self._transpile_result = transpile_result

    @property
    def message(self):
        """Gets the message of this JobsJobInfo.  # noqa: E501

        Describing the reason why there is no result  # noqa: E501

        :return: The message of this JobsJobInfo.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this JobsJobInfo.

        Describing the reason why there is no result  # noqa: E501

        :param message: The message of this JobsJobInfo.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobsJobInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsJobInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
