# coding: utf-8

"""
    OQTOPUS Cloud User API

    OQTOPUS Cloud User API. This API is used to interact with the OQTOPUS Cloud service. The API provides endpoints to manage devices, jobs, and results.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: oqtopus-team[at]googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DevicesDeviceInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_id': 'str',
        'device_type': 'str',
        'status': 'str',
        'available_at': 'datetime',
        'n_pending_jobs': 'int',
        'n_qubits': 'int',
        'basis_gates': 'list[str]',
        'supported_instructions': 'list[str]',
        'device_info': 'str',
        'calibrated_at': 'datetime',
        'description': 'str'
    }

    attribute_map = {
        'device_id': 'device_id',
        'device_type': 'device_type',
        'status': 'status',
        'available_at': 'available_at',
        'n_pending_jobs': 'n_pending_jobs',
        'n_qubits': 'n_qubits',
        'basis_gates': 'basis_gates',
        'supported_instructions': 'supported_instructions',
        'device_info': 'device_info',
        'calibrated_at': 'calibrated_at',
        'description': 'description'
    }

    def __init__(self, device_id=None, device_type=None, status=None, available_at=None, n_pending_jobs=None, n_qubits=None, basis_gates=None, supported_instructions=None, device_info=None, calibrated_at=None, description=None):  # noqa: E501
        """DevicesDeviceInfo - a model defined in Swagger"""  # noqa: E501
        self._device_id = None
        self._device_type = None
        self._status = None
        self._available_at = None
        self._n_pending_jobs = None
        self._n_qubits = None
        self._basis_gates = None
        self._supported_instructions = None
        self._device_info = None
        self._calibrated_at = None
        self._description = None
        self.discriminator = None
        self.device_id = device_id
        self.device_type = device_type
        self.status = status
        if available_at is not None:
            self.available_at = available_at
        self.n_pending_jobs = n_pending_jobs
        if n_qubits is not None:
            self.n_qubits = n_qubits
        self.basis_gates = basis_gates
        self.supported_instructions = supported_instructions
        if device_info is not None:
            self.device_info = device_info
        if calibrated_at is not None:
            self.calibrated_at = calibrated_at
        self.description = description

    @property
    def device_id(self):
        """Gets the device_id of this DevicesDeviceInfo.  # noqa: E501


        :return: The device_id of this DevicesDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id):
        """Sets the device_id of this DevicesDeviceInfo.


        :param device_id: The device_id of this DevicesDeviceInfo.  # noqa: E501
        :type: str
        """
        if device_id is None:
            raise ValueError("Invalid value for `device_id`, must not be `None`")  # noqa: E501

        self._device_id = device_id

    @property
    def device_type(self):
        """Gets the device_type of this DevicesDeviceInfo.  # noqa: E501


        :return: The device_type of this DevicesDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this DevicesDeviceInfo.


        :param device_type: The device_type of this DevicesDeviceInfo.  # noqa: E501
        :type: str
        """
        if device_type is None:
            raise ValueError("Invalid value for `device_type`, must not be `None`")  # noqa: E501
        allowed_values = ["QPU", "simulator"]  # noqa: E501
        if device_type not in allowed_values:
            raise ValueError(
                "Invalid value for `device_type` ({0}), must be one of {1}"  # noqa: E501
                .format(device_type, allowed_values)
            )

        self._device_type = device_type

    @property
    def status(self):
        """Gets the status of this DevicesDeviceInfo.  # noqa: E501


        :return: The status of this DevicesDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DevicesDeviceInfo.


        :param status: The status of this DevicesDeviceInfo.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["available", "unavailable"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def available_at(self):
        """Gets the available_at of this DevicesDeviceInfo.  # noqa: E501

        Parameter mandatory and valid for 'unavailable' devices  # noqa: E501

        :return: The available_at of this DevicesDeviceInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._available_at

    @available_at.setter
    def available_at(self, available_at):
        """Sets the available_at of this DevicesDeviceInfo.

        Parameter mandatory and valid for 'unavailable' devices  # noqa: E501

        :param available_at: The available_at of this DevicesDeviceInfo.  # noqa: E501
        :type: datetime
        """

        self._available_at = available_at

    @property
    def n_pending_jobs(self):
        """Gets the n_pending_jobs of this DevicesDeviceInfo.  # noqa: E501


        :return: The n_pending_jobs of this DevicesDeviceInfo.  # noqa: E501
        :rtype: int
        """
        return self._n_pending_jobs

    @n_pending_jobs.setter
    def n_pending_jobs(self, n_pending_jobs):
        """Sets the n_pending_jobs of this DevicesDeviceInfo.


        :param n_pending_jobs: The n_pending_jobs of this DevicesDeviceInfo.  # noqa: E501
        :type: int
        """
        if n_pending_jobs is None:
            raise ValueError("Invalid value for `n_pending_jobs`, must not be `None`")  # noqa: E501

        self._n_pending_jobs = n_pending_jobs

    @property
    def n_qubits(self):
        """Gets the n_qubits of this DevicesDeviceInfo.  # noqa: E501


        :return: The n_qubits of this DevicesDeviceInfo.  # noqa: E501
        :rtype: int
        """
        return self._n_qubits

    @n_qubits.setter
    def n_qubits(self, n_qubits):
        """Sets the n_qubits of this DevicesDeviceInfo.


        :param n_qubits: The n_qubits of this DevicesDeviceInfo.  # noqa: E501
        :type: int
        """

        self._n_qubits = n_qubits

    @property
    def basis_gates(self):
        """Gets the basis_gates of this DevicesDeviceInfo.  # noqa: E501


        :return: The basis_gates of this DevicesDeviceInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._basis_gates

    @basis_gates.setter
    def basis_gates(self, basis_gates):
        """Sets the basis_gates of this DevicesDeviceInfo.


        :param basis_gates: The basis_gates of this DevicesDeviceInfo.  # noqa: E501
        :type: list[str]
        """
        if basis_gates is None:
            raise ValueError("Invalid value for `basis_gates`, must not be `None`")  # noqa: E501

        self._basis_gates = basis_gates

    @property
    def supported_instructions(self):
        """Gets the supported_instructions of this DevicesDeviceInfo.  # noqa: E501


        :return: The supported_instructions of this DevicesDeviceInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_instructions

    @supported_instructions.setter
    def supported_instructions(self, supported_instructions):
        """Sets the supported_instructions of this DevicesDeviceInfo.


        :param supported_instructions: The supported_instructions of this DevicesDeviceInfo.  # noqa: E501
        :type: list[str]
        """
        if supported_instructions is None:
            raise ValueError("Invalid value for `supported_instructions`, must not be `None`")  # noqa: E501

        self._supported_instructions = supported_instructions

    @property
    def device_info(self):
        """Gets the device_info of this DevicesDeviceInfo.  # noqa: E501

        json format calibration_data and n_nodes etc  # noqa: E501

        :return: The device_info of this DevicesDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._device_info

    @device_info.setter
    def device_info(self, device_info):
        """Sets the device_info of this DevicesDeviceInfo.

        json format calibration_data and n_nodes etc  # noqa: E501

        :param device_info: The device_info of this DevicesDeviceInfo.  # noqa: E501
        :type: str
        """

        self._device_info = device_info

    @property
    def calibrated_at(self):
        """Gets the calibrated_at of this DevicesDeviceInfo.  # noqa: E501

        Parameter available only for `QPU` devices with available calibration data  # noqa: E501

        :return: The calibrated_at of this DevicesDeviceInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._calibrated_at

    @calibrated_at.setter
    def calibrated_at(self, calibrated_at):
        """Sets the calibrated_at of this DevicesDeviceInfo.

        Parameter available only for `QPU` devices with available calibration data  # noqa: E501

        :param calibrated_at: The calibrated_at of this DevicesDeviceInfo.  # noqa: E501
        :type: datetime
        """

        self._calibrated_at = calibrated_at

    @property
    def description(self):
        """Gets the description of this DevicesDeviceInfo.  # noqa: E501


        :return: The description of this DevicesDeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DevicesDeviceInfo.


        :param description: The description of this DevicesDeviceInfo.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DevicesDeviceInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DevicesDeviceInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
