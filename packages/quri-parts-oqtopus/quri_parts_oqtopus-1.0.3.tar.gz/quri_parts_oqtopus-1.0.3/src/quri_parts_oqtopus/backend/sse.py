"""A module to run sse job on OQTOPUS Cloud."""

import base64
from pathlib import Path, PurePath

from quri_parts.backend import BackendError

from quri_parts_oqtopus.backend.config import OqtopusConfig
from quri_parts_oqtopus.rest import ApiClient, Configuration, JobApi

from .sampling import OqtopusSamplingBackend, OqtopusSamplingJob


class OqtopusSseBackend:
    """A job for a SSE.

    Args:
        config: A :class:`OqtopusConfig` for job execution.

    """

    def __init__(self, config: OqtopusConfig | None = None) -> None:
        # if config is None, load them from file
        if config is None:
            self.config = OqtopusConfig.from_file()
        else:
            self.config = config

        # construct JobApi
        rest_config = Configuration()
        rest_config.host = self.config.url
        if self.config.proxy:
            rest_config.proxy = self.config.proxy
        api_client = ApiClient(
            configuration=rest_config,
            header_name="q-api-token",
            header_value=self.config.api_token,
        )
        self._job_api: JobApi = JobApi(api_client=api_client)
        self.job: OqtopusSamplingJob | None = None

    def run_sse(
        self,
        file_path: str,
        device_id: str,
        name: str,
        description: str | None = None,
    ) -> OqtopusSamplingJob:
        """Perform a SSE job.

        Args:
            file_path (str): The path to program file to upload.
            device_id (str): The identifier of the device where the job is executed.
            name (str): The name of the job.
            description (str | None, optional): The description of the job.
                Defaults to None.

        Raises:
            ValueError: If ``file_path`` is not set.
            ValueError: If ``file_path`` does not exist.
            ValueError: If ``file_path`` is not a python file.
            ValueError: If file size is larger than max file size
            BackendError: If an error is returned from OQTOPUS Cloud.

        Returns:
            OqtopusSamplingJob: The job to be executed.

        """
        # if file_path is not set, raise ValueError
        if file_path is None:
            msg = "file_path is not set."
            raise ValueError(msg)

        # if the file does not exist, raise ValueError
        if not Path(file_path).exists():
            msg = f"The file does not exist: {file_path}"
            raise ValueError(msg)

        # get the base name and the extension of the file
        ext = PurePath(file_path).suffix

        # if the extension is not .py, raise ValueError
        if ext != ".py":
            msg = f"The file is not python file: {file_path}"
            raise ValueError(msg)

        with Path(file_path).open(mode="rb") as f:
            encoded = base64.b64encode(f.read())

        max_file_size = 10 * 1024 * 1024  # 10MB

        # if the file size is larger than max_file_size, raise ValueError
        if len(encoded) >= max_file_size:
            msg = f"size of the base64 encoded file is larger than {max_file_size}"
            raise ValueError(msg)

        try:
            backend = OqtopusSamplingBackend(self.config)
            self.job = backend.sample_qasm(
                program=[encoded.decode("utf-8")],
                shots=1,
                name=name,
                device_id=device_id,
                description=description,
                job_type="sse",
            )
        except Exception as e:
            msg = "To perform sse on OQTOPUS Cloud is failed."
            raise BackendError(msg) from e

        return self.job

    def download_log(
        self,
        job_id: str | None = None,
        save_dir: str | None = None,
    ) -> str:
        """Download logs generated by an SSE job on a OQTOPUS Cloud.

        Args:
            job_id (str | None, optional): job id. Defaults to None.
            save_dir (str | None, optional): Local directory path for downloads.
                Defaults to None.

        Raises:
            BackendError: If an error is returned from OQTOPUS Cloud.
            ValueError: If ``save_dir`` does not exist.
            ValueError: If ``save_dir`` is not a directory.
            ValueError: If the file already exists.

        Returns:
            str: The file path of the saved SSE log.

        """
        # if job_id is not set, raise ValueError
        if job_id is None:
            if self.job is not None:
                job_id = self.job.job_id
            else:
                msg = "job_id is not set."
                raise ValueError(msg)

        try:
            response = self._job_api.get_sselog(job_id=job_id)
        except Exception as e:
            msg = "To perform sse on OQTOPUS Cloud is failed."
            raise BackendError(msg) from e

        if response is None or not response.file or not response.file_name:
            msg = (
                "To perform sse on OQTOPUS Cloud is failed."
                " The response does not contain valid file data."
            )
            raise BackendError(msg)

        data = response.file
        file_name = response.file_name

        if save_dir is None:
            path_save_dir = Path.cwd()
        elif not Path(save_dir).exists():
            msg = f"The destination path does not exist: {save_dir}"
            raise ValueError(msg)
        elif not Path(save_dir).is_dir():
            msg = f"The destination path is not a directory: {save_dir}"
            raise ValueError(msg)
        else:
            path_save_dir = Path(save_dir)

        file_path = path_save_dir / file_name
        # if the file already exists, raise ValueError
        if Path(file_path).exists():
            msg = f"The file already exists: {file_path}"
            raise ValueError(msg)

        # decode the base64 encoded data and write it to the file
        decoded_zip = base64.b64decode(data)
        with Path(file_path).open(mode="bw") as t_file:
            t_file.write(decoded_zip)

        return str(file_path)
