# coding: utf-8

"""
    OQTOPUS Cloud User API

    OQTOPUS Cloud User API. This API is used to interact with the OQTOPUS Cloud service. The API provides endpoints to manage devices, jobs, and results.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: oqtopus-team[at]googlegroups.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApiTokenApiToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_token_secret': 'str',
        'api_token_expiration': 'datetime'
    }

    attribute_map = {
        'api_token_secret': 'api_token_secret',
        'api_token_expiration': 'api_token_expiration'
    }

    def __init__(self, api_token_secret=None, api_token_expiration=None):  # noqa: E501
        """ApiTokenApiToken - a model defined in Swagger"""  # noqa: E501
        self._api_token_secret = None
        self._api_token_expiration = None
        self.discriminator = None
        if api_token_secret is not None:
            self.api_token_secret = api_token_secret
        if api_token_expiration is not None:
            self.api_token_expiration = api_token_expiration

    @property
    def api_token_secret(self):
        """Gets the api_token_secret of this ApiTokenApiToken.  # noqa: E501

        The api token secret  # noqa: E501

        :return: The api_token_secret of this ApiTokenApiToken.  # noqa: E501
        :rtype: str
        """
        return self._api_token_secret

    @api_token_secret.setter
    def api_token_secret(self, api_token_secret):
        """Sets the api_token_secret of this ApiTokenApiToken.

        The api token secret  # noqa: E501

        :param api_token_secret: The api_token_secret of this ApiTokenApiToken.  # noqa: E501
        :type: str
        """

        self._api_token_secret = api_token_secret

    @property
    def api_token_expiration(self):
        """Gets the api_token_expiration of this ApiTokenApiToken.  # noqa: E501

        The expiration date of the api token  # noqa: E501

        :return: The api_token_expiration of this ApiTokenApiToken.  # noqa: E501
        :rtype: datetime
        """
        return self._api_token_expiration

    @api_token_expiration.setter
    def api_token_expiration(self, api_token_expiration):
        """Sets the api_token_expiration of this ApiTokenApiToken.

        The expiration date of the api token  # noqa: E501

        :param api_token_expiration: The api_token_expiration of this ApiTokenApiToken.  # noqa: E501
        :type: datetime
        """

        self._api_token_expiration = api_token_expiration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiTokenApiToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiTokenApiToken):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
