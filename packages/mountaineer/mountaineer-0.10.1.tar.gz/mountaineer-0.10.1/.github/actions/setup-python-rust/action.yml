name: 'Setup Python and Rust with Caching'
description: 'Sets up Python and Rust environments with comprehensive caching'

inputs:
  python-version:
    description: 'Python version to use'
    required: true
  cache-prefix:
    description: 'Prefix for cache keys'
    required: true
  os:
    description: 'Operating system'
    required: false
    default: 'linux'
  target:
    description: 'Target architecture'
    required: false
    default: 'x86_64'
  python-architecture:
    description: 'Python architecture'
    required: false
    default: 'x64'

runs:
  using: "composite"
  steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}
        architecture: ${{ inputs.python-architecture }}

    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies and build artifacts
      uses: Swatinem/rust-cache@v2
      with:
        key: v1-${{ inputs.cache-prefix }}-${{ inputs.os }}-${{ inputs.target }}-${{ inputs.python-version }}
        cache-directories: |
          ~/.cargo/registry/index
          ~/.cargo/registry/cache
          ~/.cargo/git
          target/
        shared-key: "rust-${{ inputs.cache-prefix }}-cache"
        save-if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Cache Python dependencies and artifacts
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.cache/uv
        key: py-${{ inputs.cache-prefix }}-${{ inputs.python-version }}-${{ inputs.os }}-${{ inputs.target }}-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt', '**/Cargo.lock') }}-v1
        restore-keys: |
          py-${{ inputs.cache-prefix }}-${{ inputs.python-version }}-${{ inputs.os }}-${{ inputs.target }}- 