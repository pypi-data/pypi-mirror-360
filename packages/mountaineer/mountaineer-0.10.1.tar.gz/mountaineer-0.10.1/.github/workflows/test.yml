# Based on - https://github.com/samuelcolvin/rtoml/blob/main/.github/workflows/ci.yml
# The MIT License (MIT)
#
# Copyright (c) 2020 Samuel Colvin
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
name: CI

on:
  push:
    branches:
      - main
    tags:
      - "**"
  pull_request: {}
  pull_request_target:
    types: [labeled]

jobs:
  test:
    runs-on: ubuntu-latest
    name: test py${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    services:
      docker:
        image: docker:24.0.2
        options: --privileged

    env:
      PYTHON: ${{ matrix.python-version }}

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-python-rust
        with:
          python-version: ${{ matrix.python-version }}
          cache-prefix: 'test'

      - name: Install main dependencies
        run: |
          export PATH="/Users/runner/.local/bin:/Users/runner/.cargo/bin:$PATH"
          make install-deps-lib

      - name: Tests
        run: make test-lib

  lint:
    name: lint py${{ matrix.python-version }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-python-rust
        with:
          python-version: ${{ matrix.python-version }}
          cache-prefix: 'lint'

      - name: Install dependencies
        run: make install-deps

      - name: Run typehinting
        run: make lint-validation

      - name: Lint Clippy
        run: cargo clippy -- -D warnings

  # https://github.com/marketplace/actions/alls-green#why used for branch protection checks
  check:
    if: always()
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

  rust-tests:
    # Test the OS specific rust hooks
    name: rust-tests os=${{ matrix.os }} release=${{ matrix.release || 'latest' }}
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'Full Build')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
          - os: macos
          - os: windows

    runs-on: ${{ (matrix.os == 'linux' && 'ubuntu') || matrix.os }}-${{ matrix.release || 'latest' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10 (min supported version)
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # Before we start building, validate that the Rust code compiles
      # This helps to detect errors on different underlying architectures, since
      # these wheel builds are representative of our deployment platforms
      - name: Rust tests
        run: cargo test --all

      # Run basic benchmarks to make sure these still compile
      - name: Rust benchmarks
        run: cargo check --benches

  build:
    name: build os=${{ matrix.os }} target=${{ matrix.target }} int=${{ matrix.interpreter || 'all' }} ml=${{ matrix.manylinux || 'auto' }} release=${{ matrix.release || 'latest' }}
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'Full Build')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: linux
            target: x86_64
          - os: linux
            target: aarch64
          - os: macos
            target: x86_64
          - os: macos
            target: aarch64
          - os: windows
            target: x86_64

    runs-on: ${{ (matrix.os == 'linux' && 'ubuntu') || matrix.os }}-${{ matrix.release || 'latest' }}
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-python-rust
        with:
          python-version: "3.11"
          cache-prefix: 'build'
          os: ${{ matrix.os }}
          target: ${{ matrix.target }}
          python-architecture: ${{ matrix.python-architecture || 'x64' }}

      - name: Update version
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          cd .github
          uv venv
          uv sync
          if [ "${{ runner.os }}" = "Windows" ]; then
            source .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
          cd ..
          python .github/scripts/update_version.py ${{ github.ref_name }}

      - run: pip install -U twine

      #
      # Build pipeline
      #
      - name: build sdist
        if: ${{ matrix.os == 'linux' && matrix.target == 'x86_64' }}
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist

      - name: build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux || 'auto' }}
          args: -vv --release --out dist --interpreter ${{ matrix.interpreter || '3.10 3.11 3.12 3.13' }}
          rust-toolchain: stable
          docker-options: -e CI -e CI_TARGET=${{ matrix.target }}
          # Already defaults to build, but we make explicit here. Any arguments should
          # be added to args above and not here - otherwise we will affect the switch()
          # condition handling of maturin-action.
          command: build

      - run: ${{ (matrix.os == 'windows' && 'dir') || 'ls -lh' }} dist/

      - run: twine check --strict dist/*

      # Unzip wheel files to directories
      - name: Unzip Wheels
        shell: bash
        run: |
          mkdir unpacked_wheels
          for wheel in dist/*.whl; do
            unzip -d unpacked_wheels/"$(basename "$wheel" .whl)" "$wheel"
          done
          rm dist/*.whl # Remove original .whl files to avoid confusion

      - name: List unpacked wheel directories
        shell: bash
        run: ls -lh unpacked_wheels/

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files-${{ matrix.os }}-${{ matrix.target }}
          path: unpacked_wheels/

      - uses: actions/upload-artifact@v4
        with:
          name: pypi_files_sdist-${{ matrix.os }}-${{ matrix.target }}
          path: dist/

  inspect-pypi-assets:
    needs: [build]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: set up python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files-*
          merge-multiple: true
          path: unpacked_wheels

      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files_sdist-*
          merge-multiple: true
          path: dist

      - name: list unpacked files
        run: |
          ls -lh unpacked_wheels/
          echo "`ls unpacked_wheels | wc -l` files"

      - name: list dist files
        run: |
          ls -lh dist/
          echo "`ls dist | wc -l` files"

      - name: extract and list sdist file
        run: |
          mkdir sdist-files
          tar -xvf dist/*.tar.gz -C sdist-files
          find sdist-files -print

      # Unzip wheel files to directories
      - name: Zip Wheels
        run: |
          for dir in unpacked_wheels/*; do
              # Check if it's a directory
              if [ -d "$dir" ]; then
                  # Get the base name of the directory
                  base_name=$(basename "$dir")
                  # Zip the directory into a .whl file inside the dist directory
                  cd unpacked_wheels/$base_name
                  zip -r "../../dist/${base_name}.whl" .
                  cd ../..
              fi
          done

      - run: pip install twine
      - run: twine check dist/*

  release:
    needs: [check, build, inspect-pypi-assets]
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    # pypi release script requires linux runner
    runs-on: ubuntu-latest
    environment: release

    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: get unpacked_wheels artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files-*
          merge-multiple: true
          path: unpacked_wheels

      - name: get dist artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pypi_files_sdist-*
          merge-multiple: true
          path: dist

      - run: ls -lh unpacked_wheels

      - run: ls -lh dist

      # Unzip wheel files to directories
      - name: Zip Wheels
        run: |
          for dir in unpacked_wheels/*; do
              # Check if it's a directory
              if [ -d "$dir" ]; then
                  # Get the base name of the directory
                  base_name=$(basename "$dir")
                  # Zip the directory into a .whl file inside the dist directory
                  cd unpacked_wheels/$base_name
                  zip -r "../../dist/${base_name}.whl" .
                  cd ../..
              fi
          done

      - uses: actions/upload-artifact@v4
        with:
          name: final_dist
          path: dist/

      - uses: pypa/gh-action-pypi-publish@release/v1

  lib-integration-test:
    name: Integration Tests - py${{ matrix.python-version }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-python-rust
        with:
          python-version: ${{ matrix.python-version }}
          cache-prefix: 'integration'

      - name: Install dependencies
        run: make install-deps-lib

      - name: Run tests
        timeout-minutes: 10
        run: make test-lib-integrations

  cma-test:
    name: CMA Test - py${{ matrix.python-version }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]

    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-python-rust
        with:
          python-version: ${{ matrix.python-version }}
          cache-prefix: 'cma'

      - name: Install poetry
        run: curl -sSL https://install.python-poetry.org | python3 -
        
      - name: Install dependencies
        run: make install-deps-create-mountaineer-app

      - name: Run tests
        run: make test-create-mountaineer-app

      - name: Run integration tests
        if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'Full Build')
        run: make test-create-mountaineer-app-integrations test-args="-vv"

  cma-build:
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main' || contains(github.event.pull_request.labels.*.name, 'Full Build')
    strategy:
      fail-fast: false
      matrix:
        include:
          # linux
          - os: linux
            target: x86_64
          - os: linux
            target: aarch64

          # macos
          - os: macos
            target: x86_64
          - os: macos
            target: aarch64

    runs-on: ${{ (matrix.os == 'linux' && 'ubuntu') || matrix.os }}-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          architecture: ${{ matrix.python-architecture || 'x64' }}

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Update version in pyproject.toml
        if: startsWith(github.ref, 'refs/tags/v')
        shell: bash
        run: |
          cd .github
          uv venv
          uv sync
          if [ "${{ runner.os }}" = "Windows" ]; then
            source .venv/Scripts/activate
          else
            source .venv/bin/activate
          fi
          cd ..
          cd create_mountaineer_app
          python ../.github/scripts/update_version.py ${{ github.ref_name }}

      - name: Build
        run: |
          make install-deps-create-mountaineer-app
          cd create_mountaineer_app && uv build

      - uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}-${{ matrix.target }}
          path: create_mountaineer_app/dist

  cma-release:
    needs: [cma-test, cma-build, release]
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest
    environment: release

    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          merge-multiple: true
          path: dist

      - run: ls -lh dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
