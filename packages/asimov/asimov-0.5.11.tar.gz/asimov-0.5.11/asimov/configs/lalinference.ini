{%- if production.event.repository -%}
{%- assign repo_dir = production.event.repository.directory -%}
{%- else -%}
{%- assign repo_dir = "." -%}
{%- endif -%}
{%- assign meta = production.meta -%}
{%- assign sampler = production.meta['sampler'] -%}
{%- assign scheduler = production.meta['scheduler'] -%}
{%- assign likelihood = production.meta['likelihood'] -%}
{%- assign priors = production.meta['priors'] -%}
{%- assign data = production.meta['data'] -%}
{%- assign quality = production.meta['quality'] -%}
{%- assign ifos = production.meta['interferometers'] -%}
{%- if production.event.repository -%}
{%- assign repo_dir = production.event.repository.directory -%}
{%- else -%}
{%- assign repo_dir = "." -%}
{%- endif -%}

[analysis]
ifos={{ production.meta['interferometers'] }}
engine={{ production.meta['engine'] }}
nparallel={{ production.meta['nparallel'] }}
roq = False
coherence-test=False
upload-to-gracedb=False
singularity=False
osg=False


[paths]
webdir={{ config['general']['webroot'] }}/{{ production.event.name }}/{{ production.name }}


[input]
max-psd-length=10000
padding=16
minimum_realizations_number=8
events=all
analyse-all-time=False
timeslides=False
ignore-gracedb-psd=True
threshold-snr=3
gps-time-file =
ignore-state-vector = True

[condor]
lalsuite-install={{ config["pipelines"]["environment"] }}
datafind=%(lalsuite-install)s/bin/gw_data_find
mergeNSscript=%(lalsuite-install)s/bin/lalinference_nest2pos
mergeMCMCscript=%(lalsuite-install)s/bin/cbcBayesMCMC2pos
combinePTMCMCh5script=%(lalsuite-install)s/bin/cbcBayesCombinePTMCMCh5s
resultspage=%(lalsuite-install)s/bin/cbcBayesPostProc
segfind=%(lalsuite-install)s/bin/ligolw_segment_query
ligolw_print=%(lalsuite-install)s/bin/ligolw_print
coherencetest=%(lalsuite-install)s/bin/lalinference_coherence_test
lalinferencenest=%(lalsuite-install)s/bin/lalinference_nest
lalinferencemcmc=%(lalsuite-install)s/bin/lalinference_mcmc
lalinferencebambi=%(lalsuite-install)s/bin/lalinference_bambi
lalinferencedatadump=%(lalsuite-install)s/bin/lalinference_datadump
ligo-skymap-from-samples=%(lalsuite-install)s/bin/ligo-skymap-from-samples
ligo-skymap-plot=%(lalsuite-install)s/bin/ligo-skymap-plot
processareas=%(lalsuite-install)s/bin/process_areas
computeroqweights=%(lalsuite-install)s/bin/lalinference_compute_roq_weights
mpiwrapper=%(lalsuite-install)s/bin/lalinference_mpi_wrapper
gracedb=%(lalsuite-install)s/bin/gracedb
ppanalysis=%(lalsuite-install)s/bin/cbcBayesPPAnalysis
pos_to_sim_inspiral=%(lalsuite-install)s/bin/cbcBayesPosToSimInspiral

mpirun = %(lalsuite-install)s/bin/mpirun

accounting_group={{ scheduler['accounting group'] }}
accounting_group_user={{ config['condor']['user'] }}

[datafind]
url-type=file
types = {'H1': '{{ production.meta['data']['frame types']['H1'] }}', 'L1': '{{ production.meta['data']['frame types']['L1'] }}', 'V1': '{{ production.meta['data']['frame types']['V1'] }}'}

[data]
channels = {'H1': '{{ production.meta['data']['channels']['H1'] }}', 'L1': '{{ production.meta['data']['channels']['L1'] }}', 'V1': '{{ production.meta['data']['channels']['V1'] }}'}

[lalinference]
flow = { {% if production.meta['interferometers'] contains "H1" %}'H1': {{ production.quality['minimum frequency']['H1'] }},{% endif %} {% if production.meta['interferometers'] contains "L1" %}'L1': {{ production.quality['minimum frequency']['L1']}},{% endif %} {% if production.meta['interferometers'] contains "V1" %} 'V1': {{ production.quality['minimum frequency']['V1']}} {% endif %} }
fhigh = { {% if production.meta['interferometers'] contains "H1" %}'H1': {{ production.meta['quality']['high frequency'] }},{% endif %} {% if production.meta['interferometers'] contains "L1" %}'L1': {{ production.meta['quality']['high frequency'] }},{% endif %} {% if production.meta['interferometers'] contains "V1" %} 'V1': {{ production.meta['quality']['high frequency'] }} {% endif %} }

[engine]

fref={{ production.meta['waveform']['reference frequency'] }}

approx = {{ production.meta['waveform']['approximant'] }}
amporder = {{ production.meta['priors']['amp order'] }}

seglen = {{ production.meta['data']['segment length'] }}
srate =  {{ production.quality['sample rate'] }}

neff=1000
nlive=2048
maxmcmc = 5000
tolerance=0.1
ntemps=8
resume=
adapt-temps=
progress=

enable-spline-calibration =
spcal-nodes = 10
{% if production.meta['interferometers'] contains "H1" %}H1-spcal-envelope = {{ repo_dir}}/{{ production.meta['data']['calibration']['H1'] }}{% endif %}
{% if production.meta['interferometers'] contains "L1" %}L1-spcal-envelope = {{ repo_dir }}/{{ production.meta['data']['calibration']['L1'] }}{% endif %}
{% if production.meta['interferometers'] contains "V1" %}V1-spcal-envelope = {{ repo_dir }}/{{ production.meta['data']['calibration']['V1'] }}{% endif %}

{% if production.meta['interferometers'] contains "H1" %}H1-psd = {{ production.psds['H1'] }}{% endif %}
{% if production.meta['interferometers'] contains "L1" %}L1-psd = {{ production.psds['L1'] }}{% endif %}
{% if production.meta['interferometers'] contains "V1" %}V1-psd = {{ production.psds['V1'] }}{% endif %}

a_spin1-max = 0.99
a_spin2-max = 0.99

{% if production.meta['priors'] contains "chirp-mass" %}
chirpmass-min = {{ production.meta['priors']['chirp-mass'][0] }}
chirpmass-max = {{ production.meta['priors']['chirp-mass'][1] }}
{% endif %}

q-min = {{ production.meta['priors']['mass ratio'][0] }}
comp-min = {{ production.meta['priors']['mass 1'][0] }}
comp-max = {{ production.meta['priors']['mass 1'][1] }}

distance-max = {{ production.meta['priors']['luminosity distance'][1] }}
{% if  production.meta['priors'] contains "volume" %}
   {% if production.meta['priors']['volume'] == "comoving" %}
distance-prior-comoving-volume = 
   {% endif %}
{% endif %}                                                                                                              

[mpi]
mpi_task_count=8
machine-count=8
machine-memory=4000

[skyarea]
maxpts=2000

[resultspage]
skyres=0.5
deltaLogP = 7.5

{%- if quality contains "statevector" %}
[statevector]
state-vector-channel={ {% for ifo in ifos %}{{ifo}}:{{quality['state vector'][ifo]}},{% endfor %} }
bits=['Bit 0', 'Bit 1', 'Bit 2']
{%- endif %}

[ligo-skymap-from-samples]
enable-multiresolution=

[ligo-skymap-plot]
annotate=
contour= 50 90
