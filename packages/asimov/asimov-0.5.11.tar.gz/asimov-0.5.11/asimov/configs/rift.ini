{%- if production.event.repository %}
{%- assign repo_dir = production.event.repository.directory %}
{%- else %}
{%- assign repo_dir = "." %}
{%- endif %}
{%- assign meta = production.meta %}
{%- assign sampler = production.meta['sampler'] %}
{%- assign scheduler = production.meta['scheduler'] %}
{%- assign likelihood = production.meta['likelihood'] %}
{%- assign waveform = production.meta['waveform'] %}
{%- assign data = production.meta['data'] %}
{%- assign quality = production.meta['quality'] %}
{%- assign ifos = production.meta['interferometers'] %}
[analysis]
ifos={{ production.meta['interferometers'] }}
engine={{ production.meta['engine'] }}
nparallel=4
upload-to-gracedb=False
singularity={{ scheduler['osg'] | default: False }}
osg={{ scheduler['osg'] | default: False }}


[paths]
webdir={{ config['general']['webroot'] }}/{{ production.event.name }}/{{ production.name }}


[input]
max-psd-length=10000
padding=16
minimum_realizations_number=8
events=all
analyse-all-time=False
timeslides=False
ignore-gracedb-psd=True
threshold-snr=3
gps-time-file =
ignore-state-vector = True

[condor]
lalsuite-install={{ config["pipelines"]["environment"] }}
ligolw_print=%(lalsuite-install)s/bin/ligolw_print
coherencetest=%(lalsuite-install)s/bin/lalinference_coherence_test
ligo-skymap-from-samples=%(lalsuite-install)s/bin/ligo-skymap-from-samples
ligo-skymap-plot=%(lalsuite-install)s/bin/ligo-skymap-plot
processareas=%(lalsuite-install)s/bin/process_areas
computeroqweights=%(lalsuite-install)s/bin/lalinference_compute_roq_weights
mpiwrapper=%(lalsuite-install)s/bin/lalinference_mpi_wrapper
gracedb=%(lalsuite-install)s/bin/gracedb
ppanalysis=%(lalsuite-install)s/bin/cbcBayesPPAnalysis
pos_to_sim_inspiral=%(lalsuite-install)s/bin/cbcBayesPosToSimInspiral

mpirun = %(lalsuite-install)s/bin/mpirun

accounting_group={{ scheduler['accounting group'] }}
accounting_group_user={{ config['condor']['user'] }}

[datafind]
url-type=file
types = { {% for ifo in ifos %}"{{ifo}}":"{{data['frame types'][ifo]}}",{% endfor %} }

[data]
channels = { {% for ifo in ifos %}"{{ifo}}":"{{data['channels'][ifo]}}",{% endfor %} }

[lalinference]
flow = { {% for ifo in ifos %}"{{ifo}}":{{quality['minimum frequency'][ifo]}},{% endfor %} }
fhigh = { {% for ifo in ifos %}"{{ifo}}":{{quality['maximum frequency'][ifo]}},{% endfor %} }

[engine]

fref={{ waveform['reference frequency'] }}

fmin-template={{ likelihood['start frequency'] }}

approx = {{ waveform['approximant'] }}
amporder = {{ production.meta['waveform']['pn amplitude order'] }}

seglen = {{ data['segment length'] }}
srate =  {{ likelihood['sample rate'] }}

{%- if data contains "calibration" %}
{%- if data['calibration'] contains ifos[0] %}
enable-spline-calibration =
spcal-nodes = 10
{% for ifo in ifos %}
{{ifo}}-spcal-envelope="{{data['calibration'][ifo]}}"
{%- endfor %}
{%- endif %}
{%- endif %}

{%- for ifo in ifos %}
{{ifo}}-psd="{{ production.xml_psds[ifo] }}"
{%- endfor %}

#
# Priors
#

# Spin
a_spin1-max = 0.99
a_spin2-max = 0.99

{%- if production.meta['priors'] contains "chirp mass" %}
# Chirp mass
chirpmass-min = {{ production.meta['priors']['chirp mass']['minimum'] }}
chirpmass-max = {{ production.meta['priors']['chirp mass']['maximum'] }}
{%- endif %}
# Mass ratio
q-min = {{ production.meta['priors']['mass ratio']['minimum'] }}

# Component masses
comp-min = {{ production.meta['priors']['mass 1']['minimum'] }}
comp-max = {{ production.meta['priors']['mass 1']['maximum'] }}

# Luminosity distance
distance-max = {{ production.meta['priors']['luminosity distance']['maximum'] }}
{%- if  production.meta['priors'] contains "volume" %}
{%- if production.meta['priors']['volume'] == "comoving" %}
distance-prior-comoving-volume = 
{%- endif %}
{%- endif %}                                                                                                              


[skyarea]
maxpts=2000

[resultspage]
skyres=0.5
deltaLogP = 7.5

[ligo-skymap-from-samples]
enable-multiresolution=

[ligo-skymap-plot]
annotate=
contour= 50 90

[rift-pseudo-pipe]
#
# CIP Settings
#
cip-fit-method='{{ sampler['cip']['fitting method'] | default: "rf" }}'
cip-sampler-method='{{ sampler['cip']['sampling method'] | default: "default" }}'
cip-explode-jobs= {{ sampler['cip']['explode jobs' ] | default: 3 }}
cip-explode-jobs-auto={{ sampler['cip']['explode jobs auto' ] | default: True }}
#
# Internal settings
#
{% if sampler contains "force iterations" %}
internal-force-iterations={{ sampler['force iterations'] }}
{% endif %}
internal-use-aligned-phase-coordinates={{ sampler['use aligned phase coordinates' ] | default: True }}  
internal-correlate-parameters-default={{ sampler['correlate parameters default' ] | default: True }}  
internal-use-rescaled-transverse-spin-coordinates={{ sampler['use rescaled transverse spin coordinates' ] | default: True }}  

{%- if likelihood contains "assume" %}
#
# Assume settings
#
assume-nospin={% if likelihood['assume'] contains "no spin" %}True{% else %}False{% endif %}
assume-precessing={% if likelihood['assume'] contains "precessing" %}True{% else %}False{% endif %}
assume-nonprecessing={% if likelihood['assume'] contains "nonprecessing" %}True{% else %}False{% endif %}
assume-matter={% if likelihood['assume'] contains "matter" %}True{% else %}False{% endif %}
assume-matter-but-primary-bh={% if likelihood['assume'] contains "matter secondary" %}True{% else %}False{% endif %}
assume-eccentric={% if likelihood['assume'] contains "eccentric" %}True{% else %}False{% endif %}
assume-lowlatency-tradeoffs={% if likelihood['assume'] contains "lowlatency tradeoffs" %}True{% else %}False{% endif %}
assume-highq={% if likelihood['assume'] contains "high q" %}True{% else %}False{% endif %}
assume-well-placed={% if likelihood['assume'] contains "well-placed" %}True{% else %}False{% endif %}
{%- endif -%}
#
# Marginalisations
#
internal-marginalize-distance={{ likelihood['marginalization']['distance'] | default: "False" }}
{%- if likelihood['marginalization'] contains "distance lookup" %}
internal-marginalize-distance-file={{ likelihood['marginalization']['distance lookup'] | default: lookup_default }}
{% endif %}
internal-distance-max={{ likelihood['marginalization']['maximum distance'] | default: 10000 }}
#
# ILE Settings
#
ile-n-eff= {{ sampler['ile']['n eff'] | default: 100 }}
ile-sampler-method='{{ sampler['ile sampling method'] | default: "adaptive_cartesian_gpu" }}'
internal-ile-freezeadapt=True

{%- if sampler contains "manual grid" %}
#
# Manual grid settings
#
manual-initial-grid='{{ sampler["manual grid"] }}'
{%- endif -%}
#
# Waveform arguments
# 
l-max={{ waveform['maximum mode'] | default: 2 }}

#
# Priors
#
# * distance prior if this argument is *not* set is dL^2
ile-distance-prior="pseudo_cosmo"

# maximum runtime for ILE jobs. May need to be longer
ile-runtime-max-minutes= {{ sampler['ile']['runtime max minues'] | default: 700 }}
# Number of likelihood evaluations for each instance. Make this larger if your likelihoods are very fast, smaller if you need low latency
ile-jobs-per-worker= {{ sampler['ile']['jobs per worker'] | default: 20 }}

#
# OSG settings
#
use_osg={{ config['general']['osg'] | default: False }}
use_osg_file_transfer= {{ config['general']['osg'] | default: False }}
use_osg_cip={{ config['general']['osg'] | default: False }}


internal-propose-converge-last-stage=True
add-extrinsic=True
batch-extrinsic=True
# * final stage provides time (and distance, if marginalized)
add-extrinsic-time-resampling=True

# Other options needed for this specific analysis
#  force-eta-range : the usual doesn't awlays work; this uses 20:1 prior range, should be set consistently to above
# force-eta-range="[0.0453514739,0.24999999999]"
