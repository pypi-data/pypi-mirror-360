;
; Bayeswave configuration file created by asimov
; for {{ production.event.name}}.
;

{%- if production.event.repository %}
{%- assign repo_dir = production.event.repository.directory %}
{%- else %}
{%- assign repo_dir = "." %}
{%- endif %}
{%- assign meta = production.meta %}
{%- assign sampler = production.meta['sampler'] %}
{%- assign scheduler = production.meta['scheduler'] %}
{%- assign likelihood = production.meta['likelihood'] %}
{%- assign data = production.meta['data'] %}
{%- assign quality = production.meta['quality'] %}
{%- assign ifos = production.meta['interferometers'] %}
[input]
dataseed=1234
seglen={{ data['segment length'] }}
window={{ likelihood['window length'] }}
flow={{ quality['lowest minimum frequency'] }}
srate={{ likelihood['sample rate'] }}
PSDlength={{ likelihood['psd length'] }}
rolloff={{ likelihood['roll off time'] | default: 0.4 }}
ifo-list={{ ifos }}
segment-start={{ likelihood['segment start'] }}

[engine]
install_path={{ scheduler['environment'] | default: config["pipelines"]["environment"] }}
megaplot=%(install_path)s/bin/megaplot.py
bayeswave=%(install_path)s/bin/BayesWave
bayeswave_post=%(install_path)s/bin/BayesWavePost
megasky=%(install_path)s/bin/megasky.py

[datafind]
# To come from lalinference
channel-list = { {% for ifo in ifos %}'{{ifo}}':'{{data['channels'][ifo]}}',{% endfor %} }
frtype-list = { {% for ifo in ifos %}'{{ifo}}':'{{data['frame types'][ifo]}}',{% endfor %} }
url-type=file
veto-categories=[1]
{%- if data['cache files'].size > 0 %}
glob-frame-data=
cache-files={ {% for ifo in ifos %}'{{ifo}}':'{{data['cache files'][ifo]}}',{% endfor %} }
{%- endif %}

[bayeswave_options]
; command line options for BayesWave.  See BayesWave --help
Dmax=100
updatedGeocenterPSD=
Niter = {{ likelihood['iterations'] | default: 100000}}
Nchain = {{ likelihood['chains'] | default: 8 }} 
Nthreads = {{ likelihood['threads'] | default: 4 }}
cleanOnly=
bayesLine =

[bayeswave_post_options]
; command line options for BayesWavePost.  See BayesWavePost --help
0noise=
lite =
bayesLine =

[condor]
; see e.g., https://ldas-gridmon.ligo.caltech.edu/ldg_accounting/user
universe=vanilla
checkpoint=
bayeswave-request-memory = {{ scheduler['request memory'] | default: "8192 MB" }}
bayeswave_post-request-memory = {{ scheduler['request post memory'] | default: "16384 MB" }}
bayeswave-request-disk = {{ scheduler['request disk'] | default: "64 MB" }}
bayeswave_post-request-disk = {{ scheduler['request post disk'] | default: "64 MB" }}
datafind=/usr/bin/gw_data_find
ligolw_print=/usr/bin/ligolw_print
segfind=/usr/bin/ligolw_segment_query_dqsegdb
accounting-group = {{ scheduler['accounting group'] }}
accounting-group-user = {{ config['condor']['user'] }}

[segfind]
; See e.g., https://wiki.ligo.org/viewauth/DetChar/DataQuality/AligoFlags
segment-url=https://segments.ligo.org

[segments]
; See e.g., https://wiki.ligo.org/viewauth/DetChar/DataQuality/AligoFlags
; https://wiki.ligo.org/viewauth/LSC/JRPComm/ObsRun1#Resource_information_40Data_44_segments_44_etc._41
l1-analyze = L1:DMT-ANALYSIS_READY:1
h1-analyze = H1:DMT-ANALYSIS_READY:1
;v1-analyze = V1:ITF_SCIENCEMODE

