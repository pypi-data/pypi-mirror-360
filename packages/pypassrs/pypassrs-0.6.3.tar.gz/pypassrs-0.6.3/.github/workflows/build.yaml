name: build
on: release
env:
    RUST_TOOLCHAIN: "1.80"
    MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}

jobs:
    manylinux_2_17_amd64:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                python: [
                    { name: "3.7", version: "cp37-cp37m" },
                    { name: "3.8", version: "cp38-cp38" },
                    { name: "3.9", version: "cp39-cp39" },
                    { name: "3.10", version: "cp310-cp310" },
                    { name: "3.11", version: "cp311-cp311" },
                    { name: "3.12", version: "cp312-cp312" },
                    { name: "3.13", version: "cp313-cp313" },
                ]
        env:
            CC: "clang"
#        container:
#            image: quay.io/pypa/manylinux2014_x86_64
        steps:

        - name: Build environment pre-clone
          run: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
              --default-toolchain "${RUST_TOOLCHAIN}-x86_64-unknown-linux-gnu" \
              --profile minimal --component rust-src

        - uses: actions/checkout@v4

        - name: Build
          uses: PyO3/maturin-action@v1
          with:
            rust-toolchain: stable
            rustup-components: rust-src
            target: ${{ matrix.platform.target }}
            manylinux: manylinux2014
            args: --release --strip --out=dist -i python${{ matrix.python.version }}

#        - name: maturin build
#          run: |
#            . "$HOME/.cargo/env"
#            source .venv/bin/activate
#            maturin build --release --strip \
#                --compatibility manylinux2014 \
#                --interpreter /opt/python/${{ matrix.python.version }}/bin/python \
#                --target=x86_64-unknown-linux-gnu

#        - name: Store wheels
#          if: "startsWith(github.ref, 'refs/tags/')"
#          uses: actions/upload-artifact@v4
#          with:
#            name: pypassrs_manylinux_2_17_amd64_${{ matrix.python.name }}
#            path: target/wheels
#            overwrite: true
#            retention_days: 1

#    manylinux_2_17:
#      runs-on: ubuntu-latest
#      strategy:
#        fail-fast: false
#        matrix:
#          python: [
#            { version: '3.12' },
#            { version: '3.11' },
#            { version: '3.10' },
#            { version: '3.9' },
#            { version: '3.8' },
#            { version: '3.7' },
#          ]
#          platform:
#          - target: aarch64-unknown-linux-gnu
#            arch: aarch64
#            platform: linux/arm64
#          - target: x86_64-unknown-linux-gnu
#            arch: x86_64
#            platform: linux/amd64
#      steps:
#        - uses: actions/checkout@v4

#        - name: Build
#          uses: PyO3/maturin-action@v1
#          env:
#            CC: "clang"
#            CFLAGS: "-Os -fstrict-aliasing -fno-plt -flto=full -emit-llvm"
#            LDFLAGS: "-fuse-ld=lld -Wl,-plugin-opt=also-emit-llvm -Wl,--as-needed -Wl,-zrelro,-znow"
#            RUSTFLAGS: "-C linker=clang -C link-arg=-fuse-ld=lld -C linker-plugin-lto -C lto=fat -C link-arg=-Wl,-zrelro,-znow -D warnings"
#          with:
#            rust-toolchain: stable
#            rustup-components: rust-src
#            target: ${{ matrix.platform.target }}
#            manylinux: manylinux2014
#            args: --release --strip --out=dist -i python${{ matrix.python.version }}
#
#        - name: QEMU
#          if: matrix.platform.arch != 'x86_64'
#          uses: docker/setup-qemu-action@v3
#          with:
#            image: tonistiigi/binfmt:qemu-v8.1.5
#            platforms: ${{ matrix.platform.platform }}

#    musllinux_1_2:
#      runs-on: ubuntu-latest
#      strategy:
#        fail-fast: false
#        matrix:
#          python: [
#            { version: '3.12' },
#            { version: '3.11' },
#            { version: '3.10' },
#            { version: '3.9' },
#            { version: '3.8' },
#            { version: '3.7' },
#          ]
#          platform:
#          - target: aarch64-unknown-linux-musl
#            arch: aarch64
#            platform: linux/arm64
#          - target: x86_64-unknown-linux-musl
#            arch: x86_64
#            platform: linux/amd64
#      steps:
#        - uses: actions/checkout@v4
#
#        - name: Build
#          uses: PyO3/maturin-action@v1
#          env:
#            CC: "gcc"
#            CFLAGS: "-Os"
#            LDFLAGS: "-Wl,--as-needed"
#          with:
#            rust-toolchain: stable
#            rustup-components: rust-src
#            target: ${{ matrix.platform.target }}
#            manylinux: musllinux_1_2
#            args: --release --strip --out=dist -i python${{ matrix.python.version }}

#        - name: QEMU
#          if: matrix.platform.arch != 'x86_64'
#          uses: docker/setup-qemu-action@v3
#          with:
#            image: tonistiigi/binfmt:qemu-v8.1.5
#            platforms: ${{ matrix.platform.platform }}
#    
    musllinux_1_2_amd64:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                python: [
                    { name: "3.7", version: "cp37-cp37m" },
                    { name: "3.8", version: "cp38-cp38" },
                    { name: "3.9", version: "cp39-cp39" },
                    { name: "3.10", version: "cp310-cp310" },
                    { name: "3.11", version: "cp311-cp311" },
                    { name: "3.12", version: "cp312-cp312" },
                    { name: "3.13", version: "cp313-cp313" },
                ]
        env:
            CC: "clang"
        container:
            image: quay.io/pypa/musllinux_1_2_x86_64
        steps:

        - name: Build environment pre-clone
          run: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
              --default-toolchain "${RUST_TOOLCHAIN}-x86_64-unknown-linux-musl" \
              --profile minimal --component rust-src

        - uses: actions/checkout@v4

        - name: Build environment post-clone
          run: |
            . "$HOME/.cargo/env"
            cargo fetch --target=x86_64-unknown-linux-musl

            curl -sSL https://astral.sh/uv/install.sh | sh
            uv venv --python /opt/python/${{ matrix.python.version }}/bin/python
            uv pip install --upgrade "maturin>=1,<2"

        - name: maturin build
          run: |
            . "$HOME/.cargo/env"
            source .venv/bin/activate
            maturin build --release --strip \
                --compatibility manylinux2014 \
                --interpreter /opt/python/${{ matrix.python.version }}/bin/python \
                --target=x86_64-unknown-linux-musl

#        - name: Store wheels
#          if: "startsWith(github.ref, 'refs/tags/')"
#          uses: actions/upload-artifact@v4
#          with:
#            name: pypassrs_musllinux_1_2_amd64_${{ matrix.python.name }}
#            path: target/wheels
#            overwrite: true
#            retention_days: 1

    musllinux_1_2_aarch64:
        runs-on: ubuntu-latest
        strategy:
            fail-fast: false
            matrix:
                python: [
                    { name: "3.7", version: "cp37-cp37m" },
                    { name: "3.8", version: "cp38-cp38" },
                    { name: "3.9", version: "cp39-cp39" },
                    { name: "3.10", version: "cp310-cp310" },
                    { name: "3.11", version: "cp311-cp311" },
                    { name: "3.12", version: "cp312-cp312" },
                    { name: "3.13", version: "cp313-cp313" },
                ]
        env:
            CC: "clang"
        container:
            image: quay.io/pypa/musllinux_1_2_aarch64
        steps:

        - name: Build environment pre-clone
          run: |
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y \
              --default-toolchain "${RUST_TOOLCHAIN}-aarch64-unknown-linux-musl" \
              --profile minimal --component rust-src

        - uses: actions/checkout@v4

        - name: Build environment post-clone
          run: |
            . "$HOME/.cargo/env"
            cargo fetch --target=aarch64-unknown-linux-musl

            curl -sSL https://astral.sh/uv/install.sh | sh
            uv venv --python /opt/python/${{ matrix.python.version }}/bin/python
            uv pip install --upgrade "maturin>=1,<2"

        - name: maturin build
          run: |
            . "$HOME/.cargo/env"
            source .venv/bin/activate
            maturin build --release --strip \
                --compatibility manylinux2014 \
                --interpreter /opt/python/${{ matrix.python.version }}/bin/python \
                --target=aarch64-unknown-linux-musl

#        - name: Store wheels
#          if: "startsWith(github.ref, 'refs/tags/')"
#          uses: actions/upload-artifact@v4
#          with:
#            name: pypassrs_musllinux_1_2_amd64_${{ matrix.python.name }}
#            path: target/wheels
#            overwrite: true
#            retention_days: 1

#        - name: maturin upload
#          run: |
#            maturin upload target/wheels/*
            
