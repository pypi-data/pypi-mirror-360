name: PR Pre-release

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]

jobs:
  generate-prerelease-tag:
    runs-on: ubuntu-latest
    outputs:
      prerelease_tag: ${{ steps.generate_tag.outputs.prerelease_tag }}
      github_tag: ${{ steps.generate_tag.outputs.github_tag }}
      version: ${{ steps.generate_tag.outputs.version }}
      pr_number: ${{ github.event.number }}
      pr_head_sha: ${{ github.event.pull_request.head.sha }}
      pr_title: ${{ github.event.pull_request.title }}
      pr_head_ref: ${{ github.event.pull_request.head.ref }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate pre-release tag
      id: generate_tag
      run: |
        # Get base version from latest tag or default to 0.0.0
        BASE_VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "0.0.0")
        
        # Generate PEP 440 compatible pre-release version
        SHORT_SHA=$(git rev-parse --short HEAD)
        PR_NUMBER=${{ github.event.number }}
        
        # Use PEP 440 compatible format: {base_version}.dev{pr_number}+{sha}
        PRERELEASE_VERSION="${BASE_VERSION}.dev${PR_NUMBER}+${SHORT_SHA}"
        PRERELEASE_TAG="v${PRERELEASE_VERSION}"
        
        # Also create a simple tag for GitHub release (without +sha which can cause issues)
        GITHUB_TAG="v${BASE_VERSION}-pr${PR_NUMBER}.${SHORT_SHA}"
        
        echo "Base version: $BASE_VERSION"
        echo "Pre-release version: $PRERELEASE_VERSION"
        echo "Pre-release tag: $PRERELEASE_TAG"
        echo "GitHub tag: $GITHUB_TAG"
        
        echo "prerelease_tag=$PRERELEASE_TAG" >> $GITHUB_OUTPUT
        echo "version=$PRERELEASE_VERSION" >> $GITHUB_OUTPUT
        echo "github_tag=$GITHUB_TAG" >> $GITHUB_OUTPUT

  build-prerelease:
    needs: generate-prerelease-tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .
    
    - name: Set version for setuptools-scm
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        # Create a temporary tag for building
        git tag -a "${{ needs.generate-prerelease-tag.outputs.prerelease_tag }}" -m "Pre-release ${{ needs.generate-prerelease-tag.outputs.prerelease_tag }}"
        echo "Created temporary tag: ${{ needs.generate-prerelease-tag.outputs.prerelease_tag }}"
    
    - name: Build package
      run: make build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: prerelease-build-artifacts-${{ needs.generate-prerelease-tag.outputs.pr_number }}
        path: dist/*
        retention-days: 30
    
    - name: Create pre-release
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
            dist/hbat-${{ needs.generate-prerelease-tag.outputs.version }}-py3-none-any.whl
            dist/hbat-${{ needs.generate-prerelease-tag.outputs.version }}.tar.gz
        tag_name: ${{ needs.generate-prerelease-tag.outputs.github_tag }}
        name: Pre-release ${{ needs.generate-prerelease-tag.outputs.github_tag }}
        body: |
          ðŸš§ **Pre-release build for PR #${{ needs.generate-prerelease-tag.outputs.pr_number }}**
          
          **Branch:** `${{ needs.generate-prerelease-tag.outputs.pr_head_ref }}`
          **Commit:** ${{ needs.generate-prerelease-tag.outputs.pr_head_sha }}
          **Title:** ${{ needs.generate-prerelease-tag.outputs.pr_title }}
          
          This is an automated pre-release build. Use for testing purposes only.
          
          **Install with pip:**
          ```bash
          pip install https://github.com/${{ github.repository }}/releases/download/${{ needs.generate-prerelease-tag.outputs.github_tag }}/hbat-${{ needs.generate-prerelease-tag.outputs.version }}-py3-none-any.whl
          ```
        prerelease: true
        draft: false
    
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = ${{ needs.generate-prerelease-tag.outputs.pr_number }};
          const tag = '${{ needs.generate-prerelease-tag.outputs.github_tag }}';
          const version = '${{ needs.generate-prerelease-tag.outputs.version }}';
          
          const comment = `## ðŸš§ Pre-release Ready
          
          A pre-release has been created for this PR: **${tag}**
          
          ### Quick Install
          \`\`\`bash
          pip install https://github.com/${{ github.repository }}/releases/download/${tag}/hbat-${version}-py3-none-any.whl
          \`\`\`
          
          ### Available Artifacts
          - Python wheel: \`hbat-${version}-py3-none-any.whl\`
          - Source distribution: \`hbat-${version}.tar.gz\`
          - macOS DMG: \`hbat-${version}.dmg\`
          - Conda package: \`hbat-${version}.tar.bz2\` or \`hbat-${version}.conda\`
          
          ### Install Options
          **Pip:**
          \`\`\`bash
          pip install https://github.com/${{ github.repository }}/releases/download/${tag}/hbat-${version}-py3-none-any.whl
          \`\`\`
          
          **Conda:** Download the conda package from the release and install locally
          
          View all artifacts at: https://github.com/${{ github.repository }}/releases/tag/${tag}
          `;
          
          github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  build-macos-prerelease:
    needs: generate-prerelease-tag
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .
        # Install tkinter on macOS
        brew install python-tk create-dmg
    
    - name: Set version for setuptools-scm
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git tag -a "${{ needs.generate-prerelease-tag.outputs.prerelease_tag }}" -m "Pre-release ${{ needs.generate-prerelease-tag.outputs.prerelease_tag }}"
        echo "Created temporary tag: ${{ needs.generate-prerelease-tag.outputs.prerelease_tag }}"
    
    - name: Build standalone macOS app
      run: make build-standalone

    - name: Ad-hoc sign the app
      run: |
        echo "Signing app with ad-hoc signature..."
        codesign --force --deep --sign - dist/HBAT-GUI.app
        codesign --verify --verbose dist/HBAT-GUI.app

    - name: Remove HBAT-GUI folder
      run: |
        echo "Contents of dist directory:"
        ls -la dist/
        cd dist && rm -rf HBAT-GUI
    
    - name: Create DMG installer
      run: |
        create-dmg \
          --volname "HBAT Pre-release Installer" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "HBAT-GUI.app" 200 190 \
          --hide-extension "HBAT-GUI.app" \
          --app-drop-link 600 185 \
          "hbat-${{ needs.generate-prerelease-tag.outputs.version }}.dmg" \
          "dist/"
        mv hbat-${{ needs.generate-prerelease-tag.outputs.version }}.dmg dist/
    
    - name: Upload macOS app artifact
      uses: actions/upload-artifact@v4
      with:
        name: prerelease-macos-app-${{ needs.generate-prerelease-tag.outputs.pr_number }}
        path: dist/hbat-${{ needs.generate-prerelease-tag.outputs.version }}.dmg
        retention-days: 30

  build-conda-prerelease:
    needs: generate-prerelease-tag
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Create pre-release tag (simulate conda-release.yml workflow)
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        # Create tag to simulate the release process that conda build expects
        git tag -a "${{ needs.generate-prerelease-tag.outputs.prerelease_tag }}" -m "Pre-release ${{ needs.generate-prerelease-tag.outputs.prerelease_tag }}"
        echo "Created tag for conda build: ${{ needs.generate-prerelease-tag.outputs.prerelease_tag }}"
    
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v3
      with:
        auto-update-conda: true
        python-version: 3.11
        channels: conda-forge,defaults
        channel-priority: true
    
    - name: Install conda-build and dependencies
      shell: bash -l {0}
      run: |
        conda install -y conda-build conda-verify
        # Disable automatic upload (simulate conda-release.yml process without uploading)
        conda config --set anaconda_upload no
    
    - name: Build conda package (simulate conda-release.yml workflow)
      shell: bash -l {0}
      run: |
        # Export the pre-release tag (same as main conda-release workflow process)
        export GIT_DESCRIBE_TAG=${{ needs.generate-prerelease-tag.outputs.prerelease_tag }}
        echo "Building conda package with version: ${GIT_DESCRIBE_TAG}"
        echo "Simulating conda-release.yml workflow without uploading to conda channels"
        
        # Use same build command as conda-release workflow
        conda build conda --output-folder conda-build-output
        
        # List built packages
        echo "Built conda packages:"
        ls -la conda-build-output/noarch/
        
        # Show package info for verification
        PACKAGE_PATH=$(find conda-build-output -name "hbat-*.tar.bz2" -o -name "hbat-*.conda" | head -n 1)
        if [ -n "$PACKAGE_PATH" ]; then
          echo "Package details:"
          echo "Package file: $PACKAGE_PATH"
          echo "Package size: $(du -h "$PACKAGE_PATH" | cut -f1)"
          echo "File type: $(file "$PACKAGE_PATH")"
        else
          echo "Warning: No package found!"
          ls -la conda-build-output/
        fi
    
    - name: Upload conda package as artifact
      uses: actions/upload-artifact@v4
      with:
        name: prerelease-conda-package-${{ needs.generate-prerelease-tag.outputs.pr_number }}
        path: conda-build-output/noarch/hbat-*.*
        retention-days: 30

  update-prerelease:
    needs: [generate-prerelease-tag, build-prerelease, build-macos-prerelease, build-conda-prerelease]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: prerelease-build-artifacts-${{ needs.generate-prerelease-tag.outputs.pr_number }}
        path: dist/
    
    - name: Download macOS app
      uses: actions/download-artifact@v4
      with:
        name: prerelease-macos-app-${{ needs.generate-prerelease-tag.outputs.pr_number }}
        path: dist/
    
    - name: Download conda package
      uses: actions/download-artifact@v4
      with:
        name: prerelease-conda-package-${{ needs.generate-prerelease-tag.outputs.pr_number }}
        path: dist/
    
    - name: List dist directory contents
      run: |
        echo "Contents of dist directory:"
        ls -la dist/
    
    - name: Update pre-release with all artifacts
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
            dist/hbat-${{ needs.generate-prerelease-tag.outputs.version }}.dmg
            dist/hbat-*.tar.bz2
            dist/hbat-*.conda
        tag_name: ${{ needs.generate-prerelease-tag.outputs.github_tag }}
        prerelease: true