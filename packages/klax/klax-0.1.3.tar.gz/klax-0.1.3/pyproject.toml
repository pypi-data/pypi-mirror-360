[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "klax"
version = "0.1.3"
description = "A lightweight machine learning package for computational mechanics."
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    { name = "Fabian Roth", email = "roth@cps.tu-darmstadt.de" },
    { name = "Jasper Schommartz", email = "schommartz@cps.tu-darmstadt.de" },
]
requires-python = ">=3.12"
dependencies = [
    "equinox>=0.12.2",
    "jax>=0.6.0",
    "optax>=0.2.4",
    "paramax>=0.0.3",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering :: Physics",
]

[project.urls]
Repository = "https://github.com/Drenderer/klax"
Issues = "https://github.com/Drenderer/klax/issues"

[project.optional-dependencies]
plot = ["matplotlib>=3.10.3"]
docs = [
    "hippogriffe>=0.2.2",
    "mkdocs>=1.6.1",
    "mkdocs-ipynb>=0.1.1",
    "mkdocs-material>=9.6.14",
    "mkdocstrings-python>=1.16.12",
]

[dependency-groups]
dev = [
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "ruff>=0.11.10",
]

[tool.hatch.build.targets.wheel]
packages = ["klax"]

[tool.pytest.ini_options]
addopts = "-p no:faulthandler"
testpaths = ["tests"]

[tool.ruff]
line-length = 79

[tool.ruff.format]
docstring-code-format = true
quote-style = "double"

[tool.ruff.lint]
# See https://docs.astral.sh/ruff/rules/ for the meaning of all rules.
select = [
    "D",  # pydocstyle
    "E",  # pycodestyle
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
]
ignore = [
    "D100",  # Missing docstring in public module
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
    "D107",  # Mising docstring in `__init__`
    "D203",  # 1 blank line required before class docstring; ignored in favor of D211
    "D213",  # ignored in favor of D212
    "E501",  # During development, we allow long lines.
    "E402",
    "E731",
    "E741",
    "UP038",
]
