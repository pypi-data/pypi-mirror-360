# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[project]
name = "nvFSDP"
dynamic = [
    "version",
    "readme",
]
description = "nvFSDP - NVIDIA fork of Fully Sharded Data Parallelism that is cross-compatible with Megatron / TransformerEngine and native PyTorch."
authors = [{ name = "NVIDIA", email = "nemo-toolkit@nvidia.com" }]
maintainers = [{ name = "NVIDIA", email = "nemo-toolkit@nvidia.com" }]
requires-python = ">=3.10"
keywords = [
    "NLP",
    "NeMo",
    "deep",
    "gpu",
    "language",
    "learning",
    "machine",
    "nvidia",
    "pytorch",
    "torch",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Utilities",
]
dependencies = [
    "torch",
    "packaging",
]

[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[dependency-groups]
docs = [
    "myst-parser>=4.0.1",
    "nvidia-sphinx-theme>=0.0.8",
    "sphinx>=8.1.3",
    "sphinx-autobuild>=2024.10.3",
    "sphinx-autodoc2>=0.5.0",
    "sphinx-copybutton>=0.5.2",
]
test = [
    "coverage>=7.8.1",
    "flake8>=7.2.0",
    "pylint>=3.3.7",
    "pytest>=8.3.5",
    "pytest-mock>=3.14.0",
    "pytest-runner>=6.0.1",
]
dev = [
    "pre-commit>=3.6.0",
    "ruff>=0.9.9",
    "mypy>=1.8.0",
]

[tool.setuptools]
packages = ["nvfsdp"]

[tool.setuptools.dynamic]
version = {attr = "nvfsdp.package_info.__version__"}
readme = {file = "README.md", content-type = "text/markdown"}

[project.urls]
Download = "https://github.com/NVIDIA-NeMo/nvFSDP/releases"
Homepage = "https://github.com/NVIDIA-NeMo/nvFSDP"

[tool.pytest.ini_options]
# durations=0 will display all tests execution time, sorted in ascending order starting from from the slowest one.
# -vv will also display tests with durration = 0.00s
addopts = "--verbose --pyargs --durations=0 --strict-markers"  # always add these arguments to pytest
testpaths = ["tests"]
# directories to ignore when discovering tests
norecursedirs = [
    "nvfsdp",
    "external",
    "examples",
    "docs",
    "scripts",
    "tools",
    "tutorials",
    "*.egg",
    ".*",
    "_darcs",
    "build",
    "CVS",
    "dist",
    "venv",
    "{arch}"
]
# markers to select tests, use `pytest --markers` to see all available markers, `pytest -m "<marker>"` to select tests
markers = [
    "unit: marks unit test, i.e. testing a single, well isolated functionality (deselect with '-m \"not unit\"')",
    "integration: marks test checking the elements when integrated into subsystems (deselect with '-m \"not integration\"')",
    "system: marks test working at the highest integration level (deselect with '-m \"not system\"')",
    "acceptance: marks test checking whether the developed product/model passes the user defined acceptance criteria (deselect with '-m \"not acceptance\"')",
    "docs: mark tests related to documentation (deselect with '-m \"not docs\"')",
    "skipduringci: marks tests that are skipped ci as they are addressed by Jenkins jobs but should be run to test user setups",
    "pleasefixme: marks tests that are broken and need fixing",
]

[tool.ruff]

# Match black's line length
line-length = 119
target-version = "py310"

# Exclude common directories that shouldn't be linted
exclude = [
    ".git",
    ".github",
    ".venv",
    "venv",
    "__pycache__",
    "*.egg",
    "build",
    "dist",
    "docs/source/conf.py",
    "setup.py",
]

# Files to completely ignore
extend-exclude = [
    "*.ipynb",
]

[tool.ruff.lint]
# Configure imports sorting to match isort
select = [
    "F541",  # f-string without any placeholders
    "F841",  # local variable assigned but never used
    "F401",  # imported but unused
    "E741",  # ambiguous variable name
    "F821",  # undefined name
    "E266",  # too many leading '#' for block comment
    "I",     # isort
    "D101",  # docstring
    "D103",
]

# Additional rules can be added here
ignore = [
    "E501",  # Line too long - handled by formatter
]
[tool.ruff.lint.isort]
known-first-party = ["nvfsdp"]
known-third-party = ["examples", "scripts"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
lines-after-imports = 2

[tool.ruff.lint.per-file-ignores]
# Ignore import violations in __init__ files
"__init__.py" = ["F401", "F403"]
# Ignore docstring requirements in test files
"test_*.py" = ["D101", "D103"]
"*_test.py" = ["D101", "D103"]
"tests/*.py" = ["D101", "D103"]

[tool.ruff.format]
# Match black configuration
quote-style = "double"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.coverage.run]
concurrency = ["thread", "multiprocessing"]
omit = ["/tmp/*"]

[tool.coverage.paths]
source = ["nvfsdp/", "/workspace/nvfsdp"]
