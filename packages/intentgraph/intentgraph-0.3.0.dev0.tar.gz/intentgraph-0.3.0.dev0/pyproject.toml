[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "intentgraph"
dynamic = ["version"]
description = "AI-native codebase intelligence with autonomous agent interface, natural language queries, and intelligent clustering"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
authors = [
    {name = "IntentGraph Team", email = "security@intentgraph.dev"},
]
keywords = ["ai-native", "autonomous-agents", "natural-language", "codebase-intelligence", "dependency-analysis", "semantic-queries", "token-budget", "intelligent-clustering", "ai-agents", "code-analysis"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "typer>=0.12.0,<1.0.0",
    "rich>=13.7.0,<14.0.0",
    "click>=8.0.0,<9.0.0",
    "pathspec>=0.12.0,<1.0.0",
    "grimp>=3.3.0,<4.0.0",
    "tree-sitter-language-pack>=0.8.0,<1.0.0",
    "networkx>=3.2.0,<4.0.0",
    "orjson>=3.9.0,<4.0.0",
    "pydantic>=2.5.0,<3.0.0",
    "gitpython>=3.1.41,<4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.23.0",
    "hypothesis>=6.92.0",
    "mypy>=1.8.0",
    "ruff>=0.1.9",
    "bandit>=1.7.5",
    "pyinstrument>=4.6.0",
    "mkdocs-material>=9.5.0",
    "diagrams>=0.23.0",
]

[project.urls]
Documentation = "https://github.com/intentgraph/intentgraph"
Issues = "https://github.com/intentgraph/intentgraph/issues"
Source = "https://github.com/intentgraph/intentgraph"

[project.scripts]
intentgraph = "intentgraph.cli:main"

[tool.hatch.version]
path = "src/intentgraph/__init__.py"

[tool.hatch.build.targets.sdist]
include = [
    "/src/intentgraph",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.hatch.build.targets.wheel]
packages = ["src/intentgraph"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=intentgraph",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=90",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.mypy]
python_version = "3.12"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "tree_sitter.*",
    "tree_sitter_languages.*",
    "grimp.*",
]
ignore_missing_imports = true

[tool.ruff]
target-version = "py312"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by formatter
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.isort]
known-first-party = ["intentgraph"]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.coverage.run]
source = ["src/intentgraph"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]