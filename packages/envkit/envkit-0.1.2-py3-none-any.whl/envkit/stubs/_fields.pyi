"""
This type stub file was generated by pyright.
"""

from typing import Protocol, TYPE_CHECKING, TypedDict, Unpack, final, overload
from enum import Enum
from types import EllipsisType

if TYPE_CHECKING:
    ...
Unset = EllipsisType
class ParserFactory[T,**P](Protocol):
    def __call__(self, name: str, raw_value: str, *args: P.args, **kwargs: P.kwargs) -> T:
        ...
    


@final
class EnvField[T,**P]:
    __slots__ = ...
    def __init__(self, factory: ParserFactory[T, P]) -> None:
        ...
    
    @overload
    def __call__(self, name: str, default: T | Unset = ..., *args: P.args, **kwargs: P.kwargs) -> T:
        ...
    
    @overload
    def __call__(self, name: str, default: None, *args: P.args, **kwargs: P.kwargs) -> T | None:
        ...
    
    def __call__(self, name: str, default: T | None | Unset = ..., *args: P.args, **kwargs: P.kwargs) -> T | None:
        """Parse an environment variable.

        Args:
            name: Environment variable name
            default: Default value if variable is not set. Let unset
                    to require the variable. Use None to allow None return.
            *args: Additional arguments passed to the factory
            **kwargs: Validation constraints passed to the factory

        Returns:
            The parsed and validated value, or the default if variable is unset

        Raises:
            ValueError: If the variable is required but not set, or if parsing/validation fails
        """
        ...
    


class StrConstraints(TypedDict, total=False):
    min_length: int
    max_length: int
    ...


def parse_str(name: str, raw_value: str, **constraints: Unpack[StrConstraints]) -> str:
    ...

class IntConstraints(TypedDict, total=False):
    min_value: int
    max_value: int
    ...


def parse_int(name: str, raw_value: str, **constraints: Unpack[IntConstraints]) -> int:
    ...

def parse_bool(name: str, raw_value: str) -> bool:
    ...

def parse_enum[T: Enum](name: str, raw_value: str, *, enum: type[T]) -> T:
    ...

@final
class Fields:
    """Public interface for parsing environment variables with type safety.

    This class provides pre-configured field parsers for common data types.
    Each field type supports validation constraints and proper error handling.

    Attributes:
        str: Parser for string values with length validation
        int: Parser for integer values with range validation
        bool: Parser for boolean values (supports multiple formats)
        enum: Parser for enum values by member name

    Example:
        ```python
        # Required string with minimum length
        api_key = Fields.str("API_KEY", min_length=32)

        # Optional integer with default and range
        port = Fields.int("PORT", default=8080, min_value=1, max_value=65535)

        # Boolean with default
        debug = Fields.bool("DEBUG", default=False)

        # Enum parsing
        log_level = Fields.enum("LOG_LEVEL", enum=LogLevel, default=LogLevel.INFO)
        ```
    """
    str = ...
    int = ...
    bool = ...
    enum = ...


