# Classical Latin (1st century BC) function words by grammatical nature

ARTICLES_DETERMINERS = frozenset([
    # Latin has no articles; determiners/demonstratives
    "hic", "haec", "hoc",
    "ille", "illa", "illud",
    "iste", "ista", "istud",
    "is", "ea", "id",
    "aliqui", "aliqua", "aliquod",
    "quidam", "quaedam", "quoddam",
    "quicumque", "quaecumque", "quodcumque",
    "omnis", "omne",
    "totus", "tota", "totum",
    "unus", "una", "unum",
    "alter", "altera", "alterum",
    "nullus", "nulla", "nullum",
    "solus", "sola", "solum",
    "uterque", "utraque", "utrumque",
])

POSSESSIVE_DETERMINERS = frozenset([
    "meus", "mea", "meum",
    "tuus", "tua", "tuum",
    "suus", "sua", "suum",
    "noster", "nostra", "nostrum",
    "vester", "vestra", "vestrum",
])

PERSONAL_PRONOUNS = frozenset([
    "ego", "tu", "nos", "vos",
    "is", "ea", "id",
    "se",
])

POSSESSIVE_PRONOUNS = frozenset([
    "meus", "mea", "meum",
    "tuus", "tua", "tuum",
    "suus", "sua", "suum",
    "noster", "nostra", "nostrum",
    "vester", "vestra", "vestrum",
])

DEMONSTRATIVE_PRONOUNS = frozenset([
    "hic", "haec", "hoc",
    "ille", "illa", "illud",
    "iste", "ista", "istud",
    "is", "ea", "id",
])

INDEFINITE_PRONOUNS = frozenset([
    "aliquis", "aliquid",
    "quis", "quid",
    "quisquam", "quidquam",
    "quicumque", "quaecumque", "quodcumque",
    "quidam", "quaedam", "quiddam",
    "quispiam", "quidpiam",
    "nemo", "nihil",
    "nullus", "nulla", "nullum",
    "alter", "altera", "alterum",
    "uter", "utra", "utrum",
])

INTERROGATIVE_PRONOUNS = frozenset([
    "quis", "quid",
    "qui", "quae", "quod",
    "uter", "utra", "utrum",
    "qualis", "quantus",
])

PREPOSITIONS = frozenset([
    "a", "ab", "abs", "ad", "ante", "apud", "circum", "cis",
    "contra", "cum", "de", "ex", "e", "extra",
    "in", "infra", "inter", "intra", "iuxta",
    "ob", "per", "post", "prae", "pro", "propter",
    "sine", "sub", "super", "supra", "trans", "ultra",
])

COORD_CONJUNCTIONS = frozenset([
    "et", "atque", "ac",
    "aut", "vel", "ve",
    "nec", "neque",
    "sed", "verum", "vero", "autem",
    "tamen", "itaque",
])

SUBORD_CONJUNCTIONS = frozenset([
    "quod", "quia", "cum", "ut", "dum",
    "si", "nisi", "ne",
    "quamquam", "etsi", "tametsi",
    "postquam", "antequam", "ubi", "quando", "quoniam",
    "donec", "utrum",
])

ADVERBS = frozenset([
    "hic", "ibi", "illic", "inde", "hinc", "eo", "usque",
    "hodie", "heri", "cras",
    "nunc", "statim", "mox", "iam", "sero", "tandem",
    "saepe", "nunquam", "numquam", "raro",
    "bene", "male",
    "magis", "minus", "maxime", "minime",
    "multum", "parum",
    "tam", "quam",
    "ita", "sic", "item",
    "etiam", "quoque", "quidem", "tamen", "igitur", "ergo", "enim",
    "forte", "certe",
    "non", "haud", "ne",
])

ADV_LOCUTIONS = frozenset([
    "post hoc", "deinde", "praeterea", "interea", "ad hoc",
    "quam ob rem", "eo loco", "ex hoc", "proinde", "quapropter",
    "ita vero", "si quidem", "tamquam", "ut ita dicam",
])

NEGATIONS = frozenset([
    "non", "haud", "ne", "nec", "neque",
])

AUX_ESSE = frozenset([
    "esse", "sum", "es", "est", "sumus", "estis", "sunt",
    "eram", "eras", "erat", "eramus", "eratis", "erant",
    "ero", "eris", "erit", "erimus", "eritis", "erunt",
    "fui", "fuisti", "fuit", "fuimus", "fuistis", "fuerunt",
])

MODAL_VERBS = frozenset([
    "posse", "possum", "potes", "potest", "possumus", "potestis", "possunt",
    "poteram", "potero",
    "velle", "volo", "vis", "vult", "volumus", "vultis", "volunt",
    "nolle", "nolo", "non vis", "non vult", "nolumus", "non vultis", "nolunt",
    "malo", "malle", "mavis", "mavult", "malumus", "mavultis", "malunt",
    "debere", "debeo", "debes", "debet", "debemus", "debetis", "debent",
    "oportet",
])

categories = {
    "articles": sorted(ARTICLES_DETERMINERS),
    "poss_det": sorted(POSSESSIVE_DETERMINERS),
    "pers_pron": sorted(PERSONAL_PRONOUNS),
    "poss_pron": sorted(POSSESSIVE_PRONOUNS),
    "dem_pron": sorted(DEMONSTRATIVE_PRONOUNS),
    "indef_pron": sorted(INDEFINITE_PRONOUNS),
    "inter_pron": sorted(INTERROGATIVE_PRONOUNS),
    "prepositions": sorted(PREPOSITIONS),
    "coord_conj": sorted(COORD_CONJUNCTIONS),
    "subord_conj": sorted(SUBORD_CONJUNCTIONS),
    "adverbs": sorted(ADVERBS),
    "adv_locutions": sorted(ADV_LOCUTIONS),
    "negations": sorted(NEGATIONS),
    "aux_esse": sorted(AUX_ESSE),
    "modals_full": sorted(MODAL_VERBS),
}

data = {
    "name": "Classical Latin â€“ 1st century BC",
    "language": "la",
    "period": "1cBC",
    "categories": categories,
}

output_path = pathlib.Path("/mnt/data/la_1cbc.json")
with output_path.open("w", encoding="utf-8") as f:
    json.dump(data, f, ensure_ascii=False, indent=2)

output_path
