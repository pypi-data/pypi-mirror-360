# Generated by Django 5.2 on 2025-05-20 17:43

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DnsResolver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('ip_address', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='ScriptConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('application_name', models.CharField(max_length=255)),
                ('log_level', models.CharField(choices=[('INFO', 'info'), ('DEBUG', 'debug'), ('WARNING', 'warning'), ('ERROR', 'error')], default='INFO', max_length=7)),
                ('namespace_root', models.CharField(blank=True, max_length=255, null=True)),
                ('metric_namespace', models.CharField(blank=True, max_length=255, null=True)),
                ('carbon_metrics_enabled', models.BooleanField(default=False)),
                ('carbon_server_ip', models.CharField(blank=True, max_length=15, null=True)),
                ('carbon_pickle_port', models.IntegerField(default=2004, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)])),
            ],
        ),
        migrations.CreateModel(
            name='DnsResolverList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('resolvers', models.ManyToManyField(related_name='resolver_lists', to='endpoints.dnsresolver')),
            ],
        ),
        migrations.CreateModel(
            name='EndpointModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mnemonic', models.CharField(max_length=255)),
                ('hostname', models.CharField(max_length=255)),
                ('scheme', models.CharField(choices=[('http', 'HTTP'), ('https', 'HTTPS')], default='https', max_length=10)),
                ('port', models.IntegerField(default=443, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)])),
                ('path', models.CharField(default='/', max_length=255)),
                ('query', models.CharField(blank=True, max_length=255, null=True)),
                ('fragment', models.CharField(blank=True, max_length=255, null=True)),
                ('verb', models.CharField(choices=[('GET', 'GET'), ('PATCH', 'PATCH'), ('POST', 'POST'), ('PUT', 'PUT'), ('DELETE', 'DELETE')], default='GET', max_length=6)),
                ('body', models.JSONField(blank=True, null=True)),
                ('healthy_status_code', models.IntegerField(default=200)),
                ('response_format', models.CharField(blank=True, choices=[('json', 'json'), ('text', 'text')], default='text', max_length=16, null=True)),
                ('status_key', models.CharField(blank=True, max_length=255, null=True)),
                ('healthy_status', models.CharField(blank=True, max_length=255, null=True)),
                ('version_key', models.CharField(blank=True, max_length=255, null=True)),
                ('connect_timeout', models.FloatField(default=7.0)),
                ('read_timeout', models.FloatField(default=7.0)),
                ('ignore', models.BooleanField(default=False)),
                ('health_check', models.BooleanField(default=True)),
                ('tls_check', models.BooleanField(default=True)),
                ('dns_check', models.BooleanField(default=True)),
                ('dns_resolver_list', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='endpoints', to='endpoints.dnsresolverlist')),
            ],
        ),
    ]
