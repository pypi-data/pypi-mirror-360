[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "deepsentinel-sdk"
dynamic = ["version"]
description = "Developer-friendly SDK providing AI compliance middleware for safe LLM interactions with comprehensive audit logging, PII/PHI detection, and performance optimizations"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
authors = [
    {name = "DeepSentinel Team", email = "dev@deepsentinel.ai"},
]
keywords = [
    "ai",
    "llm",
    "compliance",
    "middleware",
    "openai",
    "security",
    "audit",
    "pii",
    "phi",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Security",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "httpx>=0.24.0",
    "pydantic>=2.0.0",
    "typing-extensions>=4.0.0",
    "openai>=1.0.0",
    "anthropic>=0.25.0",
    "aiohttp>=3.8.0",
    "asyncio-mqtt>=0.13.0",
    "tenacity>=8.0.0",
    "structlog>=23.0.0",
    "click>=8.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "twine>=4.0.0",
    "build>=0.10.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.22.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "responses>=0.23.0",
    "httpx-mock>=0.10.0",
]

[project.urls]
Homepage = "https://github.com/DeepSentinel-AI/deepsentinel-python"
Documentation = "https://deepsentinel-ai.github.io/deepsentinel-python"
Repository = "https://github.com/DeepSentinel-AI/deepsentinel-python"
Issues = "https://github.com/DeepSentinel-AI/deepsentinel-python/issues"
Changelog = "https://github.com/DeepSentinel-AI/deepsentinel-python/blob/main/CHANGELOG.md"

[tool.hatch.version]
path = "src/deepsentinel/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/deepsentinel"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/CHANGELOG.md",
    "/pyproject.toml",
    "/requirements-dev.txt",
    "/requirements.txt",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["deepsentinel"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "anthropic.*",
    "openai.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=deepsentinel",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src/deepsentinel"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]