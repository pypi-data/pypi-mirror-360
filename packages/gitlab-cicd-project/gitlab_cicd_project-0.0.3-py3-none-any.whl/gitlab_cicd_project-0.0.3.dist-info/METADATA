Metadata-Version: 2.1
Name: gitlab-cicd-project
Version: 0.0.3
Summary: wifi speed test package
Home-page: UNKNOWN
Author: Shreyas Prabhakar
Author-email: shreyas.prabhakar97@gmail.com
License: UNKNOWN
Platform: UNKNOWN
Description-Content-Type: text/markdown
Requires-Dist: twine==6.1.0
Requires-Dist: wheel==0.44.0
Requires-Dist: setuptools==57.4.0
Requires-Dist: ipywidgets==8.0.6
Requires-Dist: plotly==5.24.1
Requires-Dist: pandas==2.1.3
Requires-Dist: DateTime==5.5
Requires-Dist: psutil==6.0.0
Requires-Dist: speedtest-cli==2.1.3
Requires-Dist: jupyter==1.0.0
Requires-Dist: ipython==8.12.0

# GitLab CI/CD Project

[![PyPI version](https://img.shields.io/pypi/v/gitlab-cicd-project.svg)](https://pypi.org/project/gitlab-cicd-project/)
[![Python Versions](https://img.shields.io/pypi/pyversions/gitlab-cicd-project.svg)](https://pypi.org/project/gitlab-cicd-project/)
[![License](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)
[![Build Status](https://img.shields.io/gitlab/pipeline-status/gitlab-shrprabh/gitlab-cicd-project)](https://gitlab.com/gitlab-shrprabh/gitlab-cicd-project/-/pipelines)

A lightweight Python package demonstrating GitLab CI/CD capabilities with automated testing and PyPI deployment.

## ‚ú® Features

- üöÄ Simple and easy-to-use interface
- üîÑ Fully automated CI/CD pipeline with GitLab
- üì¶ Seamless PyPI package deployment
- ‚öôÔ∏è Cross-platform compatibility (Windows, macOS, Linux)
- üõ†Ô∏è Python package development best practices

## üìã Table of Contents

- [Installation](#installation)
- [Quick Start](#quick-start)
- [Usage Examples](#usage-examples)
- [Development Setup](#development-setup)
- [Building the Package](#building-the-package)
- [Publishing to PyPI](#publishing-to-pypi)
- [Release History](#release-history)
- [License](#license)
- [Contributing](#contributing)

## üîß Installation

Install the package using pip:

```bash
pip install gitlab-cicd-project
```

## üöÄ Quick Start

After installation, you can use the package from the command line:

```bash
gitlab-cicd-project
```

This will display the welcome message: "Hello Welcome to LDMS Application!"

Alternatively, you can use it in your Python code:

```python
from gitlab_cicd_project import hello

# Print welcome message
hello()
```

## üìù Usage Examples

### Basic Usage

```python
# Import the package
from gitlab_cicd_project import hello

# Call the hello function
hello()
```

## üõ†Ô∏è Development Setup

### Prerequisites

- Python 3.6 or higher
- pip

### Local Development

1. Clone the repository:

   ```bash
   git clone https://gitlab.com/gitlab-shrprabh/gitlab-cicd-project.git
   cd gitlab-cicd-project
   ```

2. Install development dependencies:
   ```bash
   pip install -e ".[dev]"
   ```

## üì¶ Building the Package

1. Install build tools:

   ```bash
   pip install setuptools wheel twine
   ```

2. Build distribution packages:

   ```bash
   python setup.py sdist bdist_wheel
   ```

   This will create distribution files in the `dist/` directory.

## üö¢ Publishing to PyPI

### Manual Publishing

1. Set up your PyPI credentials:

   ```bash
   export TWINE_USERNAME=__token__
   export TWINE_PASSWORD=your-pypi-token
   ```

2. Upload the package to PyPI:
   ```bash
   twine upload dist/*
   ```

### GitLab CI/CD Integration

This project includes GitLab CI/CD configuration for automated testing and publishing:

1. Set the following environment variables in your GitLab CI/CD settings:

   - `TWINE_USERNAME`: Set to `__token__`
   - `TWINE_PASSWORD`: Your PyPI API token

2. The CI/CD pipeline will automatically:
   - Run tests
   - Build distribution packages
   - Publish to PyPI (on tagged releases)

#### CI/CD Pipeline Workflow

1. **Build Stage**: Creates distribution packages
2. **Test Stage**: Runs automated tests
3. **Publish Stage**: Uploads the package to PyPI (only on tagged commits)

To create a new release:

```bash
git tag v0.1.0
git push origin v0.1.0
```

## ÔøΩ Release History

### v0.0.1 (2025-07-04)

- üéâ Initial release
- ‚ú® Basic functionality with `hello()` function
- üì¶ Package structure set up with proper imports
- üöÄ Command-line interface
- üîÑ GitLab CI/CD pipeline integration

### v0.0.0 (2025-06-28)

- üöß Pre-release development version
- üèóÔ∏è Basic project structure

## ÔøΩüìÑ License

This project is licensed under the MIT License - see below for a summary:

### MIT License

Copyright (c) 2025 Shreyas Prabhakar

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

## üë• Contributing

Contributions are welcome! Here's how you can help:

1. Fork the repository
2. Create a feature branch: `git checkout -b feature/amazing-feature`
3. Commit your changes: `git commit -m 'Add amazing feature'`
4. Push to the branch: `git push origin feature/amazing-feature`
5. Open a pull request

### Code of Conduct

- Be respectful and inclusive
- Provide constructive feedback
- Focus on the best outcome for the project

## üìû Support

If you encounter any issues or have questions, please open an issue on the [GitLab repository](https://gitlab.com/gitlab-shrprabh/gitlab-cicd-project/-/issues).

---

Made with ‚ù§Ô∏è by [Shreyas Prabhakar](mailto:shreyas.prabhakar97@gmail.com)


