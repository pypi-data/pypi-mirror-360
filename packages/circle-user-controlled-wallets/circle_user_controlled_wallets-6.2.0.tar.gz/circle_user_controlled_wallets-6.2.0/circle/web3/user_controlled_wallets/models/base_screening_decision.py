# coding: utf-8

"""
    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from circle.web3.user_controlled_wallets.models.risk_action import RiskAction

class BaseScreeningDecision(BaseModel):
    """
    Screening decision detail about matched rule, actions to take, and all related risk signals.
    """
    rule_name: Optional[StrictStr] = Field(None, alias="ruleName", description="Name of the matched rule found in screening.")
    actions: Optional[conlist(RiskAction)] = Field(None, description="Actions to take for the decision.")
    screening_date: datetime = Field(..., alias="screeningDate", description="Date and time the resource was created, in ISO-8601 UTC format.")
    __properties = ["ruleName", "actions", "screeningDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> BaseScreeningDecision:
        """Create an instance of BaseScreeningDecision from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> BaseScreeningDecision:
        """Create an instance of BaseScreeningDecision from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BaseScreeningDecision.parse_obj(obj)

        _obj = BaseScreeningDecision.parse_obj({
            "rule_name": obj.get("ruleName"),
            "actions": obj.get("actions"),
            "screening_date": obj.get("screeningDate")
        })
        return _obj


