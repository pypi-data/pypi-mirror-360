# coding: utf-8

"""
    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt

class PinSecurityDetails(BaseModel):
    """
    PinSecurityDetails
    """
    failed_attempts: Optional[StrictInt] = Field(None, alias="failedAttempts", description="FailedAttempts the number of times a user has entered an invalid pin code. ")
    locked_date: Optional[datetime] = Field(None, alias="lockedDate", description="The date and time when the pin code has been locked.")
    locked_expiry_date: Optional[datetime] = Field(None, alias="lockedExpiryDate", description="The date and time when the pin code will be unlocked.")
    last_lock_override_date: Optional[datetime] = Field(None, alias="lastLockOverrideDate", description="This is the last date and time when the lock was unlocked by admin manually.")
    __properties = ["failedAttempts", "lockedDate", "lockedExpiryDate", "lastLockOverrideDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PinSecurityDetails:
        """Create an instance of PinSecurityDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PinSecurityDetails:
        """Create an instance of PinSecurityDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PinSecurityDetails.parse_obj(obj)

        _obj = PinSecurityDetails.parse_obj({
            "failed_attempts": obj.get("failedAttempts"),
            "locked_date": obj.get("lockedDate"),
            "locked_expiry_date": obj.get("lockedExpiryDate"),
            "last_lock_override_date": obj.get("lastLockOverrideDate")
        })
        return _obj


