# coding: utf-8

"""
    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

import circle.web3.user_controlled_wallets
from circle.web3.user_controlled_wallets.models.transactions import Transactions  # noqa: E501
from circle.web3.user_controlled_wallets.rest import ApiException

class TestTransactions(unittest.TestCase):
    """Transactions unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Transactions
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Transactions`
        """
        model = circle.web3.user_controlled_wallets.models.transactions.Transactions()  # noqa: E501
        if include_optional :
            return Transactions(
                data = circle.web3.user_controlled_wallets.models.transactions_data.Transactions_data(
                    transactions = [
                        circle.web3.user_controlled_wallets.models.transaction.Transaction(
                            id = 'c4d1da72-111e-4d52-bdbf-2e74a2d803d5', 
                            abi_function_signature = 'burn(uint256)', 
                            abi_parameters = ["100","1"], 
                            amounts = ["6.62607015"], 
                            amount_in_usd = '', 
                            block_hash = '', 
                            block_height = 56, 
                            blockchain = 'MATIC-AMOY', 
                            contract_address = '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48', 
                            create_date = '2023-01-01T12:04:05Z', 
                            custody_type = 'DEVELOPER', 
                            destination_address = '0xca9142d0b9804ef5e239d3bc1c7aa0d1c74e7350', 
                            error_reason = '', 
                            error_details = '', 
                            estimated_fee = circle.web3.user_controlled_wallets.models.transaction_fee.TransactionFee(
                                gas_limit = '21000', 
                                gas_price = '', 
                                max_fee = '5.935224468', 
                                priority_fee = '1.022783914', 
                                base_fee = '1.022783914', 
                                network_fee = '0.0001246397138', ), 
                            fee_level = 'MEDIUM', 
                            first_confirm_date = '2021-05-18T00:00Z', 
                            network_fee = '', 
                            network_fee_in_usd = '', 
                            nfts = ["[{\"ntfTokenId\":\"12321\"","\"metadata\":\"ipfs://QmZcH4YvBVVRJtdn4RdbaqgspFU8gH6P9vomDpBVpAL3u4/1\"}","{\"ntfTokenId\":\"12322\"","\"metadata\":\"ipfs://QmZcH4YvBVVRJtdn4RdbaqgspFU8gH6P9vomDpBVpAL3u4/2\"}]"], 
                            operation = 'TRANSFER', 
                            ref_id = 'grouptransaction123', 
                            source_address = '0xca9142d0b9804ef5e239d3bc1c7aa0d1c74e7350', 
                            state = 'CANCELLED', 
                            token_id = 'c4d1da72-111e-4d52-bdbf-2e74a2d803d5', 
                            transaction_type = 'INBOUND', 
                            tx_hash = '0x4a25cc5e661d8504b59c5f38ba93f010e8518966f00e2ceda7955c4b8621357d', 
                            update_date = '2023-01-01T12:04:05Z', 
                            user_id = 'ext_user_id_1', 
                            wallet_id = 'c4d1da72-111e-4d52-bdbf-2e74a2d803d5', 
                            transaction_screening_evaluation = circle.web3.user_controlled_wallets.models.transaction_screening_decision.TransactionScreeningDecision(), )
                        ], )
            )
        else :
            return Transactions(
        )
        """

    def testTransactions(self):
        """Test Transactions"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
