# coding: utf-8

"""
    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from circle.web3.user_controlled_wallets.models.token import Token

class Nft(BaseModel):
    """
    Nft
    """
    amount: StrictStr = Field(..., description="Amount of NFTs on a wallet. For non-fungible token standards, like ERC721, NonFungible, NonFungibleEdition, ProgrammableNonFungible, ProgrammableNonFungibleEdition, amount will always be “1”; for semi-fungible token standards like ERC1155, amount will correspond to the number of tokens; for FungibleAsset, amount can be greater than \"1\".")
    metadata: Optional[StrictStr] = Field(None, description="The metadata of the NFT.")
    nft_token_id: Optional[StrictStr] = Field(None, alias="nftTokenId", description="The NFT token ID.")
    token: Token = Field(...)
    update_date: datetime = Field(..., alias="updateDate", description="Date and time the resource was last updated, in ISO-8601 UTC format.")
    __properties = ["amount", "metadata", "nftTokenId", "token", "updateDate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Nft:
        """Create an instance of Nft from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of token
        if self.token:
            _dict['token'] = self.token.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Nft:
        """Create an instance of Nft from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Nft.parse_obj(obj)

        _obj = Nft.parse_obj({
            "amount": obj.get("amount"),
            "metadata": obj.get("metadata"),
            "nft_token_id": obj.get("nftTokenId"),
            "token": Token.from_dict(obj.get("token")) if obj.get("token") is not None else None,
            "update_date": obj.get("updateDate")
        })
        return _obj


