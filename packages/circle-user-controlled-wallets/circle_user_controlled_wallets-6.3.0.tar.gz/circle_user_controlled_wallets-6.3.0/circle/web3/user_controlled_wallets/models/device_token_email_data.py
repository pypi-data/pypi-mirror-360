# coding: utf-8

"""
    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class DeviceTokenEmailData(BaseModel):
    """
    DeviceTokenEmailData
    """
    device_token: StrictStr = Field(..., alias="deviceToken", description="JWT token format. Used in social / verifyOTP APIs.")
    device_encryption_key: Optional[StrictStr] = Field(None, alias="deviceEncryptionKey", description="Used to encrypt request body before sending to backend server.")
    otp_token: Optional[StrictStr] = Field(None, alias="otpToken", description="The OTP is bound on a user and purpose, and uses this value to identify the request.")
    __properties = ["deviceToken", "deviceEncryptionKey", "otpToken"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DeviceTokenEmailData:
        """Create an instance of DeviceTokenEmailData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DeviceTokenEmailData:
        """Create an instance of DeviceTokenEmailData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DeviceTokenEmailData.parse_obj(obj)

        _obj = DeviceTokenEmailData.parse_obj({
            "device_token": obj.get("deviceToken"),
            "device_encryption_key": obj.get("deviceEncryptionKey"),
            "otp_token": obj.get("otpToken")
        })
        return _obj


