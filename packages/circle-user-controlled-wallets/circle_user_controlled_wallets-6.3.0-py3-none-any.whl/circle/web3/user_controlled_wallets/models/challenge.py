# coding: utf-8

"""
    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, validator

class Challenge(BaseModel):
    """
    Challenge
    """
    id: StrictStr = Field(..., description="System-generated unique identifier of the resource.")
    correlation_ids: Optional[conlist(StrictStr)] = Field(None, alias="correlationIds", description="For type CREATE_WALLET, the wallet id associated with the request. For types CREATE_TRANSACTION, ACCELERATE_TRANSACTION, and CANCEL_TRANSACTION, the transaction id associated with the request.  ")
    error_code: Optional[StrictInt] = Field(None, alias="errorCode", description="Indicates the failure reason of a challenge. Only present for challenges in FAILED status.")
    error_message: Optional[StrictStr] = Field(None, alias="errorMessage", description="Description of the error or error reason. Only present for challenges in FAILED status.")
    status: StrictStr = Field(...)
    type: StrictStr = Field(..., description="The challenge type")
    __properties = ["id", "correlationIds", "errorCode", "errorMessage", "status", "type"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('PENDING', 'IN_PROGRESS', 'COMPLETE', 'FAILED', 'EXPIRED'):
            raise ValueError("must be one of enum values ('PENDING', 'IN_PROGRESS', 'COMPLETE', 'FAILED', 'EXPIRED')")
        return value

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('', 'INITIALIZE', 'SET_PIN', 'CHANGE_PIN', 'SET_SECURITY_QUESTIONS', 'CREATE_WALLET', 'RESTORE_PIN', 'CREATE_TRANSACTION', 'ACCELERATE_TRANSACTION', 'CANCEL_TRANSACTION', 'CONTRACT_EXECUTION', 'WALLET_UPGRADE', 'SIGN_MESSAGE', 'SIGN_TYPEDDATA', 'SIGN_TRANSACTION'):
            raise ValueError("must be one of enum values ('', 'INITIALIZE', 'SET_PIN', 'CHANGE_PIN', 'SET_SECURITY_QUESTIONS', 'CREATE_WALLET', 'RESTORE_PIN', 'CREATE_TRANSACTION', 'ACCELERATE_TRANSACTION', 'CANCEL_TRANSACTION', 'CONTRACT_EXECUTION', 'WALLET_UPGRADE', 'SIGN_MESSAGE', 'SIGN_TYPEDDATA', 'SIGN_TRANSACTION')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Challenge:
        """Create an instance of Challenge from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Challenge:
        """Create an instance of Challenge from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Challenge.parse_obj(obj)

        _obj = Challenge.parse_obj({
            "id": obj.get("id"),
            "correlation_ids": obj.get("correlationIds"),
            "error_code": obj.get("errorCode"),
            "error_message": obj.get("errorMessage"),
            "status": obj.get("status"),
            "type": obj.get("type")
        })
        return _obj


