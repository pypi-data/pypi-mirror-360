[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"


[project]
name = "swmm-api"
description = "API for reading, manipulating and running US-EPA-SWMM-Projects"
readme = "README.md"
authors = [
    { name = "Markus Pichler", email = "markus.pichler@tugraz.at" }
]
requires-python = ">=3.8"
keywords = ["swmm", "environment", "civil_engineering", "api"]
license = { text = "MIT" }
classifiers = [
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Natural Language :: English",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Hydrology",
    "Intended Audience :: Science/Research",
]
dependencies = [
    "pandas",  # and its requirement "numpy"
    "tqdm",
    "packaging"
]
dynamic = ["version"]

[tool.setuptools.dynamic]
version = { attr = "swmm_api.__version__" }

[project.optional-dependencies]
macros = ["networkx", "pyarrow", "matplotlib", "SWMM_xsections_shape_generator", "pyswmm"]
gis = ["Shapely", "pyproj", "Rtree", "geopandas"]
full = ["swmm-api[macros,gis]"]
docs = ["swmm-api[full]", "sphinx", "nbsphinx", "recommonmark", "myst-parser", "pydata_sphinx_theme", 'sphinx-codeautolink', 'sphinx-favicon']
testing = ["swmm-api[full]", "pytest"]

[project.urls]
Documentation = "https://markuspichler.gitlab.io/swmm_api"
Changelog = "https://gitlab.com/markuspichler/swmm_api/-/blob/main/CHANGELOG.md"
homepage = "https://gitlab.com/markuspichler/swmm_api"
funding = "https://www.buymeacoffee.com/MarkusP"
Issues = "https://gitlab.com/markuspichler/swmm_api/-/issues"

[tool.setuptools.packages.find]
exclude = ['joss_paper*', 'docker_website*', 'documentation*', 'examples*', 'tests*']
namespaces = false


# https://github.com/python-semantic-release/python-semantic-release
[tool.semantic_release]
version_variables = ['swmm_api/__init__.py:__version__'] # "setup.py:__version__" #
#upload_to_pypi = true
hvcs = 'gitlab'
branch = 'main'
#major_on_zero = false
version_source = 'commit' # 'tag' 'tag_only' 'commit'
commit_subject = 'New version v{version} ðŸ”¥'

# ---
assets = []
build_command_env = []
commit_message = "{version}\n\nAutomatically generated by python-semantic-release"
commit_parser = "angular"
logging_use_named_masks = false
major_on_zero = false
allow_zero_version = true
no_git_verify = false
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "main"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
exclude_commit_patterns = []
mode = "update"
insertion_flag = "<!--next-version-placeholder-->"
template_dir = "templates"

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"
output_format = "md"

[tool.semantic_release.changelog.environment]
block_start_string = "{%"
block_end_string = "%}"
variable_start_string = "{{"
variable_end_string = "}}"
comment_start_string = "{#"
comment_end_string = "#}"
trim_blocks = false
lstrip_blocks = false
newline_sequence = "\n"
keep_trailing_newline = false
extensions = []
autoescape = false

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
default_bump_level = 0

[tool.semantic_release.remote]
name = "origin"
type = "gitlab"
ignore_token_for_push = false
insecure = false

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
