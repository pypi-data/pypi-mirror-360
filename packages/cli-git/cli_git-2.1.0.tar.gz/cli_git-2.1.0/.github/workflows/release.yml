name: Release

on:
  push:
    branches: [main]

permissions:
  contents: write
  id-token: write

concurrency:
  group: release
  cancel-in-progress: true

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      # 1. 전체 히스토리 체크아웃
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Git 사용자 정보 설정
      - name: Configure Git user
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # 3. Python/uv 설치
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      # 4. 의존성 설치
      - name: Install dependencies
        run: uv sync --all-extras --dev

      # 5. semantic-release version 단계
      - name: Python Semantic Release Version
        id: version
        run: |
          BEFORE_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if uv run semantic-release version; then
            AFTER_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [ "$BEFORE_TAG" != "$AFTER_TAG" ]; then
              echo "released=true"  >> "$GITHUB_OUTPUT"
              echo "tag=$AFTER_TAG" >> "$GITHUB_OUTPUT"
            else
              echo "released=false" >> "$GITHUB_OUTPUT"
              echo "No new version released."
            fi
          else
            echo "released=false" >> "$GITHUB_OUTPUT"
            echo "semantic-release version command failed."
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 6. 배포용 패키지 빌드
      - name: Build dist
        if: steps.version.outputs.released == 'true'
        run: uv run python -m build

      # 7. 패키지 체크
      - name: Check package
        if: steps.version.outputs.released == 'true'
        run: uv run twine check dist/*

      # 8. TestPyPI 업로드
      - name: Upload to TestPyPI
        if: steps.version.outputs.released == 'true'
        run: uv run twine upload
          --repository-url https://test.pypi.org/legacy/
          --skip-existing dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}

      # 9. PyPI 업로드 (태그가 rc나 beta가 아닐 때만)
      - name: Upload to PyPI
        if: |
          steps.version.outputs.released == 'true' &&
          !contains(steps.version.outputs.tag, '-rc') &&
          !contains(steps.version.outputs.tag, '-beta')
        run: uv run twine upload --skip-existing dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
