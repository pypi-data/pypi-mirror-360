# -*- coding: utf-8 -*-
"""ENVM_20250706_00.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UrawHf1ojJNrgAM5QNEMHXI7DFfI3WrE

# EnvFileManager
ipynbファイルをenvファイルに変換します


```
2025/02/20 0.1.0 完成
2025/03/02 PyPIへアップロード
2025/03/03 0.1.1 GitHubのDebugHelperではなく、PyPIのを使うようにした。
2025/03/03 0.2.0 EnvManagerも一緒にPyPIにアップロードするようにした。
2025/03/03 0.1.0 アップロードできなくなったので、番号を振り直した。
2025/03/03 0.1.1 細かい部分で改良
2025/03/11 0.2.0 get_env_varでbool値がうまく返せないエラーがあったので修正
2025/03/11 0.2.6 PyPIへのアップロードを失敗したため、番号を変える。
2025/04/06 1.0.0 公開に向け、.env ファイルの保存先フォルダを引数 env_dir で指定できるようにした。
2025/04/06 1.0.2 バグ取り
2025/04/06 1.0.3 改良
2025/04/08 1.1.0 ScriptManager 追加
2025/05/11 1.2.0 loggingに対応
2025/05/12 1.3.0 logging対応強化
2025/05/13 1.3.1 バグ取り
2025/07/06 1.3.2 バグ取り

```


---

# EnvFileManager

## 1. logging 定義と、GDrive 接続
"""

# @title a. logging 定義と、GDrive 接続
# @title a. logging定義
import logging
from google.colab import drive

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
    force=True
)

drive.mount('/content/drive')

"""## 2. モジュール定義"""

# @title a. EnvFileManager 定義

# ────────────────────────────────────────────────────────────────
# 各モジュール用logger設定
import logging
logger = logging.getLogger(__name__)
# ────────────────────────────────────────────────────────────────

import os, yaml, json
from pathlib import Path

Pid_env_folder = Path( "/content/drive/MyDrive/env" )
Pid_env_config_file = Path( "config.yaml" )

class EnvFileManager:
    def __init__(self, ipynb_file, config_path = Pid_env_folder / Pid_env_config_file ):
        """
        環境変数を分類して.envファイルに保存する

        :param ipynb_file : 変換する ipynb ファイルのパス
        :param config_path: 抽出変数ルール定義ファイル
        """
        if not Path( config_path ).exists():
            raise FileNotFoundError(f"{config_path} が見つかりません。")

        self.ipynb_file = ipynb_file
        self.config = self.load_config(config_path)

        logging.info( f"EnvFileManager 初期化" )
        logging.info( f"対象のノートブック: {self.ipynb_file}" )

        if not os.path.exists( Pid_env_folder ):
            os.makedirs( Pid_env_folder )
            logging.info( "envファイル保存用のフォルダを作成しました" )
        if not os.path.exists(self.ipynb_file):
            raise FileNotFoundError(f"{self.ipynb_file} が見つかりません。")
        else:
            logging.info( f"{self.ipynb_file} が見つかりました" )

    def load_config(self, config_path):
        """YAMLファイルからプレフィックスの設定を読み込む"""
        with open(config_path, "r") as file:
            return yaml.safe_load(file)

    def extract_env_from_ipynb(self):
        """特定のコメント行で囲まれた部分の環境変数を抽出し、適切な.envファイルに分類"""
        env_vars = {}  # { "ファイル名": [変数リスト] }
        start_marker = "# START_ENV"
        end_marker = "# END_ENV"
        within_section = False

        i = 0
        with open(self.ipynb_file, "r", encoding="utf-8") as f:
            notebook = json.load(f)
            for cell in notebook.get("cells", []):
                if cell.get("cell_type") == "code":
                    for line in cell.get("source", []):
                        i += 1
                        logging.info( f"No.{ i }: {line}" )
                        if start_marker in line:
                            within_section = True
                            logging.info( "Start marker" )
                            continue
                        if end_marker in line:
                            within_section = False
                            logging.info( "End marker" )
                            continue
                        if within_section:
                            if "os.environ" in line:  # 環境変数の定義
                                env_vars.setdefault( Path( Pid_env_folder ) / Path( "env_settings.env" ), []).append(line)
                                logging.info( f"✏️ 次のファイルに書き出します : settings_env.env" )
                            else:  # 通常の変数定義
                                for prefix, env_file in self.config["env_rules"].items():
                                    if line.strip().startswith(prefix):
                                        env_vars.setdefault(Path( Pid_env_folder ) / Path( env_file ), []).append(line)
                                        logging.info( f"✒️ 次のファイルに書き出します : { prefix }" )
                                        break
                                else:
                                    env_vars.setdefault(self.config["env_rules"]["default"], []).append(line)

        # 分類した環境変数を保存
        for file, lines in env_vars.items():
            with open(file, "w", encoding="utf-8") as f:
                f.writelines(lines)
            logging.info( f"✅ {file} に環境変数を保存")

# @title b. EnvManager 定義

# ────────────────────────────────────────────────────────────────
# 各モジュール用logger設定
import logging
logger = logging.getLogger(__name__)
# ────────────────────────────────────────────────────────────────

import os, sys, yaml
from pathlib import Path

get_ipython().system("pip install python-dotenv")
from dotenv import load_dotenv, find_dotenv


class EnvManager:
    """
    複数の .env ファイルを読み込み、環境変数へのアクセスを容易にするクラス。
    特に settings_git.env を最初に読み込み、GitHub 関連の情報（git_username, git_PersonalAccessToken）
    を利用可能にします。
    """
    def __init__(self, env_dirs = [ "./", "/content/drive/MyDrive/env/" ], env_files = [ "settings_ven.env" ] ):
        """
        初期設定
        args:
            env_dir( list[ str ] ) : .env ファイルが格納されているフォルダ( "/content/drive/MyDrive/env" を推奨)
            env_files( list[ str ] ) : 読み込む .env ファイルのリスト（settings_git.env を含めることを推奨）
        """

        self.env_dirs  = env_dirs  if env_dirs is not None else []
        self.env_files = env_files if env_files is not None else []
        logging.info( f"env_dirs  :{ self.env_dirs  }" )
        logging.info( f"env_files :{ self.env_files }" )
        self.load_all_envs()

    def load_all_envs(self):
        """指定された全ての .env ファイルをロードする"""
        for env_dir in self.env_dirs:
            for env_file in self.env_files:
                env_path = Path( env_dir ).joinpath( env_file )
                if env_path.exists():
                    load_dotenv( dotenv_path = env_path, override = False )
                    logging.info(f"✅ { env_path } が正常にロードされました。" )
                else:
                    logging.info(f"❌ { env_path } が見つかりません。" )

    def get_env_var(self, var_name, type="string"):
        """
        環境変数の値を返す
        Supported types: "string", "int", "float", "bool",
                         "string_array", "int_array", "float_array"
        """
        allowed_types = ["string", "int", "float", "bool", "string_array", "int_array", "float_array"]
        if type not in allowed_types:
            raise ValueError(f"Invalid type '{type}'. Allowed types are {allowed_types}.")

        # まず環境変数の生の文字列を取得
        value = os.getenv(var_name, "")

        if type == "bool":
            if value.lower() == "true":
                return True
            elif value.lower() == "false":
                return False
            else:
                raise ValueError(f"Invalid boolean value for '{var_name}': {value}")
        elif type == "string":
            return str( value )
        elif type == "int":
            return int(value) if value else 0
        elif type == "float":
            return float(value) if value else 0.0
        elif type in ["string_array", "int_array", "float_array"]:
            # 配列型の場合、環境変数の値はリストリテラル（例: '["abc", "def"]'）として保存されている前提
            try:
                parsed = list.literal_eval(value)
                if not isinstance(parsed, list):
                    raise ValueError(f"Value for '{var_name}' is not a list.")
            except Exception as e:
                raise ValueError(f"Unable to parse array value for '{var_name}': {value}. Error: {e}")

            if type == "string_array":
                return [str(item) for item in parsed]
            elif type == "int_array":
                return [int(item) for item in parsed]
            elif type == "float_array":
                return [float(item) for item in parsed]
        else:
            raise ValueError("Unsupported type")

"""## 3. テスト"""

# @title a. EnvFileManager テスト

# ────────────────────────────────────────────────────────────────
# 各モジュール用logger設定
import logging
logger = logging.getLogger(__name__)
# ────────────────────────────────────────────────────────────────

if __name__ == "__main__":
    manager = EnvFileManager( ipynb_file = "/content/drive/MyDrive/Colab Notebooks/EVED_20250508_00.ipynb" )
    manager.extract_env_from_ipynb()
    # # `.ipynb` から `.env` を作成
    # if manager.extract_env_from_ipynb():from google.colab import drive
    # drive.mount('/content/drive')

    #     # `.env` をカレントディレクトリへコピー
    #     manager.copy_env_to_current_dir()

# @title b. EnvManagerテスト

# ────────────────────────────────────────────────────────────────
# 各モジュール用logger設定
# import logging
# logger = logging.getLogger(__name__)
# ────────────────────────────────────────────────────────────────
if __name__ == "__main__":
    envmanager = EnvManager( env_files = [ "settings_ven.env", "settings_kom.env" ] )
    print( f"{ envmanager.get_env_var( 'Ven_base_folder' ) }" )
    print( f"{ envmanager.get_env_var( 'Ven_app_folder' ) }" )
    print( f"{ envmanager.get_env_var( 'Kom_repo_url' ) }" )
    print( f"{ envmanager.get_env_var( 'Kom_sd_scripts_url' ) }" )