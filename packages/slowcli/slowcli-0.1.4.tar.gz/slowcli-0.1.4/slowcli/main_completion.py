#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK
"""
Lightweight completion entrypoint for main.py
Generated by FastEntry - DO NOT EDIT MANUALLY
"""

import os
import sys
from pathlib import Path

def is_completion_request():
    """Check if this is an argcomplete completion request"""
    return os.environ.get('_ARGCOMPLETE') == '1'

def handle_completion_fast():
    """Handle completion requests with minimal imports"""
    try:
        # Try to use snapshot first
        snapshot_path = Path(__file__).parent / "main_snapshot.json"
        if snapshot_path.exists():
            from fastentry import FastEntry
            fast_entry = FastEntry(str(snapshot_path))

            # Create minimal parser for completion
            import argparse
            parser = argparse.ArgumentParser()
            parser.add_argument('-h', '--help', action='help', help='show this help message and exit')

            if fast_entry.autocomplete(parser):
                return

        # Fallback to regular argcomplete
        import argcomplete
        parser = argparse.ArgumentParser()
        parser.add_argument('-h', '--help', action='help', help='show this help message and exit')
        argcomplete.autocomplete(parser)

    except Exception as e:
        # Final fallback: import the original CLI (slow but works)
        print(f"Fast completion failed: {e}", file=sys.stderr)
        from slowcli.main import main
        main()

def main():
    """Main entry point"""
    if is_completion_request():
        handle_completion_fast()
        return

    # Import and run the original CLI
    from slowcli.main import main
    main()

if __name__ == "__main__":
    main()
