# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.config_values import ConfigValues
from ..types.source_connection import SourceConnection
from ..types.source_connection_job import SourceConnectionJob
from ..types.source_connection_list_item import SourceConnectionListItem
from .raw_client import AsyncRawSourceConnectionsClient, RawSourceConnectionsClient
from .types.source_connection_update_auth_fields import SourceConnectionUpdateAuthFields

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class SourceConnectionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawSourceConnectionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawSourceConnectionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawSourceConnectionsClient
        """
        return self._raw_client

    def list_source_connections(
        self,
        *,
        collection: typing.Optional[str] = None,
        skip: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[SourceConnectionListItem]:
        """
        List all source connections for the organization.

        Args:
            db: The database session
            collection: The collection to filter by
            skip: The number of connections to skip
            limit: The number of connections to return
            auth_context: The current authentication context

        Returns:
            A list of source connection list items with essential information

        Parameters
        ----------
        collection : typing.Optional[str]
            Filter by collection

        skip : typing.Optional[int]

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[SourceConnectionListItem]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
            organization_id="YOUR_ORGANIZATION_ID",
        )
        client.source_connections.list_source_connections()
        """
        _response = self._raw_client.list_source_connections(
            collection=collection, skip=skip, limit=limit, request_options=request_options
        )
        return _response.data

    def create_source_connection(
        self,
        *,
        name: str,
        short_name: str,
        description: typing.Optional[str] = OMIT,
        config_fields: typing.Optional[ConfigValues] = OMIT,
        collection: typing.Optional[str] = OMIT,
        cron_schedule: typing.Optional[str] = OMIT,
        auth_fields: typing.Optional[ConfigValues] = OMIT,
        sync_immediately: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SourceConnection:
        """
        Create a new source connection.

        This endpoint creates:
        1. An integration credential with the provided auth fields
        2. A collection if not provided
        3. The source connection
        4. A sync configuration and DAG
        5. A sync job if immediate execution is requested

        Args:
            db: The database session
            source_connection_in: The source connection to create
            auth_context: The current authentication context
            background_tasks: Background tasks for async operations

        Returns:
            The created source connection

        Parameters
        ----------
        name : str
            Name of the source connection

        short_name : str

        description : typing.Optional[str]

        config_fields : typing.Optional[ConfigValues]

        collection : typing.Optional[str]

        cron_schedule : typing.Optional[str]

        auth_fields : typing.Optional[ConfigValues]

        sync_immediately : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnection
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
            organization_id="YOUR_ORGANIZATION_ID",
        )
        client.source_connections.create_source_connection(
            name="My Stripe Connection",
            description="Production Stripe account for payment data",
            short_name="stripe",
            collection="finance-data",
            cron_schedule="0 */6 * * *",
            auth_fields={"api_key": "sk_live_51H..."},
            sync_immediately=True,
        )
        """
        _response = self._raw_client.create_source_connection(
            name=name,
            short_name=short_name,
            description=description,
            config_fields=config_fields,
            collection=collection,
            cron_schedule=cron_schedule,
            auth_fields=auth_fields,
            sync_immediately=sync_immediately,
            request_options=request_options,
        )
        return _response.data

    def get_source_connection(
        self,
        source_connection_id: str,
        *,
        show_auth_fields: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SourceConnection:
        """
        Get a specific source connection by ID.

        Args:
            db: The database session
            source_connection_id: The ID of the source connection
            show_auth_fields: Whether to show the auth fields, default is False
            auth_context: The current authentication context

        Returns:
            The source connection

        Parameters
        ----------
        source_connection_id : str

        show_auth_fields : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnection
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
            organization_id="YOUR_ORGANIZATION_ID",
        )
        client.source_connections.get_source_connection(
            source_connection_id="source_connection_id",
        )
        """
        _response = self._raw_client.get_source_connection(
            source_connection_id, show_auth_fields=show_auth_fields, request_options=request_options
        )
        return _response.data

    def update_source_connection(
        self,
        source_connection_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        auth_fields: typing.Optional[SourceConnectionUpdateAuthFields] = OMIT,
        config_fields: typing.Optional[ConfigValues] = OMIT,
        cron_schedule: typing.Optional[str] = OMIT,
        connection_id: typing.Optional[str] = OMIT,
        white_label_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SourceConnection:
        """
        Update a source connection.

        Args:
            db: The database session
            source_connection_id: The ID of the source connection to update
            source_connection_in: The updated source connection data
            auth_context: The current authentication context

        Returns:
            The updated source connection

        Parameters
        ----------
        source_connection_id : str

        name : typing.Optional[str]
            Name of the source connection

        description : typing.Optional[str]

        auth_fields : typing.Optional[SourceConnectionUpdateAuthFields]

        config_fields : typing.Optional[ConfigValues]

        cron_schedule : typing.Optional[str]

        connection_id : typing.Optional[str]

        white_label_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnection
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
            organization_id="YOUR_ORGANIZATION_ID",
        )
        client.source_connections.update_source_connection(
            source_connection_id="source_connection_id",
        )
        """
        _response = self._raw_client.update_source_connection(
            source_connection_id,
            name=name,
            description=description,
            auth_fields=auth_fields,
            config_fields=config_fields,
            cron_schedule=cron_schedule,
            connection_id=connection_id,
            white_label_id=white_label_id,
            request_options=request_options,
        )
        return _response.data

    def delete_source_connection(
        self,
        source_connection_id: str,
        *,
        delete_data: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SourceConnection:
        """
        Delete a source connection and all related components.

        Args:
            db: The database session
            source_connection_id: The ID of the source connection to delete
            delete_data: Whether to delete the associated data in destinations
            auth_context: The current authentication context

        Returns:
            The deleted source connection

        Parameters
        ----------
        source_connection_id : str

        delete_data : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnection
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
            organization_id="YOUR_ORGANIZATION_ID",
        )
        client.source_connections.delete_source_connection(
            source_connection_id="source_connection_id",
        )
        """
        _response = self._raw_client.delete_source_connection(
            source_connection_id, delete_data=delete_data, request_options=request_options
        )
        return _response.data

    def run_source_connection(
        self,
        source_connection_id: str,
        *,
        access_token: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SourceConnectionJob:
        """
        Trigger a sync run for a source connection.

        Args:
            db: The database session
            source_connection_id: The ID of the source connection to run
            access_token: Optional access token to use instead of stored credentials
            auth_context: The current authentication context
            background_tasks: Background tasks for async operations

        Returns:
            The created sync job

        Parameters
        ----------
        source_connection_id : str

        access_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnectionJob
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
            organization_id="YOUR_ORGANIZATION_ID",
        )
        client.source_connections.run_source_connection(
            source_connection_id="source_connection_id",
        )
        """
        _response = self._raw_client.run_source_connection(
            source_connection_id, access_token=access_token, request_options=request_options
        )
        return _response.data

    def list_source_connection_jobs(
        self, source_connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[SourceConnectionJob]:
        """
        List all sync jobs for a source connection.

        Args:
            db: The database session
            source_connection_id: The ID of the source connection
            auth_context: The current authentication context

        Returns:
            A list of sync jobs

        Parameters
        ----------
        source_connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[SourceConnectionJob]
            Successful Response

        Examples
        --------
        from airweave import AirweaveSDK

        client = AirweaveSDK(
            api_key="YOUR_API_KEY",
            organization_id="YOUR_ORGANIZATION_ID",
        )
        client.source_connections.list_source_connection_jobs(
            source_connection_id="source_connection_id",
        )
        """
        _response = self._raw_client.list_source_connection_jobs(source_connection_id, request_options=request_options)
        return _response.data


class AsyncSourceConnectionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawSourceConnectionsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawSourceConnectionsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawSourceConnectionsClient
        """
        return self._raw_client

    async def list_source_connections(
        self,
        *,
        collection: typing.Optional[str] = None,
        skip: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[SourceConnectionListItem]:
        """
        List all source connections for the organization.

        Args:
            db: The database session
            collection: The collection to filter by
            skip: The number of connections to skip
            limit: The number of connections to return
            auth_context: The current authentication context

        Returns:
            A list of source connection list items with essential information

        Parameters
        ----------
        collection : typing.Optional[str]
            Filter by collection

        skip : typing.Optional[int]

        limit : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[SourceConnectionListItem]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
            organization_id="YOUR_ORGANIZATION_ID",
        )


        async def main() -> None:
            await client.source_connections.list_source_connections()


        asyncio.run(main())
        """
        _response = await self._raw_client.list_source_connections(
            collection=collection, skip=skip, limit=limit, request_options=request_options
        )
        return _response.data

    async def create_source_connection(
        self,
        *,
        name: str,
        short_name: str,
        description: typing.Optional[str] = OMIT,
        config_fields: typing.Optional[ConfigValues] = OMIT,
        collection: typing.Optional[str] = OMIT,
        cron_schedule: typing.Optional[str] = OMIT,
        auth_fields: typing.Optional[ConfigValues] = OMIT,
        sync_immediately: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SourceConnection:
        """
        Create a new source connection.

        This endpoint creates:
        1. An integration credential with the provided auth fields
        2. A collection if not provided
        3. The source connection
        4. A sync configuration and DAG
        5. A sync job if immediate execution is requested

        Args:
            db: The database session
            source_connection_in: The source connection to create
            auth_context: The current authentication context
            background_tasks: Background tasks for async operations

        Returns:
            The created source connection

        Parameters
        ----------
        name : str
            Name of the source connection

        short_name : str

        description : typing.Optional[str]

        config_fields : typing.Optional[ConfigValues]

        collection : typing.Optional[str]

        cron_schedule : typing.Optional[str]

        auth_fields : typing.Optional[ConfigValues]

        sync_immediately : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnection
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
            organization_id="YOUR_ORGANIZATION_ID",
        )


        async def main() -> None:
            await client.source_connections.create_source_connection(
                name="My Stripe Connection",
                description="Production Stripe account for payment data",
                short_name="stripe",
                collection="finance-data",
                cron_schedule="0 */6 * * *",
                auth_fields={"api_key": "sk_live_51H..."},
                sync_immediately=True,
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.create_source_connection(
            name=name,
            short_name=short_name,
            description=description,
            config_fields=config_fields,
            collection=collection,
            cron_schedule=cron_schedule,
            auth_fields=auth_fields,
            sync_immediately=sync_immediately,
            request_options=request_options,
        )
        return _response.data

    async def get_source_connection(
        self,
        source_connection_id: str,
        *,
        show_auth_fields: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SourceConnection:
        """
        Get a specific source connection by ID.

        Args:
            db: The database session
            source_connection_id: The ID of the source connection
            show_auth_fields: Whether to show the auth fields, default is False
            auth_context: The current authentication context

        Returns:
            The source connection

        Parameters
        ----------
        source_connection_id : str

        show_auth_fields : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnection
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
            organization_id="YOUR_ORGANIZATION_ID",
        )


        async def main() -> None:
            await client.source_connections.get_source_connection(
                source_connection_id="source_connection_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_source_connection(
            source_connection_id, show_auth_fields=show_auth_fields, request_options=request_options
        )
        return _response.data

    async def update_source_connection(
        self,
        source_connection_id: str,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        auth_fields: typing.Optional[SourceConnectionUpdateAuthFields] = OMIT,
        config_fields: typing.Optional[ConfigValues] = OMIT,
        cron_schedule: typing.Optional[str] = OMIT,
        connection_id: typing.Optional[str] = OMIT,
        white_label_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SourceConnection:
        """
        Update a source connection.

        Args:
            db: The database session
            source_connection_id: The ID of the source connection to update
            source_connection_in: The updated source connection data
            auth_context: The current authentication context

        Returns:
            The updated source connection

        Parameters
        ----------
        source_connection_id : str

        name : typing.Optional[str]
            Name of the source connection

        description : typing.Optional[str]

        auth_fields : typing.Optional[SourceConnectionUpdateAuthFields]

        config_fields : typing.Optional[ConfigValues]

        cron_schedule : typing.Optional[str]

        connection_id : typing.Optional[str]

        white_label_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnection
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
            organization_id="YOUR_ORGANIZATION_ID",
        )


        async def main() -> None:
            await client.source_connections.update_source_connection(
                source_connection_id="source_connection_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update_source_connection(
            source_connection_id,
            name=name,
            description=description,
            auth_fields=auth_fields,
            config_fields=config_fields,
            cron_schedule=cron_schedule,
            connection_id=connection_id,
            white_label_id=white_label_id,
            request_options=request_options,
        )
        return _response.data

    async def delete_source_connection(
        self,
        source_connection_id: str,
        *,
        delete_data: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SourceConnection:
        """
        Delete a source connection and all related components.

        Args:
            db: The database session
            source_connection_id: The ID of the source connection to delete
            delete_data: Whether to delete the associated data in destinations
            auth_context: The current authentication context

        Returns:
            The deleted source connection

        Parameters
        ----------
        source_connection_id : str

        delete_data : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnection
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
            organization_id="YOUR_ORGANIZATION_ID",
        )


        async def main() -> None:
            await client.source_connections.delete_source_connection(
                source_connection_id="source_connection_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete_source_connection(
            source_connection_id, delete_data=delete_data, request_options=request_options
        )
        return _response.data

    async def run_source_connection(
        self,
        source_connection_id: str,
        *,
        access_token: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> SourceConnectionJob:
        """
        Trigger a sync run for a source connection.

        Args:
            db: The database session
            source_connection_id: The ID of the source connection to run
            access_token: Optional access token to use instead of stored credentials
            auth_context: The current authentication context
            background_tasks: Background tasks for async operations

        Returns:
            The created sync job

        Parameters
        ----------
        source_connection_id : str

        access_token : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        SourceConnectionJob
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
            organization_id="YOUR_ORGANIZATION_ID",
        )


        async def main() -> None:
            await client.source_connections.run_source_connection(
                source_connection_id="source_connection_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.run_source_connection(
            source_connection_id, access_token=access_token, request_options=request_options
        )
        return _response.data

    async def list_source_connection_jobs(
        self, source_connection_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.List[SourceConnectionJob]:
        """
        List all sync jobs for a source connection.

        Args:
            db: The database session
            source_connection_id: The ID of the source connection
            auth_context: The current authentication context

        Returns:
            A list of sync jobs

        Parameters
        ----------
        source_connection_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[SourceConnectionJob]
            Successful Response

        Examples
        --------
        import asyncio

        from airweave import AsyncAirweaveSDK

        client = AsyncAirweaveSDK(
            api_key="YOUR_API_KEY",
            organization_id="YOUR_ORGANIZATION_ID",
        )


        async def main() -> None:
            await client.source_connections.list_source_connection_jobs(
                source_connection_id="source_connection_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.list_source_connection_jobs(
            source_connection_id, request_options=request_options
        )
        return _response.data
