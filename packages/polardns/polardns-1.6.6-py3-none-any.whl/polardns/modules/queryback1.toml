[module]
name = "queryback1"
type = "feature"
info = "Query Reflection"
short = "Query reflection back to sender"
category = "Empty responses"
desc = '''
Instead of returning a DNS response, this module sends back the original query exactly as it was received.

This behavior is likely to result in unexpected errors, especially when targetting resolvers.
'''
format = '''
**`queryback1.yourdomain.com`**

This module has no parameters.
'''
seealso = "close, timeout, empty1, empty2, empty3, empty4, empty5, empty6, empty7, queryback2, queryback3, queryback4"

[[module.example]]
description = "In this example, we see the effects of receiving a query instead of a response. The client (dig) struggles to interpret the response, which lacks any actual response data. We see two different warnings and no answer:"
command = "dig queryback1.yourdomain.com @127.0.0.1"

[[module.example]]
description = "In TCP mode, the results are the same as in the previous example in UDP mode, leading to multiple warnings with no answer:"
command = "dig queryback1.yourdomain.com @127.0.0.1 +tcp"

[[module.example]]
description = "In this example, we also request to generate a new Transaction ID in the response (using the [newid] modifier). This could potentially cause further confusion for a resolver receiving such a response:"
command = "dig queryback1.newid.yourdomain.com @127.0.0.1"

[module.code]
python = '''
if req.first_subdomain.startswith("queryback1"):
   # Domain starts with "queryback1", let's send back the same query
   buffer = resp.ID + req.RAW[2:]
   # log and send
   log("sending back the same query")
   send_buf(self, buffer)
   #####################################################################
'''
