//
// Colour maps
//

import {
  DEFAULT_CATEGORICAL_LUT_CONFIG,
  DEFAULT_LUT_CONFIG,
} from "./constants.js";

// By default, THREE.js only includes 4 colour maps: 'rainbow', 'cooltowarm',
// 'blackbody', 'grayscale'.
//
// This adds more, building on some of the ones built into matplotlib.

// Pastel 1, see https://vega.github.io/vega/docs/schemes/#pastel1
const pastel1Colours = [
  0xfbb4ae, 0xb3cde3, 0xccebc5, 0xdecbe4, 0xfed9a6, 0xffffcc, 0xe5d8bd,
  0xfddaec, 0xf2f2f2,
];
const pastel1CM = pastel1Colours.map((c, i) => [i / 8, c]);

// Pastel 2, see https://vega.github.io/vega/docs/schemes/#pastel2
const pastel2Colours = [
  0xb3e2cd, 0xfddbc7, 0xcbd5e8, 0xf4cae4, 0xe6f5c9, 0xfff2ae, 0xf1e2cc,
  0xcccccc,
];
const pastel2CM = pastel2Colours.map((c, i) => [i / 7, c]);

// Tableau 10, see https://vega.github.io/vega/docs/schemes/#tableau10
// prettier-ignore
const tableau10Colours = [
  0x4E79A7, 0xF28E2B, 0xE15759, 0x76B7B2, 0x59A14F, 0xEDC948, 0xB07AA1,
  0xFF9DA7, 0x9C755F, 0xBAB0AC
];
const tableau10CM = tableau10Colours.map((c, i) => [i / 9, c]);

// Tableau 20, see https://vega.github.io/vega/docs/schemes/#tableau20
// prettier-ignore
const tableau20Colours = [
  0x4E79A7, 0xA0CBE8, 0xF28E2B, 0xFFBE7D, 0x59A14F, 0x8CD17D, 0xB6992D,
  0xF1CE63, 0x499894, 0x86BCB6, 0xE15759, 0xFF9D9A, 0x79706E, 0xB0B0AC,
  0xD37295, 0xFABFD2, 0xB07AA1, 0xD4A6C8, 0x9D7660, 0xD7B5A6,
];
const tableau20CM = tableau20Colours.map((c, i) => [i / 19, c]);

const tableau20bColours = [
  0x393b79, 0x5254a3, 0x6b6ecf, 0x9c9ede, 0x637939, 0x8ca252, 0xb5cf6b,
  0xcedb9c, 0x8c6d31, 0xbd9e39, 0xe7ba52, 0xe7cb94, 0x843c39, 0xad494a,
  0xd6616b, 0xe7969c, 0x7b4173, 0xa55194, 0xce6dbd, 0xde9ed6,
];
const tableau20bCM = tableau20bColours.map((c, i) => [i / 19, c]);

const tableau20cColours = [
  0x3182bd, 0x6baed6, 0x9ecae1, 0xc6dbef, 0xe6550d, 0xfd8d3c, 0xfdae6b,
  0xfdd0a2, 0x31a354, 0x74c476, 0xa1d99b, 0xc7e9c0, 0x756bb1, 0x9e9ac8,
  0xbcbddc, 0xdadaeb, 0x636363, 0x969696, 0xbdbdbd, 0xd9d9d9,
];
const tableau20cCM = tableau20cColours.map((c, i) => [i / 19, c]);

// Finally, a few colourblind-friendly colour maps.
// First, from Paul Tol, see https://personal.sron.nl/~pault/#sec:qualitative
const tolColours = [
  0x332288, 0x88ccee, 0x44aa99, 0x117733, 0x999933, 0xddcc77, 0xcc6677,
  0x882255, 0xaa4499,
];
const tolCM = tolColours.map((c, i) => [i / 8, c]);

// Next from Okabe and Ito, see https://jfly.uni-koeln.de/color/
const okabeColours = [
  0xe69f00, 0x56b4e9, 0x009e73, 0xf0e442, 0x0072b2, 0xd55e00, 0xcc79a7,
  0x999999,
];
const okabeCM = okabeColours.map((c, i) => [i / 7, c]);

// Now, sequential colour maps.

// Viridis, see https://bids.github.io/colormap/

// prettier-ignore
let viridisColours = [
  0x440154, 0x440256, 0x450457, 0x450559, 0x46075A, 0x46085C, 0x460A5D,
  0x460B5E, 0x470D60, 0x470E61, 0x471063, 0x471164, 0x471365, 0x481467,
  0x481668, 0x481769, 0x48186A, 0x481A6C, 0x481B6D, 0x481C6E, 0x481D6F,
  0x481F70, 0x482071, 0x482173, 0x482374, 0x482475, 0x482576, 0x482677,
  0x482878, 0x482979, 0x472A7A, 0x472C7A, 0x472D7B, 0x472E7C, 0x472F7D,
  0x46307E, 0x46327E, 0x46337F, 0x463480, 0x453581, 0x453781, 0x453882,
  0x443983, 0x443A83, 0x443B84, 0x433D84, 0x433E85, 0x423F85, 0x424086,
  0x424186, 0x414287, 0x414487, 0x404588, 0x404688, 0x3F4788, 0x3F4889,
  0x3E4989, 0x3E4A89, 0x3E4C8A, 0x3D4D8A, 0x3D4E8A, 0x3C4F8A, 0x3C508B,
  0x3B518B, 0x3B528B, 0x3A538B, 0x3A548C, 0x39558C, 0x39568C, 0x38588C,
  0x38598C, 0x375A8C, 0x375B8D, 0x365C8D, 0x365D8D, 0x355E8D, 0x355F8D,
  0x34608D, 0x34618D, 0x33628D, 0x33638D, 0x32648E, 0x32658E, 0x31668E,
  0x31678E, 0x31688E, 0x30698E, 0x306A8E, 0x2F6B8E, 0x2F6C8E, 0x2E6D8E,
  0x2E6E8E, 0x2E6F8E, 0x2D708E, 0x2D718E, 0x2C718E, 0x2C728E, 0x2C738E,
  0x2B748E, 0x2B758E, 0x2A768E, 0x2A778E, 0x2A788E, 0x29798E, 0x297A8E,
  0x297B8E, 0x287C8E, 0x287D8E, 0x277E8E, 0x277F8E, 0x27808E, 0x26818E,
  0x26828E, 0x26828E, 0x25838E, 0x25848E, 0x25858E, 0x24868E, 0x24878E,
  0x23888E, 0x23898E, 0x238A8D, 0x228B8D, 0x228C8D, 0x228D8D, 0x218E8D,
  0x218F8D, 0x21908D, 0x21918C, 0x20928C, 0x20928C, 0x20938C, 0x1F948C,
  0x1F958B, 0x1F968B, 0x1F978B, 0x1F988B, 0x1F998A, 0x1F9A8A, 0x1E9B8A,
  0x1E9C89, 0x1E9D89, 0x1F9E89, 0x1F9F88, 0x1FA088, 0x1FA188, 0x1FA187,
  0x1FA287, 0x20A386, 0x20A486, 0x21A585, 0x21A685, 0x22A785, 0x22A884,
  0x23A983, 0x24AA83, 0x25AB82, 0x25AC82, 0x26AD81, 0x27AD81, 0x28AE80,
  0x29AF7F, 0x2AB07F, 0x2CB17E, 0x2DB27D, 0x2EB37C, 0x2FB47C, 0x31B57B,
  0x32B67A, 0x34B679, 0x35B779, 0x37B878, 0x38B977, 0x3ABA76, 0x3BBB75,
  0x3DBC74, 0x3FBC73, 0x40BD72, 0x42BE71, 0x44BF70, 0x46C06F, 0x48C16E,
  0x4AC16D, 0x4CC26C, 0x4EC36B, 0x50C46A, 0x52C569, 0x54C568, 0x56C667,
  0x58C765, 0x5AC864, 0x5CC863, 0x5EC962, 0x60CA60, 0x63CB5F, 0x65CB5E,
  0x67CC5C, 0x69CD5B, 0x6CCD5A, 0x6ECE58, 0x70CF57, 0x73D056, 0x75D054,
  0x77D153, 0x7AD151, 0x7CD250, 0x7FD34E, 0x81D34D, 0x84D44B, 0x86D549,
  0x89D548, 0x8BD646, 0x8ED645, 0x90D743, 0x93D741, 0x95D840, 0x98D83E,
  0x9BD93C, 0x9DD93B, 0xA0DA39, 0xA2DA37, 0xA5DB36, 0xA8DB34, 0xAADC32,
  0xADDC30, 0xB0DD2F, 0xB2DD2D, 0xB5DE2B, 0xB8DE29, 0xBADE28, 0xBDDF26,
  0xC0DF25, 0xC2DF23, 0xC5E021, 0xC8E020, 0xCAE11F, 0xCDE11D, 0xD0E11C,
  0xD2E21B, 0xD5E21A, 0xD8E219, 0xDAE319, 0xDDE318, 0xDFE318, 0xE2E418,
  0xE5E419, 0xE7E419, 0xEAE51A, 0xECE51B, 0xEFE51C, 0xF1E51D, 0xF4E61E,
  0xF6E620, 0xF8E621, 0xFBE723, 0xFDE725
];
const viridisCM = viridisColours.map((c, i) => [i / 255, c]);

// prettier-ignore
const magmaColours = [
  0x010000, 0x010005, 0x010106, 0x010108, 0x020109, 0x02020B, 0x02020D,
  0x03030F, 0x030312, 0x040414, 0x050416, 0x060518, 0x06051A, 0x07061C,
  0x08071E, 0x090720, 0x0A0822, 0x0B0924, 0x0C0926, 0x0D0A29, 0x0E0B2B,
  0x100B2D, 0x110C2F, 0x120D31, 0x130D34, 0x140E36, 0x150E38, 0x160F3B,
  0x180F3D, 0x19103F, 0x1A1042, 0x1C1044, 0x1D1147, 0x1E1149, 0x20114B,
  0x21114E, 0x221150, 0x241253, 0x251255, 0x271258, 0x29115A, 0x2A115C,
  0x2C115F, 0x2D1161, 0x2F1163, 0x311165, 0x331067, 0x341069, 0x36106B,
  0x38106C, 0x390F6E, 0x3B0F70, 0x3D0F71, 0x3F0F72, 0x400F74, 0x420F75,
  0x440F76, 0x451077, 0x471078, 0x491078, 0x4A1079, 0x4C117A, 0x4E117B,
  0x4F127B, 0x51127C, 0x52137C, 0x54137D, 0x56147D, 0x57157E, 0x59157E,
  0x5A167E, 0x5C167F, 0x5D177F, 0x5F187F, 0x601880, 0x621980, 0x641A80,
  0x651A80, 0x671B80, 0x681C81, 0x6A1C81, 0x6B1D81, 0x6D1D81, 0x6E1E81,
  0x701F81, 0x721F81, 0x732081, 0x752181, 0x762181, 0x782281, 0x792282,
  0x7B2382, 0x7C2382, 0x7E2482, 0x802582, 0x812581, 0x832681, 0x842681,
  0x862781, 0x882781, 0x892881, 0x8B2981, 0x8C2981, 0x8E2A81, 0x902A81,
  0x912B81, 0x932B80, 0x942C80, 0x962C80, 0x982D80, 0x992D80, 0x9B2E7F,
  0x9C2E7F, 0x9E2F7F, 0xA02F7F, 0xA1307E, 0xA3307E, 0xA5317E, 0xA6317D,
  0xA8327D, 0xAA337D, 0xAB337C, 0xAD347C, 0xAE347B, 0xB0357B, 0xB2357B,
  0xB3367A, 0xB5367A, 0xB73779, 0xB83779, 0xBA3878, 0xBC3978, 0xBD3977,
  0xBF3A77, 0xC03A76, 0xC23B75, 0xC43C75, 0xC53C74, 0xC73D73, 0xC83E73,
  0xCA3E72, 0xCC3F71, 0xCD4071, 0xCF4070, 0xD0416F, 0xD2426F, 0xD3436E,
  0xD5446D, 0xD6456C, 0xD8456C, 0xD9466B, 0xDB476A, 0xDC4869, 0xDE4968,
  0xDF4A68, 0xE04C67, 0xE24D66, 0xE34E65, 0xE44F64, 0xE55064, 0xE75263,
  0xE85362, 0xE95462, 0xEA5661, 0xEB5760, 0xEC5860, 0xED5A5F, 0xEE5B5E,
  0xEF5D5E, 0xF05F5E, 0xF1605D, 0xF2625D, 0xF2645C, 0xF3655C, 0xF4675C,
  0xF4695C, 0xF56B5C, 0xF66C5C, 0xF66E5C, 0xF7705C, 0xF7725C, 0xF8745C,
  0xF8765C, 0xF9785D, 0xF9795D, 0xF97B5D, 0xFA7D5E, 0xFA7F5E, 0xFA815F,
  0xFB835F, 0xFB8560, 0xFB8761, 0xFC8961, 0xFC8A62, 0xFC8C63, 0xFC8E64,
  0xFC9065, 0xFD9266, 0xFD9467, 0xFD9668, 0xFD9869, 0xFD9A6A, 0xFD9B6B,
  0xFE9D6C, 0xFE9F6D, 0xFEA16E, 0xFEA36F, 0xFEA571, 0xFEA772, 0xFEA973,
  0xFEAA74, 0xFEAC76, 0xFEAE77, 0xFEB078, 0xFEB27A, 0xFEB47B, 0xFEB67C,
  0xFEB77E, 0xFEB97F, 0xFEBB81, 0xFEBD82, 0xFEBF84, 0xFEC185, 0xFEC287,
  0xFEC488, 0xFEC68A, 0xFEC88C, 0xFECA8D, 0xFECC8F, 0xFECD90, 0xFECF92,
  0xFED194, 0xFED395, 0xFED597, 0xFED799, 0xFED89A, 0xFDDA9C, 0xFDDC9E,
  0xFDDEA0, 0xFDE0A1, 0xFDE2A3, 0xFDE3A5, 0xFDE5A7, 0xFDE7A9, 0xFDE9AA,
  0xFDEBAC, 0xFCECAE, 0xFCEEB0, 0xFCF0B2, 0xFCF2B4, 0xFCF4B6, 0xFCF6B8,
  0xFCF7B9, 0xFCF9BB, 0xFCFBBD, 0xFCFDBF
];
const magmaCM = magmaColours.map((c, i) => [i / 255, c]);

// Finally, a diverging colour map from Paul Tol.
const sunsetColours = [
  0x364b9a, 0x4a7bb7, 0x6ea6cd, 0x98cae1, 0xc2e4ef, 0xeaeccc, 0xfeda8b,
  0xfdb366, 0xf67e4b, 0xdd3d2d, 0xa50026,
];
const sunsetCM = sunsetColours.map((c, i) => [i / 10, c]);

// Exported function that adds the requested colour map to the given LUT.
// The name must be one of the keys in COLOUR_MAPS.
export function addColourMap(lut, name, num) {
  if (!(name in COLOUR_MAPS)) {
    if (!(name in DEFAULT_MAPS)) {
      throw new Error("Unknown colour map: " + name);
    }
    lut.setColorMap(name, num);
    lut.setMax(1.0);
  } else {
    lut.addColorMap(name, COLOUR_MAPS[name]);
    lut.setColorMap(name, num);
    lut.setMax(MAP_MAX_SIZE[name] - 1);
  }

  lut.setMin(0);
}

// COLOUR_MAPS lookup table.
export const COLOUR_MAPS = {
  // Qualitative colour maps.
  pastel1: pastel1CM,
  pastel2: pastel2CM,
  tableau10: tableau10CM,
  tableau20: tableau20CM,
  tableau20b: tableau20bCM,
  tableau20c: tableau20cCM,
  paulTol: tolCM,
  okabeIto: okabeCM,
  // Sequential colour maps.
  viridis: viridisCM,
  magma: magmaCM,
  sunset: sunsetCM,
};

export const DEFAULT_MAPS = {
  cooltowarm: 128,
  rainbow: 128,
  blackbody: 128,
  grayscale: 128,
};

const MAP_MAX_SIZE = {
  cooltowarm: 128,
  rainbow: 128,
  blackbody: 128,
  grayscale: 128,
  pastel1: 9,
  pastel2: 8,
  tableau10: 10,
  tableau20: 20,
  tableau20b: 20,
  tableau20c: 20,
  paulTol: 9,
  okabeIto: 8,
  viridis: 256,
  magma: 256,
  sunset: 11,
};

export function getCategoricalLutConf() {
  const storage = window.localStorage;

  if (storage.getItem("categoricalColourMap") === null) {
    storage.setItem(
      "categoricalColourMap",
      JSON.stringify(DEFAULT_CATEGORICAL_LUT_CONFIG),
    );
  }

  return JSON.parse(storage.getItem("categoricalColourMap"));
}

export function getContinuousLutConf() {
  const storage = window.localStorage;

  if (storage.getItem("continuousColourMap") === null) {
    storage.setItem("continuousColourMap", JSON.stringify(DEFAULT_LUT_CONFIG));
  }

  return JSON.parse(storage.getItem("continuousColourMap"));
}
