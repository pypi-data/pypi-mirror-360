#
# SPDX-FileCopyrightText: Copyright (c) 1993-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

from typing import List, Optional
from transformers import PreTrainedTokenizer
import torch
from logits_processor_zoo.utils import enforce_tokens
from tensorrt_llm.sampling_params import LogitsProcessor


class ForceLastPhraseLogitsProcessor(LogitsProcessor):
    """
    A logits processor which forces LLMs to use the given phrase before they finalize their answers.
    Most common use cases can be providing references, thanking user with context etc.

    Parameters
    ----------
    phrase (str): The phrase to be generated by LLM before the end of its speech.
    tokenizer (PreTrainedTokenizer): The tokenizer used by the LLM.
    """
    def __init__(self, phrase: str, tokenizer: PreTrainedTokenizer):
        self.eos_token_id = tokenizer.eos_token_id
        self.phrase_tokens = tokenizer.encode(phrase, add_special_tokens=False)
        self.iterators = None

    def _init_before_gen(self, beam_width):
        self.iterators = torch.zeros(beam_width, dtype=torch.int32)

    def __call__(self, req_id: int, logits: torch.Tensor,
                 token_ids: List[List[int]], stream_ptr: Optional[int],
                 client_id: Optional[int]) -> None:
        beam_width = len(token_ids)
        if self.iterators is None:
            self._init_before_gen(beam_width)

        stream = None if stream_ptr is None else torch.cuda.ExternalStream(stream_ptr)

        with torch.cuda.stream(stream):
            for i in range(beam_width):  # iterate over beams
                current_index = self.iterators[i].item()
                if logits[0, i].argmax() == self.eos_token_id and current_index == 0:
                    enforce_tokens(logits[0, i], [self.phrase_tokens[current_index]])
                    self.iterators[i] += 1
                elif len(self.phrase_tokens) > current_index > 0:
                    enforce_tokens(logits[0, i], [self.phrase_tokens[current_index]])
                    self.iterators[i] += 1
