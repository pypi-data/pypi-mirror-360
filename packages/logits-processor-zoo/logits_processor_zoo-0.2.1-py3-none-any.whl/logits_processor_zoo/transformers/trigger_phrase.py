#
# SPDX-FileCopyrightText: Copyright (c) 1993-2024 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import time
from typing import Optional
from transformers import PreTrainedTokenizer
import torch
from logits_processor_zoo.utils import text_to_token, enforce_tokens
from logits_processor_zoo.transformers.base import BaseLogitsProcessor


class TriggerPhraseLogitsProcessor(BaseLogitsProcessor):
    """
    A logits processor which triggers phrases when it encounters a given token.

    Parameters
    ----------
    tokenizer (PreTrainedTokenizer): The tokenizer used by the LLM.
    batch_size (int): The batch size.
    phrase (str): The phrase to be generated by LLM when it encounters the trigger token.
    trigger_token_phrase (str): (Optional) One token phrase in string to trigger phrases.
    trigger_time (float): (Optional) Time (wall-clock time) in seconds after which the phrase will be triggered.
    trigger_count (int): How many times the phrase will be triggered.
    trigger_after (bool): Whether the phrase is written after the trigger token or instead of the trigger token.
    """

    def __init__(self, tokenizer: PreTrainedTokenizer, batch_size: int, phrase: str,
                 trigger_token_phrase: Optional[str] = None, trigger_time: Optional[float] = None,
                 trigger_count: int = 1, trigger_after: bool = False):

        assert (
            trigger_token_phrase is not None or trigger_time is not None
        ), "Either trigger_token_phrase or trigger_time must be provided"

        super().__init__()

        self.trigger_token = None
        if trigger_token_phrase is not None:
            self.trigger_token = text_to_token(tokenizer, trigger_token_phrase, last=False)

        self.phrase_tokens = tokenizer.encode(phrase, add_special_tokens=False)
        self.trigger_after = trigger_after
        self.batch_size = batch_size
        self.initial_trigger_count = trigger_count
        self.trigger_time = trigger_time or float("inf")

    def _reset(self):
        self.iterators = -torch.ones(self.batch_size, dtype=torch.int32)
        self.trigger_count = self.initial_trigger_count * torch.ones(self.batch_size, dtype=torch.int32)
        self.start_time = time.time()

    def _process(self, input_ids: torch.LongTensor, scores: torch.FloatTensor) -> torch.Tensor:
        for i in range(scores.shape[0]):
            if self.trigger_count[i] <= 0:
                continue

            it = self.iterators[i].item()

            time_over = time.time() - self.start_time > self.trigger_time
            if (scores[i, :].argmax() == self.trigger_token or time_over) and it == -1:
                self.iterators[i] = 0
                if not self.trigger_after:
                    scores[i] = enforce_tokens(scores[i], [self.phrase_tokens[0]])
                    self.iterators[i] += 1
            elif len(self.phrase_tokens) > it >= 0:
                scores[i] = enforce_tokens(scores[i], [self.phrase_tokens[it]])
                self.iterators[i] += 1

            if len(self.phrase_tokens) == self.iterators[i].item():  # phrase completed, reset for next trigger
                self.iterators[i] = -1
                self.trigger_count[i] -= 1
                self.start_time = time.time()

        return scores
