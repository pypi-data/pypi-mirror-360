name: Code Quality

on:
  push:
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # 每周一次的定期检查
    - cron: '0 2 * * 1'

jobs:
  quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install ruff mypy bandit safety isort

    - name: Lint with ruff
      run: |
        echo "::group::Ruff Linting"
        ruff check email_widget/ tests/ --output-format=github
        echo "::endgroup::"

    - name: Check formatting with ruff
      run: |
        echo "::group::Format Check"
        ruff format --check email_widget/ tests/
        echo "::endgroup::"

    - name: Type check with mypy
      run: |
        echo "::group::Type Checking"
        mypy email_widget/ --ignore-missing-imports --show-error-codes
        echo "::endgroup::"
      continue-on-error: true

    - name: Check import sorting
      run: |
        echo "::group::Import Sorting"
        isort --check-only --diff email_widget/ tests/
        echo "::endgroup::"
      continue-on-error: true

    - name: Security check with bandit
      run: |
        echo "::group::Security Scan"
        bandit -r email_widget/ -f json -o bandit-report.json || true
        bandit -r email_widget/ --format screen
        echo "::endgroup::"
      continue-on-error: true

    - name: Upload bandit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json

    - name: Dependency security check
      run: |
        echo "::group::Dependency Security"
        safety check --json --output safety-report.json || true
        safety check --short-report
        echo "::endgroup::"
      continue-on-error: true

    - name: Upload safety report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-report
        path: safety-report.json

  complexity:
    name: Code Complexity Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install analysis tools
      run: |
        python -m pip install --upgrade pip
        pip install radon vulture

    - name: Complexity analysis
      run: |
        echo "::group::Cyclomatic Complexity"
        radon cc email_widget/ --min B --show-complexity
        echo "::endgroup::"
        
        echo "::group::Maintainability Index"
        radon mi email_widget/ --min B --show
        echo "::endgroup::"
      continue-on-error: true

    - name: Dead code detection
      run: |
        echo "::group::Dead Code Detection"
        vulture email_widget/ --min-confidence 80 --sort-by-size
        echo "::endgroup::"
      continue-on-error: true

  documentation:
    name: Documentation Quality
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install pydocstyle interrogate

    - name: Check docstring style
      run: |
        echo "::group::Docstring Style"
        pydocstyle email_widget/ --count --explain
        echo "::endgroup::"
      continue-on-error: true

    - name: Check documentation coverage
      run: |
        echo "::group::Documentation Coverage"
        interrogate email_widget/ --verbose --ignore-init-method --ignore-magic
        echo "::endgroup::"
      continue-on-error: true

  summary:
    name: Quality Summary
    runs-on: ubuntu-latest
    needs: [quality, complexity, documentation]
    if: always()
    
    steps:
    - name: Report quality results
      uses: actions/github-script@v7
      with:
        script: |
          const quality_result = '${{ needs.quality.result }}';
          const complexity_result = '${{ needs.complexity.result }}';
          const docs_result = '${{ needs.documentation.result }}';
          
          let emoji = '✅';
          let status = 'passed';
          
          if (quality_result === 'failure') {
            emoji = '❌';
            status = 'failed';
          } else if (quality_result === 'cancelled') {
            emoji = '⚠️';
            status = 'cancelled';
          }
          
          const summary = `${emoji} **Code Quality ${status}**\n\n` +
                         `- Quality checks: ${quality_result}\n` +
                         `- Complexity analysis: ${complexity_result}\n` +
                         `- Documentation: ${docs_result}\n\n` +
                         `Run ID: ${context.runId}`;
          
          console.log(summary);
          
          // 如果是PR，添加评论
          if (context.eventName === 'pull_request') {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          } 