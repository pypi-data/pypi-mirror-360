Metadata-Version: 2.4
Name: finpull
Version: 1.0.16
Summary: Complete financial data scraper with CLI, GUI, and API interfaces
Home-page: https://github.com/Lavarite/FinPull
Author: Yevhenii Vasylevskyi
Author-email: yevhenii+finpull@vasylevskyi.net
License: MIT
Project-URL: Bug Reports, https://github.com/Lavarite/FinPull/issues
Project-URL: Source, https://github.com/Lavarite/FinPull
Project-URL: Documentation, https://github.com/Lavarite/FinPull/blob/main/README.md
Project-URL: Core Package, https://pypi.org/project/finpull-core/
Keywords: finance,scraping,stocks,financial-data,cli,gui,api,complete,finviz,yahoo-finance
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Financial and Insurance Industry
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: End Users/Desktop
Classifier: Topic :: Office/Business :: Financial
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Operating System :: OS Independent
Classifier: Environment :: X11 Applications
Classifier: Environment :: Win32 (MS Windows)
Classifier: Environment :: MacOS X
Classifier: Environment :: Console
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: finpull-core>=1.0.16
Requires-Dist: openpyxl>=3.0.7
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license
Dynamic: project-url
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# FinPull - Complete Financial Data Scraper

[![PyPI version](https://badge.fury.io/py/finpull.svg)](https://badge.fury.io/py/finpull)
[![Python 3.7+](https://img.shields.io/badge/python-3.7+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

**Enterprise-grade financial data scraping tool with comprehensive interfaces: API, CLI, and GUI.**

## 🎯 Overview

FinPull is the complete financial data scraping solution providing multiple interfaces for different use cases:

- **🖥️ GUI**: Interactive desktop application with full data visualization
- **⌨️ CLI**: Command-line interface for automation and scripting  
- **🔌 API**: Programmatic access for integration and web applications
- **📊 Export**: Multiple formats (JSON, CSV, Excel) with advanced features
- **🌐 Web Ready**: JavaScript integration via Pyodide/WASM

## 📦 Installation

### Full Package (Recommended)
```bash
pip install finpull
```

### Lightweight API-Only
For minimal installations, consider the core package:
```bash
pip install finpull-core
```

## 🚀 Quick Start

### GUI Mode (Default)
```bash
finpull
```
Launches the interactive desktop application with full data visualization, sorting, and export capabilities.

### CLI Mode
```bash
# Interactive CLI
finpull --interactive

# Direct commands
finpull add AAPL GOOGL MSFT
finpull show AAPL --full
finpull export data.xlsx --xlsx
finpull refresh
```

### API Mode
```python
from finpull import FinancialDataAPI

api = FinancialDataAPI()
result = api.add_ticker("AAPL")
data = api.get_data("AAPL")
print(f"AAPL Price: ${data['data']['price']}")
```

## 🖥️ GUI Features

- **📊 Complete Data Grid**: All 27+ financial metrics displayed with horizontal/vertical scrolling
- **🔄 Real-time Progress**: Loading indicators for all operations
- **🔍 Multi-selection**: Select and manage multiple tickers simultaneously
- **📈 Smart Sorting**: Click column headers to sort by any metric
- **📤 Export Options**: Export to JSON, CSV, or Excel with file dialogs
- **⚡ Status Indicators**: Visual feedback for all operations (🔄 ✅ ❌)

## ⌨️ CLI Features

- **🚀 Batch Operations**: Add, remove, refresh multiple tickers at once
- **📋 Beautiful Tables**: ASCII-formatted output with comprehensive data display
- **🔄 Progress Tracking**: Real-time progress indicators for all operations
- **📁 Smart Export**: Multiple format support with automatic path handling
- **🎯 Auto-fetch**: Automatically fetch data for new tickers when showing

## 🔌 API Features

- **🌐 Web Integration**: Perfect for JavaScript/Node.js applications
- **📊 Comprehensive Data**: Access to all 27+ financial metrics
- **🔄 Progress Callbacks**: Real-time progress tracking for batch operations
- **✅ Validation**: Built-in ticker validation and error handling
- **📈 Statistics**: Built-in analytics and health monitoring

## 📊 Complete Data Coverage

FinPull provides comprehensive financial data including:

### Basic Information
- Company name, sector, current price
- Market capitalization, trading volume

### Valuation Metrics
- P/E, P/S, P/B ratios
- EPS (current, next year, 5-year growth)

### Performance Indicators
- ROA, ROE, ROI metrics
- Profit and operating margins
- 5-year price change, beta

### Financial Position
- Total assets and liabilities
- Revenue and growth metrics
- Dividend yield and TTM

### Market Data
- Current and average volume
- Real-time price updates
- Historical performance

## 🌐 JavaScript Integration

### Browser (Pyodide)
```html
<script src="https://cdn.jsdelivr.net/pyodide/v0.24.1/full/pyodide.js"></script>
<script>
async function initFinPull() {
    let pyodide = await loadPyodide();
    await pyodide.loadPackage(["micropip"]);
    await pyodide.runPython(`
        import micropip
        await micropip.install("finpull")
        
        from finpull import FinancialDataAPI
        api = FinancialDataAPI()
        
        import js
        js.finpull = api
    `);
    
    // Use from JavaScript
    let result = pyodide.runPython("api.add_ticker('AAPL')");
    console.log(result);
}
</script>
```

### Node.js
```javascript
const { spawn } = require('child_process');

async function getStockData(ticker) {
    return new Promise((resolve, reject) => {
        const process = spawn('finpull', ['show', ticker]);
        let output = '';
        process.stdout.on('data', (data) => output += data);
        process.on('close', (code) => {
            code === 0 ? resolve(output) : reject(new Error(`Exit code: ${code}`));
        });
    });
}
```

## 📈 Enterprise Features

### Production Ready
- **🔒 Error Handling**: Comprehensive exception handling and logging
- **📊 Monitoring**: Built-in statistics and health checks
- **⚡ Performance**: Optimized for high-throughput applications
- **🔄 Reliability**: Automatic fallback between data sources

### Scalability
- **🐳 Docker Ready**: Minimal container footprint
- **☁️ Cloud Native**: Perfect for microservices and serverless
- **📈 High Volume**: Designed for enterprise-scale deployments
- **🔌 Integration**: RESTful API patterns and JSON responses

### Maintainability
- **📝 Type Hints**: Full type annotation support
- **📚 Documentation**: Comprehensive API documentation
- **🧪 Testing**: Enterprise-grade test coverage
- **🔧 Configuration**: Environment variable support

## 🔧 Configuration

### Environment Variables
```bash
export FINPULL_STORAGE_FILE="/path/to/custom/storage.json"
export FINPULL_RATE_LIMIT="2"  # seconds between requests
```

### Data Sources
1. **Finviz** (primary) - Comprehensive financial metrics and ratios
2. **Yahoo Finance** (fallback) - Real-time pricing and market data

## 📋 Dependencies

### Core Dependencies
- `finpull-core>=1.0.15` - Core API functionality
- `openpyxl>=3.0.7` - Excel export capability

### System Dependencies
- `tkinter` - GUI interface (included with Python on most systems)

## 🔄 Package Architecture

```
finpull (complete package)
├── finpull-core (lightweight API)
│   ├── Core scraping engine
│   ├── Data models and storage
│   ├── API interface
│   └── JSON/CSV export
└── Additional interfaces
    ├── CLI interface
    ├── GUI interface
    └── Excel export
```

## 📊 Performance Comparison

| Feature | finpull-core | finpull (complete) |
|---------|--------------|-------------------|
| **Package Size** | ~30KB | ~70KB |
| **Dependencies** | 3 packages | 4 packages |
| **Import Time** | ~0.1s | ~0.3s |
| **Memory Usage** | ~5MB | ~15MB |
| **Use Case** | API/Web | Desktop/Complete |

## 🔗 Related Packages

- **[finpull-core](https://pypi.org/project/finpull-core/)** - Lightweight API-only version
- **[Documentation](https://github.com/Lavarite/FinPull)** - Complete documentation and examples
- **[Issues](https://github.com/Lavarite/FinPull/issues)** - Bug reports and feature requests

## 📄 License

MIT License - see [LICENSE](https://github.com/Lavarite/FinPull/blob/main/LICENSE) file for details.

## 🏢 Enterprise Support

FinPull is designed for enterprise use with:
- Production-ready error handling and logging
- Comprehensive test coverage and documentation
- Performance optimization for high-volume usage
- Professional support and maintenance

---

*FinPull - Enterprise-grade financial data access for every interface* 
