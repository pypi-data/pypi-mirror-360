[project]
name = "libpass-next"
version = "0.3.0"
description = "Password hashing library, rewrite of passlib."
readme = "README.md"
requires-python = ">=3.9"
authors = [
    { name = "Doctor", email = "notypecheck@gmail.com" },
]
classifiers = [
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Security :: Cryptography",
    "Topic :: Software Development :: Libraries",
]
dependencies = [
    "typing-extensions>=4.6.0",
]

[project.optional-dependencies]
bcrypt = [
    "bcrypt>=4.3.0",
]
argon = [
    "argon2-cffi>=25.1.0",
]

[dependency-groups]
lint = [
    "deptry>=0.23.0",
    "mypy>=1.16.1",
    "ruff>=0.12.2",
]
test = [
    "coverage>=7.9.2",
    "pytest>=8.3.4",
    "pytest-cov>=6.2.1",
    "pytest-xdist>=3.8.0",
    "typeguard>=4.4.2",
]


[tool.uv]
default-groups = "all"


[tool.pytest.ini_options]
addopts = "-W error::Warning"
testpaths = ["tests"]

[tool.coverage.run]
source = ["libpass"]
omit = [
    "libpass/_utils/protocols.py",
]
command_line = "-m pytest -v"
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "class .*\\(.*\\bProtocol\\b.*\\):",
    "@(?:typing\\.)?overload",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
]
show_missing = true
skip_covered = true
skip_empty = true
precision = 2
fail_under = 0


[tool.deptry]
known_first_party = ["libpass"]

[tool.deptry.per_rule_ignores]
DEP001 = []

[tool.ruff]
target-version = "py39"

[tool.ruff.lint]
select = ["ALL"]
unfixable = ["F401"]
ignore = [
    "E501", # Line length
    "ISC001", # Conflicts with ruff format
    "COM812", # Conflicts with ruff format
    "D10", # Required docstrings
    "D203", # Conflict with another rule
    "D212", # Conflict with another rule
    "UP007",  # Use `X | Y` for type annotations, Some parts of the codebase inspect annotations at runtime
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "FBT001", "A005", "PLR0913"]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["hash", "id"]
builtins-allowed-modules = ["inspect"]


[tool.commitizen]
name = "cz_conventional_commits"
version = "0.3.0"
tag_format = "$version"
update_changelog_on_bump = true
version_files = [
    "libpass/__init__.py",
    "pyproject.toml:version"
]


[tool.mypy]
python_version = "3.9"
plugins = []

strict = true
follow_imports = "normal"
ignore_missing_imports = false

disallow_untyped_decorators = true

allow_redefinition = false
check_untyped_defs = true
disallow_any_explicit = false
ignore_errors = false
local_partial_types = true
no_implicit_optional = true
strict_optional = true

warn_no_return = true
warn_redundant_casts = true
warn_return_any = false
warn_unreachable = true
warn_unused_ignores = true

pretty = true
show_column_numbers = true
show_error_codes = true
