[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "archi-mcp"
version = "1.0.0"
description = "MCP server for generating PlantUML ArchiMate diagrams with comprehensive enterprise architecture modeling support"
authors = [
    {name = "Mgr. Patrik Skovajsa", email = "patrik.skovajsa@gmail.com"}
]
maintainers = [
    {name = "Mgr. Patrik Skovajsa", email = "patrik.skovajsa@gmail.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
    "Topic :: Documentation",
]
keywords = [
    "mcp",
    "model-context-protocol",
    "archimate",
    "plantuml",
    "enterprise-architecture",
    "diagram-generation",
]

dependencies = [
    "fastmcp>=2.8.0",
    "pydantic>=2.0.0",
    "loguru>=0.7.0",
    "typing-extensions>=4.0.0",
    "httpx>=0.25.0",
    "pillow>=10.0.0",
    "starlette>=0.28.0",
    "uvicorn>=0.24.0",
    "requests>=2.32.4",
    "lxml>=5.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/entira/archi-mcp"
Repository = "https://github.com/entira/archi-mcp"
Documentation = "https://github.com/entira/archi-mcp#readme"
Issues = "https://github.com/entira/archi-mcp/issues"

[project.scripts]
archi-mcp = "archi_mcp.server:main"

[tool.hatch.build.targets.wheel]
packages = ["src/archi_mcp"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["archi_mcp"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--cov=archi_mcp",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "integration: marks tests as integration tests",
    "slow: marks tests as slow",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.2.1",
]
