# coding: utf-8

"""
    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from circle.web3.configurations.models.testnet_blockchain import TestnetBlockchain

class FaucetRequest(BaseModel):
    """
    FaucetRequest
    """
    address: StrictStr = Field(..., description="Blockchain generated unique identifier, associated with wallet (account), smart contract or other blockchain objects. ")
    blockchain: TestnetBlockchain = Field(...)
    native: Optional[StrictBool] = Field(False, description="Request native testnet tokens.")
    usdc: Optional[StrictBool] = Field(False, description="Request USDC testnet tokens.")
    eurc: Optional[StrictBool] = Field(False, description="Request EURC testnet tokens.")
    __properties = ["address", "blockchain", "native", "usdc", "eurc"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FaucetRequest:
        """Create an instance of FaucetRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FaucetRequest:
        """Create an instance of FaucetRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FaucetRequest.parse_obj(obj)

        _obj = FaucetRequest.parse_obj({
            "address": obj.get("address"),
            "blockchain": obj.get("blockchain"),
            "native": obj.get("native") if obj.get("native") is not None else False,
            "usdc": obj.get("usdc") if obj.get("usdc") is not None else False,
            "eurc": obj.get("eurc") if obj.get("eurc") is not None else False
        })
        return _obj


