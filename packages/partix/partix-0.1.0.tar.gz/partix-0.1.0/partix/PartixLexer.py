# Generated from Partix.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,112,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,
        0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,
        5,1,5,1,6,1,6,1,7,1,7,5,7,50,8,7,10,7,12,7,53,9,7,1,8,1,8,1,8,1,
        8,5,8,59,8,8,10,8,12,8,62,9,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,5,
        9,72,8,9,10,9,12,9,75,9,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,5,
        10,85,8,10,10,10,12,10,88,9,10,1,10,1,10,1,11,1,11,1,11,1,11,5,11,
        96,8,11,10,11,12,11,99,9,11,1,11,1,11,1,11,1,11,1,11,1,12,4,12,107,
        8,12,11,12,12,12,108,1,12,1,12,2,73,97,0,13,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,1,0,6,1,0,49,55,3,0,
        65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,4,0,10,10,13,13,
        34,34,92,92,2,0,10,10,13,13,3,0,9,10,13,13,32,32,119,0,1,1,0,0,0,
        0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,1,27,1,0,0,0,3,29,1,0,0,0,5,31,1,0,0,0,7,36,
        1,0,0,0,9,41,1,0,0,0,11,43,1,0,0,0,13,45,1,0,0,0,15,47,1,0,0,0,17,
        54,1,0,0,0,19,65,1,0,0,0,21,80,1,0,0,0,23,91,1,0,0,0,25,106,1,0,
        0,0,27,28,5,40,0,0,28,2,1,0,0,0,29,30,5,41,0,0,30,4,1,0,0,0,31,32,
        5,109,0,0,32,33,5,101,0,0,33,34,5,116,0,0,34,35,5,97,0,0,35,6,1,
        0,0,0,36,37,5,112,0,0,37,38,5,97,0,0,38,39,5,115,0,0,39,40,5,115,
        0,0,40,8,1,0,0,0,41,42,5,64,0,0,42,10,1,0,0,0,43,44,5,43,0,0,44,
        12,1,0,0,0,45,46,7,0,0,0,46,14,1,0,0,0,47,51,7,1,0,0,48,50,7,2,0,
        0,49,48,1,0,0,0,50,53,1,0,0,0,51,49,1,0,0,0,51,52,1,0,0,0,52,16,
        1,0,0,0,53,51,1,0,0,0,54,60,5,34,0,0,55,59,8,3,0,0,56,57,5,92,0,
        0,57,59,9,0,0,0,58,55,1,0,0,0,58,56,1,0,0,0,59,62,1,0,0,0,60,58,
        1,0,0,0,60,61,1,0,0,0,61,63,1,0,0,0,62,60,1,0,0,0,63,64,5,34,0,0,
        64,18,1,0,0,0,65,66,5,34,0,0,66,67,5,34,0,0,67,68,5,34,0,0,68,73,
        1,0,0,0,69,72,9,0,0,0,70,72,7,4,0,0,71,69,1,0,0,0,71,70,1,0,0,0,
        72,75,1,0,0,0,73,74,1,0,0,0,73,71,1,0,0,0,74,76,1,0,0,0,75,73,1,
        0,0,0,76,77,5,34,0,0,77,78,5,34,0,0,78,79,5,34,0,0,79,20,1,0,0,0,
        80,81,5,47,0,0,81,82,5,47,0,0,82,86,1,0,0,0,83,85,8,4,0,0,84,83,
        1,0,0,0,85,88,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,89,1,0,0,0,
        88,86,1,0,0,0,89,90,6,10,0,0,90,22,1,0,0,0,91,92,5,47,0,0,92,93,
        5,42,0,0,93,97,1,0,0,0,94,96,9,0,0,0,95,94,1,0,0,0,96,99,1,0,0,0,
        97,98,1,0,0,0,97,95,1,0,0,0,98,100,1,0,0,0,99,97,1,0,0,0,100,101,
        5,42,0,0,101,102,5,47,0,0,102,103,1,0,0,0,103,104,6,11,0,0,104,24,
        1,0,0,0,105,107,7,5,0,0,106,105,1,0,0,0,107,108,1,0,0,0,108,106,
        1,0,0,0,108,109,1,0,0,0,109,110,1,0,0,0,110,111,6,12,0,0,111,26,
        1,0,0,0,9,0,51,58,60,71,73,86,97,108,1,6,0,0
    ]

class PartixLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    META = 3
    PASS = 4
    AT = 5
    CONCAT = 6
    ENUM = 7
    ID = 8
    STRING = 9
    MULTILINE_STRING = 10
    LINE_COMMENT = 11
    BLOCK_COMMENT = 12
    WS = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'meta'", "'pass'", "'@'", "'+'" ]

    symbolicNames = [ "<INVALID>",
            "META", "PASS", "AT", "CONCAT", "ENUM", "ID", "STRING", "MULTILINE_STRING", 
            "LINE_COMMENT", "BLOCK_COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "META", "PASS", "AT", "CONCAT", "ENUM", 
                  "ID", "STRING", "MULTILINE_STRING", "LINE_COMMENT", "BLOCK_COMMENT", 
                  "WS" ]

    grammarFileName = "Partix.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


