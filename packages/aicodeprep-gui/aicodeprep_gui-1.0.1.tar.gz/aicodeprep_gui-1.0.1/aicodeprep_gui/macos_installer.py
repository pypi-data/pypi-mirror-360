import os
import shutil
import tempfile
import subprocess
import logging

# Template for the main workflow logic file.
# The {EXECUTABLE_PATH} will be replaced with the actual path.
DOCUMENT_WFLOW_TEMPLATE = """
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>AMApplicationBuild</key>
    <string>526</string>
    <key>AMApplicationVersion</key>
    <string>2.10</string>
    <key>AMDocumentVersion</key>
    <string>2</string>
    <key>actions</key>
    <array>
        <dict>
            <key>action</key>
            <dict>
                <key>AMAccepts</key>
                <dict>
                    <key>Container</key>
                    <string>List</string>
                    <key>Optional</key>
                    <true/>
                    <key>Types</key>
                    <array>
                        <string>com.apple.cocoa.string</string>
                    </array>
                </dict>
                <key>AMActionVersion</key>
                <string>2.0.3</string>
                <key>AMApplication</key>
                <array>
                    <string>Automator</string>
                </array>
                <key>AMParameterProperties</key>
                <dict>
                    <key>COMMAND_STRING</key>
                    <dict/>
                    <key>CheckedForUserDefaultShell</key>
                    <dict/>
                    <key>inputMethod</key>
                    <dict/>
                    <key>shell</key>
                    <dict/>
                    <key>source</key>
                    <dict/>
                </dict>
                <key>AMProvides</key>
                <dict>
                    <key>Container</key>
                    <string>List</string>
                    <key>Types</key>
                    <array>
                        <string>com.apple.cocoa.string</string>
                    </array>
                </dict>
                <key>ActionBundlePath</key>
                <string>/System/Library/Automator/Run Shell Script.action</string>
                <key>ActionName</key>
                <string>Run Shell Script</string>
                <key>ActionParameters</key>
                <dict>
                    <key>COMMAND_STRING</key>
                    <string>#!/bin/bash
# This Quick Action was generated by aicodeprep-gui.

# The full path to the executable was detected during generation.
CMD_PATH="{EXECUTABLE_PATH}"

if [ ! -x "$CMD_PATH" ]; then
  osascript -e 'display dialog "Error: The aicodeprep-gui executable was not found at its expected location: {EXECUTABLE_PATH}. You may need to reinstall the context menu from the app." buttons {{"OK"}} default button 1'
  exit 1
fi

# We will process the first selected folder.
# Automator passes selected items as arguments to the script.
if [ "$#" -eq 0 ]; then
    osascript -e 'display dialog "Please right-click on a folder to use this Quick Action." buttons {{"OK"}} default button 1'
    exit 1
fi

FOLDER_PATH="$1"

# Launch the GUI, passing the folder path.
# We run it in the background so the Automator action finishes immediately.
"$CMD_PATH" "$FOLDER_PATH" > /dev/null 2>&1 &
</string>
                    <key>CheckedForUserDefaultShell</key>
                    <true/>
                    <key>inputMethod</key>
                    <integer>1</integer>
                    <key>shell</key>
                    <string>/bin/bash</string>
                    <key>source</key>
                    <string></string>
                </dict>
                <key>BundleIdentifier</key>
                <string>com.apple.RunShellScript</string>
                <key>UUID</key>
                <string>725FD07E-C1D8-4B66-8B0D-751256D26C99</string>
            </dict>
        </dict>
    </array>
    <key>connectors</key>
    <dict/>
    <key>workflowMetaData</key>
    <dict>
        <key>workflowTypeIdentifier</key>
        <string>com.apple.Automator.servicesMenu</string>
        <key>serviceInputTypeIdentifier</key>
        <string>com.apple.Automator.fileSystemObject.folder</string>
        <key>serviceOutputTypeIdentifier</key>
        <string>com.apple.Automator.nothing</string>
        <key>serviceApplicationBundleID</key>
        <string>com.apple.finder</string>
        <key>serviceApplicationPath</key>
        <string>/System/Library/CoreServices/Finder.app</string>
        <key>serviceName</key>
        <string>Open with aicodeprep-gui</string>
    </dict>
</dict>
</plist>
"""

# Template for the Info.plist file, which defines the service menu item.
INFO_PLIST_TEMPLATE = """
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>NSServices</key>
    <array>
        <dict>
            <key>NSMenuItem</key>
            <dict>
                <key>default</key>
                <string>Open with aicodeprep-gui</string>
            </dict>
            <key>NSMessage</key>
            <string>runWorkflowAsService</string>
            <key>NSRequiredContext</key>
            <dict>
                <key>NSApplicationIdentifier</key>
                <string>com.apple.finder</string>
            </dict>
            <key>NSSendFileTypes</key>
            <array>
                <string>public.folder</string>
            </array>
        </dict>
    </array>
</dict>
</plist>
"""

WORKFLOW_NAME = "Open with aicodeprep-gui.workflow"
SERVICES_DIR = os.path.expanduser("~/Library/Services")

def install_quick_action():
    """Generates and installs the macOS Quick Action."""
    executable_path = shutil.which('aicodeprep-gui')
    if not executable_path:
        msg = "Could not find 'aicodeprep-gui' executable in PATH."
        logging.error(msg)
        return False, msg

    try:
        # Create the .workflow bundle structure in a temporary directory
        temp_dir = tempfile.mkdtemp()
        workflow_path = os.path.join(temp_dir, WORKFLOW_NAME)
        contents_path = os.path.join(workflow_path, "Contents")
        os.makedirs(contents_path, exist_ok=True)

        # Write the templated files
        wflow_content = DOCUMENT_WFLOW_TEMPLATE.format(EXECUTABLE_PATH=executable_path)
        with open(os.path.join(contents_path, "document.wflow"), "w") as f:
            f.write(wflow_content)

        with open(os.path.join(contents_path, "Info.plist"), "w") as f:
            f.write(INFO_PLIST_TEMPLATE)
            
        # Move the generated workflow to the user's Services directory
        dest_path = os.path.join(SERVICES_DIR, WORKFLOW_NAME)
        if os.path.exists(dest_path):
            shutil.rmtree(dest_path) # Remove old version if it exists
        
        shutil.move(workflow_path, SERVICES_DIR)
        
        # Clean up temporary directory
        shutil.rmtree(temp_dir)

        msg = (f"Quick Action '{WORKFLOW_NAME}' installed successfully to {SERVICES_DIR}. "
               "It should now appear in the right-click menu for folders in Finder.")
        logging.info(msg)
        return True, msg

    except Exception as e:
        msg = f"Failed to install Quick Action: {e}"
        logging.error(msg)
        return False, msg

def uninstall_quick_action():
    """Removes the macOS Quick Action from the user's Library."""
    dest_path = os.path.join(SERVICES_DIR, WORKFLOW_NAME)
    if os.path.exists(dest_path):
        try:
            shutil.rmtree(dest_path)
            msg = f"Quick Action '{WORKFLOW_NAME}' has been uninstalled."
            logging.info(msg)
            return True, msg
        except Exception as e:
            msg = f"Failed to uninstall Quick Action: {e}"
            logging.error(msg)
            return False, msg
    else:
        msg = "Quick Action was not found (already uninstalled)."
        logging.info(msg)
        return True, msg
