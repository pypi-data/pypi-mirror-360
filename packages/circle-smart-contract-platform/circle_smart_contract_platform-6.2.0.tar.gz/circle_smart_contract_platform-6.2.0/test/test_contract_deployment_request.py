# coding: utf-8

"""
    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

import circle.web3.smart_contract_platform
from circle.web3.smart_contract_platform.models.contract_deployment_request import ContractDeploymentRequest  # noqa: E501
from circle.web3.smart_contract_platform.rest import ApiException

class TestContractDeploymentRequest(unittest.TestCase):
    """ContractDeploymentRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ContractDeploymentRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ContractDeploymentRequest`
        """
        model = circle.web3.smart_contract_platform.models.contract_deployment_request.ContractDeploymentRequest()  # noqa: E501
        if include_optional :
            return ContractDeploymentRequest(
                idempotency_key = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 
                name = 'First Contract', 
                description = 'My first hello world contract', 
                wallet_id = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 
                abi_json = '[{"inputs": [],"stateMutability": "nonpayable","type": "constructor"},...', 
                bytecode = '0x60806040523480156200001157600080fd5b50604051806040...', 
                entity_secret_ciphertext = '[B@23a5818e', 
                blockchain = 'MATIC-AMOY', 
                constructor_parameters = ["TICK",10000], 
                fee_level = 'MEDIUM', 
                gas_limit = '21000', 
                gas_price = '', 
                max_fee = '5.935224468', 
                priority_fee = '1.022783914', 
                ref_id = 'grouptransaction123'
            )
        else :
            return ContractDeploymentRequest(
                idempotency_key = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11',
                name = 'First Contract',
                wallet_id = 'a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11',
                abi_json = '[{"inputs": [],"stateMutability": "nonpayable","type": "constructor"},...',
                bytecode = '0x60806040523480156200001157600080fd5b50604051806040...',
                entity_secret_ciphertext = '[B@23a5818e',
                blockchain = 'MATIC-AMOY',
        )
        """

    def testContractDeploymentRequest(self):
        """Test ContractDeploymentRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
