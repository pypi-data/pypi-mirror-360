# coding: utf-8

"""
    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

import circle.web3.smart_contract_platform
from circle.web3.smart_contract_platform.models.contracts import Contracts  # noqa: E501
from circle.web3.smart_contract_platform.rest import ApiException

class TestContracts(unittest.TestCase):
    """Contracts unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test Contracts
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Contracts`
        """
        model = circle.web3.smart_contract_platform.models.contracts.Contracts()  # noqa: E501
        if include_optional :
            return Contracts(
                data = circle.web3.smart_contract_platform.models.contracts_data.Contracts_data(
                    contracts = [
                        circle.web3.smart_contract_platform.models.contract.Contract(
                            id = 'c4d1da72-111e-4d52-bdbf-2e74a2d803d5', 
                            deployer_wallet_id = 'f39e3dbd-84af-4d3d-b5ac-98fbe047ce6a', 
                            deployment_transaction_id = '00ca46f3-c31b-4e3a-92a9-068d4ff26a63', 
                            tx_hash = '0x4a25cc5e661d8504b59c5f38ba93f010e8518966f00e2ceda7955c4b8621357d', 
                            abi_json = '[{"inputs": [],"stateMutability": "nonpayable","type": "constructor"},...', 
                            archived = False, 
                            blockchain = 'MATIC-AMOY', 
                            bytecode = '0x60806040523480156200001157600080fd5b50604051806040...', 
                            contract_address = '0x1e124d7384cd34448ea5907bd0052a79355ab5eb', 
                            contract_input_type = 'IMPORT', 
                            deployer_address = '0x1bf9ad0cc2ad298c69a2995aa806ee832788218c', 
                            deployer_user_id = '', 
                            deployment_error_reason = '', 
                            deployment_error_details = '', 
                            name = 'First Contract', 
                            description = 'My first hello world contract', 
                            status = 'PENDING', 
                            verification_status = 'UNVERIFIED', 
                            metadata_link = 'https://ipfs.io/ipfs/Qme7ss3ARVgxv6rXqVPiikMJ8u2NLgmgszg13pYrDKEoiu', 
                            update_date = '2023-01-01T12:04:05Z', 
                            create_date = '2023-01-01T12:04:05Z', 
                            source_code = [
                                circle.web3.smart_contract_platform.models.sol_file.SolFile(
                                    file_name = 'openzeppelin-solidity/contracts/math/SafeMath.sol', 
                                    file_content = 'pragma solidity ^0.4.24;

/**
 * @title SafeMath
 * @dev Math operations with safety checks...', )
                                ], 
                            functions = [
                                circle.web3.smart_contract_platform.models.function.Function(
                                    name = 'approve', 
                                    state_mutability = 'nonpayable', 
                                    type = 'function', 
                                    inputs = [
                                        circle.web3.smart_contract_platform.models.param_type.ParamType(
                                            components = [
                                                null
                                                ], 
                                            indexed = True, 
                                            name = 'to', 
                                            type = 'address', 
                                            flattened_type = '', )
                                        ], 
                                    outputs = [
                                        circle.web3.smart_contract_platform.models.param_type.ParamType(
                                            indexed = True, 
                                            name = 'to', 
                                            type = 'address', 
                                            flattened_type = '', )
                                        ], )
                                ], 
                            events = [
                                circle.web3.smart_contract_platform.models.event.Event(
                                    name = 'Approval', 
                                    type = 'event', 
                                    anonymous = False, )
                                ], 
                            implementation_contract = circle.web3.smart_contract_platform.models.implementation_contract.implementationContract(), )
                        ], )
            )
        else :
            return Contracts(
                data = circle.web3.smart_contract_platform.models.contracts_data.Contracts_data(
                    contracts = [
                        circle.web3.smart_contract_platform.models.contract.Contract(
                            id = 'c4d1da72-111e-4d52-bdbf-2e74a2d803d5', 
                            deployer_wallet_id = 'f39e3dbd-84af-4d3d-b5ac-98fbe047ce6a', 
                            deployment_transaction_id = '00ca46f3-c31b-4e3a-92a9-068d4ff26a63', 
                            tx_hash = '0x4a25cc5e661d8504b59c5f38ba93f010e8518966f00e2ceda7955c4b8621357d', 
                            abi_json = '[{"inputs": [],"stateMutability": "nonpayable","type": "constructor"},...', 
                            archived = False, 
                            blockchain = 'MATIC-AMOY', 
                            bytecode = '0x60806040523480156200001157600080fd5b50604051806040...', 
                            contract_address = '0x1e124d7384cd34448ea5907bd0052a79355ab5eb', 
                            contract_input_type = 'IMPORT', 
                            deployer_address = '0x1bf9ad0cc2ad298c69a2995aa806ee832788218c', 
                            deployer_user_id = '', 
                            deployment_error_reason = '', 
                            deployment_error_details = '', 
                            name = 'First Contract', 
                            description = 'My first hello world contract', 
                            status = 'PENDING', 
                            verification_status = 'UNVERIFIED', 
                            metadata_link = 'https://ipfs.io/ipfs/Qme7ss3ARVgxv6rXqVPiikMJ8u2NLgmgszg13pYrDKEoiu', 
                            update_date = '2023-01-01T12:04:05Z', 
                            create_date = '2023-01-01T12:04:05Z', 
                            source_code = [
                                circle.web3.smart_contract_platform.models.sol_file.SolFile(
                                    file_name = 'openzeppelin-solidity/contracts/math/SafeMath.sol', 
                                    file_content = 'pragma solidity ^0.4.24;

/**
 * @title SafeMath
 * @dev Math operations with safety checks...', )
                                ], 
                            functions = [
                                circle.web3.smart_contract_platform.models.function.Function(
                                    name = 'approve', 
                                    state_mutability = 'nonpayable', 
                                    type = 'function', 
                                    inputs = [
                                        circle.web3.smart_contract_platform.models.param_type.ParamType(
                                            components = [
                                                null
                                                ], 
                                            indexed = True, 
                                            name = 'to', 
                                            type = 'address', 
                                            flattened_type = '', )
                                        ], 
                                    outputs = [
                                        circle.web3.smart_contract_platform.models.param_type.ParamType(
                                            indexed = True, 
                                            name = 'to', 
                                            type = 'address', 
                                            flattened_type = '', )
                                        ], )
                                ], 
                            events = [
                                circle.web3.smart_contract_platform.models.event.Event(
                                    name = 'Approval', 
                                    type = 'event', 
                                    anonymous = False, )
                                ], 
                            implementation_contract = circle.web3.smart_contract_platform.models.implementation_contract.implementationContract(), )
                        ], ),
        )
        """

    def testContracts(self):
        """Test Contracts"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
