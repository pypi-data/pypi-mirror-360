Metadata-Version: 2.4
Name: localport
Version: 0.3.0a1
Summary: Universal port forwarding manager with health monitoring
Author: Larry Dawson
License: MIT License
        
        Copyright (c) 2025 Larry Dawson
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/dawsonlp/localport
Project-URL: Repository, https://github.com/dawsonlp/localport
Project-URL: Documentation, https://github.com/dawsonlp/localport#readme
Project-URL: Bug Tracker, https://github.com/dawsonlp/localport/issues
Classifier: Development Status :: 3 - Alpha
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Software Development
Classifier: Topic :: System :: Networking
Requires-Python: >=3.13
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: typer>=0.12.0
Requires-Dist: rich>=13.7.0
Requires-Dist: pydantic>=2.8.0
Requires-Dist: pydantic-settings>=2.4.0
Requires-Dist: pyyaml>=6.0.1
Requires-Dist: aiohttp>=3.9.0
Requires-Dist: psutil>=5.9.0
Requires-Dist: structlog>=24.1.0
Requires-Dist: tenacity>=8.2.0
Requires-Dist: click>=8.1.0
Provides-Extra: dev
Requires-Dist: pytest>=8.0.0; extra == "dev"
Requires-Dist: pytest-asyncio>=0.23.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: pytest-mock>=3.12.0; extra == "dev"
Requires-Dist: black>=24.0.0; extra == "dev"
Requires-Dist: ruff>=0.5.0; extra == "dev"
Requires-Dist: mypy>=1.10.0; extra == "dev"
Requires-Dist: pre-commit>=3.7.0; extra == "dev"
Requires-Dist: pytest-xdist>=3.5.0; extra == "dev"
Provides-Extra: kafka
Requires-Dist: kafka-python>=2.0.2; extra == "kafka"
Provides-Extra: postgres
Requires-Dist: psycopg[binary]>=3.2.0; extra == "postgres"
Provides-Extra: all
Requires-Dist: localport[kafka,postgres]; extra == "all"
Dynamic: license-file

# LocalPort

> **üöß ALPHA RELEASE - Universal port forwarding manager with intelligent health monitoring**

**‚ö†Ô∏è This is alpha software under active development. While core functionality is working and tested, expect breaking changes and incomplete features. Please report issues and provide feedback!**

LocalPort is a modern Python CLI tool that simplifies port forwarding across different technologies (kubectl, SSH) while providing enterprise-grade features like automatic health monitoring, intelligent restart policies, and daemon-mode operation.

## ‚ú® Why LocalPort?

- **üîÑ Universal**: Works with kubectl, SSH, and more - one tool for all your port forwarding needs
- **üè• Self-Healing**: Automatic health monitoring with intelligent restart policies and exponential backoff
- **‚ö° Hot Reload**: Configuration changes applied instantly in daemon mode
- **üéØ Production Ready**: Daemon mode for background operation with comprehensive monitoring
- **üé® Beautiful CLI**: Rich terminal interface with clean output and progressive verbosity
- **üîß Flexible**: YAML configuration with environment variable support and validation

## üöÄ Quick Start

### Installation

#### Current Release (Test PyPI)
> **Note**: LocalPort is currently in testing phase and not yet published to production PyPI. Install from Test PyPI for now.

```bash
# Install latest test version with pipx (recommended)
pipx install --index-url https://test.pypi.org/simple/ --pip-args="--extra-index-url https://pypi.org/simple/" localport

# Install with optional dependencies for advanced health checks
pipx install --index-url https://test.pypi.org/simple/ --pip-args="--extra-index-url https://pypi.org/simple/" "localport[kafka,postgres]"

# Alternative: Install with UV
uv tool install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ localport
```

#### Future Stable Release (PyPI)
```bash
# Will be available once testing is complete:
pipx install localport                    # Coming soon
uv tool install localport                 # Coming soon
```

#### Development Installation (GitHub)
```bash
# Install latest from GitHub
pipx install git+https://github.com/dawsonlp/localport.git

# Install specific version/tag
pipx install git+https://github.com/dawsonlp/localport.git@v0.1.0

# Development: Install from source
git clone https://github.com/dawsonlp/localport.git
cd localport && ./scripts/setup-dev.sh
```

### 5-Minute Setup

1. **Create a configuration file** (`localport.yaml`):

```yaml
version: "1.0"

services:
  # Forward PostgreSQL from Kubernetes
  - name: postgres
    technology: kubectl
    local_port: 5432
    remote_port: 5432
    connection:
      resource_name: postgres
      namespace: default
    tags: [database]

  # Forward Redis via SSH tunnel
  - name: redis
    technology: ssh
    local_port: 6379
    remote_port: 6379
    connection:
      host: redis.example.com
      user: deploy
    tags: [cache]
```

2. **Start your services**:

```bash
# Start all services
localport start --all

# Start specific services
localport start postgres redis

# Start services by tag
localport start --tag database
```

3. **Check status**:

```bash
localport status
```

4. **Use your forwarded services**:

```bash
# Connect to PostgreSQL
psql -h localhost -p 5432 -U postgres

# Connect to Redis
redis-cli -h localhost -p 6379
```

That's it! Your services are now accessible locally with automatic health monitoring and restart capabilities.

## üìñ Documentation

### Getting Started
- **[Getting Started Guide](docs/getting-started.md)** - Step-by-step setup for new users
- **[Configuration Guide](docs/configuration.md)** - Complete configuration reference
- **[CLI Reference](docs/cli-reference.md)** - All commands and options

### User Guides
- **[User Guide](docs/user-guide.md)** - Common workflows and best practices
- **[Troubleshooting](docs/troubleshooting.md)** - Solutions for common issues
- **[Examples](docs/examples/)** - Real-world configuration examples

## üéØ Core Features

### Service Management
```bash
# Start services
localport start postgres redis              # Specific services
localport start --tag database             # By tag
localport start --all                      # All services

# Monitor services
localport status                           # Current status
localport status --watch                   # Live monitoring
localport logs postgres                    # Service logs

# Stop services
localport stop postgres redis              # Specific services
localport stop --all                      # All services
```

### Daemon Mode (Background Operation)
```bash
# Start daemon for background operation
localport daemon start --auto-start

# Check daemon status
localport daemon status

# Reload configuration without restart
localport daemon reload

# Stop daemon
localport daemon stop
```

### Configuration Management
```bash
# Validate configuration
localport config validate

# Export configuration
localport config export --format json

# Export specific services
localport config export --tag database --output backup.yaml
```

## üîß Configuration

### Basic Configuration

```yaml
version: "1.0"

services:
  - name: postgres
    technology: kubectl
    local_port: 5432
    remote_port: 5432
    connection:
      resource_name: postgres
      namespace: default
```

### Advanced Configuration with Health Monitoring

```yaml
version: "1.0"

# Global defaults
defaults:
  health_check:
    type: tcp
    interval: 30
    timeout: 5.0
    failure_threshold: 3
  restart_policy:
    enabled: true
    max_attempts: 5
    backoff_multiplier: 2.0

services:
  - name: postgres
    technology: kubectl
    local_port: 5432
    remote_port: 5432
    connection:
      resource_type: service
      resource_name: postgres
      namespace: default
      context: ${KUBE_CONTEXT:minikube}
    enabled: true
    tags: [database, essential]
    description: "PostgreSQL database"
    health_check:
      type: postgres
      config:
        database: postgres
        user: postgres
        password: ${POSTGRES_PASSWORD}
    restart_policy:
      max_attempts: 3
      initial_delay: 2
```

**Supported Health Check Types:**
- **TCP**: Basic connectivity testing
- **HTTP/HTTPS**: Web service health endpoints
- **Kafka**: Message broker connectivity (requires `kafka-python`)
- **PostgreSQL**: Database connectivity (requires `psycopg`)

## üõ†Ô∏è Supported Technologies

### Kubernetes (kubectl)
```yaml
- name: service-name
  technology: kubectl
  connection:
    resource_type: service        # service, deployment, pod
    resource_name: my-service
    namespace: default
    context: minikube            # optional
```

### SSH Tunnels
```yaml
- name: service-name
  technology: ssh
  connection:
    host: remote-server.com
    user: deploy
    port: 22                     # optional, default 22
    key_file: ~/.ssh/id_rsa     # optional
    password: secret             # optional (not recommended)
```

## üåü Advanced Features

### Hot Configuration Reloading (Daemon Mode)

When running in daemon mode, LocalPort automatically detects configuration changes and applies them without restarting services:

```bash
# Start daemon mode first
localport daemon start --auto-start

# Edit your localport.yaml file
vim localport.yaml

# Changes are automatically applied in daemon mode!
# Check what changed:
localport daemon status
localport status
```

> **Note**: Hot reloading only works in daemon mode. For standalone commands, you'll need to restart services manually after configuration changes.

### Multiple Output Formats

```bash
# Table format (default)
localport status

# JSON for scripting
localport status --output json

# Text for simple parsing
localport status --output text
```

### Environment Variables

Use environment variable substitution for sensitive data:

```yaml
connection:
  host: ${DB_HOST:localhost}
  user: ${DB_USER}
  password: ${DB_PASSWORD}
  key_file: ${SSH_KEY_FILE:~/.ssh/id_rsa}
```

## üöÄ Development

### Requirements

- Python 3.13+
- UV (for dependency management)
- Virtual environment support

### Setup

```bash
# Clone the repository
git clone https://github.com/yourusername/localport.git
cd localport

# Setup development environment
./scripts/setup-dev.sh

# Activate virtual environment
source .venv/bin/activate

# Install in development mode
uv pip install -e .

# Run tests
uv run pytest
```

## ü§ù Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Add tests
5. Run the test suite
6. Submit a pull request

## üìÑ License

MIT License - see [LICENSE](LICENSE) file for details.

## üìä Status

üéØ **Alpha Release 0.3.0** - Core functionality working with daemon mode and health monitoring!

**Current Progress:**
- ‚úÖ Core Infrastructure (100% complete)
- ‚úÖ kubectl Port Forwarding (100% complete)
- ‚úÖ Process Persistence (100% complete)
- ‚úÖ ConnectionInfo Value Objects (100% complete)
- ‚úÖ Health Monitoring Framework (100% complete)
- ‚úÖ Configuration Management (100% complete)
- ‚úÖ Daemon Mode (100% complete)
- ‚úÖ Basic Testing Suite (100% complete)
- ‚úÖ Hybrid Verbosity System (100% complete)
- üöß SSH Tunnels (planned for 0.4.0)
- üöß Advanced Health Checks (in progress)
- üöß Documentation (in progress)

**Known Issues:**
- **PostgreSQL Health Check**: Requires password configuration (see [Configuration Guide](docs/configuration.md))
- **Kafka Health Check**: May be too aggressive in failure detection
- **SSH Tunnels**: Not yet implemented

**Recent Improvements:**
- ‚úÖ Daemon startup detection and verification
- ‚úÖ Health check interface standardization
- ‚úÖ Progressive verbosity system (-v, -vv, --debug)
- ‚úÖ Clean CLI output by default

## üîó Links

- [Requirements](localport.md) - Detailed project requirements
- [Implementation Design](implementation_design_python.md) - Technical architecture and implementation guide
- [Development Guide](docs/development.md) - Development setup and contribution guidelines (coming soon)
