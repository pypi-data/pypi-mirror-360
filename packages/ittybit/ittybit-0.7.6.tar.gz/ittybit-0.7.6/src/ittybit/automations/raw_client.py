# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.http_response import AsyncHttpResponse, HttpResponse
from ..core.jsonable_encoder import jsonable_encoder
from ..core.request_options import RequestOptions
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.unchecked_base_model import construct_type
from ..requests.workflow_task_step import WorkflowTaskStepParams
from ..types.automation_list_response import AutomationListResponse
from ..types.automation_response import AutomationResponse
from .requests.automations_update_request_trigger import AutomationsUpdateRequestTriggerParams

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawAutomationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[AutomationListResponse]:
        """
        Retrieves a list of all automations for the current project

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[AutomationListResponse]
            A list of automations
        """
        _response = self._client_wrapper.httpx_client.request(
            "automations",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    AutomationListResponse,
                    construct_type(
                        type_=AutomationListResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def create(self, *, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[AutomationResponse]:
        """
        Creates a new automation for the current project

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[AutomationResponse]
            Automation created successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            "automations",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    AutomationResponse,
                    construct_type(
                        type_=AutomationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def get(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[AutomationResponse]:
        """
        Retrieves a specific automation by its ID

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[AutomationResponse]
            Automation details
        """
        _response = self._client_wrapper.httpx_client.request(
            f"automations/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    AutomationResponse,
                    construct_type(
                        type_=AutomationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def update(
        self,
        id: str,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        trigger: typing.Optional[AutomationsUpdateRequestTriggerParams] = OMIT,
        workflow: typing.Optional[typing.Sequence[WorkflowTaskStepParams]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[AutomationResponse]:
        """
        Updates an existing automation by its ID

        Parameters
        ----------
        id : str

        name : str

        description : typing.Optional[str]

        trigger : typing.Optional[AutomationsUpdateRequestTriggerParams]
            Defines the trigger event and conditions. To clear/remove a trigger, provide null. To update, provide the new trigger object.

        workflow : typing.Optional[typing.Sequence[WorkflowTaskStepParams]]
            The updated sequence of tasks for the automation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[AutomationResponse]
            Automation updated successfully
        """
        _response = self._client_wrapper.httpx_client.request(
            f"automations/{jsonable_encoder(id)}",
            method="PUT",
            json={
                "name": name,
                "description": description,
                "trigger": convert_and_respect_annotation_metadata(
                    object_=trigger, annotation=AutomationsUpdateRequestTriggerParams, direction="write"
                ),
                "workflow": convert_and_respect_annotation_metadata(
                    object_=workflow, annotation=typing.Sequence[WorkflowTaskStepParams], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    AutomationResponse,
                    construct_type(
                        type_=AutomationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> HttpResponse[None]:
        """
        Deletes an automation by its ID

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[None]
        """
        _response = self._client_wrapper.httpx_client.request(
            f"automations/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return HttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)


class AsyncRawAutomationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[AutomationListResponse]:
        """
        Retrieves a list of all automations for the current project

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[AutomationListResponse]
            A list of automations
        """
        _response = await self._client_wrapper.httpx_client.request(
            "automations",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    AutomationListResponse,
                    construct_type(
                        type_=AutomationListResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def create(
        self, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[AutomationResponse]:
        """
        Creates a new automation for the current project

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[AutomationResponse]
            Automation created successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            "automations",
            method="POST",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    AutomationResponse,
                    construct_type(
                        type_=AutomationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def get(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[AutomationResponse]:
        """
        Retrieves a specific automation by its ID

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[AutomationResponse]
            Automation details
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"automations/{jsonable_encoder(id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    AutomationResponse,
                    construct_type(
                        type_=AutomationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def update(
        self,
        id: str,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        trigger: typing.Optional[AutomationsUpdateRequestTriggerParams] = OMIT,
        workflow: typing.Optional[typing.Sequence[WorkflowTaskStepParams]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[AutomationResponse]:
        """
        Updates an existing automation by its ID

        Parameters
        ----------
        id : str

        name : str

        description : typing.Optional[str]

        trigger : typing.Optional[AutomationsUpdateRequestTriggerParams]
            Defines the trigger event and conditions. To clear/remove a trigger, provide null. To update, provide the new trigger object.

        workflow : typing.Optional[typing.Sequence[WorkflowTaskStepParams]]
            The updated sequence of tasks for the automation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[AutomationResponse]
            Automation updated successfully
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"automations/{jsonable_encoder(id)}",
            method="PUT",
            json={
                "name": name,
                "description": description,
                "trigger": convert_and_respect_annotation_metadata(
                    object_=trigger, annotation=AutomationsUpdateRequestTriggerParams, direction="write"
                ),
                "workflow": convert_and_respect_annotation_metadata(
                    object_=workflow, annotation=typing.Sequence[WorkflowTaskStepParams], direction="write"
                ),
            },
            headers={
                "content-type": "application/json",
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    AutomationResponse,
                    construct_type(
                        type_=AutomationResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)

    async def delete(
        self, id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[None]:
        """
        Deletes an automation by its ID

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[None]
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"automations/{jsonable_encoder(id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return AsyncHttpResponse(response=_response, data=None)
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response.text)
        raise ApiError(status_code=_response.status_code, headers=dict(_response.headers), body=_response_json)
