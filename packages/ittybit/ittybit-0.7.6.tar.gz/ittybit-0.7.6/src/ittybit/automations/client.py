# This file was auto-generated by Fern from our API Definition.

import typing

from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..requests.workflow_task_step import WorkflowTaskStepParams
from ..types.automation_list_response import AutomationListResponse
from ..types.automation_response import AutomationResponse
from .raw_client import AsyncRawAutomationsClient, RawAutomationsClient
from .requests.automations_update_request_trigger import AutomationsUpdateRequestTriggerParams

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AutomationsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawAutomationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawAutomationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawAutomationsClient
        """
        return self._raw_client

    def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> AutomationListResponse:
        """
        Retrieves a list of all automations for the current project

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AutomationListResponse
            A list of automations

        Examples
        --------
        from ittybit import Ittybit

        client = Ittybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.automations.list()
        """
        _response = self._raw_client.list(request_options=request_options)
        return _response.data

    def create(self, *, request_options: typing.Optional[RequestOptions] = None) -> AutomationResponse:
        """
        Creates a new automation for the current project

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AutomationResponse
            Automation created successfully

        Examples
        --------
        from ittybit import Ittybit

        client = Ittybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.automations.create()
        """
        _response = self._raw_client.create(request_options=request_options)
        return _response.data

    def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> AutomationResponse:
        """
        Retrieves a specific automation by its ID

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AutomationResponse
            Automation details

        Examples
        --------
        from ittybit import Ittybit

        client = Ittybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.automations.get(
            id="id",
        )
        """
        _response = self._raw_client.get(id, request_options=request_options)
        return _response.data

    def update(
        self,
        id: str,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        trigger: typing.Optional[AutomationsUpdateRequestTriggerParams] = OMIT,
        workflow: typing.Optional[typing.Sequence[WorkflowTaskStepParams]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AutomationResponse:
        """
        Updates an existing automation by its ID

        Parameters
        ----------
        id : str

        name : str

        description : typing.Optional[str]

        trigger : typing.Optional[AutomationsUpdateRequestTriggerParams]
            Defines the trigger event and conditions. To clear/remove a trigger, provide null. To update, provide the new trigger object.

        workflow : typing.Optional[typing.Sequence[WorkflowTaskStepParams]]
            The updated sequence of tasks for the automation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AutomationResponse
            Automation updated successfully

        Examples
        --------
        from ittybit import Ittybit

        client = Ittybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.automations.update(
            id="id",
            name="Updated Transcoder Example",
            trigger={
                "event": "upload.completed",
                "conditions": [{"prop": "file.type", "value": "image/*"}],
            },
            workflow=[{"kind": "image", "format": "webp"}],
        )
        """
        _response = self._raw_client.update(
            id, name=name, description=description, trigger=trigger, workflow=workflow, request_options=request_options
        )
        return _response.data

    def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Deletes an automation by its ID

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from ittybit import Ittybit

        client = Ittybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )
        client.automations.delete(
            id="id",
        )
        """
        _response = self._raw_client.delete(id, request_options=request_options)
        return _response.data


class AsyncAutomationsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawAutomationsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawAutomationsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawAutomationsClient
        """
        return self._raw_client

    async def list(self, *, request_options: typing.Optional[RequestOptions] = None) -> AutomationListResponse:
        """
        Retrieves a list of all automations for the current project

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AutomationListResponse
            A list of automations

        Examples
        --------
        import asyncio

        from ittybit import AsyncIttybit

        client = AsyncIttybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.automations.list()


        asyncio.run(main())
        """
        _response = await self._raw_client.list(request_options=request_options)
        return _response.data

    async def create(self, *, request_options: typing.Optional[RequestOptions] = None) -> AutomationResponse:
        """
        Creates a new automation for the current project

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AutomationResponse
            Automation created successfully

        Examples
        --------
        import asyncio

        from ittybit import AsyncIttybit

        client = AsyncIttybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.automations.create()


        asyncio.run(main())
        """
        _response = await self._raw_client.create(request_options=request_options)
        return _response.data

    async def get(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> AutomationResponse:
        """
        Retrieves a specific automation by its ID

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AutomationResponse
            Automation details

        Examples
        --------
        import asyncio

        from ittybit import AsyncIttybit

        client = AsyncIttybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.automations.get(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get(id, request_options=request_options)
        return _response.data

    async def update(
        self,
        id: str,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        trigger: typing.Optional[AutomationsUpdateRequestTriggerParams] = OMIT,
        workflow: typing.Optional[typing.Sequence[WorkflowTaskStepParams]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AutomationResponse:
        """
        Updates an existing automation by its ID

        Parameters
        ----------
        id : str

        name : str

        description : typing.Optional[str]

        trigger : typing.Optional[AutomationsUpdateRequestTriggerParams]
            Defines the trigger event and conditions. To clear/remove a trigger, provide null. To update, provide the new trigger object.

        workflow : typing.Optional[typing.Sequence[WorkflowTaskStepParams]]
            The updated sequence of tasks for the automation.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AutomationResponse
            Automation updated successfully

        Examples
        --------
        import asyncio

        from ittybit import AsyncIttybit

        client = AsyncIttybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.automations.update(
                id="id",
                name="Updated Transcoder Example",
                trigger={
                    "event": "upload.completed",
                    "conditions": [{"prop": "file.type", "value": "image/*"}],
                },
                workflow=[{"kind": "image", "format": "webp"}],
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.update(
            id, name=name, description=description, trigger=trigger, workflow=workflow, request_options=request_options
        )
        return _response.data

    async def delete(self, id: str, *, request_options: typing.Optional[RequestOptions] = None) -> None:
        """
        Deletes an automation by its ID

        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from ittybit import AsyncIttybit

        client = AsyncIttybit(
            version="YOUR_VERSION",
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.automations.delete(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.delete(id, request_options=request_options)
        return _response.data
