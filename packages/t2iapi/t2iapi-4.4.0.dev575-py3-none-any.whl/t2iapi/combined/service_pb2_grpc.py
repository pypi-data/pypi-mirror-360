# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from t2iapi import basic_requests_pb2 as t2iapi_dot_basic__requests__pb2
from t2iapi import basic_responses_pb2 as t2iapi_dot_basic__responses__pb2
from t2iapi.combined import combined_requests_pb2 as t2iapi_dot_combined_dot_combined__requests__pb2
from t2iapi.context import context_responses_pb2 as t2iapi_dot_context_dot_context__responses__pb2


class CombinedServiceStub(object):
    """
    Service to handle combined manipulations which result from at least two different manipulations.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateContextStateWithAssociationAndSetOperatingMode = channel.unary_unary(
                '/t2iapi.combined.CombinedService/CreateContextStateWithAssociationAndSetOperatingMode',
                request_serializer=t2iapi_dot_combined_dot_combined__requests__pb2.CreateContextStateWithAssociationAndSetOperatingModeRequest.SerializeToString,
                response_deserializer=t2iapi_dot_context_dot_context__responses__pb2.CreateContextStateWithAssociationResponse.FromString,
                )
        self.SetComponentActivationAndSetOperatingMode = channel.unary_unary(
                '/t2iapi.combined.CombinedService/SetComponentActivationAndSetOperatingMode',
                request_serializer=t2iapi_dot_combined_dot_combined__requests__pb2.SetComponentActivationAndSetOperatingModeRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )
        self.SetAlertActivationAndSetOperatingMode = channel.unary_unary(
                '/t2iapi.combined.CombinedService/SetAlertActivationAndSetOperatingMode',
                request_serializer=t2iapi_dot_combined_dot_combined__requests__pb2.SetAlertActivationAndSetOperatingModeRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )
        self.SetModeOfOperationAndSetOperatingMode = channel.unary_unary(
                '/t2iapi.combined.CombinedService/SetModeOfOperationAndSetOperatingMode',
                request_serializer=t2iapi_dot_combined_dot_combined__requests__pb2.SetModeOfOperationAndSetOperatingModeRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )
        self.SetSystemContextActivationStateAndContextAssociation = channel.unary_unary(
                '/t2iapi.combined.CombinedService/SetSystemContextActivationStateAndContextAssociation',
                request_serializer=t2iapi_dot_combined_dot_combined__requests__pb2.SetSystemContextActivationStateAndContextAssociationRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )
        self.PhysicallyDisconnectRemovableSubsystemAfterSettingActivationStateOnOrStndBy = channel.unary_unary(
                '/t2iapi.combined.CombinedService/PhysicallyDisconnectRemovableSubsystemAfterSettingActivationStateOnOrStndBy',
                request_serializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )
        self.PhysicallyDisconnectRemovableSubsystemAfterPhysicalConnectorProvided = channel.unary_unary(
                '/t2iapi.combined.CombinedService/PhysicallyDisconnectRemovableSubsystemAfterPhysicalConnectorProvided',
                request_serializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )


class CombinedServiceServicer(object):
    """
    Service to handle combined manipulations which result from at least two different manipulations.
    """

    def CreateContextStateWithAssociationAndSetOperatingMode(self, request, context):
        """
        Create a new or adapt an existing context state with the requested @ContextAssociation and
        set the requested @OperatingMode for the referenced operation.
        The context state @Handle which was created or adapted shall be returned.
        The manipulated states shall be persistent until a next manipulation call or an SDC operation invocation.
        If the device is not able to maintain the static states, it shall return RESULT_NOT_SUPPORTED.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetComponentActivationAndSetOperatingMode(self, request, context):
        """
        Request to set the @ActivationState of the component or metric with the given handle to the requested
        ComponentActivation value and to set the @OperatingMode of the operation with the given handle to the requested
        OperatingMode value.
        The manipulated states shall be persistent until a next manipulation call or an SDC operation invocation.
        If the device is not able to maintain the static states, it shall return RESULT_NOT_SUPPORTED.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetAlertActivationAndSetOperatingMode(self, request, context):
        """
        Request to set the @ActivationState of the alert with the given handle to the requested AlertActivation value and
        to set the @OperatingMode of the operation with the given handle to the requested OperatingMode value.
        The manipulated states shall be persistent until a next manipulation call or an SDC operation invocation.
        If the device is not able to maintain the static states, it shall return RESULT_NOT_SUPPORTED.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetModeOfOperationAndSetOperatingMode(self, request, context):
        """
        Request to set the non-exclusive mode of operation represented by an enum metric with the given handle to the
        requested value and set the @OperatingMode of the operation with the given handle to the requested OperatingMode
        value.
        The manipulated states shall be persistent until a next manipulation call or an SDC operation invocation.
        If the device is not able to maintain the static states, it shall return RESULT_NOT_SUPPORTED.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSystemContextActivationStateAndContextAssociation(self, request, context):
        """
        Request to set the @ActivationState of the pm:SystemContextState with the specified HANDLE to the requested value and to
        create or adapt a pm:AbstractContextState with the requested @ContextAssociation for the pm:AbstractContextDescriptor with the given
        HANDLE.
        The manipulated states shall be persistent until a next manipulation call or an SDC operation invocation.
        If the device is not able to maintain the static states, it shall return RESULT_NOT_SUPPORTED.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PhysicallyDisconnectRemovableSubsystemAfterSettingActivationStateOnOrStndBy(self, request, context):
        """
        Request to set the pm:AbstractDeviceComponentState/@ActivationState corresponding to the specified handle to
        a value in { "On", "StndBy" } and
        physically disconnect the removable subsystem being represented by the
        corresponding pm:AbstractDeviceComponentDescriptor all while persisting the aforementioned ActivationState except when
        it is necessary to change it due to the physical disconnection by means other than this manipulation.

        The ActivationState as requested shall be persisted in all cases except (indirectly)
        as a result of the physical disconnection.
        Reasons other than the physical disconnection constitute a RESULT_NOT_SUPPORTED or RESULT_FAIL.
        In case the ActivationState is not going to be persisted it shall not be a direct result of this manipulation, i.e.
        this manipulation shall not directly change the ActivationState in a way not described here.

        In case the pm:AbstractDeviceComponentDescriptor with the specified handle does not represent a removable subsystem
        it shall return RESULT_NOT_SUPPORTED.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PhysicallyDisconnectRemovableSubsystemAfterPhysicalConnectorProvided(self, request, context):
        """
        Request to provide a pm:AbstractDeviceComponentState/pm:PhysicalConnector element for the
        pm:AbstractDeviceComponentState corresponding to the specified handle and then to
        physically disconnect the removable subsystem being represented by the
        corresponding pm:AbstractDeviceComponentDescriptor all while persisting the aforementioned pm:PhysicalConnector
        except when it is necessary to change it due to the physical disconnection by means other than this manipulation.

        The pm:PhysicalConnector as requested shall be persisted in all cases except (indirectly)
        as a result of the physical disconnection.
        Reasons other than the physical disconnection constitute a RESULT_NOT_SUPPORTED or RESULT_FAIL.
        In case the pm:PhysicalConnector is not going to be persisted it shall not be a direct result of this manipulation,
        i.e. this manipulation shall not directly change the pm:PhysicalConnector in a way not described here.

        In case the pm:AbstractDeviceComponentDescriptor with the specified handle does not represent a removable subsystem
        it shall return RESULT_NOT_SUPPORTED.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CombinedServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateContextStateWithAssociationAndSetOperatingMode': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateContextStateWithAssociationAndSetOperatingMode,
                    request_deserializer=t2iapi_dot_combined_dot_combined__requests__pb2.CreateContextStateWithAssociationAndSetOperatingModeRequest.FromString,
                    response_serializer=t2iapi_dot_context_dot_context__responses__pb2.CreateContextStateWithAssociationResponse.SerializeToString,
            ),
            'SetComponentActivationAndSetOperatingMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SetComponentActivationAndSetOperatingMode,
                    request_deserializer=t2iapi_dot_combined_dot_combined__requests__pb2.SetComponentActivationAndSetOperatingModeRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
            'SetAlertActivationAndSetOperatingMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SetAlertActivationAndSetOperatingMode,
                    request_deserializer=t2iapi_dot_combined_dot_combined__requests__pb2.SetAlertActivationAndSetOperatingModeRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
            'SetModeOfOperationAndSetOperatingMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SetModeOfOperationAndSetOperatingMode,
                    request_deserializer=t2iapi_dot_combined_dot_combined__requests__pb2.SetModeOfOperationAndSetOperatingModeRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
            'SetSystemContextActivationStateAndContextAssociation': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSystemContextActivationStateAndContextAssociation,
                    request_deserializer=t2iapi_dot_combined_dot_combined__requests__pb2.SetSystemContextActivationStateAndContextAssociationRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
            'PhysicallyDisconnectRemovableSubsystemAfterSettingActivationStateOnOrStndBy': grpc.unary_unary_rpc_method_handler(
                    servicer.PhysicallyDisconnectRemovableSubsystemAfterSettingActivationStateOnOrStndBy,
                    request_deserializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
            'PhysicallyDisconnectRemovableSubsystemAfterPhysicalConnectorProvided': grpc.unary_unary_rpc_method_handler(
                    servicer.PhysicallyDisconnectRemovableSubsystemAfterPhysicalConnectorProvided,
                    request_deserializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            't2iapi.combined.CombinedService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CombinedService(object):
    """
    Service to handle combined manipulations which result from at least two different manipulations.
    """

    @staticmethod
    def CreateContextStateWithAssociationAndSetOperatingMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.combined.CombinedService/CreateContextStateWithAssociationAndSetOperatingMode',
            t2iapi_dot_combined_dot_combined__requests__pb2.CreateContextStateWithAssociationAndSetOperatingModeRequest.SerializeToString,
            t2iapi_dot_context_dot_context__responses__pb2.CreateContextStateWithAssociationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetComponentActivationAndSetOperatingMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.combined.CombinedService/SetComponentActivationAndSetOperatingMode',
            t2iapi_dot_combined_dot_combined__requests__pb2.SetComponentActivationAndSetOperatingModeRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetAlertActivationAndSetOperatingMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.combined.CombinedService/SetAlertActivationAndSetOperatingMode',
            t2iapi_dot_combined_dot_combined__requests__pb2.SetAlertActivationAndSetOperatingModeRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetModeOfOperationAndSetOperatingMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.combined.CombinedService/SetModeOfOperationAndSetOperatingMode',
            t2iapi_dot_combined_dot_combined__requests__pb2.SetModeOfOperationAndSetOperatingModeRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSystemContextActivationStateAndContextAssociation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.combined.CombinedService/SetSystemContextActivationStateAndContextAssociation',
            t2iapi_dot_combined_dot_combined__requests__pb2.SetSystemContextActivationStateAndContextAssociationRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PhysicallyDisconnectRemovableSubsystemAfterSettingActivationStateOnOrStndBy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.combined.CombinedService/PhysicallyDisconnectRemovableSubsystemAfterSettingActivationStateOnOrStndBy',
            t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PhysicallyDisconnectRemovableSubsystemAfterPhysicalConnectorProvided(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.combined.CombinedService/PhysicallyDisconnectRemovableSubsystemAfterPhysicalConnectorProvided',
            t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
