# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from t2iapi import basic_requests_pb2 as t2iapi_dot_basic__requests__pb2
from t2iapi import basic_responses_pb2 as t2iapi_dot_basic__responses__pb2
from t2iapi.metric import metric_requests_pb2 as t2iapi_dot_metric_dot_metric__requests__pb2
from t2iapi.metric import metric_responses_pb2 as t2iapi_dot_metric_dot_metric__responses__pb2


class MetricServiceStub(object):
    """
    Service to handle metric manipulations.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SetMetricQualityValidity = channel.unary_unary(
                '/t2iapi.metric.MetricService/SetMetricQualityValidity',
                request_serializer=t2iapi_dot_metric_dot_metric__requests__pb2.SetMetricQualityValidityRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )
        self.SetActivationStateAndUserConfirmableValue = channel.unary_unary(
                '/t2iapi.metric.MetricService/SetActivationStateAndUserConfirmableValue',
                request_serializer=t2iapi_dot_metric_dot_metric__requests__pb2.SetActivationStateAndUserConfirmableValueRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )
        self.SetIncorrectValue = channel.unary_unary(
                '/t2iapi.metric.MetricService/SetIncorrectValue',
                request_serializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )
        self.CalibrateMetric = channel.unary_unary(
                '/t2iapi.metric.MetricService/CalibrateMetric',
                request_serializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
                response_deserializer=t2iapi_dot_metric_dot_metric__responses__pb2.CalibrateMetricResponse.FromString,
                )
        self.SetMetricValuesWithQualityMode = channel.unary_unary(
                '/t2iapi.metric.MetricService/SetMetricValuesWithQualityMode',
                request_serializer=t2iapi_dot_metric_dot_metric__requests__pb2.SetMetricValuesWithQualityModeRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )
        self.SetMetricValuesInRange = channel.unary_unary(
                '/t2iapi.metric.MetricService/SetMetricValuesInRange',
                request_serializer=t2iapi_dot_metric_dot_metric__requests__pb2.SetMetricValuesInRangeRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )
        self.SetMetricStatus = channel.unary_unary(
                '/t2iapi.metric.MetricService/SetMetricStatus',
                request_serializer=t2iapi_dot_metric_dot_metric__requests__pb2.SetMetricStatusRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )
        self.IsComputerControlled = channel.unary_unary(
                '/t2iapi.metric.MetricService/IsComputerControlled',
                request_serializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
                response_deserializer=t2iapi_dot_metric_dot_metric__responses__pb2.IsComputerControlledResponse.FromString,
                )
        self.ProvideMetricValueOrSamples = channel.unary_unary(
                '/t2iapi.metric.MetricService/ProvideMetricValueOrSamples',
                request_serializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )
        self.TransitionProvideValueToExpressNoValueAvailable = channel.unary_unary(
                '/t2iapi.metric.MetricService/TransitionProvideValueToExpressNoValueAvailable',
                request_serializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )
        self.ConveyMetricDemoValues = channel.unary_unary(
                '/t2iapi.metric.MetricService/ConveyMetricDemoValues',
                request_serializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )
        self.SetActiveModeOfOperation = channel.unary_unary(
                '/t2iapi.metric.MetricService/SetActiveModeOfOperation',
                request_serializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )
        self.GetMetricDeterminationMode = channel.unary_unary(
                '/t2iapi.metric.MetricService/GetMetricDeterminationMode',
                request_serializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
                response_deserializer=t2iapi_dot_metric_dot_metric__responses__pb2.GetMetricDeterminationMode.FromString,
                )
        self.DisplayMetricWithDifferentUnit = channel.unary_unary(
                '/t2iapi.metric.MetricService/DisplayMetricWithDifferentUnit',
                request_serializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )
        self.TransitionAccuracyFromWithinLimitsToBelowSpecifiedLimits = channel.unary_unary(
                '/t2iapi.metric.MetricService/TransitionAccuracyFromWithinLimitsToBelowSpecifiedLimits',
                request_serializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )
        self.SetMetricAvailabilityIntr = channel.unary_unary(
                '/t2iapi.metric.MetricService/SetMetricAvailabilityIntr',
                request_serializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )
        self.SetMetricCategoryMsrmtOrClc = channel.unary_unary(
                '/t2iapi.metric.MetricService/SetMetricCategoryMsrmtOrClc',
                request_serializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )
        self.SetMetricCategorySetOrPreset = channel.unary_unary(
                '/t2iapi.metric.MetricService/SetMetricCategorySetOrPreset',
                request_serializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
                response_deserializer=t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
                )


class MetricServiceServicer(object):
    """
    Service to handle metric manipulations.
    """

    def SetMetricQualityValidity(self, request, context):
        """
        Set the MetricQuality/@Validity of the metric with the given handle to the given validity value.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetActivationStateAndUserConfirmableValue(self, request, context):
        """
        For the metric with the provided handle do the following:
        - set the @ActivationState to the provided value
        - set the pm:MetricValue/@Value resp. @Samples and confirm the value via the device ui
        Ensure that the @ActivationState remains set for as long as the confirmable value is set.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetIncorrectValue(self, request, context):
        """
        Set an incorrect value for the metric with the provided handle. If an incorrect value for the metric is already
        present, a new incorrect value shall be set. The "incorrect value" refers to BICEPS
        pm:AbstractMetricValue/MetricQuality/@Validity. A measured value that is incorrect from the perspective of
        the measuring device.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CalibrateMetric(self, request, context):
        """
        Start a new calibration for the metric with the provided handle and return the calibration values.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMetricValuesWithQualityMode(self, request, context):
        """
        Provide metric values with a specific MetricQuality/@Mode for the metric with the given handle.
        The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
        the static state, it shall return RESULT_NOT_SUPPORTED.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMetricValuesInRange(self, request, context):
        """
        Set new metric value(s) (resulting in new pm:MetricValue/@Value resp. pm:MetricValue/@Samples) within a given range.
        The range is defined by lower and upper limit values which shall not be violated.
        If no limit values are requested (empty strings), a random but valid metric @Value or @Samples shall be set.
        If a limit is requested, it shall not be violated by the new metric @Value or @Samples.
        Even if a metric @Value or @Samples is already present, a new metric @Value or @Samples shall be provided.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMetricStatus(self, request, context):
        """
        Set the provided measurement, calculation or setting status for the metric of the provided handle. This is not the
        AbstractMetricState/@ActivationState, but the internal state of the device.
        The resulting AbstractMetricState/@ActivationState shall be persistent until the next manipulation call.
        If the device is not able to maintain the static state, it shall return RESULT_NOT_SUPPORTED.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsComputerControlled(self, request, context):
        """
        Requests if the given metric handle is a computer-controlled metric.

        A computer-controlled metric is a metric with @MetricCategory ∈ { Set, Preset } which is automatically
        adapted by the device under test, e.g. for an FiO2 closed-loop within a device.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ProvideMetricValueOrSamples(self, request, context):
        """
        Provide pm:MetricValue/@Value or pm:MetricValue/@Samples for the metric with the requested handle.

        The goal of this rpc is to have values present continuously, the values themselves may change over time.
        The manipulated state shall be persistent until a next manipulation call. If the device is not able to maintain
        the static state, it shall return RESULT_NOT_SUPPORTED.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransitionProvideValueToExpressNoValueAvailable(self, request, context):
        """
        For the metric with the provided handle perform the following transition:
        - provide pm:MetricValue/@Value resp. @Samples and then
        - express for the metric that no value is available.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConveyMetricDemoValues(self, request, context):
        """
        Convey demo values for the metric with the given handle.
        This means that the metric value is arbitrary and for demonstration purposes only.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetActiveModeOfOperation(self, request, context):
        """
        The metric with the given handle shall be set to an active MODE OF OPERATION if it is representing a
        MODE OF OPERATION. If the metric does not represent a MODE OF OPERATION, it shall return RESULT_NOT_SUPPORTED.

        Hint: MODE OF OPERATION is defined in the standard 11073-10701-2022 and more details in chapter 6.2.1.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetricDeterminationMode(self, request, context):
        """
        Requests if the metric with the given handle is determined episodically or periodically.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisplayMetricWithDifferentUnit(self, request, context):
        """
        Request for the metric with the given handle to display its @Value or @Samples to a USER with a different
        pm:Unit than the one which is currently provided in the respective descriptor.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TransitionAccuracyFromWithinLimitsToBelowSpecifiedLimits(self, request, context):
        """
        For the metric with the provided handle perform the following transition:
        - provide pm:MetricValue/@Value resp. @Samples with pm:MetricQuality/@Validity = 'Vld' then
        - change its accuracy such that it does not meet the limits specified either by an applicable standard that the
        SDC METRIC PROVIDER demonstrates conformity to or in the ACCOMPANYING INFORMATION of the SDC METRIC PROVIDER
        and then
        - provide a new pm:MetricValue/@Value resp. @Samples while the accuracy from the previous step still applies.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMetricAvailabilityIntr(self, request, context):
        """
        Request for the metric with the given handle to set its @MetricAvailability to 'Intr'. 'Intr' is of type
        pm:MetricAvailability as defined in the IEEE Std 11073-10207-2017. The manipulated device state shall be persistent
        until a next manipulation call. If the device is not able to maintain the static state, it
        shall return RESULT_NOT_SUPPORTED.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMetricCategoryMsrmtOrClc(self, request, context):
        """
        Set the @MetricCategory to a value ∈ { Msrmt , Clc } for the pm:AbstractMetricDescriptor with the provided handle.
        'Msrmt' and 'Clc' are of type pm:MetricCategory as defined in the IEEE Std 11073-10207-2017. The manipulated
        device state shall be persistent until a next manipulation call. If the device is not able to maintain the static
        state, it shall return RESULT_NOT_SUPPORTED.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMetricCategorySetOrPreset(self, request, context):
        """
        Set the @MetricCategory to a value ∈ { Set , Preset } for the pm:AbstractMetricDescriptor with the provided handle.
        'Set' and 'Preset' are of type pm:MetricCategory as defined in the IEEE Std 11073-10207-2017. The manipulated
        device state shall be persistent until a next manipulation call. If the device is not able to maintain the static
        state, it shall return RESULT_NOT_SUPPORTED.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetricServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SetMetricQualityValidity': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMetricQualityValidity,
                    request_deserializer=t2iapi_dot_metric_dot_metric__requests__pb2.SetMetricQualityValidityRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
            'SetActivationStateAndUserConfirmableValue': grpc.unary_unary_rpc_method_handler(
                    servicer.SetActivationStateAndUserConfirmableValue,
                    request_deserializer=t2iapi_dot_metric_dot_metric__requests__pb2.SetActivationStateAndUserConfirmableValueRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
            'SetIncorrectValue': grpc.unary_unary_rpc_method_handler(
                    servicer.SetIncorrectValue,
                    request_deserializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
            'CalibrateMetric': grpc.unary_unary_rpc_method_handler(
                    servicer.CalibrateMetric,
                    request_deserializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.FromString,
                    response_serializer=t2iapi_dot_metric_dot_metric__responses__pb2.CalibrateMetricResponse.SerializeToString,
            ),
            'SetMetricValuesWithQualityMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMetricValuesWithQualityMode,
                    request_deserializer=t2iapi_dot_metric_dot_metric__requests__pb2.SetMetricValuesWithQualityModeRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
            'SetMetricValuesInRange': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMetricValuesInRange,
                    request_deserializer=t2iapi_dot_metric_dot_metric__requests__pb2.SetMetricValuesInRangeRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
            'SetMetricStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMetricStatus,
                    request_deserializer=t2iapi_dot_metric_dot_metric__requests__pb2.SetMetricStatusRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
            'IsComputerControlled': grpc.unary_unary_rpc_method_handler(
                    servicer.IsComputerControlled,
                    request_deserializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.FromString,
                    response_serializer=t2iapi_dot_metric_dot_metric__responses__pb2.IsComputerControlledResponse.SerializeToString,
            ),
            'ProvideMetricValueOrSamples': grpc.unary_unary_rpc_method_handler(
                    servicer.ProvideMetricValueOrSamples,
                    request_deserializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
            'TransitionProvideValueToExpressNoValueAvailable': grpc.unary_unary_rpc_method_handler(
                    servicer.TransitionProvideValueToExpressNoValueAvailable,
                    request_deserializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
            'ConveyMetricDemoValues': grpc.unary_unary_rpc_method_handler(
                    servicer.ConveyMetricDemoValues,
                    request_deserializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
            'SetActiveModeOfOperation': grpc.unary_unary_rpc_method_handler(
                    servicer.SetActiveModeOfOperation,
                    request_deserializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
            'GetMetricDeterminationMode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetricDeterminationMode,
                    request_deserializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.FromString,
                    response_serializer=t2iapi_dot_metric_dot_metric__responses__pb2.GetMetricDeterminationMode.SerializeToString,
            ),
            'DisplayMetricWithDifferentUnit': grpc.unary_unary_rpc_method_handler(
                    servicer.DisplayMetricWithDifferentUnit,
                    request_deserializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
            'TransitionAccuracyFromWithinLimitsToBelowSpecifiedLimits': grpc.unary_unary_rpc_method_handler(
                    servicer.TransitionAccuracyFromWithinLimitsToBelowSpecifiedLimits,
                    request_deserializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
            'SetMetricAvailabilityIntr': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMetricAvailabilityIntr,
                    request_deserializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
            'SetMetricCategoryMsrmtOrClc': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMetricCategoryMsrmtOrClc,
                    request_deserializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
            'SetMetricCategorySetOrPreset': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMetricCategorySetOrPreset,
                    request_deserializer=t2iapi_dot_basic__requests__pb2.BasicHandleRequest.FromString,
                    response_serializer=t2iapi_dot_basic__responses__pb2.BasicResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            't2iapi.metric.MetricService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MetricService(object):
    """
    Service to handle metric manipulations.
    """

    @staticmethod
    def SetMetricQualityValidity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.metric.MetricService/SetMetricQualityValidity',
            t2iapi_dot_metric_dot_metric__requests__pb2.SetMetricQualityValidityRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetActivationStateAndUserConfirmableValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.metric.MetricService/SetActivationStateAndUserConfirmableValue',
            t2iapi_dot_metric_dot_metric__requests__pb2.SetActivationStateAndUserConfirmableValueRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetIncorrectValue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.metric.MetricService/SetIncorrectValue',
            t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CalibrateMetric(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.metric.MetricService/CalibrateMetric',
            t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
            t2iapi_dot_metric_dot_metric__responses__pb2.CalibrateMetricResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetMetricValuesWithQualityMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.metric.MetricService/SetMetricValuesWithQualityMode',
            t2iapi_dot_metric_dot_metric__requests__pb2.SetMetricValuesWithQualityModeRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetMetricValuesInRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.metric.MetricService/SetMetricValuesInRange',
            t2iapi_dot_metric_dot_metric__requests__pb2.SetMetricValuesInRangeRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetMetricStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.metric.MetricService/SetMetricStatus',
            t2iapi_dot_metric_dot_metric__requests__pb2.SetMetricStatusRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsComputerControlled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.metric.MetricService/IsComputerControlled',
            t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
            t2iapi_dot_metric_dot_metric__responses__pb2.IsComputerControlledResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ProvideMetricValueOrSamples(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.metric.MetricService/ProvideMetricValueOrSamples',
            t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransitionProvideValueToExpressNoValueAvailable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.metric.MetricService/TransitionProvideValueToExpressNoValueAvailable',
            t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConveyMetricDemoValues(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.metric.MetricService/ConveyMetricDemoValues',
            t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetActiveModeOfOperation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.metric.MetricService/SetActiveModeOfOperation',
            t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMetricDeterminationMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.metric.MetricService/GetMetricDeterminationMode',
            t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
            t2iapi_dot_metric_dot_metric__responses__pb2.GetMetricDeterminationMode.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DisplayMetricWithDifferentUnit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.metric.MetricService/DisplayMetricWithDifferentUnit',
            t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TransitionAccuracyFromWithinLimitsToBelowSpecifiedLimits(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.metric.MetricService/TransitionAccuracyFromWithinLimitsToBelowSpecifiedLimits',
            t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetMetricAvailabilityIntr(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.metric.MetricService/SetMetricAvailabilityIntr',
            t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetMetricCategoryMsrmtOrClc(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.metric.MetricService/SetMetricCategoryMsrmtOrClc',
            t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetMetricCategorySetOrPreset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/t2iapi.metric.MetricService/SetMetricCategorySetOrPreset',
            t2iapi_dot_basic__requests__pb2.BasicHandleRequest.SerializeToString,
            t2iapi_dot_basic__responses__pb2.BasicResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
