Metadata-Version: 2.1
Name: telebot-components
Version: 0.15.2
Summary: Framework/toolkit for building Telegram bots with telebot and redis
Home-page: https://github.com/bots-against-war/telebot-components
License: GPLv3
Author: Igor Vaiman
Author-email: gosha.vaiman@gmail.com
Requires-Python: >=3.10,<4.0
Classifier: License :: Other/Proprietary License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Dist: Pillow (>=10.0.1,<11.0.0)
Requires-Dist: aiohttp (>=3.11.6,<4.0.0)
Requires-Dist: async-lru (>=2.0.2,<3.0.0)
Requires-Dist: beautifulsoup4 (>=4.11.1,<5.0.0)
Requires-Dist: cryptography (>=44.0.1,<45.0.0)
Requires-Dist: diff-match-patch (>=20230430,<20230431)
Requires-Dist: markdown (>=3.4.1,<4.0.0)
Requires-Dist: markdownify (>=1.1.0,<2.0.0)
Requires-Dist: py-trello (>=0.18.0,<0.19.0)
Requires-Dist: pyairtable (>=1.5.0,<2.0.0)
Requires-Dist: pydantic (>=2.10.6,<3.0.0)
Requires-Dist: pytest-mock (>=3.7.0,<4.0.0)
Requires-Dist: redis (>=5.0.1,<6.0.0)
Requires-Dist: requests (>=2.32.4,<3.0.0)
Requires-Dist: ruamel.yaml (>=0.17.21,<0.18.0)
Requires-Dist: telebot-against-war (>=0.7.11,<0.8.0)
Requires-Dist: tenacity (>=8.1.0,<9.0.0)
Requires-Dist: toml (>=0.10.2,<0.11.0)
Requires-Dist: urllib3 (>=1.26.18,<2.0.0)
Project-URL: Repository, https://github.com/bots-against-war/telebot-components
Description-Content-Type: text/markdown

# telebot-components

Framework / toolkit for building bots with [telebot](https://github.com/bots-against-war/telebot).

## Development

### Setup

1. Clone repository
   ```bash
   git clone git@github.com:bots-against-war/telebot-components.git
   cd telebot-components
   ```

2. The project requires Poerty 1.7.1 (see [installation instruction](https://python-poetry.org/docs/master#installing-with-the-official-installer)).
   For example, to install `1.7.1` on Unix, run
   ```bash
   curl -sSL https://install.python-poetry.org | python3 - --version 1.7.1
   ```

3. Then, to install the library with all dependencies, run from project root
   ```bash
   poetry install
   ```
   - You might need to manually install dynamic versioning plugin (without it local build will
     always have version `0.0.0`):
     ```bash
     poetry self add poetry-dynamic-versioning-plugin
     ```
   - To create virtualenv inside the projectâ€™s root directory, use command
     ```bash
     poetry config virtualenvs.in-project false --local
     ```
4. Run `pre-commit` to set up git hook scripts
   ```bash
   pre-commit install
   ```


### Testing
Use command below for run tests
```bash
poetry run pytest tests -vv
```

To also generate test coverage report

```bash
poetry run coverage run -m pytest tests -vv && poetry run coverage report
```

By default, all tests are run with in-memory Redis emulation. But if you want you can run them
locally on real Redis by specifying `REDIS_URL` environment variable before running `pytest`.

> **Note**: Tests must be able to find an empty Redis DB to use; they also clean up after themselves.

### Start example bot
For first start you need to do 3 things:
1. Use command below to generate environment variables file:
    ```bash
    cp ./examples/example.env ./examples/.env
    ```
   > **Note**: After `.env` file is generated you will need to add your [bot's token](https://core.telegram.org/bots#6-botfather) to it.  
   > Also for bot with `trello integration` you need to add `trello` token and api key. You can get it [here](https://trello.com/app-key).
2. If you want start redis on local machine, run
    ```bash
    docker run --name baw-redis -d -p 6379:6379 redis redis-server --save 60 1 --loglevel warning
    ```
3. Run any bot from `./examples`
    ```bash
    python3 ./examples/feedback_bot.py  // or run with IDE from bot file
    ```

