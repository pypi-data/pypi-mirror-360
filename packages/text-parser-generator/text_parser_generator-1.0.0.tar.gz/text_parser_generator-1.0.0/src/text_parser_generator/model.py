# generated by datamodel-codegen:
#   filename:  parser-schema-specification.schema.json
#   timestamp: 2025-07-03T22:11:47+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, RootModel


class Type(RootModel[str]):
    root: str = Field(
        ..., pattern='^(_?[a-zA-Z][a-zA-Z0-9_]*\\.)*_?[a-zA-Z][A-Za-z0-9_]*(\\(.+\\))?$'
    )


class CastEnum(Enum):
    int = 'int'
    uint = 'uint'
    float = 'float'
    number = 'number'
    strip = 'strip'
    rstrip = 'rstrip'
    lstrip = 'lstrip'
    bool = 'bool'
    quoted = 'quoted'


class CastSwitch(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cases: Optional[Dict[str, Any]] = None
    switch_on: Optional[str] = None


class CastSwitchOption(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cast: Optional[CastEnum] = None
    key: Optional[str] = None


class CastSwitchOptionIdentifierOptional(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cast: Optional[CastEnum] = None
    key: Optional[str] = None


class EnumSpec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: Optional[str] = None


class MetaSpec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    application: Optional[List[str]] = None
    default_delimiter: Optional[str] = None
    default_delimiter_repeating: Optional[bool] = None
    default_type: Optional[str] = None
    encoding: Optional[str] = None
    file_extensions: Optional[List[str]] = None
    id: Optional[str] = Field(None, pattern='^_?[a-z][a-z0-9_]*$')
    imports: Optional[List[str]] = None
    license: Optional[str] = None
    title: Optional[str] = None


class RepeatEnum(Enum):
    eos = 'eos'
    expr = 'expr'
    until = 'until'


class TypeEnum(Enum):
    substream = 'substream'


class TypeSwitch(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cases: Optional[Dict[str, Any]] = None
    switch_on: Optional[str] = None


class Type2(RootModel[str]):
    root: str = Field(
        ..., pattern='^(_?[a-zA-Z][A-Za-z0-9_]*\\.)*_?[A-Za-z][A-Za-z0-9_]*(\\(.+\\))?$'
    )


class TypeSwitchOption(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: Optional[str] = None
    type_: Optional[Union[TypeEnum, Type2]] = None


class TypeSwitchOptionIdentifierOptional(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    key: Optional[str] = None
    type_: Optional[Union[TypeEnum, Type2]] = None


class Attribute(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cast: Optional[Union[CastEnum, CastSwitch]] = None
    consume: Optional[bool] = None
    contents: Optional[str] = None
    default: Optional[str] = None
    delimiter: Optional[str] = None
    delimiter_repeating: Optional[bool] = None
    doc: Optional[str] = None
    id: Optional[str] = Field(..., pattern='^_?[a-z][a-z0-9_]*$')
    if_: Optional[str] = None
    io: Optional[str] = None
    repeat: Optional[RepeatEnum] = None
    repeat_expr: Optional[Union[str, int]] = None
    repeat_until: Optional[str] = None
    size: Optional[Union[str, int]] = None
    type: Optional[Union[TypeEnum, Type, TypeSwitch]] = None
    value: Optional[str] = None


class AttributeIdentifierOptional(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    cast: Optional[Union[CastEnum, CastSwitch]] = None
    consume: Optional[bool] = None
    contents: Optional[str] = None
    default: Optional[str] = None
    delimiter: Optional[str] = None
    delimiter_repeating: Optional[bool] = None
    doc: Optional[str] = None
    id: Optional[str] = Field(None, pattern='^_?[a-z][a-z0-9_]*$')
    if_: Optional[str] = None
    io: Optional[str] = None
    repeat: Optional[RepeatEnum] = None
    repeat_expr: Optional[Union[str, int]] = None
    repeat_until: Optional[str] = None
    size: Optional[Union[str, int]] = None
    type: Optional[Union[TypeEnum, Type, TypeSwitch]] = None
    value: Optional[str] = None


class ParamSpec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    doc: Optional[str] = None
    enum: Optional[str] = Field(None, pattern='^([a-z][a-z0-9_]*::)*[a-z][a-z0-9_]*$')
    id: Optional[str] = Field(None, pattern='^_?[a-z][a-z0-9_]*$')
    type: Optional[TypeEnum] = None


class ParserSchemaSpecification(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    doc: Optional[str] = None
    id: Optional[str] = None
    instances: Optional[Dict[str, Any]] = None
    meta: Optional[MetaSpec] = None
    params: Optional[List[ParamSpec]] = None
    seq: Optional[List[Attribute]] = None
    types: Optional[Dict[str, Any]] = None


class TypeSpec(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enums: Optional[List[str]] = None
    id: Optional[str] = None
    instances: Optional[Dict[str, Any]] = None
    meta: Optional[MetaSpec] = None
    params: Optional[List[ParamSpec]] = None
    seq: Optional[List[Attribute]] = None
    types: Optional[Dict[str, Any]] = None


class TypeSpecIdentifierOptional(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    enums: Optional[List[str]] = None
    id: Optional[str] = None
    instances: Optional[Dict[str, Any]] = None
    meta: Optional[MetaSpec] = None
    params: Optional[List[ParamSpec]] = None
    seq: Optional[List[Attribute]] = None
    types: Optional[Dict[str, Any]] = None


class ParserSchemaSpecificationLinkmlSchema(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    doc: Optional[str] = None
    id: Optional[str] = None
    instances: Optional[Dict[str, Any]] = None
    meta: Optional[MetaSpec] = None
    params: Optional[List[ParamSpec]] = None
    seq: Optional[List[Attribute]] = None
    types: Optional[Dict[str, Any]] = None
