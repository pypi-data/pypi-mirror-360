{
  "name": "message-input",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion@11",
    "remeda@2"
  ],
  "registryDependencies": [
    "button",
    "https://github.com/fractalego/yaaaf/r/use-autosize-textarea.json",
    "https://github.com/fractalego/yaaaf/r/file-preview.json",
    "https://github.com/fractalego/yaaaf/r/audio-visualizer.json",
    "https://github.com/fractalego/yaaaf/r/interrupt-prompt.json",
    "https://github.com/fractalego/yaaaf/r/use-audio-recording.json"
  ],
  "files": [
    {
      "path": "ui/message-input.tsx",
      "content": "\"use client\"\n\nimport React, { useEffect, useRef, useState } from \"react\"\nimport { ArrowUp, Square, ThumbsDown, ThumbsUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { useAutosizeTextArea } from \"@/registry/default/hooks/use-autosize-textarea\"\nimport { Button } from \"@/registry/default/ui/button\"\nimport { InterruptPrompt } from \"@/registry/default/ui/interrupt-prompt\"\n\ninterface MessageInputProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {\n  value: string\n  submitOnEnter?: boolean\n  stop?: () => void\n  isGenerating: boolean\n  enableInterrupt?: boolean\n  onRateResponse?: (\n    messageId: string,\n    rating: \"thumbs-up\" | \"thumbs-down\"\n  ) => void\n  lastMessageId?: string\n}\n\nexport function MessageInput({\n  placeholder = \"Ask AI...\",\n  className,\n  onKeyDown: onKeyDownProp,\n  submitOnEnter = true,\n  stop,\n  isGenerating,\n  enableInterrupt = true,\n  onRateResponse,\n  lastMessageId,\n  ...props\n}: MessageInputProps) {\n  const [showInterruptPrompt, setShowInterruptPrompt] = useState(false)\n\n  useEffect(() => {\n    if (!isGenerating) {\n      setShowInterruptPrompt(false)\n    }\n  }, [isGenerating])\n\n  const onKeyDown = (event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (submitOnEnter && event.key === \"Enter\" && !event.shiftKey) {\n      event.preventDefault()\n\n      if (isGenerating && stop && enableInterrupt) {\n        if (showInterruptPrompt) {\n          stop()\n          setShowInterruptPrompt(false)\n          event.currentTarget.form?.requestSubmit()\n        } else if (props.value) {\n          setShowInterruptPrompt(true)\n          return\n        }\n      }\n\n      event.currentTarget.form?.requestSubmit()\n    }\n\n    onKeyDownProp?.(event)\n  }\n\n  const textAreaRef = useRef<HTMLTextAreaElement>(null)\n  const [textAreaHeight, setTextAreaHeight] = useState<number>(0)\n\n  useEffect(() => {\n    if (textAreaRef.current) {\n      setTextAreaHeight(textAreaRef.current.offsetHeight)\n    }\n  }, [props.value])\n\n  useAutosizeTextArea({\n    ref: textAreaRef,\n    maxHeight: 240,\n    borderWidth: 1,\n    dependencies: [props.value],\n  })\n\n  return (\n    <div className=\"relative flex w-full\">\n      {enableInterrupt && (\n        <InterruptPrompt\n          isOpen={showInterruptPrompt}\n          close={() => setShowInterruptPrompt(false)}\n        />\n      )}\n\n      <div className=\"relative flex w-full items-center space-x-2\">\n        {/* Feedback buttons - always visible */}\n        {onRateResponse && lastMessageId && (\n          <div className=\"flex gap-1\">\n            <Button\n              type=\"button\"\n              size=\"icon\"\n              variant=\"ghost\"\n              className=\"h-8 w-8 text-muted-foreground hover:text-green-600\"\n              aria-label=\"Rate response positively\"\n              onClick={() => onRateResponse(lastMessageId, \"thumbs-up\")}\n            >\n              <ThumbsUp className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              type=\"button\"\n              size=\"icon\"\n              variant=\"ghost\"\n              className=\"h-8 w-8 text-muted-foreground hover:text-red-600\"\n              aria-label=\"Rate response negatively\"\n              onClick={() => onRateResponse(lastMessageId, \"thumbs-down\")}\n            >\n              <ThumbsDown className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        )}\n\n        <div className=\"relative flex-1\">\n          <textarea\n            aria-label=\"Write your prompt here\"\n            placeholder={placeholder}\n            ref={textAreaRef}\n            onKeyDown={onKeyDown}\n            className={cn(\n              \"z-10 w-full grow resize-none rounded-xl border border-input bg-background p-3 pr-24 text-sm ring-offset-background transition-[border] placeholder:text-muted-foreground focus-visible:border-primary focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50\",\n              className\n            )}\n            {...props}\n          />\n        </div>\n      </div>\n\n      <div className=\"absolute right-3 top-3 z-20 flex gap-2\">\n        {isGenerating && stop ? (\n          <Button\n            type=\"button\"\n            size=\"icon\"\n            className=\"h-8 w-8\"\n            aria-label=\"Stop generating\"\n            onClick={stop}\n          >\n            <Square className=\"h-3 w-3 animate-pulse\" fill=\"currentColor\" />\n          </Button>\n        ) : (\n          <Button\n            type=\"submit\"\n            size=\"icon\"\n            className=\"h-8 w-8 transition-opacity\"\n            aria-label=\"Send message\"\n            disabled={props.value === \"\" || isGenerating}\n          >\n            <ArrowUp className=\"h-5 w-5\" />\n          </Button>\n        )}\n      </div>\n    </div>\n  )\n}\nMessageInput.displayName = \"MessageInput\"\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}