{
  "name": "chat-message",
  "type": "registry:ui",
  "dependencies": [
    "framer-motion@11"
  ],
  "registryDependencies": [
    "button",
    "collapsible",
    "https://github.com/fractalego/yaaaf/r/copy-button.json",
    "https://github.com/fractalego/yaaaf/r/markdown-renderer.json"
  ],
  "files": [
    {
      "path": "ui/chat-message.tsx",
      "content": "\"use client\"\n\nimport React, { useMemo, useState } from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { motion } from \"framer-motion\"\nimport { Ban, ChevronRight, Code2, Loader2, Terminal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport {\n  Collapsible,\n  CollapsibleContent,\n  CollapsibleTrigger,\n} from \"@/registry/default/ui/collapsible\"\nimport { FilePreview } from \"@/registry/default/ui/file-preview\"\nimport { MarkdownRenderer } from \"@/registry/default/ui/markdown-renderer\"\nimport { complete_tag, paused_tag } from \"@/app/settings\"\n\nconst chatBubbleVariants = cva(\n  \"group/message relative break-words rounded-xl p-4 text-sm sm:max-w-[85%] shadow-sm border\",\n  {\n    variants: {\n      isUser: {\n        true: \"bg-primary text-primary-foreground border-primary/20 shadow-md\",\n        false:\n          \"bg-gradient-to-br from-slate-50 to-slate-100 dark:from-slate-800 dark:to-slate-900 text-foreground border-border/40 shadow-lg\",\n      },\n      animation: {\n        none: \"\",\n        slide: \"duration-300 animate-in fade-in-0\",\n        scale: \"duration-300 animate-in fade-in-0 zoom-in-75\",\n        fade: \"duration-500 animate-in fade-in-0\",\n      },\n    },\n    compoundVariants: [\n      {\n        isUser: true,\n        animation: \"slide\",\n        class: \"slide-in-from-right\",\n      },\n      {\n        isUser: false,\n        animation: \"slide\",\n        class: \"slide-in-from-left\",\n      },\n      {\n        isUser: true,\n        animation: \"scale\",\n        class: \"origin-bottom-right\",\n      },\n      {\n        isUser: false,\n        animation: \"scale\",\n        class: \"origin-bottom-left\",\n      },\n    ],\n  }\n)\n\ntype Animation = VariantProps<typeof chatBubbleVariants>[\"animation\"]\n\ninterface Attachment {\n  name?: string\n  contentType?: string\n  url: string\n}\n\ninterface PartialToolCall {\n  state: \"partial-call\"\n  toolName: string\n}\n\ninterface ToolCall {\n  state: \"call\"\n  toolName: string\n}\n\ninterface ToolResult {\n  state: \"result\"\n  toolName: string\n  result: {\n    __cancelled?: boolean\n    [key: string]: any\n  }\n}\n\ntype ToolInvocation = PartialToolCall | ToolCall | ToolResult\n\ninterface ReasoningPart {\n  type: \"reasoning\"\n  reasoning: string\n}\n\ninterface ToolInvocationPart {\n  type: \"tool-invocation\"\n  toolInvocation: ToolInvocation\n}\n\ninterface TextPart {\n  type: \"text\"\n  text: string\n}\n\n// For compatibility with AI SDK types, not used\ninterface SourcePart {\n  type: \"source\"\n}\n\ntype MessagePart = TextPart | ReasoningPart | ToolInvocationPart | SourcePart\n\nexport interface Message {\n  id: string\n  role: \"user\" | \"assistant\" | (string & {})\n  content: string\n  createdAt?: Date\n  experimental_attachments?: Attachment[]\n  toolInvocations?: ToolInvocation[]\n  parts?: MessagePart[]\n}\n\nexport interface ChatMessageProps extends Message {\n  showTimeStamp?: boolean\n  animation?: Animation\n  actions?: React.ReactNode\n  onArtifactClick?: (artifactId: string) => void\n}\n\nexport const ChatMessage: React.FC<ChatMessageProps> = ({\n  role,\n  content,\n  createdAt,\n  showTimeStamp = false,\n  animation = \"scale\",\n  actions,\n  experimental_attachments,\n  toolInvocations,\n  parts,\n  onArtifactClick,\n}) => {\n  console.log(content)\n  const addSpinner: boolean =\n    content.indexOf(complete_tag) == -1 && content.indexOf(paused_tag) == -1\n\n  const files = useMemo(() => {\n    return experimental_attachments?.map((attachment) => {\n      const dataArray = dataUrlToUint8Array(attachment.url)\n      const file = new File([dataArray], attachment.name ?? \"Unknown\")\n      return file\n    })\n  }, [experimental_attachments])\n\n  const isUser = role === \"user\"\n\n  const formattedTime = createdAt?.toLocaleTimeString(\"en-US\", {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  })\n\n  if (isUser) {\n    return (\n      <div\n        className={cn(\"flex flex-col\", isUser ? \"items-end\" : \"items-start\")}\n      >\n        {files ? (\n          <div className=\"mb-1 flex flex-wrap gap-2\">\n            {files.map((file, index) => {\n              return <FilePreview file={file} key={index} />\n            })}\n          </div>\n        ) : null}\n\n        <div className={cn(chatBubbleVariants({ isUser, animation }))}>\n          <MarkdownRenderer onArtifactClick={onArtifactClick}>\n            {content}\n          </MarkdownRenderer>\n        </div>\n\n        {showTimeStamp && createdAt ? (\n          <time\n            dateTime={createdAt.toISOString()}\n            className={cn(\n              \"mt-1 block px-1 text-xs opacity-50\",\n              animation !== \"none\" && \"duration-500 animate-in fade-in-0\"\n            )}\n          >\n            {formattedTime}\n          </time>\n        ) : null}\n      </div>\n    )\n  }\n\n  if (parts && parts.length > 0) {\n    return parts.map((part, index) => {\n      if (part.type === \"text\") {\n        let text = part.text\n        text = text.replaceAll(\"<br/>\", \"\\n\")\n        text = text.replaceAll(\"&quot;\", '\"')\n        text = text.replaceAll(\"&nbsp;&nbsp;&nbsp;&nbsp;\", \"\\t\")\n        return (\n          <div\n            className={cn(\n              \"flex flex-col\",\n              isUser ? \"items-end\" : \"items-start\"\n            )}\n            key={`text-${index}`}\n          >\n            <div className={cn(chatBubbleVariants({ isUser, animation }))}>\n              <MarkdownRenderer onArtifactClick={onArtifactClick}>\n                {text}\n              </MarkdownRenderer>\n              {actions ? (\n                <div className=\"absolute -bottom-3 right-3 flex space-x-1 rounded-lg border bg-background/95 backdrop-blur-sm p-1.5 text-foreground opacity-0 transition-all duration-200 group-hover/message:opacity-100 shadow-md\">\n                  {actions}\n                </div>\n              ) : null}\n              {role == \"assistant\" && addSpinner ? (\n                <div className=\"mt-4 flex items-center gap-2 text-muted-foreground\">\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  <span className=\"text-xs\">Thinking...</span>\n                </div>\n              ) : null}\n            </div>\n\n            {showTimeStamp && createdAt ? (\n              <time\n                dateTime={createdAt.toISOString()}\n                className={cn(\n                  \"mt-1 block px-1 text-xs opacity-50\",\n                  animation !== \"none\" && \"duration-500 animate-in fade-in-0\"\n                )}\n              >\n                {formattedTime}\n              </time>\n            ) : null}\n          </div>\n        )\n      } else if (part.type === \"reasoning\") {\n        return <ReasoningBlock key={`reasoning-${index}`} part={part} />\n      } else if (part.type === \"tool-invocation\") {\n        return (\n          <ToolCall\n            key={`tool-${index}`}\n            toolInvocations={[part.toolInvocation]}\n          />\n        )\n      }\n      return null\n    })\n  }\n\n  if (toolInvocations && toolInvocations.length > 0) {\n    return <ToolCall toolInvocations={toolInvocations} />\n  }\n\n  return (\n    <div className={cn(\"flex flex-col\", isUser ? \"items-end\" : \"items-start\")}>\n      <div className={cn(chatBubbleVariants({ isUser, animation }))}>\n        <MarkdownRenderer onArtifactClick={onArtifactClick}>\n          {content}\n        </MarkdownRenderer>\n        {actions ? (\n          <div className=\"absolute -bottom-3 right-3 flex space-x-1 rounded-lg border bg-background/95 backdrop-blur-sm p-1.5 text-foreground opacity-0 transition-all duration-200 group-hover/message:opacity-100 shadow-md\">\n            {actions}\n          </div>\n        ) : null}\n      </div>\n\n      {showTimeStamp && createdAt ? (\n        <time\n          dateTime={createdAt.toISOString()}\n          className={cn(\n            \"mt-1 block px-1 text-xs opacity-50\",\n            animation !== \"none\" && \"duration-500 animate-in fade-in-0\"\n          )}\n        >\n          {formattedTime}\n        </time>\n      ) : null}\n    </div>\n  )\n}\n\nfunction dataUrlToUint8Array(data: string) {\n  const base64 = data.split(\",\")[1]\n  const buf = Buffer.from(base64, \"base64\")\n  return new Uint8Array(buf)\n}\n\nconst ReasoningBlock = ({ part }: { part: ReasoningPart }) => {\n  const [isOpen, setIsOpen] = useState(false)\n\n  return (\n    <div className=\"mb-3 flex flex-col items-start sm:max-w-[85%]\">\n      <Collapsible\n        open={isOpen}\n        onOpenChange={setIsOpen}\n        className=\"group w-full overflow-hidden rounded-xl border bg-gradient-to-br from-blue-50/80 to-indigo-50/80 dark:from-blue-950/30 dark:to-indigo-950/30 shadow-sm\"\n      >\n        <div className=\"flex items-center p-3\">\n          <CollapsibleTrigger asChild>\n            <button className=\"flex items-center gap-2 text-sm text-blue-700 dark:text-blue-300 hover:text-blue-800 dark:hover:text-blue-200 transition-colors\">\n              <ChevronRight className=\"h-4 w-4 transition-transform group-data-[state=open]:rotate-90\" />\n              <span className=\"font-medium\">ðŸ’­ Thinking</span>\n            </button>\n          </CollapsibleTrigger>\n        </div>\n        <CollapsibleContent forceMount>\n          <motion.div\n            initial={false}\n            animate={isOpen ? \"open\" : \"closed\"}\n            variants={{\n              open: { height: \"auto\", opacity: 1 },\n              closed: { height: 0, opacity: 0 },\n            }}\n            transition={{ duration: 0.3, ease: [0.04, 0.62, 0.23, 0.98] }}\n            className=\"border-t border-blue-200/50 dark:border-blue-800/50\"\n          >\n            <div className=\"p-3 bg-white/50 dark:bg-slate-900/50\">\n              <div className=\"whitespace-pre-wrap text-sm text-slate-700 dark:text-slate-300 leading-relaxed\">\n                {part.reasoning}\n              </div>\n            </div>\n          </motion.div>\n        </CollapsibleContent>\n      </Collapsible>\n    </div>\n  )\n}\n\nfunction ToolCall({\n  toolInvocations,\n}: Pick<ChatMessageProps, \"toolInvocations\">) {\n  if (!toolInvocations?.length) return null\n\n  return (\n    <div className=\"flex flex-col items-start gap-3\">\n      {toolInvocations.map((invocation, index) => {\n        const isCancelled =\n          invocation.state === \"result\" &&\n          invocation.result.__cancelled === true\n\n        if (isCancelled) {\n          return (\n            <div\n              key={index}\n              className=\"flex items-center gap-2 rounded-xl border bg-gradient-to-r from-red-50 to-orange-50 dark:from-red-950/30 dark:to-orange-950/30 px-4 py-3 text-sm text-red-700 dark:text-red-300 shadow-sm\"\n            >\n              <Ban className=\"h-4 w-4\" />\n              <span>\n                Cancelled{\" \"}\n                <span className=\"font-mono bg-red-100 dark:bg-red-900/50 px-1.5 py-0.5 rounded text-xs\">\n                  {invocation.toolName}\n                </span>\n              </span>\n            </div>\n          )\n        }\n\n        switch (invocation.state) {\n          case \"partial-call\":\n          case \"call\":\n            return (\n              <div\n                key={index}\n                className=\"flex items-center gap-2 rounded-xl border bg-gradient-to-r from-blue-50 to-cyan-50 dark:from-blue-950/30 dark:to-cyan-950/30 px-4 py-3 text-sm text-blue-700 dark:text-blue-300 shadow-sm\"\n              >\n                <Terminal className=\"h-4 w-4\" />\n                <span>\n                  Calling{\" \"}\n                  <span className=\"font-mono bg-blue-100 dark:bg-blue-900/50 px-1.5 py-0.5 rounded text-xs\">\n                    {invocation.toolName}\n                  </span>\n                  ...\n                </span>\n                <Loader2 className=\"h-3 w-3 animate-spin\" />\n              </div>\n            )\n          case \"result\":\n            return (\n              <div\n                key={index}\n                className=\"flex flex-col gap-2 rounded-xl border bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-950/30 dark:to-emerald-950/30 px-4 py-3 text-sm shadow-sm\"\n              >\n                <div className=\"flex items-center gap-2 text-green-700 dark:text-green-300\">\n                  <Code2 className=\"h-4 w-4\" />\n                  <span>\n                    Result from{\" \"}\n                    <span className=\"font-mono bg-green-100 dark:bg-green-900/50 px-1.5 py-0.5 rounded text-xs\">\n                      {invocation.toolName}\n                    </span>\n                  </span>\n                </div>\n                <pre className=\"overflow-x-auto whitespace-pre-wrap text-slate-700 dark:text-slate-300 bg-white/50 dark:bg-slate-900/50 p-3 rounded-lg text-xs leading-relaxed\">\n                  {JSON.stringify(invocation.result, null, 2)}\n                </pre>\n              </div>\n            )\n          default:\n            return null\n        }\n      })}\n    </div>\n  )\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}