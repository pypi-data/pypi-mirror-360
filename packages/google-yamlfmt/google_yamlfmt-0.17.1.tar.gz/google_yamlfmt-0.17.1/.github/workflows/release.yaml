name: Release

on:
  push:
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Build package
        run: |
          uv venv
          uv build

      - name: Install package and test
        if: matrix.os != 'windows-latest'
        run: |
          source .venv/bin/activate
          uv pip install --no-deps --force-reinstall dist/*.whl
          python tests/test_yamlfmt.py

      - name: Install package on Windows and test
        if: matrix.os == 'windows-latest'
        run: |
          .venv\Scripts\activate.ps1
          $whl = Get-ChildItem dist\*.whl | Select-Object -First 1
          uv pip install --no-deps --force-reinstall $whl.FullName
          python tests\test_yamlfmt.py


  release-build:
    runs-on: ${{ matrix.platform.runner }}
    strategy:
      matrix:
        platform:
          - {"runner": "ubuntu-latest", "platform_tag": "musllinux_1_2", "arch": "x86_64"}
          - {"runner": "ubuntu-latest", "platform_tag": "musllinux_1_2", "arch": "i686"}
          - {"runner": "ubuntu-latest", "platform_tag": "musllinux_1_2", "arch": "armv7l"}
          - {"runner": "ubuntu-latest", "platform_tag": "musllinux_1_2", "arch": "aarch64"}
          - {"runner": "ubuntu-latest", "platform_tag": "manylinux_2_17", "arch": "x86_64"}
          - {"runner": "ubuntu-latest", "platform_tag": "manylinux_2_17", "arch": "aarch64"}
          - {"runner": "windows-latest", "platform_tag": "win", "arch": "amd64"}
          - {"runner": "windows-latest", "platform_tag": "win", "arch": "arm64"}
          - {"runner": "macos-latest", "platform_tag": "macosx_10_12", "arch": "x86_64"}
          - {"runner": "macos-latest", "platform_tag": "macosx_11_0", "arch": "arm64"}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: build release distributions
        env:
          CIBW_ARCHS: ${{ matrix.platform.arch }}
          CIBW_PLATFORM: ${{ matrix.platform.platform_tag }}
        run: |
          uv build

      - name: upload dists
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.platform.platform_tag }}-${{ matrix.platform.arch }}
          path: dist/*.whl

  sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Install python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: build release distributions
        env:
          CIBW_ARCHS: "x86_64"
          CIBW_PLATFORM: "manylinux_2_17"
        run: |
          uv build
      - name: upload dists
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist/google_yamlfmt-*.tar.gz

  publish-pypi:
    runs-on: ubuntu-latest
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - test
      - release-build
      - sdist
    permissions:
      id-token: write
    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist/

      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Publish release distributions to PyPI
        run: uv publish -v

  publish-release:
    runs-on: ubuntu-latest
    name: Publish to GitHub
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - test
      - release-build
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          pattern: wheels-*
          merge-multiple: true
          path: dist/
      - name: Get tag name
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Publish to GitHub
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: dist/*
          tag_name: ${{ env.RELEASE_VERSION }}
