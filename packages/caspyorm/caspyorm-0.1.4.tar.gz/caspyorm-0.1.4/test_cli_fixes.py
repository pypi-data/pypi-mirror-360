#!/usr/bin/env python3
"""
Teste para verificar se as corre√ß√µes do CLI funcionaram
"""

import asyncio
import sys
import os

# Adicionar o diret√≥rio atual ao path para importar os m√≥dulos
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_connection_fix():
    """Testa se a corre√ß√£o do execute_async funcionou"""
    print("=== TESTE DE CONEX√ÉO ASS√çNCRONA ===")
    try:
        from caspyorm import connection
        
        async def test():
            await connection.connect_async(contact_points=['localhost'], keyspace='biblioteca')
            print("‚úÖ Conex√£o ass√≠ncrona estabelecida")
            
            # Testar execute_async
            result = await connection.execute_async("SELECT release_version FROM system.local")
            print(f"‚úÖ Query ass√≠ncrona executada: {result.one()}")
            
            await connection.disconnect_async()
            print("‚úÖ Desconex√£o ass√≠ncrona realizada")
        
        asyncio.run(test())
        return True
    except Exception as e:
        print(f"‚ùå Erro na conex√£o ass√≠ncrona: {e}")
        return False

def test_uuid_conversion():
    """Testa se a convers√£o de UUID funciona"""
    print("\n=== TESTE DE CONVERS√ÉO UUID ===")
    try:
        from cli.main import parse_filters
        
        # Teste com UUID v√°lido
        filters = ['id=123e4567-e89b-12d3-a456-426614174000']
        result = parse_filters(filters)
        print(f"‚úÖ UUID convertido: {result['id']} (tipo: {type(result['id'])})")
        
        # Teste com UUID inv√°lido (deve manter como string)
        filters = ['id=invalid-uuid']
        result = parse_filters(filters)
        print(f"‚úÖ UUID inv√°lido mantido como string: {result['id']} (tipo: {type(result['id'])})")
        
        # Teste com autor_id
        filters = ['autor_id=123e4567-e89b-12d3-a456-426614174000']
        result = parse_filters(filters)
        print(f"‚úÖ autor_id convertido: {result['autor_id']} (tipo: {type(result['autor_id'])})")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro na convers√£o UUID: {e}")
        return False

def test_query_async():
    """Testa se as queries ass√≠ncronas funcionam"""
    print("\n=== TESTE DE QUERIES ASS√çNCRONAS ===")
    try:
        from caspyorm import connection
        
        async def test():
            await connection.connect_async(contact_points=['localhost'], keyspace='biblioteca')
            print("‚úÖ Conectado para teste de queries")
            
            # Testar execute_async com query simples
            result = await connection.execute_async("SELECT keyspace_name FROM system_schema.keyspaces WHERE keyspace_name = 'biblioteca'")
            rows = list(result)
            print(f"‚úÖ Query ass√≠ncrona executada: {len(rows)} resultados")
            
            await connection.disconnect_async()
            print("‚úÖ Desconectado")
        
        asyncio.run(test())
        return True
    except Exception as e:
        print(f"‚ùå Erro nas queries ass√≠ncronas: {e}")
        return False

def main():
    """Executa todos os testes"""
    print("üß™ Testando corre√ß√µes do CLI CaspyORM...")
    
    tests = [
        test_connection_fix,
        test_uuid_conversion,
        test_query_async
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå Teste falhou com exce√ß√£o: {e}")
    
    print(f"\nüìä Resultados: {passed}/{total} testes passaram")
    
    if passed == total:
        print("üéâ Todas as corre√ß√µes funcionaram!")
        return 0
    else:
        print("‚ö†Ô∏è Algumas corre√ß√µes ainda precisam de ajustes")
        return 1

if __name__ == "__main__":
    exit(main()) 