Metadata-Version: 2.4
Name: finpull-core
Version: 1.0.16
Summary: Financial data scraper core API - lightweight programmatic access
Home-page: https://github.com/Lavarite/FinPull
Author: Yevhenii Vasylevskyi
Author-email: yevhenii+finpull@vasylevskyi.net
License: MIT
Project-URL: Bug Reports, https://github.com/Lavarite/FinPull/issues
Project-URL: Source, https://github.com/Lavarite/FinPull
Project-URL: Documentation, https://github.com/Lavarite/FinPull/blob/main/README.md
Project-URL: Full Package, https://pypi.org/project/finpull/
Keywords: finance,scraping,stocks,financial-data,api,core,lightweight,finviz,yahoo-finance
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Financial and Insurance Industry
Classifier: Intended Audience :: Developers
Classifier: Topic :: Office/Business :: Financial
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Operating System :: OS Independent
Classifier: Environment :: Web Environment
Classifier: Environment :: Console
Requires-Python: >=3.7
Description-Content-Type: text/markdown
Requires-Dist: requests>=2.25.1
Requires-Dist: beautifulsoup4>=4.9.3
Requires-Dist: yfinance>=0.1.63
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: keywords
Dynamic: license
Dynamic: project-url
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# FinPull Core - Financial Data Scraper API

[![PyPI version](https://badge.fury.io/py/finpull-core.svg)](https://badge.fury.io/py/finpull-core)
[![Python 3.7+](https://img.shields.io/badge/python-3.7+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

**Enterprise-grade core package providing lightweight, programmatic access to financial data scraping capabilities.**

## üéØ Purpose

FinPull Core is the minimal, API-only version of FinPull designed for:
- **Web Applications**: Pyodide/WASM environments
- **Microservices**: Lightweight API-only deployments  
- **JavaScript Integration**: Browser and Node.js applications
- **Docker Containers**: Minimal image sizes
- **Enterprise APIs**: Programmatic access without GUI/CLI overhead

## üì¶ Installation

```bash
pip install finpull-core
```

## üöÄ Quick Start

```python
from finpull_core import FinancialDataAPI

# Initialize the API
api = FinancialDataAPI()

# Add tickers
result = api.add_ticker("AAPL")
print(result)  # {'success': True, 'message': 'Added AAPL', 'ticker': 'AAPL'}

# Get data
data = api.get_data("AAPL")
print(data['data']['price'])  # Current stock price

# Export data
export_result = api.export_data("json")
print(f"Data exported to: {export_result['filename']}")
```

## üåê Web/JavaScript Integration

### Browser (Pyodide)
```html
<script src="https://cdn.jsdelivr.net/pyodide/v0.24.1/full/pyodide.js"></script>
<script>
async function loadFinPull() {
    let pyodide = await loadPyodide();
    await pyodide.loadPackage(["micropip"]);
    await pyodide.runPython(`
        import micropip
        await micropip.install("finpull-core")
        
        from finpull_core import FinancialDataAPI
        api = FinancialDataAPI()
        
        # Expose to JavaScript
        import js
        js.finpull_api = api
    `);
    
    // Now use from JavaScript
    let result = pyodide.runPython("api.add_ticker('AAPL')");
    console.log(result);
}
</script>
```

### Node.js
```javascript
const { spawn } = require('child_process');

class FinPullAPI {
    async addTicker(ticker) {
        return new Promise((resolve, reject) => {
            const process = spawn('python3', ['-c', `
from finpull_core import FinancialDataAPI
api = FinancialDataAPI()
import json
result = api.add_ticker('${ticker}')
print(json.dumps(result))
            `]);
            
            let output = '';
            process.stdout.on('data', (data) => output += data);
            process.on('close', (code) => {
                if (code === 0) {
                    resolve(JSON.parse(output.trim()));
                } else {
                    reject(new Error(`Exit code: ${code}`));
                }
            });
        });
    }
}
```

## üìä API Reference

### Core Classes

#### `FinancialDataAPI`
Main API interface for all operations.

**Methods:**
- `add_ticker(ticker: str) -> Dict[str, Any]` - Add a ticker for tracking
- `get_data(ticker: Optional[str] = None) -> Dict[str, Any]` - Get financial data
- `refresh_data(ticker: Optional[str] = None) -> Dict[str, Any]` - Refresh data
- `remove_ticker(ticker: str) -> Dict[str, Any]` - Remove ticker from tracking
- `export_data(format_type: str = "json", filename: Optional[str] = None) -> Dict[str, Any]` - Export data
- `get_stats() -> Dict[str, Any]` - Get scraper statistics
- `validate_ticker(ticker: str) -> Dict[str, Any]` - Validate ticker symbol
- `batch_add_tickers(tickers: List[str]) -> Dict[str, Any]` - Add multiple tickers

#### `FinancialDataScraper`
Lower-level scraper interface.

#### `FinancialData`
Data model for financial information.

### Data Format

All financial data follows this structure:

```python
{
    "ticker": "AAPL",
    "company_name": "Apple Inc.",
    "sector": "Technology",
    "price": "150.00",
    "market_cap": "2.5T",
    "pe_ratio": "25.5",
    "pb_ratio": "8.2",
    "eps_ttm": "5.89",
    "dividend_yield": "0.5%",
    "roa": "20.1%",
    "roe": "147.4%",
    "change_5y": "245.6%",
    "beta": "1.2",
    "volume": "50.2M",
    "timestamp": "2023-12-01T12:34:56"
}
```

## üîß Configuration

### Environment Variables
- `FINPULL_STORAGE_FILE` - Custom storage file path
- `FINPULL_RATE_LIMIT` - Rate limit delay in seconds

### Data Sources
1. **Finviz** (primary) - Comprehensive financial metrics
2. **Yahoo Finance** (fallback) - Real-time price data

## üìà Performance

- **Lightweight**: ~30KB package size (vs 70KB+ full package)
- **Fast imports**: No GUI/CLI dependencies
- **Memory efficient**: Minimal footprint
- **Web optimized**: Perfect for Pyodide/WASM

## üîÑ Upgrade Path

For full functionality including CLI and GUI interfaces:

```bash
pip uninstall finpull-core
pip install finpull
```

## üìã Dependencies

- `requests>=2.25.1` - HTTP requests
- `beautifulsoup4>=4.9.3` - HTML parsing
- `yfinance>=0.1.63` - Yahoo Finance integration

## üè¢ Enterprise Features

- **Production Ready**: Comprehensive error handling and logging
- **Type Hints**: Full type annotation support
- **Documentation**: Extensive API documentation
- **Testing**: Enterprise-grade test coverage
- **Monitoring**: Built-in statistics and health checks
- **Scalability**: Designed for high-throughput applications

## üìÑ License

MIT License - see [LICENSE](https://github.com/Lavarite/FinPull/blob/main/LICENSE) file for details.

## üîó Links

- **Full Package**: [finpull](https://pypi.org/project/finpull/) - Complete version with CLI/GUI
- **Documentation**: [GitHub Repository](https://github.com/Lavarite/FinPull)
- **Issues**: [Bug Reports](https://github.com/Lavarite/FinPull/issues)

---

*FinPull Core - Enterprise-grade financial data access* 
