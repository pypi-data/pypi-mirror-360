[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "snmpwalk-parser"
version = "1.0.1"
description = "A comprehensive SNMP parser package for extracting and analyzing SNMP walk data"
authors = [
    {name = "Kunal Raut", email = "kunalraut489@gmail.com"}
]
maintainers = [
    {name = "Kunal Raut", email = "kunalraut489@gmail.com"}
]
license = {text = "MIT"}
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.7"
keywords = [
    "snmp", "snmpwalk", "network", "monitoring", "parser", 
    "network-management", "mib", "oid", "system-administration"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Networking",
    "Topic :: System :: Systems Administration",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "black>=21.0",
    "flake8>=3.8",
    "mypy>=0.800",
    "isort>=5.0",
    "pre-commit>=2.0",
]
docs = [
    "sphinx>=4.0",
    "sphinx-rtd-theme>=1.0",
    "myst-parser>=0.18",
]
examples = [
    "matplotlib>=3.0",
    "pandas>=1.0",
    "jupyter>=1.0",
    "plotly>=5.0",
]
test = [
    "pytest>=6.0",
    "pytest-cov>=2.0",
    "pytest-mock>=3.0",
    "coverage>=6.0",
]

[project.urls]
Homepage = "https://github.com/kunalraut666/snmpwalk-parser"
Documentation = "https://snmpwalk-parser.readthedocs.io/"
Repository = "https://github.com/kunalraut666/snmpwalk-parser"
Issues = "https://github.com/kunalraut666/snmpwalk-parser/issues"
Changelog = "https://github.com/kunalraut666/snmpwalk-parser/blob/main/CHANGELOG.md"

[project.scripts]
snmpwalk-parser = "snmpwalk_parser.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["snmpwalk_parser*"]
exclude = ["tests*", "docs*", "examples*"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.7"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--cov=snmpwalk_parser",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "--strict-config",
    "--doctest-modules",
]
testpaths = ["tests", "snmpwalk_parser"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["snmpwalk_parser"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/cli.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml yet)
# [tool.flake8] - Not supported yet, use setup.cfg instead