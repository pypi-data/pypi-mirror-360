# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mirrorearth_sdk

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class WeatherApiResponse(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WeatherApiResponse()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWeatherApiResponse(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # WeatherApiResponse
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WeatherApiResponse
    def Latitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # WeatherApiResponse
    def Longitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # WeatherApiResponse
    def Elevation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # WeatherApiResponse
    def GenerationTimeMilliseconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # WeatherApiResponse
    def LocationId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WeatherApiResponse
    def Model(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # WeatherApiResponse
    def UtcOffsetSeconds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # WeatherApiResponse
    def Timezone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WeatherApiResponse
    def TimezoneAbbreviation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WeatherApiResponse
    def Current(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from mirrorearth_sdk.VariablesWithTime import VariablesWithTime
            obj = VariablesWithTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WeatherApiResponse
    def Daily(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from mirrorearth_sdk.VariablesWithTime import VariablesWithTime
            obj = VariablesWithTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WeatherApiResponse
    def Hourly(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from mirrorearth_sdk.VariablesWithTime import VariablesWithTime
            obj = VariablesWithTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WeatherApiResponse
    def Minutely15(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from mirrorearth_sdk.VariablesWithTime import VariablesWithTime
            obj = VariablesWithTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WeatherApiResponse
    def SixHourly(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from mirrorearth_sdk.VariablesWithTime import VariablesWithTime
            obj = VariablesWithTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WeatherApiResponse
    def Monthly(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from mirrorearth_sdk.VariablesWithTime import VariablesWithTime
            obj = VariablesWithTime()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def WeatherApiResponseStart(builder):
    builder.StartObject(15)

def Start(builder):
    WeatherApiResponseStart(builder)

def WeatherApiResponseAddLatitude(builder, latitude):
    builder.PrependFloat32Slot(0, latitude, 0.0)

def AddLatitude(builder, latitude):
    WeatherApiResponseAddLatitude(builder, latitude)

def WeatherApiResponseAddLongitude(builder, longitude):
    builder.PrependFloat32Slot(1, longitude, 0.0)

def AddLongitude(builder, longitude):
    WeatherApiResponseAddLongitude(builder, longitude)

def WeatherApiResponseAddElevation(builder, elevation):
    builder.PrependFloat32Slot(2, elevation, 0.0)

def AddElevation(builder, elevation):
    WeatherApiResponseAddElevation(builder, elevation)

def WeatherApiResponseAddGenerationTimeMilliseconds(builder, generationTimeMilliseconds):
    builder.PrependFloat32Slot(3, generationTimeMilliseconds, 0.0)

def AddGenerationTimeMilliseconds(builder, generationTimeMilliseconds):
    WeatherApiResponseAddGenerationTimeMilliseconds(builder, generationTimeMilliseconds)

def WeatherApiResponseAddLocationId(builder, locationId):
    builder.PrependInt64Slot(4, locationId, 0)

def AddLocationId(builder, locationId):
    WeatherApiResponseAddLocationId(builder, locationId)

def WeatherApiResponseAddModel(builder, model):
    builder.PrependUint8Slot(5, model, 0)

def AddModel(builder, model):
    WeatherApiResponseAddModel(builder, model)

def WeatherApiResponseAddUtcOffsetSeconds(builder, utcOffsetSeconds):
    builder.PrependInt32Slot(6, utcOffsetSeconds, 0)

def AddUtcOffsetSeconds(builder, utcOffsetSeconds):
    WeatherApiResponseAddUtcOffsetSeconds(builder, utcOffsetSeconds)

def WeatherApiResponseAddTimezone(builder, timezone):
    builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(timezone), 0)

def AddTimezone(builder, timezone):
    WeatherApiResponseAddTimezone(builder, timezone)

def WeatherApiResponseAddTimezoneAbbreviation(builder, timezoneAbbreviation):
    builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(timezoneAbbreviation), 0)

def AddTimezoneAbbreviation(builder, timezoneAbbreviation):
    WeatherApiResponseAddTimezoneAbbreviation(builder, timezoneAbbreviation)

def WeatherApiResponseAddCurrent(builder, current):
    builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(current), 0)

def AddCurrent(builder, current):
    WeatherApiResponseAddCurrent(builder, current)

def WeatherApiResponseAddDaily(builder, daily):
    builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(daily), 0)

def AddDaily(builder, daily):
    WeatherApiResponseAddDaily(builder, daily)

def WeatherApiResponseAddHourly(builder, hourly):
    builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(hourly), 0)

def AddHourly(builder, hourly):
    WeatherApiResponseAddHourly(builder, hourly)

def WeatherApiResponseAddMinutely15(builder, minutely15):
    builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(minutely15), 0)

def AddMinutely15(builder, minutely15):
    WeatherApiResponseAddMinutely15(builder, minutely15)

def WeatherApiResponseAddSixHourly(builder, sixHourly):
    builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(sixHourly), 0)

def AddSixHourly(builder, sixHourly):
    WeatherApiResponseAddSixHourly(builder, sixHourly)

def WeatherApiResponseAddMonthly(builder, monthly):
    builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(monthly), 0)

def AddMonthly(builder, monthly):
    WeatherApiResponseAddMonthly(builder, monthly)

def WeatherApiResponseEnd(builder):
    return builder.EndObject()

def End(builder):
    return WeatherApiResponseEnd(builder)
