# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mirrorearth_sdk

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VariablesWithTime(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VariablesWithTime()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVariablesWithTime(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VariablesWithTime
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VariablesWithTime
    def Time(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # VariablesWithTime
    def TimeEnd(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # VariablesWithTime
    def Interval(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # VariablesWithTime
    def Variables(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from mirrorearth_sdk.VariableWithValues import VariableWithValues
            obj = VariableWithValues()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # VariablesWithTime
    def VariablesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VariablesWithTime
    def VariablesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

def VariablesWithTimeStart(builder):
    builder.StartObject(4)

def Start(builder):
    VariablesWithTimeStart(builder)

def VariablesWithTimeAddTime(builder, time):
    builder.PrependInt64Slot(0, time, 0)

def AddTime(builder, time):
    VariablesWithTimeAddTime(builder, time)

def VariablesWithTimeAddTimeEnd(builder, timeEnd):
    builder.PrependInt64Slot(1, timeEnd, 0)

def AddTimeEnd(builder, timeEnd):
    VariablesWithTimeAddTimeEnd(builder, timeEnd)

def VariablesWithTimeAddInterval(builder, interval):
    builder.PrependInt32Slot(2, interval, 0)

def AddInterval(builder, interval):
    VariablesWithTimeAddInterval(builder, interval)

def VariablesWithTimeAddVariables(builder, variables):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(variables), 0)

def AddVariables(builder, variables):
    VariablesWithTimeAddVariables(builder, variables)

def VariablesWithTimeStartVariablesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartVariablesVector(builder, numElems):
    return VariablesWithTimeStartVariablesVector(builder, numElems)

def VariablesWithTimeEnd(builder):
    return builder.EndObject()

def End(builder):
    return VariablesWithTimeEnd(builder)
