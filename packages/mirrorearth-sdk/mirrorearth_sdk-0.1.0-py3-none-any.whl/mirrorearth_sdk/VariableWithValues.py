# automatically generated by the FlatBuffers compiler, do not modify

# namespace: mirrorearth_sdk

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class VariableWithValues(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = VariableWithValues()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsVariableWithValues(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # VariableWithValues
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # VariableWithValues
    def Variable(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # VariableWithValues
    def Unit(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # VariableWithValues
    def Value(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # VariableWithValues
    def Values(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # VariableWithValues
    def ValuesAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # VariableWithValues
    def ValuesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VariableWithValues
    def ValuesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # VariableWithValues
    def ValuesInt64(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # VariableWithValues
    def ValuesInt64AsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # VariableWithValues
    def ValuesInt64Length(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # VariableWithValues
    def ValuesInt64IsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # VariableWithValues
    def Altitude(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # VariableWithValues
    def Aggregation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # VariableWithValues
    def PressureLevel(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # VariableWithValues
    def Depth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # VariableWithValues
    def DepthTo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # VariableWithValues
    def EnsembleMember(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

    # VariableWithValues
    def PreviousDay(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

def VariableWithValuesStart(builder):
    builder.StartObject(12)

def Start(builder):
    VariableWithValuesStart(builder)

def VariableWithValuesAddVariable(builder, variable):
    builder.PrependUint8Slot(0, variable, 0)

def AddVariable(builder, variable):
    VariableWithValuesAddVariable(builder, variable)

def VariableWithValuesAddUnit(builder, unit):
    builder.PrependUint8Slot(1, unit, 0)

def AddUnit(builder, unit):
    VariableWithValuesAddUnit(builder, unit)

def VariableWithValuesAddValue(builder, value):
    builder.PrependFloat32Slot(2, value, 0.0)

def AddValue(builder, value):
    VariableWithValuesAddValue(builder, value)

def VariableWithValuesAddValues(builder, values):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(values), 0)

def AddValues(builder, values):
    VariableWithValuesAddValues(builder, values)

def VariableWithValuesStartValuesVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartValuesVector(builder, numElems):
    return VariableWithValuesStartValuesVector(builder, numElems)

def VariableWithValuesAddValuesInt64(builder, valuesInt64):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(valuesInt64), 0)

def AddValuesInt64(builder, valuesInt64):
    VariableWithValuesAddValuesInt64(builder, valuesInt64)

def VariableWithValuesStartValuesInt64Vector(builder, numElems):
    return builder.StartVector(8, numElems, 8)

def StartValuesInt64Vector(builder, numElems):
    return VariableWithValuesStartValuesInt64Vector(builder, numElems)

def VariableWithValuesAddAltitude(builder, altitude):
    builder.PrependInt16Slot(5, altitude, 0)

def AddAltitude(builder, altitude):
    VariableWithValuesAddAltitude(builder, altitude)

def VariableWithValuesAddAggregation(builder, aggregation):
    builder.PrependUint8Slot(6, aggregation, 0)

def AddAggregation(builder, aggregation):
    VariableWithValuesAddAggregation(builder, aggregation)

def VariableWithValuesAddPressureLevel(builder, pressureLevel):
    builder.PrependInt16Slot(7, pressureLevel, 0)

def AddPressureLevel(builder, pressureLevel):
    VariableWithValuesAddPressureLevel(builder, pressureLevel)

def VariableWithValuesAddDepth(builder, depth):
    builder.PrependInt16Slot(8, depth, 0)

def AddDepth(builder, depth):
    VariableWithValuesAddDepth(builder, depth)

def VariableWithValuesAddDepthTo(builder, depthTo):
    builder.PrependInt16Slot(9, depthTo, 0)

def AddDepthTo(builder, depthTo):
    VariableWithValuesAddDepthTo(builder, depthTo)

def VariableWithValuesAddEnsembleMember(builder, ensembleMember):
    builder.PrependInt16Slot(10, ensembleMember, 0)

def AddEnsembleMember(builder, ensembleMember):
    VariableWithValuesAddEnsembleMember(builder, ensembleMember)

def VariableWithValuesAddPreviousDay(builder, previousDay):
    builder.PrependInt16Slot(11, previousDay, 0)

def AddPreviousDay(builder, previousDay):
    VariableWithValuesAddPreviousDay(builder, previousDay)

def VariableWithValuesEnd(builder):
    return builder.EndObject()

def End(builder):
    return VariableWithValuesEnd(builder)
