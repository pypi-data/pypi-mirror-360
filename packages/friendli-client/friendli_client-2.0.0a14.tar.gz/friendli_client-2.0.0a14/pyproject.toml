[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"

[project]
name = "friendli-client"
version = "2.0.0a14"
description = "Friendli Suite Client"
authors = [
    { name = "FriendliAI teams", email = "eng@friendli.ai" },
]
dependencies = [
    "typer>=0.12.3",
    "rich>=13.7.1",
    "pydantic>=2.8.2",
    "httpx[http2]<1.0.0,>=0.24.1",
    "trogon>=0.5.0",
    "keyring>=25.2.1",
    "questionary>=2.0.1",
    "graphql-core>=3.2.3",
    "websockets>=12.0",
    "eval-type-backport>=0.2.0",
]
requires-python = "<3.13,>=3.8.1"
readme = "README.md"
keywords = [
    "generative-ai",
    "serving",
    "llm",
    "inference",
    "finetuning",
]

[project.license]
text = "Apache-2.0"

[project.urls]
homepage = "https://friendli.ai/"
repository = "https://github.com/friendliai/friendli-client"
documentation = "https://friendli.ai/docs/"

[project.scripts]
friendli = "friendli.cli.app:app"

[tool.pdm]
distribution = true

[tool.pdm.dev-dependencies]
dev = []
test = [
    "pytest>=7.2.0",
    "pytest-cov>=4.0.0",
    "coverage[toml]>=6.4.3",
    "pytest-describe>=2.0.1",
    "pytest-sugar>=0.9.6",
]
lint = [
    "black>=22.12.0",
    "mypy>=1.0",
    "ruff>=0.0.246",
    "pytest>=7.2.0",
    "typing-extensions>=4.12.2",
]

[tool.black]
line-length = 88
target-version = [
    "py311",
]

[tool.ruff]
line-length = 88
target-version = "py311"
show-fixes = true
src = [
    "src",
    "test",
]
extend-exclude = [
    "src/friendli/graphql",
]

[tool.ruff.lint]
select = [
    "F",
    "E",
    "W",
    "C90",
    "I",
    "N",
    "D",
    "YTT",
    "ANN",
    "S",
    "BLE",
    "FBT",
    "B",
    "A",
    "C4",
    "DTZ",
    "T10",
    "EM",
    "EXE",
    "ISC",
    "ICN",
    "G",
    "PIE",
    "T20",
    "PYI",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SIM",
    "TID",
    "TCH",
    "ARG",
    "PTH",
    "ERA",
    "PGH",
    "PL",
    "TRY",
    "RUF",
]
ignore = [
    "E741",
    "N818",
    "B010",
    "PIE796",
    "PGH003",
    "TID252",
]
fixable = [
    "F",
    "E",
    "W",
    "C90",
    "I",
    "N",
    "D",
    "YTT",
    "ANN",
    "S",
    "BLE",
    "FBT",
    "B",
    "A",
    "C4",
    "DTZ",
    "T10",
    "EM",
    "EXE",
    "ISC",
    "ICN",
    "G",
    "PIE",
    "T20",
    "PYI",
    "PT",
    "Q",
    "RSE",
    "RET",
    "SLF",
    "SIM",
    "TID",
    "TCH",
    "ARG",
    "PTH",
    "PGH",
    "PL",
    "TRY",
    "RUF",
]
unfixable = [
    "ERA",
]
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
task-tags = [
    "TODO",
    "FIXME",
    "XXX",
]

[tool.ruff.per-file-ignores]
"__init__.py" = [
    "F401",
    "TC001",
]
"tests/**/*" = [
    "D",
    "ANN202",
    "ANN001",
    "ANN201",
    "S101",
    "TC003",
    "FBT001",
    "TC002",
    "DTZ005",
    "S311",
    "PLR0915",
    "PLR2004",
]

[tool.ruff.flake8-annotations]
allow-star-arg-any = true
suppress-dummy-args = true

[tool.ruff.flake8-bugbear]
extend-immutable-calls = [
    "fastapi.Depends",
    "fastapi.Query",
    "fastapi.Body",
    "fastapi.Header",
    "_common.di.integration.fastapi.inject",
]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.flake8-pytest-style]
raises-extend-require-match-for = [
    "httpx.HTTPError",
]

[tool.ruff.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.isort]
required-imports = [
    "from __future__ import annotations",
]
known-first-party = [
    "_3rdparty",
    "pf",
    "_common",
    "_datastructure",
    "_framework",
    "_testing",
]
known-local-folder = [
    "tests",
]
forced-separate = [
    "tests",
]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.pep8-naming]
classmethod-decorators = [
    "classmethod",
    "pydantic.validator",
]

[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true
max-doc-length = 88

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pylint]
max-args = 7

[tool.mypy]
check_untyped_defs = true
ignore_missing_imports = true
namespace_packages = true
fast_module_lookup = true
explicit_package_bases = true
disable_error_code = [
    "type-abstract",
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = false
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
addopts = "-rf --cov=src"
asyncio_mode = "auto"

[tool.coverage.run]
branch = true
source_pkgs = [
    "friendli",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@overload",
    "if TYPE_CHECKING:",
]
skip_covered = true
sort = "Cover"
