#!/usr/bin/env Rscript

# Copyright (C) 2025 UniversitÃ© de Reims Champagne-Ardenne.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     (1) Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#
#     (2) Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
#
#     (3)The name of the author may not be used to
#     endorse or promote products derived from this software without
#     specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

`%>%` <- magrittr::`%>%`

options (warn=1)

args <- commandArgs (trailingOnly = TRUE)

if ('-h' %in% args || '--help' %in% args) {
    cat (sprintf ("Usage: merge-annotations [-O DEST] DIR ...\n"))
    cat (sprintf ("\n"))
    cat (sprintf ("Merge annotations from all files in DIR with files in DEST. Traverse the directories recursively.\n"))
    cat (sprintf ("\n"))
    cat (sprintf ("If -O is unspecified, merge into the current working directory.\n"))
}

merge <- function (source_root) {
    source_files <- list.files (source_root, pattern = "\\.neonatal\\.annotations\\.csv$", recursive = TRUE)
    for (source in source_files) {
        existing <- tryCatch ({
            ## Operates from working directory
            readr::read_csv (source,
                             col_names = c ("onset", "duration", "figure_class", "electrode_list"),
                             col_types = list (readr::col_double (), readr::col_double (), readr::col_character (), readr::col_character ()))
        }, error = function (e) {
            print (e)
            warning (sprintf ("Cannot read existing annotation file %s/%s, assume there are no annotations.", getwd (), source))
            tibble::tibble (onset = numeric (0), duration = numeric (0), figure_class = character (0), electrode_list = character (0))
        })
        new <- tryCatch ({
            readr::read_csv (paste0 (source_root, "/", source),
                             col_names = c ("onset", "duration", "figure_class", "electrode_list"),
                             col_types = list (readr::col_double (), readr::col_double (), readr::col_character (), readr::col_character ()))
        }, error = function (e) {
            print (e)
            warning (sprintf ("Cannot read new annotation file %s/%s, ignore.", source_root, source))
            tibble::tibble (onset = numeric (0), duration = numeric (0), figure_class = character (0), electrode_list = character (0))
        })
        if (nrow (new) != 0) {
            total <- (dplyr::bind_rows (existing, new)
                %>% dplyr::arrange (onset, duration, figure_class, electrode_list)
                %>% dplyr::distinct (onset, duration, figure_class, electrode_list))
            dir.create (dirname (source), showWarnings = FALSE, recursive = TRUE)
            tryCatch ({
                readr::write_csv (total, source, col_names = FALSE)
            }, error = function (e) {
                print (e)
                warning (sprintf ("Cannot override file %s/%s, ignore.", getwd (), source))
            })
        }
    }
}

setting_output_directory <- FALSE

for (arg in args) {
    if (setting_output_directory) {
        setwd (arg)
        setting_output_directory <- FALSE
    } else if (arg == '-O') {
        setting_output_directory <- TRUE
    } else {
        merge (arg)
    }
}
