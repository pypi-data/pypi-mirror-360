#!/usr/bin/env python3
"""
WebSocket Authentication Test Client

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —Å JWT —Ç–æ–∫–µ–Ω–∞–º–∏.
"""

import asyncio
import json
import aiohttp
import websockets
from datetime import datetime

async def get_auth_token():
    """–ü–æ–ª—É—á–∏—Ç—å JWT —Ç–æ–∫–µ–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    async with aiohttp.ClientSession() as session:
        async with session.get('http://localhost:8021/api/generate-token') as response:
            data = await response.json()
            return data['token']

async def test_websocket_with_auth():
    """–¢–µ—Å—Ç WebSocket —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π."""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = await get_auth_token()
    print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω —Ç–æ–∫–µ–Ω: {token[:50]}...")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
    uri = "ws://localhost:8021/ws"
    
    try:
        async with websockets.connect(uri) as websocket:
            print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º welcome —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_response = await websocket.recv()
            welcome_data = json.loads(welcome_response)
            print(f"üì• Welcome: {welcome_data}")
            
            # –ü–æ–ª—É—á–∞–µ–º auth_required —Å–æ–æ–±—â–µ–Ω–∏–µ
            auth_required_response = await websocket.recv()
            auth_required_data = json.loads(auth_required_response)
            print(f"üì• Auth required: {auth_required_data}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            auth_message = {
                "type": "auth",
                "data": {"token": token}
            }
            await websocket.send(json.dumps(auth_message))
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            response = await websocket.recv()
            auth_response = json.loads(response)
            print(f"üì• –û—Ç–≤–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {auth_response}")
            
            if auth_response.get('type') == 'auth_success':
                print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                
                # –ü–æ–ª—É—á–∞–µ–º connection_info
                info_response = await websocket.recv()
                info_data = json.loads(info_response)
                print(f"üì• Connection info: {info_data}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
                chat_message = {
                    "type": "chat",
                    "data": {
                        "message": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π",
                        "room": "test_room",
                        "sender_name": "TestUser"
                    }
                }
                await websocket.send(json.dumps(chat_message))
                print("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                response = await websocket.recv()
                chat_response = json.loads(response)
                print(f"üì• –û—Ç–≤–µ—Ç —á–∞—Ç–∞: {chat_response}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                private_message = {
                    "type": "private_message",
                    "data": {
                        "target_id": "other_user",
                        "message": "–ü—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                        "sender_name": "TestUser"
                    }
                }
                await websocket.send(json.dumps(private_message))
                print("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                response = await websocket.recv()
                private_response = json.loads(response)
                print(f"üì• –û—Ç–≤–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {private_response}")
                
            else:
                print("‚ùå –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")

async def test_websocket_without_auth():
    """–¢–µ—Å—Ç WebSocket –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏."""
    print("\nüö´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
    
    uri = "ws://localhost:8021/ws"
    
    try:
        async with websockets.connect(uri) as websocket:
            print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º welcome —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_response = await websocket.recv()
            welcome_data = json.loads(welcome_response)
            print(f"üì• Welcome: {welcome_data}")
            
            # –ü–æ–ª—É—á–∞–µ–º auth_required —Å–æ–æ–±—â–µ–Ω–∏–µ
            auth_required_response = await websocket.recv()
            auth_required_data = json.loads(auth_required_response)
            print(f"üì• Auth required: {auth_required_data}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            chat_message = {
                "type": "chat",
                "data": {
                    "message": "–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                    "room": "test_room"
                }
            }
            await websocket.send(json.dumps(chat_message))
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            
            # –î–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å –æ—à–∏–±–∫—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            response = await websocket.recv()
            error_response = json.loads(response)
            print(f"üì• –û—Ç–≤–µ—Ç (–æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞): {error_response}")
            
            if error_response.get('type') == 'error' and 'AUTH_REQUIRED' in str(error_response):
                print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            else:
                print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")

async def test_invalid_token():
    """–¢–µ—Å—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º."""
    print("\nüö´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º...")
    
    uri = "ws://localhost:8021/ws"
    
    try:
        async with websockets.connect(uri) as websocket:
            print("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ü–æ–ª—É—á–∞–µ–º welcome —Å–æ–æ–±—â–µ–Ω–∏–µ
            welcome_response = await websocket.recv()
            welcome_data = json.loads(welcome_response)
            print(f"üì• Welcome: {welcome_data}")
            
            # –ü–æ–ª—É—á–∞–µ–º auth_required —Å–æ–æ–±—â–µ–Ω–∏–µ
            auth_required_response = await websocket.recv()
            auth_required_data = json.loads(auth_required_response)
            print(f"üì• Auth required: {auth_required_data}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω
            auth_message = {
                "type": "auth",
                "data": {"token": "invalid_token_123"}
            }
            await websocket.send(json.dumps(auth_message))
            print("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            response = await websocket.recv()
            auth_response = json.loads(response)
            print(f"üì• –û—Ç–≤–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {auth_response}")
            
            if auth_response.get('type') == 'auth_error':
                print("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞")
            else:
                print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ WebSocket: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ WebSocket –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get('http://localhost:8021/') as response:
                if response.status == 200:
                    print("‚úÖ –°–µ—Ä–≤–µ—Ä WebSocket –∑–∞–ø—É—â–µ–Ω")
                else:
                    print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
                    return
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    await test_websocket_with_auth()
    await test_websocket_without_auth()
    await test_invalid_token()
    
    print("\n" + "=" * 50)
    print("üèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == "__main__":
    asyncio.run(main()) 