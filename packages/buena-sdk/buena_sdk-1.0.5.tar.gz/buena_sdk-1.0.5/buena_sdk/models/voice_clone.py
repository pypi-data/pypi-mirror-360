# coding: utf-8

"""
    Buena.ai API v2

    The most powerful LinkedIn automation and lead management API for modern sales teams and developers.

    The version of the OpenAPI document: 2.0.0
    Contact: support@buena.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class VoiceClone(BaseModel):
    """
    VoiceClone
    """ # noqa: E501
    voice_id: Optional[StrictStr] = Field(default=None, description="Unique voice clone identifier", alias="voiceId")
    name: Optional[StrictStr] = Field(default=None, description="User-defined name for the voice clone")
    description: Optional[StrictStr] = Field(default=None, description="Description of the voice clone")
    is_active: Optional[StrictBool] = Field(default=None, description="Whether the voice clone is active and available for use", alias="isActive")
    sample_count: Optional[StrictInt] = Field(default=None, description="Number of audio samples used to train this voice", alias="sampleCount")
    created_at: Optional[datetime] = Field(default=None, description="When the voice clone was created", alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, description="When the voice clone was last updated", alias="updatedAt")
    labels: Optional[Dict[str, Any]] = Field(default=None, description="Metadata labels associated with the voice clone")
    __properties: ClassVar[List[str]] = ["voiceId", "name", "description", "isActive", "sampleCount", "createdAt", "updatedAt", "labels"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VoiceClone from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VoiceClone from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "voiceId": obj.get("voiceId"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "isActive": obj.get("isActive"),
            "sampleCount": obj.get("sampleCount"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "labels": obj.get("labels")
        })
        return _obj


