# coding: utf-8

"""
    Buena.ai API v2

    The most powerful LinkedIn automation and lead management API for modern sales teams and developers.

    The version of the OpenAPI document: 2.0.0
    Contact: support@buena.ai
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Lead(BaseModel):
    """
    Lead
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the lead")
    first_name: Optional[StrictStr] = Field(default=None, description="First name of the lead")
    last_name: Optional[StrictStr] = Field(default=None, description="Last name of the lead")
    email: Optional[StrictStr] = Field(default=None, description="Email address of the lead")
    company: Optional[StrictStr] = Field(default=None, description="Company name")
    title: Optional[StrictStr] = Field(default=None, description="Job title")
    linkedin_url: Optional[StrictStr] = Field(default=None, description="LinkedIn profile URL")
    status: Optional[StrictStr] = Field(default=None, description="Current status of the lead")
    created_at: Optional[datetime] = Field(default=None, description="When the lead was created")
    updated_at: Optional[datetime] = Field(default=None, description="When the lead was last updated")
    __properties: ClassVar[List[str]] = ["id", "first_name", "last_name", "email", "company", "title", "linkedin_url", "status", "created_at", "updated_at"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['new', 'contacted', 'responded', 'converted', 'unqualified']):
            raise ValueError("must be one of enum values ('new', 'contacted', 'responded', 'converted', 'unqualified')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Lead from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Lead from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "email": obj.get("email"),
            "company": obj.get("company"),
            "title": obj.get("title"),
            "linkedin_url": obj.get("linkedin_url"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


