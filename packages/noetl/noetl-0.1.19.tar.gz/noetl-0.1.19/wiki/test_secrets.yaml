# This NoETL DSL Playbook demonstrates how to test secrets using Google Secret Manager and LastPass
# with environment variables from the .env file.

apiVersion: noetl.io/v1
kind: Playbook
name: test_secrets
path: workflows/examples/test_secrets

workload:
  jobId: "{{ job.uuid }}"
  # Use direct project ID instead of template expressions that aren't being resolved
  gs_project_id: "noetl-demo-19700101"
  # Environment-based secret references for Google Secret Manager
  postgres_password_secret: "postgres-dev-password"
  api_key_secret: "api-key-secret"
  # LastPass credentials based on environment
  lastpass_username: "user@example.com"
  lastpass_password: "password123"
  lastpass_secret_name: "my-lastpass-secret"

workflow:
  - step: start
    desc: "Start Secrets Test Workflow"
    next:
      - step: get_postgres_password_step

  - step: get_postgres_password_step
    desc: "Retrieve Postgres password from Google Secret Manager"
    call:
      type: workbook
      name: get_postgres_password_task
    next:
      - step: get_api_key_step

  - step: get_api_key_step
    desc: "Retrieve API key from Google Secret Manager"
    call:
      type: workbook
      name: get_api_key_task
    next:
      - step: get_lastpass_secret_step

  - step: get_lastpass_secret_step
    desc: "Retrieve a secret from LastPass"
    call:
      type: workbook
      name: get_lastpass_secret_task
    next:
      - step: use_secrets_step

  - step: use_secrets_step
    desc: "Use the retrieved secrets"
    call:
      type: workbook
      name: use_secrets_task
      with:
        postgres_password: "{{ get_postgres_password_task.secret_value }}"
        api_key: "{{ get_api_key_task.secret_value }}"
        lastpass_secret: "{{ get_lastpass_secret_task.secret_value }}"
    next:
      - step: end

  - step: end
    desc: "End of workflow"

workbook:
  - name: get_postgres_password_task
    type: secrets
    provider: google
    project_id: "noetl-demo-19700101"
    secret_name: "postgres-dev-password"

  - name: get_api_key_task
    type: secrets
    provider: google
    project_id: "noetl-demo-19700101"
    secret_name: "api-key-secret"

  - name: get_lastpass_secret_task
    type: secrets
    provider: lastpass
    secret_name: "my-lastpass-secret"
    auth:
      username: "user@example.com"
      password: "password123"

  - name: use_secrets_task
    type: python
    with:
      postgres_password: "{{ postgres_password }}"
      api_key: "{{ api_key }}"
      lastpass_secret: "{{ lastpass_secret }}"
    code: |
      def main(postgres_password, api_key, lastpass_secret):
          # In a real scenario, you would use these secrets to authenticate to services
          # Here we just log that we received them (without revealing their values)
          print(f"Retrieved Postgres password: {'*' * len(postgres_password)}")
          print(f"Retrieved API key: {'*' * len(api_key)}")
          print(f"Retrieved LastPass secret: {'*' * len(lastpass_secret)}")

          # Example of using the secrets in a database connection
          print("\nExample database connection string (with password masked):")
          db_connection = f"postgresql://username:{'*' * len(postgres_password)}@hostname:5432/database"
          print(db_connection)

          # Example of using the API key in an API request
          print("\nExample API request (with key masked):")
          api_request = f"https://api.example.com/data?api_key={'*' * len(api_key)}"
          print(api_request)

          return {
              "status": "success",
              "message": "Successfully retrieved and used all secrets",
              "secrets_retrieved": 3,
              "environment": "dev"
          }
