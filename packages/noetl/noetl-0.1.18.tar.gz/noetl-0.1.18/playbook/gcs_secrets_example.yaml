# NoETL DSL Playbook for demonstrating Google Cloud Storage authentication using secrets.
# This playbook demonstrates:
# - Retrieving GCS HMAC credentials from Google Secret Manager
# - Creating a DuckDB secret for GCS authentication using the CREATE SECRET syntax
# - Using this secret for GCS operations
#
# Usage:
# noetl playbook --register playbook/gcs_secrets_example.yaml --port 8080
# noetl playbook --execute --path "workflows/examples/gcs_secrets_example" --payload '{"GOOGLE_CLOUD_PROJECT": "your-project-id"}'

apiVersion: noetl.io/v1
kind: Playbook
name: gcs_secrets_example
path: workflows/examples/gcs_secrets_example

workload:
  jobId: "{{ job.uuid }}"
  gs_project_id: "{{ env.GOOGLE_CLOUD_PROJECT | default('noetl-demo-19700101') }}"
  gs_bucket: "noetl-demo-19700101"
  gcs_key_id_secret: "{{ env.GCS_KEY_ID_SECRET | default('gcs-key-id') }}"
  gcs_secret_key_secret: "{{ env.GCS_SECRET_KEY_SECRET | default('gcs-secret-key') }}"
  source_csv_path: "data/test/test_data.csv"
  gs_csv_path: "uploads/test_data.csv"

workflow:
  - step: start
    desc: "Start GCS Secrets Example Workflow"
    next:
      - step: get_gcs_key_id

  - step: get_gcs_key_id
    desc: "Retrieve GCS HMAC Key ID from Google Secret Manager"
    call:
      type: secrets
      provider: google
      secret_name: "{{ workload.gcs_key_id_secret }}"
    next:
      - step: get_gcs_secret_key

  - step: get_gcs_secret_key
    desc: "Retrieve GCS HMAC Secret Key from Google Secret Manager"
    call:
      type: secrets
      provider: google
      secret_name: "{{ workload.gcs_secret_key_secret }}"
    next:
      - step: create_gcs_secret

  - step: create_gcs_secret
    desc: "Create DuckDB secret for GCS authentication"
    call:
      type: workbook
      name: create_gcs_secret_task
      with:
        key_id: "{{ get_gcs_key_id.secret_value }}"
        secret_key: "{{ get_gcs_secret_key.secret_value }}"
    next:
      - step: upload_csv_to_gs

  - step: upload_csv_to_gs
    desc: "Upload CSV file to Google Storage bucket using the created secret"
    call:
      type: workbook
      name: upload_csv_task
    next:
      - step: end

  - step: end
    desc: "End of workflow"

workbook:
  - name: create_gcs_secret_task
    type: duckdb
    with:
      key_id: "{{ key_id }}"
      secret_key: "{{ secret_key }}"
    commands: |
      -- Install and load necessary extensions
      INSTALL httpfs;
      LOAD httpfs;

      -- Create a DuckDB secret for GCS authentication
      CREATE OR REPLACE SECRET gcs_secret (
          TYPE gcs,
          KEY_ID '{{ key_id }}',
          SECRET '{{ secret_key }}'
      );

      SET s3_endpoint='storage.googleapis.com';
      SET s3_region='auto';
      SET s3_url_style='path';

      -- Test the secret by listing files in the bucket
      SELECT 'Secret created successfully' AS message;

  - name: upload_csv_task
    type: duckdb
    commands: |
      -- Install and load necessary extensions
      INSTALL httpfs;
      LOAD httpfs;

      -- Configure GCS endpoint (the authentication is handled by the secret)
      SET s3_endpoint='storage.googleapis.com';
      SET s3_region='auto';
      SET s3_url_style='path';

      -- Read CSV file directly from local filesystem using auto-detection
      CREATE TABLE temp_csv AS 
      SELECT * FROM read_csv_auto('{{ workload.source_csv_path }}', 
                                 all_varchar=false,  
                                 sample_size=-1);    
      -- all_varchar=false: Try to detect column types
      -- sample_size=-1: Use all rows for type detection

      -- Show the data and inferred types
      SELECT * FROM temp_csv;
      DESCRIBE temp_csv;

      -- Upload to Google Storage using the created secret
      COPY temp_csv TO 's3://{{ workload.gs_bucket }}/{{ workload.gs_csv_path }}' (FORMAT CSV, HEADER);

      -- Clean up
      DROP TABLE temp_csv;
