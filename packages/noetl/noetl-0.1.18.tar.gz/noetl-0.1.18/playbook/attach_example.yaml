# This is a NoETL DSL Playbook for demonstrating the DuckDB ATTACH functionality.
# It includes examples of attaching different database types.

apiVersion: noetl.io/v1
kind: Playbook
name: attach_example
path: workflows/data/attach_example

workload:
  jobId: "{{ job.uuid }}"
  baseFilePath: "/opt/noetl/data/test"
  bucket: "test-bucket"

workflow:
  - step: start
    desc: "Start ATTACH Example Workflow"
    next:
      - step: postgres_example

  - step: postgres_example
    desc: "PostgreSQL ATTACH Example"
    call:
      type: workbook
      name: postgres_attach_task
    next:
      - step: sqlite_example

  - step: sqlite_example
    desc: "SQLite ATTACH Example"
    call:
      type: workbook
      name: sqlite_attach_task
    next:
      - step: mysql_example

  - step: mysql_example
    desc: "MySQL ATTACH Example"
    call:
      type: workbook
      name: mysql_attach_task
    next:
      - step: custom_example

  - step: custom_example
    desc: "Custom ATTACH Example"
    call:
      type: workbook
      name: custom_attach_task
    next:
      - step: detach_example

  - step: detach_example
    desc: "DETACH Example"
    call:
      type: workbook
      name: detach_task
    next:
      - step: end

  - step: end
    desc: "End of workflow"

workbook:
  - name: postgres_attach_task
    type: duckdb
    with:
      db_type: postgres
      db_alias: pg_db
      db_host: localhost
      db_port: 5434
      db_user: noetl
      db_password: noetl
      db_name: noetl
    commands: |
      -- Create a test table in DuckDB
      CREATE TABLE IF NOT EXISTS test_table AS 
      SELECT 1 AS id, 'test1' AS name
      UNION ALL
      SELECT 2 AS id, 'test2' AS name;

      -- Create a PostgreSQL table
      CREATE TABLE IF NOT EXISTS pg_db.test_table (
          id INTEGER,
          name TEXT
      );

      -- Insert data into PostgreSQL
      INSERT INTO pg_db.test_table
      SELECT * FROM test_table;

      -- Query data from PostgreSQL
      SELECT * FROM pg_db.test_table;

  - name: sqlite_attach_task
    type: duckdb
    with:
      db_type: sqlite
      db_alias: sqlite_db
      db_path: "/opt/noetl/data/sqlite/test.db"
    commands: |
      -- Create a SQLite table
      CREATE TABLE IF NOT EXISTS sqlite_db.test_table (
          id INTEGER,
          name TEXT
      );

      -- Insert data into SQLite
      INSERT INTO sqlite_db.test_table
      SELECT * FROM test_table;

      -- Query data from SQLite
      SELECT * FROM sqlite_db.test_table;

  - name: mysql_attach_task
    type: duckdb
    with:
      db_type: mysql
      db_alias: mysql_db
      db_host: localhost
      db_port: 3306
      db_user: noetl
      db_password: noetl
      db_name: noetl
    commands: |
      -- Create a MySQL table
      CREATE TABLE IF NOT EXISTS mysql_db.test_table (
          id INTEGER,
          name TEXT
      );

      -- Insert data into MySQL
      INSERT INTO mysql_db.test_table
      SELECT * FROM test_table;

      -- Query data from MySQL
      SELECT * FROM mysql_db.test_table;

  - name: custom_attach_task
    type: duckdb
    with:
      db_type: custom
      db_alias: custom_db
      db_conn_string: "memory"
      db_read_only: true
    commands: |
      -- Create a table in the custom database
      CREATE TABLE IF NOT EXISTS custom_db.test_table (
          id INTEGER,
          name TEXT
      );

      -- Insert data into the custom database
      INSERT INTO custom_db.test_table
      SELECT * FROM test_table;

      -- Query data from the custom database
      SELECT * FROM custom_db.test_table;

  - name: detach_task
    type: duckdb
    commands: |
      -- Detach all databases
      DETACH pg_db;
      DETACH sqlite_db;
      DETACH mysql_db;
      DETACH custom_db;

      -- Clean up
      DROP TABLE IF EXISTS test_table;