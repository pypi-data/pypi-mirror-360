# NoETL DSL Playbook for testing the postgres task type.
# This playbook tests SQL execution in Postgres,
# noetl playbook --register playbook/postgres_test.yaml --port 8080
# noetl playbook --execute --path "workflows/examples/postgres_test"
apiVersion: noetl.io/v1
kind: Playbook
name: postgres_test
path: workflows/examples/postgres_test

workload:
  jobId: "{{ job.uuid }}"
  pg_host: "{{ env.POSTGRES_HOST | default('localhost') }}"
  pg_port: "{{ env.POSTGRES_PORT | default('5432') }}"
  pg_user: "{{ env.POSTGRES_USER | default('demo') }}"
  pg_password: "{{ env.POSTGRES_PASSWORD | default('demo') }}"
  pg_db: "{{ env.POSTGRES_DB | default('demo_noetl') }}"
  test_data: {
    "name": "Test User",
    "email": "test@example.com",
    "metadata": {
      "age": 30,
      "active": true,
      "tags": ["test", "example", "jsonb"]
    }
  }

workflow:
  - step: start
    desc: "Start Postgres Test Workflow"
    next:
      - step: setup_tables

#  - step: setup_tables
#    desc: "Create test tables in Postgres"
#    call:
#      type: workbook
#      name: setup_tables_task
#    next:
#      - step: insert_data

  - step: setup_tables
    desc: "Create test tables in Postgres"
    call:
      name: setup_tables_task
      type: postgres
      with:
        db_host: "{{ workload.pg_host }}"
        db_port: "{{ workload.pg_port }}"
        db_user: "{{ workload.pg_user }}"
        db_password: "{{ workload.pg_password }}"
        db_name: "{{ workload.pg_db }}"
      commands: |
        DROP TABLE IF EXISTS postgres_test_users;
        
        CREATE TABLE IF NOT EXISTS postgres_test_users (
          id SERIAL PRIMARY KEY,
          name VARCHAR(100) NOT NULL,
          email VARCHAR(100) UNIQUE NOT NULL,
          metadata JSONB,
          created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );
        
        CREATE OR REPLACE FUNCTION get_json_field(data JSONB, field TEXT)
        RETURNS TEXT AS $$
        BEGIN
          RETURN data->>field;
        END
        $$ LANGUAGE plpgsql;
    next:
      - step: insert_data


  - step: insert_data
    desc: "Insert test data with JSONB"
    call:
      type: workbook
      name: insert_data_task
      with:
        test_data: "{{ workload.test_data }}"
    next:
      - step: query_data

  - step: query_data
    desc: "Query data including JSONB fields"
    call:
      type: workbook
      name: query_data_task
    next:
      - step: update_data_task

  - step: update_data_task
    desc: "Update data task"
    call:
      type: workbook
      name: update_data_task
    next:
      - step: end

  - step: end
    desc: "End of workflow"

workbook:

  - name: setup_tables_task
    type: postgres
    with:
      db_host: "{{ workload.pg_host }}"
      db_port: "{{ workload.pg_port }}"
      db_user: "{{ workload.pg_user }}"
      db_password: "{{ workload.pg_password }}"
      db_name: "{{ workload.pg_db }}"
    commands: |
      DROP TABLE IF EXISTS postgres_test_users;
      
      CREATE TABLE IF NOT EXISTS postgres_test_users (
        id SERIAL PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        email VARCHAR(100) UNIQUE NOT NULL,
        metadata JSONB,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      );
      
      CREATE OR REPLACE FUNCTION get_json_field(data JSONB, field TEXT)
      RETURNS TEXT AS $$
      BEGIN
        RETURN data->>field;
      END
      $$ LANGUAGE plpgsql;


  - name: insert_data_task
    type: postgres
    with:
      db_host: "{{ workload.pg_host }}"
      db_port: "{{ workload.pg_port }}"
      db_user: "{{ workload.pg_user }}"
      db_password: "{{ workload.pg_password }}"
      db_name: "{{ workload.pg_db }}"
    commands: |
      INSERT INTO postgres_test_users (name, email, metadata)
      VALUES (
        '{{ workload.test_data.name }}',
        '{{ workload.test_data.email }}',
        '{{ workload.test_data.metadata | tojson }}'::JSONB
      );
      
      INSERT INTO postgres_test_users (name, email, metadata)
      VALUES (
        'Another User',
        'another@example.com',
        '{"age": 25, "active": false, "tags": ["another", "test"]}'::JSONB
      );


  - name: query_data_task
    type: postgres
    with:
      db_host: "{{ workload.pg_host }}"
      db_port: "{{ workload.pg_port }}"
      db_user: "{{ workload.pg_user }}"
      db_password: "{{ workload.pg_password }}"
      db_name: "{{ workload.pg_db }}"
    commands: |
      SELECT 
        id, 
        name, 
        email, 
        metadata,
        created_at::TEXT as created_at
      FROM postgres_test_users;
      
      SELECT 
        id, 
        name, 
        email, 
        metadata,
        created_at::TEXT as created_at
      FROM postgres_test_users 
      WHERE metadata->>'active' = 'true';
      
      SELECT 
        id, 
        name, 
        email, 
        metadata,
        created_at::TEXT as created_at
      FROM postgres_test_users 
      WHERE metadata->'tags' ? 'test';

  - name: update_data_task
    type: postgres
    with:
      db_host: "{{ workload.pg_host }}"
      db_port: "{{ workload.pg_port }}"
      db_user: "{{ workload.pg_user }}"
      db_password: "{{ workload.pg_password }}"
      db_name: "{{ workload.pg_db }}"
    commands: |
      SELECT id, name, metadata->>'age' as age FROM postgres_test_users;
      UPDATE postgres_test_users SET metadata = jsonb_set(metadata, '{active}', 'false'::jsonb) WHERE id = 1;
      SELECT id, name, metadata->>'active' as is_active FROM postgres_test_users WHERE id = 1;
