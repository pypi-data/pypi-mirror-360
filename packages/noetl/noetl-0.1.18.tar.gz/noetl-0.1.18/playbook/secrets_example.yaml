# This NoETL DSL Playbook shows the secrets' task type.

apiVersion: noetl.io/v1
kind: Playbook
name: secrets_example
path: workflows/examples/secrets_example

workload:  # Input parameters section accessible throughout the workflow
  jobId: "{{ job.uuid }}"
  # Secret names to retrieve
  google_secret_name: "my-google-secret"
  aws_secret_name: "my-aws-secret"
  azure_secret_name: "my-azure-secret"
  lastpass_secret_name: "my-lastpass-secret"
  custom_secret_name: "my-custom-secret"
  # Project/account information
  google_project_id: "{{ env.GOOGLE_CLOUD_PROJECT | default('my-google-project') }}"
  aws_region: "{{ env.AWS_REGION | default('us-east-1') }}"
  azure_vault_name: "my-key-vault"
  # Custom API endpoint
  custom_api_endpoint: "https://my-custom-secret-manager.example.com/api/secrets"

workflow:  # Workflow steps and transitions
  - step: start  # Entry point of the workflow
    desc: "Start Secrets Example Workflow"
    next:
      - step: google_secret_step

  - step: google_secret_step
    desc: "Retrieve a secret from Google Secret Manager"
    call:
      type: workbook
      name: google_secret_task
    next:
      - step: aws_secret_step

  - step: aws_secret_step
    desc: "Retrieve a secret from AWS Secrets Manager"
    call:
      type: workbook
      name: aws_secret_task
    next:
      - step: azure_secret_step

  - step: azure_secret_step
    desc: "Retrieve a secret from Azure Key Vault"
    call:
      type: workbook
      name: azure_secret_task
    next:
      - step: lastpass_secret_step

  - step: lastpass_secret_step
    desc: "Retrieve a secret from LastPass"
    call:
      type: workbook
      name: lastpass_secret_task
    next:
      - step: custom_secret_step

  - step: custom_secret_step
    desc: "Retrieve a secret from a custom API"
    call:
      type: workbook
      name: custom_secret_task
    next:
      - step: use_secrets_step

  - step: use_secrets_step
    desc: "Use the retrieved secrets"
    call:
      type: workbook
      name: use_secrets_task
      with:
        google_secret: "{{ google_secret_task.secret_value }}"
        aws_secret: "{{ aws_secret_task.secret_value }}"
        azure_secret: "{{ azure_secret_task.secret_value }}"
        lastpass_secret: "{{ lastpass_secret_task.secret_value }}"
        custom_secret: "{{ custom_secret_task.secret_value }}"
    next:
      - step: end

  - step: end
    desc: "End of workflow"

workbook:  # Execution blocks used in the workflow
  - name: google_secret_task
    type: secrets
    provider: google
    secret_name: "{{ workload.google_secret_name }}"
    project_id: "{{ workload.google_project_id }}"
    version: "latest"  # Optional, defaults to 'latest'

  - name: aws_secret_task
    type: secrets
    provider: aws
    secret_name: "{{ workload.aws_secret_name }}"
    region: "{{ workload.aws_region }}"  # Optional, defaults to AWS_REGION env var or 'us-east-1'

  - name: azure_secret_task
    type: secrets
    provider: azure
    secret_name: "{{ workload.azure_secret_name }}"
    vault_name: "{{ workload.azure_vault_name }}"

  - name: lastpass_secret_task
    type: secrets
    provider: lastpass
    secret_name: "{{ workload.lastpass_secret_name }}"
    auth:
      username: "{{ env.LASTPASS_USERNAME }}"
      password: "{{ env.LASTPASS_PASSWORD }}"

  - name: custom_secret_task
    type: secrets
    provider: custom
    secret_name: "{{ workload.custom_secret_name }}"
    api_endpoint: "{{ workload.custom_api_endpoint }}"
    auth:
      method: "POST"
      headers:
        Content-Type: "application/json"
        Authorization: "Bearer {{ env.CUSTOM_SECRET_MANAGER_TOKEN }}"
      payload:
        additional_param: "some_value"

  - name: use_secrets_task
    type: python
    with:
      google_secret: "{{ google_secret }}"
      aws_secret: "{{ aws_secret }}"
      azure_secret: "{{ azure_secret }}"
      lastpass_secret: "{{ lastpass_secret }}"
      custom_secret: "{{ custom_secret }}"
    code: |
      def main(google_secret, aws_secret, azure_secret, lastpass_secret, custom_secret):
          # In a real scenario, you would use these secrets to authenticate to services
          # Here we just log that we received them (without revealing their values)
          print(f"Retrieved Google secret: {'*' * len(google_secret)}")
          print(f"Retrieved AWS secret: {'*' * len(aws_secret)}")
          print(f"Retrieved Azure secret: {'*' * len(azure_secret)}")
          print(f"Retrieved LastPass secret: {'*' * len(lastpass_secret)}")
          print(f"Retrieved Custom secret: {'*' * len(custom_secret)}")
          
          return {
              "status": "success",
              "message": "Successfully retrieved and used all secrets",
              "secrets_retrieved": 5
          }