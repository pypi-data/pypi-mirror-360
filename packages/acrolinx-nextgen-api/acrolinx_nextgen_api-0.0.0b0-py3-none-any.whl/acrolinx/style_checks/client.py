# This file was auto-generated by Fern from our API Definition.

import typing

from .. import core
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.dialects import Dialects
from ..types.tones import Tones
from ..types.workflow_response import WorkflowResponse
from .raw_client import AsyncRawStyleChecksClient, RawStyleChecksClient
from .types.style_checks_get_style_check_response import StyleChecksGetStyleCheckResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class StyleChecksClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawStyleChecksClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawStyleChecksClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawStyleChecksClient
        """
        return self._raw_client

    def create_style_check(
        self,
        *,
        file_upload: core.File,
        dialect: typing.Optional[Dialects] = OMIT,
        tone: typing.Optional[Tones] = OMIT,
        style_guide: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WorkflowResponse:
        """
        Start a style and brand check run. Returns a workflow ID for each file.

        Parameters
        ----------
        file_upload : core.File
            See core.File for more documentation

        dialect : typing.Optional[Dialects]
            The language variant you'd like us to use for analysis. Choose from American English, British English, or other supported dialects.

        tone : typing.Optional[Tones]
            The tone variation you're aiming for. Options include formal, academic, casual, and other tone variations to match your content goals.

        style_guide : typing.Optional[str]
            The style guide to follow for your content. You can use a custom style guide ID or choose from built-in options like AP, Chicago, or Microsoft style guides.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WorkflowResponse
            Check run started successfully.

        Examples
        --------
        from acrolinx import Acrolinx

        client = Acrolinx(
            token="YOUR_TOKEN",
        )
        client.style_checks.create_style_check()
        """
        _response = self._raw_client.create_style_check(
            file_upload=file_upload,
            dialect=dialect,
            tone=tone,
            style_guide=style_guide,
            request_options=request_options,
        )
        return _response.data

    def get_style_check(
        self, workflow_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> StyleChecksGetStyleCheckResponse:
        """
        get the results of a style and brand check run.

        Parameters
        ----------
        workflow_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StyleChecksGetStyleCheckResponse
            The style and brand check run results.

        Examples
        --------
        from acrolinx import Acrolinx

        client = Acrolinx(
            token="YOUR_TOKEN",
        )
        client.style_checks.get_style_check(
            workflow_id="workflow_id",
        )
        """
        _response = self._raw_client.get_style_check(workflow_id, request_options=request_options)
        return _response.data


class AsyncStyleChecksClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawStyleChecksClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawStyleChecksClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawStyleChecksClient
        """
        return self._raw_client

    async def create_style_check(
        self,
        *,
        file_upload: core.File,
        dialect: typing.Optional[Dialects] = OMIT,
        tone: typing.Optional[Tones] = OMIT,
        style_guide: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> WorkflowResponse:
        """
        Start a style and brand check run. Returns a workflow ID for each file.

        Parameters
        ----------
        file_upload : core.File
            See core.File for more documentation

        dialect : typing.Optional[Dialects]
            The language variant you'd like us to use for analysis. Choose from American English, British English, or other supported dialects.

        tone : typing.Optional[Tones]
            The tone variation you're aiming for. Options include formal, academic, casual, and other tone variations to match your content goals.

        style_guide : typing.Optional[str]
            The style guide to follow for your content. You can use a custom style guide ID or choose from built-in options like AP, Chicago, or Microsoft style guides.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WorkflowResponse
            Check run started successfully.

        Examples
        --------
        import asyncio

        from acrolinx import AsyncAcrolinx

        client = AsyncAcrolinx(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.style_checks.create_style_check()


        asyncio.run(main())
        """
        _response = await self._raw_client.create_style_check(
            file_upload=file_upload,
            dialect=dialect,
            tone=tone,
            style_guide=style_guide,
            request_options=request_options,
        )
        return _response.data

    async def get_style_check(
        self, workflow_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> StyleChecksGetStyleCheckResponse:
        """
        get the results of a style and brand check run.

        Parameters
        ----------
        workflow_id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        StyleChecksGetStyleCheckResponse
            The style and brand check run results.

        Examples
        --------
        import asyncio

        from acrolinx import AsyncAcrolinx

        client = AsyncAcrolinx(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.style_checks.get_style_check(
                workflow_id="workflow_id",
            )


        asyncio.run(main())
        """
        _response = await self._raw_client.get_style_check(workflow_id, request_options=request_options)
        return _response.data
