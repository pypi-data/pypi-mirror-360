
# Autogenerated by mlir-tblgen; don't manually edit.

from enum import IntEnum, auto, IntFlag
from ._ods_common import _cext as _ods_cext
from ..ir import register_attribute_builder
_ods_ir = _ods_cext.ir

class FilterSemantic(IntEnum):
    """allowed 64-bit signless integer cases: 0, 1"""

    all_true = 0
    none_true = 1

    def __str__(self):
        if self is FilterSemantic.all_true:
            return "all_true"
        if self is FilterSemantic.none_true:
            return "none_true"
        raise ValueError("Unknown FilterSemantic enum entry.")



@register_attribute_builder("FilterSemantic")
def _filtersemantic(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

