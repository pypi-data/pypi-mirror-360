
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import (
    equally_sized_accessor as _ods_equally_sized_accessor,
    get_default_loc_context as _ods_get_default_loc_context,
    get_op_result_or_op_results as _get_op_result_or_op_results,
    get_op_results_or_values as _get_op_results_or_values,
    segmented_accessor as _ods_segmented_accessor,
)
_ods_ir = _ods_cext.ir

import builtins
from typing import Sequence as _Sequence, Union as _Union


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "tuples"

@_ods_cext.register_operation(_Dialect)
class GetColumnOp(_ods_ir.OpView):
  OPERATION_NAME = "tuples.getcol"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, attr, tuple, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(tuple)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["attr"] = (attr if (
    isinstance(attr, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('ColumnRefAttr')) else
      _ods_ir.AttrBuilder.get('ColumnRefAttr')(attr, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def tuple(self):
    return self.operation.operands[0]

  @builtins.property
  def attr(self):
    return self.operation.attributes["attr"]

  @attr.setter
  def attr(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["attr"] = value

  @builtins.property
  def res(self):
    return self.operation.results[0]

def getcol(res, attr, tuple, *, loc=None, ip=None) -> _ods_ir.Value:
  return GetColumnOp(res=res, attr=attr, tuple=tuple, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class GetParamVal(_ods_ir.OpView):
  OPERATION_NAME = "tuples.get_param_val"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, param, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(param)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def param(self):
    return self.operation.operands[0]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def get_param_val(res, param, *, loc=None, ip=None) -> _ods_ir.Value:
  return GetParamVal(res=res, param=param, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class ReturnOp(_ods_ir.OpView):
  OPERATION_NAME = "tuples.return"

  _ODS_REGIONS = (0, True)

  def __init__(self, results_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(results_))
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def results_(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

def return_(results_, *, loc=None, ip=None) -> _ods_ir.Operation:
  return ReturnOp(results_=results_, loc=loc, ip=ip)
