
# Autogenerated by mlir-tblgen; don't manually edit.

from enum import IntEnum, auto, IntFlag
from ._ods_common import _cext as _ods_cext
from ..ir import register_attribute_builder
_ods_ir = _ods_cext.ir

class DBCmpPredicate(IntEnum):
    """allowed 64-bit signless integer cases: 0, 1, 2, 3, 4, 5, 6"""

    eq = 0
    neq = 1
    lt = 2
    lte = 3
    gt = 4
    gte = 5
    isa = 6

    def __str__(self):
        if self is DBCmpPredicate.eq:
            return "eq"
        if self is DBCmpPredicate.neq:
            return "neq"
        if self is DBCmpPredicate.lt:
            return "lt"
        if self is DBCmpPredicate.lte:
            return "lte"
        if self is DBCmpPredicate.gt:
            return "gt"
        if self is DBCmpPredicate.gte:
            return "gte"
        if self is DBCmpPredicate.isa:
            return "isa"
        raise ValueError("Unknown DBCmpPredicate enum entry.")



@register_attribute_builder("DB_CmpPredicateAttr")
def _db_cmppredicateattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

class DateUnitAttr(IntEnum):
    """allowed 64-bit signless integer cases: 0, 1"""

    day = 0
    millisecond = 1

    def __str__(self):
        if self is DateUnitAttr.day:
            return "day"
        if self is DateUnitAttr.millisecond:
            return "millisecond"
        raise ValueError("Unknown DateUnitAttr enum entry.")



@register_attribute_builder("DB_DateUnitAttr")
def _db_dateunitattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

class IntervalUnitAttr(IntEnum):
    """allowed 64-bit signless integer cases: 0, 1"""

    months = 0
    daytime = 1

    def __str__(self):
        if self is IntervalUnitAttr.months:
            return "months"
        if self is IntervalUnitAttr.daytime:
            return "daytime"
        raise ValueError("Unknown IntervalUnitAttr enum entry.")



@register_attribute_builder("DB_IntervalUnitAttr")
def _db_intervalunitattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

class TimeUnitAttr(IntEnum):
    """allowed 64-bit signless integer cases: 0, 1, 2, 3"""

    second = 0
    millisecond = 1
    microsecond = 2
    nanosecond = 3

    def __str__(self):
        if self is TimeUnitAttr.second:
            return "second"
        if self is TimeUnitAttr.millisecond:
            return "millisecond"
        if self is TimeUnitAttr.microsecond:
            return "microsecond"
        if self is TimeUnitAttr.nanosecond:
            return "nanosecond"
        raise ValueError("Unknown TimeUnitAttr enum entry.")



@register_attribute_builder("DB_TimeUnitAttr")
def _db_timeunitattr(x, context):
    return _ods_ir.IntegerAttr.get(_ods_ir.IntegerType.get_signless(64, context=context), int(x))

