
# Autogenerated by mlir-tblgen; don't manually edit.

from ._ods_common import _cext as _ods_cext
from ._ods_common import (
    equally_sized_accessor as _ods_equally_sized_accessor,
    get_default_loc_context as _ods_get_default_loc_context,
    get_op_result_or_op_results as _get_op_result_or_op_results,
    get_op_results_or_values as _get_op_results_or_values,
    segmented_accessor as _ods_segmented_accessor,
)
_ods_ir = _ods_cext.ir

import builtins
from typing import Sequence as _Sequence, Union as _Union


@_ods_cext.register_dialect
class _Dialect(_ods_ir.Dialect):
  DIALECT_NAMESPACE = "util"

@_ods_cext.register_operation(_Dialect)
class AllocOp(_ods_ir.OpView):
  OPERATION_NAME = "util.alloc"

  _ODS_REGIONS = (0, True)

  def __init__(self, ref, *, size=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    if size is not None: operands.append(size)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(ref)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def size(self):
    return None if len(self.operation.operands) < 1 else self.operation.operands[0]

  @builtins.property
  def ref(self):
    return self.operation.results[0]

def alloc(ref, *, size=None, loc=None, ip=None) -> _ods_ir.Value:
  return AllocOp(ref=ref, size=size, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class AllocaOp(_ods_ir.OpView):
  OPERATION_NAME = "util.alloca"

  _ODS_REGIONS = (0, True)

  def __init__(self, ref, *, size=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    if size is not None: operands.append(size)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(ref)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def size(self):
    return None if len(self.operation.operands) < 1 else self.operation.operands[0]

  @builtins.property
  def ref(self):
    return self.operation.results[0]

def alloca(ref, *, size=None, loc=None, ip=None) -> _ods_ir.Value:
  return AllocaOp(ref=ref, size=size, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class ArrayElementPtrOp(_ods_ir.OpView):
  OPERATION_NAME = "util.arrayelementptr"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, ref, idx, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(ref)
    operands.append(idx)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def ref(self):
    return self.operation.operands[0]

  @builtins.property
  def idx(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def arrayelementptr(res, ref, idx, *, loc=None, ip=None) -> _ods_ir.Value:
  return ArrayElementPtrOp(res=res, ref=ref, idx=idx, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class BufferCastOp(_ods_ir.OpView):
  OPERATION_NAME = "util.buffer_cast"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, val, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(val)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def val(self):
    return self.operation.operands[0]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def buffer_cast(res, val, *, loc=None, ip=None) -> _ods_ir.Value:
  return BufferCastOp(res=res, val=val, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class BufferCreateOp(_ods_ir.OpView):
  OPERATION_NAME = "util.buffer_create"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, ptr, len, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(ptr)
    operands.append(len)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def ptr(self):
    return self.operation.operands[0]

  @builtins.property
  def len(self):
    return self.operation.operands[1]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def buffer_create(res, ptr, len, *, loc=None, ip=None) -> _ods_ir.Value:
  return BufferCreateOp(res=res, ptr=ptr, len=len, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class BufferGetElementRef(_ods_ir.OpView):
  OPERATION_NAME = "util.buffer_getelementref"

  _ODS_REGIONS = (0, True)

  def __init__(self, ref, buffer, idx, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(buffer)
    operands.append(idx)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(ref)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def idx(self):
    return self.operation.operands[1]

  @builtins.property
  def ref(self):
    return self.operation.results[0]

def buffer_getelementref(ref, buffer, idx, *, loc=None, ip=None) -> _ods_ir.Value:
  return BufferGetElementRef(ref=ref, buffer=buffer, idx=idx, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class BufferGetLen(_ods_ir.OpView):
  OPERATION_NAME = "util.buffer_getlen"

  _ODS_REGIONS = (0, True)

  def __init__(self, len, buffer, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(buffer)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(len)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def len(self):
    return self.operation.results[0]

def buffer_getlen(len, buffer, *, loc=None, ip=None) -> _ods_ir.Value:
  return BufferGetLen(len=len, buffer=buffer, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class BufferGetMemRefOp(_ods_ir.OpView):
  OPERATION_NAME = "util.buffer_get_memref"

  _ODS_REGIONS = (0, True)

  def __init__(self, memref, buffer, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(buffer)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(memref)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def memref(self):
    return self.operation.results[0]

def buffer_get_memref(memref, buffer, *, loc=None, ip=None) -> _ods_ir.Value:
  return BufferGetMemRefOp(memref=memref, buffer=buffer, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class BufferGetRef(_ods_ir.OpView):
  OPERATION_NAME = "util.buffer_getref"

  _ODS_REGIONS = (0, True)

  def __init__(self, ref, buffer, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(buffer)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(ref)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def buffer(self):
    return self.operation.operands[0]

  @builtins.property
  def ref(self):
    return self.operation.results[0]

def buffer_getref(ref, buffer, *, loc=None, ip=None) -> _ods_ir.Value:
  return BufferGetRef(ref=ref, buffer=buffer, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CreateConstVarLen(_ods_ir.OpView):
  OPERATION_NAME = "util.varlen32_create_const"

  _ODS_REGIONS = (0, True)

  def __init__(self, varlen, str, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["str"] = (str if (
    isinstance(str, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('StrAttr')) else
      _ods_ir.AttrBuilder.get('StrAttr')(str, context=_ods_context))
    results.append(varlen)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def str(self):
    return self.operation.attributes["str"]

  @str.setter
  def str(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["str"] = value

  @builtins.property
  def varlen(self):
    return self.operation.results[0]

def varlen32_create_const(varlen, str, *, loc=None, ip=None) -> _ods_ir.Value:
  return CreateConstVarLen(varlen=varlen, str=str, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class CreateVarLen(_ods_ir.OpView):
  OPERATION_NAME = "util.varlen32_create"

  _ODS_REGIONS = (0, True)

  def __init__(self, varlen, ref, len, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(ref)
    operands.append(len)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(varlen)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def ref(self):
    return self.operation.operands[0]

  @builtins.property
  def len(self):
    return self.operation.operands[1]

  @builtins.property
  def varlen(self):
    return self.operation.results[0]

def varlen32_create(varlen, ref, len, *, loc=None, ip=None) -> _ods_ir.Value:
  return CreateVarLen(varlen=varlen, ref=ref, len=len, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class DeAllocOp(_ods_ir.OpView):
  OPERATION_NAME = "util.dealloc"

  _ODS_REGIONS = (0, True)

  def __init__(self, ref, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(ref)
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def ref(self):
    return self.operation.operands[0]

def dealloc(ref, *, loc=None, ip=None) -> _ods_ir.Operation:
  return DeAllocOp(ref=ref, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class GenericMemrefCastOp(_ods_ir.OpView):
  OPERATION_NAME = "util.generic_memref_cast"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, val, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(val)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def val(self):
    return self.operation.operands[0]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def generic_memref_cast(res, val, *, loc=None, ip=None) -> _ods_ir.Value:
  return GenericMemrefCastOp(res=res, val=val, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class GetTupleOp(_ods_ir.OpView):
  OPERATION_NAME = "util.get_tuple"

  _ODS_REGIONS = (0, True)

  def __init__(self, val, tuple, offset, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(tuple)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["offset"] = (offset if (
    isinstance(offset, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(offset, context=_ods_context))
    results.append(val)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def tuple(self):
    return self.operation.operands[0]

  @builtins.property
  def offset(self):
    return self.operation.attributes["offset"]

  @offset.setter
  def offset(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["offset"] = value

  @builtins.property
  def val(self):
    return self.operation.results[0]

def get_tuple(val, tuple, offset, *, loc=None, ip=None) -> _ods_ir.Value:
  return GetTupleOp(val=val, tuple=tuple, offset=offset, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class Hash64(_ods_ir.OpView):
  OPERATION_NAME = "util.hash_64"

  _ODS_REGIONS = (0, True)

  def __init__(self, hash, val, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(val)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(hash)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def val(self):
    return self.operation.operands[0]

  @builtins.property
  def hash(self):
    return self.operation.results[0]

def hash_64(hash, val, *, loc=None, ip=None) -> _ods_ir.Value:
  return Hash64(hash=hash, val=val, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class HashCombine(_ods_ir.OpView):
  OPERATION_NAME = "util.hash_combine"

  _ODS_REGIONS = (0, True)

  def __init__(self, hash, h1, h2, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(h1)
    operands.append(h2)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(hash)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def h1(self):
    return self.operation.operands[0]

  @builtins.property
  def h2(self):
    return self.operation.operands[1]

  @builtins.property
  def hash(self):
    return self.operation.results[0]

def hash_combine(hash, h1, h2, *, loc=None, ip=None) -> _ods_ir.Value:
  return HashCombine(hash=hash, h1=h1, h2=h2, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class HashVarLen(_ods_ir.OpView):
  OPERATION_NAME = "util.hash_varlen"

  _ODS_REGIONS = (0, True)

  def __init__(self, hash, val, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(val)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(hash)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def val(self):
    return self.operation.operands[0]

  @builtins.property
  def hash(self):
    return self.operation.results[0]

def hash_varlen(hash, val, *, loc=None, ip=None) -> _ods_ir.Value:
  return HashVarLen(hash=hash, val=val, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class InvalidRefOp(_ods_ir.OpView):
  OPERATION_NAME = "util.invalid_ref"

  _ODS_REGIONS = (0, True)

  def __init__(self, ref, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(ref)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def ref(self):
    return self.operation.results[0]

def invalid_ref(ref, *, loc=None, ip=None) -> _ods_ir.Value:
  return InvalidRefOp(ref=ref, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class IsRefValidOp(_ods_ir.OpView):
  OPERATION_NAME = "util.is_ref_valid"

  _ODS_REGIONS = (0, True)

  def __init__(self, valid, ref, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(ref)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(valid)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def ref(self):
    return self.operation.operands[0]

  @builtins.property
  def valid(self):
    return self.operation.results[0]

def is_ref_valid(valid, ref, *, loc=None, ip=None) -> _ods_ir.Value:
  return IsRefValidOp(valid=valid, ref=ref, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class LoadOp(_ods_ir.OpView):
  OPERATION_NAME = "util.load"

  _ODS_REGIONS = (0, True)

  def __init__(self, val, ref, *, idx=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(ref)
    if idx is not None: operands.append(idx)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(val)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def ref(self):
    return self.operation.operands[0]

  @builtins.property
  def idx(self):
    return None if len(self.operation.operands) < 2 else self.operation.operands[1]

  @builtins.property
  def val(self):
    return self.operation.results[0]

def load(val, ref, *, idx=None, loc=None, ip=None) -> _ods_ir.Value:
  return LoadOp(val=val, ref=ref, idx=idx, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class PackOp(_ods_ir.OpView):
  OPERATION_NAME = "util.pack"

  _ODS_REGIONS = (0, True)

  def __init__(self, tuple, vals, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.extend(_get_op_results_or_values(vals))
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(tuple)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def vals(self):
    _ods_variadic_group_length = len(self.operation.operands) - 1 + 1
    return self.operation.operands[0:0 + _ods_variadic_group_length]

  @builtins.property
  def tuple(self):
    return self.operation.results[0]

def pack(tuple, vals, *, loc=None, ip=None) -> _ods_ir.Value:
  return PackOp(tuple=tuple, vals=vals, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class PtrTagMatches(_ods_ir.OpView):
  OPERATION_NAME = "util.ptr_tag_matches"

  _ODS_REGIONS = (0, True)

  def __init__(self, matches, ref, hash, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(ref)
    operands.append(hash)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(matches)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def ref(self):
    return self.operation.operands[0]

  @builtins.property
  def hash(self):
    return self.operation.operands[1]

  @builtins.property
  def matches(self):
    return self.operation.results[0]

def ptr_tag_matches(matches, ref, hash, *, loc=None, ip=None) -> _ods_ir.Value:
  return PtrTagMatches(matches=matches, ref=ref, hash=hash, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class SizeOfOp(_ods_ir.OpView):
  OPERATION_NAME = "util.sizeof"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, type_, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["type"] = (type_ if (
    isinstance(type_, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('TypeAttr')) else
      _ods_ir.AttrBuilder.get('TypeAttr')(type_, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def type_(self):
    return self.operation.attributes["type"]

  @type_.setter
  def type_(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["type"] = value

  @builtins.property
  def res(self):
    return self.operation.results[0]

def sizeof(res, type_, *, loc=None, ip=None) -> _ods_ir.Value:
  return SizeOfOp(res=res, type_=type_, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class StoreOp(_ods_ir.OpView):
  OPERATION_NAME = "util.store"

  _ODS_REGIONS = (0, True)

  def __init__(self, val, ref, *, idx=None, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(val)
    operands.append(ref)
    if idx is not None: operands.append(idx)
    _ods_context = _ods_get_default_loc_context(loc)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def val(self):
    return self.operation.operands[0]

  @builtins.property
  def ref(self):
    return self.operation.operands[1]

  @builtins.property
  def idx(self):
    return None if len(self.operation.operands) < 3 else self.operation.operands[2]

def store(val, ref, *, idx=None, loc=None, ip=None) -> _ods_ir.Operation:
  return StoreOp(val=val, ref=ref, idx=idx, loc=loc, ip=ip)

@_ods_cext.register_operation(_Dialect)
class ToGenericMemrefOp(_ods_ir.OpView):
  OPERATION_NAME = "util.to_generic_memref"

  _ODS_REGIONS = (0, True)

  def __init__(self, ref, memref, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(memref)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(ref)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def memref(self):
    return self.operation.operands[0]

  @builtins.property
  def ref(self):
    return self.operation.results[0]

def to_generic_memref(ref, memref, *, loc=None, ip=None) -> _ods_ir.Value:
  return ToGenericMemrefOp(ref=ref, memref=memref, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class ToMemrefOp(_ods_ir.OpView):
  OPERATION_NAME = "util.to_memref"

  _ODS_REGIONS = (0, True)

  def __init__(self, memref, ref, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(ref)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(memref)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def ref(self):
    return self.operation.operands[0]

  @builtins.property
  def memref(self):
    return self.operation.results[0]

def to_memref(memref, ref, *, loc=None, ip=None) -> _ods_ir.Value:
  return ToMemrefOp(memref=memref, ref=ref, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class TupleElementPtrOp(_ods_ir.OpView):
  OPERATION_NAME = "util.tupleelementptr"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, ref, idx, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(ref)
    _ods_context = _ods_get_default_loc_context(loc)
    attributes["idx"] = (idx if (
    isinstance(idx, _ods_ir.Attribute) or
    not _ods_ir.AttrBuilder.contains('I32Attr')) else
      _ods_ir.AttrBuilder.get('I32Attr')(idx, context=_ods_context))
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def ref(self):
    return self.operation.operands[0]

  @builtins.property
  def idx(self):
    return self.operation.attributes["idx"]

  @idx.setter
  def idx(self, value):
    if value is None:
      raise ValueError("'None' not allowed as value for mandatory attributes")
    self.operation.attributes["idx"] = value

  @builtins.property
  def res(self):
    return self.operation.results[0]

def tupleelementptr(res, ref, idx, *, loc=None, ip=None) -> _ods_ir.Value:
  return TupleElementPtrOp(res=res, ref=ref, idx=idx, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class UnPackOp(_ods_ir.OpView):
  OPERATION_NAME = "util.unpack"

  _ODS_REGIONS = (0, True)

  def __init__(self, vals, tuple, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(tuple)
    _ods_context = _ods_get_default_loc_context(loc)
    results.extend(vals)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def tuple(self):
    return self.operation.operands[0]

  @builtins.property
  def vals(self):
    _ods_variadic_group_length = len(self.operation.results) - 1 + 1
    return self.operation.results[0:0 + _ods_variadic_group_length]

def unpack(vals, tuple, *, loc=None, ip=None) -> _ods_ir.Value:
  return _get_op_result_or_op_results(UnPackOp(vals=vals, tuple=tuple, loc=loc, ip=ip))

@_ods_cext.register_operation(_Dialect)
class UnTagPtr(_ods_ir.OpView):
  OPERATION_NAME = "util.untag_ptr"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, ref, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(ref)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def ref(self):
    return self.operation.operands[0]

  @builtins.property
  def res(self):
    return self.operation.results[0]

def untag_ptr(res, ref, *, loc=None, ip=None) -> _ods_ir.Value:
  return UnTagPtr(res=res, ref=ref, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class UndefOp(_ods_ir.OpView):
  OPERATION_NAME = "util.undef"

  _ODS_REGIONS = (0, True)

  def __init__(self, res, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(res)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def res(self):
    return self.operation.results[0]

def undef(res, *, loc=None, ip=None) -> _ods_ir.Value:
  return UndefOp(res=res, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class VarLenCmp(_ods_ir.OpView):
  OPERATION_NAME = "util.varlen32_cmp"

  _ODS_REGIONS = (0, True)

  def __init__(self, eq, needs_detailed_eval, left, right, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(left)
    operands.append(right)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(eq)
    results.append(needs_detailed_eval)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def left(self):
    return self.operation.operands[0]

  @builtins.property
  def right(self):
    return self.operation.operands[1]

  @builtins.property
  def eq(self):
    return self.operation.results[0]

  @builtins.property
  def needs_detailed_eval(self):
    return self.operation.results[1]

def varlen32_cmp(eq, needs_detailed_eval, left, right, *, loc=None, ip=None) -> _Sequence[_ods_ir.Value]:
  return VarLenCmp(eq=eq, needs_detailed_eval=needs_detailed_eval, left=left, right=right, loc=loc, ip=ip).results

@_ods_cext.register_operation(_Dialect)
class VarLenGetLen(_ods_ir.OpView):
  OPERATION_NAME = "util.varlen32_getlen"

  _ODS_REGIONS = (0, True)

  def __init__(self, len, varlen, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(varlen)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(len)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def varlen(self):
    return self.operation.operands[0]

  @builtins.property
  def len(self):
    return self.operation.results[0]

def varlen32_getlen(len, varlen, *, loc=None, ip=None) -> _ods_ir.Value:
  return VarLenGetLen(len=len, varlen=varlen, loc=loc, ip=ip).result

@_ods_cext.register_operation(_Dialect)
class VarLenTryCheapHash(_ods_ir.OpView):
  OPERATION_NAME = "util.varlen32_try_cheap_hash"

  _ODS_REGIONS = (0, True)

  def __init__(self, complete, hash, varlen, *, loc=None, ip=None):
    operands = []
    results = []
    attributes = {}
    regions = None
    operands.append(varlen)
    _ods_context = _ods_get_default_loc_context(loc)
    results.append(complete)
    results.append(hash)
    _ods_successors = None
    super().__init__(self.OPERATION_NAME, self._ODS_REGIONS, self._ODS_OPERAND_SEGMENTS, self._ODS_RESULT_SEGMENTS, attributes=attributes, results=results, operands=operands, successors=_ods_successors, regions=regions, loc=loc, ip=ip)

  @builtins.property
  def varlen(self):
    return self.operation.operands[0]

  @builtins.property
  def complete(self):
    return self.operation.results[0]

  @builtins.property
  def hash(self):
    return self.operation.results[1]

def varlen32_try_cheap_hash(complete, hash, varlen, *, loc=None, ip=None) -> _Sequence[_ods_ir.Value]:
  return VarLenTryCheapHash(complete=complete, hash=hash, varlen=varlen, loc=loc, ip=ip).results
