Metadata-Version: 2.4
Name: libfake
Version: 1.0.3
Summary: A professional library for generating realistic fake names and emails
Author-email: Mmdrza <Pymmdrza@gmail.com>
Maintainer-email: Mmdrza <Pymmdrza@gmail.com>
License: MIT
Project-URL: Homepage, https://github.com/libfake/libfake
Project-URL: Repository, https://github.com/libfake/libfake
Project-URL: Issues, https://github.com/libfake/libfake/issues
Project-URL: Documentation, https://github.com/libfake/libfake#readme
Keywords: fake,data,generator,names,email,testing,mock
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: Testing
Classifier: Topic :: Utilities
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: rich>=10.0.0
Provides-Extra: dev
Requires-Dist: pytest>=6.0; extra == "dev"
Requires-Dist: pytest-cov>=2.10.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: flake8>=4.0.0; extra == "dev"
Requires-Dist: mypy>=0.910; extra == "dev"
Provides-Extra: test
Requires-Dist: pytest>=6.0; extra == "test"
Requires-Dist: pytest-cov>=2.10.0; extra == "test"
Provides-Extra: lint
Requires-Dist: black>=22.0.0; extra == "lint"
Requires-Dist: flake8>=4.0.0; extra == "lint"
Requires-Dist: mypy>=0.910; extra == "lint"
Requires-Dist: isort>=5.10.0; extra == "lint"
Dynamic: license-file

# libfake

First name , Surname and Email Fake Mode in Python with Library Fake.

## Install

```bash
pip install libfake
```
in mac or linux use `pip3` : `pip3 install libfake`

---

## Usage

```python
from libfake import FakeName
fake = FakeName()
```

### First Name and Surname

```python
# Random First name
first_name = fake.get_firstname()
# Random Surname
surname = fake.get_surname()
```
### First name , Surname and Email

```python
first_name = fake.get_firstname()
surname = fake.get_surname()
# Generate email From first name and surname.
email = fake.generate_email(first_name, surname)
```

### Random Full Name 

```python
full_name = fake.get_full_name()
```

### Random Email

```python
random_email = fake.generate_email()
```

### Email for a Specific Name

```python
specific_email = fake.generate_email("Alice", "Wonderland")
```

### Custom Provider

```python
provider_custom = "example.com"
# Create a new, custom-configured instance (resets the singleton)
custom_fake = fake.get_details(first_name="Alice", surname="Smith", provider=provider_custom)
# return dict details , if need just email:
custom_email = custom_fake.get('email')
```


## Programmer

Programmer and Owner By : [Pymmdrza](https://github.com/Pymmdrza)

