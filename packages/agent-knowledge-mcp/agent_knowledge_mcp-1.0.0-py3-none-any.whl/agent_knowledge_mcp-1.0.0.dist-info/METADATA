Metadata-Version: 2.4
Name: agent-knowledge-mcp
Version: 1.0.0
Summary: A comprehensive MCP server for AI knowledge management with Elasticsearch, file operations, and version control
Project-URL: Homepage, https://github.com/itshare4u/AgentKnowledgeMCP
Project-URL: Repository, https://github.com/itshare4u/AgentKnowledgeMCP
Project-URL: Documentation, https://github.com/itshare4u/AgentKnowledgeMCP#readme
Project-URL: Issues, https://github.com/itshare4u/AgentKnowledgeMCP/issues
Author-email: Agent Knowledge MCP Contributors <contributors@agent-knowledge-mcp.dev>
License: MIT
License-File: LICENSE
Keywords: ai,automation,elasticsearch,knowledge-management,mcp
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.8
Requires-Dist: docker>=7.0.0
Requires-Dist: elasticsearch<8.0.0,>=7.0.0
Requires-Dist: mcp>=1.10.1
Requires-Dist: requests>=2.32.0
Provides-Extra: dev
Requires-Dist: black>=23.0.0; extra == 'dev'
Requires-Dist: isort>=5.12.0; extra == 'dev'
Requires-Dist: mypy>=1.5.0; extra == 'dev'
Requires-Dist: pytest-asyncio>=0.21.0; extra == 'dev'
Requires-Dist: pytest>=7.0.0; extra == 'dev'
Description-Content-Type: text/markdown

# Elasticsearch MCP Server üîç

**The complete knowledge management solution**  
Powerful Model Context Protocol server for Elasticsearch integration with comprehensive file management and version control.

[![Python Version](https://img.shields.io/badge/python-3.8%2B-blue.svg)](https://python.org)
[![MCP Compatible](https://img.shields.io/badge/MCP-Compatible-green.svg)](https://modelcontextprotocol.io)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)

## üöÄ What is Elasticsearch MCP Server?

The most comprehensive MCP server that transforms your AI assistant into a powerful knowledge management system. **The key advantage? It combines everything you need**‚ÄîElasticsearch search, file operations, document validation, and version control in one unified solution.

**üîë Complete Knowledge Management:**
- ‚úÖ **Elasticsearch Integration**: Full-featured search, indexing, and document management
- ‚úÖ **File System Control**: Comprehensive file operations with cross-platform support
- ‚úÖ **Document Validation**: Schema-enforced document structure with auto-templates
- ‚úÖ **Version Control**: Git and SVN support with intelligent file tracking
- ‚úÖ **Security First**: Sandboxed operations with configurable restrictions
- ‚úÖ **Production Ready**: Battle-tested with comprehensive error handling

**‚ú® Key Benefits:**
- üéØ **28 Powerful Tools**: Everything from search to version control
- üîÑ **Universal AI Support**: Works with Claude, ChatGPT, Cursor, and any MCP-compatible AI
- üìä **Smart Document Management**: Auto-validation, templates, and structured data
- üõ°Ô∏è **Enterprise Security**: Path validation, access controls, and audit trails
- ‚ö° **Zero Dependencies**: Optional Elasticsearch - works standalone for file operations

## üåê AI Assistant Support

Works with **any MCP-compatible AI assistant**:
- ‚úÖ **Claude Desktop**
- ‚úÖ **ChatGPT Plus** (with MCP support)
- ‚úÖ **Cursor IDE**
- ‚úÖ **Windsurf**
- ‚úÖ **VS Code** (with MCP extension)
- ‚úÖ **Any MCP client**

Perfect for **developers** who want to automate knowledge management and **teams** who need structured document workflows!

## üé¨ What You Can Do

**Real workflows you can try today:**

### üìö Knowledge Management
- **"Search all documents for information about API authentication and create a comprehensive guide"**
- **"Index this technical document with proper categorization and tags"**
- **"Find all documents related to deployment and generate a deployment checklist"**
- **"Create a new document template for API documentation with required fields"**

### üìÅ File Operations & Organization
- **"Organize all markdown files by category and move them to appropriate directories"**
- **"Read all configuration files and create a settings summary document"**
- **"Find duplicate files in the project and list them for cleanup"**
- **"Create a project structure document listing all important files"**

### üîÑ Version Control & History
- **"Setup Git repository for this knowledge base and commit all current documents"**
- **"Check what changes were made to the user manual in the last version"**
- **"Commit these updated API docs with a descriptive message"**
- **"Show me the previous version of this configuration file"**

### ü§ñ Development & Documentation
- **"Index all code documentation and make it searchable"**
- **"Create a changelog from Git commit history"**
- **"Validate all documents follow our schema requirements"**
- **"Generate project documentation from README files"**

### üîç Advanced Search & Analysis
- **"Search across all documents and files for security-related information"**
- **"Find all TODO comments in code files and create a task list"**
- **"Analyze document metadata and generate a content report"**
- **"Search for outdated information and flag it for review"**

## ‚ö° Quick Start

### 1. Installation

**Option 1: Install with uv (recommended)**
```bash
# Install directly with uvx
uvx agent-knowledge-mcp

# Or install from GitHub
uvx --from git+https://github.com/itshare4u/AgentKnowledgeMCP.git agent-knowledge-mcp

# Or install as a tool
uv tool install git+https://github.com/itshare4u/AgentKnowledgeMCP.git
```

**Option 2: Traditional installation**
```bash
git clone https://github.com/itshare4u/AgentKnowledgeMCP.git
cd AgentKnowledgeMCP
pip install -r requirements.txt
```

### 2. Configuration
```bash
# Copy and edit configuration
cp src/config.json.example src/config.json
nano src/config.json
```

### 3. Connect to Your AI Assistant

**For Claude Desktop**, add to your `claude_desktop_config.json`:
```json
{
  "mcpServers": {
    "agent-knowledge": {
      "command": "uvx",
      "args": ["agent-knowledge-mcp"]
    }
  }
}
```

**Alternative (if installed manually):**
```json
{
  "mcpServers": {
    "agent-knowledge": {
      "command": "python3",
      "args": ["/path/to/AgentKnowledgeMCP/src/server.py"],
      "env": {}
    }
  }
}
```

**For Cursor**, add to settings:
```json
{
  "cursor.mcp.servers": [
    {
      "name": "agent-knowledge",
      "command": "uvx",
      "args": ["agent-knowledge-mcp"]
    }
  ]
}
```

**Alternative (if installed manually):**
```json
{
  "cursor.mcp.servers": [
    {
      "name": "agent-knowledge",
      "command": "python3",
      "args": ["/path/to/AgentKnowledgeMCP/src/server.py"],
      "workingDirectory": "/path/to/AgentKnowledgeMCP"
    }
  ]
}
```

**For VS Code**, install MCP extension and configure:
```json
{
  "mcp.servers": {
    "agent-knowledge": {
      "command": "uvx",
      "args": ["agent-knowledge-mcp"]
    }
  }
}
```

**Alternative (if installed manually):**
```json
{
  "mcp.servers": {
    "agent-knowledge": {
      "command": "python3",
      "args": ["/path/to/AgentKnowledgeMCP/src/server.py"],
      "cwd": "/path/to/AgentKnowledgeMCP"
    }
  }
}
```

**For Windsurf**, add to `~/.windsurf/config.json`:
```json
{
  "mcp": {
    "servers": {
      "agent-knowledge": {
        "command": "uvx",
        "args": ["agent-knowledge-mcp"]
      }
    }
  }
}
```

**Alternative (if installed manually):**
```json
{
  "mcp": {
    "servers": {
      "agent-knowledge": {
        "command": "python3",
        "args": ["/path/to/AgentKnowledgeMCP/src/server.py"],
        "env": {
          "PYTHONPATH": "/path/to/AgentKnowledgeMCP"
        }
      }
    }
  }
}
```

## ÔøΩ Quick VS Code Installation

For quick installation in VS Code, click the installation buttons below:

[![Install with UV in VS Code](https://img.shields.io/badge/VS_Code-UV-0098FF?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=agent-knowledge&inputs=%5B%5D&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22agent-knowledge-mcp%22%5D%7D) [![Install with UV in VS Code Insiders](https://img.shields.io/badge/VS_Code_Insiders-UV-24bfa5?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=agent-knowledge&inputs=%5B%5D&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22agent-knowledge-mcp%22%5D%7D&quality=insiders)

For manual installation, add the following JSON block to your User Settings (JSON) file in VS Code. You can do this by pressing `Ctrl + Shift + P` (or `Cmd + Shift + P` on macOS) and typing `Preferences: Open Settings (JSON)`.

Optionally, you can add it to a file called `.vscode/mcp.json` in your workspace. This will allow you to share the configuration with others.

> Note that the `mcp` key is needed when using the `mcp.json` file.

### UV Installation (Recommended)

```json
{
  "mcp": {
    "servers": {
      "agent-knowledge": {
        "command": "uvx",
        "args": ["agent-knowledge-mcp"]
      }
    }
  }
}
```

### Manual Installation

```json
{
  "mcp": {
    "inputs": [
      {
        "type": "promptString",
        "id": "server_path",
        "description": "Path to AgentKnowledgeMCP server.py",
        "default": "${workspaceFolder}/src/server.py"
      }
    ],
    "servers": {
      "agent-knowledge": {
        "command": "python3",
        "args": [
          "${input:server_path}"
        ],
        "cwd": "${workspaceFolder}"
      }
    }
  }
}
```

## ÔøΩüõ†Ô∏è Capabilities

Elasticsearch MCP Server provides **28 powerful tools** across 4 categories:

### üîç Elasticsearch Operations (9 tools)
- **Smart Search** - Multi-field queries with boosting and relevance scoring
- **Document Management** - Index, retrieve, update, delete with validation
- **Index Administration** - Create, configure, manage Elasticsearch indices
- **Schema Validation** - Enforce document structure and data types
- **Template Generation** - Auto-create document templates with required fields

### üìÅ File System Management (11 tools)  
- **File Operations** - Read, write, append, delete, move, copy with safety checks
- **Directory Management** - Create, list, navigate directory structures
- **Path Intelligence** - Relative/absolute path conversion and validation
- **File Discovery** - Search files by name, content, or metadata
- **Cross-Platform** - Windows, macOS, Linux compatibility

### üéõÔ∏è System Administration (5 tools)
- **Configuration Management** - Dynamic config reload and validation
- **Security Controls** - Access restrictions and path validation
- **Health Monitoring** - System status and Elasticsearch connectivity
- **Auto-Setup** - Intelligent Elasticsearch configuration
- **Environment Management** - Directory permissions and structure

### üîÑ Version Control (3 tools)
- **Repository Setup** - Git/SVN initialization with best practices
- **File Tracking** - Intelligent commit with change detection
- **History Access** - Retrieve any previous version of files
- **Multi-VCS** - Support for both Git and SVN workflows

## üí¨ Example Prompts to Try

Once everything is set up, try asking your AI:

**Knowledge Discovery:**
> *"Search all indexed documents for information about user authentication and summarize the key points"*

**Document Creation:**
> *"Create a new API documentation template and index it with proper categorization"*

**File Management:**
> *"Find all configuration files in the project and create a backup in the configs directory"*

**Version Control:**
> *"Setup version control for this knowledge base and commit all current documents with proper organization"*

**Content Analysis:**
> *"Analyze all markdown files for outdated information and create a list of files that need updates"*

**Project Documentation:**
> *"Read all README files in subdirectories and create a comprehensive project overview document"*

## üèóÔ∏è Architecture

```
AgentKnowledgeMCP/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ server.py                    # Main MCP server
‚îÇ   ‚îú‚îÄ‚îÄ config.json                  # Configuration
‚îÇ   ‚îú‚îÄ‚îÄ config.json.example          # Configuration template
‚îÇ   ‚îú‚îÄ‚îÄ tools.py                     # Tool definitions (28 tools)
‚îÇ   ‚îú‚îÄ‚îÄ elasticsearch_handlers.py    # Elasticsearch operations
‚îÇ   ‚îú‚îÄ‚îÄ file_handlers.py            # File system operations
‚îÇ   ‚îú‚îÄ‚îÄ admin_handlers.py           # Admin operations
‚îÇ   ‚îú‚îÄ‚îÄ version_control_handlers.py # VCS operations
‚îÇ   ‚îú‚îÄ‚îÄ document_schema.py          # Document validation
‚îÇ   ‚îú‚îÄ‚îÄ elasticsearch_client.py     # ES client management
‚îÇ   ‚îî‚îÄ‚îÄ security.py                 # Security & validation
‚îú‚îÄ‚îÄ tests/
‚îÇ   ‚îú‚îÄ‚îÄ run_all_tests.py            # Test runner
‚îÇ   ‚îú‚îÄ‚îÄ test_file_paths.py          # File operations tests
‚îÇ   ‚îú‚îÄ‚îÄ test_validation.py          # Document validation tests
‚îÇ   ‚îú‚îÄ‚îÄ test_version_control.py     # VCS comprehensive tests
‚îÇ   ‚îú‚îÄ‚îÄ test_simple_vcs.py          # VCS demo tests
‚îÇ   ‚îú‚îÄ‚îÄ demo_agent_workflow.py      # Complete workflow demo
‚îÇ   ‚îú‚îÄ‚îÄ quick_test.py               # Quick functionality check
‚îÇ   ‚îî‚îÄ‚îÄ README.md                   # Test documentation
‚îú‚îÄ‚îÄ .knowledges/                    # Knowledge base storage
‚îú‚îÄ‚îÄ setup.py                       # Quick setup script
‚îú‚îÄ‚îÄ requirements.txt                # Python dependencies
‚îú‚îÄ‚îÄ CHANGELOG.md                    # Version history
‚îî‚îÄ‚îÄ README.md                      # This file
```

```mermaid
graph TD
    A[AI Assistant] --> B[MCP Server]
    B --> C[Elasticsearch Client]
    B --> D[File System Handler]
    B --> E[Version Control Handler]
    B --> F[Document Validator]
    
    C --> G[Elasticsearch Cluster]
    D --> H[Local File System]
    E --> I[Git/SVN Repository]
    F --> J[Schema Validation]
```

**Modern, Modular Design:**
1. **MCP Protocol** - Standard communication with AI assistants
2. **Elasticsearch Integration** - Full-featured search and indexing
3. **File System Safety** - Sandboxed operations with validation
4. **Version Control** - Git/SVN support with intelligent workflows
5. **Document Validation** - Schema enforcement and template generation

## üîí Security & Privacy

**Enterprise-grade security**:
- ‚úÖ **Sandboxed Operations** - All file operations restricted to configured directories
- ‚úÖ **Path Validation** - Prevent directory traversal and unauthorized access
- ‚úÖ **Access Controls** - Configurable permissions and restrictions
- ‚úÖ **Audit Trails** - Full logging of operations and changes
- ‚úÖ **No Cloud Dependencies** - Everything runs locally

**Configuration Example:**
```json
{
  "security": {
    "allowed_base_directory": "/your/safe/directory",
    "restrict_file_operations": true,
    "log_all_operations": true
  }
}
```

## üìä Tool Reference

| Category | Count | Tools |
|----------|-------|-------|
| **Elasticsearch** | 9 | search, index_document, create_index, get_document, delete_document, list_indices, delete_index, validate_document_schema, create_document_template |
| **File System** | 11 | read_file, write_file, append_file, delete_file, move_file, copy_file, list_directory, create_directory, delete_directory, file_info, search_files |
| **Administration** | 5 | get_allowed_directory, set_allowed_directory, reload_config, setup_elasticsearch, elasticsearch_status |
| **Version Control** | 3 | setup_version_control, commit_file, get_previous_file_version |

**Total: 28 tools** for comprehensive knowledge management!

## üß™ Testing & Validation

**Comprehensive test suite included:**

```bash
# Run all tests
python3 tests/run_all_tests.py

# Individual tests
python3 tests/test_file_paths.py       # File operations
python3 tests/test_validation.py       # Document validation  
python3 tests/test_version_control.py  # Version control
python3 tests/test_simple_vcs.py       # VCS demo

# Demo workflows
python3 tests/demo_agent_workflow.py   # Complete workflow
python3 tests/quick_test.py            # Quick check
```

**Quality Assurance:**
- ‚úÖ **Unit Tests** - All core functionality tested
- ‚úÖ **Integration Tests** - End-to-end workflow validation
- ‚úÖ **Error Handling** - Comprehensive error scenarios covered
- ‚úÖ **Cross-Platform** - Tested on Windows, macOS, Linux

## ü§ù Contributing

Love to have your help making Elasticsearch MCP Server even better!

### Quick Development Setup
```bash
git clone https://github.com/yourusername/AgentKnowledgeMCP.git
cd AgentKnowledgeMCP

# Install dependencies
pip install -r requirements.txt

# Run tests
python3 test_file_paths.py

# Start development server
python3 src/server.py
```

### Ways to Contribute
- üêõ **Report bugs** via [GitHub Issues](https://github.com/yourusername/AgentKnowledgeMCP/issues)
- üí° **Suggest features** for new tools or capabilities
- üîß **Add new tools** or improve existing ones
- üìñ **Improve documentation** and examples
- üß™ **Test with different AI assistants** and share results

### Development Guidelines
- **Modular Design** - Each tool category in separate handlers
- **Comprehensive Testing** - Test all new functionality
- **Security First** - Validate all inputs and file operations
- **Cross-Platform** - Ensure compatibility across operating systems

## üìù License

MIT License - see [LICENSE](LICENSE) for details.

---

**Ready to supercharge your AI assistant with comprehensive knowledge management? Get started today! üöÄ**

*Transform your AI into a powerful knowledge management system with Elasticsearch search, intelligent file operations, and version control - all in one unified MCP server.*
