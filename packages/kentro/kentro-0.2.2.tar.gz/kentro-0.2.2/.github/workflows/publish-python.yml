# Publish Rust-based Python package to PyPI
name: Publish Python üêç package üì¶ to PyPI and TestPyPI

on:
  workflow_dispatch:
    inputs:
      releasetype:
        description: "Is this a 'release' or a 'test'?"
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - release

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - name: Display release type
        run: echo "Deploying ${{ github.event.inputs.releasetype }} to PyPI"

      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --features python
          sccache: 'true'
          manylinux: auto

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}-${{ matrix.python-version }}
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - name: Display release type
        run: echo "Deploying ${{ github.event.inputs.releasetype }} to PyPI"

      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --features python
          sccache: 'true'

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}-${{ matrix.python-version }}
          path: dist

  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64, aarch64]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
    steps:
      - name: Display release type
        run: echo "Deploying ${{ github.event.inputs.releasetype }} to PyPI"

      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist --features python
          sccache: 'true'

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}-${{ matrix.python-version }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Display release type
        run: echo "Deploying ${{ github.event.inputs.releasetype }} to PyPI"

      - uses: actions/checkout@v4

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist --features python

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [linux, windows, macos, sdist]
    steps:
      - name: Display release type
        run: echo "Deploying ${{ github.event.inputs.releasetype }} to PyPI"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Move all wheels to dist directory
        run: |
          mkdir -p dist
          find artifacts -name "*.whl" -exec mv {} dist/ \;
          find artifacts -name "*.tar.gz" -exec mv {} dist/ \;

      - name: List built packages
        run: ls -la dist/

      - name: Publish to TestPyPI
        if: github.event.inputs.releasetype == 'test'
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.TEST_PYPI_PASSWORD }}
          MATURIN_REPOSITORY: testpypi
        with:
          command: upload
          args: --non-interactive --skip-existing dist/*

      - name: Publish to PyPI
        if: github.event.inputs.releasetype == 'release'
        uses: PyO3/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_PASSWORD }}
        with:
          command: upload
          args: --non-interactive --skip-existing dist/* 